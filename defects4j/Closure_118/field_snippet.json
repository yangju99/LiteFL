[
    {
        "class_name": "com.google.javascript.jscomp.Proxy",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.Proxy.nextConvention",
        "snippet": "    protected final CodingConvention nextConvention;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FREE_CALL",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LENGTH",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INPUT_ID",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SLASH_V",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INFERRED_FUNCTION",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CHANGE_TIME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.REFLECTED_OBJECT",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 109,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 109,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "    private double number;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "    private String str;",
        "begin_line": 255,
        "end_line": 255,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 269,
        "end_line": 269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.next",
        "snippet": "    private final PropListItem next;",
        "begin_line": 271,
        "end_line": 271,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.propType",
        "snippet": "    private final int propType;",
        "begin_line": 272,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 296,
        "end_line": 296,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.objectValue",
        "snippet": "    private final Object objectValue;",
        "begin_line": 298,
        "end_line": 298,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 328,
        "end_line": 328,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.intValue",
        "snippet": "    final int intValue;",
        "begin_line": 330,
        "end_line": 330,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "  int type;              // type of the node; Token.NAME for example",
        "begin_line": 1040,
        "end_line": 1040,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "  Node next;             // next sibling",
        "begin_line": 1041,
        "end_line": 1041,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "  private Node first;    // first element of a linked list of children",
        "begin_line": 1042,
        "end_line": 1042,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "  private Node last;     // last element of a linked list of children",
        "begin_line": 1043,
        "end_line": 1043,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "  private PropListItem propListHead;",
        "begin_line": 1051,
        "end_line": 1051,
        "comment": "\n   * Linked list of properties. Since vast majority of nodes would have\n   * no more then 2 properties, linked list saves memory and provides\n   * fast lookup. If this does not holds, propListHead can be replaced\n   * by UintMap.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "  public static final int COLUMN_BITS = 12;",
        "begin_line": 1061,
        "end_line": 1061,
        "comment": "\n   * COLUMN_BITS represents how many of the lower-order bits of\n   * sourcePosition are reserved for storing the column number.\n   * Bits above these store the line number.\n   * This gives us decent position information for everything except\n   * files already passed through a minimizer, where lines might\n   * be longer than 4096 characters.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "  public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1068,
        "end_line": 1068,
        "comment": "\n   * MAX_COLUMN_NUMBER represents the maximum column number that can\n   * be represented.  JSCompiler's modifications to Rhino cause all\n   * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "  public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1075,
        "end_line": 1075,
        "comment": "\n   * COLUMN_MASK stores a value where bits storing the column number\n   * are set, and bits storing the line are not set.  It's handy for\n   * separating column number from line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "  private int sourcePosition;",
        "begin_line": 1083,
        "end_line": 1083,
        "comment": "\n   * Source position of this node. The position is encoded with the\n   * column number in the low 12 bits of the integer, and the line\n   * number in the rest.  Create some handy constants so we can change this\n   * size if we want.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "  private JSType jsType;",
        "begin_line": 1085,
        "end_line": 1085,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "  private Node parent;",
        "begin_line": 1087,
        "end_line": 1087,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "    private final Node start;",
        "begin_line": 1265,
        "end_line": 1265,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "    private Node current;",
        "begin_line": 1266,
        "end_line": 1266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "    private boolean used;",
        "begin_line": 1267,
        "end_line": 1267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "    private Node cur;",
        "begin_line": 1350,
        "end_line": 1350,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",
        "snippet": "  public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;",
        "begin_line": 2004,
        "end_line": 2004,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",
        "snippet": "  public static final int FLAG_THIS_UNMODIFIED = 2;",
        "begin_line": 2005,
        "end_line": 2005,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",
        "snippet": "  public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;",
        "begin_line": 2006,
        "end_line": 2006,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_NO_THROWS",
        "snippet": "  public static final int FLAG_NO_THROWS = 8;",
        "begin_line": 2007,
        "end_line": 2007,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",
        "snippet": "  public static final int FLAG_LOCAL_RESULTS = 16;",
        "begin_line": 2008,
        "end_line": 2008,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",
        "snippet": "  public static final int SIDE_EFFECTS_FLAGS_MASK = 31;",
        "begin_line": 2010,
        "end_line": 2010,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",
        "snippet": "  public static final int SIDE_EFFECTS_ALL = 0;",
        "begin_line": 2012,
        "end_line": 2012,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",
        "snippet": "  public static final int NO_SIDE_EFFECTS =\n    FLAG_GLOBAL_STATE_UNMODIFIED\n    | FLAG_THIS_UNMODIFIED\n    | FLAG_ARGUMENTS_UNMODIFIED\n    | FLAG_NO_THROWS;",
        "begin_line": 2013,
        "end_line": 2017,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SideEffectFlags",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SideEffectFlags.value",
        "snippet": "    private int value = Node.SIDE_EFFECTS_ALL;",
        "begin_line": 2049,
        "end_line": 2049,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "    final Node nodeA;",
        "begin_line": 2191,
        "end_line": 2191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "    final Node nodeB;",
        "begin_line": 2192,
        "end_line": 2192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.templateTypeMap",
        "snippet": "  protected TemplateTypeMap templateTypeMap;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.inTemplatedCheckVisit",
        "snippet": "  private boolean inTemplatedCheckVisit = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.CAN_CAST_TO_VISITOR",
        "snippet": "  private static final CanCastToVisitor CAN_CAST_TO_VISITOR =\n      new CanCastToVisitor();",
        "begin_line": 74,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 80,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 86,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 94,
        "end_line": 99,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 1392,
        "end_line": 1392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 1393,
        "end_line": 1393,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InferJSDocInfo",
        "src_path": "src/com/google/javascript/jscomp/InferJSDocInfo.java",
        "signature": "com.google.javascript.jscomp.InferJSDocInfo.inExterns",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private boolean inExterns;",
        "begin_line": 65,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",
        "snippet": "  static final String SINGLETON_MODULE_NAME = \"[singleton]\";",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
        "begin_line": 86,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",
        "snippet": "  static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
        "begin_line": 91,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MISSING_MODULE_ERROR",
        "snippet": "  static final DiagnosticType MISSING_MODULE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"unknown module \\\"{0}\\\" specified in entry point spec\");",
        "begin_line": 95,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.PARSING_PASS_NAME",
        "snippet": "  static final String PARSING_PASS_NAME = \"parseInputs\";",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Used in PerformanceTracker"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",
        "snippet": "  private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 102,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.options",
        "snippet": "  CompilerOptions options = null;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.passes",
        "snippet": "  private PassConfig passes = null;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externs",
        "snippet": "  private List<CompilerInput> externs;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The externs inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.modules",
        "snippet": "  private List<JSModule> modules;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.moduleGraph",
        "snippet": "  private JSModuleGraph moduleGraph;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " 2 modules, because we use this as a signal for which passes to run."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputs",
        "snippet": "  private List<CompilerInput> inputs;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " The JS source inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " error manager to which error management is delegated"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.warningsGuard",
        "snippet": "  private WarningsGuard warningsGuard;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " Warnings guard for filtering warnings."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.injectedLibraries",
        "snippet": "  private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();",
        "begin_line": 130,
        "end_line": 130,
        "comment": " the library, so code can be inserted after."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externsRoot",
        "snippet": "  Node externsRoot;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Parse tree root nodes"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.jsRoot",
        "snippet": "  Node jsRoot;",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externAndJsRoot",
        "snippet": "  Node externAndJsRoot;",
        "begin_line": 135,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputsById",
        "snippet": "  private Map<InputId, CompilerInput> inputsById;",
        "begin_line": 137,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sourceMap",
        "snippet": "  private SourceMap sourceMap;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The source code map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externExports",
        "snippet": "  private String externExports = null;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " The externs created from the exports.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.uniqueNameId",
        "snippet": "  private int uniqueNameId = 0;",
        "begin_line": 149,
        "end_line": 149,
        "comment": "\n   * Ids for function inlining so that each declared name remains\n   * unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences",
        "snippet": "  private boolean hasRegExpGlobalReferences = true;",
        "begin_line": 155,
        "end_line": 155,
        "comment": "\n   * Whether to assume there are references to the RegExp Global object\n   * properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.functionInformationMap",
        "snippet": "  private FunctionInformationMap functionInformationMap;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " The function information map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.debugLog",
        "snippet": "  private final StringBuilder debugLog = new StringBuilder();",
        "begin_line": 161,
        "end_line": 161,
        "comment": " Debugging information "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultCodingConvention",
        "snippet": "  CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
        "begin_line": 164,
        "end_line": 164,
        "comment": " Detects Google-specific coding conventions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeRegistry",
        "snippet": "  private JSTypeRegistry typeRegistry;",
        "begin_line": 166,
        "end_line": 166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.parserConfig",
        "snippet": "  private Config parserConfig = null;",
        "begin_line": 167,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.abstractInterpreter",
        "snippet": "  private ReverseAbstractInterpreter abstractInterpreter;",
        "begin_line": 169,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeValidator",
        "snippet": "  private TypeValidator typeValidator;",
        "begin_line": 170,
        "end_line": 170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.phaseOptimizer",
        "snippet": "  private PhaseOptimizer phaseOptimizer = null;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " running, or which functions have been changed by optimizations"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.tracker",
        "snippet": "  public PerformanceTracker tracker;",
        "begin_line": 175,
        "end_line": 175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.oldErrorReporter",
        "snippet": "  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
        "begin_line": 178,
        "end_line": 179,
        "comment": " The oldErrorReporter exists so we can get errors from the JSTypeRegistry."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultErrorReporter",
        "snippet": "  private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
        "begin_line": 182,
        "end_line": 183,
        "comment": " This error reporter gets the messages from the current Rhino parser."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",
        "snippet": "  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
        "begin_line": 186,
        "end_line": 188,
        "comment": " Error strings used for reporting JSErrors "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",
        "snippet": "  public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
        "begin_line": 189,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",
        "snippet": "  private static final long COMPILER_STACK_SIZE = (1 << 21); // About 2MB",
        "begin_line": 195,
        "end_line": 195,
        "comment": " About 2MB"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.compilerExecutor",
        "snippet": "  private static final ExecutorService compilerExecutor =\n      Executors.newCachedThreadPool(new ThreadFactory() {\n    @Override public Thread newThread(Runnable r) {\n      return new Thread(null, r, \"jscompiler\", COMPILER_STACK_SIZE);\n    }\n  });",
        "begin_line": 205,
        "end_line": 210,
        "comment": "\n   * Under JRE 1.6, the JS Compiler overflows the stack when running on some\n   * large or complex JS code. When threads are available, we run all compile\n   * jobs on a separate thread with a larger stack.\n   *\n   * That way, we don't have to increase the stack size for *every* thread\n   * (which is what -Xss does).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.compilerThread",
        "snippet": "  private Thread compilerThread = null;",
        "begin_line": 215,
        "end_line": 215,
        "comment": "\n   * Use a dedicated compiler thread per Compiler instance.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.useThreads",
        "snippet": "  private boolean useThreads = true;",
        "begin_line": 218,
        "end_line": 218,
        "comment": " Whether to use threads. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
        "begin_line": 226,
        "end_line": 227,
        "comment": "\n   * Logger for the whole com.google.javascript.jscomp domain -\n   * setting configuration for this logger affects all loggers\n   *  in other classes within the compiler.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.outStream",
        "snippet": "  private final PrintStream outStream;",
        "begin_line": 229,
        "end_line": 229,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.globalRefMap",
        "snippet": "  private GlobalVarReferenceMap globalRefMap = null;",
        "begin_line": 231,
        "end_line": 231,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.progress",
        "snippet": "  private volatile double progress = 0.0;",
        "begin_line": 233,
        "end_line": 233,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.lastPassName",
        "snippet": "  private String lastPassName;",
        "begin_line": 234,
        "end_line": 234,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
        "begin_line": 448,
        "end_line": 450,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
        "begin_line": 452,
        "end_line": 454,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
        "begin_line": 523,
        "end_line": 524,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
        "begin_line": 525,
        "end_line": 527,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sanityCheck",
        "snippet": "  private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
        "begin_line": 869,
        "end_line": 875,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 931,
        "end_line": 931,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 932,
        "end_line": 932,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.syntheticCodeId",
        "snippet": "  private int syntheticCodeId = 0;",
        "begin_line": 1571,
        "end_line": 1571,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.sb",
        "snippet": "    private final StringBuilder sb = new StringBuilder();",
        "begin_line": 1831,
        "end_line": 1831,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.lineCount",
        "snippet": "    private int lineCount = 0;",
        "begin_line": 1832,
        "end_line": 1832,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.colCount",
        "snippet": "    private int colCount = 0;",
        "begin_line": 1833,
        "end_line": 1833,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.recentChange",
        "snippet": "  protected final RecentChange recentChange = new RecentChange();",
        "begin_line": 1982,
        "end_line": 1982,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.codeChangeHandlers",
        "snippet": "  private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
        "begin_line": 1983,
        "end_line": 1984,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",
        "snippet": "  static final String SYNTHETIC_EXTERNS = \"{SyntheticVarsDeclar}\";",
        "begin_line": 1987,
        "end_line": 1987,
        "comment": " Name of the synthetic input that holds synthesized externs. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.synthesizedExternsInput",
        "snippet": "  private CompilerInput synthesizedExternsInput = null;",
        "begin_line": 1989,
        "end_line": 1989,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 2344,
        "end_line": 2344,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externsRoot",
        "snippet": "    Node externsRoot;",
        "begin_line": 2346,
        "end_line": 2346,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.jsRoot",
        "snippet": "    private Node jsRoot;",
        "begin_line": 2347,
        "end_line": 2347,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externs",
        "snippet": "    private List<CompilerInput> externs;",
        "begin_line": 2348,
        "end_line": 2348,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.inputs",
        "snippet": "    private List<CompilerInput> inputs;",
        "begin_line": 2349,
        "end_line": 2349,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.modules",
        "snippet": "    private List<JSModule> modules;",
        "begin_line": 2350,
        "end_line": 2350,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.passConfigState",
        "snippet": "    private PassConfig.State passConfigState;",
        "begin_line": 2351,
        "end_line": 2351,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.typeRegistry",
        "snippet": "    private JSTypeRegistry typeRegistry;",
        "begin_line": 2352,
        "end_line": 2352,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.lifeCycleStage",
        "snippet": "    private AbstractCompiler.LifeCycleStage lifeCycleStage;",
        "begin_line": 2353,
        "end_line": 2353,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.injectedLibraries",
        "snippet": "    private Map<String, Node> injectedLibraries;",
        "begin_line": 2354,
        "end_line": 2354,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "signature": "com.google.javascript.jscomp.AstValidator.violationHandler",
        "snippet": "  private final ViolationHandler violationHandler;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.fnName",
        "snippet": "  private final String fnName;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.errorRoot",
        "snippet": "  private final Node errorRoot;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.scope",
        "snippet": "  private final Scope scope;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.contents",
        "snippet": "  private FunctionContents contents = UnknownFunctionContents.get();",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.returnTypeInferred",
        "snippet": "  private boolean returnTypeInferred = false;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = null;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.baseType",
        "snippet": "  private ObjectType baseType = null;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.thisType",
        "snippet": "  private JSType thisType = null;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.makesStructs",
        "snippet": "  private boolean makesStructs = false;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.makesDicts",
        "snippet": "  private boolean makesDicts = false;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.isInterface",
        "snippet": "  private boolean isInterface = false;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.templateTypeNames",
        "snippet": "  private ImmutableList<TemplateType> templateTypeNames = ImmutableList.of();",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.classTemplateTypeNames",
        "snippet": "  private ImmutableList<TemplateType> classTemplateTypeNames = ImmutableList.of();",
        "begin_line": 96,
        "end_line": 96,
        "comment": " list."
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF",
        "snippet": "  static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning(\n      \"JSC_EXTENDS_WITHOUT_TYPEDEF\",\n      \"@extends used without @constructor or @interface for {0}\");",
        "begin_line": 98,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT",
        "snippet": "  static final DiagnosticType EXTENDS_NON_OBJECT = DiagnosticType.warning(\n      \"JSC_EXTENDS_NON_OBJECT\",\n      \"{0} @extends non-object type {1}\");",
        "begin_line": 102,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY",
        "snippet": "  static final DiagnosticType RESOLVED_TAG_EMPTY = DiagnosticType.warning(\n      \"JSC_RESOLVED_TAG_EMPTY\",\n      \"Could not resolve type in {0} tag of {1}\");",
        "begin_line": 106,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR",
        "snippet": "  static final DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR\",\n          \"@implements used without @constructor or @interface for {0}\");",
        "begin_line": 110,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED",
        "snippet": "  static final DiagnosticType CONSTRUCTOR_REQUIRED =\n      DiagnosticType.warning(\"JSC_CONSTRUCTOR_REQUIRED\",\n                             \"{0} used without @constructor for {1}\");",
        "begin_line": 115,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST",
        "snippet": "  static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning(\n      \"JSC_VAR_ARGS_MUST_BE_LAST\",\n      \"variable length argument must be last\");",
        "begin_line": 119,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END",
        "snippet": "  static final DiagnosticType OPTIONAL_ARG_AT_END = DiagnosticType.warning(\n      \"JSC_OPTIONAL_ARG_AT_END\",\n      \"optional arguments must be at the end\");",
        "begin_line": 123,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM",
        "snippet": "  static final DiagnosticType INEXISTANT_PARAM = DiagnosticType.warning(\n      \"JSC_INEXISTANT_PARAM\",\n      \"parameter {0} does not appear in {1}''s parameter list\");",
        "begin_line": 127,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION",
        "snippet": "  static final DiagnosticType TYPE_REDEFINITION = DiagnosticType.warning(\n      \"JSC_TYPE_REDEFINITION\",\n      \"attempted re-definition of type {0}\\n\"\n      + \"found   : {1}\\n\"\n      + \"expected: {2}\");",
        "begin_line": 131,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED",
        "snippet": "  static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_DUPLICATED\",\n      \"Only one parameter type must be the template type\");",
        "begin_line": 137,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED",
        "snippet": "  static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.warning(\n      \"JSC_TEMPLATE_TYPE_EXPECTED\",\n      \"The template type must be a parameter type\");",
        "begin_line": 141,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT",
        "snippet": "  static final DiagnosticType THIS_TYPE_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_THIS_TYPE_NON_OBJECT\",\n          \"@this type of a function must be an object\\n\" +\n          \"Actual type: {0}\");",
        "begin_line": 145,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionTypeBuilder",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.FunctionTypeBuilder.SAME_INTERFACE_MULTIPLE_IMPLEMENTS",
        "snippet": "  static final DiagnosticType SAME_INTERFACE_MULTIPLE_IMPLEMENTS =\n      DiagnosticType.warning(\n          \"JSC_SAME_INTERFACE_MULTIPLE_IMPLEMENTS\",\n          \"Cannot @implement the same interface more than once\\n\" +\n          \"Repeated interface: {0}\");",
        "begin_line": 151,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnknownFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.UnknownFunctionContents.singleton",
        "snippet": "    private static UnknownFunctionContents singleton =\n        new UnknownFunctionContents();",
        "begin_line": 871,
        "end_line": 872,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.n",
        "snippet": "    private final Node n;",
        "begin_line": 915,
        "end_line": 915,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.hasNonEmptyReturns",
        "snippet": "    private boolean hasNonEmptyReturns = false;",
        "begin_line": 916,
        "end_line": 916,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.escapedVarNames",
        "snippet": "    private Set<String> escapedVarNames;",
        "begin_line": 917,
        "end_line": 917,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.escapedQualifiedNames",
        "snippet": "    private Set<String> escapedQualifiedNames;",
        "begin_line": 918,
        "end_line": 918,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstFunctionContents",
        "src_path": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "signature": "com.google.javascript.jscomp.AstFunctionContents.assignedVarNames",
        "snippet": "    private final Multiset<String> assignedVarNames = HashMultiset.create();",
        "begin_line": 919,
        "end_line": 919,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.first",
        "snippet": "    private final Annotatable first;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.second",
        "snippet": "    private final Annotation second;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphAnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.GraphAnnotationState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.nodeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> nodeAnnotationStack;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n   * Used by {@link #pushNodeAnnotations()} and {@link #popNodeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.edgeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> edgeAnnotationStack;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Used by {@link #pushEdgeAnnotations()} and {@link #popEdgeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.graph",
        "snippet": "    private Graph<N, E> graph;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.nodes",
        "snippet": "    private List<GraphNode<N, E>> nodes = Lists.newArrayList();",
        "begin_line": 308,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final PropertyMap properties;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeFallback",
        "snippet": "  private ObjectType implicitPrototypeFallback;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " some subclasses override this to do special resolution handling."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.ownerFunction",
        "snippet": "  private FunctionType ownerFunction = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " to do this for multiple functions, then we'll have to create a new one."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.prettyPrint",
        "snippet": "  private boolean prettyPrint = false;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " by printing all properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",
        "snippet": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.cfg",
        "snippet": "  private final ControlFlowGraph<N> cfg;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.joinOp",
        "snippet": "  final JoinOp<L> joinOp;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.orderedWorkSet",
        "snippet": "  protected final Set<DiGraphNode<N, Branch>> orderedWorkSet;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DataFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.DataFlowAnalysis.MAX_STEPS",
        "snippet": "  public static final int MAX_STEPS = 400000;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n   * Feel free to increase this to a reasonable number if you are finding that\n   * more and more passes need more than 400000 steps before finding a\n   * fixed-point. If you just have a special case, consider calling\n   * {@link #analyse(int)} instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.FlowState.in",
        "snippet": "    private L in;",
        "begin_line": 332,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.FlowState.out",
        "snippet": "    private L out;",
        "begin_line": 333,
        "end_line": 333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MaxIterationsExceededException",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.MaxIterationsExceededException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 383,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BranchedFlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.BranchedFlowState.in",
        "snippet": "    private L in;",
        "begin_line": 487,
        "end_line": 487,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BranchedFlowState",
        "src_path": "src/com/google/javascript/jscomp/DataFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.BranchedFlowState.out",
        "snippet": "    private List<L> out;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.templateKeys",
        "snippet": "  private final ImmutableList<TemplateType> templateKeys;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The TemplateType keys of the map."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.templateValues",
        "snippet": "  private final ImmutableList<JSType> templateValues;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " iterative type resolution to find their true, resolved type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.resolvedTemplateValues",
        "snippet": "  private final ImmutableList<JSType> resolvedTemplateValues;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " equivalence of two TemplateTypeMap instances."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.suppressors",
        "snippet": "  private final Map<String, DiagnosticGroupWarningsGuard> suppressors =\n      Maps.newHashMap();",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Warnings guards for each suppressible warnings group, indexed by name. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.DATAFLOW_ERROR",
        "snippet": "  static final DiagnosticType DATAFLOW_ERROR = DiagnosticType.warning(\n      \"JSC_INTERNAL_ERROR_DATAFLOW\",\n      \"non-monotonic data-flow analysis\");",
        "begin_line": 34,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.reverseInterpreter",
        "snippet": "  private final ReverseAbstractInterpreter reverseInterpreter;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.topScope",
        "snippet": "  private final Scope topScope;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.scopeCreator",
        "snippet": "  private final MemoizedScopeCreator scopeCreator;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInferencePass",
        "src_path": "src/com/google/javascript/jscomp/TypeInferencePass.java",
        "signature": "com.google.javascript.jscomp.TypeInferencePass.assertionFunctionsMap",
        "snippet": "  private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.MISSING_LINE_INFO",
        "snippet": "  static final DiagnosticType MISSING_LINE_INFO = DiagnosticType.error(\n      \"JSC_MISSING_LINE_INFO\",\n      \"No source location information associated with {0}.\\n\" +\n      \"Most likely a Node has been created with settings the source file \" +\n      \"and line/column location.  Usually this is done using \" +\n      \"Node.copyInformationFrom and supplying a Node from the source AST.\");",
        "begin_line": 30,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LineNumberCheck",
        "src_path": "src/com/google/javascript/jscomp/LineNumberCheck.java",
        "signature": "com.google.javascript.jscomp.LineNumberCheck.requiresLineNumbers",
        "snippet": "  private boolean requiresLineNumbers = false;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerpt",
        "snippet": "  private SourceExcerpt excerpt;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerptFormatter",
        "snippet": "  private static final ExcerptFormatter excerptFormatter =\n      new LineNumberingFormatter();",
        "begin_line": 32,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.OBJECTLIT_EXPECTED",
        "snippet": "  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.indirectlyDeclaredProperties",
        "snippet": "  private final Set<String> indirectlyDeclaredProperties;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.propertyTestFunctions",
        "snippet": "  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
        "begin_line": 313,
        "end_line": 316,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.manageClosureDependencies",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private boolean manageClosureDependencies = false;",
        "begin_line": 44,
        "end_line": 45,
        "comment": " Unused. For people using reflection to circumvent access control."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 7L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageIn",
        "snippet": "  private LanguageMode languageIn;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n   * The JavaScript language version accepted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageOut",
        "snippet": "  private LanguageMode languageOut;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n   * The JavaScript language version that should be produced.\n   * Currently, this is always the same as {@link #languageIn}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.acceptConstKeyword",
        "snippet": "  boolean acceptConstKeyword;",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n   * Whether the compiler accepts the `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeStrictThis",
        "snippet": "  private boolean assumeStrictThis;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n   * Whether the compiler should assume that a function's \"this\" value\n   * never needs coercion (for example in non-strict \"null\" or \"undefined\" will\n   * be coerced to the global \"this\" and primitives to objects).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ideMode",
        "snippet": "  public boolean ideMode;",
        "begin_line": 96,
        "end_line": 96,
        "comment": "\n   * Configures the compiler for use as an IDE backend.  In this mode:\n   * <ul>\n   *  <li>No optimization passes will run.</li>\n   *  <li>The last time custom passes are invoked is\n   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}</li>\n   *  <li>The compiler will always try to process all inputs fully, even\n   *      if it encounters errors.</li>\n   *  <li>The compiler may record more information than is strictly\n   *      needed for codegen.</li>\n   * </ul>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.saveDataStructures",
        "snippet": "  boolean saveDataStructures = false;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypes",
        "snippet": "  boolean inferTypes;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\n   * Even if checkTypes is disabled, clients might want to still infer types.\n   * This is mostly used when ideMode is enabled.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllPasses",
        "snippet": "  boolean skipAllPasses;",
        "begin_line": 109,
        "end_line": 109,
        "comment": "\n   * Configures the compiler to skip as many passes as possible.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameAnonymousFunctionsOnly",
        "snippet": "  boolean nameAnonymousFunctionsOnly;",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\n   * If true, name anonymous functions only. All others passes will be skipped.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devMode",
        "snippet": "  DevMode devMode;",
        "begin_line": 120,
        "end_line": 120,
        "comment": "\n   * Configures the compiler to run expensive sanity checks after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkDeterminism",
        "snippet": "  private boolean checkDeterminism;",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * Configures the compiler to log a hash code of the AST after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.dependencyOptions",
        "snippet": "  DependencyOptions dependencyOptions = new DependencyOptions();",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.messageBundle",
        "snippet": "  public transient MessageBundle messageBundle = null;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Transient so that clients don't have to implement Serializable."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSymbols",
        "snippet": "  public boolean checkSymbols;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " Checks that all symbols are defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveVarCheck",
        "snippet": "  public CheckLevel aggressiveVarCheck;",
        "begin_line": 145,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSuspiciousCode",
        "snippet": "  public boolean checkSuspiciousCode;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " Checks for suspicious statements that have no effect "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkControlStructures",
        "snippet": "  public boolean checkControlStructures;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " Checks for invalid control structures "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypes",
        "snippet": "  public boolean checkTypes;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " Checks types on expressions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tightenTypes",
        "snippet": "  boolean tightenTypes;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportMissingOverride",
        "snippet": "  public CheckLevel reportMissingOverride;",
        "begin_line": 168,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkRequires",
        "snippet": "  public CheckLevel checkRequires;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " Checks for missing goog.require() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkProvides",
        "snippet": "  public CheckLevel checkProvides;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalNamesLevel",
        "snippet": "  public CheckLevel checkGlobalNamesLevel;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.brokenClosureRequiresLevel",
        "snippet": "  public CheckLevel brokenClosureRequiresLevel;",
        "begin_line": 202,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalThisLevel",
        "snippet": "  public CheckLevel checkGlobalThisLevel;",
        "begin_line": 209,
        "end_line": 209,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameLevel",
        "snippet": "  public CheckLevel checkMissingGetCssNameLevel;",
        "begin_line": 223,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameBlacklist",
        "snippet": "  public String checkMissingGetCssNameBlacklist;",
        "begin_line": 236,
        "end_line": 236,
        "comment": "\n   * Regex of string literals that may only appear in goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkCaja",
        "snippet": "  boolean checkCaja;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " Checks that the syntactic restrictions of Caja are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extraAnnotationNames",
        "snippet": "  Set<String> extraAnnotationNames;",
        "begin_line": 250,
        "end_line": 250,
        "comment": "\n   * A set of extra annotation names which are accepted and silently ignored\n   * when encountered in a source file. Defaults to null which has the same\n   * effect as specifying an empty set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkEventfulObjectDisposalPolicy",
        "snippet": "  CheckEventfulObjectDisposal.DisposalCheckingPolicy checkEventfulObjectDisposalPolicy;",
        "begin_line": 255,
        "end_line": 255,
        "comment": "\n   * Check for patterns that are known to cause memory leaks.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveRenaming",
        "snippet": "  boolean aggressiveRenaming;",
        "begin_line": 276,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.alternateRenaming",
        "snippet": "  boolean alternateRenaming; // triggers RenameVars2.",
        "begin_line": 277,
        "end_line": 277,
        "comment": " triggers RenameVars2."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveFusion",
        "snippet": "  boolean aggressiveFusion;",
        "begin_line": 280,
        "end_line": 280,
        "comment": " Prefer commas over semicolons when doing statement fusion "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.foldConstants",
        "snippet": "  public boolean foldConstants;",
        "begin_line": 283,
        "end_line": 283,
        "comment": " Folds constants (e.g. (2 + 3) to 5) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.deadAssignmentElimination",
        "snippet": "  public boolean deadAssignmentElimination;",
        "begin_line": 286,
        "end_line": 286,
        "comment": " Remove assignments to values that can not be referenced "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineConstantVars",
        "snippet": "  public boolean inlineConstantVars;",
        "begin_line": 289,
        "end_line": 289,
        "comment": " Inlines constants (symbols that are all CAPS) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineFunctions",
        "snippet": "  public boolean inlineFunctions;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " Inlines global functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalFunctions",
        "snippet": "  public boolean inlineLocalFunctions;",
        "begin_line": 295,
        "end_line": 295,
        "comment": " Inlines functions defined in local scopes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeClosuresOnlyCaptureReferences",
        "snippet": "  boolean assumeClosuresOnlyCaptureReferences;",
        "begin_line": 298,
        "end_line": 298,
        "comment": " More aggressive function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineProperties",
        "snippet": "  boolean inlineProperties;",
        "begin_line": 301,
        "end_line": 301,
        "comment": " Inlines properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleCodeMotion",
        "snippet": "  public boolean crossModuleCodeMotion;",
        "begin_line": 304,
        "end_line": 304,
        "comment": " Move code to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.coalesceVariableNames",
        "snippet": "  public boolean coalesceVariableNames;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Merge two variables together as one. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleMethodMotion",
        "snippet": "  public boolean crossModuleMethodMotion;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " Move methods to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineGetters",
        "snippet": "  public boolean inlineGetters;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " Inlines trivial getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineVariables",
        "snippet": "  public boolean inlineVariables;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalVariables",
        "snippet": "  boolean inlineLocalVariables;",
        "begin_line": 319,
        "end_line": 319,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.flowSensitiveInlineVariables",
        "snippet": "  public boolean flowSensitiveInlineVariables;",
        "begin_line": 323,
        "end_line": 323,
        "comment": " Remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.smartNameRemoval",
        "snippet": "  public boolean smartNameRemoval;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeDeadCode",
        "snippet": "  public boolean removeDeadCode;",
        "begin_line": 329,
        "end_line": 329,
        "comment": " Removes code that will never execute "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnreachableCode",
        "snippet": "  public CheckLevel checkUnreachableCode;",
        "begin_line": 331,
        "end_line": 331,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingReturn",
        "snippet": "  public CheckLevel checkMissingReturn;",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extractPrototypeMemberDeclarations",
        "snippet": "  public boolean extractPrototypeMemberDeclarations;",
        "begin_line": 346,
        "end_line": 346,
        "comment": " Extracts common prototype member declarations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypeProperties",
        "snippet": "  public boolean removeUnusedPrototypeProperties;",
        "begin_line": 349,
        "end_line": 349,
        "comment": " Removes unused member prototypes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypePropertiesInExterns",
        "snippet": "  public boolean removeUnusedPrototypePropertiesInExterns;",
        "begin_line": 352,
        "end_line": 352,
        "comment": " Tells AnalyzePrototypeProperties it can remove externed props. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedClassProperties",
        "snippet": "  public boolean removeUnusedClassProperties;",
        "begin_line": 355,
        "end_line": 355,
        "comment": " Removes unused member properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVars",
        "snippet": "  public boolean removeUnusedVars;",
        "begin_line": 358,
        "end_line": 358,
        "comment": " Removes unused variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedLocalVars",
        "snippet": "  public boolean removeUnusedLocalVars;",
        "begin_line": 361,
        "end_line": 361,
        "comment": " Removes unused variables in local scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasExternals",
        "snippet": "  public boolean aliasExternals;",
        "begin_line": 364,
        "end_line": 364,
        "comment": " Adds variable aliases for externals to reduce code size "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableGlobals",
        "snippet": "  String aliasableGlobals;",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.unaliasableGlobals",
        "snippet": "  String unaliasableGlobals;",
        "begin_line": 377,
        "end_line": 377,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseVariableDeclarations",
        "snippet": "  public boolean collapseVariableDeclarations;",
        "begin_line": 388,
        "end_line": 388,
        "comment": " Collapses multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.groupVariableDeclarations",
        "snippet": "  boolean groupVariableDeclarations;",
        "begin_line": 391,
        "end_line": 391,
        "comment": " Group multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseAnonymousFunctions",
        "snippet": "  public boolean collapseAnonymousFunctions;",
        "begin_line": 397,
        "end_line": 397,
        "comment": "\n   * Collapses anonymous function declarations into named function\n   * declarations\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableStrings",
        "snippet": "  public Set<String> aliasableStrings;",
        "begin_line": 404,
        "end_line": 404,
        "comment": "\n   * If set to a non-empty set, those strings literals will be aliased to a\n   * single global instance per string, to avoid creating more objects than\n   * necessary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasStringsBlacklist",
        "snippet": "  public String aliasStringsBlacklist;",
        "begin_line": 411,
        "end_line": 411,
        "comment": "\n   * A blacklist in the form of a regular expression to block strings that\n   * contains certain words from being aliased.\n   * If the value is the empty string, no words are blacklisted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasAllStrings",
        "snippet": "  public boolean aliasAllStrings;",
        "begin_line": 418,
        "end_line": 418,
        "comment": "\n   * Aliases all string literals to global instances, to avoid creating more\n   * objects than necessary (if true, overrides any set of strings passed in\n   * to aliasableStrings)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputJsStringUsage",
        "snippet": "  boolean outputJsStringUsage;",
        "begin_line": 421,
        "end_line": 421,
        "comment": " Print string usage as part of the compilation log. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.convertToDottedProperties",
        "snippet": "  public boolean convertToDottedProperties;",
        "begin_line": 424,
        "end_line": 424,
        "comment": " Converts quoted property accesses to dot syntax (a['b'] -> a.b) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteFunctionExpressions",
        "snippet": "  public boolean rewriteFunctionExpressions;",
        "begin_line": 427,
        "end_line": 427,
        "comment": " Reduces the size of common function expressions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeParameters",
        "snippet": "  public boolean optimizeParameters;",
        "begin_line": 432,
        "end_line": 432,
        "comment": "\n   * Remove unused and constant parameters.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeReturns",
        "snippet": "  public boolean optimizeReturns;",
        "begin_line": 437,
        "end_line": 437,
        "comment": "\n   * Remove unused return values.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeCalls",
        "snippet": "  public boolean optimizeCalls;",
        "begin_line": 442,
        "end_line": 442,
        "comment": "\n   * Remove unused parameters from call sites.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeArgumentsArray",
        "snippet": "  public boolean optimizeArgumentsArray;",
        "begin_line": 447,
        "end_line": 447,
        "comment": "\n   * Provide formal names for elements of arguments array.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.chainCalls",
        "snippet": "  boolean chainCalls;",
        "begin_line": 450,
        "end_line": 450,
        "comment": " Chains calls to functions that return this. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.variableRenaming",
        "snippet": "  public VariableRenamingPolicy variableRenaming;",
        "begin_line": 457,
        "end_line": 457,
        "comment": " Controls which variables get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyRenaming",
        "snippet": "  public PropertyRenamingPolicy propertyRenaming;",
        "begin_line": 460,
        "end_line": 460,
        "comment": " Controls which properties get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyAffinity",
        "snippet": "  boolean propertyAffinity;",
        "begin_line": 463,
        "end_line": 463,
        "comment": " Should we use affinity information when generating property names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.labelRenaming",
        "snippet": "  public boolean labelRenaming;",
        "begin_line": 466,
        "end_line": 466,
        "comment": " Controls label renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reserveRawExports",
        "snippet": "  public boolean reserveRawExports;",
        "begin_line": 469,
        "end_line": 469,
        "comment": " Reserve property names on the global this object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shadowVariables",
        "snippet": "  boolean shadowVariables;",
        "begin_line": 472,
        "end_line": 472,
        "comment": " Should shadow variable names in outer scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generatePseudoNames",
        "snippet": "  public boolean generatePseudoNames;",
        "begin_line": 477,
        "end_line": 477,
        "comment": "\n   * Generate pseudo names for variables and properties for debugging purposes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefix",
        "snippet": "  public String renamePrefix;",
        "begin_line": 480,
        "end_line": 480,
        "comment": " Specifies a prefix for all globals "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefixNamespace",
        "snippet": "  public String renamePrefixNamespace;",
        "begin_line": 486,
        "end_line": 486,
        "comment": "\n   * Specifies the name of an object that will be used to store all non-extern\n   * globals.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefixNamespaceAssumeCrossModuleNames",
        "snippet": "  boolean renamePrefixNamespaceAssumeCrossModuleNames = false;",
        "begin_line": 492,
        "end_line": 492,
        "comment": "\n   * Used by tests of the RescopeGlobalSymbols pass to avoid having declare 2\n   * modules in simple cases.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasKeywords",
        "snippet": "  public boolean aliasKeywords;",
        "begin_line": 499,
        "end_line": 499,
        "comment": " Aliases true, false, and null to variables with shorter names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseProperties",
        "snippet": "  public boolean collapseProperties;",
        "begin_line": 502,
        "end_line": 502,
        "comment": " Flattens multi-level property names (e.g. a$b = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseObjectLiterals",
        "snippet": "  boolean collapseObjectLiterals;",
        "begin_line": 505,
        "end_line": 505,
        "comment": " Split object literals into individual variables when possible. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapsePropertiesOnExternTypes",
        "snippet": "  boolean collapsePropertiesOnExternTypes;",
        "begin_line": 512,
        "end_line": 512,
        "comment": " Flattens multi-level property names on extern types (e.g. String$f = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devirtualizePrototypeMethods",
        "snippet": "  public boolean devirtualizePrototypeMethods;",
        "begin_line": 518,
        "end_line": 518,
        "comment": "\n   * Devirtualize prototype method by rewriting them to be static calls that\n   * take the this pointer as their first argument\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.computeFunctionSideEffects",
        "snippet": "  public boolean computeFunctionSideEffects;",
        "begin_line": 524,
        "end_line": 524,
        "comment": "\n   * Use @nosideeffects annotations, function bodies and name graph\n   * to determine if calls have side effects.  Requires --check_types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.debugFunctionSideEffectsPath",
        "snippet": "  String debugFunctionSideEffectsPath;",
        "begin_line": 529,
        "end_line": 529,
        "comment": "\n   * Where to save debug report for compute function side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguatePrivateProperties",
        "snippet": "  boolean disambiguatePrivateProperties;",
        "begin_line": 535,
        "end_line": 535,
        "comment": "\n   * Rename private properties to disambiguate between unrelated fields based on\n   * the coding convention.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguateProperties",
        "snippet": "  public boolean disambiguateProperties;",
        "begin_line": 541,
        "end_line": 541,
        "comment": "\n   * Rename properties to disambiguate between unrelated fields based on\n   * type information.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ambiguateProperties",
        "snippet": "  public boolean ambiguateProperties;",
        "begin_line": 544,
        "end_line": 544,
        "comment": " Rename unrelated properties to the same name to reduce code size. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.anonymousFunctionNaming",
        "snippet": "  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;",
        "begin_line": 547,
        "end_line": 547,
        "comment": " Give anonymous functions names for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputAnonymousFunctionNamingMap",
        "snippet": "  VariableMap inputAnonymousFunctionNamingMap;",
        "begin_line": 550,
        "end_line": 550,
        "comment": " Input anonymous function renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputVariableMap",
        "snippet": "  VariableMap inputVariableMap;",
        "begin_line": 553,
        "end_line": 553,
        "comment": " Input variable renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputPropertyMap",
        "snippet": "  VariableMap inputPropertyMap;",
        "begin_line": 556,
        "end_line": 556,
        "comment": " Input property renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportTestFunctions",
        "snippet": "  public boolean exportTestFunctions;",
        "begin_line": 559,
        "end_line": 559,
        "comment": " Whether to export test functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.specializeInitialModule",
        "snippet": "  boolean specializeInitialModule;",
        "begin_line": 561,
        "end_line": 561,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceMessagesWithChromeI18n",
        "snippet": "  boolean replaceMessagesWithChromeI18n;",
        "begin_line": 576,
        "end_line": 576,
        "comment": "\n   * Replace UI strings with chrome.i18n.getMessage calls.\n   * Used by Chrome extensions/apps.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tcProjectId",
        "snippet": "  String tcProjectId;",
        "begin_line": 577,
        "end_line": 577,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheck",
        "snippet": "  boolean runtimeTypeCheck;",
        "begin_line": 594,
        "end_line": 594,
        "comment": " Inserts run-time type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheckLogFunction",
        "snippet": "  String runtimeTypeCheckLogFunction;",
        "begin_line": 601,
        "end_line": 601,
        "comment": "\n   * A JS function to be used for logging run-time type assertion\n   * failures. It will be passed the warning as a string and the\n   * faulty expression as arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.codingConvention",
        "snippet": "  private CodingConvention codingConvention;",
        "begin_line": 604,
        "end_line": 604,
        "comment": " A CodingConvention to use during the compile. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ignoreCajaProperties",
        "snippet": "  boolean ignoreCajaProperties;",
        "begin_line": 606,
        "end_line": 606,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockStartMarker",
        "snippet": "  public String syntheticBlockStartMarker;",
        "begin_line": 613,
        "end_line": 613,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockEndMarker",
        "snippet": "  public String syntheticBlockEndMarker;",
        "begin_line": 615,
        "end_line": 615,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.locale",
        "snippet": "  public String locale;",
        "begin_line": 618,
        "end_line": 618,
        "comment": " Compiling locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markAsCompiled",
        "snippet": "  public boolean markAsCompiled;",
        "begin_line": 621,
        "end_line": 621,
        "comment": " Sets the special \"COMPILED\" value to true "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeTryCatchFinally",
        "snippet": "  public boolean removeTryCatchFinally;",
        "begin_line": 624,
        "end_line": 624,
        "comment": " Removes try...catch...finally blocks for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.closurePass",
        "snippet": "  public boolean closurePass;",
        "begin_line": 627,
        "end_line": 627,
        "comment": " Processes goog.provide() and goog.require() calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.jqueryPass",
        "snippet": "  public boolean jqueryPass;",
        "begin_line": 630,
        "end_line": 630,
        "comment": " Processes jQuery aliases "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.angularPass",
        "snippet": "  boolean angularPass;",
        "begin_line": 633,
        "end_line": 633,
        "comment": " Processes AngularJS-specific annotations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeAbstractMethods",
        "snippet": "  boolean removeAbstractMethods;",
        "begin_line": 636,
        "end_line": 636,
        "comment": " Remove goog.abstractMethod assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeClosureAsserts",
        "snippet": "  boolean removeClosureAsserts;",
        "begin_line": 639,
        "end_line": 639,
        "comment": " Remove goog.asserts calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.gatherCssNames",
        "snippet": "  public boolean gatherCssNames;",
        "begin_line": 642,
        "end_line": 642,
        "comment": " Gather CSS names (requires closurePass) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypes",
        "snippet": "  public Set<String> stripTypes;",
        "begin_line": 645,
        "end_line": 645,
        "comment": " Names of types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNameSuffixes",
        "snippet": "  public Set<String> stripNameSuffixes;",
        "begin_line": 648,
        "end_line": 648,
        "comment": " Name suffixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNamePrefixes",
        "snippet": "  public Set<String> stripNamePrefixes;",
        "begin_line": 651,
        "end_line": 651,
        "comment": " Name prefixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypePrefixes",
        "snippet": "  public Set<String> stripTypePrefixes;",
        "begin_line": 654,
        "end_line": 654,
        "comment": " Qualified type name prefixes that determine which types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.customPasses",
        "snippet": "  public transient\n      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;",
        "begin_line": 657,
        "end_line": 658,
        "comment": " Custom passes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markNoSideEffectCalls",
        "snippet": "  public boolean markNoSideEffectCalls;",
        "begin_line": 661,
        "end_line": 661,
        "comment": " Mark no side effect calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.defineReplacements",
        "snippet": "  private Map<String, Object> defineReplacements;",
        "begin_line": 664,
        "end_line": 664,
        "comment": " Replacements for @defines. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakProcessing",
        "snippet": "  private TweakProcessing tweakProcessing;",
        "begin_line": 667,
        "end_line": 667,
        "comment": " What kind of processing to do for goog.tweak functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakReplacements",
        "snippet": "  private Map<String, Object> tweakReplacements;",
        "begin_line": 670,
        "end_line": 670,
        "comment": " Replacements for tweaks. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.moveFunctionDeclarations",
        "snippet": "  public boolean moveFunctionDeclarations;",
        "begin_line": 673,
        "end_line": 673,
        "comment": " Move top-level function declarations to the top "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentMemoryAllocations",
        "snippet": "  private boolean instrumentMemoryAllocations;",
        "begin_line": 676,
        "end_line": 676,
        "comment": " Instrument / Intercept memory allocations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentationTemplate",
        "snippet": "  public String instrumentationTemplate;",
        "begin_line": 679,
        "end_line": 679,
        "comment": " Instrumentation template to use with #recordFunctionInformation "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.appNameStr",
        "snippet": "  String appNameStr;",
        "begin_line": 681,
        "end_line": 681,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.recordFunctionInformation",
        "snippet": "  public boolean recordFunctionInformation;",
        "begin_line": 692,
        "end_line": 692,
        "comment": " Record function information "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generateExports",
        "snippet": "  public boolean generateExports;",
        "begin_line": 694,
        "end_line": 694,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportLocalPropertyDefinitions",
        "snippet": "  boolean exportLocalPropertyDefinitions;",
        "begin_line": 696,
        "end_line": 696,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingMap",
        "snippet": "  public CssRenamingMap cssRenamingMap;",
        "begin_line": 699,
        "end_line": 699,
        "comment": " Map used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingWhitelist",
        "snippet": "  Set<String> cssRenamingWhitelist;",
        "begin_line": 702,
        "end_line": 702,
        "comment": " Whitelist used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processObjectPropertyString",
        "snippet": "  boolean processObjectPropertyString;",
        "begin_line": 705,
        "end_line": 705,
        "comment": " Process instances of goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceIdGenerators",
        "snippet": "  boolean replaceIdGenerators = true;  // true by default for legacy reasons.",
        "begin_line": 708,
        "end_line": 708,
        "comment": " true by default for legacy reasons."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGenerators",
        "snippet": "  ImmutableMap<String, RenamingMap> idGenerators;",
        "begin_line": 711,
        "end_line": 711,
        "comment": " Id generators to replace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGeneratorsMapSerialized",
        "snippet": "  String idGeneratorsMapSerialized;",
        "begin_line": 718,
        "end_line": 718,
        "comment": "\n   * A previous map of ids (serialized to a string by a previous compile).\n   * This will be used as a hint during the ReplaceIdGenerators pass, which\n   * will attempt to reuse the same ids.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsFunctionDescriptions",
        "snippet": "  List<String> replaceStringsFunctionDescriptions;",
        "begin_line": 721,
        "end_line": 721,
        "comment": " Configuration strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsPlaceholderToken",
        "snippet": "  String replaceStringsPlaceholderToken;",
        "begin_line": 723,
        "end_line": 723,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsReservedStrings",
        "snippet": "  Set<String> replaceStringsReservedStrings;",
        "begin_line": 725,
        "end_line": 725,
        "comment": " A list of strings that should not be used as replacements"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsInputMap",
        "snippet": "  VariableMap replaceStringsInputMap;",
        "begin_line": 727,
        "end_line": 727,
        "comment": " A previous map of replacements to strings."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyInvalidationErrors",
        "snippet": "  Map<String, CheckLevel> propertyInvalidationErrors;",
        "begin_line": 730,
        "end_line": 730,
        "comment": " List of properties that we report invalidation errors for. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.transformAMDToCJSModules",
        "snippet": "  boolean transformAMDToCJSModules = false;",
        "begin_line": 733,
        "end_line": 733,
        "comment": " Transform AMD to CommonJS modules. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processCommonJSModules",
        "snippet": "  boolean processCommonJSModules = false;",
        "begin_line": 736,
        "end_line": 736,
        "comment": " Rewrite CommonJS modules so that they can be concatenated together. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.commonJSModulePathPrefix",
        "snippet": "  String commonJSModulePathPrefix =\n      ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 739,
        "end_line": 740,
        "comment": " CommonJS module prefix. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.prettyPrint",
        "snippet": "  public boolean prettyPrint;",
        "begin_line": 748,
        "end_line": 748,
        "comment": " Output in pretty indented format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineBreak",
        "snippet": "  public boolean lineBreak;",
        "begin_line": 751,
        "end_line": 751,
        "comment": " Line break the output a bit more aggressively "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preferLineBreakAtEndOfFile",
        "snippet": "  public boolean preferLineBreakAtEndOfFile;",
        "begin_line": 754,
        "end_line": 754,
        "comment": " Prefer line breaks at end of file "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.printInputDelimiter",
        "snippet": "  public boolean printInputDelimiter;",
        "begin_line": 757,
        "end_line": 757,
        "comment": " Prints a separator comment before each JS script "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputDelimiter",
        "snippet": "  public String inputDelimiter = \"// Input %num%\";",
        "begin_line": 760,
        "end_line": 760,
        "comment": " The string to use as the separator for printInputDelimiter "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preferSingleQuotes",
        "snippet": "  boolean preferSingleQuotes;",
        "begin_line": 762,
        "end_line": 762,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.trustedStrings",
        "snippet": "  boolean trustedStrings;",
        "begin_line": 773,
        "end_line": 773,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportPath",
        "snippet": "  String reportPath;",
        "begin_line": 785,
        "end_line": 785,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tracer",
        "snippet": "  TracerMode tracer;",
        "begin_line": 792,
        "end_line": 792,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.colorizeErrorOutput",
        "snippet": "  private boolean colorizeErrorOutput;",
        "begin_line": 802,
        "end_line": 802,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorFormat",
        "snippet": "  public ErrorFormat errorFormat;",
        "begin_line": 804,
        "end_line": 804,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.warningsGuard",
        "snippet": "  private ComposeWarningsGuard warningsGuard = new ComposeWarningsGuard();",
        "begin_line": 806,
        "end_line": 806,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.summaryDetailLevel",
        "snippet": "  int summaryDetailLevel = 1;",
        "begin_line": 808,
        "end_line": 808,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineLengthThreshold",
        "snippet": "  int lineLengthThreshold = CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 810,
        "end_line": 810,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExports",
        "snippet": "  private boolean externExports;",
        "begin_line": 820,
        "end_line": 820,
        "comment": "\n   * Whether the exports should be made available via {@link Result} after\n   * compilation. This is implicitly true if {@link #externExportsPath} is set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExportsPath",
        "snippet": "  String externExportsPath;",
        "begin_line": 823,
        "end_line": 823,
        "comment": " The output path for the created externs file. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceReportPath",
        "snippet": "  String nameReferenceReportPath;",
        "begin_line": 825,
        "end_line": 825,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceGraphPath",
        "snippet": "  String nameReferenceGraphPath;",
        "begin_line": 832,
        "end_line": 832,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapOutputPath",
        "snippet": "  public String sourceMapOutputPath;",
        "begin_line": 844,
        "end_line": 844,
        "comment": " The output path for the source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapDetailLevel",
        "snippet": "  public SourceMap.DetailLevel sourceMapDetailLevel =\n      SourceMap.DetailLevel.SYMBOLS;",
        "begin_line": 847,
        "end_line": 848,
        "comment": " The detail level for the generated source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapFormat",
        "snippet": "  public SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 851,
        "end_line": 852,
        "comment": " The source map file format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapLocationMappings",
        "snippet": "  public List<SourceMap.LocationMapping> sourceMapLocationMappings =\n      Collections.emptyList();",
        "begin_line": 854,
        "end_line": 855,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputCharset",
        "snippet": "  String outputCharset;",
        "begin_line": 861,
        "end_line": 861,
        "comment": "\n   * Charset to use when generating code.  If null, then output ASCII.\n   * This needs to be a string because CompilerOptions is serializable.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.looseTypes",
        "snippet": "  boolean looseTypes;",
        "begin_line": 866,
        "end_line": 866,
        "comment": "\n   * Whether the named objects types included 'undefined' by default.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.protectHiddenSideEffects",
        "snippet": "  boolean protectHiddenSideEffects;",
        "begin_line": 871,
        "end_line": 871,
        "comment": "\n   * When set, assume that apparently side-effect free code is meaningful.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasHandler",
        "snippet": "  private transient AliasTransformationHandler aliasHandler;",
        "begin_line": 883,
        "end_line": 883,
        "comment": "\n   * Data holder Alias Transformation information accumulated during a compile.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorHandler",
        "snippet": "  transient ErrorHandler errorHandler;",
        "begin_line": 888,
        "end_line": 888,
        "comment": "\n   * Handler for compiler warnings and errors.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverage",
        "snippet": "  public boolean instrumentForCoverage;",
        "begin_line": 893,
        "end_line": 893,
        "comment": "\n   * Instrument code for the purpose of collecting coverage data.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.UNIQUE_ID_GENERATOR",
        "snippet": "  public static final RenamingMap UNIQUE_ID_GENERATOR =\n      ReplaceIdGenerators.UNIQUE;",
        "begin_line": 1282,
        "end_line": 1283,
        "comment": "\n   * A renaming map instance to use to signal the use of the \"inconsistent\"\n   * id generator type.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER",
        "snippet": "  static final AliasTransformationHandler NULL_ALIAS_TRANSFORMATION_HANDLER =\n      new NullAliasTransformationHandler();",
        "begin_line": 2335,
        "end_line": 2336,
        "comment": "\n   * A Null implementation of the CodeChanges interface which performs all\n   * operations as a No-Op\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 0L;",
        "begin_line": 2340,
        "end_line": 2340,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.NULL_ALIAS_TRANSFORMATION",
        "snippet": "    private static final AliasTransformation NULL_ALIAS_TRANSFORMATION =\n        new NullAliasTransformation();",
        "begin_line": 2342,
        "end_line": 2343,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformation",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformation.serialVersionUID",
        "snippet": "      private static final long serialVersionUID = 0L;",
        "begin_line": 2354,
        "end_line": 2354,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.SOURCE_EXCERPT_REGION_LENGTH",
        "snippet": "  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n   * Number of lines in the region returned by {@link #getRegion(int)}.\n   * This length must be odd.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.fileName",
        "snippet": "  private final String fileName;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.isExternFile",
        "snippet": "  private boolean isExternFile = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.originalPath",
        "snippet": "  private String originalPath = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " from a Jar, it could be the path to the Jar."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lineOffsets",
        "snippet": "  private int[] lineOffsets = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Source Line Information"
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.code",
        "snippet": "  private String code = null;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.charset",
        "snippet": "    private Charset charset = Charsets.UTF_8;",
        "begin_line": 365,
        "end_line": 365,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.originalPath",
        "snippet": "    private String originalPath = null;",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Preloaded",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Preloaded.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.generator",
        "snippet": "    private final Generator generator;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.file",
        "snippet": "    private final File file;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.inputCharset",
        "snippet": "    private String inputCharset = Charsets.UTF_8.name();",
        "begin_line": 474,
        "end_line": 474,
        "comment": " Default input file format for JSCompiler has always been UTF_8."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.orderOfAddition",
        "snippet": "  private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " The order that the guards were added in."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.numberOfAdds",
        "snippet": "  private int numberOfAdds = 0;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guardComparator",
        "snippet": "  private final Comparator<WarningsGuard> guardComparator =\n      new GuardComparator(orderOfAddition);",
        "begin_line": 47,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.demoteErrors",
        "snippet": "  private boolean demoteErrors = false;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.orderOfAddition",
        "snippet": "    private final Map<WarningsGuard, Integer> orderOfAddition;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guards",
        "snippet": "  private final TreeSet<WarningsGuard> guards =\n      new TreeSet<WarningsGuard>(guardComparator);",
        "begin_line": 75,
        "end_line": 76,
        "comment": " The order that the guards are applied in."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.stream",
        "snippet": "  private final JsDocTokenStream stream;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.jsdocBuilder",
        "snippet": "  private final JSDocInfoBuilder jsdocBuilder;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.associatedNode",
        "snippet": "  private final Node associatedNode;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parser",
        "snippet": "  private final ErrorReporterParser parser = new ErrorReporterParser();",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.templateNode",
        "snippet": "  private final Node templateNode;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " memory footprint associated with these (similar to IRFactory)."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileOverviewJSDocInfo",
        "snippet": "  private JSDocInfo fileOverviewJSDocInfo = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The DocInfo with the fileoverview tag for the whole file."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.state",
        "snippet": "  private State state;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.annotationNames",
        "snippet": "  private final Map<String, Annotation> annotationNames;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.suppressionNames",
        "snippet": "  private final Set<String> suppressionNames;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",
        "snippet": "  private static final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
        "begin_line": 96,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.idGeneratorAnnotationKeywords",
        "snippet": "  private static final Set<String> idGeneratorAnnotationKeywords =\n      ImmutableSet.<String>of(\"unique\", \"consistent\", \"stable\", \"mapped\");",
        "begin_line": 98,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileLevelJsDocBuilder",
        "snippet": "  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.string",
        "snippet": "    private final String string;",
        "begin_line": 1389,
        "end_line": 1389,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.token",
        "snippet": "    private final JsDocToken token;",
        "begin_line": 1390,
        "end_line": 1390,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.type",
        "snippet": "    final JSTypeExpression type;",
        "begin_line": 1402,
        "end_line": 1402,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.lineno",
        "snippet": "    final int lineno;",
        "begin_line": 1403,
        "end_line": 1403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.charno",
        "snippet": "    final int charno;",
        "begin_line": 1404,
        "end_line": 1404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",
        "snippet": "  private static final JsDocToken NO_UNREAD_TOKEN = null;",
        "begin_line": 2392,
        "end_line": 2392,
        "comment": "\n   * Specific value indicating that the {@link #unreadToken} contains no token.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.unreadToken",
        "snippet": "  private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
        "begin_line": 2397,
        "end_line": 2397,
        "comment": "\n   * One token buffer.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.vars",
        "snippet": "  private final Map<String, Var> vars = new LinkedHashMap<String, Var>();",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.parent",
        "snippet": "  private final Scope parent;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.depth",
        "snippet": "  private final int depth;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.rootNode",
        "snippet": "  private final Node rootNode;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.isBottom",
        "snippet": "  private final boolean isBottom;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Whether this is a bottom scope for the purposes of type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.arguments",
        "snippet": "  private Var arguments;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",
        "snippet": "  private static final Predicate<Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES =\n      new Predicate<Var>() {\n    @Override public boolean apply(Var var) {\n      return var.getParentNode() != null &&\n          var.getType() == null && // no declared type\n          var.getParentNode().isVar() &&\n          !var.isExtern();\n    }\n  };",
        "begin_line": 66,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.name",
        "snippet": "    final String name;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " name "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.nameNode",
        "snippet": "    final Node nameNode;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Var node "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.type",
        "snippet": "    private JSType type;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * The variable's type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.typeInferred",
        "snippet": "    private final boolean typeInferred;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n     * Whether the variable's type has been inferred or is declared. An inferred\n     * type may change over time (as more code is discovered), whereas a\n     * declared type is a static contract that must be matched.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.input",
        "snippet": "    final CompilerInput input;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Input source "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.index",
        "snippet": "    final int index;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\n     * The index at which the var is declared. e..g if it's 0, it's the first\n     * declared variable in that scope\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The enclosing scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.markedEscaped",
        "snippet": "    private boolean markedEscaped = false;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " @see #isMarkedEscaped "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.markedAssignedExactlyOnce",
        "snippet": "    private boolean markedAssignedExactlyOnce = false;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " @see #isMarkedAssignedExactlyOnce "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.typeResolver",
        "snippet": "  private TypeResolver typeResolver;",
        "begin_line": 625,
        "end_line": 625,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.checkOnly",
        "snippet": "  private final boolean checkOnly;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.EOF_CHAR",
        "snippet": "  private static final int EOF_CHAR = -1;",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n   * For chars - because we need something out-of-range\n   * to check.  (And checking EOF by exception is annoying.)\n   * Note distinction from EOF token type!\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.string",
        "snippet": "  private String string = \"\";",
        "begin_line": 453,
        "end_line": 453,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBuffer",
        "snippet": "  private char[] stringBuffer = new char[128];",
        "begin_line": 455,
        "end_line": 455,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBufferTop",
        "snippet": "  private int stringBufferTop;",
        "begin_line": 456,
        "end_line": 456,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetBuffer",
        "snippet": "  private final int[] ungetBuffer = new int[3];",
        "begin_line": 459,
        "end_line": 459,
        "comment": " Room to backtrace from to < on failed match of the last - in <!--"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCursor",
        "snippet": "  private int ungetCursor;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.hitEOF",
        "snippet": "  private boolean hitEOF = false;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineStart",
        "snippet": "  private int lineStart = 0;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineEndChar",
        "snippet": "  private int lineEndChar = -1;",
        "begin_line": 465,
        "end_line": 465,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineno",
        "snippet": "  int lineno;",
        "begin_line": 466,
        "end_line": 466,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.charno",
        "snippet": "  private int charno = -1;",
        "begin_line": 467,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initCharno",
        "snippet": "  private int initCharno;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initLineno",
        "snippet": "  private int initLineno;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceString",
        "snippet": "  private String sourceString;",
        "begin_line": 471,
        "end_line": 471,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceEnd",
        "snippet": "  private int sourceEnd;",
        "begin_line": 472,
        "end_line": 472,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceCursor",
        "snippet": "  int sourceCursor;",
        "begin_line": 476,
        "end_line": 476,
        "comment": " sliding window of the source stream."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.cursor",
        "snippet": "  int cursor;",
        "begin_line": 481,
        "end_line": 481,
        "comment": " Its value is the index of the next character to be scanned."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenBeg",
        "snippet": "  int tokenBeg;",
        "begin_line": 484,
        "end_line": 484,
        "comment": " Record start and end positions of last scanned token."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenEnd",
        "snippet": "  int tokenEnd;",
        "begin_line": 485,
        "end_line": 485,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ARGUMENTS",
        "snippet": "  public static final String ARGUMENTS = \"arguments\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " the arguments declaration."
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.nameStack",
        "snippet": "  private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Both belong to a scope by themselves."
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.rootRenamer",
        "snippet": "  private final Renamer rootRenamer;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 263,
        "end_line": 263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referencedNames",
        "snippet": "    private Set<String> referencedNames = ImmutableSet.of();",
        "begin_line": 266,
        "end_line": 266,
        "comment": " The set of names referenced in the current scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referenceStack",
        "snippet": "    private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();",
        "begin_line": 269,
        "end_line": 269,
        "comment": " Stack reference sets."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.nameMap",
        "snippet": "    private Map<String, List<Node>> nameMap = Maps.newHashMap();",
        "begin_line": 272,
        "end_line": 272,
        "comment": " Name are globally unique initially, so we don't need a per-scope map."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.nameUsage",
        "snippet": "    private final Multiset<String> nameUsage;",
        "begin_line": 431,
        "end_line": 431,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.global",
        "snippet": "    private final boolean global;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.UNIQUE_ID_SEPARATOR",
        "snippet": "    static final String UNIQUE_ID_SEPARATOR = \"$$\";",
        "begin_line": 435,
        "end_line": 435,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 516,
        "end_line": 516,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.uniqueIdSupplier",
        "snippet": "    private final Supplier<String> uniqueIdSupplier;",
        "begin_line": 517,
        "end_line": 517,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.idPrefix",
        "snippet": "    private final String idPrefix;",
        "begin_line": 518,
        "end_line": 518,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.removeConstness",
        "snippet": "    private final boolean removeConstness;",
        "begin_line": 519,
        "end_line": 519,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.convention",
        "snippet": "    private final CodingConvention convention;",
        "begin_line": 520,
        "end_line": 520,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BoilerplateRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.BoilerplateRenamer.uniqueIdSupplier",
        "snippet": "    private final Supplier<String> uniqueIdSupplier;",
        "begin_line": 589,
        "end_line": 589,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BoilerplateRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.BoilerplateRenamer.idPrefix",
        "snippet": "    private final String idPrefix;",
        "begin_line": 590,
        "end_line": 590,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BoilerplateRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.BoilerplateRenamer.convention",
        "snippet": "    private final CodingConvention convention;",
        "begin_line": 591,
        "end_line": 591,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistedRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.WhitelistedRenamer.delegate",
        "snippet": "    private Renamer delegate;",
        "begin_line": 610,
        "end_line": 610,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WhitelistedRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.WhitelistedRenamer.whitelist",
        "snippet": "    private Set<String> whitelist;",
        "begin_line": 611,
        "end_line": 611,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentInfo",
        "snippet": "  private JSDocInfo currentInfo;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " the current JSDoc which is being populated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populated",
        "snippet": "  private boolean populated = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " whether the current JSDocInfo has valuable information"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.parseDocumentation",
        "snippet": "  private boolean parseDocumentation = false;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " whether to include the documentation itself when parsing the JsDoc"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentMarker",
        "snippet": "  private JSDocInfo.Marker currentMarker = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " the current marker, if any."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.CONFIG_RESOURCE",
        "snippet": "  private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.suppressionNames",
        "snippet": "  private static Set<String> suppressionNames = null;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.reservedVars",
        "snippet": "  private static Set<String> reservedVars = null;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParseResult",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParseResult.ast",
        "snippet": "    public final Node ast;",
        "begin_line": 153,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParseResult",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParseResult.oldAst",
        "snippet": "    public final AstRoot oldAst;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototypeSlot",
        "snippet": "  private Property prototypeSlot;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   *\n   * If non-null, the type must be a PrototypeObjectType.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.propAccess",
        "snippet": "  private PropAccess propAccess;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n   * Whether the instances are structs, dicts, or unrestricted.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private JSType typeOfThis;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * The interfaces directly implemented by this function (for constructors)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = ImmutableList.of();",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n   * The interfaces directly extended by this function (for interfaces)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 131,
        "end_line": 131,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.source",
        "snippet": "  private final SourceExcerptProvider source;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.colorize",
        "snippet": "  private boolean colorize;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.SUPPORTED_COLOR_TERMINALS",
        "snippet": "  private static final Set<String> SUPPORTED_COLOR_TERMINALS =\n      ImmutableSet.of(\"xterm\",\n                      \"xterm-color\",\n                      \"xterm-256color\",\n                      \"screen-bce\");",
        "begin_line": 46,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.controlCharacter",
        "snippet": "    private final String controlCharacter;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",
        "snippet": "  static final String GETTER_ERROR_MESSAGE =\n      \"getters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 85,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",
        "snippet": "  static final String SETTER_ERROR_MESSAGE =\n      \"setters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 90,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",
        "snippet": "  static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
        "begin_line": 95,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  static final String MISPLACED_TYPE_ANNOTATION =\n      \"Type annotations are not allowed here. Are you missing parentheses?\";",
        "begin_line": 99,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.INVALID_ES3_PROP_NAME",
        "snippet": "  static final String INVALID_ES3_PROP_NAME =\n      \"Keywords and reserved words are not allowed as unquoted property \" +\n      \"names in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 102,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 109,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 111,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");",
        "begin_line": 115,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
        "begin_line": 118,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
        "begin_line": 122,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.reservedKeywords",
        "snippet": "  private final Set<String> reservedKeywords;",
        "begin_line": 129,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.parsedComments",
        "snippet": "  private final Set<Comment> parsedComments = Sets.newHashSet();",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.rootNodeJsDocHolder",
        "snippet": "  Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
        "begin_line": 134,
        "end_line": 134,
        "comment": " and stored in JSDocInfo for placeholder node."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileLevelJsDocBuilder",
        "snippet": "  Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
        "begin_line": 135,
        "end_line": 136,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileOverviewInfo",
        "snippet": "  JSDocInfo fileOverviewInfo = null;",
        "begin_line": 137,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.templateNode",
        "snippet": "  private final Node templateNode;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " memory footprint associated with these."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.name",
        "snippet": "  private String name = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.sourceNode",
        "snippet": "  private Node sourceNode = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.typeOfThis",
        "snippet": "  private JSType typeOfThis = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.templateTypeMap",
        "snippet": "  private TemplateTypeMap templateTypeMap = null;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.inferredReturnType",
        "snippet": "  private boolean inferredReturnType = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isNativeType",
        "snippet": "  private boolean isNativeType = false;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPosition",
        "snippet": "  private Map<Node, Integer> astPosition;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.nodePriorities",
        "snippet": "  private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " TODO(nicksantos): should these be node annotations?"
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityComparator",
        "snippet": "  private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
        "begin_line": 70,
        "end_line": 77,
        "comment": " they will often be executed first in the source program."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPositionCounter",
        "snippet": "  private int astPositionCounter;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityCounter",
        "snippet": "  private int priorityCounter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverseFunctions",
        "snippet": "  private final boolean shouldTraverseFunctions;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.edgeAnnotations",
        "snippet": "  private final boolean edgeAnnotations;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.root",
        "snippet": "  private Node root;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " on only the externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.exceptionHandler",
        "snippet": "  private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * This stack captures the structure of nested TRY blocks. The top of the\n   * stack is the inner most TRY block. A FUNCTION node in this stack implies\n   * that the handler is determined by the caller of the function at runtime.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.finallyMap",
        "snippet": "  private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * This map is used to handle the follow of FINALLY. For example:\n   *\n   * while(x) {\n   *  try {\n   *    try {\n   *      break;\n   *    } catch (a) {\n   *    } finally {\n   *      foo();\n   *    }\n   *    fooFollow();\n   *  } catch (b) {\n   *  } finally {\n   *    bar();\n   *  }\n   *  barFollow();\n   * }\n   * END();\n   *\n   * In this case finallyMap will contain a map from:\n   *    first FINALLY -> bar()\n   *    second FINALLY -> END()\n   *\n   * When we are connecting foo() and bar() to to their respective follow, we\n   * must also look up this map and connect:\n   *   foo() -> bar()\n   *   bar() -> END\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AstControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.AstControlFlowGraph.priorities",
        "snippet": "    private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
        "begin_line": 1005,
        "end_line": 1005,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.OPTIONAL_ARG_PREFIX",
        "snippet": "  private static final String OPTIONAL_ARG_PREFIX = \"opt_\";",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.VAR_ARGS_NAME",
        "snippet": "  private static final String VAR_ARGS_NAME = \"var_args\";",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GoogleCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/GoogleCodingConvention.java",
        "signature": "com.google.javascript.jscomp.GoogleCodingConvention.ENUM_KEY_PATTERN",
        "snippet": "  private static final Pattern ENUM_KEY_PATTERN =\n    Pattern.compile(\"[A-Z0-9][A-Z0-9_]*\");",
        "begin_line": 39,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.logger_",
        "snippet": "  private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.inputId",
        "snippet": "  private transient InputId inputId;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.sourceFile",
        "snippet": "  private transient SourceFile sourceFile;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.fileName",
        "snippet": "  private String fileName;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.root",
        "snippet": "  private Node root;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",
        "snippet": "  static final long MAX_POSITIVE_INTEGER_NUMBER = (long) Math.pow(2, 53);",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",
        "snippet": "  static final String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",
        "snippet": "  static final char LARGEST_BASIC_LATIN = 0x7f;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
        "snippet": "  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
        "begin_line": 58,
        "end_line": 65,
        "comment": " the set of builtin constructors that don't have side effects. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
        "begin_line": 974,
        "end_line": 976,
        "comment": " TODO(johnlenz): consider adding an extern annotation for this."
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
        "begin_line": 977,
        "end_line": 978,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",
        "snippet": "  private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
        "begin_line": 979,
        "end_line": 980,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",
        "snippet": "  private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
        "begin_line": 981,
        "end_line": 982,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.IMMUTABLE_PREDICATE",
        "snippet": "  static final Predicate<Node> IMMUTABLE_PREDICATE = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node n) {\n      return isImmutableValue(n);\n    }\n  };",
        "begin_line": 1290,
        "end_line": 1295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",
        "snippet": "  static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
        "begin_line": 1354,
        "end_line": 1355,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",
        "snippet": "  static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
        "begin_line": 1407,
        "end_line": 1408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",
        "snippet": "  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
        "begin_line": 1453,
        "end_line": 1454,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCollector",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.VarCollector.vars",
        "snippet": "    final Map<String, Node> vars = Maps.newLinkedHashMap();",
        "begin_line": 2532,
        "end_line": 2532,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNameNode",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNameNode.name",
        "snippet": "    final String name;",
        "begin_line": 2633,
        "end_line": 2633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNodeType",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNodeType.type",
        "snippet": "    final int type;",
        "begin_line": 2649,
        "end_line": 2649,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",
        "snippet": "  static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
        "begin_line": 2682,
        "end_line": 2682,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.nodes",
        "snippet": "  protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes =\n      Maps.newHashMap();",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useNodeAnnotations",
        "snippet": "  private final boolean useNodeAnnotations;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useEdgeAnnotations",
        "snippet": "  private final boolean useEdgeAnnotations;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.inEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();",
        "begin_line": 335,
        "end_line": 335,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.outEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> outEdgeList =\n        Lists.newArrayList();",
        "begin_line": 336,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.value",
        "snippet": "    protected final N value;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.in",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator();",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.out",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator();",
        "begin_line": 404,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.sourceNode",
        "snippet": "    private DiGraphNode<N, E> sourceNode;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.destNode",
        "snippet": "    private DiGraphNode<N, E> destNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.value",
        "snippet": "    protected final E value;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 558,
        "end_line": 558,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.scopes",
        "snippet": "  private final Map<Node, Scope> scopes = Maps.newHashMap();",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemoizedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/MemoizedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.MemoizedScopeCreator.delegate",
        "snippet": "  private final ScopeCreator delegate;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.convention",
        "snippet": "  protected final CodingConvention convention;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.typeRegistry",
        "snippet": "  final JSTypeRegistry typeRegistry;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.firstLink",
        "snippet": "  private ChainableReverseAbstractInterpreter firstLink;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.nextLink",
        "snippet": "  private ChainableReverseAbstractInterpreter nextLink;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.restrictUndefinedVisitor",
        "snippet": "  private final Visitor<JSType> restrictUndefinedVisitor =\n    new Visitor<JSType>() {\n      @Override\n      public JSType caseEnumElementType(EnumElementType enumElementType) {\n        JSType type = enumElementType.getPrimitiveType().visit(this);\n        if (type != null && enumElementType.getPrimitiveType().isEquivalentTo(type)) {\n          return enumElementType;\n        } else {\n          return type;\n        }\n      }\n\n      @Override\n      public JSType caseAllType() {\n        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,\n            STRING_TYPE, BOOLEAN_TYPE, NULL_TYPE);\n      }\n\n      @Override\n      public JSType caseNoObjectType() {\n        return getNativeType(NO_OBJECT_TYPE);\n      }\n\n      @Override\n      public JSType caseNoType() {\n        return getNativeType(NO_TYPE);\n      }\n\n      @Override\n      public JSType caseBooleanType() {\n        return getNativeType(BOOLEAN_TYPE);\n      }\n\n      @Override\n      public JSType caseFunctionType(FunctionType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseNullType() {\n        return getNativeType(NULL_TYPE);\n      }\n\n      @Override\n      public JSType caseNumberType() {\n        return getNativeType(NUMBER_TYPE);\n      }\n\n      @Override\n      public JSType caseObjectType(ObjectType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseStringType() {\n        return getNativeType(STRING_TYPE);\n      }\n\n      @Override\n      public JSType caseUnionType(UnionType type) {\n        return type.getRestrictedUnion(getNativeType(VOID_TYPE));\n      }\n\n      @Override\n      public JSType caseUnknownType() {\n        return getNativeType(UNKNOWN_TYPE);\n      }\n\n      @Override\n      public JSType caseVoidType() {\n        return null;\n      }\n\n      @Override\n      public JSType caseTemplatizedType(TemplatizedType type) {\n        return caseObjectType(type);\n      }\n\n      @Override\n      public JSType caseTemplateType(TemplateType templateType) {\n        return caseObjectType(templateType);\n      }\n    };",
        "begin_line": 186,
        "end_line": 268,
        "comment": "\n   * @see #getRestrictedWithoutUndefined(JSType)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.restrictNullVisitor",
        "snippet": "  private final Visitor<JSType> restrictNullVisitor =\n    new Visitor<JSType>() {\n      @Override\n      public JSType caseEnumElementType(EnumElementType enumElementType) {\n        JSType type = enumElementType.getPrimitiveType().visit(this);\n        if (type != null &&\n            enumElementType.getPrimitiveType().isEquivalentTo(type)) {\n          return enumElementType;\n        } else {\n          return type;\n        }\n      }\n\n      @Override\n      public JSType caseAllType() {\n        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,\n            STRING_TYPE, BOOLEAN_TYPE, VOID_TYPE);\n      }\n\n      @Override\n      public JSType caseNoObjectType() {\n        return getNativeType(NO_OBJECT_TYPE);\n      }\n\n      @Override\n      public JSType caseNoType() {\n        return getNativeType(NO_TYPE);\n      }\n\n      @Override\n      public JSType caseBooleanType() {\n        return getNativeType(BOOLEAN_TYPE);\n      }\n\n      @Override\n      public JSType caseFunctionType(FunctionType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseNullType() {\n        return null;\n      }\n\n      @Override\n      public JSType caseNumberType() {\n        return getNativeType(NUMBER_TYPE);\n      }\n\n      @Override\n      public JSType caseObjectType(ObjectType type) {\n        return type;\n      }\n\n      @Override\n      public JSType caseStringType() {\n        return getNativeType(STRING_TYPE);\n      }\n\n      @Override\n      public JSType caseUnionType(UnionType type) {\n        return type.getRestrictedUnion(getNativeType(NULL_TYPE));\n      }\n\n      @Override\n      public JSType caseUnknownType() {\n        return getNativeType(UNKNOWN_TYPE);\n      }\n\n      @Override\n      public JSType caseVoidType() {\n        return getNativeType(VOID_TYPE);\n      }\n\n      @Override\n      public JSType caseTemplatizedType(TemplatizedType type) {\n        return caseObjectType(type);\n      }\n\n      @Override\n      public JSType caseTemplateType(TemplateType templateType) {\n        return caseObjectType(templateType);\n      }\n    };",
        "begin_line": 274,
        "end_line": 357,
        "comment": "\n   * @see #getRestrictedWithoutNull(JSType)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor.value",
        "snippet": "    private final String value;",
        "begin_line": 548,
        "end_line": 548,
        "comment": "\n     * A value known to be equal or not equal to the result of the\n     * {@code typeOf} operation.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByOneTypeOfResultVisitor.resultEqualsValue",
        "snippet": "    private final boolean resultEqualsValue;",
        "begin_line": 555,
        "end_line": 555,
        "comment": "\n     * {@code true} if the {@code typeOf} result is known to equal\n     * {@code value}; {@code false} if it is known <em>not</em> to equal\n     * {@code value}.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 24,
        "end_line": 24,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.group",
        "snippet": "  private final DiagnosticGroup group;",
        "begin_line": 26,
        "end_line": 26,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.stripTweaks",
        "snippet": "  private final boolean stripTweaks;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compilerDefaultValueOverrides",
        "snippet": "  private final SortedMap<String, Node> compilerDefaultValueOverrides;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.ID_MATCHER",
        "snippet": "  private static final CharMatcher ID_MATCHER = CharMatcher.inRange('a', 'z').\n      or(CharMatcher.inRange('A', 'Z')).or(CharMatcher.anyOf(\"0123456789_.\"));",
        "begin_line": 56,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.UNKNOWN_TWEAK_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_TWEAK_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_TWEAK_WARNING\",\n          \"no tweak registered with ID {0}\");",
        "begin_line": 60,
        "end_line": 63,
        "comment": " Warnings and Errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_MULTIPLY_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_MULTIPLY_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_MULTIPLY_REGISTERED_ERROR\",\n          \"Tweak {0} has already been registered.\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType NON_LITERAL_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_LITERAL_TWEAK_ID_ERROR\",\n          \"tweak ID must be a string literal\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_DEFAULT_VALUE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING\",\n          \"tweak {0} registered with {1} must have a default value that is a \" +\n          \"literal of type {2}\");",
        "begin_line": 75,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_TWEAK_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_TWEAK_INIT_ERROR\",\n          \"tweak declaration {0} must occur in the global scope\");",
        "begin_line": 81,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR\",\n          \"Cannot override the default value of tweak {0} after it has been \" +\n          \"registered\");",
        "begin_line": 86,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING",
        "snippet": "  static final DiagnosticType TWEAK_WRONG_GETTER_TYPE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TWEAK_WRONG_GETTER_TYPE_WARNING\",\n          \"tweak getter function {0} used for tweak registered using {1}\");",
        "begin_line": 92,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_TWEAK_ID_ERROR\",\n          \"tweak ID contains illegal characters. Only letters, numbers, _ \" +\n          \"and . are allowed\");",
        "begin_line": 97,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.name",
        "snippet": "    final String name;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.expectedTypeName",
        "snippet": "    final String expectedTypeName;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeA",
        "snippet": "    final int validNodeTypeA;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeB",
        "snippet": "    final int validNodeTypeB;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.registerFunction",
        "snippet": "    final TweakFunction registerFunction;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_FUNCTIONS_MAP",
        "snippet": "  private static final Map<String, TweakFunction> TWEAK_FUNCTIONS_MAP;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " A map of function name -> TweakFunction."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.tweakInfos",
        "snippet": "    final Map<String, TweakInfo> tweakInfos;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls;",
        "begin_line": 325,
        "end_line": 325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.allTweaks",
        "snippet": "    final Map<String, TweakInfo> allTweaks = Maps.newHashMap();",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls = Lists.newArrayList();",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.sourceName",
        "snippet": "    final String sourceName;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.tweakFunc",
        "snippet": "    final TweakFunction tweakFunc;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.valueNode",
        "snippet": "    final Node valueNode;",
        "begin_line": 435,
        "end_line": 435,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.tweakId",
        "snippet": "    final String tweakId;",
        "begin_line": 459,
        "end_line": 459,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.functionCalls",
        "snippet": "    final List<TweakFunctionCall> functionCalls;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.registerCall",
        "snippet": "    TweakFunctionCall registerCall;",
        "begin_line": 461,
        "end_line": 461,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.defaultValueNode",
        "snippet": "    Node defaultValueNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.READ_ERROR",
        "snippet": "  static final DiagnosticType READ_ERROR = DiagnosticType.error(\n      \"JSC_READ_ERROR\", \"Cannot read: {0}\");",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.stage",
        "snippet": "  private LifeCycleStage stage = LifeCycleStage.RAW;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.analyzeChangedScopesOnly",
        "snippet": "  protected boolean analyzeChangedScopesOnly = true;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Intended for use by the compiler only; not accessed by compiler users."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.name",
        "snippet": "  private final String name;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.EMPTY_MAP",
        "snippet": "  private static final PropertyMap EMPTY_MAP = new PropertyMap(\n      ImmutableMap.<String, Property>of());",
        "begin_line": 60,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.PROP_MAP_FROM_TYPE",
        "snippet": "  private static final Function<ObjectType, PropertyMap> PROP_MAP_FROM_TYPE =\n      new Function<ObjectType, PropertyMap>() {\n    @Override public PropertyMap apply(ObjectType t) {\n      return t.getPropertyMap();\n    }\n  };",
        "begin_line": 63,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.parentSource",
        "snippet": "  private ObjectType parentSource = null;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " just reference primary parents and secondary parents directly."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The map of our own properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.name",
        "snippet": "  private final String name;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * Property's name.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "  private JSType type;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Property's type.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "  private final boolean inferred;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * Whether the property's type is inferred.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.propertyNode",
        "snippet": "  private Node propertyNode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n   * The node corresponding to this property, e.g., a GETPROP node that\n   * declares this property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ModificationVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/ModificationVisitor.java",
        "signature": "com.google.javascript.rhino.jstype.ModificationVisitor.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.callback",
        "snippet": "  private final Callback callback;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.curNode",
        "snippet": "  private Node curNode;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Contains the current node"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",
        "snippet": "  public static final DiagnosticType NODE_TRAVERSAL_ERROR =\n      DiagnosticType.error(\"JSC_NODE_TRAVERSAL_ERROR\", \"{0}\");",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopes",
        "snippet": "  private final Deque<Scope> scopes = new ArrayDeque<Scope>();",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Stack containing the Scopes that have been created. The Scope objects\n   * are lazily created; so the {@code scopeRoots} stack contains the\n   * Nodes for all Scopes that have not been created yet.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeRoots",
        "snippet": "  private final Deque<Node> scopeRoots = new ArrayDeque<Node>();",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * A stack of scope roots. All scopes that have not been created\n   * are represented in this Deque.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.cfgs",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Stack of control flow graphs (CFG). There is one CFG per scope. CFGs\n   * are lazily populated: elements are {@code null} until requested by\n   * {@link #getControlFlowGraph()}. Note that {@link ArrayDeque} does not allow\n   * {@code null} elements, so {@link LinkedList} is used instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The current source file name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The current input "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCreator",
        "snippet": "  private ScopeCreator scopeCreator;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The scope creator "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCallback",
        "snippet": "  private ScopedCallback scopeCallback;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Possible callback for scope entry and exist *"
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.nodeTypes",
        "snippet": "    private final Set<Integer> nodeTypes;",
        "begin_line": 198,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.include",
        "snippet": "    private final boolean include;",
        "begin_line": 199,
        "end_line": 199,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",
        "snippet": "  private static final String MISSING_SOURCE = \"[source unknown]\";",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.assertOnChange",
        "snippet": "  private final boolean assertOnChange;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.CONVERT_WHILE_TO_FOR",
        "snippet": "  private static final boolean CONVERT_WHILE_TO_FOR = true;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE",
        "snippet": "  static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.CATCH_BLOCK_VAR_ERROR",
        "snippet": "  public static final DiagnosticType CATCH_BLOCK_VAR_ERROR =\n    DiagnosticType.error(\n        \"JSC_CATCH_BLOCK_VAR_ERROR\",\n        \"The use of scope variable {0} is not allowed within a catch block \" +\n        \"with a catch exception of the same name.\");",
        "begin_line": 72,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindExposeAnnotations",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.FindExposeAnnotations.exposedProperties",
        "snippet": "    private final Set<String> exposedProperties = Sets.newHashSet();",
        "begin_line": 166,
        "end_line": 166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RewriteExposedProperties",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.RewriteExposedProperties.exposedProperties",
        "snippet": "    private final Set<String> exposedProperties;",
        "begin_line": 194,
        "end_line": 194,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 225,
        "end_line": 225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 226,
        "end_line": 226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.compiler",
        "snippet": "    final private AbstractCompiler compiler;",
        "begin_line": 279,
        "end_line": 279,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.checkUserDeclarations",
        "snippet": "    final private boolean checkUserDeclarations;",
        "begin_line": 280,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.constantMap",
        "snippet": "    private Map<String, Boolean> constantMap = Maps.newHashMap();",
        "begin_line": 297,
        "end_line": 297,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 361,
        "end_line": 361,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 362,
        "end_line": 362,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DuplicateDeclarationHandler",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.DuplicateDeclarationHandler.hasOkDuplicateDeclaration",
        "snippet": "    private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();",
        "begin_line": 713,
        "end_line": 713,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",
        "snippet": "  private static final Function<TypePair, TypePair> EQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderEquality(p.typeB);\n      }\n    };",
        "begin_line": 47,
        "end_line": 56,
        "comment": "\n   * Merging function for equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",
        "snippet": "  private static final Function<TypePair, TypePair> NE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderInequality(p.typeB);\n      }\n    };",
        "begin_line": 61,
        "end_line": 70,
        "comment": "\n   * Merging function for non-equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",
        "snippet": "  private static final\n      Function<TypePair, TypePair> SHEQ =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowEquality(p.typeB);\n      }\n    };",
        "begin_line": 75,
        "end_line": 85,
        "comment": "\n   * Merging function for strict equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",
        "snippet": "  private static final\n      Function<TypePair, TypePair> SHNE =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        if (p.typeA == null || p.typeB == null) {\n          return null;\n        }\n        return p.typeA.getTypesUnderShallowInequality(p.typeB);\n      }\n    };",
        "begin_line": 90,
        "end_line": 100,
        "comment": "\n   * Merging function for strict non-equality between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.ineq",
        "snippet": "  private final Function<TypePair, TypePair> ineq =\n    new Function<TypePair, TypePair>() {\n      @Override\n      public TypePair apply(TypePair p) {\n        return new TypePair(\n            getRestrictedWithoutUndefined(p.typeA),\n            getRestrictedWithoutUndefined(p.typeB));\n      }\n    };",
        "begin_line": 105,
        "end_line": 113,
        "comment": "\n   * Merging function for inequality comparisons between types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByTrueInstanceOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByTrueInstanceOfResultVisitor.target",
        "snippet": "    private final ObjectType target;",
        "begin_line": 509,
        "end_line": 509,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.type.RestrictByFalseInstanceOfResultVisitor",
        "src_path": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "signature": "com.google.javascript.jscomp.type.RestrictByFalseInstanceOfResultVisitor.target",
        "snippet": "    private final ObjectType target;",
        "begin_line": 563,
        "end_line": 563,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedType",
        "snippet": "  private JSType referencedType;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedObjType",
        "snippet": "  private ObjectType referencedObjType;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.name",
        "snippet": "  private final String name;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass",
        "snippet": "  private final boolean isOneTimePass;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.logger",
        "snippet": "  private final Logger logger;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.root",
        "snippet": "  private final Node root;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The root of the AST. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The source name where the type expression appears. "
    },
    {
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.warnings",
        "snippet": "    private List<String> warnings = null;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.errors",
        "snippet": "    private List<String> errors = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.types",
        "snippet": "  private final Set<DiagnosticType> types;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The set of types represented by this group, hashed by key."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.name",
        "snippet": "  private final String name;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " A human-readable name for the group."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.singletons",
        "snippet": "  private static final Map<DiagnosticType, DiagnosticGroup> singletons =\n      Maps.newHashMap();",
        "begin_line": 66,
        "end_line": 67,
        "comment": " DiagnosticGroups with only a single DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.LT_ESCAPED",
        "snippet": "  private static final String LT_ESCAPED = \"\\\\x3c\";",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.GT_ESCAPED",
        "snippet": "  private static final String GT_ESCAPED = \"\\\\x3e\";",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.escapedJsStrings",
        "snippet": "  private final Map<String, String> escapedJsStrings = Maps.newHashMap();",
        "begin_line": 42,
        "end_line": 42,
        "comment": " A memoizer for formatting strings as JS strings."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",
        "snippet": "  private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
        "begin_line": 44,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.cc",
        "snippet": "  private final CodeConsumer cc;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.outputCharsetEncoder",
        "snippet": "  private final CharsetEncoder outputCharsetEncoder;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.preferSingleQuotes",
        "snippet": "  private final boolean preferSingleQuotes;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.trustedStrings",
        "snippet": "  private final boolean trustedStrings;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.languageMode",
        "snippet": "  private final LanguageMode languageMode;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = -1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.elmap",
        "snippet": "  private final Map<E, Node<E>> elmap = Maps.newLinkedHashMap();",
        "begin_line": 54,
        "end_line": 54,
        "comment": " All values with the same root node are in the same equivalence set. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.StandardUnionFind",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.StandardUnionFind.nodeForValue",
        "snippet": "      Node<E> nodeForValue = elmap.get(value);",
        "begin_line": 173,
        "end_line": 173,
        "comment": " some node that's close to the root, or null "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.parent",
        "snippet": "    Node<E> parent;",
        "begin_line": 209,
        "end_line": 209,
        "comment": " The parent node of this element. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.element",
        "snippet": "    final E element;",
        "begin_line": 212,
        "end_line": 212,
        "comment": " The element represented by this node. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.rank",
        "snippet": "    int rank = 0;",
        "begin_line": 215,
        "end_line": 215,
        "comment": " A bound on the depth of the subtree rooted to this node. "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Node",
        "src_path": "src/com/google/javascript/jscomp/graph/StandardUnionFind.java",
        "signature": "com.google.javascript.jscomp.graph.Node.size",
        "snippet": "    int size = 1;",
        "begin_line": 221,
        "end_line": 221,
        "comment": "\n     * If this node is the root of a tree, this is the number of elements in the\n     * tree. Otherwise, it's undefined.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",
        "snippet": "  private static final int DEFAULT_MAX_UNION_SIZE = 20;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.maxUnionSize",
        "snippet": "  private final int maxUnionSize;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.functionTypePosition",
        "snippet": "  private int functionTypePosition = -1;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " one structural function, or just bails out and uses the top function type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.logger",
        "snippet": "  static final Logger logger =\n      Logger.getLogger(Tracer.class.getName());",
        "begin_line": 163,
        "end_line": 164,
        "comment": " package-private for access from unit tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.defaultPrettyPrint",
        "snippet": "  private static volatile boolean defaultPrettyPrint;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Whether pretty printing is enabled. This is intended to be set once\n   * at application startup.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingStatistics",
        "snippet": "  private static List<TracingStatistic> extraTracingStatistics =\n      new CopyOnWriteArrayList<TracingStatistic>();",
        "begin_line": 176,
        "end_line": 177,
        "comment": " This list is guaranteed to only increase in length.  It contains\n   * a list of additional statistics that the user wants to keep track\n   * of.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingValues",
        "snippet": "  private long[] extraTracingValues;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Values returned by extraTracingStatistics "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.type",
        "snippet": "  @Nullable private final String type;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " The type for grouping traces, may be null "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.comment",
        "snippet": "  private final String comment;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A comment string for the report "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startTimeMs",
        "snippet": "  private final long startTimeMs;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Start time of the trace "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.stopTimeMs",
        "snippet": "  private long stopTimeMs;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Stop time of the trace, non-final "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startThread",
        "snippet": "  final Thread startThread;",
        "begin_line": 198,
        "end_line": 198,
        "comment": "\n   * Record our starter thread in order to trap Traces that are started in one\n   * thread and stopped in another\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.MAX_TRACE_SIZE",
        "snippet": "  static final int MAX_TRACE_SIZE = 1000;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n   * We limit the number of events in a Trace in order to catch memory\n   * leaks (a thread that keeps logging events and never clears them).\n   * This number is arbitrary and can be increased if necessary (though\n   * if there are more than 1000 events then the Tracer is probably being\n   * misused).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.clock",
        "snippet": "  static InternalClock clock = new InternalClock() {\n    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n  };",
        "begin_line": 221,
        "end_line": 226,
        "comment": "\n   * Default clock that calls through to the system clock. Can be overridden\n   * in unit tests.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.count",
        "snippet": "    private int count;",
        "begin_line": 541,
        "end_line": 541,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.silent",
        "snippet": "    private int silent;",
        "begin_line": 542,
        "end_line": 542,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.clockTime",
        "snippet": "    private int clockTime;",
        "begin_line": 543,
        "end_line": 543,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.extraInfo",
        "snippet": "    private int[] extraInfo;",
        "begin_line": 544,
        "end_line": 544,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToCountMap",
        "snippet": "  @Nullable private static AtomicTracerStatMap typeToCountMap;",
        "begin_line": 575,
        "end_line": 575,
        "comment": "\n   * This map tracks counts of tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToSilentMap",
        "snippet": "  @Nullable private static AtomicTracerStatMap typeToSilentMap;",
        "begin_line": 580,
        "end_line": 580,
        "comment": "\n   * This map tracks counts of silent tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToTimeMap",
        "snippet": "  @Nullable private static AtomicTracerStatMap typeToTimeMap;",
        "begin_line": 585,
        "end_line": 585,
        "comment": "\n   * This map tracks time (ms) for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.ZERO_STAT",
        "snippet": "  private static final Stat ZERO_STAT = new Stat();",
        "begin_line": 633,
        "end_line": 633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.isStart",
        "snippet": "    boolean isStart;   // else is_stop",
        "begin_line": 644,
        "end_line": 644,
        "comment": " else is_stop"
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.tracer",
        "snippet": "    Tracer tracer;",
        "begin_line": 645,
        "end_line": 645,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.defaultSilenceThreshold",
        "snippet": "    int defaultSilenceThreshold; // non-final",
        "begin_line": 705,
        "end_line": 705,
        "comment": " non-final"
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.events",
        "snippet": "    final ArrayList<Event> events = new ArrayList<Event>();",
        "begin_line": 708,
        "end_line": 708,
        "comment": " The Events corresponding to each startEvent/stopEvent "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.outstandingEvents",
        "snippet": "    final HashSet<Tracer> outstandingEvents = new HashSet<Tracer>();",
        "begin_line": 711,
        "end_line": 711,
        "comment": " Tracers that have not had their .stop() called "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.stats",
        "snippet": "    final Map<String, Stat> stats = new HashMap<String, Stat>();",
        "begin_line": 714,
        "end_line": 714,
        "comment": " Map from type to Stat object "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isOutstandingEventsTruncated",
        "snippet": "    boolean isOutstandingEventsTruncated = false;",
        "begin_line": 720,
        "end_line": 720,
        "comment": "\n     * True if {@code outstandingEvents} has been cleared because we exceeded\n     * the max trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isEventsTruncated",
        "snippet": "    boolean isEventsTruncated = false;",
        "begin_line": 726,
        "end_line": 726,
        "comment": "\n     * True if {@code events} has been cleared because we exceeded the max\n     * trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isInitialized",
        "snippet": "    boolean isInitialized = false;",
        "begin_line": 732,
        "end_line": 732,
        "comment": "\n     * Set to true if {@link Tracer#initCurrentThreadTrace()} was called by\n     * the current thread.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.prettyPrint",
        "snippet": "    boolean prettyPrint = false;",
        "begin_line": 737,
        "end_line": 737,
        "comment": "\n     * Whether pretty printing is enabled for the trace.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.traces",
        "snippet": "  private static ThreadLocal<ThreadTrace> traces =\n      new ThreadLocal<ThreadTrace>();",
        "begin_line": 952,
        "end_line": 953,
        "comment": " Holds the ThreadTrace for each thread.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.AtomicTracerStatMap",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.AtomicTracerStatMap.map",
        "snippet": "    private final ConcurrentMap<String, Long> map =\n        new ConcurrentHashMap<String, Long>();",
        "begin_line": 1033,
        "end_line": 1034,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.serialVersionUID",
        "snippet": "  public static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.id",
        "snippet": "  private final String id;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR =\n      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR",
        "snippet": "  static final DiagnosticType TYPE_PARSE_ERROR =\n      DiagnosticType.warning(\"JSC_TYPE_PARSE_ERROR\", \"{0}\");",
        "begin_line": 36,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TRAILING_COMMA",
        "snippet": "  static final DiagnosticType TRAILING_COMMA =\n      DiagnosticType.error(\"JSC_TRAILING_COMMA\",\n          \"Parse error. IE8 (and below) will parse trailing commas in \" +\n          \"array and object literals incorrectly. \" +\n          \"If you are targeting newer versions of JS, \" +\n          \"set the appropriate language_in option.\");",
        "begin_line": 41,
        "end_line": 46,
        "comment": " warnings API."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.DUPLICATE_PARAM",
        "snippet": "  static final DiagnosticType DUPLICATE_PARAM =\n      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.BAD_JSDOC_ANNOTATION",
        "snippet": "  static final DiagnosticType BAD_JSDOC_ANNOTATION =\n      DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");",
        "begin_line": 51,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  static final DiagnosticType MISPLACED_TYPE_ANNOTATION =\n      DiagnosticType.warning(\"JSC_MISPLACED_TYPE_ANNOTATION\",\n          \"Type annotations are not allowed here. \" +\n          \"Are you missing parentheses?\");",
        "begin_line": 54,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.INVALID_ES3_PROP_NAME",
        "snippet": "  static final DiagnosticType INVALID_ES3_PROP_NAME = DiagnosticType.warning(\n      \"JSC_INVALID_ES3_PROP_NAME\",\n      \"Keywords and reserved words are not allowed as unquoted property \" +\n      \"names in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\");",
        "begin_line": 59,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_TREE_TOO_DEEP",
        "snippet": "  static final DiagnosticType PARSE_TREE_TOO_DEEP =\n      DiagnosticType.error(\"PARSE_TREE_TOO_DEEP\",\n          \"Parse tree too deep.\");",
        "begin_line": 66,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.typeMap",
        "snippet": "  private final Map<Pattern, DiagnosticType> typeMap;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " A map of Rhino messages to their DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Collection<JSType> alternates;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private int hashcode;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.PARAM_LIST);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.sortDependencies",
        "snippet": "  private boolean sortDependencies = false;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.pruneDependencies",
        "snippet": "  private boolean pruneDependencies = false;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.dropMoochers",
        "snippet": "  private boolean dropMoochers = false;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.entryPoints",
        "snippet": "  private final Set<String> entryPoints = Sets.newHashSet();",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnTypeInferred",
        "snippet": "  final boolean returnTypeInferred;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Whether the return type is inferred."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.key",
        "snippet": "  public final String key;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n   * The error type. Used as the BugPattern and BugInstance types by\n   * BugBot's XML\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.format",
        "snippet": "  public final MessageFormat format;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The default way to format errors "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.defaultLevel",
        "snippet": "  public final CheckLevel defaultLevel;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Default level "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.level",
        "snippet": "  public CheckLevel level;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Reporting level, initially the defaultLevel but may be changed. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.name",
        "snippet": "  final String name;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.type",
        "snippet": "  final JSType type;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSlot",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSlot.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSlot.inferred",
        "snippet": "  final boolean inferred;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.allValueTypes",
        "snippet": "  private final JSType allValueTypes;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.shouldReport",
        "snippet": "  private boolean shouldReport = true;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.nullOrUndefined",
        "snippet": "  private final JSType nullOrUndefined;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.mismatches",
        "snippet": "  private final List<TypeMismatch> mismatches = Lists.newArrayList();",
        "begin_line": 71,
        "end_line": 71,
        "comment": " allowed, that doesn't mean we should invalidate all Cakes."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.FOUND_REQUIRED",
        "snippet": "  private static final String FOUND_REQUIRED =\n      \"{0}\\n\" +\n      \"found   : {1}\\n\" +\n      \"required: {2}\";",
        "begin_line": 74,
        "end_line": 77,
        "comment": " User warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INVALID_CAST",
        "snippet": "  static final DiagnosticType INVALID_CAST =\n      DiagnosticType.warning(\"JSC_INVALID_CAST\",\n          \"invalid cast - must be a subtype or supertype\\n\" +\n          \"from: {0}\\n\" +\n          \"to  : {1}\");",
        "begin_line": 79,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.TYPE_MISMATCH_WARNING",
        "snippet": "  static final DiagnosticType TYPE_MISMATCH_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TYPE_MISMATCH\",\n          \"{0}\");",
        "begin_line": 85,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.MISSING_EXTENDS_TAG_WARNING",
        "snippet": "  static final DiagnosticType MISSING_EXTENDS_TAG_WARNING =\n      DiagnosticType.warning(\n          \"JSC_MISSING_EXTENDS_TAG\",\n          \"Missing @extends tag on type {0}\");",
        "begin_line": 90,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.DUP_VAR_DECLARATION",
        "snippet": "  static final DiagnosticType DUP_VAR_DECLARATION =\n      DiagnosticType.warning(\"JSC_DUP_VAR_DECLARATION\",\n          \"variable {0} redefined with type {1}, \" +\n          \"original definition at {2}:{3} with type {4}\");",
        "begin_line": 95,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.HIDDEN_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
        "begin_line": 100,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.INTERFACE_METHOD_NOT_IMPLEMENTED",
        "snippet": "  static final DiagnosticType INTERFACE_METHOD_NOT_IMPLEMENTED =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_NOT_IMPLEMENTED\",\n          \"property {0} on interface {1} is not implemented by type {2}\");",
        "begin_line": 107,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.HIDDEN_INTERFACE_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\n        \"JSC_HIDDEN_INTERFACE_PROPERTY_MISMATCH\",\n        \"mismatch of the {0} property type and the type \" +\n        \"of the property it overrides from interface {1}\\n\" +\n        \"original: {2}\\n\" +\n        \"override: {3}\");",
        "begin_line": 112,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.UNKNOWN_TYPEOF_VALUE",
        "snippet": "  static final DiagnosticType UNKNOWN_TYPEOF_VALUE =\n      DiagnosticType.warning(\"JSC_UNKNOWN_TYPEOF_VALUE\", \"unknown type: {0}\");",
        "begin_line": 120,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.ILLEGAL_PROPERTY_ACCESS",
        "snippet": "  static final DiagnosticType ILLEGAL_PROPERTY_ACCESS =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_ACCESS\",\n                             \"Cannot do {0} access on a {1}\");",
        "begin_line": 123,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeValidator",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeValidator.ALL_DIAGNOSTICS",
        "snippet": "  static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      INVALID_CAST,\n      TYPE_MISMATCH_WARNING,\n      MISSING_EXTENDS_TAG_WARNING,\n      DUP_VAR_DECLARATION,\n      HIDDEN_PROPERTY_MISMATCH,\n      INTERFACE_METHOD_NOT_IMPLEMENTED,\n      HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n      UNKNOWN_TYPEOF_VALUE,\n      ILLEGAL_PROPERTY_ACCESS);",
        "begin_line": 127,
        "end_line": 136,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeA",
        "snippet": "    final JSType typeA;",
        "begin_line": 812,
        "end_line": 812,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.typeB",
        "snippet": "    final JSType typeB;",
        "begin_line": 813,
        "end_line": 813,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeMismatch",
        "src_path": "src/com/google/javascript/jscomp/TypeValidator.java",
        "signature": "com.google.javascript.jscomp.TypeMismatch.src",
        "snippet": "    final JSError src;",
        "begin_line": 814,
        "end_line": 814,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementNeedsEnded",
        "snippet": "  boolean statementNeedsEnded = false;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementStarted",
        "snippet": "  boolean statementStarted = false;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.sawFunction",
        "snippet": "  boolean sawFunction = false;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "src_path": "src/com/google/javascript/jscomp/RecentChange.java",
        "signature": "com.google.javascript.jscomp.RecentChange.hasChanged",
        "snippet": "  private boolean hasChanged = false;",
        "begin_line": 24,
        "end_line": 24,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.cache",
        "snippet": "  private final FlatFlowScopeCache cache;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The closest flow scope cache."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.parent",
        "snippet": "  private final LinkedFlowScope parent;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " The parent flow scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.depth",
        "snippet": "  private int depth;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The distance between this flow scope and the closest flat flow scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.MAX_DEPTH",
        "snippet": "  static final int MAX_DEPTH = 250;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.flattened",
        "snippet": "  private FlatFlowScopeCache flattened;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " A FlatFlowScopeCache equivalent to this scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.frozen",
        "snippet": "  private boolean frozen = false;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " So once a child scope is created, this flow scope may not be modified."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowScope",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowScope.lastSlot",
        "snippet": "  private LinkedFlowSlot lastSlot;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " linked list of slots."
    },
    {
        "class_name": "com.google.javascript.jscomp.LinkedFlowSlot",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.LinkedFlowSlot.parent",
        "snippet": "    final LinkedFlowSlot parent;",
        "begin_line": 373,
        "end_line": 373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.functionScope",
        "snippet": "    private final Scope functionScope;",
        "begin_line": 387,
        "end_line": 387,
        "comment": " The Scope for the entire function or for the global scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.linkedEquivalent",
        "snippet": "    private final LinkedFlowScope linkedEquivalent;",
        "begin_line": 390,
        "end_line": 390,
        "comment": " The linked flow scope that this cache represents."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.symbols",
        "snippet": "    private Map<String, StaticSlot<JSType>> symbols = Maps.newHashMap();",
        "begin_line": 394,
        "end_line": 394,
        "comment": " May not include lazily declared qualified names."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlatFlowScopeCache",
        "src_path": "src/com/google/javascript/jscomp/LinkedFlowScope.java",
        "signature": "com.google.javascript.jscomp.FlatFlowScopeCache.dirtySymbols",
        "snippet": "    final Set<String> dirtySymbols = Sets.newHashSet();",
        "begin_line": 404,
        "end_line": 404,
        "comment": " list for symbols that aren't defined anywhere nearby."
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.target",
        "snippet": "    final Node target;",
        "begin_line": 260,
        "end_line": 260,
        "comment": " The target of the bind action"
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.thisValue",
        "snippet": "    final Node thisValue;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " The node representing the \"this\" value, maybe null"
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.parameters",
        "snippet": "    final Node parameters;",
        "begin_line": 264,
        "end_line": 264,
        "comment": " The head of a Node list representing the parameters"
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.type",
        "snippet": "    final SubclassType type;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.subclassName",
        "snippet": "    final String subclassName;",
        "begin_line": 325,
        "end_line": 325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.superclassName",
        "snippet": "    final String superclassName;",
        "begin_line": 326,
        "end_line": 326,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DelegateRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.DelegateRelationship.delegateBase",
        "snippet": "    final String delegateBase;",
        "begin_line": 344,
        "end_line": 344,
        "comment": " The subclass in the base code. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DelegateRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.DelegateRelationship.delegator",
        "snippet": "    final String delegator;",
        "begin_line": 347,
        "end_line": 347,
        "comment": " The class in the base code. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.typeName",
        "snippet": "    final String typeName;",
        "begin_line": 361,
        "end_line": 361,
        "comment": " Type to cast to. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.objectNode",
        "snippet": "    final Node objectNode;",
        "begin_line": 364,
        "end_line": 364,
        "comment": " Object to cast. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.diagnosticType",
        "snippet": "    final DiagnosticType diagnosticType;",
        "begin_line": 367,
        "end_line": 367,
        "comment": " Error message "
    },
    {
        "class_name": "com.google.javascript.jscomp.AssertionFunctionSpec",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.AssertionFunctionSpec.functionName",
        "snippet": "    protected final String functionName;",
        "begin_line": 383,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssertionFunctionSpec",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.AssertionFunctionSpec.assertedType",
        "snippet": "    protected final JSTypeNative assertedType;",
        "begin_line": 384,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNUSED",
        "snippet": "  static final DiagnosticType UNUSED =\n      DiagnosticType.warning(\"JSC_UNUSED\", \"{0}\");",
        "begin_line": 30,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.groupsByName",
        "snippet": "  private static final Map<String, DiagnosticGroup> groupsByName =\n      Maps.newHashMap();",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES",
        "snippet": "  static final String DIAGNOSTIC_GROUP_NAMES =\n      \"accessControls, ambiguousFunctionDecl, checkEventfulObjectDisposal, \" +\n      \"checkRegExp, checkStructDictInheritance, checkTypes, checkVars, \" +\n      \"const, constantProperty, deprecated, duplicateMessage, es3, \" +\n      \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n      \"internetExplorerChecks, invalidCasts, misplacedTypeAnnotation, \" +\n      \"missingProperties, missingProvide, missingRequire, missingReturn,\" +\n      \"nonStandardJsDocs, reportUnknownTypes, suspiciousCode, \" +\n      \"strictModuleDepCheck, typeInvalidation, \" +\n      \"undefinedNames, undefinedVars, unknownDefines, uselessCode, \" +\n      \"visibility\";",
        "begin_line": 78,
        "end_line": 88,
        "comment": " to parser/ParserConfig.properties"
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS",
        "snippet": "  public static final DiagnosticGroup GLOBAL_THIS =\n      DiagnosticGroups.registerGroup(\"globalThis\",\n          CheckGlobalThis.GLOBAL_THIS);",
        "begin_line": 90,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED",
        "snippet": "  public static final DiagnosticGroup DEPRECATED =\n      DiagnosticGroups.registerGroup(\"deprecated\",\n          CheckAccessControls.DEPRECATED_NAME,\n          CheckAccessControls.DEPRECATED_NAME_REASON,\n          CheckAccessControls.DEPRECATED_PROP,\n          CheckAccessControls.DEPRECATED_PROP_REASON,\n          CheckAccessControls.DEPRECATED_CLASS,\n          CheckAccessControls.DEPRECATED_CLASS_REASON);",
        "begin_line": 94,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY",
        "snippet": "  public static final DiagnosticGroup VISIBILITY =\n      DiagnosticGroups.registerGroup(\"visibility\",\n          CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n          CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n          CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n          CheckAccessControls.PRIVATE_OVERRIDE,\n          CheckAccessControls.VISIBILITY_MISMATCH);",
        "begin_line": 103,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS",
        "snippet": "  public static final DiagnosticGroup ACCESS_CONTROLS =\n      DiagnosticGroups.registerGroup(\"accessControls\",\n          DEPRECATED, VISIBILITY);",
        "begin_line": 111,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC",
        "snippet": "  public static final DiagnosticGroup NON_STANDARD_JSDOC =\n      DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n          RhinoErrorReporter.BAD_JSDOC_ANNOTATION);",
        "begin_line": 115,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS",
        "snippet": "  public static final DiagnosticGroup INVALID_CASTS =\n      DiagnosticGroups.registerGroup(\"invalidCasts\",\n          TypeValidator.INVALID_CAST);",
        "begin_line": 119,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC",
        "snippet": "  public static final DiagnosticGroup FILEOVERVIEW_JSDOC =\n      DiagnosticGroups.registerDeprecatedGroup(\"fileoverviewTags\");",
        "begin_line": 123,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK",
        "snippet": "  public static final DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n      DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n          VarCheck.STRICT_MODULE_DEP_ERROR,\n          CheckGlobalNames.STRICT_MODULE_DEP_QNAME);",
        "begin_line": 126,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VIOLATED_MODULE_DEP",
        "snippet": "  public static final DiagnosticGroup VIOLATED_MODULE_DEP =\n      DiagnosticGroups.registerGroup(\"violatedModuleDep\",\n          VarCheck.VIOLATED_MODULE_DEP_ERROR);",
        "begin_line": 131,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION",
        "snippet": "  public static final DiagnosticGroup EXTERNS_VALIDATION =\n      DiagnosticGroups.registerGroup(\"externsValidation\",\n          VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n          VarCheck.UNDEFINED_EXTERN_VAR_ERROR);",
        "begin_line": 135,
        "end_line": 138,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL",
        "snippet": "  public static final DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n      DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n          VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL,\n          StrictModeCheck.BAD_FUNCTION_DECLARATION);",
        "begin_line": 140,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES",
        "snippet": "  public static final DiagnosticGroup UNKNOWN_DEFINES =\n      DiagnosticGroups.registerGroup(\"unknownDefines\",\n          ProcessDefines.UNKNOWN_DEFINE_WARNING);",
        "begin_line": 145,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TWEAKS",
        "snippet": "  public static final DiagnosticGroup TWEAKS =\n      DiagnosticGroups.registerGroup(\"tweakValidation\",\n          ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n          ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n          ProcessTweaks.UNKNOWN_TWEAK_WARNING);",
        "begin_line": 149,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES",
        "snippet": "  public static final DiagnosticGroup MISSING_PROPERTIES =\n      DiagnosticGroups.registerGroup(\"missingProperties\",\n          TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION);",
        "begin_line": 155,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_RETURN",
        "snippet": "  public static final DiagnosticGroup MISSING_RETURN =\n      DiagnosticGroups.registerGroup(\"missingReturn\",\n          CheckMissingReturn.MISSING_RETURN_STATEMENT);",
        "begin_line": 159,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS",
        "snippet": "  public static final DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n      DiagnosticGroups.registerGroup(\"internetExplorerChecks\",\n          RhinoErrorReporter.TRAILING_COMMA);",
        "begin_line": 163,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES",
        "snippet": "  public static final DiagnosticGroup UNDEFINED_VARIABLES =\n      DiagnosticGroups.registerGroup(\"undefinedVars\",\n          VarCheck.UNDEFINED_VAR_ERROR);",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES",
        "snippet": "  public static final DiagnosticGroup UNDEFINED_NAMES =\n      DiagnosticGroups.registerGroup(\"undefinedNames\",\n          CheckGlobalNames.UNDEFINED_NAME_WARNING);",
        "begin_line": 171,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT",
        "snippet": "  public static final DiagnosticGroup DEBUGGER_STATEMENT_PRESENT =\n      DiagnosticGroups.registerGroup(\"checkDebuggerStatement\",\n          CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);",
        "begin_line": 175,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP",
        "snippet": "  public static final DiagnosticGroup CHECK_REGEXP =\n      DiagnosticGroups.registerGroup(\"checkRegExp\",\n          CheckRegExp.REGEXP_REFERENCE,\n          CheckRegExp.MALFORMED_REGEXP);",
        "begin_line": 179,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES",
        "snippet": "  public static final DiagnosticGroup CHECK_TYPES =\n      DiagnosticGroups.registerGroup(\"checkTypes\",\n          TypeValidator.ALL_DIAGNOSTICS,\n          TypeCheck.ALL_DIAGNOSTICS);",
        "begin_line": 184,
        "end_line": 187,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_EVENTFUL_OBJECT_DISPOSAL",
        "snippet": "  public static final DiagnosticGroup CHECK_EVENTFUL_OBJECT_DISPOSAL =\n      DiagnosticGroups.registerGroup(\"checkEventfulObjectDisposal\",\n          CheckEventfulObjectDisposal.EVENTFUL_OBJECT_NOT_DISPOSED,\n          CheckEventfulObjectDisposal.EVENTFUL_OBJECT_PURELY_LOCAL,\n          CheckEventfulObjectDisposal.OVERWRITE_PRIVATE_EVENTFUL_OBJECT,\n          CheckEventfulObjectDisposal.UNLISTEN_WITH_ANONBOUND);",
        "begin_line": 189,
        "end_line": 194,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.REPORT_UNKNOWN_TYPES",
        "snippet": "  public static final DiagnosticGroup REPORT_UNKNOWN_TYPES =\n      DiagnosticGroups.registerGroup(\"reportUnknownTypes\",\n          TypeCheck.UNKNOWN_EXPR_TYPE);",
        "begin_line": 196,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_STRUCT_DICT_INHERITANCE",
        "snippet": "  public static final DiagnosticGroup CHECK_STRUCT_DICT_INHERITANCE =\n      DiagnosticGroups.registerGroup(\"checkStructDictInheritance\",\n          TypeCheck.CONFLICTING_SHAPE_TYPE);",
        "begin_line": 200,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES",
        "snippet": "  public static final DiagnosticGroup CHECK_VARIABLES =\n      DiagnosticGroups.registerGroup(\"checkVars\",\n          VarCheck.UNDEFINED_VAR_ERROR,\n          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR,\n          VariableReferenceCheck.UNDECLARED_REFERENCE,\n          VariableReferenceCheck.REDECLARED_VARIABLE);",
        "begin_line": 204,
        "end_line": 209,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE",
        "snippet": "  public static final DiagnosticGroup CHECK_USELESS_CODE =\n      DiagnosticGroups.registerGroup(\"uselessCode\",\n          CheckSideEffects.USELESS_CODE_ERROR,\n          CheckUnreachableCode.UNREACHABLE_CODE);",
        "begin_line": 211,
        "end_line": 214,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONST",
        "snippet": "  public static final DiagnosticGroup CONST =\n      DiagnosticGroups.registerGroup(\"const\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE,\n          ConstCheck.CONST_REASSIGNED_VALUE_ERROR);",
        "begin_line": 216,
        "end_line": 220,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY",
        "snippet": "  public static final DiagnosticGroup CONSTANT_PROPERTY =\n      DiagnosticGroups.registerGroup(\"constantProperty\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);",
        "begin_line": 222,
        "end_line": 225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION",
        "snippet": "  public static final DiagnosticGroup TYPE_INVALIDATION =\n      DiagnosticGroups.registerGroup(\"typeInvalidation\",\n          DisambiguateProperties.Warnings.INVALIDATION,\n          DisambiguateProperties.Warnings.INVALIDATION_ON_TYPE);",
        "begin_line": 227,
        "end_line": 230,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS",
        "snippet": "  public static final DiagnosticGroup DUPLICATE_VARS =\n      DiagnosticGroups.registerGroup(\"duplicate\",\n          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR,\n          TypeValidator.DUP_VAR_DECLARATION,\n          VariableReferenceCheck.REDECLARED_VARIABLE);",
        "begin_line": 232,
        "end_line": 236,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ES3",
        "snippet": "  public static final DiagnosticGroup ES3 =\n      DiagnosticGroups.registerGroup(\"es3\",\n          RhinoErrorReporter.INVALID_ES3_PROP_NAME,\n          RhinoErrorReporter.TRAILING_COMMA);",
        "begin_line": 238,
        "end_line": 241,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT",
        "snippet": "  public static final DiagnosticGroup ES5_STRICT =\n      DiagnosticGroups.registerGroup(\"es5Strict\",\n          ControlStructureCheck.USE_OF_WITH,\n          StrictModeCheck.UNKNOWN_VARIABLE,\n          StrictModeCheck.EVAL_DECLARATION,\n          StrictModeCheck.EVAL_ASSIGNMENT,\n          StrictModeCheck.ARGUMENTS_DECLARATION,\n          StrictModeCheck.ARGUMENTS_ASSIGNMENT,\n          StrictModeCheck.DELETE_VARIABLE,\n          StrictModeCheck.DUPLICATE_OBJECT_KEY,\n          StrictModeCheck.BAD_FUNCTION_DECLARATION);",
        "begin_line": 243,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES",
        "snippet": "  public static final DiagnosticGroup CHECK_PROVIDES =\n      DiagnosticGroups.registerGroup(\"checkProvides\",\n          CheckProvides.MISSING_PROVIDE_WARNING);",
        "begin_line": 257,
        "end_line": 259,
        "comment": " the existing and more popular linter suppression"
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROVIDE",
        "snippet": "  public static final DiagnosticGroup MISSING_PROVIDE =\n      DiagnosticGroups.registerGroup(\"missingProvide\",\n          CheckProvides.MISSING_PROVIDE_WARNING);",
        "begin_line": 261,
        "end_line": 263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_REQUIRE",
        "snippet": "  public static final DiagnosticGroup MISSING_REQUIRE =\n      DiagnosticGroups.registerGroup(\"missingRequire\",\n          CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);",
        "begin_line": 265,
        "end_line": 267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE",
        "snippet": "  public static final DiagnosticGroup DUPLICATE_MESSAGE =\n      DiagnosticGroups.registerGroup(\"duplicateMessage\",\n          JsMessageVisitor.MESSAGE_DUPLICATE_KEY);",
        "begin_line": 269,
        "end_line": 271,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  public static final DiagnosticGroup MISPLACED_TYPE_ANNOTATION =\n      DiagnosticGroups.registerGroup(\"misplacedTypeAnnotation\",\n          RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION);",
        "begin_line": 273,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.SUSPICIOUS_CODE",
        "snippet": "  public static final DiagnosticGroup SUSPICIOUS_CODE =\n      DiagnosticGroups.registerGroup(\"suspiciousCode\",\n          CheckSuspiciousCode.SUSPICIOUS_SEMICOLON,\n          CheckSuspiciousCode.SUSPICIOUS_COMPARISON_WITH_NAN);",
        "begin_line": 277,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.MAX_INVALDIATION_WARNINGS_PER_PROPERTY",
        "snippet": "  private static final int MAX_INVALDIATION_WARNINGS_PER_PROPERTY = 10;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " that we tell the user to fix per-property."
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.logger",
        "snippet": "  private static final Logger logger = Logger.getLogger(\n      DisambiguateProperties.class.getName());",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Warnings",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Warnings.INVALIDATION",
        "snippet": "    static final DiagnosticType INVALIDATION = DiagnosticType.disabled(\n        \"JSC_INVALIDATION\",\n        \"Property disambiguator skipping all instances of property {0} \"\n        + \"because of type {1} node {2}. {3}\");",
        "begin_line": 88,
        "end_line": 91,
        "comment": " TODO(user): {1} and {2} are not exactly useful for most people."
    },
    {
        "class_name": "com.google.javascript.jscomp.Warnings",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Warnings.INVALIDATION_ON_TYPE",
        "snippet": "    static final DiagnosticType INVALIDATION_ON_TYPE = DiagnosticType.disabled(\n        \"JSC_INVALIDATION_TYPE\",\n        \"Property disambiguator skipping instances of property {0} \"\n        + \"on type {1}. {2}\");",
        "begin_line": 93,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.typeSystem",
        "snippet": "  private final TypeSystem<T> typeSystem;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.invalidationMap",
        "snippet": "  private Multimap<Object, JSError> invalidationMap;",
        "begin_line": 107,
        "end_line": 107,
        "comment": "\n   * Map of a type to all the related errors that invalidated the type\n   * for disambiguation. It has be Object because of the generic nature of\n   * this pass.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.propertiesToErrorFor",
        "snippet": "  private final Map<String, CheckLevel> propertiesToErrorFor;",
        "begin_line": 117,
        "end_line": 117,
        "comment": "\n   * In practice any large code base will have thousands and thousands of\n   * type invalidations, which makes reporting all of the errors useless.\n   * However, certain properties are worth specifically guarding because of the\n   * large amount of code that can be removed as dead code. This list contains\n   * the properties (eg: \"toString\") that we care about; if any of these\n   * properties is invalidated it causes an error.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.name",
        "snippet": "    final String name;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The name of the property. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.types",
        "snippet": "    private UnionFind<T> types;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " All types on which the field exists, grouped together if related. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.typesToSkip",
        "snippet": "    Set<T> typesToSkip = Sets.newHashSet();",
        "begin_line": 130,
        "end_line": 130,
        "comment": "\n     * A set of types for which renaming this field should be skipped. This\n     * list is first filled by fields defined in the externs file.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.skipRenaming",
        "snippet": "    boolean skipRenaming;",
        "begin_line": 136,
        "end_line": 136,
        "comment": "\n     * If true, do not rename any instance of this field, as it has been\n     * referenced from an unknown type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.renameNodes",
        "snippet": "    Set<Node> renameNodes = Sets.newHashSet();",
        "begin_line": 139,
        "end_line": 139,
        "comment": " Set of nodes for this field that need renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.Property.rootTypes",
        "snippet": "    final Map<Node, T> rootTypes = Maps.newHashMap();",
        "begin_line": 146,
        "end_line": 146,
        "comment": "\n     * Map from node to the highest type in the prototype chain containing the\n     * field for that node. In the case of a union, the type is the highest type\n     * of one of the types in the union.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguateProperties",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.DisambiguateProperties.properties",
        "snippet": "  private Map<String, Property> properties = Maps.newHashMap();",
        "begin_line": 281,
        "end_line": 281,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopingCallback",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.AbstractScopingCallback.scopes",
        "snippet": "    protected final Stack<StaticScope<T>> scopes =\n        new Stack<StaticScope<T>>();",
        "begin_line": 376,
        "end_line": 377,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.JSTypeSystem.invalidatingTypes",
        "snippet": "    private final Set<JSType> invalidatingTypes;",
        "begin_line": 749,
        "end_line": 749,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.JSTypeSystem.registry",
        "snippet": "    private JSTypeRegistry registry;",
        "begin_line": 750,
        "end_line": 750,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.tt",
        "snippet": "    private final TightenTypes tt;",
        "begin_line": 963,
        "end_line": 963,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.nextUniqueId",
        "snippet": "    private int nextUniqueId;",
        "begin_line": 964,
        "end_line": 964,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.codingConvention",
        "snippet": "    private CodingConvention codingConvention;",
        "begin_line": 965,
        "end_line": 965,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.invalidatingTypes",
        "snippet": "    private final Set<JSType> invalidatingTypes = Sets.newHashSet();",
        "begin_line": 966,
        "end_line": 966,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConcreteTypeSystem",
        "src_path": "src/com/google/javascript/jscomp/DisambiguateProperties.java",
        "signature": "com.google.javascript.jscomp.ConcreteTypeSystem.nativeTypes",
        "snippet": "    private static final JSTypeNative [] nativeTypes = new JSTypeNative[] {\n        JSTypeNative.BOOLEAN_OBJECT_TYPE,\n        JSTypeNative.NUMBER_OBJECT_TYPE,\n        JSTypeNative.STRING_OBJECT_TYPE\n    };",
        "begin_line": 970,
        "end_line": 974,
        "comment": " thus need to be added in if an unknown type is encountered."
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WarningsGuard.value",
        "snippet": "    final int value;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n   * Whether to parse the descriptions of JsDoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.isIdeMode",
        "snippet": "  final boolean isIdeMode;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n   * Whether we're in IDE mode.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationNames",
        "snippet": "  final Map<String, Annotation> annotationNames;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n   * Recognized JSDoc annotations, mapped from their name to their internal\n   * representation.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.suppressionNames",
        "snippet": "  final Set<String> suppressionNames;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * Recognized names in a {@code @suppress} tag.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.languageMode",
        "snippet": "  final LanguageMode languageMode;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Accept ECMAScript5 syntax, such as getter/setter.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.acceptConstKeyword",
        "snippet": "  final boolean acceptConstKeyword;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * Accept `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType CIRCULAR_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_CIRCULAR_DEP\",\n          \"Circular dependency detected: {0}\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.name",
        "snippet": "  private final String name;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Module name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.inputs",
        "snippet": "  private final List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Source code inputs "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.deps",
        "snippet": "  private final List<JSModule> deps = new ArrayList<JSModule>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Modules that this module depends on "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.depth",
        "snippet": "  private int depth;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer.replacements",
        "snippet": "  private final TemplateTypeMap replacements;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer.visitedTypes",
        "snippet": "  private ArrayDeque<TemplateType> visitedTypes;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.baseType",
        "snippet": "    JSTypeExpression baseType = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Function information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.extendedInterfaces",
        "snippet": "    List<JSTypeExpression> extendedInterfaces = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.implementedInterfaces",
        "snippet": "    List<JSTypeExpression> implementedInterfaces = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.parameters",
        "snippet": "    Map<String, JSTypeExpression> parameters = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.thrownTypes",
        "snippet": "    List<JSTypeExpression> thrownTypes = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.templateTypeNames",
        "snippet": "    ImmutableList<String> templateTypeNames = null;",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.disposedParameters",
        "snippet": "    Set<String> disposedParameters = null;",
        "begin_line": 97,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.description",
        "snippet": "    String description = null;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Other information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.meaning",
        "snippet": "    String meaning = null;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.deprecated",
        "snippet": "    String deprecated = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.license",
        "snippet": "    String license = null;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.suppressions",
        "snippet": "    Set<String> suppressions = null;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.modifies",
        "snippet": "    Set<String> modifies = null;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.lendsName",
        "snippet": "    String lendsName = null;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.ngInject",
        "snippet": "    boolean ngInject = false;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.wizaction",
        "snippet": "    boolean wizaction = false;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sourceComment",
        "snippet": "    String sourceComment = null;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.markers",
        "snippet": "    List<Marker> markers = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.parameters",
        "snippet": "    Map<String, String> parameters = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.throwsDescriptions",
        "snippet": "    Map<JSTypeExpression, String> throwsDescriptions = null;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.blockDescription",
        "snippet": "    String blockDescription = null;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.fileOverview",
        "snippet": "    String fileOverview = null;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.returnDescription",
        "snippet": "    String returnDescription = null;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.version",
        "snippet": "    String version = null;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.authors",
        "snippet": "    List<String> authors = null;",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sees",
        "snippet": "    List<String> sees = null;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TypePosition",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.TypePosition.brackets",
        "snippet": "    private boolean brackets = false;",
        "begin_line": 158,
        "end_line": 158,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.annotation",
        "snippet": "    private TrimmedStringPosition annotation = null;",
        "begin_line": 181,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.name",
        "snippet": "    private TrimmedStringPosition name = null;",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.nameNode",
        "snippet": "    private SourcePosition<Node> nameNode = null;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.description",
        "snippet": "    private StringPosition description = null;",
        "begin_line": 184,
        "end_line": 184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.type",
        "snippet": "    private TypePosition type = null;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.info",
        "snippet": "  private LazilyInitializedInfo info = null;",
        "begin_line": 249,
        "end_line": 249,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.documentation",
        "snippet": "  private LazilyInitializedDocumentation documentation = null;",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.associatedNode",
        "snippet": "  private Node associatedNode = null;",
        "begin_line": 254,
        "end_line": 254,
        "comment": " The Node this JSDoc is associated with."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.visibility",
        "snippet": "  private Visibility visibility = null;",
        "begin_line": 256,
        "end_line": 256,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.bitset",
        "snippet": "  private int bitset = 0x00;",
        "begin_line": 269,
        "end_line": 269,
        "comment": "\n   * The {@link #isConstant()}, {@link #isConstructor()}, {@link #isInterface},\n   * {@link #isHidden()} and {@link #shouldPreserveTry()} flags as well as\n   * whether the {@link #type} field stores a value for {@link #getType()},\n   * {@link #getReturnType()} or {@link #getEnumParameterType()}.\n   *\n   * @see #setFlag(boolean, int)\n   * @see #getFlag(int)\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.type",
        "snippet": "  private JSTypeExpression type = null;",
        "begin_line": 279,
        "end_line": 279,
        "comment": "\n   * The type for {@link #getType()}, {@link #getReturnType()} or\n   * {@link #getEnumParameterType()}. The knowledge of which one is recorded is\n   * stored in the {@link #bitset} field.\n   *\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.thisType",
        "snippet": "  private JSTypeExpression thisType = null;",
        "begin_line": 284,
        "end_line": 284,
        "comment": "\n   * The type for {@link #getThisType()}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.includeDocumentation",
        "snippet": "  private boolean includeDocumentation = false;",
        "begin_line": 291,
        "end_line": 291,
        "comment": "\n   * Whether to include documentation.\n   *\n   * @see JSDocInfo.LazilyInitializedDocumentation\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.originalCommentPosition",
        "snippet": "  private int originalCommentPosition;",
        "begin_line": 296,
        "end_line": 296,
        "comment": "\n   * Position of the original comment.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FLAGS",
        "snippet": "  private static final int MASK_FLAGS       = 0x3FFFFFFF;",
        "begin_line": 303,
        "end_line": 303,
        "comment": " Mask all the boolean annotation types"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTANT",
        "snippet": "  private static final int MASK_CONSTANT      = 0x00000001; // @const",
        "begin_line": 305,
        "end_line": 305,
        "comment": " @const"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTRUCTOR",
        "snippet": "  private static final int MASK_CONSTRUCTOR   = 0x00000002; // @constructor",
        "begin_line": 306,
        "end_line": 306,
        "comment": " @constructor"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEFINE",
        "snippet": "  private static final int MASK_DEFINE        = 0x00000004; // @define",
        "begin_line": 307,
        "end_line": 307,
        "comment": " @define"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_HIDDEN",
        "snippet": "  private static final int MASK_HIDDEN        = 0x00000008; // @hidden",
        "begin_line": 308,
        "end_line": 308,
        "comment": " @hidden"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_PRESERVETRY",
        "snippet": "  private static final int MASK_PRESERVETRY   = 0x00000010; // @preserveTry",
        "begin_line": 309,
        "end_line": 309,
        "comment": " @preserveTry"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCHECK",
        "snippet": "  private static final int MASK_NOCHECK       = 0x00000020; // @notypecheck",
        "begin_line": 310,
        "end_line": 310,
        "comment": " @notypecheck"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_OVERRIDE",
        "snippet": "  private static final int MASK_OVERRIDE      = 0x00000040; // @override",
        "begin_line": 311,
        "end_line": 311,
        "comment": " @override"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOALIAS",
        "snippet": "  private static final int MASK_NOALIAS       = 0x00000080; // @noalias",
        "begin_line": 312,
        "end_line": 312,
        "comment": " @noalias"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEPRECATED",
        "snippet": "  private static final int MASK_DEPRECATED    = 0x00000100; // @deprecated",
        "begin_line": 313,
        "end_line": 313,
        "comment": " @deprecated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_INTERFACE",
        "snippet": "  private static final int MASK_INTERFACE     = 0x00000200; // @interface",
        "begin_line": 314,
        "end_line": 314,
        "comment": " @interface"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPORT",
        "snippet": "  private static final int MASK_EXPORT        = 0x00000400; // @export",
        "begin_line": 315,
        "end_line": 315,
        "comment": " @export"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSHADOW",
        "snippet": "  private static final int MASK_NOSHADOW      = 0x00000800; // @noshadow",
        "begin_line": 316,
        "end_line": 316,
        "comment": " @noshadow"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FILEOVERVIEW",
        "snippet": "  private static final int MASK_FILEOVERVIEW  = 0x00001000; // @fileoverview",
        "begin_line": 317,
        "end_line": 317,
        "comment": " @fileoverview"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IMPLICITCAST",
        "snippet": "  private static final int MASK_IMPLICITCAST  = 0x00002000; // @implicitCast",
        "begin_line": 318,
        "end_line": 318,
        "comment": " @implicitCast"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSIDEEFFECTS",
        "snippet": "  private static final int MASK_NOSIDEEFFECTS = 0x00004000; // @nosideeffects",
        "begin_line": 319,
        "end_line": 319,
        "comment": " @nosideeffects"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXTERNS",
        "snippet": "  private static final int MASK_EXTERNS       = 0x00008000; // @externs",
        "begin_line": 320,
        "end_line": 320,
        "comment": " @externs"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_JAVADISPATCH",
        "snippet": "  private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispatch",
        "begin_line": 321,
        "end_line": 321,
        "comment": " @javadispatch"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCOMPILE",
        "snippet": "  private static final int MASK_NOCOMPILE     = 0x00020000; // @nocompile",
        "begin_line": 322,
        "end_line": 322,
        "comment": " @nocompile"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSISTIDGEN",
        "snippet": "  private static final int MASK_CONSISTIDGEN  = 0x00040000; // @consistentIdGenerator",
        "begin_line": 323,
        "end_line": 323,
        "comment": " @consistentIdGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IDGEN",
        "snippet": "  private static final int MASK_IDGEN         = 0x00080000; // @idGenerator",
        "begin_line": 324,
        "end_line": 324,
        "comment": " @idGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPOSE",
        "snippet": "  private static final int MASK_EXPOSE        = 0x00100000; // @expose",
        "begin_line": 325,
        "end_line": 325,
        "comment": " @expose"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_STRUCT",
        "snippet": "  private static final int MASK_STRUCT        = 0x00200000; // @struct",
        "begin_line": 326,
        "end_line": 326,
        "comment": " @struct"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DICT",
        "snippet": "  private static final int MASK_DICT          = 0x00400000; // @dict",
        "begin_line": 327,
        "end_line": 327,
        "comment": " @dict"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_STALBEIDGEN",
        "snippet": "  private static final int MASK_STALBEIDGEN   = 0x00800000; // @stableIdGenerator",
        "begin_line": 328,
        "end_line": 328,
        "comment": " @stableIdGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_MAPPEDIDGEN",
        "snippet": "  private static final int MASK_MAPPEDIDGEN   = 0x01000000; // @idGenerator {mapped}",
        "begin_line": 329,
        "end_line": 329,
        "comment": " @idGenerator {mapped}"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_TYPEFIELD",
        "snippet": "  private static final int MASK_TYPEFIELD    = 0xE0000000; // 1110...",
        "begin_line": 333,
        "end_line": 333,
        "comment": " 1110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPE",
        "snippet": "  private static final int TYPEFIELD_TYPE    = 0x20000000; // 0010...",
        "begin_line": 334,
        "end_line": 334,
        "comment": " 0010..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_RETURN",
        "snippet": "  private static final int TYPEFIELD_RETURN  = 0x40000000; // 0100...",
        "begin_line": 335,
        "end_line": 335,
        "comment": " 0100..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_ENUM",
        "snippet": "  private static final int TYPEFIELD_ENUM    = 0x60000000; // 0110...",
        "begin_line": 336,
        "end_line": 336,
        "comment": " 0110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPEDEF",
        "snippet": "  private static final int TYPEFIELD_TYPEDEF = 0x80000000; // 1000...",
        "begin_line": 337,
        "end_line": 337,
        "comment": " 1000..."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.implicitReturn",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> implicitReturn;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n   * A special node marked by the node value key null to a singleton\n   * \"return\" when control is transferred outside of the current control flow\n   * graph.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.entry",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> entry;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scope",
        "snippet": "  private Scope scope;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.redeclarationHandler",
        "snippet": "  private final RedeclarationHandler redeclarationHandler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 40,
        "end_line": 40,
        "comment": " scope, but not explicitly declared."
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =\n      DiagnosticType.error(\n          \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n          \"Variable {0} first declared in {1}\");",
        "begin_line": 42,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_ARGUMENTS_SHADOWED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_ARGUMENTS_SHADOWED_ERROR =\n    DiagnosticType.error(\n        \"JSC_VAR_ARGUMENTS_SHADOWED_ERROR\",\n        \"Shadowing \\\"arguments\\\" is not allowed\");",
        "begin_line": 47,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.module",
        "snippet": "  private JSModule module;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Info about where the file lives."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.id",
        "snippet": "  private final InputId id;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.ast",
        "snippet": "  private final SourceAst ast;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.provides",
        "snippet": "  private final Set<String> provides = Sets.newHashSet();",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Provided and required symbols."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.requires",
        "snippet": "  private final Set<String> requires = Sets.newHashSet();",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.generatedDependencyInfoFromSource",
        "snippet": "  private boolean generatedDependencyInfoFromSource = false;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.compiler",
        "snippet": "  private transient AbstractCompiler compiler;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " We do not want to persist this across serialized state."
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.provides",
        "snippet": "    private final List<String> provides = Lists.newArrayList();",
        "begin_line": 254,
        "end_line": 254,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.requires",
        "snippet": "    private final List<String> requires = Lists.newArrayList();",
        "begin_line": 255,
        "end_line": 255,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.codingConvention",
        "snippet": "    private final CodingConvention codingConvention =\n        new ClosureCodingConvention();",
        "begin_line": 256,
        "end_line": 257,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.messages",
        "snippet": "  private final SortedSet<ErrorWithLevel> messages =\n      Sets.newTreeSet(new LeveledJSErrorComparator());",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.errorCount",
        "snippet": "  private int errorCount = 0;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.warningCount",
        "snippet": "  private int warningCount = 0;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.typedPercent",
        "snippet": "  private double typedPercent = 0.0;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_LT_P2",
        "snippet": "    private static final int P1_LT_P2 = -1;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_GT_P2",
        "snippet": "    private static final int P1_GT_P2 = 1;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.error",
        "snippet": "    final JSError error;",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD",
        "snippet": "  static final int DEFAULT_LINE_LENGTH_THRESHOLD = 500;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.mappings",
        "snippet": "    private final Deque<Mapping> mappings;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.allMappings",
        "snippet": "    private final List<Mapping> allMappings;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.createSrcMap",
        "snippet": "    private final boolean createSrcMap;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.sourceMapDetailLevel",
        "snippet": "    private final SourceMap.DetailLevel sourceMapDetailLevel;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.code",
        "snippet": "    protected final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLengthThreshold",
        "snippet": "    protected final int lineLengthThreshold;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLength",
        "snippet": "    protected int lineLength = 0;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineIndex",
        "snippet": "    protected int lineIndex = 0;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.node",
        "snippet": "      Node node;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.start",
        "snippet": "      FilePosition start;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.end",
        "snippet": "      FilePosition end;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.INDENT",
        "snippet": "    static final String INDENT = \"  \";",
        "begin_line": 223,
        "end_line": 223,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.indent",
        "snippet": "    private int indent = 0;",
        "begin_line": 225,
        "end_line": 225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineBreak",
        "snippet": "    private final boolean lineBreak;",
        "begin_line": 416,
        "end_line": 416,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferLineBreakAtEndOfFile",
        "snippet": "    private final boolean preferLineBreakAtEndOfFile;",
        "begin_line": 417,
        "end_line": 417,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineStartPosition",
        "snippet": "    private int lineStartPosition = 0;",
        "begin_line": 418,
        "end_line": 418,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferredBreakPosition",
        "snippet": "    private int preferredBreakPosition = 0;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.prevCutPosition",
        "snippet": "    private int prevCutPosition = 0;",
        "begin_line": 420,
        "end_line": 420,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.prevLineStartPosition",
        "snippet": "    private int prevLineStartPosition = 0;",
        "begin_line": 421,
        "end_line": 421,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.root",
        "snippet": "    private final Node root;",
        "begin_line": 547,
        "end_line": 547,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.options",
        "snippet": "    private CompilerOptions options = new CompilerOptions();",
        "begin_line": 548,
        "end_line": 548,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputTypes",
        "snippet": "    private boolean outputTypes = false;",
        "begin_line": 549,
        "end_line": 549,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMap",
        "snippet": "    private SourceMap sourceMap = null;",
        "begin_line": 550,
        "end_line": 550,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.tagAsStrict",
        "snippet": "    private boolean tagAsStrict;",
        "begin_line": 551,
        "end_line": 551,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.registry",
        "snippet": "    private JSTypeRegistry registry;",
        "begin_line": 552,
        "end_line": 552,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.FUNCTION_LITERAL_UNDEFINED_THIS",
        "snippet": "  static final DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS =\n    DiagnosticType.warning(\n        \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n        \"Function literal argument refers to undefined this argument\");",
        "begin_line": 69,
        "end_line": 72,
        "comment": " TODO(johnlenz): We no longer make this check, but we should."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.reverseInterpreter",
        "snippet": "  private final ReverseAbstractInterpreter reverseInterpreter;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.syntacticScope",
        "snippet": "  private final Scope syntacticScope;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.functionScope",
        "snippet": "  private final FlowScope functionScope;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.bottomScope",
        "snippet": "  private final FlowScope bottomScope;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.assertionFunctionsMap",
        "snippet": "  private final Map<String, AssertionFunctionSpec> assertionFunctionsMap;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeInference",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TypeInference.unknownType",
        "snippet": "  private final ObjectType unknownType;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " For convenience"
    },
    {
        "class_name": "com.google.javascript.jscomp.TemplateTypeReplacer",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TemplateTypeReplacer.replacements",
        "snippet": "    private final Map<TemplateType, JSType> replacements;",
        "begin_line": 1156,
        "end_line": 1156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TemplateTypeReplacer",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TemplateTypeReplacer.registry",
        "snippet": "    private final JSTypeRegistry registry;",
        "begin_line": 1157,
        "end_line": 1157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TemplateTypeReplacer",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.TemplateTypeReplacer.madeChanges",
        "snippet": "    boolean madeChanges = false;",
        "begin_line": 1158,
        "end_line": 1158,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.toBooleanOutcomes",
        "snippet": "    final BooleanLiteralSet toBooleanOutcomes;",
        "begin_line": 1499,
        "end_line": 1499,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.booleanValues",
        "snippet": "    final BooleanLiteralSet booleanValues;",
        "begin_line": 1500,
        "end_line": 1500,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.leftScope",
        "snippet": "    final FlowScope leftScope;",
        "begin_line": 1503,
        "end_line": 1503,
        "comment": " The scope if only half of the expression executed, when applicable."
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.rightScope",
        "snippet": "    final FlowScope rightScope;",
        "begin_line": 1506,
        "end_line": 1506,
        "comment": " The scope when the whole expression executed."
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOutcomePair",
        "src_path": "src/com/google/javascript/jscomp/TypeInference.java",
        "signature": "com.google.javascript.jscomp.BooleanOutcomePair.joinedScope",
        "snippet": "    FlowScope joinedScope = null;",
        "begin_line": 1509,
        "end_line": 1509,
        "comment": " The scope when we don't know how much of the expression is executed."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.OBJECT_INDEX_TEMPLATE",
        "snippet": "  public static final String OBJECT_INDEX_TEMPLATE = \"Object#Key\";",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n   * The name associated with the template variable corresponding to the\n   * property key type of the built-in Javascript object.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.objectIndexTemplateKey",
        "snippet": "  private TemplateType objectIndexTemplateKey;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.OBJECT_ELEMENT_TEMPLATE",
        "snippet": "  public static final String OBJECT_ELEMENT_TEMPLATE = \"Object#Element\";",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * The name associated with the template variable corresponding to the\n   * property value type for Javascript Objects and Arrays.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.objectElementTemplateKey",
        "snippet": "  private TemplateType objectElementTemplateKey;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",
        "snippet": "  private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n   * The UnionTypeBuilder caps the maximum number of alternate types it\n   * remembers and then defaults to \"?\" (unknown type). By default this max\n   * is 20, but it's very easy for the same property to appear on more than 20\n   * types. Use larger unions for property checking. 3000 was picked\n   * semi-randomly for use by the Google+ FE project.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nonNullableTypeNames",
        "snippet": "  private final Set<String> nonNullableTypeNames = new HashSet<String>();",
        "begin_line": 135,
        "end_line": 135,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 140,
        "end_line": 140,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, UnionTypeBuilder> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 144,
        "end_line": 145,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.eachRefTypeIndexedByProperty",
        "snippet": "  private final Map<String, Map<String, ObjectType>>\n      eachRefTypeIndexedByProperty = Maps.newHashMap();",
        "begin_line": 150,
        "end_line": 151,
        "comment": " for de-duping."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 156,
        "end_line": 157,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      LinkedHashMultimap.create();",
        "begin_line": 160,
        "end_line": 161,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 164,
        "end_line": 165,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 168,
        "end_line": 169,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypes",
        "snippet": "  private Map<String, TemplateType> templateTypes = Maps.newHashMap();",
        "begin_line": 175,
        "end_line": 175,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.emptyTemplateTypeMap",
        "snippet": "  private final TemplateTypeMap emptyTemplateTypeMap;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " there are no template types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.tolerateUndefinedValues",
        "snippet": "  private final boolean tolerateUndefinedValues;",
        "begin_line": 181,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 530,
        "end_line": 530,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",
        "snippet": "  static final DiagnosticType UNEXPECTED_TOKEN = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN\",\n      \"Internal Error: Don't know how to handle {0}\");",
        "begin_line": 63,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
        "snippet": "  protected static final String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT =\n      \"overriding prototype with non-object\";",
        "begin_line": 72,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",
        "snippet": "  static final DiagnosticType DETERMINISTIC_TEST =\n      DiagnosticType.warning(\n          \"JSC_DETERMINISTIC_TEST\",\n          \"condition always evaluates to {2}\\n\" +\n          \"left : {0}\\n\" +\n          \"right: {1}\");",
        "begin_line": 77,
        "end_line": 82,
        "comment": " TypedScopeCreator has been merged with the type checker."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",
        "snippet": "  static final DiagnosticType INEXISTENT_ENUM_ELEMENT =\n      DiagnosticType.warning(\n          \"JSC_INEXISTENT_ENUM_ELEMENT\",\n          \"element {0} does not exist on this enum\");",
        "begin_line": 84,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",
        "snippet": "  static final DiagnosticType INEXISTENT_PROPERTY =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}\");",
        "begin_line": 91,
        "end_line": 94,
        "comment": " well-typed externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION",
        "snippet": "  static final DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION =\n      DiagnosticType.disabled(\n          \"JSC_INEXISTENT_PROPERTY\",\n          \"Property {0} never defined on {1}. Did you mean {2}?\");",
        "begin_line": 96,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",
        "snippet": "  protected static final DiagnosticType NOT_A_CONSTRUCTOR =\n      DiagnosticType.warning(\n          \"JSC_NOT_A_CONSTRUCTOR\",\n          \"cannot instantiate non-constructor\");",
        "begin_line": 101,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",
        "snippet": "  static final DiagnosticType BIT_OPERATION =\n      DiagnosticType.warning(\n          \"JSC_BAD_TYPE_FOR_BIT_OPERATION\",\n          \"operator {0} cannot be applied to {1}\");",
        "begin_line": 106,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",
        "snippet": "  static final DiagnosticType NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_NOT_FUNCTION_TYPE\",\n          \"{0} expressions are not callable\");",
        "begin_line": 111,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",
        "snippet": "  static final DiagnosticType CONSTRUCTOR_NOT_CALLABLE =\n      DiagnosticType.warning(\n          \"JSC_CONSTRUCTOR_NOT_CALLABLE\",\n          \"Constructor {0} should be called with the \\\"new\\\" keyword\");",
        "begin_line": 116,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",
        "snippet": "  static final DiagnosticType FUNCTION_MASKS_VARIABLE =\n      DiagnosticType.warning(\n          \"JSC_FUNCTION_MASKS_VARIABLE\",\n          \"function {0} masks variable (IE bug)\");",
        "begin_line": 121,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",
        "snippet": "  static final DiagnosticType MULTIPLE_VAR_DEF = DiagnosticType.warning(\n      \"JSC_MULTIPLE_VAR_DEF\",\n      \"declaration of multiple variables with shared type information\");",
        "begin_line": 126,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ENUM_DUP",
        "snippet": "  static final DiagnosticType ENUM_DUP = DiagnosticType.error(\"JSC_ENUM_DUP\",\n      \"enum element {0} already defined\");",
        "begin_line": 130,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",
        "snippet": "  static final DiagnosticType ENUM_NOT_CONSTANT =\n      DiagnosticType.warning(\"JSC_ENUM_NOT_CONSTANT\",\n          \"enum key {0} must be a syntactic constant\");",
        "begin_line": 133,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",
        "snippet": "  static final DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION =\n      DiagnosticType.warning(\n          \"JSC_INVALID_INTERFACE_MEMBER_DECLARATION\",\n          \"interface members can only be empty property declarations,\"\n          + \" empty functions{0}\");",
        "begin_line": 137,
        "end_line": 141,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",
        "snippet": "  static final DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_FUNCTION_NOT_EMPTY\",\n          \"interface member functions must have an empty body\");",
        "begin_line": 143,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE",
        "snippet": "  static final DiagnosticType CONFLICTING_SHAPE_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_SHAPE_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
        "begin_line": 148,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",
        "snippet": "  static final DiagnosticType CONFLICTING_EXTENDED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_CONFLICTING_EXTENDED_TYPE\",\n          \"{1} cannot extend this type; {0}s can only extend {0}s\");",
        "begin_line": 153,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",
        "snippet": "  static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n    DiagnosticType.warning(\n        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n        \"{0} cannot implement this type; \" +\n        \"an interface can only extend, but not implement interfaces\");",
        "begin_line": 158,
        "end_line": 162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",
        "snippet": "  static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n      DiagnosticType.warning(\n          \"JSC_IMPLEMENTS_NON_INTERFACE\",\n          \"can only implement interfaces\");",
        "begin_line": 164,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",
        "snippet": "  static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_SUPERCLASS_PROPERTY\",\n          \"property {0} already defined on superclass {1}; \" +\n          \"use @override to override it\");",
        "begin_line": 169,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",
        "snippet": "  static final DiagnosticType HIDDEN_INTERFACE_PROPERTY =\n      DiagnosticType.warning(\n          \"JSC_HIDDEN_INTERFACE_PROPERTY\",\n          \"property {0} already defined on interface {1}; \" +\n          \"use @override to override it\");",
        "begin_line": 175,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
        "snippet": "  static final DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH =\n      DiagnosticType.warning(\"JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH\",\n          \"mismatch of the {0} property type and the type \" +\n          \"of the property it overrides from superclass {1}\\n\" +\n          \"original: {2}\\n\" +\n          \"override: {3}\");",
        "begin_line": 181,
        "end_line": 186,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",
        "snippet": "  static final DiagnosticType UNKNOWN_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_OVERRIDE\",\n          \"property {0} not defined on any superclass of {1}\");",
        "begin_line": 188,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",
        "snippet": "  static final DiagnosticType INTERFACE_METHOD_OVERRIDE =\n      DiagnosticType.warning(\n          \"JSC_INTERFACE_METHOD_OVERRIDE\",\n          \"property {0} is already defined by the {1} extended interface\");",
        "begin_line": 193,
        "end_line": 196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",
        "snippet": "  static final DiagnosticType UNKNOWN_EXPR_TYPE =\n      DiagnosticType.disabled(\"JSC_UNKNOWN_EXPR_TYPE\",\n          \"could not determine the type of this expression\");",
        "begin_line": 198,
        "end_line": 200,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",
        "snippet": "  static final DiagnosticType UNRESOLVED_TYPE =\n      DiagnosticType.warning(\"JSC_UNRESOLVED_TYPE\",\n          \"could not resolve the name {0} to a type\");",
        "begin_line": 202,
        "end_line": 204,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",
        "snippet": "  static final DiagnosticType WRONG_ARGUMENT_COUNT =\n      DiagnosticType.warning(\n          \"JSC_WRONG_ARGUMENT_COUNT\",\n          \"Function {0}: called with {1} argument(s). \" +\n          \"Function requires at least {2} argument(s){3}.\");",
        "begin_line": 206,
        "end_line": 210,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",
        "snippet": "  static final DiagnosticType ILLEGAL_IMPLICIT_CAST =\n      DiagnosticType.warning(\n          \"JSC_ILLEGAL_IMPLICIT_CAST\",\n          \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n          \"externs.\");",
        "begin_line": 212,
        "end_line": 216,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
        "snippet": "  static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n      DiagnosticType.warning(\n          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n          \"Interface {0} has a property {1} with incompatible types in \" +\n          \"its super interfaces {2} and {3}\");",
        "begin_line": 218,
        "end_line": 222,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",
        "snippet": "  static final DiagnosticType EXPECTED_THIS_TYPE =\n      DiagnosticType.warning(\n          \"JSC_EXPECTED_THIS_TYPE\",\n          \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");",
        "begin_line": 224,
        "end_line": 227,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT",
        "snippet": "  static final DiagnosticType IN_USED_WITH_STRUCT =\n      DiagnosticType.warning(\"JSC_IN_USED_WITH_STRUCT\",\n                             \"Cannot use the IN operator with structs\");",
        "begin_line": 229,
        "end_line": 231,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION",
        "snippet": "  static final DiagnosticType ILLEGAL_PROPERTY_CREATION =\n      DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_CREATION\",\n                             \"Cannot add a property to a struct instance \" +\n                             \"after it is constructed.\");",
        "begin_line": 233,
        "end_line": 236,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY",
        "snippet": "  static final DiagnosticType ILLEGAL_OBJLIT_KEY =\n      DiagnosticType.warning(\n          \"ILLEGAL_OBJLIT_KEY\",\n          \"Illegal key, the object literal is a {0}\");",
        "begin_line": 238,
        "end_line": 241,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",
        "snippet": "  static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n      DETERMINISTIC_TEST,\n      INEXISTENT_ENUM_ELEMENT,\n      INEXISTENT_PROPERTY,\n      NOT_A_CONSTRUCTOR,\n      BIT_OPERATION,\n      NOT_CALLABLE,\n      CONSTRUCTOR_NOT_CALLABLE,\n      FUNCTION_MASKS_VARIABLE,\n      MULTIPLE_VAR_DEF,\n      ENUM_DUP,\n      ENUM_NOT_CONSTANT,\n      INVALID_INTERFACE_MEMBER_DECLARATION,\n      INTERFACE_FUNCTION_NOT_EMPTY,\n      CONFLICTING_SHAPE_TYPE,\n      CONFLICTING_EXTENDED_TYPE,\n      CONFLICTING_IMPLEMENTED_TYPE,\n      BAD_IMPLEMENTED_TYPE,\n      HIDDEN_SUPERCLASS_PROPERTY,\n      HIDDEN_INTERFACE_PROPERTY,\n      HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n      UNKNOWN_OVERRIDE,\n      INTERFACE_METHOD_OVERRIDE,\n      UNRESOLVED_TYPE,\n      WRONG_ARGUMENT_COUNT,\n      ILLEGAL_IMPLICIT_CAST,\n      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n      EXPECTED_THIS_TYPE,\n      IN_USED_WITH_STRUCT,\n      ILLEGAL_PROPERTY_CREATION,\n      ILLEGAL_OBJLIT_KEY,\n      RhinoErrorReporter.TYPE_PARSE_ERROR,\n      TypedScopeCreator.UNKNOWN_LENDS,\n      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n      TypedScopeCreator.CTOR_INITIALIZER,\n      TypedScopeCreator.IFACE_INITIALIZER,\n      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);",
        "begin_line": 246,
        "end_line": 282,
        "comment": " change DiagnosticGroups.setWarningLevel to not accidentally enable it."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 284,
        "end_line": 284,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.validator",
        "snippet": "  private final TypeValidator validator;",
        "begin_line": 285,
        "end_line": 285,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reverseInterpreter",
        "snippet": "  private final ReverseAbstractInterpreter reverseInterpreter;",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.topScope",
        "snippet": "  private Scope topScope;",
        "begin_line": 290,
        "end_line": 290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.scopeCreator",
        "snippet": "  private MemoizedScopeCreator scopeCreator;",
        "begin_line": 292,
        "end_line": 292,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reportMissingOverride",
        "snippet": "  private final CheckLevel reportMissingOverride;",
        "begin_line": 294,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reportUnknownTypes",
        "snippet": "  private final boolean reportUnknownTypes;",
        "begin_line": 295,
        "end_line": 295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.reportMissingProperties",
        "snippet": "  private boolean reportMissingProperties = true;",
        "begin_line": 299,
        "end_line": 299,
        "comment": " explicitly turned off."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.inferJSDocInfo",
        "snippet": "  private InferJSDocInfo inferJSDocInfo = null;",
        "begin_line": 301,
        "end_line": 301,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.typedCount",
        "snippet": "  private int typedCount = 0;",
        "begin_line": 304,
        "end_line": 304,
        "comment": " These fields are used to calculate the percentage of expressions typed."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.nullCount",
        "snippet": "  private int nullCount = 0;",
        "begin_line": 305,
        "end_line": 305,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.unknownCount",
        "snippet": "  private int unknownCount = 0;",
        "begin_line": 306,
        "end_line": 306,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.inExterns",
        "snippet": "  private boolean inExterns;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.noTypeCheckSection",
        "snippet": "  private int noTypeCheckSection = 0;",
        "begin_line": 311,
        "end_line": 311,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypeCheck",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.TypeCheck.editDistance",
        "snippet": "  private Method editDistance;",
        "begin_line": 313,
        "end_line": 313,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuggestionPair",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.SuggestionPair.suggestion",
        "snippet": "    private final String suggestion;",
        "begin_line": 316,
        "end_line": 316,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuggestionPair",
        "src_path": "src/com/google/javascript/jscomp/TypeCheck.java",
        "signature": "com.google.javascript.jscomp.SuggestionPair.distance",
        "snippet": "    final int distance;",
        "begin_line": 317,
        "end_line": 317,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.DELEGATE_PROXY_SUFFIX",
        "snippet": "  static final String DELEGATE_PROXY_SUFFIX =\n      ObjectType.createDelegateSuffix(\"Proxy\");",
        "begin_line": 104,
        "end_line": 105,
        "comment": "\n   * A suffix for naming delegate proxies differently from their base.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.MALFORMED_TYPEDEF",
        "snippet": "  static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
        "begin_line": 107,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.ENUM_INITIALIZER",
        "snippet": "  static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
        "begin_line": 112,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER",
        "snippet": "  static final DiagnosticType CTOR_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n          \"Constructor {0} must be initialized at declaration\");",
        "begin_line": 117,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER",
        "snippet": "  static final DiagnosticType IFACE_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n          \"Interface {0} must be initialized at declaration\");",
        "begin_line": 122,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.CONSTRUCTOR_EXPECTED",
        "snippet": "  static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
        "begin_line": 127,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS",
        "snippet": "  static final DiagnosticType UNKNOWN_LENDS =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_LENDS\",\n          \"Variable {0} not declared before @lends annotation.\");",
        "begin_line": 132,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT",
        "snippet": "  static final DiagnosticType LENDS_ON_NON_OBJECT =\n      DiagnosticType.warning(\n          \"JSC_LENDS_ON_NON_OBJECT\",\n          \"May only lend properties to object types. {0} has type {1}.\");",
        "begin_line": 137,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 142,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.typeParsingErrorReporter",
        "snippet": "  private final ErrorReporter typeParsingErrorReporter;",
        "begin_line": 143,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.validator",
        "snippet": "  private final TypeValidator validator;",
        "begin_line": 144,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 145,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.typeRegistry",
        "snippet": "  private final JSTypeRegistry typeRegistry;",
        "begin_line": 146,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.delegateProxyPrototypes",
        "snippet": "  private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();",
        "begin_line": 147,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.delegateCallingConventions",
        "snippet": "  private final Map<String, String> delegateCallingConventions =\n      Maps.newHashMap();",
        "begin_line": 148,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.functionAnalysisResults",
        "snippet": "  private final Map<Node, AstFunctionContents> functionAnalysisResults =\n      Maps.newHashMap();",
        "begin_line": 152,
        "end_line": 153,
        "comment": " Simple properties inferred about functions."
    },
    {
        "class_name": "com.google.javascript.jscomp.TypedScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.TypedScopeCreator.unknownType",
        "snippet": "  private final ObjectType unknownType;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " For convenience"
    },
    {
        "class_name": "com.google.javascript.jscomp.DeferredSetType",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.DeferredSetType.node",
        "snippet": "    final Node node;",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeferredSetType",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.DeferredSetType.type",
        "snippet": "    final JSType type;",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiscoverEnumsAndTypedefs",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.DiscoverEnumsAndTypedefs.registry",
        "snippet": "    private final JSTypeRegistry registry;",
        "begin_line": 363,
        "end_line": 363,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 416,
        "end_line": 416,
        "comment": "\n     * The scope that we're building.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.deferredSetTypes",
        "snippet": "    private final List<DeferredSetType> deferredSetTypes =\n        Lists.newArrayList();",
        "begin_line": 418,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.nonExternFunctions",
        "snippet": "    private final List<Node> nonExternFunctions = Lists.newArrayList();",
        "begin_line": 424,
        "end_line": 424,
        "comment": "\n     * Functions that we found in the global scope and not in externs.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.lentObjectLiterals",
        "snippet": "    private List<Node> lentObjectLiterals = null;",
        "begin_line": 436,
        "end_line": 436,
        "comment": "\n     * Object literals with a @lends annotation aren't analyzed until we\n     * reach the root of the statement they're defined in.\n     *\n     * This ensures that if there are any @lends annotations on the object\n     * literals, the type on the @lends annotation resolves correctly.\n     *\n     * For more information, see\n     * http://code.google.com/p/closure-compiler/issues/detail?id=314\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.stubDeclarations",
        "snippet": "    private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
        "begin_line": 444,
        "end_line": 445,
        "comment": "\n     * Type-less stubs.\n     *\n     * If at the end of traversal, we still don't have types for these\n     * stubs, then we should declare UNKNOWN types.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.sourceName",
        "snippet": "    private String sourceName = null;",
        "begin_line": 450,
        "end_line": 450,
        "comment": "\n     * The current source file that we're in.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractScopeBuilder",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.AbstractScopeBuilder.inputId",
        "snippet": "    private InputId inputId;",
        "begin_line": 455,
        "end_line": 455,
        "comment": "\n     * The InputId of the current node.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectProperties",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.CollectProperties.thisType",
        "snippet": "      private final JSType thisType;",
        "begin_line": 1789,
        "end_line": 1789,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StubDeclaration",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.StubDeclaration.node",
        "snippet": "    private final Node node;",
        "begin_line": 1858,
        "end_line": 1858,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StubDeclaration",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.StubDeclaration.isExtern",
        "snippet": "    private final boolean isExtern;",
        "begin_line": 1859,
        "end_line": 1859,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StubDeclaration",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.StubDeclaration.ownerName",
        "snippet": "    private final String ownerName;",
        "begin_line": 1860,
        "end_line": 1860,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 2082,
        "end_line": 2082,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "signature": "com.google.javascript.jscomp.FirstOrderFunctionAnalyzer.data",
        "snippet": "    private final Map<Node, AstFunctionContents> data;",
        "begin_line": 2083,
        "end_line": 2083,
        "comment": ""
    }
]