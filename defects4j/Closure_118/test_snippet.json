[
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.DisambiguatePropertiesTest()",
        "snippet": "  public DisambiguatePropertiesTest() {\n    parseTypeInfo = true;\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    super.enableNormalize(true);\n    super.enableTypeCheck(CheckLevel.WARNING);\n  }\n",
        "begin_line": 45,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 18)",
            "(line 48,col 5)-(line 48,col 32)",
            "(line 49,col 5)-(line 49,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n\n    return new CompilerPass() {\n      @Override\n      public void process(Node externs, Node root) {\n        Map<String, CheckLevel> propertiesToErrorFor =\n            Maps.<String, CheckLevel>newHashMap();\n        propertiesToErrorFor.put(\"foobar\", CheckLevel.ERROR);\n\n        if (runTightenTypes) {\n          TightenTypes tightener = new TightenTypes(compiler);\n          tightener.process(externs, root);\n          lastPass = DisambiguateProperties.forConcreteTypeSystem(compiler,\n              tightener, propertiesToErrorFor);\n        } else {\n          // This must be created after type checking is run as it depends on\n          // any mismatches found during checking.\n          lastPass = DisambiguateProperties.forJSTypeSystem(\n              compiler, propertiesToErrorFor);\n        }\n\n        lastPass.process(externs, root);\n      }\n    };\n  }\n",
        "begin_line": 52,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 76,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.Anonymous-d5142e77-546c-448c-87b8-b5cfbe652a83.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override\n      public void process(Node externs, Node root) {\n        Map<String, CheckLevel> propertiesToErrorFor =\n            Maps.<String, CheckLevel>newHashMap();\n        propertiesToErrorFor.put(\"foobar\", CheckLevel.ERROR);\n\n        if (runTightenTypes) {\n          TightenTypes tightener = new TightenTypes(compiler);\n          tightener.process(externs, root);\n          lastPass = DisambiguateProperties.forConcreteTypeSystem(compiler,\n              tightener, propertiesToErrorFor);\n        } else {\n          // This must be created after type checking is run as it depends on\n          // any mismatches found during checking.\n          lastPass = DisambiguateProperties.forJSTypeSystem(\n              compiler, propertiesToErrorFor);\n        }\n\n        lastPass.process(externs, root);\n      }\n",
        "begin_line": 56,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 59,col 50)",
            "(line 60,col 9)-(line 60,col 61)",
            "(line 62,col 9)-(line 72,col 9)",
            "(line 74,col 9)-(line 74,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    return 1;\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 81,col 5)-(line 81,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testOneType1()",
        "snippet": "  public void testOneType1() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\";\n    testSets(false, js, js, \"{a=[[Foo.prototype]]}\");\n    testSets(true, js, js, \"{a=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 84,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 90,col 21)",
            "(line 91,col 5)-(line 91,col 53)",
            "(line 92,col 5)-(line 92,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testOneType2()",
        "snippet": "  public void testOneType2() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype = {a: 0};\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\";\n    String expected = \"{a=[[Foo.prototype]]}\";\n    testSets(false, js, js, expected);\n    testSets(true, js, js, expected);\n  }\n",
        "begin_line": 95,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 96,col 5)-(line 101,col 21)",
            "(line 102,col 5)-(line 102,col 46)",
            "(line 103,col 5)-(line 103,col 38)",
            "(line 104,col 5)-(line 104,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testOneType3()",
        "snippet": "  public void testOneType3() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype = { get a() {return  0},\"\n        + \"                  set a(b) {} };\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\";\n    String expected = \"{a=[[Foo.prototype]]}\";\n    testSets(false, js, js, expected);\n    testSets(true, js, js, expected);\n  }\n",
        "begin_line": 107,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 108,col 5)-(line 114,col 21)",
            "(line 115,col 5)-(line 115,col 46)",
            "(line 116,col 5)-(line 116,col 38)",
            "(line 117,col 5)-(line 117,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testOneType4()",
        "snippet": "  public void testOneType4() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype = {'a': 0};\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F['a'] = 0;\";\n    String expected = \"{}\";\n    testSets(false, js, js, expected);\n    testSets(true, js, js, expected);\n  }\n",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 126,col 24)",
            "(line 127,col 5)-(line 127,col 27)",
            "(line 128,col 5)-(line 128,col 38)",
            "(line 129,col 5)-(line 129,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testPrototypeAndInstance()",
        "snippet": "  public void testPrototypeAndInstance() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\";\n    testSets(false, js, js, \"{a=[[Foo.prototype]]}\");\n    testSets(true, js, js, \"{a=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 132,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 138,col 21)",
            "(line 139,col 5)-(line 139,col 53)",
            "(line 140,col 5)-(line 140,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testPrototypeAndInstance2()",
        "snippet": "  public void testPrototypeAndInstance2() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"new Foo().a = 0;\";\n    testSets(false, js, js, \"{a=[[Foo.prototype]]}\");\n    testSets(true, js, js, \"{a=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 143,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 147,col 29)",
            "(line 148,col 5)-(line 148,col 53)",
            "(line 149,col 5)-(line 149,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoTypes1()",
        "snippet": "  public void testTwoTypes1() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"var F=new Foo;\"\n        + \"F.Foo_prototype$a=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"var B=new Bar;\"\n        + \"B.Bar_prototype$a=0\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 152,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 163,col 21)",
            "(line 164,col 5)-(line 172,col 32)",
            "(line 173,col 5)-(line 173,col 74)",
            "(line 174,col 5)-(line 174,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoTypes2()",
        "snippet": "  public void testTwoTypes2() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype = {a: 0};\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype = {a: 0};\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\";\n\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype = {Foo_prototype$a: 0};\"\n        + \"var F=new Foo;\"\n        + \"F.Foo_prototype$a=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype = {Bar_prototype$a: 0};\"\n        + \"var B=new Bar;\"\n        + \"B.Bar_prototype$a=0\";\n\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 177,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 188,col 21)",
            "(line 190,col 5)-(line 198,col 32)",
            "(line 200,col 5)-(line 200,col 74)",
            "(line 201,col 5)-(line 201,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoTypes3()",
        "snippet": "  public void testTwoTypes3() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype = { get a() {return  0},\"\n        + \"                  set a(b) {} };\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype = { get a() {return  0},\"\n        + \"                  set a(b) {} };\\n\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\";\n\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype = { get Foo_prototype$a() {return  0},\"\n        + \"                  set Foo_prototype$a(b) {} };\\n\"\n        + \"var F=new Foo;\"\n        + \"F.Foo_prototype$a=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype = { get Bar_prototype$a() {return  0},\"\n        + \"                  set Bar_prototype$a(b) {} };\\n\"\n        + \"var B=new Bar;\"\n        + \"B.Bar_prototype$a=0\";\n\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 204,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 217,col 21)",
            "(line 219,col 5)-(line 229,col 32)",
            "(line 231,col 5)-(line 231,col 74)",
            "(line 232,col 5)-(line 232,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoTypes4()",
        "snippet": "  public void testTwoTypes4() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype = {a: 0};\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype = {'a': 0};\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B['a'] = 0;\";\n\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype = {a: 0};\"\n        + \"var F=new Foo;\"\n        + \"F.a=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype = {'a': 0};\"\n        + \"var B=new Bar;\"\n        + \"B['a']=0\";\n\n    testSets(false, js, output, \"{a=[[Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 235,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 246,col 24)",
            "(line 248,col 5)-(line 256,col 21)",
            "(line 258,col 5)-(line 258,col 57)",
            "(line 259,col 5)-(line 259,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoFields()",
        "snippet": "  public void testTwoFields() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"Foo.prototype.b = 0;\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"F.b = 0;\";\n    String output = \"function Foo(){}Foo.prototype.a=0;Foo.prototype.b=0;\"\n        + \"var F=new Foo;F.a=0;F.b=0\";\n    testSets(false, js, output, \"{a=[[Foo.prototype]], b=[[Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Foo.prototype]], b=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 262,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 270,col 21)",
            "(line 271,col 5)-(line 272,col 38)",
            "(line 273,col 5)-(line 273,col 78)",
            "(line 274,col 5)-(line 274,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoSeparateFieldsTwoTypes()",
        "snippet": "  public void testTwoSeparateFieldsTwoTypes() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"Foo.prototype.b = 0;\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 0;\"\n        + \"F.b = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"Bar.prototype.b = 0;\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\"\n        + \"B.b = 0;\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"Foo.prototype.Foo_prototype$b=0;\"\n        + \"var F=new Foo;\"\n        + \"F.Foo_prototype$a=0;\"\n        + \"F.Foo_prototype$b=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"Bar.prototype.Bar_prototype$b=0;\"\n        + \"var B=new Bar;\"\n        + \"B.Bar_prototype$a=0;\"\n        + \"B.Bar_prototype$b=0\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]],\"\n                                + \" b=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]],\"\n                               + \" b=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 277,
        "end_line": 310,
        "comment": "",
        "child_ranges": [
            "(line 278,col 5)-(line 292,col 21)",
            "(line 293,col 5)-(line 305,col 32)",
            "(line 306,col 5)-(line 307,col 76)",
            "(line 308,col 5)-(line 309,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionType()",
        "snippet": "  public void testUnionType() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @type {Bar|Foo} */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\\n\"\n        + \"B = new Foo;\\n\"\n        + \"B.a = 0;\\n\"\n        + \"/** @constructor */ function Baz() {}\\n\"\n        + \"Baz.prototype.a = 0;\\n\";\n    testSets(false, js,\n             \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n    testSets(true, js, \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n  }\n",
        "begin_line": 312,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 313,col 5)-(line 324,col 35)",
            "(line 325,col 5)-(line 326,col 70)",
            "(line 327,col 5)-(line 327,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testIgnoreUnknownType()",
        "snippet": "  public void testIgnoreUnknownType() {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"Foo.prototype.blah = 3;\\n\"\n        + \"/** @type {Foo} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.blah = 0;\\n\"\n        + \"var U = function() { return {} };\\n\"\n        + \"U().blah();\";\n    String expected = \"\"\n        + \"function Foo(){}Foo.prototype.blah=3;var F = new Foo;F.blah=0;\"\n        + \"var U=function(){return{}};U().blah()\";\n    testSets(false, js, expected, \"{}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n        js, expected, \"{}\");\n  }\n",
        "begin_line": 330,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 339,col 24)",
            "(line 340,col 5)-(line 342,col 50)",
            "(line 343,col 5)-(line 343,col 40)",
            "(line 344,col 5)-(line 345,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testIgnoreUnknownType1()",
        "snippet": "  public void testIgnoreUnknownType1() {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"Foo.prototype.blah = 3;\\n\"\n        + \"/** @type {Foo} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.blah = 0;\\n\"\n        + \"/** @return {Object} */\\n\"\n        + \"var U = function() { return {} };\\n\"\n        + \"U().blah();\";\n    String expected = \"\"\n        + \"function Foo(){}Foo.prototype.blah=3;var F = new Foo;F.blah=0;\"\n        + \"var U=function(){return{}};U().blah()\";\n    testSets(false, js, expected, \"{blah=[[Foo.prototype]]}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n        js, expected, \"{}\");\n  }\n",
        "begin_line": 348,
        "end_line": 365,
        "comment": "",
        "child_ranges": [
            "(line 349,col 5)-(line 358,col 24)",
            "(line 359,col 5)-(line 361,col 50)",
            "(line 362,col 5)-(line 362,col 62)",
            "(line 363,col 5)-(line 364,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testIgnoreUnknownType2()",
        "snippet": "  public void testIgnoreUnknownType2() {\n    String js = \"\"\n        + \"/** @constructor */\\n\"\n        + \"function Foo() {}\\n\"\n        + \"Foo.prototype.blah = 3;\\n\"\n        + \"/** @type {Foo} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.blah = 0;\\n\"\n        + \"/** @constructor */\\n\"\n        + \"function Bar() {}\\n\"\n        + \"Bar.prototype.blah = 3;\\n\"\n        + \"/** @return {Object} */\\n\"\n        + \"var U = function() { return {} };\\n\"\n        + \"U().blah();\";\n    String expected = \"\"\n        + \"function Foo(){}Foo.prototype.blah=3;var F = new Foo;F.blah=0;\"\n        + \"function Bar(){}Bar.prototype.blah=3;\"\n        + \"var U=function(){return{}};U().blah()\";\n    testSets(false, js, expected, \"{}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n        js, expected, \"{}\");\n  }\n",
        "begin_line": 367,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 368,col 5)-(line 380,col 24)",
            "(line 381,col 5)-(line 384,col 50)",
            "(line 385,col 5)-(line 385,col 40)",
            "(line 386,col 5)-(line 387,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionTypeTwoFields()",
        "snippet": "  public void testUnionTypeTwoFields() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"Foo.prototype.b = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"Bar.prototype.b = 0;\\n\"\n        + \"/** @type {Foo|Bar} */\\n\"\n        + \"var B = new Bar;\\n\"\n        + \"B.a = 0;\\n\"\n        + \"B.b = 0;\\n\"\n        + \"B = new Foo;\\n\"\n        + \"/** @constructor */ function Baz() {}\\n\"\n        + \"Baz.prototype.a = 0;\\n\"\n        + \"Baz.prototype.b = 0;\\n\";\n    testSets(false, js, \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]],\"\n                 + \" b=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n    testSets(true, js, \"{a=[[Bar.prototype, Foo.prototype], [Baz.prototype]],\"\n                 + \" b=[[Bar.prototype, Foo.prototype], [Baz.prototype]]}\");\n  }\n",
        "begin_line": 390,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 391,col 5)-(line 405,col 35)",
            "(line 406,col 5)-(line 407,col 76)",
            "(line 408,col 5)-(line 409,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testCast()",
        "snippet": "  public void testCast() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @type {Foo|Bar} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"(/** @type {Bar} */(F)).a = 0;\";\n    String output = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Bar_prototype$a=0;\"\n        + \"var F=new Foo;F.Bar_prototype$a=0;\";\n    String ttOutput = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Bar_prototype$a=0;\"\n        + \"var F=new Foo;F.Unique$1$a=0;\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, ttOutput,\n        \"{a=[[Bar.prototype], [Foo.prototype], [Unique$1]]}\");\n  }\n",
        "begin_line": 412,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 420,col 43)",
            "(line 421,col 5)-(line 424,col 47)",
            "(line 425,col 5)-(line 428,col 42)",
            "(line 429,col 5)-(line 429,col 74)",
            "(line 430,col 5)-(line 431,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testConstructorFields()",
        "snippet": "  public void testConstructorFields() {\n    String js = \"\"\n      + \"/** @constructor */\\n\"\n      + \"var Foo = function() { this.a = 0; };\\n\"\n      + \"/** @constructor */ function Bar() {}\\n\"\n      + \"Bar.prototype.a = 0;\"\n      + \"new Foo\";\n    String output = \"\"\n        + \"var Foo=function(){this.Foo$a=0};\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"new Foo\";\n    String ttOutput = \"\"\n        + \"var Foo=function(){this.Foo_prototype$a=0};\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"new Foo\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo]]}\");\n    testSets(true, js, ttOutput, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 434,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 435,col 5)-(line 440,col 18)",
            "(line 441,col 5)-(line 445,col 20)",
            "(line 446,col 5)-(line 450,col 20)",
            "(line 451,col 5)-(line 451,col 64)",
            "(line 452,col 5)-(line 452,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testStaticProperty()",
        "snippet": "  public void testStaticProperty() {\n    String js = \"\"\n      + \"/** @constructor */ function Foo() {} \\n\"\n      + \"/** @constructor */ function Bar() {}\\n\"\n      + \"Foo.a = 0;\"\n      + \"Bar.a = 0;\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"function Bar(){}\"\n        + \"Foo.function__new_Foo___undefined$a = 0;\"\n        + \"Bar.function__new_Bar___undefined$a = 0;\";\n\n    testSets(false, js, output,\n        \"{a=[[function (new:Bar): undefined],\" +\n        \" [function (new:Foo): undefined]]}\");\n  }\n",
        "begin_line": 455,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 456,col 5)-(line 460,col 21)",
            "(line 461,col 5)-(line 465,col 53)",
            "(line 467,col 5)-(line 469,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSupertypeWithSameField()",
        "snippet": "  public void testSupertypeWithSameField() {\n    String js = \"\"\n      + \"/** @constructor */ function Foo() {}\\n\"\n      + \"Foo.prototype.a = 0;\\n\"\n      + \"/** @constructor\\n* @extends Foo */ function Bar() {}\\n\"\n      + \"/** @override */\\n\"\n      + \"Bar.prototype.a = 0;\\n\"\n      + \"/** @type Bar */ var B = new Bar;\\n\"\n      + \"B.a = 0;\"\n      + \"/** @constructor */ function Baz() {}\\n\"\n      + \"Baz.prototype.a = function(){};\\n\";\n\n    String output = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Foo_prototype$a=0;\"\n        + \"var B = new Bar;B.Foo_prototype$a=0;\"\n        + \"function Baz(){}Baz.prototype.Baz_prototype$a=function(){};\";\n    String ttOutput = \"\"\n        + \"function Foo(){}Foo.prototype.Foo_prototype$a=0;\"\n        + \"function Bar(){}Bar.prototype.Bar_prototype$a=0;\"\n        + \"var B = new Bar;B.Bar_prototype$a=0;\"\n        + \"function Baz(){}Baz.prototype.Baz_prototype$a=function(){};\";\n    testSets(false, js, output, \"{a=[[Baz.prototype], [Foo.prototype]]}\");\n    testSets(true, js, ttOutput,\n        \"{a=[[Bar.prototype], [Baz.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 472,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 482,col 44)",
            "(line 484,col 5)-(line 488,col 72)",
            "(line 489,col 5)-(line 493,col 72)",
            "(line 494,col 5)-(line 494,col 74)",
            "(line 495,col 5)-(line 496,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testScopedType()",
        "snippet": "  public void testScopedType() {\n    String js = \"\"\n        + \"var g = {};\\n\"\n        + \"/** @constructor */ g.Foo = function() {}\\n\"\n        + \"g.Foo.prototype.a = 0;\"\n        + \"/** @constructor */ g.Bar = function() {}\\n\"\n        + \"g.Bar.prototype.a = 0;\";\n    String output = \"\"\n        + \"var g={};\"\n        + \"g.Foo=function(){};\"\n        + \"g.Foo.prototype.g_Foo_prototype$a=0;\"\n        + \"g.Bar=function(){};\"\n        + \"g.Bar.prototype.g_Bar_prototype$a=0;\";\n    testSets(false, js, output, \"{a=[[g.Bar.prototype], [g.Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[g.Bar.prototype], [g.Foo.prototype]]}\");\n  }\n",
        "begin_line": 499,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 500,col 5)-(line 505,col 35)",
            "(line 506,col 5)-(line 511,col 49)",
            "(line 512,col 5)-(line 512,col 78)",
            "(line 513,col 5)-(line 513,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnresolvedType()",
        "snippet": "  public void testUnresolvedType() {\n    // NOTE(nicksantos): This behavior seems very wrong to me.\n    String js = \"\"\n        + \"var g = {};\"\n        + \"/** @constructor \\n @extends {?} */ \"\n        + \"var Foo = function() {};\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ var Bar = function() {};\\n\"\n        + \"Bar.prototype.a = 0;\";\n    String output = \"\"\n        + \"var g={};\"\n        + \"var Foo=function(){};\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"var Bar=function(){};\"\n        + \"Bar.prototype.Bar_prototype$a=0;\";\n\n    setExpectParseWarningsThisTest();\n    testSets(false, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n        js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES,\n        js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 516,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 518,col 5)-(line 524,col 33)",
            "(line 525,col 5)-(line 530,col 45)",
            "(line 532,col 5)-(line 532,col 37)",
            "(line 533,col 5)-(line 534,col 62)",
            "(line 535,col 5)-(line 536,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testNamedType()",
        "snippet": "  public void testNamedType() {\n    String js = \"\"\n        + \"var g = {};\"\n        + \"/** @constructor \\n @extends g.Late */ var Foo = function() {}\\n\"\n        + \"Foo.prototype.a = 0;\"\n        + \"/** @constructor */ var Bar = function() {}\\n\"\n        + \"Bar.prototype.a = 0;\"\n        + \"/** @constructor */ g.Late = function() {}\";\n    String output = \"\"\n        + \"var g={};\"\n        + \"var Foo=function(){};\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"var Bar=function(){};\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"g.Late = function(){}\";\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 539,
        "end_line": 556,
        "comment": "",
        "child_ranges": [
            "(line 540,col 5)-(line 546,col 55)",
            "(line 547,col 5)-(line 553,col 34)",
            "(line 554,col 5)-(line 554,col 74)",
            "(line 555,col 5)-(line 555,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnknownType()",
        "snippet": "  public void testUnknownType() {\n    String js = \"\"\n        + \"/** @constructor */ var Foo = function() {};\\n\"\n        + \"/** @constructor */ var Bar = function() {};\\n\"\n        + \"/** @return {?} */ function fun() {}\\n\"\n        + \"Foo.prototype.a = fun();\\n\"\n        + \"fun().a;\\n\"\n        + \"Bar.prototype.a = 0;\";\n    String ttOutput = \"\"\n        + \"var Foo=function(){};\\n\"\n        + \"var Bar=function(){};\\n\"\n        + \"function fun(){}\\n\"\n        + \"Foo.prototype.Foo_prototype$a=fun();\\n\"\n        + \"fun().Unique$1$a;\\n\"\n        + \"Bar.prototype.Bar_prototype$a=0;\";\n    testSets(false, js, js, \"{}\");\n    testSets(true, BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES, js, ttOutput,\n             \"{a=[[Bar.prototype], [Foo.prototype], [Unique$1]]}\");\n  }\n",
        "begin_line": 558,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 559,col 5)-(line 565,col 33)",
            "(line 566,col 5)-(line 572,col 45)",
            "(line 573,col 5)-(line 573,col 34)",
            "(line 574,col 5)-(line 575,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testEnum()",
        "snippet": "  public void testEnum() {\n    String js = \"\"\n        + \"/** @enum {string} */ var En = {\\n\"\n        + \"  A: 'first',\\n\"\n        + \"  B: 'second'\\n\"\n        + \"};\\n\"\n        + \"var EA = En.A;\\n\"\n        + \"var EB = En.B;\\n\"\n        + \"/** @constructor */ function Foo(){};\\n\"\n        + \"Foo.prototype.A = 0;\\n\"\n        + \"Foo.prototype.B = 0;\\n\";\n    String output = \"\"\n        + \"var En={A:'first',B:'second'};\"\n        + \"var EA=En.A;\"\n        + \"var EB=En.B;\"\n        + \"function Foo(){};\"\n        + \"Foo.prototype.Foo_prototype$A=0;\"\n        + \"Foo.prototype.Foo_prototype$B=0\";\n    String ttOutput = \"\"\n        + \"var En={A:'first',B:'second'};\"\n        + \"var EA=En.A;\"\n        + \"var EB=En.B;\"\n        + \"function Foo(){};\"\n        + \"Foo.prototype.Foo_prototype$A=0;\"\n        + \"Foo.prototype.Foo_prototype$B=0\";\n    testSets(false, js, output, \"{A=[[Foo.prototype]], B=[[Foo.prototype]]}\");\n    testSets(true, js, ttOutput, \"{A=[[Foo.prototype]], B=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 578,
        "end_line": 605,
        "comment": "",
        "child_ranges": [
            "(line 579,col 5)-(line 588,col 35)",
            "(line 589,col 5)-(line 595,col 44)",
            "(line 596,col 5)-(line 602,col 44)",
            "(line 603,col 5)-(line 603,col 78)",
            "(line 604,col 5)-(line 604,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testEnumOfObjects()",
        "snippet": "  public void testEnumOfObjects() {\n    String js = \"\"\n        + \"/** @constructor */ function Formatter() {}\"\n        + \"Formatter.prototype.format = function() {};\"\n        + \"/** @constructor */ function Unrelated() {}\"\n        + \"Unrelated.prototype.format = function() {};\"\n        + \"/** @enum {!Formatter} */ var Enum = {\\n\"\n        + \"  A: new Formatter()\\n\"\n        + \"};\\n\"\n        + \"Enum.A.format();\\n\";\n    String output = \"\"\n        + \"/** @constructor */ function Formatter() {}\"\n        + \"Formatter.prototype.Formatter_prototype$format = function() {};\"\n        + \"/** @constructor */ function Unrelated() {}\"\n        + \"Unrelated.prototype.Unrelated_prototype$format = function() {};\"\n        + \"/** @enum {!Formatter} */ var Enum = {\\n\"\n        + \"  A: new Formatter()\\n\"\n        + \"};\\n\"\n        + \"Enum.A.Formatter_prototype$format();\\n\";\n    testSets(false, js, output,\n        \"{format=[[Formatter.prototype], [Unrelated.prototype]]}\");\n\n    // TODO(nicksantos): Fix the type tightener to handle this case.\n    // It currently doesn't work, because getSubTypes is broken for enums.\n  }\n",
        "begin_line": 607,
        "end_line": 631,
        "comment": "",
        "child_ranges": [
            "(line 608,col 5)-(line 616,col 31)",
            "(line 617,col 5)-(line 625,col 51)",
            "(line 626,col 5)-(line 627,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testEnumOfObjects2()",
        "snippet": "  public void testEnumOfObjects2() {\n    String js = \"\"\n        + \"/** @constructor */ function Formatter() {}\"\n        + \"Formatter.prototype.format = function() {};\"\n        + \"/** @constructor */ function Unrelated() {}\"\n        + \"Unrelated.prototype.format = function() {};\"\n        + \"/** @enum {?Formatter} */ var Enum = {\\n\"\n        + \"  A: new Formatter(),\\n\"\n        + \"  B: new Formatter()\\n\"\n        + \"};\\n\"\n        + \"function f() {\\n\"\n        + \"  var formatter = window.toString() ? Enum.A : Enum.B;\\n\"\n        + \"  formatter.format();\\n\"\n        + \"}\";\n    String output = \"\"\n        + \"/** @constructor */ function Formatter() {}\"\n        + \"Formatter.prototype.format = function() {};\"\n        + \"/** @constructor */ function Unrelated() {}\"\n        + \"Unrelated.prototype.format = function() {};\"\n        + \"/** @enum {?Formatter} */ var Enum = {\\n\"\n        + \"  A: new Formatter(),\\n\"\n        + \"  B: new Formatter()\\n\"\n        + \"};\\n\"\n        + \"function f() {\\n\"\n        + \"  var formatter = window.toString() ? Enum.A : Enum.B;\\n\"\n        + \"  formatter.format();\\n\"\n        + \"}\";\n    testSets(false, js, output, \"{}\");\n  }\n",
        "begin_line": 633,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 634,col 5)-(line 646,col 14)",
            "(line 647,col 5)-(line 659,col 14)",
            "(line 660,col 5)-(line 660,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testEnumOfObjects3()",
        "snippet": "  public void testEnumOfObjects3() {\n    String js = \"\"\n        + \"/** @constructor */ function Formatter() {}\"\n        + \"Formatter.prototype.format = function() {};\"\n        + \"/** @constructor */ function Unrelated() {}\"\n        + \"Unrelated.prototype.format = function() {};\"\n        + \"/** @enum {!Formatter} */ var Enum = {\\n\"\n        + \"  A: new Formatter(),\\n\"\n        + \"  B: new Formatter()\\n\"\n        + \"};\\n\"\n        + \"/** @enum {!Enum} */ var SubEnum = {\\n\"\n        + \"  C: Enum.A\\n\"\n        + \"};\\n\"\n        + \"function f() {\\n\"\n        + \"  var formatter = SubEnum.C\\n\"\n        + \"  formatter.format();\\n\"\n        + \"}\";\n    String output = \"\"\n        + \"/** @constructor */ function Formatter() {}\"\n        + \"Formatter.prototype.Formatter_prototype$format = function() {};\"\n        + \"/** @constructor */ function Unrelated() {}\"\n        + \"Unrelated.prototype.Unrelated_prototype$format = function() {};\"\n        + \"/** @enum {!Formatter} */ var Enum = {\\n\"\n        + \"  A: new Formatter(),\\n\"\n        + \"  B: new Formatter()\\n\"\n        + \"};\\n\"\n        + \"/** @enum {!Enum} */ var SubEnum = {\\n\"\n        + \"  C: Enum.A\\n\"\n        + \"};\\n\"\n        + \"function f() {\\n\"\n        + \"  var formatter = SubEnum.C\\n\"\n        + \"  formatter.Formatter_prototype$format();\\n\"\n        + \"}\";\n    testSets(false, js, output,\n        \"{format=[[Formatter.prototype], [Unrelated.prototype]]}\");\n  }\n",
        "begin_line": 663,
        "end_line": 698,
        "comment": "",
        "child_ranges": [
            "(line 664,col 5)-(line 679,col 14)",
            "(line 680,col 5)-(line 695,col 14)",
            "(line 696,col 5)-(line 697,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUntypedExterns()",
        "snippet": "  public void testUntypedExterns() {\n    String externs =\n        BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES\n        + \"var window;\"\n        + \"window.alert = function() {x};\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"Foo.prototype.alert = 0;\\n\"\n        + \"Foo.prototype.window = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"Bar.prototype.alert = 0;\\n\"\n        + \"Bar.prototype.window = 0;\\n\"\n        + \"window.alert();\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$a=0;\"\n        + \"Foo.prototype.alert=0;\"\n        + \"Foo.prototype.Foo_prototype$window=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.prototype.Bar_prototype$a=0;\"\n        + \"Bar.prototype.alert=0;\"\n        + \"Bar.prototype.Bar_prototype$window=0;\"\n        + \"window.alert();\";\n\n    testSets(false, externs, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]\"\n             + \", window=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, externs, js, output, \"{a=[[Bar.prototype], [Foo.prototype]],\"\n             + \" window=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 700,
        "end_line": 730,
        "comment": "",
        "child_ranges": [
            "(line 701,col 5)-(line 704,col 43)",
            "(line 705,col 5)-(line 714,col 28)",
            "(line 715,col 5)-(line 724,col 28)",
            "(line 726,col 5)-(line 727,col 63)",
            "(line 728,col 5)-(line 729,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionTypeInvalidation()",
        "snippet": "  public void testUnionTypeInvalidation() {\n    String externs = \"\"\n        + \"/** @constructor */ function Baz() {}\"\n        + \"Baz.prototype.a\";\n    String js = \"\"\n        + \"/** @constructor */ function Ind() {this.a=0}\\n\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"/** @type {Foo|Bar} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.a = 1\\n;\"\n        + \"F = new Bar;\\n\"\n        + \"/** @type {Baz} */\\n\"\n        + \"var Z = new Baz;\\n\"\n        + \"Z.a = 1\\n;\"\n        + \"/** @type {Bar|Baz} */\\n\"\n        + \"var B = new Baz;\\n\"\n        + \"B.a = 1;\\n\"\n        + \"B = new Bar;\\n\";\n    // Only the constructor field a of Ind is renamed, as Foo is related to Baz\n    // through Bar in the unions Bar|Baz and Foo|Bar.\n    String output = \"\"\n        + \"function Ind() { this.Ind$a = 0; }\"\n        + \"function Foo() {}\"\n        + \"Foo.prototype.a = 0;\"\n        + \"function Bar() {}\"\n        + \"Bar.prototype.a = 0;\"\n        + \"var F = new Foo;\"\n        + \"F.a = 1;\"\n        + \"F = new Bar;\"\n        + \"var Z = new Baz;\"\n        + \"Z.a = 1;\"\n        + \"var B = new Baz;\"\n        + \"B.a = 1;\"\n        + \"B = new Bar;\";\n    String ttOutput = \"\"\n        + \"function Ind() { this.Unique$1$a = 0; }\"\n        + \"function Foo() {}\"\n        + \"Foo.prototype.a = 0;\"\n        + \"function Bar() {}\"\n        + \"Bar.prototype.a = 0;\"\n        + \"var F = new Foo;\"\n        + \"F.a = 1;\"\n        + \"F = new Bar;\"\n        + \"var Z = new Baz;\"\n        + \"Z.a = 1;\"\n        + \"var B = new Baz;\"\n        + \"B.a = 1;\"\n        + \"B = new Bar;\";\n    testSets(false, externs, js, output, \"{a=[[Ind]]}\");\n    testSets(true, externs, js, ttOutput, \"{a=[[Unique$1]]}\");\n  }\n",
        "begin_line": 732,
        "end_line": 785,
        "comment": "",
        "child_ranges": [
            "(line 733,col 5)-(line 735,col 28)",
            "(line 736,col 5)-(line 752,col 27)",
            "(line 755,col 5)-(line 768,col 25)",
            "(line 769,col 5)-(line 782,col 25)",
            "(line 783,col 5)-(line 783,col 56)",
            "(line 784,col 5)-(line 784,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionAndExternTypes()",
        "snippet": "  public void testUnionAndExternTypes() {\n    String externs = \"\"\n      + \"/** @constructor */ function Foo() { }\"\n      + \"Foo.prototype.a = 4;\\n\";\n    String js = \"\"\n      + \"/** @constructor */ function Bar() { this.a = 2; }\\n\"\n      + \"/** @constructor */ function Baz() { this.a = 3; }\\n\"\n      + \"/** @constructor */ function Buz() { this.a = 4; }\\n\"\n      + \"/** @constructor */ function T1() { this.a = 3; }\\n\"\n      + \"/** @constructor */ function T2() { this.a = 3; }\\n\"\n      + \"/** @type {Bar|Baz} */ var b;\\n\"\n      + \"/** @type {Baz|Buz} */ var c;\\n\"\n      + \"/** @type {Buz|Foo} */ var d;\\n\"\n      + \"b.a = 5; c.a = 6; d.a = 7;\";\n    String output = \"\"\n      + \"/** @constructor */ function Bar() { this.a = 2; }\\n\"\n      + \"/** @constructor */ function Baz() { this.a = 3; }\\n\"\n      + \"/** @constructor */ function Buz() { this.a = 4; }\\n\"\n      + \"/** @constructor */ function T1() { this.T1$a = 3; }\\n\"\n      + \"/** @constructor */ function T2() { this.T2$a = 3; }\\n\"\n      + \"/** @type {Bar|Baz} */ var b;\\n\"\n      + \"/** @type {Baz|Buz} */ var c;\\n\"\n      + \"/** @type {Buz|Foo} */ var d;\\n\"\n      + \"b.a = 5; c.a = 6; d.a = 7;\";\n\n    // We are testing the skipping of multiple types caused by unionizing with\n    // extern types.\n    testSets(false, externs, js, output, \"{a=[[T1], [T2]]}\");\n  }\n",
        "begin_line": 787,
        "end_line": 815,
        "comment": "",
        "child_ranges": [
            "(line 788,col 5)-(line 790,col 33)",
            "(line 791,col 5)-(line 800,col 37)",
            "(line 801,col 5)-(line 810,col 37)",
            "(line 814,col 5)-(line 814,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTypedExterns()",
        "snippet": "  public void testTypedExterns() {\n    String externs = \"\"\n        + \"/** @constructor */ function Window() {};\\n\"\n        + \"Window.prototype.alert;\"\n        + \"/** @type {Window} */\"\n        + \"var window;\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.alert = 0;\\n\"\n        + \"window.alert('blarg');\";\n    String output = \"\"\n        + \"function Foo(){}\"\n        + \"Foo.prototype.Foo_prototype$alert=0;\"\n        + \"window.alert('blarg');\";\n    testSets(false, externs, js, output, \"{alert=[[Foo.prototype]]}\");\n    testSets(true, externs, js, output, \"{alert=[[Foo.prototype]]}\");\n  }\n",
        "begin_line": 817,
        "end_line": 833,
        "comment": "",
        "child_ranges": [
            "(line 818,col 5)-(line 822,col 24)",
            "(line 823,col 5)-(line 826,col 35)",
            "(line 827,col 5)-(line 830,col 35)",
            "(line 831,col 5)-(line 831,col 70)",
            "(line 832,col 5)-(line 832,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSubtypesWithSameField()",
        "snippet": "  public void testSubtypesWithSameField() {\n    String js = \"\"\n        + \"/** @constructor */ function Top() {}\\n\"\n        + \"/** @constructor \\n@extends Top*/ function Foo() {}\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor \\n@extends Top*/ function Bar() {}\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @param {Top} top */\"\n        + \"function foo(top) {\\n\"\n        + \"  var x = top.a;\\n\"\n        + \"}\\n\"\n        + \"foo(new Foo);\\n\"\n        + \"foo(new Bar);\\n\";\n    testSets(false, js, \"{}\");\n    testSets(true, js, \"{a=[[Bar.prototype, Foo.prototype]]}\");\n  }\n",
        "begin_line": 835,
        "end_line": 850,
        "comment": "",
        "child_ranges": [
            "(line 836,col 5)-(line 847,col 28)",
            "(line 848,col 5)-(line 848,col 30)",
            "(line 849,col 5)-(line 849,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSupertypeReferenceOfSubtypeProperty()",
        "snippet": "  public void testSupertypeReferenceOfSubtypeProperty() {\n    String externs = \"\"\n        + \"/** @constructor */ function Ext() {}\"\n        + \"Ext.prototype.a;\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"/** @constructor \\n@extends Foo*/ function Bar() {}\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @param {Foo} foo */\"\n        + \"function foo(foo) {\\n\"\n        + \"  var x = foo.a;\\n\"\n        + \"}\\n\";\n    String result = \"\"\n        + \"function Foo() {}\\n\"\n        + \"function Bar() {}\\n\"\n        + \"Bar.prototype.Bar_prototype$a;\\n\"\n        + \"function foo(foo$$1) {\\n\"\n        + \"  var x = foo$$1.Bar_prototype$a;\\n\"\n        + \"}\\n\";\n    testSets(false, externs, js, result, \"{a=[[Bar.prototype]]}\");\n  }\n",
        "begin_line": 852,
        "end_line": 872,
        "comment": "",
        "child_ranges": [
            "(line 853,col 5)-(line 855,col 29)",
            "(line 856,col 5)-(line 863,col 16)",
            "(line 864,col 5)-(line 870,col 16)",
            "(line 871,col 5)-(line 871,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testObjectLiteralNotRenamed()",
        "snippet": "  public void testObjectLiteralNotRenamed() {\n    String js = \"\"\n        + \"var F = {a:'a', b:'b'};\"\n        + \"F.a = 'z';\";\n    testSets(false, js, js, \"{}\");\n    testSets(true, js, js, \"{}\");\n  }\n",
        "begin_line": 874,
        "end_line": 880,
        "comment": "",
        "child_ranges": [
            "(line 875,col 5)-(line 877,col 23)",
            "(line 878,col 5)-(line 878,col 34)",
            "(line 879,col 5)-(line 879,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testObjectLiteralReflected()",
        "snippet": "  public void testObjectLiteralReflected() {\n    String js = \"\"\n        + \"var goog = {};\"\n        + \"goog.reflect = {};\"\n        + \"goog.reflect.object = function(x, y) { return y; };\"\n        + \"/** @constructor */ function F() {}\"\n        + \"/** @type {number} */ F.prototype.foo = 3;\"\n        + \"/** @constructor */ function G() {}\"\n        + \"/** @type {number} */ G.prototype.foo = 3;\"\n        + \"goog.reflect.object(F, {foo: 5});\";\n    String result = \"\"\n        + \"var goog = {};\"\n        + \"goog.reflect = {};\"\n        + \"goog.reflect.object = function(x, y) { return y; };\"\n        + \"function F() {}\"\n        + \"F.prototype.F_prototype$foo = 3;\"\n        + \"function G() {}\"\n        + \"G.prototype.G_prototype$foo = 3;\"\n        + \"goog.reflect.object(F, {F_prototype$foo: 5});\";\n    testSets(false, js, result, \"{foo=[[F.prototype], [G.prototype]]}\");\n    testSets(true, js, result, \"{foo=[[F.prototype], [G.prototype]]}\");\n  }\n",
        "begin_line": 882,
        "end_line": 903,
        "comment": "",
        "child_ranges": [
            "(line 883,col 5)-(line 891,col 46)",
            "(line 892,col 5)-(line 900,col 58)",
            "(line 901,col 5)-(line 901,col 72)",
            "(line 902,col 5)-(line 902,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testObjectLiteralLends()",
        "snippet": "  public void testObjectLiteralLends() {\n    String js = \"\"\n        + \"var mixin = function(x) { return x; };\"\n        + \"/** @constructor */ function F() {}\"\n        + \"/** @type {number} */ F.prototype.foo = 3;\"\n        + \"/** @constructor */ function G() {}\"\n        + \"/** @type {number} */ G.prototype.foo = 3;\"\n        + \"mixin(/** @lends {F.prototype} */ ({foo: 5}));\";\n    String result = \"\"\n        + \"var mixin = function(x) { return x; };\"\n        + \"function F() {}\"\n        + \"F.prototype.F_prototype$foo = 3;\"\n        + \"function G() {}\"\n        + \"G.prototype.G_prototype$foo = 3;\"\n        + \"mixin(/** @lends {F.prototype} */ ({F_prototype$foo: 5}));\";\n    testSets(false, js, result, \"{foo=[[F.prototype], [G.prototype]]}\");\n    testSets(true, js, result, \"{foo=[[F.prototype], [G.prototype]]}\");\n  }\n",
        "begin_line": 905,
        "end_line": 922,
        "comment": "",
        "child_ranges": [
            "(line 906,col 5)-(line 912,col 59)",
            "(line 913,col 5)-(line 919,col 71)",
            "(line 920,col 5)-(line 920,col 72)",
            "(line 921,col 5)-(line 921,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testClosureInherits()",
        "snippet": "  public void testClosureInherits() {\n    String js = \"\"\n        + \"var goog = {};\"\n        + \"/** @param {Function} childCtor Child class.\\n\"\n        + \" * @param {Function} parentCtor Parent class. */\\n\"\n        + \"goog.inherits = function(childCtor, parentCtor) {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function tempCtor() {};\\n\"\n        + \"  tempCtor.prototype = parentCtor.prototype;\\n\"\n        + \"  childCtor.superClass_ = parentCtor.prototype;\\n\"\n        + \"  childCtor.prototype = new tempCtor();\\n\"\n        + \"  childCtor.prototype.constructor = childCtor;\\n\"\n        + \"};\"\n        + \"/** @constructor */ function Top() {}\\n\"\n        + \"Top.prototype.f = function() {};\"\n        + \"/** @constructor \\n@extends Top*/ function Foo() {}\\n\"\n        + \"goog.inherits(Foo, Top);\\n\"\n        + \"/** @override */\\n\"\n        + \"Foo.prototype.f = function() {\"\n        + \"  Foo.superClass_.f();\"\n        + \"};\\n\"\n        + \"/** @constructor \\n* @extends Foo */ function Bar() {}\\n\"\n        + \"goog.inherits(Bar, Foo);\\n\"\n        + \"/** @override */\\n\"\n        + \"Bar.prototype.f = function() {\"\n        + \"  Bar.superClass_.f();\"\n        + \"};\\n\"\n        + \"(new Bar).f();\\n\";\n    testSets(false, js, \"{f=[[Top.prototype]]}\");\n    testSets(true, js, \"{constructor=[[Bar.prototype, Foo.prototype]], \"\n                 + \"f=[[Bar.prototype], [Foo.prototype], [Top.prototype]]}\");\n  }\n",
        "begin_line": 924,
        "end_line": 955,
        "comment": "",
        "child_ranges": [
            "(line 925,col 5)-(line 951,col 29)",
            "(line 952,col 5)-(line 952,col 49)",
            "(line 953,col 5)-(line 954,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSkipNativeFunctionMethod()",
        "snippet": "  public void testSkipNativeFunctionMethod() {\n    String externs = \"\"\n        + \"/** @constructor \\n @param {*} var_args */\"\n        + \"function Function(var_args) {}\"\n        + \"Function.prototype.call = function() {};\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo(){};\"\n        + \"/** @constructor\\n @extends Foo */\"\n        + \"function Bar() { Foo.call(this); };\"; // call should not be renamed\n    testSame(externs, js, null);\n  }\n",
        "begin_line": 957,
        "end_line": 967,
        "comment": "",
        "child_ranges": [
            "(line 958,col 5)-(line 961,col 53)",
            "(line 962,col 5)-(line 965,col 48)",
            "(line 966,col 5)-(line 966,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSkipNativeObjectMethod()",
        "snippet": "  public void testSkipNativeObjectMethod() {\n    String externs = \"\"\n        + \"/** @constructor \\n @param {*} opt_v */ function Object(opt_v) {}\"\n        + \"Object.prototype.hasOwnProperty;\";\n    String js = \"\"\n        + \"/** @constructor */ function Foo(){};\"\n        + \"(new Foo).hasOwnProperty('x');\";\n    testSets(false, externs, js, js, \"{}\");\n    testSets(true, externs, js, js, \"{}\");\n  }\n",
        "begin_line": 969,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 970,col 5)-(line 972,col 45)",
            "(line 973,col 5)-(line 975,col 43)",
            "(line 976,col 5)-(line 976,col 43)",
            "(line 977,col 5)-(line 977,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testExtendNativeType()",
        "snippet": "  public void testExtendNativeType() {\n    String externs = \"\"\n        + \"/** @constructor \\n @return {string} */\"\n        + \"function Date(opt_1, opt_2, opt_3, opt_4, opt_5, opt_6, opt_7) {}\"\n        + \"/** @override */ Date.prototype.toString = function() {}\";\n    String js = \"\"\n        + \"/** @constructor\\n @extends {Date} */ function SuperDate() {};\\n\"\n        + \"(new SuperDate).toString();\";\n    testSets(true, externs, js, js, \"{}\");\n    testSets(false, externs, js, js, \"{}\");\n  }\n",
        "begin_line": 980,
        "end_line": 990,
        "comment": "",
        "child_ranges": [
            "(line 981,col 5)-(line 984,col 69)",
            "(line 985,col 5)-(line 987,col 40)",
            "(line 988,col 5)-(line 988,col 42)",
            "(line 989,col 5)-(line 989,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testStringFunction()",
        "snippet": "  public void testStringFunction() {\n    // Extern functions are not renamed, but user functions on a native\n    // prototype object are.\n    String externs = \"/**@constructor\\n@param {*} opt_str \\n @return {string}*/\"\n         + \"function String(opt_str) {};\\n\"\n         + \"/** @override \\n @return {string} */\\n\"\n         + \"String.prototype.toString = function() { };\\n\";\n    String js = \"\"\n         + \"/** @constructor */ function Foo() {};\\n\"\n         + \"Foo.prototype.foo = function() {};\\n\"\n         + \"String.prototype.foo = function() {};\\n\"\n         + \"var a = 'str'.toString().foo();\\n\";\n    String output = \"\"\n         + \"function Foo() {};\\n\"\n         + \"Foo.prototype.Foo_prototype$foo = function() {};\\n\"\n         + \"String.prototype.String_prototype$foo = function() {};\\n\"\n         + \"var a = 'str'.toString().String_prototype$foo();\\n\";\n\n    testSets(false, externs, js, output,\n             \"{foo=[[Foo.prototype], [String.prototype]]}\");\n    testSets(true, externs, js, output,\n             \"{foo=[[Foo.prototype], [String.prototype]]}\");\n  }\n",
        "begin_line": 992,
        "end_line": 1014,
        "comment": "",
        "child_ranges": [
            "(line 995,col 5)-(line 998,col 59)",
            "(line 999,col 5)-(line 1003,col 47)",
            "(line 1004,col 5)-(line 1008,col 64)",
            "(line 1010,col 5)-(line 1011,col 60)",
            "(line 1012,col 5)-(line 1013,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnusedTypeInExterns()",
        "snippet": "  public void testUnusedTypeInExterns() {\n    String externs = \"\"\n        + \"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.a\";\n    String js = \"\"\n        + \"/** @constructor */ function Bar() {};\\n\"\n        + \"Bar.prototype.a;\"\n        + \"/** @constructor */ function Baz() {};\\n\"\n        + \"Baz.prototype.a;\";\n    String output = \"\"\n        + \"/** @constructor */ function Bar() {};\\n\"\n        + \"Bar.prototype.Bar_prototype$a;\"\n        + \"/** @constructor */ function Baz() {};\\n\"\n        + \"Baz.prototype.Baz_prototype$a\";\n    testSets(false, externs, js, output,\n             \"{a=[[Bar.prototype], [Baz.prototype]]}\");\n    testSets(true, externs, js, output,\n             \"{a=[[Bar.prototype], [Baz.prototype]]}\");\n  }\n",
        "begin_line": 1016,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1019,col 28)",
            "(line 1020,col 5)-(line 1024,col 29)",
            "(line 1025,col 5)-(line 1029,col 42)",
            "(line 1030,col 5)-(line 1031,col 55)",
            "(line 1032,col 5)-(line 1033,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInterface()",
        "snippet": "  public void testInterface() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I */ function Foo() {};\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @type I */\\n\"\n        + \"var F = new Foo;\"\n        + \"var x = F.a;\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype]]}\");\n    testSets(true, js, \"{a=[[Foo.prototype], [I.prototype]]}\");\n  }\n",
        "begin_line": 1036,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1044,col 25)",
            "(line 1045,col 5)-(line 1045,col 62)",
            "(line 1046,col 5)-(line 1046,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInterfaceOfSuperclass()",
        "snippet": "  public void testInterfaceOfSuperclass() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I */ function Foo() {};\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor \\n @extends Foo */ function Bar() {};\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\"\n        + \"B.a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype]]}\");\n    testSets(true, js,\n        \"{a=[[Bar.prototype], [Foo.prototype], [I.prototype]]}\");\n  }\n",
        "begin_line": 1049,
        "end_line": 1063,
        "comment": "",
        "child_ranges": [
            "(line 1050,col 5)-(line 1059,col 20)",
            "(line 1060,col 5)-(line 1060,col 62)",
            "(line 1061,col 5)-(line 1062,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testTwoInterfacesWithSomeInheritance()",
        "snippet": "  public void testTwoInterfacesWithSomeInheritance() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @interface */ function I2() {};\\n\"\n        + \"I2.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I */ function Foo() {};\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor \\n @extends Foo \\n @implements I2*/\\n\"\n        + \"function Bar() {};\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"/** @type Bar */\\n\"\n        + \"var B = new Bar;\"\n        + \"B.a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype, I2.prototype]]}\");\n    testSets(true, js, \"{a=[[Bar.prototype], [Foo.prototype], \"\n                       + \"[I.prototype], [I2.prototype]]}\");\n  }\n",
        "begin_line": 1065,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1066,col 5)-(line 1078,col 20)",
            "(line 1079,col 5)-(line 1079,col 76)",
            "(line 1080,col 5)-(line 1081,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInvalidatingInterface()",
        "snippet": "  public void testInvalidatingInterface() {\n    String js = \"\"\n        + \"/** @interface */ function I2() {};\\n\"\n        + \"I2.prototype.a;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"/** @type I */\\n\"\n        + \"var i = new Bar;\\n\" // Make I invalidating\n        + \"/** @constructor \\n @implements I \\n @implements I2 */\"\n        + \"function Foo() {};\\n\"\n        + \"/** @override */\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"(new Foo).a = 0;\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\";\n    testSets(false, js, \"{}\", TypeValidator.TYPE_MISMATCH_WARNING);\n    testSets(true, js, \"{}\", TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 1084,
        "end_line": 1100,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1097,col 29)",
            "(line 1098,col 5)-(line 1098,col 67)",
            "(line 1099,col 5)-(line 1099,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testMultipleInterfaces()",
        "snippet": "  public void testMultipleInterfaces() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"/** @interface */ function I2() {};\\n\"\n        + \"I2.prototype.a;\\n\"\n        + \"/** @constructor \\n @implements I \\n @implements I2 */\"\n        + \"function Foo() {};\\n\"\n        + \"/** @override */\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"(new Foo).a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I2.prototype]]}\");\n    testSets(true, js, \"{a=[[Foo.prototype], [I2.prototype]]}\");\n  }\n",
        "begin_line": 1102,
        "end_line": 1114,
        "comment": "",
        "child_ranges": [
            "(line 1103,col 5)-(line 1111,col 28)",
            "(line 1112,col 5)-(line 1112,col 63)",
            "(line 1113,col 5)-(line 1113,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInterfaceWithSupertypeImplementor()",
        "snippet": "  public void testInterfaceWithSupertypeImplementor() {\n    String js = \"\"\n        + \"/** @interface */ function C() {}\\n\"\n        + \"C.prototype.foo = function() {};\\n\"\n        + \"/** @constructor */ function A (){}\\n\"\n        + \"A.prototype.foo = function() {};\\n\"\n        + \"/** @constructor \\n @implements {C} \\n @extends {A} */\\n\"\n        + \"function B() {}\\n\"\n        + \"/** @type {C} */ var b = new B();\\n\"\n        + \"b.foo();\\n\";\n    testSets(false, js, \"{foo=[[A.prototype, C.prototype]]}\");\n    testSets(true, js, \"{foo=[[A.prototype], [C.prototype]]}\");\n  }\n",
        "begin_line": 1116,
        "end_line": 1128,
        "comment": "",
        "child_ranges": [
            "(line 1117,col 5)-(line 1125,col 23)",
            "(line 1126,col 5)-(line 1126,col 62)",
            "(line 1127,col 5)-(line 1127,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSuperInterface()",
        "snippet": "  public void testSuperInterface() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"I.prototype.a;\\n\"\n        + \"/** @interface \\n @extends I */ function I2() {};\\n\"\n        + \"/** @constructor \\n @implements I2 */\"\n        + \"function Foo() {};\\n\"\n        + \"/** @override */\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"(new Foo).a = 0\";\n    testSets(false, js, \"{a=[[Foo.prototype, I.prototype]]}\");\n    testSets(true, js, \"{a=[[Foo.prototype], [I.prototype]]}\");\n  }\n",
        "begin_line": 1130,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1131,col 5)-(line 1139,col 28)",
            "(line 1140,col 5)-(line 1140,col 62)",
            "(line 1141,col 5)-(line 1141,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testInterfaceUnionWithCtor()",
        "snippet": "  public void testInterfaceUnionWithCtor() {\n    String js = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"/** @type {!Function} */ I.prototype.addEventListener;\\n\"\n        + \"/** @constructor \\n * @implements {I} */ function Impl() {};\\n\"\n        + \"/** @type {!Function} */ Impl.prototype.addEventListener;\"\n        + \"/** @constructor */ function C() {};\\n\"\n        + \"/** @type {!Function} */ C.prototype.addEventListener;\"\n        + \"/** @param {C|I} x */\"\n        + \"function f(x) { x.addEventListener(); };\\n\"\n        + \"f(new C()); f(new Impl());\";\n\n    testSets(false, js, js,\n        \"{addEventListener=[[C.prototype, I.prototype, Impl.prototype]]}\");\n\n    // In the tightened case, the disambiguator is smart enough to\n    // disambiguate Impl's method from the interface method.\n    String tightenedOutput = \"\"\n        + \"function I() {};\\n\"\n        + \"I.prototype.I_prototype$addEventListener;\\n\"\n        + \"function Impl() {};\\n\"\n        + \"Impl.prototype.C_prototype$addEventListener;\"\n        + \"function C() {};\\n\"\n        + \"C.prototype.C_prototype$addEventListener;\"\n        + \"/** @param {C|I} x */\"\n        + \"function f(x) { x.C_prototype$addEventListener(); };\\n\"\n        + \"f(new C()); f(new Impl());\";\n\n    testSets(true, js, tightenedOutput,\n        \"{addEventListener=[[C.prototype, Impl.prototype], [I.prototype]]}\");\n  }\n",
        "begin_line": 1144,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1145,col 5)-(line 1154,col 39)",
            "(line 1156,col 5)-(line 1157,col 75)",
            "(line 1161,col 5)-(line 1170,col 39)",
            "(line 1172,col 5)-(line 1173,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testExternInterfaceUnionWithCtor()",
        "snippet": "  public void testExternInterfaceUnionWithCtor() {\n    String externs = \"\"\n        + \"/** @interface */ function I() {};\\n\"\n        + \"/** @type {!Function} */ I.prototype.addEventListener;\\n\"\n        + \"/** @constructor \\n * @implements {I} */ function Impl() {};\\n\"\n        + \"/** @type {!Function} */ Impl.prototype.addEventListener;\";\n\n    String js = \"\"\n        + \"/** @constructor */ function C() {};\\n\"\n        + \"/** @type {!Function} */ C.prototype.addEventListener;\"\n        + \"/** @param {C|I} x */\"\n        + \"function f(x) { x.addEventListener(); };\\n\"\n        + \"f(new C()); f(new Impl());\";\n\n    testSets(false, externs, js, js, \"{}\");\n    testSets(true, externs, js, js, \"{}\");\n  }\n",
        "begin_line": 1176,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1177,col 5)-(line 1181,col 70)",
            "(line 1183,col 5)-(line 1188,col 39)",
            "(line 1190,col 5)-(line 1190,col 43)",
            "(line 1191,col 5)-(line 1191,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testMismatchInvalidation()",
        "snippet": "  public void testMismatchInvalidation() {\n    String js = \"\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"/** @type Foo */\\n\"\n        + \"var F = new Bar;\\n\"\n        + \"F.a = 0;\";\n\n    testSets(false, \"\", js, js, \"{}\", TypeValidator.TYPE_MISMATCH_WARNING,\n             \"initializing variable\\n\"\n             + \"found   : Bar\\n\"\n             + \"required: (Foo|null)\");\n    testSets(true, \"\", js, js, \"{}\", TypeValidator.TYPE_MISMATCH_WARNING,\n             \"initializing variable\\n\"\n             + \"found   : Bar\\n\"\n             + \"required: (Foo|null)\");\n  }\n",
        "begin_line": 1198,
        "end_line": 1216,
        "comment": "\n   * Tests that the type based version skips renaming on types that have a\n   * mismatch, and the type tightened version continues to work as normal.\n   ",
        "child_ranges": [
            "(line 1199,col 5)-(line 1206,col 21)",
            "(line 1208,col 5)-(line 1211,col 39)",
            "(line 1212,col 5)-(line 1215,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testBadCast()",
        "snippet": "  public void testBadCast() {\n    String js = \"/** @constructor */ function Foo() {};\\n\"\n        + \"Foo.prototype.a = 0;\\n\"\n        + \"/** @constructor */ function Bar() {};\\n\"\n        + \"Bar.prototype.a = 0;\\n\"\n        + \"var a = /** @type {!Foo} */ (new Bar);\\n\"\n        + \"a.a = 4;\";\n    testSets(false, \"\", js, js, \"{}\",\n             TypeValidator.INVALID_CAST,\n             \"invalid cast - must be a subtype or supertype\\n\"\n             + \"from: Bar\\n\"\n             + \"to  : Foo\");\n  }\n",
        "begin_line": 1218,
        "end_line": 1230,
        "comment": "",
        "child_ranges": [
            "(line 1219,col 5)-(line 1224,col 21)",
            "(line 1225,col 5)-(line 1229,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testDeterministicNaming()",
        "snippet": "  public void testDeterministicNaming() {\n    String js =\n        \"/** @constructor */function A() {}\\n\"\n        + \"/** @return {string} */A.prototype.f = function() {return 'a';};\\n\"\n        + \"/** @constructor */function B() {}\\n\"\n        + \"/** @return {string} */B.prototype.f = function() {return 'b';};\\n\"\n        + \"/** @constructor */function C() {}\\n\"\n        + \"/** @return {string} */C.prototype.f = function() {return 'c';};\\n\"\n        + \"/** @type {A|B} */var ab = 1 ? new B : new A;\\n\"\n        + \"/** @type {string} */var n = ab.f();\\n\";\n\n    String output =\n        \"function A() {}\\n\"\n        + \"A.prototype.A_prototype$f = function() { return'a'; };\\n\"\n        + \"function B() {}\\n\"\n        + \"B.prototype.A_prototype$f = function() { return'b'; };\\n\"\n        + \"function C() {}\\n\"\n        + \"C.prototype.C_prototype$f = function() { return'c'; };\\n\"\n        + \"var ab = 1 ? new B : new A; var n = ab.A_prototype$f();\\n\";\n\n    for (int i = 0; i < 5; i++) {\n      testSets(false, js, output,\n          \"{f=[[A.prototype, B.prototype], [C.prototype]]}\");\n\n      testSets(true, js, output,\n          \"{f=[[A.prototype, B.prototype], [C.prototype]]}\");\n    }\n  }\n",
        "begin_line": 1232,
        "end_line": 1259,
        "comment": "",
        "child_ranges": [
            "(line 1233,col 5)-(line 1241,col 51)",
            "(line 1243,col 5)-(line 1250,col 70)",
            "(line 1252,col 5)-(line 1258,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testObjectLiteral()",
        "snippet": "  public void testObjectLiteral() {\n    String js = \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.a;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.a;\\n\"\n        + \"var F = /** @type {Foo} */({ a: 'a' });\\n\";\n\n    String output = \"function Foo() {}\\n\"\n        + \"Foo.prototype.Foo_prototype$a;\\n\"\n        + \"function Bar() {}\\n\"\n        + \"Bar.prototype.Bar_prototype$a;\\n\"\n        + \"var F = { Foo_prototype$a: 'a' };\\n\";\n\n    testSets(false, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n    testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n  }\n",
        "begin_line": 1261,
        "end_line": 1276,
        "comment": "",
        "child_ranges": [
            "(line 1262,col 5)-(line 1266,col 54)",
            "(line 1268,col 5)-(line 1272,col 48)",
            "(line 1274,col 5)-(line 1274,col 74)",
            "(line 1275,col 5)-(line 1275,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testCustomInherits()",
        "snippet": "  public void testCustomInherits() {\n    String js = \"Object.prototype.inheritsFrom = function(shuper) {\\n\" +\n        \"  /** @constructor */\\n\" +\n        \"  function Inheriter() { }\\n\" +\n        \"  Inheriter.prototype = shuper.prototype;\\n\" +\n        \"  this.prototype = new Inheriter();\\n\" +\n        \"  this.superConstructor = shuper;\\n\" +\n        \"};\\n\" +\n        \"function Foo(var1, var2, strength) {\\n\" +\n        \"  Foo.superConstructor.call(this, strength);\\n\" +\n        \"}\" +\n        \"Foo.inheritsFrom(Object);\";\n\n    String externs = \"\" +\n        \"function Function(var_args) {}\" +\n        \"/** @return {*} */Function.prototype.call = function(var_args) {};\";\n\n    testSets(false, externs, js, js, \"{}\");\n  }\n",
        "begin_line": 1278,
        "end_line": 1296,
        "comment": "",
        "child_ranges": [
            "(line 1279,col 5)-(line 1289,col 36)",
            "(line 1291,col 5)-(line 1293,col 77)",
            "(line 1295,col 5)-(line 1295,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSkipNativeFunctionStaticProperty()",
        "snippet": "  public void testSkipNativeFunctionStaticProperty() {\n    String js = \"\"\n      + \"/** @param {!Function} ctor */\\n\"\n      + \"function addSingletonGetter(ctor) { ctor.a; }\\n\"\n      + \"/** @constructor */ function Foo() {}\\n\"\n      + \"Foo.a = 0;\"\n      + \"/** @constructor */ function Bar() {}\\n\"\n      + \"Bar.a = 0;\";\n\n    String output = \"\"\n        + \"function addSingletonGetter(ctor){ctor.a}\"\n        + \"function Foo(){}\"\n        + \"Foo.a=0;\"\n        + \"function Bar(){}\"\n        + \"Bar.a=0\";\n\n    testSets(false, js, output, \"{}\");\n  }\n",
        "begin_line": 1298,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1299,col 5)-(line 1305,col 21)",
            "(line 1307,col 5)-(line 1312,col 20)",
            "(line 1314,col 5)-(line 1314,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testErrorOnProtectedProperty()",
        "snippet": "  public void testErrorOnProtectedProperty() {\n    test(\"function addSingletonGetter(foo) { foo.foobar = 'a'; };\", null,\n         DisambiguateProperties.Warnings.INVALIDATION);\n    assertTrue(getLastCompiler().getErrors()[0].toString().contains(\"foobar\"));\n  }\n",
        "begin_line": 1317,
        "end_line": 1321,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 5)-(line 1319,col 55)",
            "(line 1320,col 5)-(line 1320,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testMismatchForbiddenInvalidation()",
        "snippet": "  public void testMismatchForbiddenInvalidation() {\n    test(\"/** @constructor */ function F() {}\" +\n         \"/** @type {number} */ F.prototype.foobar = 3;\" +\n         \"/** @return {number} */ function g() { return new F(); }\",\n         null,\n         DisambiguateProperties.Warnings.INVALIDATION);\n    assertTrue(getLastCompiler().getErrors()[0].toString()\n        .contains(\"Consider fixing errors\"));\n  }\n",
        "begin_line": 1323,
        "end_line": 1331,
        "comment": "",
        "child_ranges": [
            "(line 1324,col 5)-(line 1328,col 55)",
            "(line 1329,col 5)-(line 1330,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testUnionTypeInvalidationError()",
        "snippet": "  public void testUnionTypeInvalidationError() {\n    String externs = \"\"\n        + \"/** @constructor */ function Baz() {}\"\n        + \"Baz.prototype.foobar\";\n    String js = \"\"\n        + \"/** @constructor */ function Ind() {this.foobar=0}\\n\"\n        + \"/** @constructor */ function Foo() {}\\n\"\n        + \"Foo.prototype.foobar = 0;\\n\"\n        + \"/** @constructor */ function Bar() {}\\n\"\n        + \"Bar.prototype.foobar = 0;\\n\"\n        + \"/** @type {Foo|Bar} */\\n\"\n        + \"var F = new Foo;\\n\"\n        + \"F.foobar = 1\\n;\"\n        + \"F = new Bar;\\n\"\n        + \"/** @type {Baz} */\\n\"\n        + \"var Z = new Baz;\\n\"\n        + \"Z.foobar = 1\\n;\";\n\n    test(\n        externs, js, \"\",\n        DisambiguateProperties.Warnings.INVALIDATION_ON_TYPE, null);\n    assertTrue(getLastCompiler().getErrors()[0].toString()\n        .contains(\"foobar\"));\n   }\n",
        "begin_line": 1333,
        "end_line": 1356,
        "comment": "",
        "child_ranges": [
            "(line 1334,col 5)-(line 1336,col 33)",
            "(line 1337,col 5)-(line 1349,col 28)",
            "(line 1351,col 5)-(line 1353,col 68)",
            "(line 1354,col 5)-(line 1355,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.runFindHighestTypeInChain()",
        "snippet": "  public void runFindHighestTypeInChain() {\n    // Check that this doesn't go into an infinite loop.\n    DisambiguateProperties.forJSTypeSystem(new Compiler(),\n        Maps.<String, CheckLevel>newHashMap())\n        .getTypeWithProperty(\"no\",\n            new JSTypeRegistry(new TestErrorReporter(null, null))\n            .getNativeType(JSTypeNative.OBJECT_PROTOTYPE));\n  }\n",
        "begin_line": 1358,
        "end_line": 1365,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1364,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  private void testSets(boolean runTightenTypes, String js, String expected,\n      String fieldTypes) {\n    this.runTightenTypes = runTightenTypes;\n    test(js, expected);\n    assertEquals(\n        fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));\n  }\n",
        "begin_line": 1367,
        "end_line": 1374,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1370,col 43)",
            "(line 1371,col 5)-(line 1371,col 23)",
            "(line 1372,col 5)-(line 1373,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  private void testSets(boolean runTightenTypes, String externs, String js,\n       String expected, String fieldTypes) {\n    testSets(runTightenTypes, externs, js, expected, fieldTypes, null, null);\n  }\n",
        "begin_line": 1376,
        "end_line": 1380,
        "comment": "",
        "child_ranges": [
            "(line 1379,col 5)-(line 1379,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  private void testSets(boolean runTightenTypes, String externs, String js,\n       String expected, String fieldTypes, DiagnosticType warning,\n       String description) {\n    this.runTightenTypes = runTightenTypes;\n    test(externs, js, expected, null, warning, description);\n    assertEquals(\n        fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));\n  }\n",
        "begin_line": 1382,
        "end_line": 1390,
        "comment": "",
        "child_ranges": [
            "(line 1386,col 5)-(line 1386,col 43)",
            "(line 1387,col 5)-(line 1387,col 60)",
            "(line 1388,col 5)-(line 1389,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String)",
        "snippet": "  private void testSets(boolean runTightenTypes, String js, String fieldTypes) {\n    this.runTightenTypes = runTightenTypes;\n    test(js, null, null, null);\n    assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));\n  }\n",
        "begin_line": 1399,
        "end_line": 1403,
        "comment": "\n   * Compiles the code and checks that the set of types for each field matches\n   * the expected value.\n   *\n   * <p>The format for the set of types for fields is:\n   * {field=[[Type1, Type2]]}\n   ",
        "child_ranges": [
            "(line 1400,col 5)-(line 1400,col 43)",
            "(line 1401,col 5)-(line 1401,col 31)",
            "(line 1402,col 5)-(line 1402,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.testSets(boolean, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testSets(boolean runTightenTypes, String js, String fieldTypes,\n      DiagnosticType warning) {\n    this.runTightenTypes = runTightenTypes;\n    test(js, null, null, warning);\n    assertEquals(fieldTypes, mapToString(lastPass.getRenamedTypesForTesting()));\n  }\n",
        "begin_line": 1412,
        "end_line": 1417,
        "comment": "\n   * Compiles the code and checks that the set of types for each field matches\n   * the expected value.\n   *\n   * <p>The format for the set of types for fields is:\n   * {field=[[Type1, Type2]]}\n   ",
        "child_ranges": [
            "(line 1414,col 5)-(line 1414,col 43)",
            "(line 1415,col 5)-(line 1415,col 34)",
            "(line 1416,col 5)-(line 1416,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.DisambiguatePropertiesTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java",
        "signature": "com.google.javascript.jscomp.DisambiguatePropertiesTest.mapToString(com.google.common.collect.Multimap<java.lang.String, java.util.Collection<T>>)",
        "snippet": "  private <T> String mapToString(Multimap<String, Collection<T>> map) {\n    TreeMap<String, String> retMap = Maps.newTreeMap();\n    for (String key : map.keySet()) {\n      TreeSet<String> treeSet = Sets.newTreeSet();\n      for (Collection<T> collection : map.get(key)) {\n        Set<String> subSet = Sets.newTreeSet();\n        for (T type : collection) {\n          subSet.add(type.toString());\n        }\n        treeSet.add(subSet.toString());\n      }\n      retMap.put(key, treeSet.toString());\n    }\n    return retMap.toString();\n  }\n",
        "begin_line": 1420,
        "end_line": 1434,
        "comment": " Sorts the map and converts to a string for comparison purposes. ",
        "child_ranges": [
            "(line 1421,col 5)-(line 1421,col 55)",
            "(line 1422,col 5)-(line 1432,col 5)",
            "(line 1433,col 5)-(line 1433,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 139,col 49)",
            "(line 140,col 5)-(line 140,col 39)",
            "(line 141,col 5)-(line 141,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 21)",
            "(line 161,col 5)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 185,
        "end_line": 200,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 188,col 5)",
            "(line 192,col 5)-(line 192,col 32)",
            "(line 194,col 5)-(line 195,col 65)",
            "(line 196,col 5)-(line 197,col 60)",
            "(line 198,col 5)-(line 198,col 55)",
            "(line 199,col 5)-(line 199,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 29)",
            "(line 254,col 5)-(line 254,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 28)",
            "(line 301,col 5)-(line 301,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": " TODO(nicksantos): This pass doesn't get run anymore. It should be removed.",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableComputeSideEffects()",
        "snippet": "  void enableComputeSideEffects() {\n    computeSideEffects  = true;\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Run the PureFunctionIdentifier pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(), level);\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 346,col 5)-(line 348,col 40)",
            "(line 350,col 5)-(line 350,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 401,
        "end_line": 404,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 417,
        "end_line": 420,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 49)",
            "(line 441,col 5)-(line 441,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 458,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 41)",
            "(line 462,col 5)-(line 462,col 28)",
            "(line 464,col 5)-(line 464,col 43)",
            "(line 466,col 5)-(line 468,col 5)",
            "(line 471,col 5)-(line 471,col 39)",
            "(line 472,col 5)-(line 473,col 53)",
            "(line 475,col 5)-(line 475,col 71)",
            "(line 477,col 5)-(line 477,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 483,col 5)",
            "(line 484,col 5)-(line 484,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 537,
        "end_line": 548,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 539,col 41)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 51)",
            "(line 543,col 5)-(line 545,col 5)",
            "(line 546,col 5)-(line 546,col 55)",
            "(line 547,col 5)-(line 547,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 583,
        "end_line": 591,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 41)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 589,col 66)",
            "(line 590,col 5)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 652,col 5)-(line 656,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 670,
        "end_line": 675,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 673,col 49)",
            "(line 674,col 5)-(line 674,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 707,col 5)-(line 707,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 725,
        "end_line": 738,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 726,col 5)-(line 737,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 751,
        "end_line": 754,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n    Map<Node, Node> mtoc = NodeUtil.mapMainToClone(mainRoot, mainRootClone);\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (!runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (computeSideEffects && i == 0) {\n          PureFunctionIdentifier.Driver mark =\n              new PureFunctionIdentifier.Driver(compiler, null, false);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        if (runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be changed by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called.\"\n            + \"\\nOriginal: \" + mainRootClone.toStringTree()\n            + \"\\nNew: \" + mainRoot.toStringTree(), hasCodeChanged);\n      }\n\n      // Check correctness of the changed-scopes-only traversal\n      NodeUtil.verifyScopeChanges(mtoc, mainRoot, false, compiler);\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone =\n          normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 770,
        "end_line": 1013,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 773,col 5)-(line 773,col 51)",
            "(line 774,col 5)-(line 774,col 44)",
            "(line 776,col 5)-(line 776,col 39)",
            "(line 777,col 5)-(line 778,col 66)",
            "(line 779,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 787,col 5)",
            "(line 788,col 5)-(line 788,col 44)",
            "(line 789,col 5)-(line 789,col 40)",
            "(line 792,col 5)-(line 792,col 38)",
            "(line 793,col 5)-(line 793,col 54)",
            "(line 794,col 5)-(line 794,col 50)",
            "(line 795,col 5)-(line 795,col 76)",
            "(line 797,col 5)-(line 797,col 45)",
            "(line 798,col 5)-(line 798,col 68)",
            "(line 799,col 5)-(line 799,col 34)",
            "(line 800,col 5)-(line 800,col 59)",
            "(line 801,col 5)-(line 801,col 35)",
            "(line 803,col 5)-(line 804,col 39)",
            "(line 806,col 5)-(line 868,col 5)",
            "(line 870,col 5)-(line 1012,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 57)",
            "(line 1018,col 5)-(line 1018,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 1024,
        "end_line": 1042,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 41)",
            "(line 1026,col 5)-(line 1026,col 51)",
            "(line 1027,col 5)-(line 1029,col 5)",
            "(line 1030,col 5)-(line 1030,col 55)",
            "(line 1031,col 5)-(line 1031,col 39)",
            "(line 1032,col 5)-(line 1033,col 66)",
            "(line 1034,col 5)-(line 1034,col 44)",
            "(line 1035,col 5)-(line 1035,col 42)",
            "(line 1037,col 5)-(line 1040,col 5)",
            "(line 1041,col 5)-(line 1041,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String input, String expectedExtern) {\n    testExternChanges(\"\", input, expectedExtern);\n  }\n",
        "begin_line": 1044,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 5)-(line 1046,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String extern, String input, String expectedExtern) {\n    Compiler compiler = createCompiler();\n    CompilerOptions options = getOptions();\n    compiler.init(\n        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n        options);\n    compiler.parseInputs();\n    assertFalse(compiler.hasErrors());\n\n    Node externsAndJs = compiler.getRoot();\n    Node root = externsAndJs.getLastChild();\n\n    Node externs = externsAndJs.getFirstChild();\n\n    Node expected = compiler.parseTestCode(expectedExtern);\n    assertFalse(compiler.hasErrors());\n\n    (getProcessor(compiler)).process(externs, root);\n\n    String externsCode = compiler.toSource(externs);\n    String expectedCode = compiler.toSource(expected);\n\n    assertEquals(expectedCode, externsCode);\n  }\n",
        "begin_line": 1049,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1051,col 5)-(line 1051,col 41)",
            "(line 1052,col 5)-(line 1052,col 43)",
            "(line 1053,col 5)-(line 1056,col 17)",
            "(line 1057,col 5)-(line 1057,col 27)",
            "(line 1058,col 5)-(line 1058,col 38)",
            "(line 1060,col 5)-(line 1060,col 43)",
            "(line 1061,col 5)-(line 1061,col 44)",
            "(line 1063,col 5)-(line 1063,col 48)",
            "(line 1065,col 5)-(line 1065,col 59)",
            "(line 1066,col 5)-(line 1066,col 38)",
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1070,col 5)-(line 1070,col 52)",
            "(line 1071,col 5)-(line 1071,col 54)",
            "(line 1073,col 5)-(line 1073,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1084,
        "end_line": 1090,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1085,col 5)-(line 1085,col 47)",
            "(line 1086,col 5)-(line 1088,col 5)",
            "(line 1089,col 5)-(line 1089,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1096,
        "end_line": 1102,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1097,col 5)-(line 1097,col 47)",
            "(line 1098,col 5)-(line 1100,col 5)",
            "(line 1101,col 5)-(line 1101,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1109,
        "end_line": 1116,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1110,col 5)-(line 1110,col 48)",
            "(line 1111,col 5)-(line 1111,col 47)",
            "(line 1112,col 5)-(line 1114,col 5)",
            "(line 1115,col 5)-(line 1115,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1123,
        "end_line": 1129,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 47)",
            "(line 1125,col 5)-(line 1127,col 5)",
            "(line 1128,col 5)-(line 1128,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1135,
        "end_line": 1142,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1136,col 5)-(line 1136,col 53)",
            "(line 1137,col 5)-(line 1140,col 5)",
            "(line 1141,col 5)-(line 1141,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1145,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 7)-(line 1146,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1149,
        "end_line": 1150,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1152,
        "end_line": 1153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1157,col 39)",
            "(line 1158,col 5)-(line 1158,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1161,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1162,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1166,
        "end_line": 1178,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1167,col 5)-(line 1167,col 52)",
            "(line 1168,col 5)-(line 1176,col 39)",
            "(line 1177,col 5)-(line 1177,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.DisambiguatePropertiesTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-bf3b2bd4-c984-4f94-a5ee-e586687b7744.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1170,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1171,col 13)-(line 1173,col 13)"
        ]
    }
]