[
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public FDistribution makeDistribution() {\n        return new FDistribution(5.0, 6.0);\n    }\n",
        "begin_line": 35,
        "end_line": 38,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestPoints() {\n        // quantiles computed using R version 2.9.2\n        return new double[] {0.0346808448626, 0.0937009113303, 0.143313661184, 0.202008445998, 0.293728320107,\n                20.8026639595, 8.74589525602, 5.98756512605, 4.38737418741, 3.10751166664};\n    }\n",
        "begin_line": 41,
        "end_line": 46,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 44,col 9)-(line 45,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] {0.001, 0.01, 0.025, 0.05, 0.1, 0.999, 0.990, 0.975, 0.950, 0.900};\n    }\n",
        "begin_line": 49,
        "end_line": 52,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 51,col 9)-(line 51,col 95)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        return new double[] {0.0689156576706, 0.236735653193, 0.364074131941, 0.481570789649, 0.595880479994,\n                0.000133443915657, 0.00286681303403, 0.00969192007502, 0.0242883861471, 0.0605491314658};\n    }\n",
        "begin_line": 55,
        "end_line": 59,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": [
            "(line 57,col 9)-(line 58,col 105)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        super.setUp();\n        setTolerance(1e-9);\n    }\n",
        "begin_line": 62,
        "end_line": 66,
        "comment": " --------------------- Override tolerance  --------------",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 22)",
            "(line 65,col 9)-(line 65,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testCumulativeProbabilityExtremes()",
        "snippet": "    @Test\n    public void testCumulativeProbabilityExtremes() {\n        setCumulativeTestPoints(new double[] {-2, 0});\n        setCumulativeTestValues(new double[] {0, 0});\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 70,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 54)",
            "(line 73,col 9)-(line 73,col 53)",
            "(line 74,col 9)-(line 74,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testInverseCumulativeProbabilityExtremes()",
        "snippet": "    @Test\n    public void testInverseCumulativeProbabilityExtremes() {\n        setInverseCumulativeTestPoints(new double[] {0, 1});\n        setInverseCumulativeTestValues(new double[] {0, Double.POSITIVE_INFINITY});\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 77,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 60)",
            "(line 80,col 9)-(line 80,col 83)",
            "(line 81,col 9)-(line 81,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testDfAccessors()",
        "snippet": "    @Test\n    public void testDfAccessors() {\n        FDistribution dist = (FDistribution) getDistribution();\n        Assert.assertEquals(5d, dist.getNumeratorDegreesOfFreedom(), Double.MIN_VALUE);\n        Assert.assertEquals(6d, dist.getDenominatorDegreesOfFreedom(), Double.MIN_VALUE);\n    }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 86,col 9)-(line 86,col 63)",
            "(line 87,col 9)-(line 87,col 87)",
            "(line 88,col 9)-(line 88,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testPreconditions()",
        "snippet": "    @Test\n    public void testPreconditions() {\n        try {\n            new FDistribution(0, 1);\n            Assert.fail(\"Expecting NotStrictlyPositiveException for df = 0\");\n        } catch (NotStrictlyPositiveException ex) {\n            // Expected.\n        }\n        try {\n            new FDistribution(1, 0);\n            Assert.fail(\"Expecting NotStrictlyPositiveException for df = 0\");\n        } catch (NotStrictlyPositiveException ex) {\n            // Expected.\n        }\n    }\n",
        "begin_line": 91,
        "end_line": 105,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 98,col 9)",
            "(line 99,col 9)-(line 104,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testLargeDegreesOfFreedom()",
        "snippet": "    @Test\n    public void testLargeDegreesOfFreedom() {\n        FDistribution fd = new FDistribution(100000, 100000);\n        double p = fd.cumulativeProbability(.999);\n        double x = fd.inverseCumulativeProbability(p);\n        Assert.assertEquals(.999, x, 1.0e-5);\n    }\n",
        "begin_line": 107,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 109,col 9)-(line 109,col 61)",
            "(line 110,col 9)-(line 110,col 50)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 112,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testSmallDegreesOfFreedom()",
        "snippet": "    @Test\n    public void testSmallDegreesOfFreedom() {\n        FDistribution fd = new FDistribution(1, 1);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        Assert.assertEquals(0.975, x, 1.0e-5);\n\n        fd = new FDistribution(1, 2);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        Assert.assertEquals(0.975, x, 1.0e-5);\n    }\n",
        "begin_line": 115,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 51)",
            "(line 118,col 9)-(line 118,col 51)",
            "(line 119,col 9)-(line 119,col 54)",
            "(line 120,col 9)-(line 120,col 46)",
            "(line 122,col 9)-(line 122,col 37)",
            "(line 123,col 9)-(line 123,col 44)",
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testMoments()",
        "snippet": "    @Test\n    public void testMoments() {\n        final double tol = 1e-9;\n        FDistribution dist;\n\n        dist = new FDistribution(1, 2);\n        Assert.assertTrue(Double.isNaN(dist.getNumericalMean()));\n        Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));\n\n        dist = new FDistribution(1, 3);\n        Assert.assertEquals(dist.getNumericalMean(), 3d / (3d - 2d), tol);\n        Assert.assertTrue(Double.isNaN(dist.getNumericalVariance()));\n\n        dist = new FDistribution(1, 5);\n        Assert.assertEquals(dist.getNumericalMean(), 5d / (5d - 2d), tol);\n        Assert.assertEquals(dist.getNumericalVariance(), (2d * 5d * 5d * 4d) / 9d, tol);\n    }\n",
        "begin_line": 128,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 32)",
            "(line 131,col 9)-(line 131,col 27)",
            "(line 133,col 9)-(line 133,col 39)",
            "(line 134,col 9)-(line 134,col 65)",
            "(line 135,col 9)-(line 135,col 69)",
            "(line 137,col 9)-(line 137,col 39)",
            "(line 138,col 9)-(line 138,col 74)",
            "(line 139,col 9)-(line 139,col 69)",
            "(line 141,col 9)-(line 141,col 39)",
            "(line 142,col 9)-(line 142,col 74)",
            "(line 143,col 9)-(line 143,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.FDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.FDistributionTest.testMath785()",
        "snippet": "    @Test\n    public void testMath785() {\n        // this test was failing due to inaccurate results from ContinuedFraction.\n\n        try {\n            double prob = 0.01;\n            FDistribution f = new FDistribution(200000, 200000);\n            double result = f.inverseCumulativeProbability(prob);\n            Assert.assertTrue(result < 1.0);\n        } catch (Exception e) {\n            Assert.fail(\"Failing to calculate inverse cumulative probability\");\n        }\n    }\n",
        "begin_line": 146,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 150,col 9)-(line 157,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        super.setUp();\n        setTolerance(1e-4);\n    }\n",
        "begin_line": 32,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 22)",
            "(line 35,col 9)-(line 35,col 27)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.makeDistribution()",
        "snippet": "    @Override\n    public UniformRealDistribution makeDistribution() {\n        return new UniformRealDistribution(-0.5, 1.25);\n    }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": " Creates the default uniform real distribution instance to use in tests. ",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.makeCumulativeTestPoints()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestPoints() {\n        return new double[] {-0.5001, -0.5, -0.4999, -0.25, -0.0001, 0.0,\n                             0.0001, 0.25, 1.0, 1.2499, 1.25, 1.2501};\n    }\n",
        "begin_line": 47,
        "end_line": 51,
        "comment": " Creates the default cumulative probability distribution test input values ",
        "child_ranges": [
            "(line 49,col 9)-(line 50,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.makeCumulativeTestValues()",
        "snippet": "    @Override\n    public double[] makeCumulativeTestValues() {\n        return new double[] {0.0, 0.0, 0.0001, 0.25/1.75, 0.4999/1.75,\n                             0.5/1.75, 0.5001/1.75, 0.75/1.75, 1.5/1.75,\n                             1.7499/1.75, 1.0, 1.0};\n    }\n",
        "begin_line": 54,
        "end_line": 59,
        "comment": " Creates the default cumulative probability density test expected values ",
        "child_ranges": [
            "(line 56,col 9)-(line 58,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.makeDensityTestValues()",
        "snippet": "    @Override\n    public double[] makeDensityTestValues() {\n        double d = 1 / 1.75;\n        return new double[] {0, d, d, d, d, d, d, d, d, d, d, 0};\n    }\n",
        "begin_line": 62,
        "end_line": 66,
        "comment": " Creates the default probability density test expected values ",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 28)",
            "(line 65,col 9)-(line 65,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetLowerBound()",
        "snippet": "    @Test\n    public void testGetLowerBound() {\n        UniformRealDistribution distribution = makeDistribution();\n        Assert.assertEquals(-0.5, distribution.getSupportLowerBound(), 0);\n    }\n",
        "begin_line": 71,
        "end_line": 75,
        "comment": " Test lower bound getter. ",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 66)",
            "(line 74,col 9)-(line 74,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.testGetUpperBound()",
        "snippet": "    @Test\n    public void testGetUpperBound() {\n        UniformRealDistribution distribution = makeDistribution();\n        Assert.assertEquals(1.25, distribution.getSupportUpperBound(), 0);\n    }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": " Test upper bound getter. ",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 66)",
            "(line 81,col 9)-(line 81,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions1()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testPreconditions1() {\n        new UniformRealDistribution(0, 0);\n    }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": " Test pre-condition for equal lower/upper bound. ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.testPreconditions2()",
        "snippet": "    @Test(expected=NumberIsTooLargeException.class)\n    public void testPreconditions2() {\n        new UniformRealDistribution(1, 0);\n    }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": " Test pre-condition for lower bound larger than upper bound. ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.UniformRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/UniformRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.UniformRealDistributionTest.testMeanVariance()",
        "snippet": "    @Test\n    public void testMeanVariance() {\n        UniformRealDistribution dist;\n\n        dist = new UniformRealDistribution(0, 1);\n        Assert.assertEquals(dist.getNumericalMean(), 0.5, 0);\n        Assert.assertEquals(dist.getNumericalVariance(), 1/12.0, 0);\n\n        dist = new UniformRealDistribution(-1.5, 0.6);\n        Assert.assertEquals(dist.getNumericalMean(), -0.45, 0);\n        Assert.assertEquals(dist.getNumericalVariance(), 0.3675, 0);\n\n        dist = new UniformRealDistribution(-0.5, 1.25);\n        Assert.assertEquals(dist.getNumericalMean(), 0.375, 0);\n        Assert.assertEquals(dist.getNumericalVariance(), 0.2552083333333333, 0);\n    }\n",
        "begin_line": 97,
        "end_line": 112,
        "comment": " Test mean/variance. ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 37)",
            "(line 101,col 9)-(line 101,col 49)",
            "(line 102,col 9)-(line 102,col 61)",
            "(line 103,col 9)-(line 103,col 68)",
            "(line 105,col 9)-(line 105,col 54)",
            "(line 106,col 9)-(line 106,col 63)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 109,col 9)-(line 109,col 55)",
            "(line 110,col 9)-(line 110,col 63)",
            "(line 111,col 9)-(line 111,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeDistribution()",
        "snippet": "    public abstract RealDistribution makeDistribution();\n",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Creates the default continuous distribution instance to use in tests. ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeCumulativeTestPoints()",
        "snippet": "    public abstract double[] makeCumulativeTestPoints();\n",
        "begin_line": 99,
        "end_line": 99,
        "comment": " Creates the default cumulative probability test input values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeCumulativeTestValues()",
        "snippet": "    public abstract double[] makeCumulativeTestValues();\n",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Creates the default cumulative probability test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeDensityTestValues()",
        "snippet": "    public abstract double[] makeDensityTestValues();\n",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Creates the default density test expected values ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeInverseCumulativeTestPoints()",
        "snippet": "    public double[] makeInverseCumulativeTestPoints() {\n        return makeCumulativeTestValues();\n    }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": " Creates the default inverse cumulative probability test input values ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.makeInverseCumulativeTestValues()",
        "snippet": "    public double[] makeInverseCumulativeTestValues() {\n        return makeCumulativeTestPoints();\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": " Creates the default inverse cumulative probability density test expected values ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 42)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setUp()",
        "snippet": "    @Before\n    public void setUp() {\n        distribution = makeDistribution();\n        cumulativeTestPoints = makeCumulativeTestPoints();\n        cumulativeTestValues = makeCumulativeTestValues();\n        inverseCumulativeTestPoints = makeInverseCumulativeTestPoints();\n        inverseCumulativeTestValues = makeInverseCumulativeTestValues();\n        densityTestValues = makeDensityTestValues();\n    }\n",
        "begin_line": 124,
        "end_line": 132,
        "comment": "\n     * Setup sets all test instance data to default values\n     ",
        "child_ranges": [
            "(line 126,col 9)-(line 126,col 42)",
            "(line 127,col 9)-(line 127,col 58)",
            "(line 128,col 9)-(line 128,col 58)",
            "(line 129,col 9)-(line 129,col 72)",
            "(line 130,col 9)-(line 130,col 72)",
            "(line 131,col 9)-(line 131,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.tearDown()",
        "snippet": "    @After\n    public void tearDown() {\n        distribution = null;\n        cumulativeTestPoints = null;\n        cumulativeTestValues = null;\n        inverseCumulativeTestPoints = null;\n        inverseCumulativeTestValues = null;\n        densityTestValues = null;\n    }\n",
        "begin_line": 137,
        "end_line": 145,
        "comment": "\n     * Cleans up test instance data\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 28)",
            "(line 140,col 9)-(line 140,col 36)",
            "(line 141,col 9)-(line 141,col 36)",
            "(line 142,col 9)-(line 142,col 43)",
            "(line 143,col 9)-(line 143,col 43)",
            "(line 144,col 9)-(line 144,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.verifyCumulativeProbabilities()",
        "snippet": "    protected void verifyCumulativeProbabilities() {\n        // verify cumulativeProbability(double)\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect cumulative probability value returned for \"\n                + cumulativeTestPoints[i], cumulativeTestValues[i],\n                distribution.cumulativeProbability(cumulativeTestPoints[i]),\n                getTolerance());\n        }\n        // verify cumulativeProbability(double, double)\n        // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            for (int j = 0; j < cumulativeTestPoints.length; j++) {\n                if (cumulativeTestPoints[i] <= cumulativeTestPoints[j]) {\n                    TestUtils.assertEquals(cumulativeTestValues[j] - cumulativeTestValues[i],\n                        distribution.cumulativeProbability(cumulativeTestPoints[i], cumulativeTestPoints[j]),\n                        getTolerance());\n                } else {\n                    try {\n                        distribution.cumulativeProbability(cumulativeTestPoints[i], cumulativeTestPoints[j]);\n                    } catch (NumberIsTooLargeException e) {\n                        continue;\n                    }\n                    Assert.fail(\"distribution.cumulativeProbability(double, double) should have thrown an exception that second argument is too large\");\n                }\n            }\n        }\n    }\n",
        "begin_line": 153,
        "end_line": 179,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 160,col 9)",
            "(line 163,col 9)-(line 178,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.verifyInverseCumulativeProbabilities()",
        "snippet": "    protected void verifyInverseCumulativeProbabilities() {\n        for (int i = 0; i < inverseCumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect inverse cumulative probability value returned for \"\n                + inverseCumulativeTestPoints[i], inverseCumulativeTestValues[i],\n                 distribution.inverseCumulativeProbability(inverseCumulativeTestPoints[i]),\n                 getTolerance());\n        }\n    }\n",
        "begin_line": 185,
        "end_line": 192,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using current test instance data\n     ",
        "child_ranges": [
            "(line 186,col 9)-(line 191,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.verifyDensities()",
        "snippet": "    protected void verifyDensities() {\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            TestUtils.assertEquals(\"Incorrect probability density value returned for \"\n                + cumulativeTestPoints[i], densityTestValues[i],\n                 distribution.density(cumulativeTestPoints[i]),\n                 getTolerance());\n        }\n    }\n",
        "begin_line": 197,
        "end_line": 204,
        "comment": "\n     * Verifies that density calculations match expected values\n     ",
        "child_ranges": [
            "(line 198,col 9)-(line 203,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testCumulativeProbabilities()",
        "snippet": "    @Test\n    public void testCumulativeProbabilities() {\n        verifyCumulativeProbabilities();\n    }\n",
        "begin_line": 212,
        "end_line": 215,
        "comment": "\n     * Verifies that cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testInverseCumulativeProbabilities()",
        "snippet": "    @Test\n    public void testInverseCumulativeProbabilities() {\n        verifyInverseCumulativeProbabilities();\n    }\n",
        "begin_line": 221,
        "end_line": 224,
        "comment": "\n     * Verifies that inverse cumulative probability density calculations match expected values\n     * using default test instance data\n     ",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testDensities()",
        "snippet": "    @Test\n    public void testDensities() {\n        verifyDensities();\n    }\n",
        "begin_line": 230,
        "end_line": 233,
        "comment": "\n     * Verifies that density calculations return expected values\n     * for default test instance data\n     ",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testConsistency()",
        "snippet": "    @Test\n    public void testConsistency() {\n        for (int i=1; i < cumulativeTestPoints.length; i++) {\n\n            // check that cdf(x, x) = 0\n            // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n            TestUtils.assertEquals(0d,\n               distribution.cumulativeProbability\n                 (cumulativeTestPoints[i], cumulativeTestPoints[i]), tolerance);\n\n            // check that P(a < X <= b) = P(X <= b) - P(X <= a)\n            double upper = FastMath.max(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double lower = FastMath.min(cumulativeTestPoints[i], cumulativeTestPoints[i -1]);\n            double diff = distribution.cumulativeProbability(upper) -\n                distribution.cumulativeProbability(lower);\n            // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n            double direct = distribution.cumulativeProbability(lower, upper);\n            TestUtils.assertEquals(\"Inconsistent cumulative probabilities for (\"\n                    + lower + \",\" + upper + \")\", diff, direct, tolerance);\n        }\n    }\n",
        "begin_line": 238,
        "end_line": 258,
        "comment": "\n     * Verifies that probability computations are consistent\n     ",
        "child_ranges": [
            "(line 240,col 9)-(line 257,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIllegalArguments()",
        "snippet": "    @Test\n    public void testIllegalArguments() {\n        try {\n            // XXX In 4.0, \"cumulativeProbability(double,double)\" must be replaced with \"probability\" (MATH-839).\n            distribution.cumulativeProbability(1, 0);\n            Assert.fail(\"Expecting MathIllegalArgumentException for bad cumulativeProbability interval\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(-1);\n            Assert.fail(\"Expecting MathIllegalArgumentException for p = -1\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n        try {\n            distribution.inverseCumulativeProbability(2);\n            Assert.fail(\"Expecting MathIllegalArgumentException for p = 2\");\n        } catch (MathIllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 263,
        "end_line": 284,
        "comment": "\n     * Verifies that illegal arguments are correctly handled\n     ",
        "child_ranges": [
            "(line 265,col 9)-(line 271,col 9)",
            "(line 272,col 9)-(line 277,col 9)",
            "(line 278,col 9)-(line 283,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testSampling()",
        "snippet": "    @Test\n    public void testSampling() {\n        final int sampleSize = 1000;\n        distribution.reseedRandomGenerator(1000); // Use fixed seed\n        double[] sample = distribution.sample(sampleSize);\n        double[] quartiles = TestUtils.getDistributionQuartiles(distribution);\n        double[] expected = {250, 250, 250, 250};\n        long[] counts = new long[4];\n        for (int i = 0; i < sampleSize; i++) {\n            TestUtils.updateCounts(sample[i], counts, quartiles);\n        }\n        TestUtils.assertChiSquareAccept(expected, counts, 0.001);\n    }\n",
        "begin_line": 289,
        "end_line": 301,
        "comment": "\n     * Test sampling\n     ",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 36)",
            "(line 292,col 9)-(line 292,col 49)",
            "(line 293,col 9)-(line 293,col 58)",
            "(line 294,col 9)-(line 294,col 78)",
            "(line 295,col 9)-(line 295,col 49)",
            "(line 296,col 9)-(line 296,col 36)",
            "(line 297,col 9)-(line 299,col 9)",
            "(line 300,col 9)-(line 300,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testDensityIntegrals()",
        "snippet": "    @Test\n    public void testDensityIntegrals() {\n        final double tol = 1.0e-9;\n        final BaseAbstractUnivariateIntegrator integrator =\n            new IterativeLegendreGaussIntegrator(5, 1.0e-12, 1.0e-10);\n        final UnivariateFunction d = new UnivariateFunction() {\n            public double value(double x) {\n                return distribution.density(x);\n            }\n        };\n        final ArrayList<Double> integrationTestPoints = new ArrayList<Double>();\n        for (int i = 0; i < cumulativeTestPoints.length; i++) {\n            if (Double.isNaN(cumulativeTestValues[i]) ||\n                    cumulativeTestValues[i] < 1.0e-5 ||\n                    cumulativeTestValues[i] > 1 - 1.0e-5) {\n                continue; // exclude integrals outside domain.\n            }\n            integrationTestPoints.add(cumulativeTestPoints[i]);\n        }\n        Collections.sort(integrationTestPoints);\n        for (int i = 1; i < integrationTestPoints.size(); i++) {\n            Assert.assertEquals(\n                    distribution.cumulativeProbability(  // FIXME @4.0 when rename happens\n                            integrationTestPoints.get(0), integrationTestPoints.get(i)),\n                            integrator.integrate(\n                                    1000000, // Triangle integrals are very slow to converge\n                                    d, integrationTestPoints.get(0),\n                                    integrationTestPoints.get(i)), tol);\n        }\n    }\n",
        "begin_line": 311,
        "end_line": 340,
        "comment": "\n     * Verify that density integrals match the distribution.\n     * The (filtered, sorted) cumulativeTestPoints array is used to source\n     * integration limits. The integral of the density (estimated using a\n     * Legendre-Gauss integrator) is compared with the cdf over the same\n     * interval. Test points outside of the domain of the density function\n     * are discarded.\n     ",
        "child_ranges": [
            "(line 313,col 9)-(line 313,col 34)",
            "(line 314,col 9)-(line 315,col 70)",
            "(line 316,col 9)-(line 320,col 10)",
            "(line 321,col 9)-(line 321,col 80)",
            "(line 322,col 9)-(line 329,col 9)",
            "(line 330,col 9)-(line 330,col 48)",
            "(line 331,col 9)-(line 339,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.Anonymous-dd3213d2-5e3b-40bf-a6d3-4a9fa36ae6e7.value(double)",
        "snippet": "            public double value(double x) {\n                return distribution.density(x);\n            }\n",
        "begin_line": 317,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 318,col 17)-(line 318,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportLowerBoundInclusive()",
        "snippet": "    @Test\n    public void testIsSupportLowerBoundInclusive() {\n        final double lowerBound = distribution.getSupportLowerBound();\n        double result = Double.NaN;\n        result = distribution.density(lowerBound);\n        Assert.assertEquals(\n                !Double.isInfinite(lowerBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportLowerBoundInclusive());\n         \n    }\n",
        "begin_line": 346,
        "end_line": 356,
        "comment": "\n     * Verify that isSupportLowerBoundInclusvie returns true iff the lower bound\n     * is finite and density is non-NaN, non-infinite there.\n     ",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 70)",
            "(line 349,col 9)-(line 349,col 35)",
            "(line 350,col 9)-(line 350,col 50)",
            "(line 351,col 9)-(line 354,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.testIsSupportUpperBoundInclusive()",
        "snippet": "    @Test\n    public void testIsSupportUpperBoundInclusive() {\n        final double upperBound = distribution.getSupportUpperBound();\n        double result = Double.NaN;\n        result = distribution.density(upperBound);\n        Assert.assertEquals(\n                !Double.isInfinite(upperBound) && !Double.isNaN(result) &&\n                !Double.isInfinite(result),\n                distribution.isSupportUpperBoundInclusive());\n         \n    }\n",
        "begin_line": 362,
        "end_line": 372,
        "comment": "\n     * Verify that isSupportUpperBoundInclusvie returns true iff the upper bound\n     * is finite and density is non-NaN, non-infinite there.\n     ",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 70)",
            "(line 365,col 9)-(line 365,col 35)",
            "(line 366,col 9)-(line 366,col 50)",
            "(line 367,col 9)-(line 370,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getCumulativeTestPoints()",
        "snippet": "    protected double[] getCumulativeTestPoints() {\n        return cumulativeTestPoints;\n    }\n",
        "begin_line": 378,
        "end_line": 380,
        "comment": "\n     * @return Returns the cumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 379,col 9)-(line 379,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setCumulativeTestPoints(double[])",
        "snippet": "    protected void setCumulativeTestPoints(double[] cumulativeTestPoints) {\n        this.cumulativeTestPoints = cumulativeTestPoints;\n    }\n",
        "begin_line": 385,
        "end_line": 387,
        "comment": "\n     * @param cumulativeTestPoints The cumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 386,col 9)-(line 386,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getCumulativeTestValues()",
        "snippet": "    protected double[] getCumulativeTestValues() {\n        return cumulativeTestValues;\n    }\n",
        "begin_line": 392,
        "end_line": 394,
        "comment": "\n     * @return Returns the cumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setCumulativeTestValues(double[])",
        "snippet": "    protected void setCumulativeTestValues(double[] cumulativeTestValues) {\n        this.cumulativeTestValues = cumulativeTestValues;\n    }\n",
        "begin_line": 399,
        "end_line": 401,
        "comment": "\n     * @param cumulativeTestValues The cumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 400,col 9)-(line 400,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getDensityTestValues()",
        "snippet": "    protected double[] getDensityTestValues() {\n        return densityTestValues;\n    }\n",
        "begin_line": 403,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 404,col 9)-(line 404,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setDensityTestValues(double[])",
        "snippet": "    protected void setDensityTestValues(double[] densityTestValues) {\n        this.densityTestValues = densityTestValues;\n    }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getDistribution()",
        "snippet": "    protected RealDistribution getDistribution() {\n        return distribution;\n    }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": "\n     * @return Returns the distribution.\n     ",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 28)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setDistribution(org.apache.commons.math3.distribution.RealDistribution)",
        "snippet": "    protected void setDistribution(RealDistribution distribution) {\n        this.distribution = distribution;\n    }\n",
        "begin_line": 421,
        "end_line": 423,
        "comment": "\n     * @param distribution The distribution to set.\n     ",
        "child_ranges": [
            "(line 422,col 9)-(line 422,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getInverseCumulativeTestPoints()",
        "snippet": "    protected double[] getInverseCumulativeTestPoints() {\n        return inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 428,
        "end_line": 430,
        "comment": "\n     * @return Returns the inverseCumulativeTestPoints.\n     ",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setInverseCumulativeTestPoints(double[])",
        "snippet": "    protected void setInverseCumulativeTestPoints(double[] inverseCumulativeTestPoints) {\n        this.inverseCumulativeTestPoints = inverseCumulativeTestPoints;\n    }\n",
        "begin_line": 435,
        "end_line": 437,
        "comment": "\n     * @param inverseCumulativeTestPoints The inverseCumulativeTestPoints to set.\n     ",
        "child_ranges": [
            "(line 436,col 9)-(line 436,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getInverseCumulativeTestValues()",
        "snippet": "    protected double[] getInverseCumulativeTestValues() {\n        return inverseCumulativeTestValues;\n    }\n",
        "begin_line": 442,
        "end_line": 444,
        "comment": "\n     * @return Returns the inverseCumulativeTestValues.\n     ",
        "child_ranges": [
            "(line 443,col 9)-(line 443,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setInverseCumulativeTestValues(double[])",
        "snippet": "    protected void setInverseCumulativeTestValues(double[] inverseCumulativeTestValues) {\n        this.inverseCumulativeTestValues = inverseCumulativeTestValues;\n    }\n",
        "begin_line": 449,
        "end_line": 451,
        "comment": "\n     * @param inverseCumulativeTestValues The inverseCumulativeTestValues to set.\n     ",
        "child_ranges": [
            "(line 450,col 9)-(line 450,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.getTolerance()",
        "snippet": "    protected double getTolerance() {\n        return tolerance;\n    }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "\n     * @return Returns the tolerance.\n     ",
        "child_ranges": [
            "(line 457,col 9)-(line 457,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.RealDistributionAbstractTest",
        "child_classes": [
            "org.apache.commons.math3.distribution.FDistributionTest",
            "org.apache.commons.math3.distribution.UniformRealDistributionTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/RealDistributionAbstractTest.java",
        "signature": "org.apache.commons.math3.distribution.RealDistributionAbstractTest.setTolerance(double)",
        "snippet": "    protected void setTolerance(double tolerance) {\n        this.tolerance = tolerance;\n    }\n",
        "begin_line": 463,
        "end_line": 465,
        "comment": "\n     * @param tolerance The tolerance to set.\n     ",
        "child_ranges": [
            "(line 464,col 9)-(line 464,col 35)"
        ]
    }
]