[
    {
        "name": "EqualsBuilder.append#367",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.append(java.lang.Object, java.lang.Object)",
        "snippet": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n                // The simple case, not an array, just test the element\n                isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n            this.setEquals(false);\n        }\n        // 'Switch' on type of array, to dispatch to the correct handler\n        // This handles multi dimensional arrays of the same depth\n        else if (lhs instanceof long[]) {\n            append((long[]) lhs, (long[]) rhs);\n        } else if (lhs instanceof int[]) {\n            append((int[]) lhs, (int[]) rhs);\n        } else if (lhs instanceof short[]) {\n            append((short[]) lhs, (short[]) rhs);\n        } else if (lhs instanceof char[]) {\n            append((char[]) lhs, (char[]) rhs);\n        } else if (lhs instanceof byte[]) {\n            append((byte[]) lhs, (byte[]) rhs);\n        } else if (lhs instanceof double[]) {\n            append((double[]) lhs, (double[]) rhs);\n        } else if (lhs instanceof float[]) {\n            append((float[]) lhs, (float[]) rhs);\n        } else if (lhs instanceof boolean[]) {\n            append((boolean[]) lhs, (boolean[]) rhs);\n        } else {\n            // Not an array of primitives\n            append((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }\n",
        "begin_line": 367,
        "end_line": 409,
        "comment": "\n     * <p>Test if two <code>Object</code>s are equal using their\n     * <code>equals</code> method.</p>\n     *\n     * @param lhs  the left hand object\n     * @param rhs  the right hand object\n     * @return EqualsBuilder - used to chain calls.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "EqualsBuilder.isEquals#830",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.isEquals()",
        "snippet": "    public boolean isEquals() {\n        return this.isEquals;\n    }\n",
        "begin_line": 830,
        "end_line": 832,
        "comment": "\n     * <p>Returns <code>true</code> if the fields that have been checked\n     * are all equal.</p>\n     *\n     * @return boolean\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "EqualsBuilder.EqualsBuilder#100",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
        "class_name": "org.apache.commons.lang.builder.EqualsBuilder",
        "signature": "org.apache.commons.lang.builder.EqualsBuilder.EqualsBuilder()",
        "snippet": "    public EqualsBuilder() {\n        // do nothing for now.\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * <p>Constructor for EqualsBuilder.</p>\n     *\n     * <p>Starts off assuming that equals is <code>true</code>.</p>\n     * @see Object#equals(Object)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.126
        },
        "num_failing_tests": 1
    }
]