[
    {
        "name": "DiscreteDistribution.DiscreteDistribution#67",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.DiscreteDistribution",
        "signature": "org.apache.commons.math3.distribution.DiscreteDistribution.DiscreteDistribution(java.util.List<org.apache.commons.math3.util.Pair<T, java.lang.Double>>)",
        "snippet": "    public DiscreteDistribution(final List<Pair<T, Double>> samples)\n        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\n        this(new Well19937c(), samples);\n    }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "\n     * Create a discrete distribution using the given probability mass function\n     * definition.\n     *\n     * @param samples definition of probability mass function in the format of\n     * list of pairs.\n     * @throws NotPositiveException if probability of at least one value is\n     * negative.\n     * @throws MathArithmeticException if the probabilities sum to zero.\n     * @throws MathIllegalArgumentException if probability of at least one value\n     * is infinite.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiscreteDistribution.sample#181",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.DiscreteDistribution",
        "signature": "org.apache.commons.math3.distribution.DiscreteDistribution.sample(int)",
        "snippet": "    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n        if (sampleSize <= 0) {\n            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                    sampleSize);\n        }\n\n        final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);\n\n        for (int i = 0; i < sampleSize; i++) {\n            out[i] = sample();\n        }\n\n        return out;\n\n    }\n",
        "begin_line": 181,
        "end_line": 195,
        "comment": "\n     * Generate a random sample from the distribution.\n     *\n     * @param sampleSize the number of random values to generate.\n     * @return an array representing the random sample.\n     * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n     * positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Well19937c.next#83",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "signature": "org.apache.commons.math3.random.Well19937c.next(int)",
        "snippet": "    @Override\n    protected int next(final int bits) {\n\n        final int indexRm1 = iRm1[index];\n        final int indexRm2 = iRm2[index];\n\n        final int v0       = v[index];\n        final int vM1      = v[i1[index]];\n        final int vM2      = v[i2[index]];\n        final int vM3      = v[i3[index]];\n\n        final int z0 = (0x80000000 & v[indexRm1]) ^ (0x7FFFFFFF & v[indexRm2]);\n        final int z1 = (v0 ^ (v0 << 25))  ^ (vM1 ^ (vM1 >>> 27));\n        final int z2 = (vM2 >>> 9) ^ (vM3 ^ (vM3 >>> 1));\n        final int z3 = z1      ^ z2;\n        int z4 = z0 ^ (z1 ^ (z1 << 9)) ^ (z2 ^ (z2 << 21)) ^ (z3 ^ (z3 >>> 21));\n\n        v[index]     = z3;\n        v[indexRm1]  = z4;\n        v[indexRm2] &= 0x80000000;\n        index        = indexRm1;\n\n\n        // add Matsumoto-Kurita tempering\n        // to get a maximally-equidistributed generator\n        z4 = z4 ^ ((z4 <<  7) & 0xe46e1700);\n        z4 = z4 ^ ((z4 << 15) & 0x9b868000);\n\n        return z4 >>> (32 - bits);\n\n    }\n",
        "begin_line": 83,
        "end_line": 113,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.random.AbstractWell": " {@inheritDoc} ",
            "org.apache.commons.math3.random.BitsStreamGenerator": " Generate next pseudorandom number.\n     * <p>This method is the core generation algorithm. It is used by all the\n     * public generation methods for the various primitive types {@link\n     * #nextBoolean()}, {@link #nextBytes(byte[])}, {@link #nextDouble()},\n     * {@link #nextFloat()}, {@link #nextGaussian()}, {@link #nextInt()},\n     * {@link #next(int)} and {@link #nextLong()}.</p>\n     * @param bits number of random bits to produce\n     * @return random bits generated\n     ",
            "java.io.Serializable": null
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.nextDouble#89",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.nextDouble()",
        "snippet": "    public double nextDouble() {\n        final long high = ((long) next(26)) << 26;\n        final int  low  = next(26);\n        return (high | low) * 0x1.0p-52d;\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "java.io.Serializable": null,
            "org.apache.commons.math3.random.RandomGenerator": "\n     * Returns the next pseudorandom, uniformly distributed\n     * <code>double</code> value between <code>0.0</code> and\n     * <code>1.0</code> from this random number generator's sequence.\n     *\n     * @return  the next pseudorandom, uniformly distributed\n     *  <code>double</code> value between <code>0.0</code> and\n     *  <code>1.0</code> from this random number generator's sequence\n     "
        },
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiscreteDistribution.sample#156",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.DiscreteDistribution",
        "signature": "org.apache.commons.math3.distribution.DiscreteDistribution.sample()",
        "snippet": "    public T sample() {\n        final double randomValue = random.nextDouble();\n        double sum = 0;\n\n        for (int i = 0; i < probabilities.length; i++) {\n            sum += probabilities[i];\n            if (randomValue < sum) {\n                return singletons.get(i);\n            }\n        }\n\n        /* This should never happen, but it ensures we will return a correct\n         * object in case the loop above has some floating point inequality\n         * problem on the final iteration. */\n        return singletons.get(singletons.size() - 1);\n    }\n",
        "begin_line": 156,
        "end_line": 171,
        "comment": "\n     * Generate a random value sampled from this distribution.\n     *\n     * @return a random value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiscreteRealDistribution.DiscreteRealDistribution#64",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistribution",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution.DiscreteRealDistribution(double[], double[])",
        "snippet": "    public DiscreteRealDistribution(final double[] singletons, final double[] probabilities)\n        throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\n        this(new Well19937c(), singletons, probabilities);\n    }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\n     * Create a discrete distribution using the given probability mass function\n     * definition.\n     *\n     * @param singletons array of random variable values.\n     * @param probabilities array of probabilities.\n     * @throws DimensionMismatchException if\n     * {@code singletons.length != probabilities.length}\n     * @throws NotPositiveException if probability of at least one value is\n     * negative.\n     * @throws MathArithmeticException if the probabilities sum to zero.\n     * @throws MathIllegalArgumentException if probability of at least one value\n     * is infinite.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiscreteRealDistribution.DiscreteRealDistribution#84",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistribution",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution.DiscreteRealDistribution(org.apache.commons.math3.random.RandomGenerator, double[], double[])",
        "snippet": "    public DiscreteRealDistribution(final RandomGenerator rng,\n                                    final double[] singletons, final double[] probabilities)\n        throws DimensionMismatchException, NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\n        super(rng);\n        if (singletons.length != probabilities.length) {\n            throw new DimensionMismatchException(probabilities.length, singletons.length);\n        }\n\n        List<Pair<Double, Double>> samples = new ArrayList<Pair<Double, Double>>(singletons.length);\n\n        for (int i = 0; i < singletons.length; i++) {\n            samples.add(new Pair<Double, Double>(singletons[i], probabilities[i]));\n        }\n\n        innerDistribution = new DiscreteDistribution<Double>(rng, samples);\n    }\n",
        "begin_line": 84,
        "end_line": 99,
        "comment": "\n     * Create a discrete distribution using the given random number generator\n     * and probability mass function definition.\n     *\n     * @param rng random number generator.\n     * @param singletons array of random variable values.\n     * @param probabilities array of probabilities.\n     * @throws DimensionMismatchException if\n     * {@code singletons.length != probabilities.length}\n     * @throws NotPositiveException if probability of at least one value is\n     * negative.\n     * @throws MathArithmeticException if the probabilities sum to zero.\n     * @throws MathIllegalArgumentException if probability of at least one value\n     * is infinite.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealDistribution.AbstractRealDistribution#76",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.AbstractRealDistribution(org.apache.commons.math3.random.RandomGenerator)",
        "snippet": "    protected AbstractRealDistribution(RandomGenerator rng) {\n        random = rng;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * @param rng Random number generator.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Pair.Pair#45",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Pair.java",
        "class_name": "org.apache.commons.math3.util.Pair",
        "signature": "org.apache.commons.math3.util.Pair.Pair(K, V)",
        "snippet": "    public Pair(K k, V v) {\n        key = k;\n        value = v;\n    }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n     * Create an entry representing a mapping from the specified key to the\n     * specified value.\n     *\n     * @param k Key (first element of the pair).\n     * @param v Value (second element of the pair).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Pair.getKey#64",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Pair.java",
        "class_name": "org.apache.commons.math3.util.Pair",
        "signature": "org.apache.commons.math3.util.Pair.getKey()",
        "snippet": "    public K getKey() {\n        return key;\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Get the key.\n     *\n     * @return the key (first element of the pair).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Pair.getValue#73",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Pair.java",
        "class_name": "org.apache.commons.math3.util.Pair",
        "signature": "org.apache.commons.math3.util.Pair.getValue()",
        "snippet": "    public V getValue() {\n        return value;\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Get the value.\n     *\n     * @return the value (second element of the pair).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathArrays.normalizeArray#1247",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
        "class_name": "org.apache.commons.math3.util.MathArrays",
        "signature": "org.apache.commons.math3.util.MathArrays.normalizeArray(double[], double)",
        "snippet": "     public static double[] normalizeArray(double[] values, double normalizedSum)\n         throws MathIllegalArgumentException, MathArithmeticException {\n         if (Double.isInfinite(normalizedSum)) {\n             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_INFINITE);\n         }\n         if (Double.isNaN(normalizedSum)) {\n             throw new MathIllegalArgumentException(LocalizedFormats.NORMALIZE_NAN);\n         }\n         double sum = 0d;\n         final int len = values.length;\n         double[] out = new double[len];\n         for (int i = 0; i < len; i++) {\n             if (Double.isInfinite(values[i])) {\n                 throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT, values[i], i);\n             }\n             if (!Double.isNaN(values[i])) {\n                 sum += values[i];\n             }\n         }\n         if (sum == 0) {\n             throw new MathArithmeticException(LocalizedFormats.ARRAY_SUMS_TO_ZERO);\n         }\n         for (int i = 0; i < len; i++) {\n             if (Double.isNaN(values[i])) {\n                 out[i] = Double.NaN;\n             } else {\n                 out[i] = values[i] * normalizedSum / sum;\n             }\n         }\n         return out;\n     }\n",
        "begin_line": 1247,
        "end_line": 1277,
        "comment": "\n      * Normalizes an array to make it sum to a specified value.\n      * Returns the result of the transformation <pre>\n      *    x |-> x * normalizedSum / sum\n      * </pre>\n      * applied to each non-NaN element x of the input array, where sum is the\n      * sum of the non-NaN entries in the input array.</p>\n      *\n      * <p>Throws IllegalArgumentException if {@code normalizedSum} is infinite\n      * or NaN and ArithmeticException if the input array contains any infinite elements\n      * or sums to 0.</p>\n      *\n      * <p>Ignores (i.e., copies unchanged to the output array) NaNs in the input array.</p>\n      *\n      * @param values Input array to be normalized\n      * @param normalizedSum Target sum for the normalized array\n      * @return the normalized array.\n      * @throws MathArithmeticException if the input array contains infinite\n      * elements or sums to zero.\n      * @throws MathIllegalArgumentException if the target sum is infinite or {@code NaN}.\n      * @since 2.1\n      ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Well19937c.Well19937c#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "signature": "org.apache.commons.math3.random.Well19937c.Well19937c()",
        "snippet": "    public Well19937c() {\n        super(K, M1, M2, M3);\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": " Creates a new random number generator.\n     * <p>The instance is initialized using the current time as the\n     * seed.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "RandomDataImpl.RandomDataImpl#114",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataImpl.java",
        "class_name": "org.apache.commons.math3.random.RandomDataImpl",
        "signature": "org.apache.commons.math3.random.RandomDataImpl.RandomDataImpl()",
        "snippet": "    public RandomDataImpl() {\n        delegate = new RandomDataGenerator();\n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\n     * Construct a RandomDataImpl, using a default random generator as the source\n     * of randomness.\n     *\n     * <p>The default generator is a {@link Well19937c} seeded\n     * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n     * The generator is initialized and seeded on first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "RandomDataGenerator.RandomDataGenerator#131",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.RandomDataGenerator()",
        "snippet": "    public RandomDataGenerator() {\n    }\n",
        "begin_line": 131,
        "end_line": 132,
        "comment": "\n     * Construct a RandomDataGenerator, using a default random generator as the source\n     * of randomness.\n     *\n     * <p>The default generator is a {@link Well19937c} seeded\n     * with {@code System.currentTimeMillis() + System.identityHashCode(this))}.\n     * The generator is initialized and seeded on first use.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.BitsStreamGenerator#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.BitsStreamGenerator()",
        "snippet": "    public BitsStreamGenerator() {\n        nextGaussian = Double.NaN;\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "\n     * Creates a new random number generator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "BitsStreamGenerator.clear#169",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.clear()",
        "snippet": "    public void clear() {\n        nextGaussian = Double.NaN;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Clears the cache used by the default implementation of\n     * {@link #nextGaussian}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.AbstractWell#71",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int)",
        "snippet": "    protected AbstractWell(final int k, final int m1, final int m2, final int m3) {\n        this(k, m1, m2, m3, null);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": " Creates a new random number generator.\n     * <p>The instance is initialized using the current time plus the\n     * system identity hash code of this instance as the seed.</p>\n     * @param k number of bits in the pool (not necessarily a multiple of 32)\n     * @param m1 first parameter of the algorithm\n     * @param m2 second parameter of the algorithm\n     * @param m3 third parameter of the algorithm\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.AbstractWell#94",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.AbstractWell(int, int, int, int, int[])",
        "snippet": "    protected AbstractWell(final int k, final int m1, final int m2, final int m3, final int[] seed) {\n\n        // the bits pool contains k bits, k = r w - p where r is the number\n        // of w bits blocks, w is the block size (always 32 in the original paper)\n        // and p is the number of unused bits in the last block\n        final int w = 32;\n        final int r = (k + w - 1) / w;\n        this.v      = new int[r];\n        this.index  = 0;\n\n        // precompute indirection index tables. These tables are used for optimizing access\n        // they allow saving computations like \"(j + r - 2) % r\" with costly modulo operations\n        iRm1 = new int[r];\n        iRm2 = new int[r];\n        i1   = new int[r];\n        i2   = new int[r];\n        i3   = new int[r];\n        for (int j = 0; j < r; ++j) {\n            iRm1[j] = (j + r - 1) % r;\n            iRm2[j] = (j + r - 2) % r;\n            i1[j]   = (j + m1)    % r;\n            i2[j]   = (j + m2)    % r;\n            i3[j]   = (j + m3)    % r;\n        }\n\n        // initialize the pool content\n        setSeed(seed);\n\n    }\n",
        "begin_line": 94,
        "end_line": 122,
        "comment": " Creates a new random number generator using an int array seed.\n     * @param k number of bits in the pool (not necessarily a multiple of 32)\n     * @param m1 first parameter of the algorithm\n     * @param m2 second parameter of the algorithm\n     * @param m3 third parameter of the algorithm\n     * @param seed the initial seed (32 bits integers array), if null\n     * the seed of the generator will be related to the current time\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.setSeed#152",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.setSeed(int[])",
        "snippet": "    @Override\n    public void setSeed(final int[] seed) {\n        if (seed == null) {\n            setSeed(System.currentTimeMillis() + System.identityHashCode(this));\n            return;\n        }\n\n        System.arraycopy(seed, 0, v, 0, Math.min(seed.length, v.length));\n\n        if (seed.length < v.length) {\n            for (int i = seed.length; i < v.length; ++i) {\n                final long l = v[i - seed.length];\n                v[i] = (int) ((1812433253l * (l ^ (l >> 30)) + i) & 0xffffffffL);\n            }\n        }\n\n        index = 0;\n        clear();  // Clear normal deviate cache\n    }\n",
        "begin_line": 152,
        "end_line": 170,
        "comment": " Reinitialize the generator as if just built with the given int array seed.\n     * <p>The state of the generator is exactly the same as a new\n     * generator built with the same seed.</p>\n     * @param seed the initial seed (32 bits integers array). If null\n     * the seed of the generator will be the system time plus the system identity\n     * hash code of the instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractWell.setSeed#177",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "signature": "org.apache.commons.math3.random.AbstractWell.setSeed(long)",
        "snippet": "    @Override\n    public void setSeed(final long seed) {\n        setSeed(new int[] { (int) (seed >>> 32), (int) (seed & 0xffffffffl) });\n    }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": " Reinitialize the generator as if just built with the given long seed.\n     * <p>The state of the generator is exactly the same as a new\n     * generator built with the same seed.</p>\n     * @param seed the initial seed (64 bits integer)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiscreteDistribution.DiscreteDistribution#85",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
        "class_name": "org.apache.commons.math3.distribution.DiscreteDistribution",
        "signature": "org.apache.commons.math3.distribution.DiscreteDistribution.DiscreteDistribution(org.apache.commons.math3.random.RandomGenerator, java.util.List<org.apache.commons.math3.util.Pair<T, java.lang.Double>>)",
        "snippet": "    public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples)\n        throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {\n        random = rng;\n\n        singletons = new ArrayList<T>(samples.size());\n        final double[] probs = new double[samples.size()];\n\n        for (int i = 0; i < samples.size(); i++) {\n            final Pair<T, Double> sample = samples.get(i);\n            singletons.add(sample.getKey());\n            if (sample.getValue() < 0) {\n                throw new NotPositiveException(sample.getValue());\n            }\n            probs[i] = sample.getValue();\n        }\n\n        probabilities = MathArrays.normalizeArray(probs, 1.0);\n    }\n",
        "begin_line": 85,
        "end_line": 102,
        "comment": "\n     * Create a discrete distribution using the given random number generator\n     * and probability mass function definition.\n     *\n     * @param rng random number generator.\n     * @param samples definition of probability mass function in the format of\n     * list of pairs.\n     * @throws NotPositiveException if probability of at least one value is\n     * negative.\n     * @throws MathArithmeticException if the probabilities sum to zero.\n     * @throws MathIllegalArgumentException if probability of at least one value\n     * is infinite.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    }
]