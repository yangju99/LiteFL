[
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.DiscreteRealDistributionTest()",
        "snippet": "    public DiscreteRealDistributionTest() {\n        // Non-sorted singleton array with duplicates should be allowed.\n        // Values with zero-probability do not extend the support.\n        testDistribution = new DiscreteRealDistribution(\n                new double[]{3.0, -1.0, 3.0, 7.0, -2.0, 8.0},\n                new double[]{0.2, 0.2, 0.3, 0.3, 0.0, 0.0});\n    }\n",
        "begin_line": 46,
        "end_line": 52,
        "comment": "\n     * Creates the default distribution object uded for testing.\n     ",
        "child_ranges": [
            "(line 49,col 9)-(line 51,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testExceptions()",
        "snippet": "    @Test\n    public void testExceptions() {\n        DiscreteRealDistribution invalid = null;\n        try {\n            invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0});\n            Assert.fail(\"Expected DimensionMismatchException\");\n        } catch (DimensionMismatchException e) {\n        }\n        try{\n        invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, -1.0});\n            Assert.fail(\"Expected NotPositiveException\");\n        } catch (NotPositiveException e) {\n        }\n        try {\n            invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, 0.0});\n            Assert.fail(\"Expected MathArithmeticException\");\n        } catch (MathArithmeticException e) {\n        }\n        try {\n            invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.NaN});\n            Assert.fail(\"Expected MathArithmeticException\");\n        } catch (MathArithmeticException e) {\n        }\n        try {\n            invalid = new DiscreteRealDistribution(new double[]{1.0, 2.0}, new double[]{0.0, Double.POSITIVE_INFINITY});\n            Assert.fail(\"Expected MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException e) {\n        }\n        Assert.assertNull(\"Expected non-initialized DiscreteRealDistribution\", invalid);\n    }\n",
        "begin_line": 58,
        "end_line": 87,
        "comment": "\n     * Tests if the {@link DiscreteRealDistribution} constructor throws\n     * exceptions for ivalid data.\n     ",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 48)",
            "(line 61,col 9)-(line 65,col 9)",
            "(line 66,col 9)-(line 70,col 9)",
            "(line 71,col 9)-(line 75,col 9)",
            "(line 76,col 9)-(line 80,col 9)",
            "(line 81,col 9)-(line 85,col 9)",
            "(line 86,col 9)-(line 86,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testProbability()",
        "snippet": "    @Test\n    public void testProbability() {\n        double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};\n        double[] results = new double[]{0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0};\n        for (int p = 0; p < points.length; p++) {\n            double density = testDistribution.probability(points[p]);\n            Assert.assertEquals(results[p], density, 0.0);\n        }\n    }\n",
        "begin_line": 92,
        "end_line": 100,
        "comment": "\n     * Tests if the distribution returns proper probability values.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 96)",
            "(line 95,col 9)-(line 95,col 79)",
            "(line 96,col 9)-(line 99,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testDensity()",
        "snippet": "    @Test\n    public void testDensity() {\n        double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};\n        double[] results = new double[]{0, 0.2, 0, 0, 0, 0.5, 0, 0, 0, 0.3, 0};\n        for (int p = 0; p < points.length; p++) {\n            double density = testDistribution.density(points[p]);\n            Assert.assertEquals(results[p], density, 0.0);\n        }\n    }\n",
        "begin_line": 105,
        "end_line": 113,
        "comment": "\n     * Tests if the distribution returns proper density values.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 96)",
            "(line 108,col 9)-(line 108,col 79)",
            "(line 109,col 9)-(line 112,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testCumulativeProbability()",
        "snippet": "    @Test\n    public void testCumulativeProbability() {\n        double[] points = new double[]{-2.0, -1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};\n        double[] results = new double[]{0, 0.2, 0.2, 0.2, 0.2, 0.7, 0.7, 0.7, 0.7, 1.0, 1.0};\n        for (int p = 0; p < points.length; p++) {\n            double probability = testDistribution.cumulativeProbability(points[p]);\n            Assert.assertEquals(results[p], probability, 1e-10);\n        }\n    }\n",
        "begin_line": 118,
        "end_line": 126,
        "comment": "\n     * Tests if the distribution returns proper cumulative probability values.\n     ",
        "child_ranges": [
            "(line 120,col 9)-(line 120,col 96)",
            "(line 121,col 9)-(line 121,col 93)",
            "(line 122,col 9)-(line 125,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testGetNumericalMean()",
        "snippet": "    @Test\n    public void testGetNumericalMean() {\n        Assert.assertEquals(3.4, testDistribution.getNumericalMean(), 1e-10);\n    }\n",
        "begin_line": 131,
        "end_line": 134,
        "comment": "\n     * Tests if the distribution returns proper mean value.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testGetNumericalVariance()",
        "snippet": "    @Test\n    public void testGetNumericalVariance() {\n        Assert.assertEquals(7.84, testDistribution.getNumericalVariance(), 1e-10);\n    }\n",
        "begin_line": 139,
        "end_line": 142,
        "comment": "\n     * Tests if the distribution returns proper variance.\n     ",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testGetSupportLowerBound()",
        "snippet": "    @Test\n    public void testGetSupportLowerBound() {\n        Assert.assertEquals(-1, testDistribution.getSupportLowerBound(), 0);\n    }\n",
        "begin_line": 147,
        "end_line": 150,
        "comment": "\n     * Tests if the distribution returns proper lower bound.\n     ",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testGetSupportUpperBound()",
        "snippet": "    @Test\n    public void testGetSupportUpperBound() {\n        Assert.assertEquals(7, testDistribution.getSupportUpperBound(), 0);\n    }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "\n     * Tests if the distribution returns proper upper bound.\n     ",
        "child_ranges": [
            "(line 157,col 9)-(line 157,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIsSupportLowerBoundInclusive()",
        "snippet": "    @Test\n    public void testIsSupportLowerBoundInclusive() {\n        Assert.assertTrue(testDistribution.isSupportLowerBoundInclusive());\n    }\n",
        "begin_line": 164,
        "end_line": 167,
        "comment": "\n     * Tests if the distribution returns properly that the support includes the\n     * lower bound.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIsSupportUpperBoundInclusive()",
        "snippet": "    @Test\n    public void testIsSupportUpperBoundInclusive() {\n        Assert.assertTrue(testDistribution.isSupportUpperBoundInclusive());\n    }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": "\n     * Tests if the distribution returns properly that the support includes the\n     * upper bound.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIsSupportConnected()",
        "snippet": "    @Test\n    public void testIsSupportConnected() {\n        Assert.assertTrue(testDistribution.isSupportConnected());\n    }\n",
        "begin_line": 181,
        "end_line": 184,
        "comment": "\n     * Tests if the distribution returns properly that the support is connected.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testSample()",
        "snippet": "    @Test\n    public void testSample() {\n        final int n = 1000000;\n        testDistribution.reseedRandomGenerator(-334759360); // fixed seed\n        final double[] samples = testDistribution.sample(n);\n        Assert.assertEquals(n, samples.length);\n        double sum = 0;\n        double sumOfSquares = 0;\n        for (int i = 0; i < samples.length; i++) {\n            sum += samples[i];\n            sumOfSquares += samples[i] * samples[i];\n        }\n        Assert.assertEquals(testDistribution.getNumericalMean(),\n                sum / n, 1e-2);\n        Assert.assertEquals(testDistribution.getNumericalVariance(),\n                sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2);\n    }\n",
        "begin_line": 189,
        "end_line": 205,
        "comment": "\n     * Tests sampling.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 30)",
            "(line 192,col 9)-(line 192,col 59)",
            "(line 193,col 9)-(line 193,col 60)",
            "(line 194,col 9)-(line 194,col 47)",
            "(line 195,col 9)-(line 195,col 23)",
            "(line 196,col 9)-(line 196,col 32)",
            "(line 197,col 9)-(line 200,col 9)",
            "(line 201,col 9)-(line 202,col 31)",
            "(line 203,col 9)-(line 204,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistributionTest.testIssue942()",
        "snippet": "    @Test\n    public void testIssue942() {\n        List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();\n        list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));\n        list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));\n        Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);\n    }\n",
        "begin_line": 207,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 79)",
            "(line 210,col 9)-(line 210,col 75)",
            "(line 211,col 9)-(line 211,col 75)",
            "(line 212,col 9)-(line 212,col 88)"
        ]
    }
]