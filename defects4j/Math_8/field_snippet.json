[
    {
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "signature": "org.apache.commons.math3.random.Well19937c.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7203498180754925124L;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "signature": "org.apache.commons.math3.random.Well19937c.K",
        "snippet": "    private static final int K = 19937;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Number of bits in the pool. "
    },
    {
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "signature": "org.apache.commons.math3.random.Well19937c.M1",
        "snippet": "    private static final int M1 = 70;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " First parameter of the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "signature": "org.apache.commons.math3.random.Well19937c.M2",
        "snippet": "    private static final int M2 = 179;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Second parameter of the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math3.random.Well19937c",
        "src_path": "src/main/java/org/apache/commons/math3/random/Well19937c.java",
        "signature": "org.apache.commons.math3.random.Well19937c.M3",
        "snippet": "    private static final int M3 = 449;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Third parameter of the algorithm. "
    },
    {
        "class_name": "org.apache.commons.math3.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math3.random.RandomDataImpl.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -626730818244969716L;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math3.random.RandomDataImpl",
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataImpl.java",
        "signature": "org.apache.commons.math3.random.RandomDataImpl.delegate",
        "snippet": "    private final RandomDataGenerator delegate;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " RandomDataGenerator delegate "
    },
    {
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 20130104L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math3.random.BitsStreamGenerator",
        "src_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
        "signature": "org.apache.commons.math3.random.BitsStreamGenerator.nextGaussian",
        "snippet": "    private double nextGaussian;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Next gaussian. "
    },
    {
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -626730818244969716L;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.rand",
        "snippet": "    private RandomGenerator rand = null;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " underlying random number generator "
    },
    {
        "class_name": "org.apache.commons.math3.random.RandomDataGenerator",
        "src_path": "src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java",
        "signature": "org.apache.commons.math3.random.RandomDataGenerator.secRand",
        "snippet": "    private SecureRandom secRand = null;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " underlying secure random number generator "
    },
    {
        "class_name": "org.apache.commons.math3.util.MathArrays",
        "src_path": "src/main/java/org/apache/commons/math3/util/MathArrays.java",
        "signature": "org.apache.commons.math3.util.MathArrays.SPLIT_FACTOR",
        "snippet": "    private static final int SPLIT_FACTOR = 0x8000001;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Factor used for splitting double numbers: n = 2^27 + 1 (i.e. {@value}). "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 20130308L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Serializable UID. "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteRealDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteRealDistribution.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteRealDistribution.innerDistribution",
        "snippet": "    protected final DiscreteDistribution<Double> innerDistribution;",
        "begin_line": 48,
        "end_line": 48,
        "comment": "\n     * {@link DiscreteDistribution} instance (using the {@link Double} wrapper)\n     * used to generate samples.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.util.Pair",
        "src_path": "src/main/java/org/apache/commons/math3/util/Pair.java",
        "signature": "org.apache.commons.math3.util.Pair.key",
        "snippet": "    private final K key;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Key. "
    },
    {
        "class_name": "org.apache.commons.math3.util.Pair",
        "src_path": "src/main/java/org/apache/commons/math3/util/Pair.java",
        "signature": "org.apache.commons.math3.util.Pair.value",
        "snippet": "    private final V value;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Value. "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteDistribution.random",
        "snippet": "    protected final RandomGenerator random;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * RNG instance used to generate samples from the distribution.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteDistribution.singletons",
        "snippet": "    private final List<T> singletons;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * List of random variable values.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.DiscreteDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
        "signature": "org.apache.commons.math3.distribution.DiscreteDistribution.probabilities",
        "snippet": "    private final double[] probabilities;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Normalized array of probabilities of respective random variable values.\n     "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.SOLVER_DEFAULT_ABSOLUTE_ACCURACY",
        "snippet": "    public static final double SOLVER_DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Default accuracy. "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -38038050983108802L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.randomData",
        "snippet": "    @Deprecated\n    protected RandomDataImpl randomData = new RandomDataImpl();",
        "begin_line": 50,
        "end_line": 51,
        "comment": "\n      * RandomData instance used to generate samples from the distribution.\n      * @deprecated As of 3.1, to be removed in 4.0. Please use the\n      * {@link #random} instance variable instead.\n      "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.random",
        "snippet": "    protected final RandomGenerator random;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n     * RNG instance used to generate samples from the distribution.\n     * @since 3.1\n     "
    },
    {
        "class_name": "org.apache.commons.math3.distribution.AbstractRealDistribution",
        "src_path": "src/main/java/org/apache/commons/math3/distribution/AbstractRealDistribution.java",
        "signature": "org.apache.commons.math3.distribution.AbstractRealDistribution.solverAbsoluteAccuracy",
        "snippet": "    private double solverAbsoluteAccuracy = SOLVER_DEFAULT_ABSOLUTE_ACCURACY;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Solver absolute accuracy for inverse cumulative computation "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -817701723016583596L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.index",
        "snippet": "    protected int index;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Current index in the bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.v",
        "snippet": "    protected final int[] v;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Bytes pool. "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.iRm1",
        "snippet": "    protected final int[] iRm1;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " Index indirection table giving for each index its predecessor taking table size into account. "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.iRm2",
        "snippet": "    protected final int[] iRm2;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Index indirection table giving for each index its second predecessor taking table size into account. "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.i1",
        "snippet": "    protected final int[] i1;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Index indirection table giving for each index the value index + m1 taking table size into account. "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.i2",
        "snippet": "    protected final int[] i2;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Index indirection table giving for each index the value index + m2 taking table size into account. "
    },
    {
        "class_name": "org.apache.commons.math3.random.AbstractWell",
        "src_path": "src/main/java/org/apache/commons/math3/random/AbstractWell.java",
        "signature": "org.apache.commons.math3.random.AbstractWell.i3",
        "snippet": "    protected final int[] i3;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Index indirection table giving for each index the value index + m3 taking table size into account. "
    }
]