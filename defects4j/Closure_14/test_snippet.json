[
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.CheckMissingReturnTest()",
        "snippet": "  public CheckMissingReturnTest() {\n    enableTypeCheck(CheckLevel.OFF);\n  }\n",
        "begin_line": 27,
        "end_line": 29,
        "comment": "",
        "child_ranges": [
            "(line 28,col 5)-(line 28,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new CombinedCompilerPass(compiler,\n        new CheckMissingReturn(compiler, CheckLevel.ERROR));\n  }\n",
        "begin_line": 31,
        "end_line": 35,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 34,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testMissingReturn()",
        "snippet": "  public void testMissingReturn() {\n    // Requires control flow analysis.\n    testMissing(\"if (a) { return 1; }\");\n\n    // Switch statement.\n    testMissing(\"switch(1) { case 12: return 5; }\");\n\n    // Test try catch finally.\n    testMissing(\"try { foo() } catch (e) { return 5; } finally { }\");\n\n    // Nested scope.\n    testMissing(\"/** @return {number} */ function f() { var x; }; return 1;\");\n    testMissing(\"/** @return {number} */ function f() { return 1; };\");\n  }\n",
        "begin_line": 37,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 39,col 5)-(line 39,col 40)",
            "(line 42,col 5)-(line 42,col 52)",
            "(line 45,col 5)-(line 45,col 69)",
            "(line 48,col 5)-(line 48,col 78)",
            "(line 49,col 5)-(line 49,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testReturnNotMissing()",
        "snippet": "  public void testReturnNotMissing()  {\n    // Empty function body. Ignore this case. The remainder of the functions in\n    // this test have non-empty bodies.\n    testNotMissing(\"\");\n\n    // Simple cases.\n    testSame(\"function f() { var x; }\");\n    testNotMissing(\"return 1;\");\n\n    // Returning void and undefined.\n    testNotMissing(\"void\", \"var x;\");\n    testNotMissing(\"undefined\", \"var x;\");\n\n    // Returning a union that includes void or undefined.\n    testNotMissing(\"number|undefined\", \"var x;\");\n    testNotMissing(\"number|void\", \"var x;\");\n    testNotMissing(\"(number,void)\", \"var x;\");\n    testNotMissing(\"(number,undefined)\", \"var x;\");\n    testNotMissing(\"*\", \"var x;\");\n\n    // Test try catch finally.\n    testNotMissing(\"try { return foo() } catch (e) { } finally { }\");\n\n    // Nested function.\n    testNotMissing(\n        \"/** @return {number} */ function f() { return 1; }; return 1;\");\n\n    // Strange tests that come up when reviewing closure code.\n    testNotMissing(\"try { return 12; } finally { return 62; }\");\n    testNotMissing(\"try { } finally { return 1; }\");\n    testNotMissing(\"switch(1) { default: return 1; }\");\n    testNotMissing(\"switch(g) { case 1: return 1; default: return 2; }\");\n  }\n",
        "begin_line": 52,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 55,col 23)",
            "(line 58,col 5)-(line 58,col 40)",
            "(line 59,col 5)-(line 59,col 32)",
            "(line 62,col 5)-(line 62,col 37)",
            "(line 63,col 5)-(line 63,col 42)",
            "(line 66,col 5)-(line 66,col 49)",
            "(line 67,col 5)-(line 67,col 44)",
            "(line 68,col 5)-(line 68,col 46)",
            "(line 69,col 5)-(line 69,col 51)",
            "(line 70,col 5)-(line 70,col 34)",
            "(line 73,col 5)-(line 73,col 69)",
            "(line 76,col 5)-(line 77,col 73)",
            "(line 80,col 5)-(line 80,col 64)",
            "(line 81,col 5)-(line 81,col 52)",
            "(line 82,col 5)-(line 82,col 55)",
            "(line 83,col 5)-(line 83,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testFinallyStatements()",
        "snippet": "  public void testFinallyStatements() {\n    // The control flow analysis (CFA) treats finally blocks somewhat strangely.\n    // The CFA might indicate that a finally block implicitly returns. However,\n    // if entry into the finally block is normally caused by an explicit return\n    // statement, then a return statement isn't missing:\n    //\n    // try {\n    //   return 1;\n    // } finally {\n    //   // CFA determines implicit return. However, return not missing\n    //   // because of return statement in try block.\n    // }\n    //\n    // Hence extra tests are warranted for various cases involving finally\n    // blocks.\n\n    // Simple finally case.\n    testNotMissing(\"try { return 1; } finally { }\");\n    testNotMissing(\"try { } finally { return 1; }\");\n    testMissing(\"try { } finally { }\");\n\n    // Cycles in the CFG within the finally block were causing problems before.\n    testNotMissing(\"try { return 1; } finally { while (true) { } }\");\n    testMissing(\"try { } finally { while (x) { } }\");\n    testMissing(\"try { } finally { while (x) { if (x) { break; } } }\");\n    testNotMissing(\n        \"try { return 2; } finally { while (x) { if (x) { break; } } }\");\n\n    // Test various cases with nested try statements.\n    testMissing(\"try { } finally { try { } finally { } }\");\n    testNotMissing(\"try { } finally { try { return 1; } finally { } }\");\n    testNotMissing(\"try { return 1; } finally { try { } finally { } }\");\n\n    // Calling a function potentially causes control flow to transfer to finally\n    // block. However, the function will not return in this case as the\n    // exception will unwind the stack. Hence this function isn't missing a\n    // return statement (i.e., the running program will not expect a return\n    // value from the function if an exception is thrown).\n    testNotMissing(\"try { g(); return 1; } finally { }\");\n\n    // Closures within try ... finally affect missing return statement analysis\n    // because of the nested scopes. The following tests check for missing\n    // return statements in the three possible configurations: both scopes\n    // return; enclosed doesn't return; enclosing doesn't return.\n    testNotMissing(\n        \"try {\" +\n        \"   /** @return {number} */ function f() {\" +\n        \"       try { return 1; }\" +\n        \"       finally { }\" +\n        \"   };\" +\n        \"   return 1;\" +\n        \"}\" +\n        \"finally { }\");\n    testMissing(\n        \"try {\" +\n        \"   /** @return {number} */ function f() {\" +\n        \"       try { }\" +\n        \"       finally { }\" +\n        \"   };\" +\n        \"   return 1;\" +\n        \"}\" +\n        \"finally { }\");\n    testMissing(\n        \"try {\" +\n        \"   /** @return {number} */ function f() {\" +\n        \"       try { return 1; }\" +\n        \"       finally { }\" +\n        \"   };\" +\n        \"}\" +\n        \"finally { }\");\n  }\n",
        "begin_line": 86,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 52)",
            "(line 104,col 5)-(line 104,col 52)",
            "(line 105,col 5)-(line 105,col 39)",
            "(line 108,col 5)-(line 108,col 69)",
            "(line 109,col 5)-(line 109,col 53)",
            "(line 110,col 5)-(line 110,col 71)",
            "(line 111,col 5)-(line 112,col 73)",
            "(line 115,col 5)-(line 115,col 59)",
            "(line 116,col 5)-(line 116,col 72)",
            "(line 117,col 5)-(line 117,col 72)",
            "(line 124,col 5)-(line 124,col 57)",
            "(line 130,col 5)-(line 138,col 23)",
            "(line 139,col 5)-(line 147,col 23)",
            "(line 148,col 5)-(line 155,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testKnownConditions()",
        "snippet": "  public void testKnownConditions() {\n    testNotMissing(\"if (true) return 1\");\n    testMissing(\"if (true) {} else {return 1}\");\n\n    testMissing(\"if (false) return 1\");\n    testNotMissing(\"if (false) {} else {return 1}\");\n\n    testNotMissing(\"if (1) return 1\");\n    testMissing(\"if (1) {} else {return 1}\");\n\n    testMissing(\"if (0) return 1\");\n    testNotMissing(\"if (0) {} else {return 1}\");\n\n    testNotMissing(\"if (3) return 1\");\n    testMissing(\"if (3) {} else {return 1}\");\n  }\n",
        "begin_line": 158,
        "end_line": 173,
        "comment": "",
        "child_ranges": [
            "(line 159,col 5)-(line 159,col 41)",
            "(line 160,col 5)-(line 160,col 48)",
            "(line 162,col 5)-(line 162,col 39)",
            "(line 163,col 5)-(line 163,col 52)",
            "(line 165,col 5)-(line 165,col 38)",
            "(line 166,col 5)-(line 166,col 45)",
            "(line 168,col 5)-(line 168,col 35)",
            "(line 169,col 5)-(line 169,col 48)",
            "(line 171,col 5)-(line 171,col 38)",
            "(line 172,col 5)-(line 172,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testKnownWhileLoop()",
        "snippet": "  public void testKnownWhileLoop() {\n    testNotMissing(\"while (1) return 1\");\n    testNotMissing(\"while (1) { if (x) {return 1} else {return 1}}\");\n    testNotMissing(\"while (0) {} return 1\");\n\n    // TODO(user): The current algorithm will not detect this case. It is\n    // still computable in most cases.\n    testNotMissing(\"while (1) {} return 0\");\n    testMissing(\"while (false) return 1\");\n\n    // Not known.\n    testMissing(\"while(x) { return 1 }\");\n  }\n",
        "begin_line": 175,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 176,col 5)-(line 176,col 41)",
            "(line 177,col 5)-(line 177,col 69)",
            "(line 178,col 5)-(line 178,col 44)",
            "(line 182,col 5)-(line 182,col 44)",
            "(line 183,col 5)-(line 183,col 42)",
            "(line 186,col 5)-(line 186,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testMultiConditions()",
        "snippet": "  public void testMultiConditions() {\n    testMissing(\"if (a) { } else { while (1) {return 1} }\");\n    testNotMissing(\"if (a) { return 1} else { while (1) {return 1} }\");\n  }\n",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 60)",
            "(line 191,col 5)-(line 191,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testIssue779()",
        "snippet": "  public void testIssue779() {\n    testNotMissing(\n        \"var a = f(); try { alert(); if (a > 0) return 1; }\" +\n        \"finally { a = 5; } return 2;\");\n  }\n",
        "begin_line": 194,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 197,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.createFunction(java.lang.String, java.lang.String)",
        "snippet": "  private static String createFunction(String returnType, String body) {\n    return \"/** @return {\" + returnType + \"} */ function foo() {\" + body + \"}\";\n  }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testMissing(java.lang.String, java.lang.String)",
        "snippet": "  private void testMissing(String returnType, String body) {\n    String js = createFunction(returnType, body);\n    test(js, js, CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 204,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 49)",
            "(line 206,col 5)-(line 206,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testNotMissing(java.lang.String, java.lang.String)",
        "snippet": "  private void testNotMissing(String returnType, String body) {\n    testSame(createFunction(returnType, body));\n  }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 210,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testNotMissing(java.lang.String)",
        "snippet": "  private void testNotMissing(String body) {\n    testNotMissing(\"number\", body);\n  }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": " Creates function with return type {number} ",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckMissingReturnTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckMissingReturnTest.java",
        "signature": "com.google.javascript.jscomp.CheckMissingReturnTest.testMissing(java.lang.String)",
        "snippet": "  private void testMissing(String body) {\n    testMissing(\"number\", body);\n  }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": " Creates function with return type {number} ",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testCfg(java.lang.String, java.lang.String)",
        "snippet": "  private void testCfg(String input, String expected) {\n    testCfg(input, expected, true);\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "\n   * Given an input in JavaScript, test if the control flow analysis\n   * creates the proper control flow graph by comparing the expected\n   * Dot file output.\n   *\n   * @param input Input JavaScript.\n   * @param expected Expected Graphviz Dot file.\n   ",
        "child_ranges": [
            "(line 48,col 5)-(line 48,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllEdges(\n      ControlFlowGraph<Node> cfg) {\n    List<DiGraphEdge<Node, Branch>> edges = Lists.newArrayList();\n    for (DiGraphNode<Node, Branch> n : cfg.getDirectedGraphNodes()) {\n      for (DiGraphEdge<Node, Branch> e : cfg.getOutEdges(n.getValue())) {\n        edges.add(e);\n      }\n    }\n    return edges;\n  }\n",
        "begin_line": 54,
        "end_line": 63,
        "comment": "\n   * Gets all the edges of the graph.\n   ",
        "child_ranges": [
            "(line 56,col 5)-(line 56,col 65)",
            "(line 57,col 5)-(line 61,col 5)",
            "(line 62,col 5)-(line 62,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllEdges(\n      ControlFlowGraph<Node> cfg, int startToken, int endToken) {\n    List<DiGraphEdge<Node, Branch>> edges = getAllEdges(cfg);\n    Iterator<DiGraphEdge<Node, Branch>> it = edges.iterator();\n    while (it.hasNext()) {\n      DiGraphEdge<Node, Branch> edge = it.next();\n      Node startNode = edge.getSource().getValue();\n      Node endNode = edge.getDestination().getValue();\n      if (startNode == null || endNode == null ||\n          startNode.getType() != startToken || endNode.getType() != endToken) {\n        it.remove();\n      }\n    }\n    return edges;\n  }\n",
        "begin_line": 69,
        "end_line": 83,
        "comment": "\n   * Gets all the control flow edges from some node with the first token to\n   * some node with the second token.\n   ",
        "child_ranges": [
            "(line 71,col 5)-(line 71,col 61)",
            "(line 72,col 5)-(line 72,col 62)",
            "(line 73,col 5)-(line 81,col 5)",
            "(line 82,col 5)-(line 82,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllEdges(\n      ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type) {\n    List<DiGraphEdge<Node, Branch>> edges =\n        getAllEdges(cfg, startToken, endToken);\n    Iterator<DiGraphEdge<Node, Branch>> it = edges.iterator();\n    while (it.hasNext()) {\n      if (type != it.next().getValue()) {\n        it.remove();\n      }\n    }\n    return edges;\n  }\n",
        "begin_line": 89,
        "end_line": 100,
        "comment": "\n   * Gets all the control flow edges of the given type from some node with the\n   * first token to some node with the second token.\n   ",
        "child_ranges": [
            "(line 91,col 5)-(line 92,col 47)",
            "(line 93,col 5)-(line 93,col 62)",
            "(line 94,col 5)-(line 98,col 5)",
            "(line 99,col 5)-(line 99,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.isAncestor(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean isAncestor(Node n, Node maybeDescendent) {\n    for (Node current = n.getFirstChild(); current != null;\n         current = current.getNext()) {\n      if (current == maybeDescendent ||\n          isAncestor(current, maybeDescendent)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 102,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 109,col 5)",
            "(line 111,col 5)-(line 111,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.getAllDownEdges(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static List<DiGraphEdge<Node, Branch>> getAllDownEdges(\n      ControlFlowGraph<Node> cfg, int startToken, int endToken, Branch type) {\n    List<DiGraphEdge<Node, Branch>> edges =\n        getAllEdges(cfg, startToken, endToken, type);\n    Iterator<DiGraphEdge<Node, Branch>> it = edges.iterator();\n    while (it.hasNext()) {\n      DiGraphEdge<Node, Branch> edge = it.next();\n      Node source = edge.getSource().getValue();\n      Node dest = edge.getDestination().getValue();\n      if (!isAncestor(source, dest)) {\n        it.remove();\n      }\n    }\n\n    return edges;\n  }\n",
        "begin_line": 119,
        "end_line": 134,
        "comment": "\n   * Gets all the control flow edges of the given type from some node with\n   * the first token to some node with the second token.\n   * This edge must flow from a parent to one of its descendants.\n   ",
        "child_ranges": [
            "(line 121,col 5)-(line 122,col 53)",
            "(line 123,col 5)-(line 123,col 62)",
            "(line 124,col 5)-(line 131,col 5)",
            "(line 133,col 5)-(line 133,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertNoEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int)",
        "snippet": "  private static void assertNoEdge(ControlFlowGraph<Node> cfg, int startToken,\n      int endToken) {\n    assertEquals(0, getAllEdges(cfg, startToken, endToken).size());\n  }\n",
        "begin_line": 140,
        "end_line": 143,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   ",
        "child_ranges": [
            "(line 142,col 5)-(line 142,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertDownEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static void assertDownEdge(ControlFlowGraph<Node> cfg,\n      int startToken, int endToken, Branch type) {\n    assertTrue(\"No down edge found\",\n        0 != getAllDownEdges(cfg, startToken, endToken, type).size());\n  }\n",
        "begin_line": 150,
        "end_line": 154,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   * This edge must flow from a parent to one of its descendants.\n   ",
        "child_ranges": [
            "(line 152,col 5)-(line 153,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertUpEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static void assertUpEdge(ControlFlowGraph<Node> cfg,\n      int startToken, int endToken, Branch type) {\n    assertTrue(\"No up edge found\",\n        0 != getAllDownEdges(cfg, endToken, startToken, type).size());\n  }\n",
        "begin_line": 161,
        "end_line": 165,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   * This edge must flow from a node to one of its ancestors.\n   ",
        "child_ranges": [
            "(line 163,col 5)-(line 164,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertCrossEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int, int, com.google.javascript.jscomp.ControlFlowGraph.Branch)",
        "snippet": "  private static void assertCrossEdge(ControlFlowGraph<Node> cfg,\n      int startToken, int endToken, Branch type) {\n    int numDownEdges = getAllDownEdges(cfg, startToken, endToken, type).size();\n    int numUpEdges = getAllDownEdges(cfg, endToken, startToken, type).size();\n    int numEdges = getAllEdges(cfg, startToken, endToken, type).size();\n    assertTrue(\"No cross edges found\", numDownEdges + numUpEdges < numEdges);\n  }\n",
        "begin_line": 172,
        "end_line": 178,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to some node with the second token.\n   * This edge must flow between two nodes that are not in the same subtree.\n   ",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 79)",
            "(line 175,col 5)-(line 175,col 77)",
            "(line 176,col 5)-(line 176,col 71)",
            "(line 177,col 5)-(line 177,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertReturnEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int)",
        "snippet": "  private static void assertReturnEdge(ControlFlowGraph<Node> cfg,\n      int startToken) {\n    List<DiGraphEdge<Node, Branch>> edges = getAllEdges(cfg);\n    for (DiGraphEdge<Node, Branch> edge : edges) {\n      Node source = edge.getSource().getValue();\n      DiGraphNode<Node, Branch> dest = edge.getDestination();\n      if (source.getType() == startToken &&\n          cfg.isImplicitReturn(dest)) {\n        return;\n      }\n    }\n\n    fail(\"No return edge found\");\n  }\n",
        "begin_line": 184,
        "end_line": 197,
        "comment": "\n   * Assert that there exists a control flow edge of the given type\n   * from some node with the first token to the return node.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 61)",
            "(line 187,col 5)-(line 194,col 5)",
            "(line 196,col 5)-(line 196,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertNoReturnEdge(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, int)",
        "snippet": "  private static void assertNoReturnEdge(ControlFlowGraph<Node> cfg,\n      int startToken) {\n    List<DiGraphEdge<Node, Branch>> edges = getAllEdges(cfg);\n    for (DiGraphEdge<Node, Branch> edge : edges) {\n      Node source = edge.getSource().getValue();\n      DiGraphNode<Node, Branch> dest = edge.getDestination();\n      if (source.getType() == startToken) {\n        assertTrue(\"Token \" + startToken + \" should not have an out going\" +\n            \" edge to the implicit return\", !cfg.isImplicitReturn(dest));\n        return;\n      }\n    }\n  }\n",
        "begin_line": 203,
        "end_line": 215,
        "comment": "\n   * Assert that there exists no control flow edge of the given type\n   * from some node with the first token to the return node.\n   ",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 61)",
            "(line 206,col 5)-(line 214,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.createCfg(java.lang.String, boolean)",
        "snippet": "  private ControlFlowGraph<Node> createCfg(String input,\n      boolean runSynBlockPass) {\n    Compiler compiler = new Compiler();\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, true, true);\n\n    Node root = compiler.parseSyntheticCode(\"cfgtest\", input);\n    if (runSynBlockPass) {\n      CreateSyntheticBlocks pass = new CreateSyntheticBlocks(\n          compiler, \"START\", \"END\");\n      pass.process(null, root);\n    }\n    cfa.process(null, root);\n    return cfa.getCfg();\n  }\n",
        "begin_line": 222,
        "end_line": 235,
        "comment": "\n   * Given an input in JavaScript, get a control flow graph for it.\n   *\n   * @param input Input JavaScript.\n   ",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 39)",
            "(line 225,col 5)-(line 225,col 76)",
            "(line 227,col 5)-(line 227,col 62)",
            "(line 228,col 5)-(line 232,col 5)",
            "(line 233,col 5)-(line 233,col 28)",
            "(line 234,col 5)-(line 234,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.createCfg(java.lang.String)",
        "snippet": "  private ControlFlowGraph<Node> createCfg(String input) {\n    return createCfg(input, false);\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testCfg(java.lang.String, java.lang.String, boolean)",
        "snippet": "  private void testCfg(String input, String expected,\n      boolean shouldTraverseFunctions) {\n    Compiler compiler = new Compiler();\n    ControlFlowAnalysis cfa =\n        new ControlFlowAnalysis(compiler, shouldTraverseFunctions, true);\n\n    Node root = compiler.parseSyntheticCode(\"cfgtest\", input);\n    cfa.process(null, root);\n    ControlFlowGraph<Node> cfg = cfa.getCfg();\n    try {\n      assertEquals(expected, DotFormatter.toDot(root, cfg));\n    } catch (java.io.IOException e) {\n      fail(\"Tests failed with IOExceptions\");\n    }\n  }\n",
        "begin_line": 252,
        "end_line": 266,
        "comment": "\n   * Given an input in JavaScript, test if the control flow analysis\n   * creates the proper control flow graph by comparing the expected\n   * Dot file output.\n   *\n   * @param input Input JavaScript.\n   * @param expected Expected Graphviz Dot file.\n   * @param shouldTraverseFunctions Whether to traverse functions when\n   *    constructing the CFG (true by default). Passed in to the\n   *    constructor of {@link ControlFlowAnalysis}.\n   ",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 39)",
            "(line 255,col 5)-(line 256,col 73)",
            "(line 258,col 5)-(line 258,col 62)",
            "(line 259,col 5)-(line 259,col 28)",
            "(line 260,col 5)-(line 260,col 46)",
            "(line 261,col 5)-(line 265,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleStatements()",
        "snippet": "  public void testSimpleStatements() {\n    String src = \"var a; a = a; a = a\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SCRIPT, Token.VAR, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.VAR, Token.EXPR_RESULT, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.EXPR_RESULT, Branch.UNCOND);\n  }\n",
        "begin_line": 268,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 39)",
            "(line 270,col 5)-(line 270,col 48)",
            "(line 271,col 5)-(line 271,col 64)",
            "(line 272,col 5)-(line 272,col 70)",
            "(line 273,col 5)-(line 273,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleIf()",
        "snippet": "  public void testSimpleIf() {\n    String src = \"var x; if (x) { x() } else { x() };\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SCRIPT, Token.VAR, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.VAR, Token.IF, Branch.UNCOND);\n    assertDownEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertNoEdge(cfg, Token.EXPR_RESULT, Token.CALL);\n    assertDownEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_FALSE);\n    assertReturnEdge(cfg, Token.EMPTY);\n  }\n",
        "begin_line": 277,
        "end_line": 287,
        "comment": " Test a simple IF control flow.",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 55)",
            "(line 279,col 5)-(line 279,col 48)",
            "(line 280,col 5)-(line 280,col 64)",
            "(line 281,col 5)-(line 281,col 61)",
            "(line 282,col 5)-(line 282,col 63)",
            "(line 283,col 5)-(line 283,col 71)",
            "(line 284,col 5)-(line 284,col 53)",
            "(line 285,col 5)-(line 285,col 64)",
            "(line 286,col 5)-(line 286,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testBreakingBlock()",
        "snippet": "  public void testBreakingBlock() {\n    // BUG #1382217\n    String src = \"X: { while(1) { break } }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertUpEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);\n  }\n",
        "begin_line": 289,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 45)",
            "(line 292,col 5)-(line 292,col 48)",
            "(line 293,col 5)-(line 293,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testBreakingTryBlock()",
        "snippet": "  public void testBreakingTryBlock() {\n    String src = \"a: try { break a; } finally {} if(x) {}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.BREAK, Token.IF, Branch.UNCOND);\n\n    src = \"a: try {} finally {break a;} if(x) {}\";\n    cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.BREAK, Token.IF, Branch.UNCOND);\n\n    src = \"a: try {} catch(e) {break a;} if(x) {}\";\n    cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.BREAK, Token.IF, Branch.UNCOND);\n  }\n",
        "begin_line": 296,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 297,col 5)-(line 297,col 59)",
            "(line 298,col 5)-(line 298,col 48)",
            "(line 299,col 5)-(line 299,col 63)",
            "(line 301,col 5)-(line 301,col 50)",
            "(line 302,col 5)-(line 302,col 25)",
            "(line 303,col 5)-(line 303,col 63)",
            "(line 305,col 5)-(line 305,col 51)",
            "(line 306,col 5)-(line 306,col 25)",
            "(line 307,col 5)-(line 307,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testWithStatement()",
        "snippet": "  public void testWithStatement() {\n    String src = \"var x, y; with(x) { y() }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.WITH, Token.BLOCK, Branch.UNCOND);\n    assertNoEdge(cfg, Token.WITH, Token.NAME);\n    assertNoEdge(cfg, Token.NAME, Token.BLOCK);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertReturnEdge(cfg, Token.EXPR_RESULT);\n  }\n",
        "begin_line": 310,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 311,col 45)",
            "(line 312,col 5)-(line 312,col 48)",
            "(line 313,col 5)-(line 313,col 64)",
            "(line 314,col 5)-(line 314,col 46)",
            "(line 315,col 5)-(line 315,col 47)",
            "(line 316,col 5)-(line 316,col 71)",
            "(line 317,col 5)-(line 317,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleWhile()",
        "snippet": "  public void testSimpleWhile() {\n    String src = \"var x; while (x) { x(); if (x) { break; } x() }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertDownEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_TRUE);\n    assertReturnEdge(cfg, Token.BREAK);\n  }\n",
        "begin_line": 321,
        "end_line": 328,
        "comment": " Test a simple WHILE control flow with BREAKs.",
        "child_ranges": [
            "(line 322,col 5)-(line 322,col 67)",
            "(line 323,col 5)-(line 323,col 48)",
            "(line 324,col 5)-(line 324,col 66)",
            "(line 325,col 5)-(line 325,col 71)",
            "(line 326,col 5)-(line 326,col 63)",
            "(line 327,col 5)-(line 327,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleSwitch()",
        "snippet": "  public void testSimpleSwitch() {\n    String src = \"var x; switch(x){ case(1): x(); case('x'): x(); break\" +\n        \"; default: x();}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.VAR, Token.SWITCH, Branch.UNCOND);\n    assertNoEdge(cfg, Token.SWITCH, Token.NAME);\n    // Transfer between cases and default.\n    assertDownEdge(cfg, Token.SWITCH, Token.CASE, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.CASE, Token.CASE, Branch.ON_FALSE);\n    assertCrossEdge(cfg, Token.CASE, Token.DEFAULT_CASE, Branch.ON_FALSE);\n    // Within each case.\n    assertDownEdge(cfg, Token.CASE, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertNoEdge(cfg, Token.EXPR_RESULT, Token.CALL);\n    assertNoEdge(cfg, Token.CALL, Token.NAME);\n  }\n",
        "begin_line": 330,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 332,col 27)",
            "(line 333,col 5)-(line 333,col 48)",
            "(line 334,col 5)-(line 334,col 65)",
            "(line 335,col 5)-(line 335,col 48)",
            "(line 337,col 5)-(line 337,col 65)",
            "(line 338,col 5)-(line 338,col 66)",
            "(line 339,col 5)-(line 339,col 74)",
            "(line 341,col 5)-(line 341,col 65)",
            "(line 342,col 5)-(line 342,col 71)",
            "(line 343,col 5)-(line 343,col 53)",
            "(line 344,col 5)-(line 344,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleNoDefault()",
        "snippet": "  public void testSimpleNoDefault() {\n    String src = \"var x; switch(x){ case(1): break; } x();\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.CASE, Token.EXPR_RESULT, Branch.ON_FALSE);\n  }\n",
        "begin_line": 347,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 60)",
            "(line 349,col 5)-(line 349,col 48)",
            "(line 350,col 5)-(line 350,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSwitchDefaultFirst()",
        "snippet": "  public void testSwitchDefaultFirst() {\n    // DEFAULT appears first. But it is should evaluated last.\n    String src = \"var x; switch(x){ default: break; case 1: break; }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SWITCH, Token.CASE, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.CASE, Token.DEFAULT_CASE, Branch.ON_FALSE);\n  }\n",
        "begin_line": 353,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 355,col 5)-(line 355,col 70)",
            "(line 356,col 5)-(line 356,col 48)",
            "(line 357,col 5)-(line 357,col 65)",
            "(line 358,col 5)-(line 358,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSwitchDefaultInMiddle()",
        "snippet": "  public void testSwitchDefaultInMiddle() {\n    // DEFAULT appears in the middle. But it is should evaluated last.\n    String src = \"var x; switch(x){ case 1: break; default: break; \" +\n        \"case 2: break; }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.SWITCH, Token.CASE, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.CASE, Token.CASE, Branch.ON_FALSE);\n    assertCrossEdge(cfg, Token.CASE, Token.DEFAULT_CASE, Branch.ON_FALSE);\n  }\n",
        "begin_line": 361,
        "end_line": 369,
        "comment": "",
        "child_ranges": [
            "(line 363,col 5)-(line 364,col 27)",
            "(line 365,col 5)-(line 365,col 48)",
            "(line 366,col 5)-(line 366,col 65)",
            "(line 367,col 5)-(line 367,col 66)",
            "(line 368,col 5)-(line 368,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSwitchEmpty()",
        "snippet": "  public void testSwitchEmpty() {\n    // DEFAULT appears first. But it is should evaluated last.\n    String src = \"var x; switch(x){}; x()\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.SWITCH, Token.EMPTY, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.EMPTY, Token.EXPR_RESULT, Branch.UNCOND);\n  }\n",
        "begin_line": 371,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 373,col 43)",
            "(line 374,col 5)-(line 374,col 48)",
            "(line 375,col 5)-(line 375,col 67)",
            "(line 376,col 5)-(line 376,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnThrowingException()",
        "snippet": "  public void testReturnThrowingException() {\n    String src = \"function f() {try { return a(); } catch (e) {e()}}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.RETURN, Token.BLOCK, Branch.ON_EX);\n    assertDownEdge(cfg, Token.BLOCK, Token.CATCH, Branch.UNCOND);\n  }\n",
        "begin_line": 379,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 380,col 5)-(line 380,col 70)",
            "(line 381,col 5)-(line 381,col 48)",
            "(line 382,col 5)-(line 382,col 66)",
            "(line 383,col 5)-(line 383,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleFor()",
        "snippet": "  public void testSimpleFor() {\n    String src = \"var a; for (var x = 0; x < 100; x++) { a(); }\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"VAR\\\"];\\n\" +\n      \"  node1 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FOR\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node4 -> node3 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node3 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 [label=\\\"LT\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"NAME\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node7 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"INC\\\"];\\n\" +\n      \"  node4 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node11 [weight=1];\\n\" +\n      \"  node10 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node12 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"CALL\\\"];\\n\" +\n      \"  node13 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node13 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 -> node13 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node12 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 387,
        "end_line": 440,
        "comment": " Test a simple FOR loop.",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 65)",
            "(line 389,col 5)-(line 438,col 12)",
            "(line 439,col 5)-(line 439,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleForWithContinue()",
        "snippet": "  public void testSimpleForWithContinue() {\n    String src = \"var a; for (var x = 0; x < 100; x++) {a();continue;a()}\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"VAR\\\"];\\n\" +\n      \"  node1 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FOR\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node4 -> node3 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node3 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 [label=\\\"LT\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"NAME\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node7 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"INC\\\"];\\n\" +\n      \"  node4 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node11 [weight=1];\\n\" +\n      \"  node10 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node12 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"CALL\\\"];\\n\" +\n      \"  node13 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node16 [label=\\\"CONTINUE\\\"];\\n\" +\n      \"  node13 -> node16 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 -> node16 [weight=1];\\n\" +\n      \"  node16 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node12 -> node17 [weight=1];\\n\" +\n      \"  node18 [label=\\\"CALL\\\"];\\n\" +\n      \"  node17 -> node18 [weight=1];\\n\" +\n      \"  node19 [label=\\\"NAME\\\"];\\n\" +\n      \"  node18 -> node19 [weight=1];\\n\" +\n      \"  node17 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node12 -> node13 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node12 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 442,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 443,col 5)-(line 443,col 75)",
            "(line 444,col 5)-(line 505,col 12)",
            "(line 506,col 5)-(line 506,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testNestedFor()",
        "snippet": "  public void testNestedFor() {\n    // This is tricky as the inner FOR branches to \"x++\" ON_FALSE.\n    String src = \"var a,b;a();for(var x=0;x<100;x++){for(var y=0;y<100;y++){\" +\n      \"continue;b();}}\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node1 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"CALL\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NAME\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"VAR\\\"];\\n\" +\n      \"  node4 -> node7 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 [label=\\\"FOR\\\"];\\n\" +\n      \"  node0 -> node8 [weight=1];\\n\" +\n      \"  node8 -> node7 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n      \"  node7 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node11 [label=\\\"LT\\\"];\\n\" +\n      \"  node8 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"NAME\\\"];\\n\" +\n      \"  node11 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node11 -> node13 [weight=1];\\n\" +\n      \"  node14 [label=\\\"INC\\\"];\\n\" +\n      \"  node8 -> node14 [weight=1];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node14 -> node15 [weight=1];\\n\" +\n      \"  node14 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node16 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node8 -> node16 [weight=1];\\n\" +\n      \"  node17 [label=\\\"FOR\\\"];\\n\" +\n      \"  node16 -> node17 [weight=1];\\n\" +\n      \"  node18 [label=\\\"VAR\\\"];\\n\" +\n      \"  node17 -> node18 [weight=1];\\n\" +\n      \"  node19 [label=\\\"NAME\\\"];\\n\" +\n      \"  node18 -> node19 [weight=1];\\n\" +\n      \"  node20 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node19 -> node20 [weight=1];\\n\" +\n      \"  node18 -> node17 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node21 [label=\\\"LT\\\"];\\n\" +\n      \"  node17 -> node21 [weight=1];\\n\" +\n      \"  node22 [label=\\\"NAME\\\"];\\n\" +\n      \"  node21 -> node22 [weight=1];\\n\" +\n      \"  node23 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node21 -> node23 [weight=1];\\n\" +\n      \"  node24 [label=\\\"INC\\\"];\\n\" +\n      \"  node17 -> node24 [weight=1];\\n\" +\n      \"  node25 [label=\\\"NAME\\\"];\\n\" +\n      \"  node24 -> node25 [weight=1];\\n\" +\n      \"  node24 -> node17 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node26 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node17 -> node26 [weight=1];\\n\" +\n      \"  node27 [label=\\\"CONTINUE\\\"];\\n\" +\n      \"  node26 -> node27 [weight=1];\\n\" +\n      \"  node27 -> node24 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node28 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node26 -> node28 [weight=1];\\n\" +\n      \"  node29 [label=\\\"CALL\\\"];\\n\" +\n      \"  node28 -> node29 [weight=1];\\n\" +\n      \"  node30 [label=\\\"NAME\\\"];\\n\" +\n      \"  node29 -> node30 [weight=1];\\n\" +\n      \"  node28 -> node24 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node26 -> node27 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node17 -> node14 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node17 -> node26 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node16 -> node18 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> node16 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 509,
        "end_line": 608,
        "comment": "",
        "child_ranges": [
            "(line 511,col 5)-(line 512,col 24)",
            "(line 513,col 5)-(line 606,col 12)",
            "(line 607,col 5)-(line 607,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testNestedDoWithBreak()",
        "snippet": "  public void testNestedDoWithBreak() {\n    // The BREAK branches to a() with UNCOND.\n    String src = \"var a;do{do{break}while(a);do{a()}while(a)}while(a);\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node3 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"DO\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node4 -> node3 [weight=1];\\n\" +\n      \"  node5 [label=\\\"DO\\\"];\\n\" +\n      \"  node3 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BREAK\\\"];\\n\" +\n      \"  node6 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node6 -> node7 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n      \"  node5 -> node9 [weight=1];\\n\" +\n      \"  node5 -> node6 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node5 -> node8 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node10 [label=\\\"DO\\\"];\\n\" +\n      \"  node3 -> node10 [weight=1];\\n\" +\n      \"  node10 -> node8 [weight=1];\\n\" +\n      \"  node11 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node8 -> node11 [weight=1];\\n\" +\n      \"  node12 [label=\\\"CALL\\\"];\\n\" +\n      \"  node11 -> node12 [weight=1];\\n\" +\n      \"  node13 [label=\\\"NAME\\\"];\\n\" +\n      \"  node12 -> node13 [weight=1];\\n\" +\n      \"  node11 -> node10 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 -> node11 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node14 [label=\\\"NAME\\\"];\\n\" +\n      \"  node10 -> node14 [weight=1];\\n\" +\n      \"  node10 -> node4 \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node10 -> node8 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node3 -> node6 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node15 [weight=1];\\n\" +\n      \"  node4 -> RETURN \" +\n      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node3 \" +\n      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 610,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 612,col 72)",
            "(line 613,col 5)-(line 672,col 12)",
            "(line 673,col 5)-(line 673,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testForIn()",
        "snippet": "  public void testForIn() {\n    String src = \"var a,b;for(a in b){a()};\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node4 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node5 [label=\\\"FOR\\\"];\\n\" +\n      \"  node0 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NAME\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node5 -> node4 [weight=1];\\n\" +\n      \"  node4 -> node5 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node5 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"CALL\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node8 -> node5 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 -> node8 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node11 [label=\\\"EMPTY\\\"];\\n\" +\n      \"  node5 -> node11 [label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node5 -> node7 [label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node11 [weight=1];\\n\" +\n      \"  node11 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 676,
        "end_line": 713,
        "comment": "",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 45)",
            "(line 678,col 5)-(line 711,col 12)",
            "(line 712,col 5)-(line 712,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testThrow()",
        "snippet": "  public void testThrow() {\n    String src = \"function f() { throw 1; f() }\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"PARAM_LIST\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"THROW\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"CALL\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node7 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node5 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 715,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 49)",
            "(line 717,col 5)-(line 746,col 12)",
            "(line 747,col 5)-(line 747,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleFunction()",
        "snippet": "  public void testSimpleFunction() {\n    String src = \"function f() { f() } f()\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"PARAM_LIST\\\"];\\n\" +\n      \"  node1 -> node3 [weight=1];\\n\" +\n      \"  node4 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node1 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"CALL\\\"];\\n\" +\n      \"  node5 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"NAME\\\"];\\n\" +\n      \"  node6 -> node7 [weight=1];\\n\" +\n      \"  node5 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node5 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node1 -> node4 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node0 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"CALL\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node8 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 751,
        "end_line": 788,
        "comment": " Test a simple FUNCTION.",
        "child_ranges": [
            "(line 752,col 5)-(line 752,col 44)",
            "(line 753,col 5)-(line 786,col 12)",
            "(line 787,col 5)-(line 787,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleCatch()",
        "snippet": "  public void testSimpleCatch() {\n    String src = \"try{ throw x; x(); x['stuff']; x.x; x} catch (e) { e() }\";\n    String expected = \"digraph AST {\\n\"\n        + \"  node [color=lightblue2, style=filled];\\n\"\n        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n        + \"  node0 -> node1 [weight=1];\\n\"\n        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node1 -> node2 [weight=1];\\n\"\n        + \"  node3 [label=\\\"THROW\\\"];\\n\"\n        + \"  node2 -> node3 [weight=1];\\n\"\n        + \"  node4 [label=\\\"NAME\\\"];\\n\"\n        + \"  node3 -> node4 [weight=1];\\n\"\n        + \"  node5 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node3 -> node5 [label=\\\"ON_EX\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node6 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node2 -> node6 [weight=1];\\n\"\n        + \"  node7 [label=\\\"CALL\\\"];\\n\"\n        + \"  node6 -> node7 [weight=1];\\n\"\n        + \"  node8 [label=\\\"NAME\\\"];\\n\"\n        + \"  node7 -> node8 [weight=1];\\n\"\n        + \"  node9 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node6 -> node5 [label=\\\"ON_EX\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node6 -> node9 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node2 -> node9 [weight=1];\\n\"\n        + \"  node10 [label=\\\"GETELEM\\\"];\\n\"\n        + \"  node9 -> node10 [weight=1];\\n\"\n        + \"  node11 [label=\\\"NAME\\\"];\\n\"\n        + \"  node10 -> node11 [weight=1];\\n\"\n        + \"  node12 [label=\\\"STRING\\\"];\\n\"\n        + \"  node10 -> node12 [weight=1];\\n\"\n        + \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node9 -> node13 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node9 -> node5 [label=\\\"ON_EX\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node2 -> node13 [weight=1];\\n\"\n        + \"  node14 [label=\\\"GETPROP\\\"];\\n\"\n        + \"  node13 -> node14 [weight=1];\\n\"\n        + \"  node15 [label=\\\"NAME\\\"];\\n\"\n        + \"  node14 -> node15 [weight=1];\\n\"\n        + \"  node16 [label=\\\"STRING\\\"];\\n\"\n        + \"  node14 -> node16 [weight=1];\\n\"\n        + \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node13 -> node17 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node13 -> node5 [label=\\\"ON_EX\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node2 -> node17 [weight=1];\\n\"\n        + \"  node18 [label=\\\"NAME\\\"];\\n\"\n        + \"  node17 -> node18 [weight=1];\\n\"\n        + \"  node17 -> RETURN [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node2 -> node3 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node5 [weight=1];\\n\"\n        + \"  node19 [label=\\\"CATCH\\\"];\\n\"\n        + \"  node5 -> node19 [weight=1];\\n\"\n        + \"  node20 [label=\\\"NAME\\\"];\\n\"\n        + \"  node19 -> node20 [weight=1];\\n\"\n        + \"  node21 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node19 -> node21 [weight=1];\\n\"\n        + \"  node22 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node21 -> node22 [weight=1];\\n\"\n        + \"  node23 [label=\\\"CALL\\\"];\\n\"\n        + \"  node22 -> node23 [weight=1];\\n\"\n        + \"  node24 [label=\\\"NAME\\\"];\\n\"\n        + \"  node23 -> node24 [weight=1];\\n\"\n        + \"  node22 -> RETURN [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node21 -> node22 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node19 -> node21 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node5 -> node19 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 790,
        "end_line": 875,
        "comment": "",
        "child_ranges": [
            "(line 791,col 5)-(line 791,col 76)",
            "(line 792,col 5)-(line 873,col 16)",
            "(line 874,col 5)-(line 874,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testFunctionWithinTry()",
        "snippet": "  public void testFunctionWithinTry() {\n    // Make sure we don't search for the handler outside of the function.\n    String src = \"try { function f() {throw 1;} } catch (e) { }\";\n    String expected = \"digraph AST {\\n\"\n        + \"  node [color=lightblue2, style=filled];\\n\"\n        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n        + \"  node0 -> node1 [weight=1];\\n\"\n        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node1 -> node2 [weight=1];\\n\"\n        + \"  node3 [label=\\\"FUNCTION\\\"];\\n\"\n        + \"  node2 -> node3 [weight=1];\\n\"\n        + \"  node4 [label=\\\"NAME\\\"];\\n\"\n        + \"  node3 -> node4 [weight=1];\\n\"\n        + \"  node5 [label=\\\"PARAM_LIST\\\"];\\n\"\n        + \"  node3 -> node5 [weight=1];\\n\"\n        + \"  node6 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node3 -> node6 [weight=1];\\n\"\n        + \"  node7 [label=\\\"THROW\\\"];\\n\"\n        + \"  node6 -> node7 [weight=1];\\n\"\n        + \"  node8 [label=\\\"NUMBER\\\"];\\n\"\n        + \"  node7 -> node8 [weight=1];\\n\"\n        + \"  node6 -> node7 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node3 -> node6 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node2 -> RETURN [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node9 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node1 -> node9 [weight=1];\\n\"\n        + \"  node10 [label=\\\"CATCH\\\"];\\n\"\n        + \"  node9 -> node10 [weight=1];\\n\"\n        + \"  node11 [label=\\\"NAME\\\"];\\n\"\n        + \"  node10 -> node11 [weight=1];\\n\"\n        + \"  node12 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node10 -> node12 [weight=1];\\n\"\n        + \"  node12 -> RETURN [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node10 -> node12 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node9 -> node10 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 877,
        "end_line": 925,
        "comment": "",
        "child_ranges": [
            "(line 879,col 5)-(line 879,col 65)",
            "(line 880,col 5)-(line 923,col 16)",
            "(line 924,col 5)-(line 924,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testNestedCatch()",
        "snippet": "  public void testNestedCatch() {\n    // Make sure we are going to the right handler.\n    String src = \"try{try{throw 1;}catch(e){throw 2}}catch(f){}\";\n    String expected = \"digraph AST {\\n\"\n        + \"  node [color=lightblue2, style=filled];\\n\"\n        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n        + \"  node0 -> node1 [weight=1];\\n\"\n        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node1 -> node2 [weight=1];\\n\"\n        + \"  node3 [label=\\\"TRY\\\"];\\n\"\n        + \"  node2 -> node3 [weight=1];\\n\"\n        + \"  node4 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node3 -> node4 [weight=1];\\n\"\n        + \"  node5 [label=\\\"THROW\\\"];\\n\"\n        + \"  node4 -> node5 [weight=1];\\n\"\n        + \"  node6 [label=\\\"NUMBER\\\"];\\n\"\n        + \"  node5 -> node6 [weight=1];\\n\"\n        + \"  node7 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node5 -> node7 [label=\\\"ON_EX\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node4 -> node5 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node3 -> node7 [weight=1];\\n\"\n        + \"  node8 [label=\\\"CATCH\\\"];\\n\"\n        + \"  node7 -> node8 [weight=1];\\n\"\n        + \"  node9 [label=\\\"NAME\\\"];\\n\"\n        + \"  node8 -> node9 [weight=1];\\n\"\n        + \"  node10 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node8 -> node10 [weight=1];\\n\"\n        + \"  node11 [label=\\\"THROW\\\"];\\n\"\n        + \"  node10 -> node11 [weight=1];\\n\"\n        + \"  node12 [label=\\\"NUMBER\\\"];\\n\"\n        + \"  node11 -> node12 [weight=1];\\n\"\n        + \"  node13 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node11 -> node13 [label=\\\"ON_EX\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node10 -> node11 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node8 -> node10 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node7 -> node8 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node3 -> node4 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node2 -> node3 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node13 [weight=1];\\n\"\n        + \"  node14 [label=\\\"CATCH\\\"];\\n\"\n        + \"  node13 -> node14 [weight=1];\\n\"\n        + \"  node15 [label=\\\"NAME\\\"];\\n\"\n        + \"  node14 -> node15 [weight=1];\\n\"\n        + \"  node16 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node14 -> node16 [weight=1];\\n\"\n        + \"  node16 -> RETURN [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node14 -> node16 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node13 -> node14 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 927,
        "end_line": 993,
        "comment": "",
        "child_ranges": [
            "(line 929,col 5)-(line 929,col 65)",
            "(line 930,col 5)-(line 991,col 16)",
            "(line 992,col 5)-(line 992,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleFinally()",
        "snippet": "  public void testSimpleFinally() {\n    String src = \"try{var x; foo()}finally{}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.TRY, Token.BLOCK, Branch.UNCOND);\n    assertDownEdge(cfg, Token.BLOCK, Token.VAR, Branch.UNCOND);\n    // VAR to FINALLY.\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.UNCOND);\n    // No CATCH to FINALLY.\n    assertNoEdge(cfg, Token.BLOCK, Token.BLOCK);\n  }\n",
        "begin_line": 995,
        "end_line": 1004,
        "comment": "",
        "child_ranges": [
            "(line 996,col 5)-(line 996,col 46)",
            "(line 997,col 5)-(line 997,col 48)",
            "(line 998,col 5)-(line 998,col 63)",
            "(line 999,col 5)-(line 999,col 63)",
            "(line 1001,col 5)-(line 1001,col 72)",
            "(line 1003,col 5)-(line 1003,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSimpleCatchFinally()",
        "snippet": "  public void testSimpleCatchFinally() {\n    // Make sure we are going to the right handler.\n    String src = \"try{ if(a){throw 1}else{a} } catch(e){a}finally{a}\";\n    String expected = \"digraph AST {\\n\"\n        + \"  node [color=lightblue2, style=filled];\\n\"\n        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n        + \"  node0 -> node1 [weight=1];\\n\"\n        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node1 -> node2 [weight=1];\\n\"\n        + \"  node3 [label=\\\"IF\\\"];\\n\"\n        + \"  node2 -> node3 [weight=1];\\n\"\n        + \"  node4 [label=\\\"NAME\\\"];\\n\"\n        + \"  node3 -> node4 [weight=1];\\n\"\n        + \"  node5 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node3 -> node5 [weight=1];\\n\"\n        + \"  node6 [label=\\\"THROW\\\"];\\n\"\n        + \"  node5 -> node6 [weight=1];\\n\"\n        + \"  node7 [label=\\\"NUMBER\\\"];\\n\"\n        + \"  node6 -> node7 [weight=1];\\n\"\n        + \"  node8 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node6 -> node8 [label=\\\"ON_EX\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node5 -> node6 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node9 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node3 -> node9 [weight=1];\\n\"\n        + \"  node10 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node9 -> node10 [weight=1];\\n\"\n        + \"  node11 [label=\\\"NAME\\\"];\\n\"\n        + \"  node10 -> node11 [weight=1];\\n\"\n        + \"  node12 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node10 -> node12 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node9 -> node10 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node3 -> node5 [label=\\\"ON_TRUE\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node3 -> node9 [label=\\\"ON_FALSE\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node2 -> node3 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node8 [weight=1];\\n\"\n        + \"  node13 [label=\\\"CATCH\\\"];\\n\"\n        + \"  node8 -> node13 [weight=1];\\n\"\n        + \"  node14 [label=\\\"NAME\\\"];\\n\"\n        + \"  node13 -> node14 [weight=1];\\n\"\n        + \"  node15 [label=\\\"BLOCK\\\"];\\n\"\n        + \"  node13 -> node15 [weight=1];\\n\"\n        + \"  node16 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node15 -> node16 [weight=1];\\n\"\n        + \"  node17 [label=\\\"NAME\\\"];\\n\"\n        + \"  node16 -> node17 [weight=1];\\n\"\n        + \"  node16 -> node12 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node15 -> node16 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node13 -> node15 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node8 -> node13 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node12 [weight=1];\\n\"\n        + \"  node18 [label=\\\"EXPR_RESULT\\\"];\\n\"\n        + \"  node12 -> node18 [weight=1];\\n\"\n        + \"  node19 [label=\\\"NAME\\\"];\\n\"\n        + \"  node18 -> node19 [weight=1];\\n\"\n        + \"  node18 -> RETURN [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node12 -> node18 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node1 -> node2 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n                \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n        + \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 1006,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1008,col 5)-(line 1008,col 70)",
            "(line 1009,col 5)-(line 1080,col 16)",
            "(line 1081,col 5)-(line 1081,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testComplicatedFinally2()",
        "snippet": "  public void testComplicatedFinally2() {\n    // Now the most nasty case.....\n    String src = \"while(1){try{\" +\n      \"if(a){a;continue;}else if(b){b;break;} else if(c) throw 1; else a}\" +\n      \"catch(e){}finally{c()}bar}foo\";\n\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    // Focus only on the ON_EX edges.\n    assertCrossEdge(cfg, Token.CONTINUE, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.THROW, Token.BLOCK, Branch.ON_EX);\n  }\n",
        "begin_line": 1084,
        "end_line": 1095,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 5)-(line 1088,col 38)",
            "(line 1090,col 5)-(line 1090,col 48)",
            "(line 1092,col 5)-(line 1092,col 69)",
            "(line 1093,col 5)-(line 1093,col 66)",
            "(line 1094,col 5)-(line 1094,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testDeepNestedBreakwithFinally()",
        "snippet": "  public void testDeepNestedBreakwithFinally() {\n    String src = \"X:while(1){try{while(2){try{var a;break X;}\" +\n        \"finally{}}}finally{}}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertDownEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_TRUE);\n    assertDownEdge(cfg, Token.BLOCK, Token.TRY, Branch.UNCOND);\n    assertDownEdge(cfg, Token.BLOCK, Token.VAR, Branch.UNCOND);\n    // BREAK to FINALLY.\n    assertCrossEdge(cfg, Token.BREAK, Token.BLOCK, Branch.UNCOND);\n    // FINALLY to FINALLY.\n    assertCrossEdge(cfg, Token.BLOCK, Token.BLOCK, Branch.ON_EX);\n    assertCrossEdge(cfg, Token.WHILE, Token.BLOCK, Branch.ON_FALSE);\n    assertReturnEdge(cfg, Token.BLOCK);\n  }\n",
        "begin_line": 1097,
        "end_line": 1110,
        "comment": "",
        "child_ranges": [
            "(line 1098,col 5)-(line 1099,col 32)",
            "(line 1100,col 5)-(line 1100,col 48)",
            "(line 1101,col 5)-(line 1101,col 66)",
            "(line 1102,col 5)-(line 1102,col 63)",
            "(line 1103,col 5)-(line 1103,col 63)",
            "(line 1105,col 5)-(line 1105,col 66)",
            "(line 1107,col 5)-(line 1107,col 65)",
            "(line 1108,col 5)-(line 1108,col 68)",
            "(line 1109,col 5)-(line 1109,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testDeepNestedFinally()",
        "snippet": "  public void testDeepNestedFinally() {\n    String src = \"try{try{try{throw 1}\" +\n        \"finally{1;var a}}finally{2;if(a);}}finally{3;a()}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.THROW, Token.BLOCK, Branch.ON_EX);\n    assertCrossEdge(cfg, Token.VAR, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.IF, Token.BLOCK, Branch.ON_EX);\n  }\n",
        "begin_line": 1112,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1113,col 5)-(line 1114,col 60)",
            "(line 1115,col 5)-(line 1115,col 48)",
            "(line 1116,col 5)-(line 1116,col 65)",
            "(line 1117,col 5)-(line 1117,col 64)",
            "(line 1118,col 5)-(line 1118,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturn()",
        "snippet": "  public void testReturn() {\n    String src = \"function f() { return; }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1121,
        "end_line": 1125,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1122,col 44)",
            "(line 1123,col 5)-(line 1123,col 48)",
            "(line 1124,col 5)-(line 1124,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnInFinally()",
        "snippet": "  public void testReturnInFinally() {\n    String src = \"function f(x){ try{} finally {return x;} }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1127,
        "end_line": 1131,
        "comment": "",
        "child_ranges": [
            "(line 1128,col 5)-(line 1128,col 62)",
            "(line 1129,col 5)-(line 1129,col 48)",
            "(line 1130,col 5)-(line 1130,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnInFinally2()",
        "snippet": "  public void testReturnInFinally2() {\n    String src = \"function f(x){\" +\n      \" try{ try{}finally{var dummy; return x;} } finally {} }\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.VAR, Token.RETURN, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.RETURN, Token.BLOCK, Branch.UNCOND);\n    assertReturnEdge(cfg, Token.BLOCK);\n    assertNoReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1133,
        "end_line": 1141,
        "comment": "",
        "child_ranges": [
            "(line 1134,col 5)-(line 1135,col 64)",
            "(line 1136,col 5)-(line 1136,col 48)",
            "(line 1137,col 5)-(line 1137,col 65)",
            "(line 1138,col 5)-(line 1138,col 67)",
            "(line 1139,col 5)-(line 1139,col 39)",
            "(line 1140,col 5)-(line 1140,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testReturnInTry()",
        "snippet": "  public void testReturnInTry() {\n    String src = \"function f(x){ try{x; return x()} finally {} var y;}\";\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.RETURN, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.RETURN, Token.BLOCK, Branch.UNCOND);\n    assertCrossEdge(cfg, Token.BLOCK, Token.VAR, Branch.UNCOND);\n    assertReturnEdge(cfg, Token.VAR);\n    assertReturnEdge(cfg, Token.BLOCK);\n    assertNoReturnEdge(cfg, Token.RETURN);\n  }\n",
        "begin_line": 1143,
        "end_line": 1152,
        "comment": "",
        "child_ranges": [
            "(line 1144,col 5)-(line 1144,col 72)",
            "(line 1145,col 5)-(line 1145,col 48)",
            "(line 1146,col 5)-(line 1146,col 73)",
            "(line 1147,col 5)-(line 1147,col 67)",
            "(line 1148,col 5)-(line 1148,col 64)",
            "(line 1149,col 5)-(line 1149,col 37)",
            "(line 1150,col 5)-(line 1150,col 39)",
            "(line 1151,col 5)-(line 1151,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testOptionNotToTraverseFunctions()",
        "snippet": "  public void testOptionNotToTraverseFunctions() {\n    String src = \"var x = 1; function f() { x = null; }\";\n    String expectedWhenNotTraversingFunctions = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node1 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"PARAM_LIST\\\"];\\n\" +\n      \"  node4 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"ASSIGN\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NULL\\\"];\\n\" +\n      \"  node9 -> node11 [weight=1];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    String expected = \"digraph AST {\\n\" +\n      \"  node [color=lightblue2, style=filled];\\n\" +\n      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n      \"  node1 [label=\\\"VAR\\\"];\\n\" +\n      \"  node0 -> node1 [weight=1];\\n\" +\n      \"  node2 [label=\\\"NAME\\\"];\\n\" +\n      \"  node1 -> node2 [weight=1];\\n\" +\n      \"  node3 [label=\\\"NUMBER\\\"];\\n\" +\n      \"  node2 -> node3 [weight=1];\\n\" +\n      \"  node1 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 [label=\\\"FUNCTION\\\"];\\n\" +\n      \"  node0 -> node4 [weight=1];\\n\" +\n      \"  node5 [label=\\\"NAME\\\"];\\n\" +\n      \"  node4 -> node5 [weight=1];\\n\" +\n      \"  node6 [label=\\\"PARAM_LIST\\\"];\\n\" +\n      \"  node4 -> node6 [weight=1];\\n\" +\n      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n      \"  node4 -> node7 [weight=1];\\n\" +\n      \"  node8 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n      \"  node7 -> node8 [weight=1];\\n\" +\n      \"  node9 [label=\\\"ASSIGN\\\"];\\n\" +\n      \"  node8 -> node9 [weight=1];\\n\" +\n      \"  node10 [label=\\\"NAME\\\"];\\n\" +\n      \"  node9 -> node10 [weight=1];\\n\" +\n      \"  node11 [label=\\\"NULL\\\"];\\n\" +\n      \"  node9 -> node11 [weight=1];\\n\" +\n      \"  node8 -> RETURN \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node7 -> node8 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node4 -> node7 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"  node0 -> node1 \" +\n      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n      \"}\\n\";\n    testCfg(src, expected);\n    testCfg(src, expectedWhenNotTraversingFunctions, false);\n  }\n",
        "begin_line": 1154,
        "end_line": 1224,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 5)-(line 1155,col 57)",
            "(line 1156,col 5)-(line 1185,col 12)",
            "(line 1186,col 5)-(line 1221,col 12)",
            "(line 1222,col 5)-(line 1222,col 27)",
            "(line 1223,col 5)-(line 1223,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testInstanceOf()",
        "snippet": "  public void testInstanceOf() {\n    String src = \"try { x instanceof 'x' } catch (e) { }\";\n    ControlFlowGraph<Node> cfg = createCfg(src, true);\n    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);\n  }\n",
        "begin_line": 1226,
        "end_line": 1230,
        "comment": "",
        "child_ranges": [
            "(line 1227,col 5)-(line 1227,col 58)",
            "(line 1228,col 5)-(line 1228,col 54)",
            "(line 1229,col 5)-(line 1229,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testSynBlock()",
        "snippet": "  public void testSynBlock() {\n    String src = \"START(); var x; END(); var y;\";\n    ControlFlowGraph<Node> cfg = createCfg(src, true);\n    assertCrossEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.SYN_BLOCK);\n  }\n",
        "begin_line": 1232,
        "end_line": 1236,
        "comment": "",
        "child_ranges": [
            "(line 1233,col 5)-(line 1233,col 49)",
            "(line 1234,col 5)-(line 1234,col 54)",
            "(line 1235,col 5)-(line 1235,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testPartialTraversalOfScope()",
        "snippet": "  public void testPartialTraversalOfScope() {\n    Compiler compiler = new Compiler();\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, true, true);\n\n    Node script1 = compiler.parseSyntheticCode(\"cfgtest\", \"var foo;\");\n    Node script2 = compiler.parseSyntheticCode(\"cfgtest2\", \"var bar;\");\n    Node root = new Node(Token.BLOCK, script1, script2);\n\n    cfa.process(null, script1);\n    ControlFlowGraph<Node> cfg = cfa.getCfg();\n\n    assertNotNull(cfg.getNode(script1));\n    assertNull(cfg.getNode(script2));\n  }\n",
        "begin_line": 1238,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1239,col 5)-(line 1239,col 39)",
            "(line 1240,col 5)-(line 1240,col 76)",
            "(line 1242,col 5)-(line 1242,col 70)",
            "(line 1243,col 5)-(line 1243,col 71)",
            "(line 1244,col 5)-(line 1244,col 56)",
            "(line 1246,col 5)-(line 1246,col 31)",
            "(line 1247,col 5)-(line 1247,col 46)",
            "(line 1249,col 5)-(line 1249,col 40)",
            "(line 1250,col 5)-(line 1250,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testForLoopOrder()",
        "snippet": "  public void testForLoopOrder() {\n    assertNodeOrder(\n        createCfg(\"for (var i = 0; i < 5; i++) { var x = 3; } if (true) {}\"),\n        Lists.newArrayList(\n            Token.SCRIPT, Token.VAR, Token.FOR, Token.BLOCK, Token.VAR,\n            Token.INC /* i++ */,\n            Token.IF, Token.BLOCK));\n  }\n",
        "begin_line": 1253,
        "end_line": 1260,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 5)-(line 1259,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testLabelledForInLoopOrder()",
        "snippet": "  public void testLabelledForInLoopOrder() {\n    assertNodeOrder(\n        createCfg(\"var i = 0; var y = {}; \" +\n            \"label: for (var x in y) { \" +\n            \"    if (x) { break label; } else { i++ } x(); }\"),\n        Lists.newArrayList(\n            Token.SCRIPT, Token.VAR, Token.VAR, Token.NAME,\n            Token.FOR, Token.BLOCK,\n            Token.IF, Token.BLOCK, Token.BREAK,\n            Token.BLOCK, Token.EXPR_RESULT, Token.EXPR_RESULT));\n  }\n",
        "begin_line": 1262,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 5)-(line 1271,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testLocalFunctionOrder()",
        "snippet": "  public void testLocalFunctionOrder() {\n    ControlFlowGraph<Node> cfg =\n        createCfg(\"function f() { while (x) { x++; } } var x = 3;\");\n    assertNodeOrder(\n        cfg,\n        Lists.newArrayList(\n            Token.SCRIPT, Token.VAR,\n\n            Token.FUNCTION, Token.BLOCK,\n            Token.WHILE, Token.BLOCK, Token.EXPR_RESULT));\n  }\n",
        "begin_line": 1274,
        "end_line": 1284,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 5)-(line 1276,col 68)",
            "(line 1277,col 5)-(line 1283,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testDoWhileOrder()",
        "snippet": "  public void testDoWhileOrder() {\n    assertNodeOrder(\n        createCfg(\"do { var x = 3; } while (true); void x;\"),\n        Lists.newArrayList(\n            Token.SCRIPT, Token.BLOCK, Token.VAR, Token.DO, Token.EXPR_RESULT));\n  }\n",
        "begin_line": 1286,
        "end_line": 1291,
        "comment": "",
        "child_ranges": [
            "(line 1287,col 5)-(line 1290,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testBreakInFinally1()",
        "snippet": "  public void testBreakInFinally1() {\n    String src =\n        \"f = function() {\\n\" +\n        \"  var action;\\n\" +\n        \"  a: {\\n\" +\n        \"    var proto = null;\\n\" +\n        \"    try {\\n\" +\n        \"      proto = new Proto\\n\" +\n        \"    } finally {\\n\" +\n        \"      action = proto;\\n\" +\n        \"      break a\\n\" +  // Remove this...\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"  alert(action)\\n\" + // but not this.\n        \"};\";\n    String expected =\n        \"digraph AST {\\n\" +\n        \"  node [color=lightblue2, style=filled];\\n\" +\n        \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n        \"  node1 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n        \"  node0 -> node1 [weight=1];\\n\" +\n        \"  node2 [label=\\\"ASSIGN\\\"];\\n\" +\n        \"  node1 -> node2 [weight=1];\\n\" +\n        \"  node3 [label=\\\"NAME\\\"];\\n\" +\n        \"  node2 -> node3 [weight=1];\\n\" +\n        \"  node4 [label=\\\"FUNCTION\\\"];\\n\" +\n        \"  node2 -> node4 [weight=1];\\n\" +\n        \"  node5 [label=\\\"NAME\\\"];\\n\" +\n        \"  node4 -> node5 [weight=1];\\n\" +\n        \"  node6 [label=\\\"PARAM_LIST\\\"];\\n\" +\n        \"  node4 -> node6 [weight=1];\\n\" +\n        \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node4 -> node7 [weight=1];\\n\" +\n        \"  node8 [label=\\\"VAR\\\"];\\n\" +\n        \"  node7 -> node8 [weight=1];\\n\" +\n        \"  node9 [label=\\\"NAME\\\"];\\n\" +\n        \"  node8 -> node9 [weight=1];\\n\" +\n        \"  node10 [label=\\\"LABEL\\\"];\\n\" +\n        \"  node7 -> node10 [weight=1];\\n\" +\n        \"  node11 [label=\\\"LABEL_NAME\\\"];\\n\" +\n        \"  node10 -> node11 [weight=1];\\n\" +\n        \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node10 -> node12 [weight=1];\\n\" +\n        \"  node13 [label=\\\"VAR\\\"];\\n\" +\n        \"  node12 -> node13 [weight=1];\\n\" +\n        \"  node14 [label=\\\"NAME\\\"];\\n\" +\n        \"  node13 -> node14 [weight=1];\\n\" +\n        \"  node15 [label=\\\"NULL\\\"];\\n\" +\n        \"  node14 -> node15 [weight=1];\\n\" +\n        \"  node16 [label=\\\"TRY\\\"];\\n\" +\n        \"  node12 -> node16 [weight=1];\\n\" +\n        \"  node17 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node16 -> node17 [weight=1];\\n\" +\n        \"  node18 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n        \"  node17 -> node18 [weight=1];\\n\" +\n        \"  node19 [label=\\\"ASSIGN\\\"];\\n\" +\n        \"  node18 -> node19 [weight=1];\\n\" +\n        \"  node20 [label=\\\"NAME\\\"];\\n\" +\n        \"  node19 -> node20 [weight=1];\\n\" +\n        \"  node21 [label=\\\"NEW\\\"];\\n\" +\n        \"  node19 -> node21 [weight=1];\\n\" +\n        \"  node22 [label=\\\"NAME\\\"];\\n\" +\n        \"  node21 -> node22 [weight=1];\\n\" +\n        \"  node23 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node16 -> node23 [weight=1];\\n\" +\n        \"  node24 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node16 -> node24 [weight=1];\\n\" +\n        \"  node25 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n        \"  node24 -> node25 [weight=1];\\n\" +\n        \"  node26 [label=\\\"ASSIGN\\\"];\\n\" +\n        \"  node25 -> node26 [weight=1];\\n\" +\n        \"  node27 [label=\\\"NAME\\\"];\\n\" +\n        \"  node26 -> node27 [weight=1];\\n\" +\n        \"  node28 [label=\\\"NAME\\\"];\\n\" +\n        \"  node26 -> node28 [weight=1];\\n\" +\n        \"  node29 [label=\\\"BREAK\\\"];\\n\" +\n        \"  node24 -> node29 [weight=1];\\n\" +\n        \"  node30 [label=\\\"LABEL_NAME\\\"];\\n\" +\n        \"  node29 -> node30 [weight=1];\\n\" +\n        \"  node31 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n        \"  node7 -> node31 [weight=1];\\n\" +\n        \"  node32 [label=\\\"CALL\\\"];\\n\" +\n        \"  node31 -> node32 [weight=1];\\n\" +\n        \"  node33 [label=\\\"NAME\\\"];\\n\" +\n        \"  node32 -> node33 [weight=1];\\n\" +\n        \"  node34 [label=\\\"NAME\\\"];\\n\" +\n        \"  node32 -> node34 [weight=1];\\n\" +\n        \"  node1 -> RETURN [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"}\\n\";\n    testCfg(src, expected);\n  }\n",
        "begin_line": 1293,
        "end_line": 1386,
        "comment": "",
        "child_ranges": [
            "(line 1294,col 5)-(line 1307,col 13)",
            "(line 1308,col 5)-(line 1384,col 14)",
            "(line 1385,col 5)-(line 1385,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.testBreakInFinally2()",
        "snippet": "  public void testBreakInFinally2() {\n    String src =\n      \"var action;\\n\" +\n      \"a: {\\n\" +\n      \"  var proto = null;\\n\" +\n      \"  try {\\n\" +\n      \"    proto = new Proto\\n\" +\n      \"  } finally {\\n\" +\n      \"    action = proto;\\n\" +\n      \"    break a\\n\" +\n      \"  }\\n\" +\n      \"}\\n\" +\n      \"alert(action)\\n\";\n\n    ControlFlowGraph<Node> cfg = createCfg(src);\n    assertCrossEdge(cfg, Token.BREAK, Token.EXPR_RESULT, Branch.UNCOND);\n    assertNoEdge(cfg, Token.BREAK, Token.BLOCK);\n  }\n",
        "begin_line": 1388,
        "end_line": 1405,
        "comment": "",
        "child_ranges": [
            "(line 1389,col 5)-(line 1400,col 24)",
            "(line 1402,col 5)-(line 1402,col 48)",
            "(line 1403,col 5)-(line 1403,col 72)",
            "(line 1404,col 5)-(line 1404,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysisTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysisTest.assertNodeOrder(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>, java.util.List<java.lang.Integer>)",
        "snippet": "  private void assertNodeOrder(ControlFlowGraph<Node> cfg,\n      List<Integer> nodeTypes) {\n    List<DiGraphNode<Node, Branch>> cfgNodes =\n        Lists.newArrayList(cfg.getDirectedGraphNodes());\n    Collections.sort(cfgNodes, cfg.getOptionalNodeComparator(true));\n\n    // IMPLICIT RETURN must always be last.\n    Node implicitReturn = cfgNodes.remove(cfgNodes.size() - 1).getValue();\n    assertNull(implicitReturn == null ? \"null\" : implicitReturn.toStringTree(),\n        implicitReturn);\n\n    assertEquals(\"Wrong number of CFG nodes\",\n        nodeTypes.size(), cfgNodes.size());\n    for (int i = 0; i < cfgNodes.size(); i++) {\n      int expectedType = nodeTypes.get(i);\n      int actualType = cfgNodes.get(i).getValue().getType();\n      assertEquals(\n          \"node type mismatch at \" + i + \".\\n\" +\n          \"found   : \" + Token.name(actualType) + \"\\n\" +\n          \"required: \" + Token.name(expectedType) + \"\\n\",\n          expectedType, actualType);\n    }\n  }\n",
        "begin_line": 1418,
        "end_line": 1440,
        "comment": "\n   * Asserts the priority order of CFG nodes.\n   *\n   * Checks that the node type of the highest-priority node matches the\n   * first element of the list, the type of the second node matches the\n   * second element of the list, and so on.\n   *\n   * @param cfg The control flow graph.\n   * @param nodeTypes The expected node types, in order.\n   ",
        "child_ranges": [
            "(line 1420,col 5)-(line 1421,col 56)",
            "(line 1422,col 5)-(line 1422,col 68)",
            "(line 1425,col 5)-(line 1425,col 74)",
            "(line 1426,col 5)-(line 1427,col 24)",
            "(line 1429,col 5)-(line 1430,col 43)",
            "(line 1431,col 5)-(line 1439,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 126,
        "end_line": 131,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 127,col 5)-(line 128,col 49)",
            "(line 129,col 5)-(line 129,col 39)",
            "(line 130,col 5)-(line 130,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 169,
        "end_line": 182,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 170,col 5)-(line 172,col 5)",
            "(line 176,col 5)-(line 176,col 32)",
            "(line 178,col 5)-(line 179,col 65)",
            "(line 180,col 5)-(line 180,col 55)",
            "(line 181,col 5)-(line 181,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 184,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 185,col 5)-(line 185,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 196,
        "end_line": 200,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 209,col 5)-(line 209,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 223,col 5)-(line 223,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 234,
        "end_line": 237,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 29)",
            "(line 236,col 5)-(line 236,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 259,
        "end_line": 261,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 260,col 5)-(line 260,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 28)",
            "(line 283,col 5)-(line 283,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 299,
        "end_line": 301,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 307,col 5)-(line 307,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 311,
        "end_line": 319,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 313,col 5)-(line 315,col 40)",
            "(line 317,col 5)-(line 318,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 369,
        "end_line": 372,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 371,col 5)-(line 371,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 385,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 410,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 408,col 49)",
            "(line 409,col 5)-(line 409,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 426,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 41)",
            "(line 430,col 5)-(line 430,col 28)",
            "(line 432,col 5)-(line 432,col 43)",
            "(line 434,col 5)-(line 436,col 5)",
            "(line 439,col 5)-(line 439,col 39)",
            "(line 440,col 5)-(line 441,col 53)",
            "(line 443,col 5)-(line 443,col 71)",
            "(line 445,col 5)-(line 445,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 455,col 5)-(line 455,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 467,col 5)-(line 467,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 480,
        "end_line": 483,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 498,
        "end_line": 509,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 500,col 5)-(line 500,col 41)",
            "(line 501,col 5)-(line 501,col 28)",
            "(line 503,col 5)-(line 503,col 51)",
            "(line 504,col 5)-(line 506,col 5)",
            "(line 507,col 5)-(line 507,col 55)",
            "(line 508,col 5)-(line 508,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 529,
        "end_line": 532,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 531,col 5)-(line 531,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 544,
        "end_line": 552,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 546,col 5)-(line 546,col 41)",
            "(line 547,col 5)-(line 547,col 28)",
            "(line 549,col 5)-(line 550,col 66)",
            "(line 551,col 5)-(line 551,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 559,
        "end_line": 561,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 560,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 582,
        "end_line": 588,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 583,col 5)-(line 587,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 611,
        "end_line": 618,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 613,col 5)-(line 617,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 631,
        "end_line": 636,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 634,col 49)",
            "(line 635,col 5)-(line 635,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 643,
        "end_line": 645,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 644,col 5)-(line 644,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 666,
        "end_line": 669,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 668,col 5)-(line 668,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 676,
        "end_line": 678,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 677,col 5)-(line 677,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 686,
        "end_line": 699,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 687,col 5)-(line 698,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 712,
        "end_line": 715,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 714,col 5)-(line 714,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 732,
        "end_line": 946,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 735,col 5)-(line 735,col 51)",
            "(line 736,col 5)-(line 736,col 44)",
            "(line 738,col 5)-(line 738,col 39)",
            "(line 739,col 5)-(line 740,col 66)",
            "(line 742,col 5)-(line 744,col 5)",
            "(line 745,col 5)-(line 745,col 44)",
            "(line 746,col 5)-(line 746,col 40)",
            "(line 749,col 5)-(line 749,col 38)",
            "(line 750,col 5)-(line 750,col 54)",
            "(line 751,col 5)-(line 751,col 50)",
            "(line 753,col 5)-(line 753,col 45)",
            "(line 754,col 5)-(line 754,col 68)",
            "(line 755,col 5)-(line 755,col 34)",
            "(line 756,col 5)-(line 756,col 59)",
            "(line 757,col 5)-(line 757,col 35)",
            "(line 759,col 5)-(line 760,col 39)",
            "(line 762,col 5)-(line 813,col 5)",
            "(line 815,col 5)-(line 945,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 948,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 950,col 5)-(line 950,col 57)",
            "(line 951,col 5)-(line 951,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 957,
        "end_line": 975,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 958,col 5)-(line 958,col 41)",
            "(line 959,col 5)-(line 959,col 51)",
            "(line 960,col 5)-(line 962,col 5)",
            "(line 963,col 5)-(line 963,col 55)",
            "(line 964,col 5)-(line 964,col 39)",
            "(line 965,col 5)-(line 966,col 66)",
            "(line 967,col 5)-(line 967,col 44)",
            "(line 968,col 5)-(line 968,col 42)",
            "(line 970,col 5)-(line 973,col 5)",
            "(line 974,col 5)-(line 974,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 977,
        "end_line": 979,
        "comment": "",
        "child_ranges": [
            "(line 978,col 5)-(line 978,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 985,
        "end_line": 991,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 47)",
            "(line 987,col 5)-(line 989,col 5)",
            "(line 990,col 5)-(line 990,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 997,
        "end_line": 1003,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 47)",
            "(line 999,col 5)-(line 1001,col 5)",
            "(line 1002,col 5)-(line 1002,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1010,
        "end_line": 1017,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1011,col 5)-(line 1011,col 48)",
            "(line 1012,col 5)-(line 1012,col 47)",
            "(line 1013,col 5)-(line 1015,col 5)",
            "(line 1016,col 5)-(line 1016,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1024,
        "end_line": 1030,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 47)",
            "(line 1026,col 5)-(line 1028,col 5)",
            "(line 1029,col 5)-(line 1029,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1036,
        "end_line": 1043,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 53)",
            "(line 1038,col 5)-(line 1041,col 5)",
            "(line 1042,col 5)-(line 1042,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1046,
        "end_line": 1048,
        "comment": "",
        "child_ranges": [
            "(line 1047,col 7)-(line 1047,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1050,
        "end_line": 1051,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1053,
        "end_line": 1054,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1057,
        "end_line": 1060,
        "comment": "",
        "child_ranges": [
            "(line 1058,col 5)-(line 1058,col 39)",
            "(line 1059,col 5)-(line 1059,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1062,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1063,col 5)-(line 1063,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1067,
        "end_line": 1079,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1069,col 5)-(line 1077,col 39)",
            "(line 1078,col 5)-(line 1078,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckMissingReturnTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-a4d160b5-230b-4a94-8cd4-22bdb1c0a23f.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1071,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1072,col 13)-(line 1074,col 13)"
        ]
    }
]