[
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-f9737b4b-7c1e-42a2-ae26-b8344fb474fa.getPermissions(java.security.CodeSource)",
        "snippet": "            public PermissionCollection getPermissions(CodeSource codesource) {\n                Permissions p = new Permissions();\n                p.add(new AllPermission());  // enable everything\n                return p;\n            }\n",
        "begin_line": 106,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 107,col 17)-(line 107,col 50)",
            "(line 108,col 17)-(line 108,col 43)",
            "(line 109,col 17)-(line 109,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-c8be2aa7-178d-492e-9e16-3f65293cebcc.refresh()",
        "snippet": "            public void refresh() {\n            }\n",
        "begin_line": 111,
        "end_line": 112,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-2ff6e386-cfc1-4d89-94be-63ed6acdaf64.implies(java.security.ProtectionDomain, java.security.Permission)",
        "snippet": "            public boolean implies(ProtectionDomain domain, Permission permission) {\n                if (permission instanceof JodaTimePermission) {\n                    return false;\n                }\n                return true;\n//                return super.implies(domain, permission);\n            }\n",
        "begin_line": 113,
        "end_line": 119,
        "comment": "",
        "child_ranges": [
            "(line 114,col 17)-(line 116,col 17)",
            "(line 117,col 17)-(line 117,col 28)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-640ed2d5-076a-4500-8261-a0d07d7a9dfc.getPermissions(java.security.CodeSource)",
        "snippet": "            public PermissionCollection getPermissions(CodeSource codesource) {\n                Permissions p = new Permissions();\n                p.add(new AllPermission());  // enable everything\n                return p;\n            }\n",
        "begin_line": 122,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 123,col 17)-(line 123,col 50)",
            "(line 124,col 17)-(line 124,col 43)",
            "(line 125,col 17)-(line 125,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-d629f6ac-0ae1-4d9e-9df5-5278b7df9c6e.refresh()",
        "snippet": "            public void refresh() {\n            }\n",
        "begin_line": 127,
        "end_line": 128,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestDateTimeZone.class);\n    }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.TestDateTimeZone(java.lang.String)",
        "snippet": "    public TestDateTimeZone(String name) {\n        super(name);\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        locale = Locale.getDefault();\n        zone = DateTimeZone.getDefault();\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 147,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 37)",
            "(line 149,col 9)-(line 149,col 41)",
            "(line 150,col 9)-(line 150,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        Locale.setDefault(locale);\n        DateTimeZone.setDefault(zone);\n    }\n",
        "begin_line": 153,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 34)",
            "(line 155,col 9)-(line 155,col 38)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testDefault()",
        "snippet": "    public void testDefault() {\n        assertNotNull(DateTimeZone.getDefault());\n        \n        DateTimeZone.setDefault(PARIS);\n        assertSame(PARIS, DateTimeZone.getDefault());\n        \n        try {\n            DateTimeZone.setDefault(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 159,
        "end_line": 169,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 49)",
            "(line 162,col 9)-(line 162,col 39)",
            "(line 163,col 9)-(line 163,col 53)",
            "(line 165,col 9)-(line 168,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testDefaultSecurity()",
        "snippet": "    public void testDefaultSecurity() {\n        if (OLD_JDK) {\n            return;\n        }\n        try {\n            Policy.setPolicy(RESTRICT);\n            System.setSecurityManager(new SecurityManager());\n            DateTimeZone.setDefault(PARIS);\n            fail();\n        } catch (SecurityException ex) {\n            // ok\n        } finally {\n            System.setSecurityManager(null);\n            Policy.setPolicy(ALLOW);\n        }\n    }\n",
        "begin_line": 171,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 174,col 9)",
            "(line 175,col 9)-(line 185,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForID_String()",
        "snippet": "    public void testForID_String() {\n        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forID((String) null));\n        \n        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n        assertEquals(\"Europe/London\", zone.getID());\n        \n        zone = DateTimeZone.forID(\"UTC\");\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forID(\"+00:00\");\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forID(\"+00\");\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forID(\"+01:23\");\n        assertEquals(\"+01:23\", zone.getID());\n        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forID(\"-02:00\");\n        assertEquals(\"-02:00\", zone.getID());\n        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR),\n                zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forID(\"-07:05:34.0\");\n        assertEquals(\"-07:05:34\", zone.getID());\n        assertEquals((-7L * DateTimeConstants.MILLIS_PER_HOUR) +\n                    (-5L * DateTimeConstants.MILLIS_PER_MINUTE) +\n                    (-34L * DateTimeConstants.MILLIS_PER_SECOND),\n                    zone.getOffset(TEST_TIME_SUMMER));\n        \n        try {\n            DateTimeZone.forID(\"SST\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"europe/london\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"Europe/UK\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"+\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forID(\"+0\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 189,
        "end_line": 241,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 83)",
            "(line 192,col 9)-(line 192,col 64)",
            "(line 193,col 9)-(line 193,col 52)",
            "(line 195,col 9)-(line 195,col 41)",
            "(line 196,col 9)-(line 196,col 43)",
            "(line 198,col 9)-(line 198,col 44)",
            "(line 199,col 9)-(line 199,col 43)",
            "(line 201,col 9)-(line 201,col 41)",
            "(line 202,col 9)-(line 202,col 43)",
            "(line 204,col 9)-(line 204,col 44)",
            "(line 205,col 9)-(line 205,col 45)",
            "(line 206,col 9)-(line 207,col 50)",
            "(line 209,col 9)-(line 209,col 44)",
            "(line 210,col 9)-(line 210,col 45)",
            "(line 211,col 9)-(line 212,col 50)",
            "(line 214,col 9)-(line 214,col 49)",
            "(line 215,col 9)-(line 215,col 48)",
            "(line 216,col 9)-(line 219,col 54)",
            "(line 221,col 9)-(line 224,col 48)",
            "(line 225,col 9)-(line 228,col 48)",
            "(line 229,col 9)-(line 232,col 48)",
            "(line 233,col 9)-(line 236,col 48)",
            "(line 237,col 9)-(line 240,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForID_String_old()",
        "snippet": "    public void testForID_String_old() {\n        Map<String, String> map = new LinkedHashMap<String, String>();\n        map.put(\"GMT\", \"UTC\");\n        map.put(\"WET\", \"WET\");\n        map.put(\"CET\", \"CET\");\n        map.put(\"MET\", \"CET\");\n        map.put(\"ECT\", \"CET\");\n        map.put(\"EET\", \"EET\");\n        map.put(\"MIT\", \"Pacific/Apia\");\n        map.put(\"HST\", \"Pacific/Honolulu\");\n        map.put(\"AST\", \"America/Anchorage\");\n        map.put(\"PST\", \"America/Los_Angeles\");\n        map.put(\"MST\", \"America/Denver\");\n        map.put(\"PNT\", \"America/Phoenix\");\n        map.put(\"CST\", \"America/Chicago\");\n        map.put(\"EST\", \"America/New_York\");\n        map.put(\"IET\", \"America/Indiana/Indianapolis\");\n        map.put(\"PRT\", \"America/Puerto_Rico\");\n        map.put(\"CNT\", \"America/St_Johns\");\n        map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n        map.put(\"BET\", \"America/Sao_Paulo\");\n        map.put(\"ART\", \"Africa/Cairo\");\n        map.put(\"CAT\", \"Africa/Harare\");\n        map.put(\"EAT\", \"Africa/Addis_Ababa\");\n        map.put(\"NET\", \"Asia/Yerevan\");\n        map.put(\"PLT\", \"Asia/Karachi\");\n        map.put(\"IST\", \"Asia/Kolkata\");\n        map.put(\"BST\", \"Asia/Dhaka\");\n        map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n        map.put(\"CTT\", \"Asia/Shanghai\");\n        map.put(\"JST\", \"Asia/Tokyo\");\n        map.put(\"ACT\", \"Australia/Darwin\");\n        map.put(\"AET\", \"Australia/Sydney\");\n        map.put(\"SST\", \"Pacific/Guadalcanal\");\n        map.put(\"NST\", \"Pacific/Auckland\");\n        for (String key : map.keySet()) {\n            String value = map.get(key);\n            TimeZone juZone = TimeZone.getTimeZone(key);\n            DateTimeZone zone = DateTimeZone.forTimeZone(juZone);\n            assertEquals(value, zone.getID());\n//            System.out.println(juZone);\n//            System.out.println(juZone.getDisplayName());\n//            System.out.println(zone);\n//            System.out.println(\"------\");\n        }\n    }\n",
        "begin_line": 243,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 244,col 9)-(line 244,col 70)",
            "(line 245,col 9)-(line 245,col 30)",
            "(line 246,col 9)-(line 246,col 30)",
            "(line 247,col 9)-(line 247,col 30)",
            "(line 248,col 9)-(line 248,col 30)",
            "(line 249,col 9)-(line 249,col 30)",
            "(line 250,col 9)-(line 250,col 30)",
            "(line 251,col 9)-(line 251,col 39)",
            "(line 252,col 9)-(line 252,col 43)",
            "(line 253,col 9)-(line 253,col 44)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 41)",
            "(line 256,col 9)-(line 256,col 42)",
            "(line 257,col 9)-(line 257,col 42)",
            "(line 258,col 9)-(line 258,col 43)",
            "(line 259,col 9)-(line 259,col 55)",
            "(line 260,col 9)-(line 260,col 46)",
            "(line 261,col 9)-(line 261,col 43)",
            "(line 262,col 9)-(line 262,col 57)",
            "(line 263,col 9)-(line 263,col 44)",
            "(line 264,col 9)-(line 264,col 39)",
            "(line 265,col 9)-(line 265,col 40)",
            "(line 266,col 9)-(line 266,col 45)",
            "(line 267,col 9)-(line 267,col 39)",
            "(line 268,col 9)-(line 268,col 39)",
            "(line 269,col 9)-(line 269,col 39)",
            "(line 270,col 9)-(line 270,col 37)",
            "(line 271,col 9)-(line 271,col 43)",
            "(line 272,col 9)-(line 272,col 40)",
            "(line 273,col 9)-(line 273,col 37)",
            "(line 274,col 9)-(line 274,col 43)",
            "(line 275,col 9)-(line 275,col 43)",
            "(line 276,col 9)-(line 276,col 46)",
            "(line 277,col 9)-(line 277,col 43)",
            "(line 278,col 9)-(line 287,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForOffsetHours_int()",
        "snippet": "    public void testForOffsetHours_int() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0));\n        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetHours(3));\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHours(-2));\n        try {\n            DateTimeZone.forOffsetHours(999999);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }        \n",
        "begin_line": 291,
        "end_line": 299,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 292,col 9)-(line 292,col 71)",
            "(line 293,col 9)-(line 293,col 83)",
            "(line 294,col 9)-(line 294,col 84)",
            "(line 295,col 9)-(line 298,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForOffsetHoursMinutes_int_int()",
        "snippet": "    public void testForOffsetHoursMinutes_int_int() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n        assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n        assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(999999, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }        \n",
        "begin_line": 302,
        "end_line": 327,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 81)",
            "(line 304,col 9)-(line 304,col 94)",
            "(line 305,col 9)-(line 305,col 94)",
            "(line 306,col 9)-(line 306,col 95)",
            "(line 307,col 9)-(line 310,col 48)",
            "(line 311,col 9)-(line 314,col 48)",
            "(line 315,col 9)-(line 318,col 48)",
            "(line 319,col 9)-(line 322,col 48)",
            "(line 323,col 9)-(line 326,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForOffsetMillis_int()",
        "snippet": "    public void testForOffsetMillis_int() {\n        assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0));\n        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000));\n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000));\n        assertEquals(DateTimeZone.forID(\"+04:45:17.045\"),\n                DateTimeZone.forOffsetMillis(\n                        4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45));\n    }        \n",
        "begin_line": 330,
        "end_line": 337,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 70)",
            "(line 332,col 9)-(line 332,col 101)",
            "(line 333,col 9)-(line 333,col 102)",
            "(line 334,col 9)-(line 336,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testForTimeZone_TimeZone()",
        "snippet": "    public void testForTimeZone_TimeZone() {\n        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null));\n        \n        DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"Europe/London\"));\n        assertEquals(\"Europe/London\", zone.getID());\n        assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"UTC\")));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"+00:00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00\"));\n        assertSame(DateTimeZone.UTC, zone);\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+01:23\"));\n        assertEquals(\"+01:23\", zone.getID());\n        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT-02:00\"));\n        assertEquals(\"-02:00\", zone.getID());\n        assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));\n        \n        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"EST\"));\n        assertEquals(\"America/New_York\", zone.getID());\n    }\n",
        "begin_line": 340,
        "end_line": 370,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 91)",
            "(line 343,col 9)-(line 343,col 92)",
            "(line 344,col 9)-(line 344,col 52)",
            "(line 345,col 9)-(line 345,col 92)",
            "(line 347,col 9)-(line 347,col 72)",
            "(line 348,col 9)-(line 348,col 43)",
            "(line 350,col 9)-(line 350,col 75)",
            "(line 351,col 9)-(line 351,col 43)",
            "(line 353,col 9)-(line 353,col 75)",
            "(line 354,col 9)-(line 354,col 43)",
            "(line 356,col 9)-(line 356,col 72)",
            "(line 357,col 9)-(line 357,col 43)",
            "(line 359,col 9)-(line 359,col 75)",
            "(line 360,col 9)-(line 360,col 45)",
            "(line 361,col 9)-(line 362,col 50)",
            "(line 364,col 9)-(line 364,col 75)",
            "(line 365,col 9)-(line 365,col 45)",
            "(line 366,col 9)-(line 366,col 98)",
            "(line 368,col 9)-(line 368,col 69)",
            "(line 369,col 9)-(line 369,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testTimeZoneConversion()",
        "snippet": "    public void testTimeZoneConversion() {\n        TimeZone jdkTimeZone = TimeZone.getTimeZone(\"GMT-10\");\n        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n        \n        DateTimeZone jodaTimeZone = DateTimeZone.forTimeZone(jdkTimeZone);\n        assertEquals(\"-10:00\", jodaTimeZone.getID());\n        assertEquals(jdkTimeZone.getRawOffset(), jodaTimeZone.getOffset(0L));\n        \n        TimeZone convertedTimeZone = jodaTimeZone.toTimeZone();\n        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n        \n        assertEquals(jdkTimeZone.getID(), convertedTimeZone.getID());\n        assertEquals(jdkTimeZone.getRawOffset(), convertedTimeZone.getRawOffset());\n    }\n",
        "begin_line": 372,
        "end_line": 385,
        "comment": "",
        "child_ranges": [
            "(line 373,col 9)-(line 373,col 62)",
            "(line 374,col 9)-(line 374,col 55)",
            "(line 376,col 9)-(line 376,col 74)",
            "(line 377,col 9)-(line 377,col 53)",
            "(line 378,col 9)-(line 378,col 77)",
            "(line 380,col 9)-(line 380,col 63)",
            "(line 381,col 9)-(line 381,col 55)",
            "(line 383,col 9)-(line 383,col 69)",
            "(line 384,col 9)-(line 384,col 83)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetAvailableIDs()",
        "snippet": "    public void testGetAvailableIDs() {\n        assertTrue(DateTimeZone.getAvailableIDs().contains(\"UTC\"));\n    }\n",
        "begin_line": 388,
        "end_line": 390,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 67)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testProvider()",
        "snippet": "    public void testProvider() {\n        try {\n            assertNotNull(DateTimeZone.getProvider());\n        \n            Provider provider = DateTimeZone.getProvider();\n            DateTimeZone.setProvider(null);\n            assertEquals(provider.getClass(), DateTimeZone.getProvider().getClass());\n        \n            try {\n                DateTimeZone.setProvider(new MockNullIDSProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n            try {\n                DateTimeZone.setProvider(new MockEmptyIDSProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n            try {\n                DateTimeZone.setProvider(new MockNoUTCProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n            try {\n                DateTimeZone.setProvider(new MockBadUTCProvider());\n                fail();\n            } catch (IllegalArgumentException ex) {}\n        \n            Provider prov = new MockOKProvider();\n            DateTimeZone.setProvider(prov);\n            assertSame(prov, DateTimeZone.getProvider());\n            assertEquals(2, DateTimeZone.getAvailableIDs().size());\n            assertTrue(DateTimeZone.getAvailableIDs().contains(\"UTC\"));\n            assertTrue(DateTimeZone.getAvailableIDs().contains(\"Europe/London\"));\n        } finally {\n            DateTimeZone.setProvider(null);\n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n        }\n        \n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.Provider\", \"org.joda.time.tz.UTCProvider\");\n            DateTimeZone.setProvider(null);\n            assertEquals(UTCProvider.class, DateTimeZone.getProvider().getClass());\n        } finally {\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.Provider\");\n            DateTimeZone.setProvider(null);\n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n        }\n        \n        PrintStream syserr = System.err;\n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.Provider\", \"xxx\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            System.setErr(new PrintStream(baos));\n            \n            DateTimeZone.setProvider(null);\n            \n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n            String str = new String(baos.toByteArray());\n            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n        } finally {\n            System.setErr(syserr);\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.Provider\");\n            DateTimeZone.setProvider(null);\n            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n        }\n    }\n",
        "begin_line": 393,
        "end_line": 456,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 394,col 9)-(line 427,col 9)",
            "(line 429,col 9)-(line 437,col 9)",
            "(line 439,col 9)-(line 439,col 40)",
            "(line 440,col 9)-(line 455,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testProviderSecurity()",
        "snippet": "    public void testProviderSecurity() {\n        if (OLD_JDK) {\n            return;\n        }\n        try {\n            Policy.setPolicy(RESTRICT);\n            System.setSecurityManager(new SecurityManager());\n            DateTimeZone.setProvider(new MockOKProvider());\n            fail();\n        } catch (SecurityException ex) {\n            // ok\n        } finally {\n            System.setSecurityManager(null);\n            Policy.setPolicy(ALLOW);\n        }\n    }\n",
        "begin_line": 458,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 461,col 9)",
            "(line 462,col 9)-(line 472,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNullIDSProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            return null;\n        }\n",
        "begin_line": 476,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 477,col 13)-(line 477,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNullIDSProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 479,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 480,col 13)-(line 480,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockEmptyIDSProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            return new HashSet();\n        }\n",
        "begin_line": 484,
        "end_line": 486,
        "comment": "",
        "child_ranges": [
            "(line 485,col 13)-(line 485,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockEmptyIDSProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 487,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 488,col 13)-(line 488,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNoUTCProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            Set set = new HashSet();\n            set.add(\"Europe/London\");\n            return set;\n        }\n",
        "begin_line": 492,
        "end_line": 496,
        "comment": "",
        "child_ranges": [
            "(line 493,col 13)-(line 493,col 36)",
            "(line 494,col 13)-(line 494,col 37)",
            "(line 495,col 13)-(line 495,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockNoUTCProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 497,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 498,col 13)-(line 498,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockBadUTCProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            Set set = new HashSet();\n            set.add(\"UTC\");\n            set.add(\"Europe/London\");\n            return set;\n        }\n",
        "begin_line": 502,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 503,col 13)-(line 503,col 36)",
            "(line 504,col 13)-(line 504,col 27)",
            "(line 505,col 13)-(line 505,col 37)",
            "(line 506,col 13)-(line 506,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockBadUTCProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return null;\n        }\n",
        "begin_line": 508,
        "end_line": 510,
        "comment": "",
        "child_ranges": [
            "(line 509,col 13)-(line 509,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKProvider.getAvailableIDs()",
        "snippet": "        public Set getAvailableIDs() {\n            Set set = new HashSet();\n            set.add(\"UTC\");\n            set.add(\"Europe/London\");\n            return set;\n        }\n",
        "begin_line": 513,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 514,col 13)-(line 514,col 36)",
            "(line 515,col 13)-(line 515,col 27)",
            "(line 516,col 13)-(line 516,col 37)",
            "(line 517,col 13)-(line 517,col 23)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKProvider.getZone(java.lang.String)",
        "snippet": "        public DateTimeZone getZone(String id) {\n            return DateTimeZone.UTC;\n        }\n",
        "begin_line": 519,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 520,col 13)-(line 520,col 36)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testNameProvider()",
        "snippet": "    public void testNameProvider() {\n        try {\n            assertNotNull(DateTimeZone.getNameProvider());\n        \n            NameProvider provider = DateTimeZone.getNameProvider();\n            DateTimeZone.setNameProvider(null);\n            assertEquals(provider.getClass(), DateTimeZone.getNameProvider().getClass());\n        \n            provider = new MockOKButNullNameProvider();\n            DateTimeZone.setNameProvider(provider);\n            assertSame(provider, DateTimeZone.getNameProvider());\n            \n            assertEquals(\"+00:00\", DateTimeZone.UTC.getShortName(TEST_TIME_SUMMER));\n            assertEquals(\"+00:00\", DateTimeZone.UTC.getName(TEST_TIME_SUMMER));\n        } finally {\n            DateTimeZone.setNameProvider(null);\n        }\n        \n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"org.joda.time.tz.DefaultNameProvider\");\n            DateTimeZone.setNameProvider(null);\n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n        } finally {\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.NameProvider\");\n            DateTimeZone.setNameProvider(null);\n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n        }\n        \n        PrintStream syserr = System.err;\n        try {\n            System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"xxx\");\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            System.setErr(new PrintStream(baos));\n            \n            DateTimeZone.setNameProvider(null);\n            \n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n            String str = new String(baos.toByteArray());\n            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n        } finally {\n            System.setErr(syserr);\n            System.getProperties().remove(\"org.joda.time.DateTimeZone.NameProvider\");\n            DateTimeZone.setNameProvider(null);\n            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n        }\n    }        \n",
        "begin_line": 525,
        "end_line": 570,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 526,col 9)-(line 541,col 9)",
            "(line 543,col 9)-(line 551,col 9)",
            "(line 553,col 9)-(line 553,col 40)",
            "(line 554,col 9)-(line 569,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testNameProviderSecurity()",
        "snippet": "    public void testNameProviderSecurity() {\n        if (OLD_JDK) {\n            return;\n        }\n        try {\n            Policy.setPolicy(RESTRICT);\n            System.setSecurityManager(new SecurityManager());\n            DateTimeZone.setNameProvider(new MockOKButNullNameProvider());\n            fail();\n        } catch (SecurityException ex) {\n            // ok\n        } finally {\n            System.setSecurityManager(null);\n            Policy.setPolicy(ALLOW);\n        }\n    }\n",
        "begin_line": 572,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 573,col 9)-(line 575,col 9)",
            "(line 576,col 9)-(line 586,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKButNullNameProvider.getShortName(java.util.Locale, java.lang.String, java.lang.String)",
        "snippet": "        public String getShortName(Locale locale, String id, String nameKey) {\n            return null;\n        }\n",
        "begin_line": 590,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 591,col 13)-(line 591,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockOKButNullNameProvider.getName(java.util.Locale, java.lang.String, java.lang.String)",
        "snippet": "        public String getName(Locale locale, String id, String nameKey) {\n            return null;\n        }\n",
        "begin_line": 593,
        "end_line": 595,
        "comment": "",
        "child_ranges": [
            "(line 594,col 13)-(line 594,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length);\n        assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers()));\n        try {\n            new DateTimeZone(null) {\n                public String getNameKey(long instant) {\n                    return null;\n                }\n                public int getOffset(long instant) {\n                    return 0;\n                }\n                public int getStandardOffset(long instant) {\n                    return 0;\n                }\n                public boolean isFixed() {\n                    return false;\n                }\n                public long nextTransition(long instant) {\n                    return 0;\n                }\n                public long previousTransition(long instant) {\n                    return 0;\n                }\n                public boolean equals(Object object) {\n                    return false;\n                }\n            };\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 599,
        "end_line": 627,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 600,col 9)-(line 600,col 77)",
            "(line 601,col 9)-(line 601,col 105)",
            "(line 602,col 9)-(line 626,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-d030c8e5-2495-47d3-b779-54d1066e77f3.getNameKey(long)",
        "snippet": "                public String getNameKey(long instant) {\n                    return null;\n                }\n",
        "begin_line": 604,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 605,col 21)-(line 605,col 32)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-16a410a5-dee4-472f-9e8f-44736fb71330.getOffset(long)",
        "snippet": "                public int getOffset(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 607,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 608,col 21)-(line 608,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-00f5c6e6-89b3-4c5d-9080-414d045ee902.getStandardOffset(long)",
        "snippet": "                public int getStandardOffset(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 610,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 611,col 21)-(line 611,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-04979f71-2180-4802-bca3-149a60b20ece.isFixed()",
        "snippet": "                public boolean isFixed() {\n                    return false;\n                }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "",
        "child_ranges": [
            "(line 614,col 21)-(line 614,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-2c2cd21f-bad2-4f7e-8778-47511a57429a.nextTransition(long)",
        "snippet": "                public long nextTransition(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 616,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 617,col 21)-(line 617,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-444ef641-822a-404c-aef7-80aea9d9d40a.previousTransition(long)",
        "snippet": "                public long previousTransition(long instant) {\n                    return 0;\n                }\n",
        "begin_line": 619,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 620,col 21)-(line 620,col 29)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.Anonymous-a2c6a41a-d9a1-4437-9ef1-abb23daa74f4.equals(java.lang.Object)",
        "snippet": "                public boolean equals(Object object) {\n                    return false;\n                }\n",
        "begin_line": 622,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 623,col 21)-(line 623,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetID()",
        "snippet": "    public void testGetID() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(\"Europe/Paris\", zone.getID());\n    }\n",
        "begin_line": 630,
        "end_line": 633,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 631,col 9)-(line 631,col 63)",
            "(line 632,col 9)-(line 632,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetNameKey()",
        "snippet": "    public void testGetNameKey() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n        assertEquals(\"BST\", zone.getNameKey(TEST_TIME_SUMMER));\n        assertEquals(\"GMT\", zone.getNameKey(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 635,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 636,col 9)-(line 636,col 64)",
            "(line 637,col 9)-(line 637,col 63)",
            "(line 638,col 9)-(line 638,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetShortName()",
        "snippet": "    public void testGetShortName() {}\n",
        "begin_line": 641,
        "end_line": 641,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetShortNameProviderName()",
        "snippet": "    public void testGetShortNameProviderName() {\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, \"Europe/London\", \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, null, \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(Locale.ENGLISH, \"Europe/London\", null));\n        assertEquals(null, DateTimeZone.getNameProvider().getShortName(null, null, null));\n    }\n",
        "begin_line": 650,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 651,col 9)-(line 651,col 102)",
            "(line 652,col 9)-(line 652,col 101)",
            "(line 653,col 9)-(line 653,col 111)",
            "(line 654,col 9)-(line 654,col 90)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetShortNameNullKey()",
        "snippet": "    public void testGetShortNameNullKey() {\n        DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n        assertEquals(\"Europe/London\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n    }\n",
        "begin_line": 657,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 658,col 9)-(line 658,col 66)",
            "(line 659,col 9)-(line 659,col 91)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetName()",
        "snippet": "    public void testGetName() {}\n",
        "begin_line": 662,
        "end_line": 662,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetNameProviderName()",
        "snippet": "    public void testGetNameProviderName() {\n        assertEquals(null, DateTimeZone.getNameProvider().getName(null, \"Europe/London\", \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, null, \"BST\"));\n        assertEquals(null, DateTimeZone.getNameProvider().getName(Locale.ENGLISH, \"Europe/London\", null));\n        assertEquals(null, DateTimeZone.getNameProvider().getName(null, null, null));\n    }\n",
        "begin_line": 672,
        "end_line": 677,
        "comment": "",
        "child_ranges": [
            "(line 673,col 9)-(line 673,col 97)",
            "(line 674,col 9)-(line 674,col 96)",
            "(line 675,col 9)-(line 675,col 106)",
            "(line 676,col 9)-(line 676,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetNameNullKey()",
        "snippet": "    public void testGetNameNullKey() {\n        DateTimeZone zone = new MockDateTimeZone(\"Europe/London\");\n        assertEquals(\"Europe/London\", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n    }\n",
        "begin_line": 679,
        "end_line": 682,
        "comment": "",
        "child_ranges": [
            "(line 680,col 9)-(line 680,col 66)",
            "(line 681,col 9)-(line 681,col 86)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.MockDateTimeZone(java.lang.String)",
        "snippet": "        public MockDateTimeZone(String id) {\n            super(id);\n        }\n",
        "begin_line": 685,
        "end_line": 687,
        "comment": "",
        "child_ranges": [
            "(line 686,col 13)-(line 686,col 22)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.getNameKey(long)",
        "snippet": "        public String getNameKey(long instant) {\n            return null;  // null\n        }\n",
        "begin_line": 688,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 689,col 13)-(line 689,col 24)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.getOffset(long)",
        "snippet": "        public int getOffset(long instant) {\n            return 0;\n        }\n",
        "begin_line": 691,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 692,col 13)-(line 692,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.getStandardOffset(long)",
        "snippet": "        public int getStandardOffset(long instant) {\n            return 0;\n        }\n",
        "begin_line": 694,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 695,col 13)-(line 695,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.isFixed()",
        "snippet": "        public boolean isFixed() {\n            return false;\n        }\n",
        "begin_line": 697,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 698,col 13)-(line 698,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.nextTransition(long)",
        "snippet": "        public long nextTransition(long instant) {\n            return 0;\n        }\n",
        "begin_line": 700,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 701,col 13)-(line 701,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.previousTransition(long)",
        "snippet": "        public long previousTransition(long instant) {\n            return 0;\n        }\n",
        "begin_line": 703,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 704,col 13)-(line 704,col 21)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.MockDateTimeZone.equals(java.lang.Object)",
        "snippet": "        public boolean equals(Object object) {\n            return false;\n        }\n",
        "begin_line": 706,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 707,col 13)-(line 707,col 25)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffset_long()",
        "snippet": "    public void testGetOffset_long() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n        \n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n        \n        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n        \n        assertEquals(false, zone.isStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 712,
        "end_line": 725,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 713,col 9)-(line 713,col 63)",
            "(line 714,col 9)-(line 714,col 95)",
            "(line 715,col 9)-(line 715,col 95)",
            "(line 717,col 9)-(line 717,col 103)",
            "(line 718,col 9)-(line 718,col 103)",
            "(line 720,col 9)-(line 720,col 104)",
            "(line 721,col 9)-(line 721,col 104)",
            "(line 723,col 9)-(line 723,col 69)",
            "(line 724,col 9)-(line 724,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffset_RI()",
        "snippet": "    public void testGetOffset_RI() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n        \n        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n    }\n",
        "begin_line": 727,
        "end_line": 733,
        "comment": "",
        "child_ranges": [
            "(line 728,col 9)-(line 728,col 63)",
            "(line 729,col 9)-(line 729,col 108)",
            "(line 730,col 9)-(line 730,col 108)",
            "(line 732,col 9)-(line 732,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffsetFixed()",
        "snippet": "    public void testGetOffsetFixed() {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n        \n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n        \n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n        \n        assertEquals(true, zone.isStandardOffset(TEST_TIME_SUMMER));\n        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 735,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 736,col 9)-(line 736,col 57)",
            "(line 737,col 9)-(line 737,col 95)",
            "(line 738,col 9)-(line 738,col 95)",
            "(line 740,col 9)-(line 740,col 103)",
            "(line 741,col 9)-(line 741,col 103)",
            "(line 743,col 9)-(line 743,col 104)",
            "(line 744,col 9)-(line 744,col 104)",
            "(line 746,col 9)-(line 746,col 68)",
            "(line 747,col 9)-(line 747,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetOffsetFixed_RI()",
        "snippet": "    public void testGetOffsetFixed_RI() {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n        \n        assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n    }\n",
        "begin_line": 750,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 751,col 9)-(line 751,col 57)",
            "(line 752,col 9)-(line 752,col 108)",
            "(line 753,col 9)-(line 753,col 108)",
            "(line 755,col 9)-(line 755,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testGetMillisKeepLocal()",
        "snippet": "    public void testGetMillisKeepLocal() {\n        long millisLondon = TEST_TIME_SUMMER;\n        long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;\n        \n        assertEquals(millisLondon, LONDON.getMillisKeepLocal(LONDON, millisLondon));\n        assertEquals(millisParis, LONDON.getMillisKeepLocal(LONDON, millisParis));\n        assertEquals(millisLondon, PARIS.getMillisKeepLocal(PARIS, millisLondon));\n        assertEquals(millisParis, PARIS.getMillisKeepLocal(PARIS, millisParis));\n        \n        assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));\n        assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));\n        \n        DateTimeZone zone = DateTimeZone.getDefault();\n        try {\n            DateTimeZone.setDefault(LONDON);\n            assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis));\n        } finally {\n            DateTimeZone.setDefault(zone);\n        }\n    }\n",
        "begin_line": 759,
        "end_line": 778,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 760,col 9)-(line 760,col 45)",
            "(line 761,col 9)-(line 761,col 85)",
            "(line 763,col 9)-(line 763,col 84)",
            "(line 764,col 9)-(line 764,col 82)",
            "(line 765,col 9)-(line 765,col 82)",
            "(line 766,col 9)-(line 766,col 80)",
            "(line 768,col 9)-(line 768,col 82)",
            "(line 769,col 9)-(line 769,col 82)",
            "(line 771,col 9)-(line 771,col 54)",
            "(line 772,col 9)-(line 777,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testIsFixed()",
        "snippet": "    public void testIsFixed() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(false, zone.isFixed());\n        assertEquals(true, DateTimeZone.UTC.isFixed());\n    }\n",
        "begin_line": 781,
        "end_line": 785,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 782,col 9)-(line 782,col 63)",
            "(line 783,col 9)-(line 783,col 44)",
            "(line 784,col 9)-(line 784,col 55)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testTransitionFixed()",
        "snippet": "    public void testTransitionFixed() {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        assertEquals(TEST_TIME_SUMMER, zone.nextTransition(TEST_TIME_SUMMER));\n        assertEquals(TEST_TIME_WINTER, zone.nextTransition(TEST_TIME_WINTER));\n        assertEquals(TEST_TIME_SUMMER, zone.previousTransition(TEST_TIME_SUMMER));\n        assertEquals(TEST_TIME_WINTER, zone.previousTransition(TEST_TIME_WINTER));\n    }\n",
        "begin_line": 788,
        "end_line": 794,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 789,col 9)-(line 789,col 57)",
            "(line 790,col 9)-(line 790,col 78)",
            "(line 791,col 9)-(line 791,col 78)",
            "(line 792,col 9)-(line 792,col 82)",
            "(line 793,col 9)-(line 793,col 82)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testIsLocalDateTimeGap_Berlin()",
        "snippet": "    public void testIsLocalDateTimeGap_Berlin() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Berlin\");\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 1, 59, 59, 99)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 0)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 30)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 2, 59, 59, 99)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 3, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 25, 4, 0)));\n        \n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 1, 30)));  // before overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 2, 30)));  // overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 10, 28, 3, 30)));  // after overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));\n    }\n",
        "begin_line": 831,
        "end_line": 845,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 832,col 9)-(line 832,col 64)",
            "(line 833,col 9)-(line 833,col 91)",
            "(line 834,col 9)-(line 834,col 100)",
            "(line 835,col 9)-(line 835,col 90)",
            "(line 836,col 9)-(line 836,col 91)",
            "(line 837,col 9)-(line 837,col 99)",
            "(line 838,col 9)-(line 838,col 91)",
            "(line 839,col 9)-(line 839,col 91)",
            "(line 841,col 9)-(line 841,col 93)",
            "(line 842,col 9)-(line 842,col 93)",
            "(line 843,col 9)-(line 843,col 93)",
            "(line 844,col 9)-(line 844,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testIsLocalDateTimeGap_NewYork()",
        "snippet": "    public void testIsLocalDateTimeGap_NewYork() {\n        DateTimeZone zone = DateTimeZone.forID(\"America/New_York\");\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 1, 59, 59, 99)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 0)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 30)));\n        assertEquals(true, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 2, 59, 59, 99)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 3, 0)));\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 3, 11, 4, 0)));\n        \n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 0, 30)));  // before overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 1, 30)));  // overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 11, 4, 2, 30)));  // after overlap\n        assertEquals(false, zone.isLocalDateTimeGap(new LocalDateTime(2007, 12, 24, 12, 34)));\n    }\n",
        "begin_line": 848,
        "end_line": 862,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 849,col 9)-(line 849,col 67)",
            "(line 850,col 9)-(line 850,col 91)",
            "(line 851,col 9)-(line 851,col 100)",
            "(line 852,col 9)-(line 852,col 90)",
            "(line 853,col 9)-(line 853,col 91)",
            "(line 854,col 9)-(line 854,col 99)",
            "(line 855,col 9)-(line 855,col 91)",
            "(line 856,col 9)-(line 856,col 91)",
            "(line 858,col 9)-(line 858,col 92)",
            "(line 859,col 9)-(line 859,col 92)",
            "(line 860,col 9)-(line 860,col 92)",
            "(line 861,col 9)-(line 861,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testToTimeZone()",
        "snippet": "    public void testToTimeZone() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        TimeZone tz = zone.toTimeZone();\n        assertEquals(\"Europe/Paris\", tz.getID());\n    }\n",
        "begin_line": 865,
        "end_line": 869,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 866,col 9)-(line 866,col 63)",
            "(line 867,col 9)-(line 867,col 40)",
            "(line 868,col 9)-(line 868,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testEqualsHashCode()",
        "snippet": "    public void testEqualsHashCode() {\n        DateTimeZone zone1 = DateTimeZone.forID(\"Europe/Paris\");\n        DateTimeZone zone2 = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(true, zone1.equals(zone1));\n        assertEquals(true, zone1.equals(zone2));\n        assertEquals(true, zone2.equals(zone1));\n        assertEquals(true, zone2.equals(zone2));\n        assertEquals(true, zone1.hashCode() == zone2.hashCode());\n        \n        DateTimeZone zone3 = DateTimeZone.forID(\"Europe/London\");\n        assertEquals(true, zone3.equals(zone3));\n        assertEquals(false, zone1.equals(zone3));\n        assertEquals(false, zone2.equals(zone3));\n        assertEquals(false, zone3.equals(zone1));\n        assertEquals(false, zone3.equals(zone2));\n        assertEquals(false, zone1.hashCode() == zone3.hashCode());\n        assertEquals(true, zone3.hashCode() == zone3.hashCode());\n        \n        DateTimeZone zone4 = DateTimeZone.forID(\"+01:00\");\n        assertEquals(true, zone4.equals(zone4));\n        assertEquals(false, zone1.equals(zone4));\n        assertEquals(false, zone2.equals(zone4));\n        assertEquals(false, zone3.equals(zone4));\n        assertEquals(false, zone4.equals(zone1));\n        assertEquals(false, zone4.equals(zone2));\n        assertEquals(false, zone4.equals(zone3));\n        assertEquals(false, zone1.hashCode() == zone4.hashCode());\n        assertEquals(true, zone4.hashCode() == zone4.hashCode());\n        \n        DateTimeZone zone5 = DateTimeZone.forID(\"+02:00\");\n        assertEquals(true, zone5.equals(zone5));\n        assertEquals(false, zone1.equals(zone5));\n        assertEquals(false, zone2.equals(zone5));\n        assertEquals(false, zone3.equals(zone5));\n        assertEquals(false, zone4.equals(zone5));\n        assertEquals(false, zone5.equals(zone1));\n        assertEquals(false, zone5.equals(zone2));\n        assertEquals(false, zone5.equals(zone3));\n        assertEquals(false, zone5.equals(zone4));\n        assertEquals(false, zone1.hashCode() == zone5.hashCode());\n        assertEquals(true, zone5.hashCode() == zone5.hashCode());\n    }\n",
        "begin_line": 872,
        "end_line": 913,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 873,col 9)-(line 873,col 64)",
            "(line 874,col 9)-(line 874,col 64)",
            "(line 875,col 9)-(line 875,col 48)",
            "(line 876,col 9)-(line 876,col 48)",
            "(line 877,col 9)-(line 877,col 48)",
            "(line 878,col 9)-(line 878,col 48)",
            "(line 879,col 9)-(line 879,col 65)",
            "(line 881,col 9)-(line 881,col 65)",
            "(line 882,col 9)-(line 882,col 48)",
            "(line 883,col 9)-(line 883,col 49)",
            "(line 884,col 9)-(line 884,col 49)",
            "(line 885,col 9)-(line 885,col 49)",
            "(line 886,col 9)-(line 886,col 49)",
            "(line 887,col 9)-(line 887,col 66)",
            "(line 888,col 9)-(line 888,col 65)",
            "(line 890,col 9)-(line 890,col 58)",
            "(line 891,col 9)-(line 891,col 48)",
            "(line 892,col 9)-(line 892,col 49)",
            "(line 893,col 9)-(line 893,col 49)",
            "(line 894,col 9)-(line 894,col 49)",
            "(line 895,col 9)-(line 895,col 49)",
            "(line 896,col 9)-(line 896,col 49)",
            "(line 897,col 9)-(line 897,col 49)",
            "(line 898,col 9)-(line 898,col 66)",
            "(line 899,col 9)-(line 899,col 65)",
            "(line 901,col 9)-(line 901,col 58)",
            "(line 902,col 9)-(line 902,col 48)",
            "(line 903,col 9)-(line 903,col 49)",
            "(line 904,col 9)-(line 904,col 49)",
            "(line 905,col 9)-(line 905,col 49)",
            "(line 906,col 9)-(line 906,col 49)",
            "(line 907,col 9)-(line 907,col 49)",
            "(line 908,col 9)-(line 908,col 49)",
            "(line 909,col 9)-(line 909,col 49)",
            "(line 910,col 9)-(line 910,col 49)",
            "(line 911,col 9)-(line 911,col 66)",
            "(line 912,col 9)-(line 912,col 65)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testToString()",
        "snippet": "    public void testToString() {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        assertEquals(\"Europe/Paris\", zone.toString());\n        assertEquals(\"UTC\", DateTimeZone.UTC.toString());\n    }\n",
        "begin_line": 916,
        "end_line": 920,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 917,col 9)-(line 917,col 63)",
            "(line 918,col 9)-(line 918,col 54)",
            "(line 919,col 9)-(line 919,col 57)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testSerialization1()",
        "snippet": "    public void testSerialization1() throws Exception {\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(zone);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        DateTimeZone result = (DateTimeZone) ois.readObject();\n        ois.close();\n        \n        assertSame(zone, result);\n    }\n",
        "begin_line": 923,
        "end_line": 938,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 924,col 9)-(line 924,col 63)",
            "(line 926,col 9)-(line 926,col 65)",
            "(line 927,col 9)-(line 927,col 62)",
            "(line 928,col 9)-(line 928,col 30)",
            "(line 929,col 9)-(line 929,col 42)",
            "(line 930,col 9)-(line 930,col 20)",
            "(line 932,col 9)-(line 932,col 68)",
            "(line 933,col 9)-(line 933,col 60)",
            "(line 934,col 9)-(line 934,col 62)",
            "(line 935,col 9)-(line 935,col 20)",
            "(line 937,col 9)-(line 937,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testSerialization2()",
        "snippet": "    public void testSerialization2() throws Exception {\n        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n        \n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(zone);\n        byte[] bytes = baos.toByteArray();\n        oos.close();\n        \n        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(bais);\n        DateTimeZone result = (DateTimeZone) ois.readObject();\n        ois.close();\n        \n        assertSame(zone, result);\n    }\n",
        "begin_line": 941,
        "end_line": 956,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 942,col 9)-(line 942,col 57)",
            "(line 944,col 9)-(line 944,col 65)",
            "(line 945,col 9)-(line 945,col 62)",
            "(line 946,col 9)-(line 946,col 30)",
            "(line 947,col 9)-(line 947,col 42)",
            "(line 948,col 9)-(line 948,col 20)",
            "(line 950,col 9)-(line 950,col 68)",
            "(line 951,col 9)-(line 951,col 60)",
            "(line 952,col 9)-(line 952,col 62)",
            "(line 953,col 9)-(line 953,col 20)",
            "(line 955,col 9)-(line 955,col 33)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testCommentParse()",
        "snippet": "    public void testCommentParse() throws Exception {\n        // A bug in ZoneInfoCompiler's handling of comments broke Europe/Athens\n        // after 1980. This test is included to make sure it doesn't break again.\n\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/Athens\");\n        DateTime dt = new DateTime(2005, 5, 5, 20, 10, 15, 0, zone);\n        assertEquals(1115313015000L, dt.getMillis());\n    }\n",
        "begin_line": 958,
        "end_line": 965,
        "comment": "",
        "child_ranges": [
            "(line 962,col 9)-(line 962,col 64)",
            "(line 963,col 9)-(line 963,col 68)",
            "(line 964,col 9)-(line 964,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysLondon()",
        "snippet": "    public void testPatchedNameKeysLondon() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n        \n        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 967,
        "end_line": 975,
        "comment": "",
        "child_ranges": [
            "(line 969,col 9)-(line 969,col 64)",
            "(line 971,col 9)-(line 971,col 60)",
            "(line 972,col 9)-(line 972,col 52)",
            "(line 973,col 9)-(line 973,col 66)",
            "(line 974,col 9)-(line 974,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysSydney()",
        "snippet": "    public void testPatchedNameKeysSydney() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Australia/Sydney\");\n        \n        DateTime now = new DateTime(2007, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 977,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 979,col 9)-(line 979,col 67)",
            "(line 981,col 9)-(line 981,col 60)",
            "(line 982,col 9)-(line 982,col 52)",
            "(line 983,col 9)-(line 983,col 66)",
            "(line 984,col 9)-(line 984,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysSydneyHistoric()",
        "snippet": "    public void testPatchedNameKeysSydneyHistoric() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Australia/Sydney\");\n        \n        DateTime now = new DateTime(1996, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 987,
        "end_line": 995,
        "comment": "",
        "child_ranges": [
            "(line 989,col 9)-(line 989,col 67)",
            "(line 991,col 9)-(line 991,col 60)",
            "(line 992,col 9)-(line 992,col 52)",
            "(line 993,col 9)-(line 993,col 66)",
            "(line 994,col 9)-(line 994,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZone",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "signature": "org.joda.time.TestDateTimeZone.testPatchedNameKeysGazaHistoric()",
        "snippet": "    public void testPatchedNameKeysGazaHistoric() throws Exception {\n        // the tz database does not have unique name keys [1716305]\n        DateTimeZone zone = DateTimeZone.forID(\"Africa/Johannesburg\");\n        \n        DateTime now = new DateTime(1943, 1, 1, 0, 0, 0, 0);\n        String str1 = zone.getName(now.getMillis());\n        String str2 = zone.getName(now.plusMonths(6).getMillis());\n        assertEquals(false, str1.equals(str2));\n    }\n",
        "begin_line": 997,
        "end_line": 1005,
        "comment": "",
        "child_ranges": [
            "(line 999,col 9)-(line 999,col 70)",
            "(line 1001,col 9)-(line 1001,col 60)",
            "(line 1002,col 9)-(line 1002,col 52)",
            "(line 1003,col 9)-(line 1003,col 66)",
            "(line 1004,col 9)-(line 1004,col 47)"
        ]
    }
]