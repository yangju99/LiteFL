[
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsDef1()",
        "snippet": "  public void testGoogIsDef1() throws Exception {\n    testClosureFunction(\"goog.isDef\",\n        createOptionalType(NUMBER_TYPE),\n        NUMBER_TYPE,\n        createOptionalType(NUMBER_TYPE));\n  }\n",
        "begin_line": 29,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 30,col 5)-(line 33,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsDef2()",
        "snippet": "  public void testGoogIsDef2() throws Exception {\n    testClosureFunction(\"goog.isDef\",\n        createNullableType(NUMBER_TYPE),\n        createNullableType(NUMBER_TYPE),\n        createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 36,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 40,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsNull1()",
        "snippet": "  public void testGoogIsNull1() throws Exception {\n    testClosureFunction(\"goog.isNull\",\n        createOptionalType(NUMBER_TYPE),\n        NULL_TYPE,\n        createOptionalType(NUMBER_TYPE));\n  }\n",
        "begin_line": 43,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 44,col 5)-(line 47,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsNull2()",
        "snippet": "  public void testGoogIsNull2() throws Exception {\n    testClosureFunction(\"goog.isNull\",\n        createNullableType(NUMBER_TYPE),\n        NULL_TYPE,\n        NUMBER_TYPE);\n  }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 54,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsDefAndNotNull1()",
        "snippet": "  public void testGoogIsDefAndNotNull1() throws Exception {\n    testClosureFunction(\"goog.isDefAndNotNull\",\n        createOptionalType(NUMBER_TYPE),\n        NUMBER_TYPE,\n        createOptionalType(NUMBER_TYPE));\n  }\n",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "child_ranges": [
            "(line 58,col 5)-(line 61,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsDefAndNotNull2()",
        "snippet": "  public void testGoogIsDefAndNotNull2() throws Exception {\n    testClosureFunction(\"goog.isDefAndNotNull\",\n        createNullableType(NUMBER_TYPE),\n        NUMBER_TYPE,\n        createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 64,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 65,col 5)-(line 68,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsDefAndNotNull3()",
        "snippet": "  public void testGoogIsDefAndNotNull3() throws Exception {\n    testClosureFunction(\"goog.isDefAndNotNull\",\n        createOptionalType(createNullableType(NUMBER_TYPE)),\n        NUMBER_TYPE,\n        createOptionalType(createNullableType(NUMBER_TYPE)));\n  }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 75,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsString1()",
        "snippet": "  public void testGoogIsString1() throws Exception {\n    testClosureFunction(\"goog.isString\",\n        createNullableType(STRING_TYPE),\n        STRING_TYPE,\n        NULL_TYPE);\n  }\n",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 82,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsString2()",
        "snippet": "  public void testGoogIsString2() throws Exception {\n    testClosureFunction(\"goog.isString\",\n        createNullableType(NUMBER_TYPE),\n        createNullableType(NUMBER_TYPE),\n        createNullableType(NUMBER_TYPE));\n  }\n",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 89,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsBoolean1()",
        "snippet": "  public void testGoogIsBoolean1() throws Exception {\n    testClosureFunction(\"goog.isBoolean\",\n        createNullableType(BOOLEAN_TYPE),\n        BOOLEAN_TYPE,\n        NULL_TYPE);\n  }\n",
        "begin_line": 92,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 96,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsBoolean2()",
        "snippet": "  public void testGoogIsBoolean2() throws Exception {\n    testClosureFunction(\"goog.isBoolean\",\n        createUnionType(BOOLEAN_TYPE, STRING_TYPE, NO_OBJECT_TYPE),\n        BOOLEAN_TYPE,\n        createUnionType(STRING_TYPE, NO_OBJECT_TYPE));\n  }\n",
        "begin_line": 99,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 100,col 5)-(line 103,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsNumber()",
        "snippet": "  public void testGoogIsNumber() throws Exception {\n    testClosureFunction(\"goog.isNumber\",\n        createNullableType(NUMBER_TYPE),\n        NUMBER_TYPE,\n        NULL_TYPE);\n  }\n",
        "begin_line": 106,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 110,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsFunction()",
        "snippet": "  public void testGoogIsFunction() throws Exception {\n    testClosureFunction(\"goog.isFunction\",\n        createNullableType(OBJECT_FUNCTION_TYPE),\n        OBJECT_FUNCTION_TYPE,\n        NULL_TYPE);\n  }\n",
        "begin_line": 113,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 117,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsFunction2()",
        "snippet": "  public void testGoogIsFunction2() throws Exception {\n    testClosureFunction(\"goog.isFunction\",\n        OBJECT_NUMBER_STRING_BOOLEAN,\n        U2U_CONSTRUCTOR_TYPE,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n  }\n",
        "begin_line": 120,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 124,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsFunction3()",
        "snippet": "  public void testGoogIsFunction3() throws Exception {\n    testClosureFunction(\"goog.isFunction\",\n        createUnionType(U2U_CONSTRUCTOR_TYPE,NUMBER_STRING_BOOLEAN),\n        U2U_CONSTRUCTOR_TYPE,\n        NUMBER_STRING_BOOLEAN);\n  }\n",
        "begin_line": 127,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 128,col 5)-(line 131,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsArray()",
        "snippet": "  public void testGoogIsArray() throws Exception {\n    testClosureFunction(\"goog.isArray\",\n        OBJECT_TYPE,\n        ARRAY_TYPE,\n        OBJECT_TYPE);\n  }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 135,col 5)-(line 138,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsArrayOnNull()",
        "snippet": "  public void testGoogIsArrayOnNull() throws Exception {\n    testClosureFunction(\"goog.isArray\",\n        null,\n        ARRAY_TYPE,\n        null);\n  }\n",
        "begin_line": 141,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 142,col 5)-(line 145,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsFunctionOnNull()",
        "snippet": "  public void testGoogIsFunctionOnNull() throws Exception {\n    testClosureFunction(\"goog.isFunction\",\n        null,\n        U2U_CONSTRUCTOR_TYPE,\n        null);\n  }\n",
        "begin_line": 148,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 152,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testGoogIsObjectOnNull()",
        "snippet": "  public void testGoogIsObjectOnNull() throws Exception {\n    testClosureFunction(\"goog.isObject\",\n        null,\n        OBJECT_TYPE,\n        null);\n  }\n",
        "begin_line": 155,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 156,col 5)-(line 159,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest.testClosureFunction(java.lang.String, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void testClosureFunction(String function, JSType type,\n      JSType trueType, JSType falseType) {\n    // function(a) where a : type\n    Node n = compiler.parseTestCode(\"var a; \" + function + \"(a)\");\n    Node call = n.getLastChild().getLastChild();\n    Node name = call.getLastChild();\n\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(n, null);\n    FlowScope flowScope = LinkedFlowScope.createEntryLattice(scope);\n\n    assertEquals(Token.CALL, call.getType());\n    assertEquals(Token.NAME, name.getType());\n\n    GoogleCodingConvention convention = new GoogleCodingConvention();\n    flowScope.inferSlotType(\"a\", type);\n    ClosureReverseAbstractInterpreter rai =\n        new ClosureReverseAbstractInterpreter(convention, registry);\n\n    // trueScope\n    Asserts.assertTypeEquals(\n        trueType,\n        rai.getPreciserScopeKnowingConditionOutcome(call, flowScope, true)\n        .getSlot(\"a\").getType());\n\n    // falseScope\n    Asserts.assertTypeEquals(\n        falseType,\n        rai.getPreciserScopeKnowingConditionOutcome(call, flowScope, false)\n        .getSlot(\"a\").getType());\n  }\n",
        "begin_line": 162,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 66)",
            "(line 166,col 5)-(line 166,col 48)",
            "(line 167,col 5)-(line 167,col 36)",
            "(line 169,col 5)-(line 169,col 75)",
            "(line 170,col 5)-(line 170,col 68)",
            "(line 172,col 5)-(line 172,col 45)",
            "(line 173,col 5)-(line 173,col 45)",
            "(line 175,col 5)-(line 175,col 69)",
            "(line 176,col 5)-(line 176,col 39)",
            "(line 177,col 5)-(line 178,col 68)",
            "(line 181,col 5)-(line 184,col 33)",
            "(line 187,col 5)-(line 190,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n\n    interpreter = new SemanticReverseAbstractInterpreter(\n        codingConvention, registry);\n  }\n",
        "begin_line": 36,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 18)",
            "(line 40,col 5)-(line 41,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.newScope()",
        "snippet": "  public FlowScope newScope() {\n    Scope globalScope = Scope.createGlobalScope(new Node(Token.EMPTY));\n    functionScope = new Scope(globalScope, new Node(Token.EMPTY));\n    return LinkedFlowScope.createEntryLattice(functionScope);\n  }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 5)-(line 45,col 71)",
            "(line 46,col 5)-(line 46,col 66)",
            "(line 47,col 5)-(line 47,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testNameCondition()",
        "snippet": "  public void testNameCondition() throws Exception {\n    FlowScope blind = newScope();\n    Node condition = createVar(blind, \"a\", createNullableType(STRING_TYPE));\n\n    // true outcome.\n    FlowScope informedTrue = interpreter.\n        getPreciserScopeKnowingConditionOutcome(condition, blind, true);\n    assertTypeEquals(STRING_TYPE, getVarType(informedTrue, \"a\"));\n\n    // false outcome.\n    FlowScope informedFalse = interpreter.\n        getPreciserScopeKnowingConditionOutcome(condition, blind, false);\n    assertTypeEquals(createNullableType(STRING_TYPE),\n        getVarType(informedFalse, \"a\"));\n  }\n",
        "begin_line": 53,
        "end_line": 67,
        "comment": "\n   * Tests reverse interpretation of a NAME expression.\n   ",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 33)",
            "(line 55,col 5)-(line 55,col 76)",
            "(line 58,col 5)-(line 59,col 72)",
            "(line 60,col 5)-(line 60,col 65)",
            "(line 63,col 5)-(line 64,col 73)",
            "(line 65,col 5)-(line 66,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testNegatedNameCondition()",
        "snippet": "  public void testNegatedNameCondition() throws Exception {\n    FlowScope blind = newScope();\n    Node a = createVar(blind, \"a\", createNullableType(STRING_TYPE));\n    Node condition = new Node(Token.NOT);\n    condition.addChildToBack(a);\n\n    // true outcome.\n    FlowScope informedTrue = interpreter.\n        getPreciserScopeKnowingConditionOutcome(condition, blind, true);\n    assertTypeEquals(createNullableType(STRING_TYPE),\n        getVarType(informedTrue, \"a\"));\n\n    // false outcome.\n    FlowScope informedFalse = interpreter.\n        getPreciserScopeKnowingConditionOutcome(condition, blind, false);\n    assertTypeEquals(STRING_TYPE, getVarType(informedFalse, \"a\"));\n  }\n",
        "begin_line": 72,
        "end_line": 88,
        "comment": "\n   * Tests reverse interpretation of a NOT(NAME) expression.\n   ",
        "child_ranges": [
            "(line 73,col 5)-(line 73,col 33)",
            "(line 74,col 5)-(line 74,col 68)",
            "(line 75,col 5)-(line 75,col 41)",
            "(line 76,col 5)-(line 76,col 32)",
            "(line 79,col 5)-(line 80,col 72)",
            "(line 81,col 5)-(line 82,col 39)",
            "(line 85,col 5)-(line 86,col 73)",
            "(line 87,col 5)-(line 87,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testAssignCondition1()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testAssignCondition1() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.ASSIGN,\n        createVar(blind, \"a\", createNullableType(OBJECT_TYPE)),\n        createVar(blind, \"b\", createNullableType(OBJECT_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", OBJECT_TYPE),\n            new TypedName(\"b\", OBJECT_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", NULL_TYPE),\n            new TypedName(\"b\", NULL_TYPE)));\n  }\n",
        "begin_line": 93,
        "end_line": 106,
        "comment": "\n   * Tests reverse interpretation of a ASSIGN expression.\n   ",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 33)",
            "(line 96,col 5)-(line 105,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testSheqCondition1()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testSheqCondition1() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHEQ,\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        createNumber(56),\n        Sets.newHashSet(new TypedName(\"a\", NUMBER_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\",\n            createUnionType(STRING_TYPE, NUMBER_TYPE))));\n  }\n",
        "begin_line": 111,
        "end_line": 121,
        "comment": "\n   * Tests reverse interpretation of a SHEQ(NAME, NUMBER) expression.\n   ",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 33)",
            "(line 114,col 5)-(line 120,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testSheqCondition2()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testSheqCondition2() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHEQ,\n        createNumber(56),\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", NUMBER_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\",\n            createUnionType(STRING_TYPE, NUMBER_TYPE))));\n  }\n",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n   * Tests reverse interpretation of a SHEQ(NUMBER, NAME) expression.\n   ",
        "child_ranges": [
            "(line 128,col 5)-(line 128,col 33)",
            "(line 129,col 5)-(line 135,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testSheqCondition3()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testSheqCondition3() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHEQ,\n        createVar(blind, \"b\", createUnionType(STRING_TYPE, BOOLEAN_TYPE)),\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", STRING_TYPE),\n            new TypedName(\"b\", STRING_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\",\n            createUnionType(STRING_TYPE, NUMBER_TYPE)),\n            new TypedName(\"b\",\n                createUnionType(STRING_TYPE, BOOLEAN_TYPE))));\n  }\n",
        "begin_line": 141,
        "end_line": 154,
        "comment": "\n   * Tests reverse interpretation of a SHEQ(NAME, NAME) expression.\n   ",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 33)",
            "(line 144,col 5)-(line 153,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testSheqCondition4()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testSheqCondition4() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHEQ,\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, VOID_TYPE)),\n        createVar(blind, \"b\", createUnionType(VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", VOID_TYPE),\n            new TypedName(\"b\", VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", STRING_TYPE),\n            new TypedName(\"b\", VOID_TYPE)));\n  }\n",
        "begin_line": 156,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 33)",
            "(line 159,col 5)-(line 166,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testSheqCondition5()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testSheqCondition5() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHEQ,\n        createVar(blind, \"a\", createUnionType(NULL_TYPE, VOID_TYPE)),\n        createVar(blind, \"b\", createUnionType(VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", VOID_TYPE),\n            new TypedName(\"b\", VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", NULL_TYPE),\n            new TypedName(\"b\", VOID_TYPE)));\n  }\n",
        "begin_line": 169,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 33)",
            "(line 172,col 5)-(line 179,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testSheqCondition6()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testSheqCondition6() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHEQ,\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, VOID_TYPE)),\n        createVar(blind, \"b\", createUnionType(NUMBER_TYPE, VOID_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", VOID_TYPE),\n            new TypedName(\"b\", VOID_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\",\n                createUnionType(STRING_TYPE, VOID_TYPE)),\n            new TypedName(\"b\",\n                createUnionType(NUMBER_TYPE, VOID_TYPE))));\n  }\n",
        "begin_line": 182,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 33)",
            "(line 185,col 5)-(line 196,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testShneCondition1()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testShneCondition1() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHNE,\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        createNumber(56),\n        Sets.newHashSet(new TypedName(\"a\",\n            createUnionType(STRING_TYPE, NUMBER_TYPE))),\n        Sets.newHashSet(new TypedName(\"a\", NUMBER_TYPE)));\n  }\n",
        "begin_line": 202,
        "end_line": 212,
        "comment": "\n   * Tests reverse interpretation of a SHNE(NAME, NUMBER) expression.\n   ",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 33)",
            "(line 205,col 5)-(line 211,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testShneCondition2()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testShneCondition2() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHNE,\n        createNumber(56),\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\",\n            createUnionType(STRING_TYPE, NUMBER_TYPE))),\n        Sets.newHashSet(new TypedName(\"a\", NUMBER_TYPE)));\n  }\n",
        "begin_line": 217,
        "end_line": 227,
        "comment": "\n   * Tests reverse interpretation of a SHNE(NUMBER, NAME) expression.\n   ",
        "child_ranges": [
            "(line 219,col 5)-(line 219,col 33)",
            "(line 220,col 5)-(line 226,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testShneCondition3()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testShneCondition3() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHNE,\n        createVar(blind, \"b\", createUnionType(STRING_TYPE, BOOLEAN_TYPE)),\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\",\n            createUnionType(STRING_TYPE, NUMBER_TYPE)),\n            new TypedName(\"b\",\n                createUnionType(STRING_TYPE, BOOLEAN_TYPE))),\n        Sets.newHashSet(new TypedName(\"a\", STRING_TYPE),\n            new TypedName(\"b\", STRING_TYPE)));\n  }\n",
        "begin_line": 232,
        "end_line": 245,
        "comment": "\n   * Tests reverse interpretation of a SHNE(NAME, NAME) expression.\n   ",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 33)",
            "(line 235,col 5)-(line 244,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testShneCondition4()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testShneCondition4() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHNE,\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, VOID_TYPE)),\n        createVar(blind, \"b\", createUnionType(VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", STRING_TYPE),\n            new TypedName(\"b\", VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", VOID_TYPE),\n            new TypedName(\"b\", VOID_TYPE)));\n  }\n",
        "begin_line": 247,
        "end_line": 258,
        "comment": "",
        "child_ranges": [
            "(line 249,col 5)-(line 249,col 33)",
            "(line 250,col 5)-(line 257,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testShneCondition5()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testShneCondition5() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHNE,\n        createVar(blind, \"a\", createUnionType(NULL_TYPE, VOID_TYPE)),\n        createVar(blind, \"b\", createUnionType(NULL_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", VOID_TYPE),\n            new TypedName(\"b\", NULL_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", NULL_TYPE),\n            new TypedName(\"b\", NULL_TYPE)));\n  }\n",
        "begin_line": 260,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 33)",
            "(line 263,col 5)-(line 270,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testShneCondition6()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testShneCondition6() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.SHNE,\n        createVar(blind, \"a\", createUnionType(STRING_TYPE, VOID_TYPE)),\n        createVar(blind, \"b\", createUnionType(NUMBER_TYPE, VOID_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\",\n                createUnionType(STRING_TYPE, VOID_TYPE)),\n            new TypedName(\"b\",\n                createUnionType(NUMBER_TYPE, VOID_TYPE))),\n        Sets.newHashSet(\n            new TypedName(\"a\", VOID_TYPE),\n            new TypedName(\"b\", VOID_TYPE)));\n  }\n",
        "begin_line": 273,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 275,col 5)-(line 275,col 33)",
            "(line 276,col 5)-(line 287,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testEqCondition1()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testEqCondition1() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.EQ,\n        createVar(blind, \"a\", createUnionType(BOOLEAN_TYPE, VOID_TYPE)),\n        createNull(),\n        Sets.newHashSet(new TypedName(\"a\", VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", BOOLEAN_TYPE)));\n  }\n",
        "begin_line": 293,
        "end_line": 302,
        "comment": "\n   * Tests reverse interpretation of a EQ(NAME, NULL) expression.\n   ",
        "child_ranges": [
            "(line 295,col 5)-(line 295,col 33)",
            "(line 296,col 5)-(line 301,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testEqCondition2()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testEqCondition2() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.NE,\n        createNull(),\n        createVar(blind, \"a\", createUnionType(BOOLEAN_TYPE, VOID_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", BOOLEAN_TYPE)),\n        Sets.newHashSet(new TypedName(\"a\", VOID_TYPE)));\n  }\n",
        "begin_line": 307,
        "end_line": 316,
        "comment": "\n   * Tests reverse interpretation of a NE(NULL, NAME) expression.\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 33)",
            "(line 310,col 5)-(line 315,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testEqCondition3()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testEqCondition3() throws Exception {\n    FlowScope blind = newScope();\n    // (number,undefined,null)\n    JSType nullableOptionalNumber =\n        createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);\n    // (null,undefined)\n    JSType nullUndefined =\n        createUnionType(VOID_TYPE, NULL_TYPE);\n    testBinop(blind,\n        Token.EQ,\n        createVar(blind, \"a\", nullableOptionalNumber),\n        createNull(),\n        Sets.newHashSet(new TypedName(\"a\", nullUndefined)),\n        Sets.newHashSet(new TypedName(\"a\", NUMBER_TYPE)));\n  }\n",
        "begin_line": 321,
        "end_line": 336,
        "comment": "\n   * Tests reverse interpretation of a EQ(NAME, NULL) expression.\n   ",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 33)",
            "(line 325,col 5)-(line 326,col 59)",
            "(line 328,col 5)-(line 329,col 46)",
            "(line 330,col 5)-(line 335,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testEqCondition4()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testEqCondition4() throws Exception {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.EQ,\n        createVar(blind, \"a\", VOID_TYPE),\n        createVar(blind, \"b\", VOID_TYPE),\n        Sets.newHashSet(\n            new TypedName(\"a\", VOID_TYPE),\n            new TypedName(\"b\", VOID_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", NO_TYPE),\n            new TypedName(\"b\", NO_TYPE)));\n  }\n",
        "begin_line": 341,
        "end_line": 354,
        "comment": "\n   * Tests reverse interpretation of two undefineds.\n   ",
        "child_ranges": [
            "(line 343,col 5)-(line 343,col 33)",
            "(line 344,col 5)-(line 353,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testInequalitiesCondition1()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testInequalitiesCondition1() {\n    for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) {\n      FlowScope blind = newScope();\n      testBinop(blind,\n          op,\n          createVar(blind, \"a\", createUnionType(STRING_TYPE, VOID_TYPE)),\n          createNumber(8),\n          Sets.newHashSet(\n              new TypedName(\"a\", STRING_TYPE)),\n          Sets.newHashSet(new TypedName(\"a\",\n              createUnionType(STRING_TYPE, VOID_TYPE))));\n    }\n  }\n",
        "begin_line": 360,
        "end_line": 373,
        "comment": "\n   * Tests reverse interpretation of a COMPARE(NAME, NUMBER) expression,\n   * where COMPARE can be LE, LT, GE or GT.\n   ",
        "child_ranges": [
            "(line 362,col 5)-(line 372,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testInequalitiesCondition2()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testInequalitiesCondition2() {\n    for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) {\n      FlowScope blind = newScope();\n      testBinop(blind,\n          op,\n          createVar(blind, \"a\",\n              createUnionType(STRING_TYPE, NUMBER_TYPE, VOID_TYPE)),\n          createVar(blind, \"b\",\n              createUnionType(NUMBER_TYPE, NULL_TYPE)),\n          Sets.newHashSet(\n              new TypedName(\"a\",\n              createUnionType(STRING_TYPE, NUMBER_TYPE)),\n              new TypedName(\"b\",\n              createUnionType(NUMBER_TYPE, NULL_TYPE))),\n          Sets.newHashSet(\n              new TypedName(\"a\",\n              createUnionType(STRING_TYPE, NUMBER_TYPE, VOID_TYPE)),\n              new TypedName(\"b\",\n              createUnionType(NUMBER_TYPE, NULL_TYPE))));\n    }\n  }\n",
        "begin_line": 379,
        "end_line": 400,
        "comment": "\n   * Tests reverse interpretation of a COMPARE(NAME, NAME) expression,\n   * where COMPARE can be LE, LT, GE or GT.\n   ",
        "child_ranges": [
            "(line 381,col 5)-(line 399,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testInequalitiesCondition3()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testInequalitiesCondition3() {\n    for (int op : Arrays.asList(Token.LT, Token.GT, Token.LE, Token.GE)) {\n      FlowScope blind = newScope();\n      testBinop(blind,\n          op,\n          createUntypedNumber(8),\n          createVar(blind, \"a\", createUnionType(STRING_TYPE, VOID_TYPE)),\n          Sets.newHashSet(\n              new TypedName(\"a\", STRING_TYPE)),\n          Sets.newHashSet(new TypedName(\"a\",\n              createUnionType(STRING_TYPE, VOID_TYPE))));\n    }\n  }\n",
        "begin_line": 406,
        "end_line": 419,
        "comment": "\n   * Tests reverse interpretation of a COMPARE(NUMBER-untyped, NAME) expression,\n   * where COMPARE can be LE, LT, GE or GT.\n   ",
        "child_ranges": [
            "(line 408,col 5)-(line 418,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testAnd()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testAnd() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n      Token.AND,\n      createVar(blind, \"b\", createUnionType(STRING_TYPE, NULL_TYPE)),\n      createVar(blind, \"a\", createUnionType(NUMBER_TYPE, VOID_TYPE)),\n      Sets.newHashSet(new TypedName(\"a\", NUMBER_TYPE),\n          new TypedName(\"b\", STRING_TYPE)),\n      Sets.newHashSet(new TypedName(\"a\",\n          createUnionType(NUMBER_TYPE, VOID_TYPE)),\n          new TypedName(\"b\",\n          createUnionType(STRING_TYPE, NULL_TYPE))));\n  }\n",
        "begin_line": 421,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 423,col 33)",
            "(line 424,col 5)-(line 433,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testTypeof1()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testTypeof1() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.EQ,\n        new Node(Token.TYPEOF, createVar(blind, \"a\", OBJECT_TYPE)),\n        Node.newString(\"function\"),\n        Sets.newHashSet(\n            new TypedName(\"a\", U2U_CONSTRUCTOR_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", OBJECT_TYPE)));\n  }\n",
        "begin_line": 436,
        "end_line": 447,
        "comment": "",
        "child_ranges": [
            "(line 438,col 5)-(line 438,col 33)",
            "(line 439,col 5)-(line 446,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testTypeof2()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testTypeof2() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.EQ,\n        new Node(Token.TYPEOF, createVar(blind, \"a\", ALL_TYPE)),\n        Node.newString(\"function\"),\n        Sets.newHashSet(\n            new TypedName(\"a\", U2U_CONSTRUCTOR_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", ALL_TYPE)));\n  }\n",
        "begin_line": 449,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 451,col 5)-(line 451,col 33)",
            "(line 452,col 5)-(line 459,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testTypeof3()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testTypeof3() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.EQ,\n        new Node(Token.TYPEOF, createVar(\n            blind, \"a\", OBJECT_NUMBER_STRING_BOOLEAN)),\n        Node.newString(\"function\"),\n        Sets.newHashSet(\n            new TypedName(\"a\", U2U_CONSTRUCTOR_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", OBJECT_NUMBER_STRING_BOOLEAN)));\n  }\n",
        "begin_line": 462,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 464,col 33)",
            "(line 465,col 5)-(line 473,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testTypeof4()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testTypeof4() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.EQ,\n        new Node(Token.TYPEOF, createVar(\n            blind, \"a\", createUnionType(\n                U2U_CONSTRUCTOR_TYPE,NUMBER_STRING_BOOLEAN))),\n        Node.newString(\"function\"),\n        Sets.newHashSet(\n            new TypedName(\"a\", U2U_CONSTRUCTOR_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"a\", NUMBER_STRING_BOOLEAN)));\n  }\n",
        "begin_line": 476,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 33)",
            "(line 479,col 5)-(line 488,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testInstanceOf()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testInstanceOf() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.INSTANCEOF,\n        createVar(blind, \"x\", UNKNOWN_TYPE),\n        createVar(blind, \"s\", STRING_OBJECT_FUNCTION_TYPE),\n        Sets.newHashSet(\n            new TypedName(\"x\", STRING_OBJECT_TYPE),\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)));\n  }\n",
        "begin_line": 491,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 493,col 5)-(line 493,col 33)",
            "(line 494,col 5)-(line 502,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testInstanceOf2()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testInstanceOf2() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.INSTANCEOF,\n        createVar(blind, \"x\",\n            createUnionType(STRING_OBJECT_TYPE, NUMBER_OBJECT_TYPE)),\n        createVar(blind, \"s\", STRING_OBJECT_FUNCTION_TYPE),\n        Sets.newHashSet(\n            new TypedName(\"x\", STRING_OBJECT_TYPE),\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"x\", NUMBER_OBJECT_TYPE),\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)));\n  }\n",
        "begin_line": 505,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 507,col 5)-(line 507,col 33)",
            "(line 508,col 5)-(line 518,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testInstanceOf3()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testInstanceOf3() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.INSTANCEOF,\n        createVar(blind, \"x\", OBJECT_TYPE),\n        createVar(blind, \"s\", STRING_OBJECT_FUNCTION_TYPE),\n        Sets.newHashSet(\n            new TypedName(\"x\", STRING_OBJECT_TYPE),\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"x\", OBJECT_TYPE),\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)));\n  }\n",
        "begin_line": 521,
        "end_line": 534,
        "comment": "",
        "child_ranges": [
            "(line 523,col 5)-(line 523,col 33)",
            "(line 524,col 5)-(line 533,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testInstanceOf4()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testInstanceOf4() {\n    FlowScope blind = newScope();\n    testBinop(blind,\n        Token.INSTANCEOF,\n        createVar(blind, \"x\", ALL_TYPE),\n        createVar(blind, \"s\", STRING_OBJECT_FUNCTION_TYPE),\n        Sets.newHashSet(\n            new TypedName(\"x\", STRING_OBJECT_TYPE),\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)),\n        Sets.newHashSet(\n            new TypedName(\"s\", STRING_OBJECT_FUNCTION_TYPE)));\n  }\n",
        "begin_line": 536,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 538,col 5)-(line 538,col 33)",
            "(line 539,col 5)-(line 547,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.testBinop(com.google.javascript.jscomp.type.FlowScope, int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, java.util.Collection<com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.TypedName>, java.util.Collection<com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.TypedName>)",
        "snippet": "  private void testBinop(FlowScope blind, int binop, Node left, Node right,\n      Collection<TypedName> trueOutcome,\n      Collection<TypedName> falseOutcome) {\n    Node condition = new Node(binop);\n    condition.addChildToBack(left);\n    condition.addChildToBack(right);\n\n    // true outcome.\n    FlowScope informedTrue = interpreter.\n        getPreciserScopeKnowingConditionOutcome(condition, blind, true);\n    for (TypedName p : trueOutcome) {\n      assertTypeEquals(p.name, p.type, getVarType(informedTrue, p.name));\n    }\n\n    // false outcome.\n    FlowScope informedFalse = interpreter.\n        getPreciserScopeKnowingConditionOutcome(condition, blind, false);\n    for (TypedName p : falseOutcome) {\n      assertTypeEquals(p.type, getVarType(informedFalse, p.name));\n    }\n  }\n",
        "begin_line": 550,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 553,col 5)-(line 553,col 37)",
            "(line 554,col 5)-(line 554,col 35)",
            "(line 555,col 5)-(line 555,col 36)",
            "(line 558,col 5)-(line 559,col 72)",
            "(line 560,col 5)-(line 562,col 5)",
            "(line 565,col 5)-(line 566,col 73)",
            "(line 567,col 5)-(line 569,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.createNull()",
        "snippet": "  private Node createNull() {\n    Node n = new Node(Token.NULL);\n    n.setJSType(NULL_TYPE);\n    return n;\n  }\n",
        "begin_line": 572,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 573,col 5)-(line 573,col 34)",
            "(line 574,col 5)-(line 574,col 27)",
            "(line 575,col 5)-(line 575,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.createNumber(int)",
        "snippet": "  private Node createNumber(int n) {\n    Node number = createUntypedNumber(n);\n    number.setJSType(NUMBER_TYPE);\n    return number;\n  }\n",
        "begin_line": 578,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 579,col 5)-(line 579,col 41)",
            "(line 580,col 5)-(line 580,col 34)",
            "(line 581,col 5)-(line 581,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.createUntypedNumber(int)",
        "snippet": "  private Node createUntypedNumber(int n) {\n    return Node.newNumber(n);\n  }\n",
        "begin_line": 584,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.getVarType(com.google.javascript.jscomp.type.FlowScope, java.lang.String)",
        "snippet": "  private JSType getVarType(FlowScope scope, String name) {\n    return scope.getSlot(name).getType();\n  }\n",
        "begin_line": 588,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 589,col 5)-(line 589,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.createVar(com.google.javascript.jscomp.type.FlowScope, java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node createVar(FlowScope scope, String name, JSType type) {\n    Node n = Node.newString(Token.NAME, name);\n    functionScope.declare(name, n, null, null);\n    ((LinkedFlowScope) scope).inferSlotType(name, type);\n    n.setJSType(type);\n    return n;\n  }\n",
        "begin_line": 592,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 593,col 5)-(line 593,col 46)",
            "(line 594,col 5)-(line 594,col 47)",
            "(line 595,col 5)-(line 595,col 56)",
            "(line 596,col 5)-(line 596,col 22)",
            "(line 597,col 5)-(line 597,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/SemanticReverseAbstractInterpreterTest.java",
        "signature": "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest.TypedName.TypedName(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "    private TypedName(String name, JSType type) {\n      this.name = name;\n      this.type = type;\n    }\n",
        "begin_line": 604,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 605,col 7)-(line 605,col 23)",
            "(line 606,col 7)-(line 606,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
            "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 82,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 52)",
            "(line 84,col 5)-(line 84,col 52)",
            "(line 85,col 5)-(line 86,col 65)",
            "(line 87,col 5)-(line 87,col 55)",
            "(line 88,col 5)-(line 88,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
            "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTypeTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest",
            "com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTypeTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTypeTestCase.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    compiler = new Compiler();\n    compiler.initOptions(getOptions());\n    registry = compiler.getTypeRegistry();\n    initTypes();\n  }\n",
        "begin_line": 95,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 30)",
            "(line 98,col 5)-(line 98,col 39)",
            "(line 99,col 5)-(line 99,col 42)",
            "(line 100,col 5)-(line 100,col 16)"
        ]
    }
]