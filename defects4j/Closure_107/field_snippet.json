[
    {
        "class_name": "com.google.javascript.jscomp.Proxy",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.Proxy.nextConvention",
        "snippet": "    protected final CodingConvention nextConvention;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FREE_CALL",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LENGTH",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INPUT_ID",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SLASH_V",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INFERRED_FUNCTION",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CHANGE_TIME",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.REFLECTED_OBJECT",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "  public static final int\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LENGTH             = 52,    // The length of the code represented by\n                                  // this node.\n      INPUT_ID           = 53,    // The id of the input associated with this\n                                  // node.\n      SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                  // vertical tab escape. This is a total hack.\n                                  // See comments in IRFactory about this.\n      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n                                  // have been inferred.\n      CHANGE_TIME        = 56,    // For passes that work only on changed funs.\n      REFLECTED_OBJECT   = 57,    // An object that's used for goog.object.reflect-style reflection.\n      LAST_PROP          = 57;    // Unused in the compiler, but keep for Rhino.",
        "begin_line": 67,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 109,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 109,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "    private double number;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "    private String str;",
        "begin_line": 255,
        "end_line": 255,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 269,
        "end_line": 269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.next",
        "snippet": "    private final PropListItem next;",
        "begin_line": 271,
        "end_line": 271,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.propType",
        "snippet": "    private final int propType;",
        "begin_line": 272,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 296,
        "end_line": 296,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.objectValue",
        "snippet": "    private final Object objectValue;",
        "begin_line": 298,
        "end_line": 298,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 328,
        "end_line": 328,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.intValue",
        "snippet": "    final int intValue;",
        "begin_line": 330,
        "end_line": 330,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "  int type;              // type of the node; Token.NAME for example",
        "begin_line": 1044,
        "end_line": 1044,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "  Node next;             // next sibling",
        "begin_line": 1045,
        "end_line": 1045,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "  private Node first;    // first element of a linked list of children",
        "begin_line": 1046,
        "end_line": 1046,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "  private Node last;     // last element of a linked list of children",
        "begin_line": 1047,
        "end_line": 1047,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "  private PropListItem propListHead;",
        "begin_line": 1055,
        "end_line": 1055,
        "comment": "\n   * Linked list of properties. Since vast majority of nodes would have\n   * no more then 2 properties, linked list saves memory and provides\n   * fast lookup. If this does not holds, propListHead can be replaced\n   * by UintMap.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "  public static final int COLUMN_BITS = 12;",
        "begin_line": 1065,
        "end_line": 1065,
        "comment": "\n   * COLUMN_BITS represents how many of the lower-order bits of\n   * sourcePosition are reserved for storing the column number.\n   * Bits above these store the line number.\n   * This gives us decent position information for everything except\n   * files already passed through a minimizer, where lines might\n   * be longer than 4096 characters.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "  public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1072,
        "end_line": 1072,
        "comment": "\n   * MAX_COLUMN_NUMBER represents the maximum column number that can\n   * be represented.  JSCompiler's modifications to Rhino cause all\n   * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "  public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1079,
        "end_line": 1079,
        "comment": "\n   * COLUMN_MASK stores a value where bits storing the column number\n   * are set, and bits storing the line are not set.  It's handy for\n   * separating column number from line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "  private int sourcePosition;",
        "begin_line": 1087,
        "end_line": 1087,
        "comment": "\n   * Source position of this node. The position is encoded with the\n   * column number in the low 12 bits of the integer, and the line\n   * number in the rest.  Create some handy constants so we can change this\n   * size if we want.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "  private JSType jsType;",
        "begin_line": 1089,
        "end_line": 1089,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "  private Node parent;",
        "begin_line": 1091,
        "end_line": 1091,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "    private final Node start;",
        "begin_line": 1269,
        "end_line": 1269,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "    private Node current;",
        "begin_line": 1270,
        "end_line": 1270,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "    private boolean used;",
        "begin_line": 1271,
        "end_line": 1271,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "    private Node cur;",
        "begin_line": 1354,
        "end_line": 1354,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",
        "snippet": "  public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;",
        "begin_line": 2008,
        "end_line": 2008,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",
        "snippet": "  public static final int FLAG_THIS_UNMODIFIED = 2;",
        "begin_line": 2009,
        "end_line": 2009,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",
        "snippet": "  public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;",
        "begin_line": 2010,
        "end_line": 2010,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_NO_THROWS",
        "snippet": "  public static final int FLAG_NO_THROWS = 8;",
        "begin_line": 2011,
        "end_line": 2011,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",
        "snippet": "  public static final int FLAG_LOCAL_RESULTS = 16;",
        "begin_line": 2012,
        "end_line": 2012,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",
        "snippet": "  public static final int SIDE_EFFECTS_FLAGS_MASK = 31;",
        "begin_line": 2014,
        "end_line": 2014,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",
        "snippet": "  public static final int SIDE_EFFECTS_ALL = 0;",
        "begin_line": 2016,
        "end_line": 2016,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",
        "snippet": "  public static final int NO_SIDE_EFFECTS =\n    FLAG_GLOBAL_STATE_UNMODIFIED\n    | FLAG_THIS_UNMODIFIED\n    | FLAG_ARGUMENTS_UNMODIFIED\n    | FLAG_NO_THROWS;",
        "begin_line": 2017,
        "end_line": 2021,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SideEffectFlags",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SideEffectFlags.value",
        "snippet": "    private int value = Node.SIDE_EFFECTS_ALL;",
        "begin_line": 2053,
        "end_line": 2053,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "    final Node nodeA;",
        "begin_line": 2195,
        "end_line": 2195,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "    final Node nodeB;",
        "begin_line": 2196,
        "end_line": 2196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",
        "snippet": "  static final String SINGLETON_MODULE_NAME = \"[singleton]\";",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
        "begin_line": 89,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",
        "snippet": "  static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
        "begin_line": 94,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MISSING_MODULE_ERROR",
        "snippet": "  static final DiagnosticType MISSING_MODULE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"unknown module \\\"{0}\\\" specified in entry point spec\");",
        "begin_line": 98,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.PARSING_PASS_NAME",
        "snippet": "  static final String PARSING_PASS_NAME = \"parseInputs\";",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Used in PerformanceTracker"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",
        "snippet": "  private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 105,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.options",
        "snippet": "  CompilerOptions options = null;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.passes",
        "snippet": "  private PassConfig passes = null;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externs",
        "snippet": "  private List<CompilerInput> externs;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The externs inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.modules",
        "snippet": "  private List<JSModule> modules;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " The JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.moduleGraph",
        "snippet": "  private JSModuleGraph moduleGraph;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " 2 modules, because we use this as a signal for which passes to run."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputs",
        "snippet": "  private List<CompilerInput> inputs;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " The JS source inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " error manager to which error management is delegated"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.warningsGuard",
        "snippet": "  private WarningsGuard warningsGuard;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " Warnings guard for filtering warnings."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.injectedLibraries",
        "snippet": "  private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();",
        "begin_line": 133,
        "end_line": 133,
        "comment": " the library, so code can be inserted after."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externsRoot",
        "snippet": "  Node externsRoot;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Parse tree root nodes"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.jsRoot",
        "snippet": "  Node jsRoot;",
        "begin_line": 137,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externAndJsRoot",
        "snippet": "  Node externAndJsRoot;",
        "begin_line": 138,
        "end_line": 138,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputsById",
        "snippet": "  private Map<InputId, CompilerInput> inputsById;",
        "begin_line": 140,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sourceMap",
        "snippet": "  private SourceMap sourceMap;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " The source code map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externExports",
        "snippet": "  private String externExports = null;",
        "begin_line": 146,
        "end_line": 146,
        "comment": " The externs created from the exports.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.uniqueNameId",
        "snippet": "  private int uniqueNameId = 0;",
        "begin_line": 152,
        "end_line": 152,
        "comment": "\n   * Ids for function inlining so that each declared name remains\n   * unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.timeout",
        "snippet": "  private int timeout = 0;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences",
        "snippet": "  private boolean hasRegExpGlobalReferences = true;",
        "begin_line": 160,
        "end_line": 160,
        "comment": "\n   * Whether to assume there are references to the RegExp Global object\n   * properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.functionInformationMap",
        "snippet": "  private FunctionInformationMap functionInformationMap;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " The function information map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.debugLog",
        "snippet": "  private final StringBuilder debugLog = new StringBuilder();",
        "begin_line": 166,
        "end_line": 166,
        "comment": " Debugging information "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultCodingConvention",
        "snippet": "  CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
        "begin_line": 169,
        "end_line": 169,
        "comment": " Detects Google-specific coding conventions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeRegistry",
        "snippet": "  private JSTypeRegistry typeRegistry;",
        "begin_line": 171,
        "end_line": 171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.parserConfig",
        "snippet": "  private Config parserConfig = null;",
        "begin_line": 172,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.abstractInterpreter",
        "snippet": "  private ReverseAbstractInterpreter abstractInterpreter;",
        "begin_line": 174,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeValidator",
        "snippet": "  private TypeValidator typeValidator;",
        "begin_line": 175,
        "end_line": 175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.phaseOptimizer",
        "snippet": "  private PhaseOptimizer phaseOptimizer = null;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " running, or which functions have been changed by optimizations"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.tracker",
        "snippet": "  public PerformanceTracker tracker;",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.oldErrorReporter",
        "snippet": "  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
        "begin_line": 183,
        "end_line": 184,
        "comment": " The oldErrorReporter exists so we can get errors from the JSTypeRegistry."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultErrorReporter",
        "snippet": "  private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
        "begin_line": 187,
        "end_line": 188,
        "comment": " This error reporter gets the messages from the current Rhino parser."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",
        "snippet": "  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
        "begin_line": 191,
        "end_line": 193,
        "comment": " Error strings used for reporting JSErrors "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",
        "snippet": "  public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
        "begin_line": 194,
        "end_line": 196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",
        "snippet": "  private static final long COMPILER_STACK_SIZE = (1 << 21); // About 2MB",
        "begin_line": 200,
        "end_line": 200,
        "comment": " About 2MB"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.compilerExecutor",
        "snippet": "  private static final ExecutorService compilerExecutor =\n      Executors.newCachedThreadPool(new ThreadFactory() {\n    @Override public Thread newThread(Runnable r) {\n      return new Thread(null, r, \"jscompiler\", COMPILER_STACK_SIZE);\n    }\n  });",
        "begin_line": 210,
        "end_line": 215,
        "comment": "\n   * Under JRE 1.6, the JS Compiler overflows the stack when running on some\n   * large or complex JS code. When threads are available, we run all compile\n   * jobs on a separate thread with a larger stack.\n   *\n   * That way, we don't have to increase the stack size for *every* thread\n   * (which is what -Xss does).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.compilerThread",
        "snippet": "  private Thread compilerThread = null;",
        "begin_line": 220,
        "end_line": 220,
        "comment": "\n   * Use a dedicated compiler thread per Compiler instance.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.useThreads",
        "snippet": "  private boolean useThreads = true;",
        "begin_line": 223,
        "end_line": 223,
        "comment": " Whether to use threads. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
        "begin_line": 231,
        "end_line": 232,
        "comment": "\n   * Logger for the whole com.google.javascript.jscomp domain -\n   * setting configuration for this logger affects all loggers\n   *  in other classes within the compiler.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.outStream",
        "snippet": "  private final PrintStream outStream;",
        "begin_line": 234,
        "end_line": 234,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.globalRefMap",
        "snippet": "  private GlobalVarReferenceMap globalRefMap = null;",
        "begin_line": 236,
        "end_line": 236,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.progress",
        "snippet": "  private volatile double progress = 0.0;",
        "begin_line": 238,
        "end_line": 238,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.lastPassName",
        "snippet": "  private String lastPassName;",
        "begin_line": 239,
        "end_line": 239,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
        "begin_line": 453,
        "end_line": 455,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
        "begin_line": 457,
        "end_line": 459,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
        "begin_line": 528,
        "end_line": 529,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
        "begin_line": 530,
        "end_line": 532,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sanityCheck",
        "snippet": "  private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
        "begin_line": 894,
        "end_line": 900,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 956,
        "end_line": 956,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 957,
        "end_line": 957,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.syntheticCodeId",
        "snippet": "  private int syntheticCodeId = 0;",
        "begin_line": 1600,
        "end_line": 1600,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.sb",
        "snippet": "    private final StringBuilder sb = new StringBuilder();",
        "begin_line": 1860,
        "end_line": 1860,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.lineCount",
        "snippet": "    private int lineCount = 0;",
        "begin_line": 1861,
        "end_line": 1861,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.colCount",
        "snippet": "    private int colCount = 0;",
        "begin_line": 1862,
        "end_line": 1862,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.recentChange",
        "snippet": "  protected final RecentChange recentChange = new RecentChange();",
        "begin_line": 2011,
        "end_line": 2011,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.codeChangeHandlers",
        "snippet": "  private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
        "begin_line": 2012,
        "end_line": 2013,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",
        "snippet": "  static final String SYNTHETIC_EXTERNS = \"{SyntheticVarsDeclar}\";",
        "begin_line": 2016,
        "end_line": 2016,
        "comment": " Name of the synthetic input that holds synthesized externs. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.synthesizedExternsInput",
        "snippet": "  private CompilerInput synthesizedExternsInput = null;",
        "begin_line": 2018,
        "end_line": 2018,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 2373,
        "end_line": 2373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externsRoot",
        "snippet": "    Node externsRoot;",
        "begin_line": 2375,
        "end_line": 2375,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.jsRoot",
        "snippet": "    private Node jsRoot;",
        "begin_line": 2376,
        "end_line": 2376,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externs",
        "snippet": "    private List<CompilerInput> externs;",
        "begin_line": 2377,
        "end_line": 2377,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.inputs",
        "snippet": "    private List<CompilerInput> inputs;",
        "begin_line": 2378,
        "end_line": 2378,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.modules",
        "snippet": "    private List<JSModule> modules;",
        "begin_line": 2379,
        "end_line": 2379,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.passConfigState",
        "snippet": "    private PassConfig.State passConfigState;",
        "begin_line": 2380,
        "end_line": 2380,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.typeRegistry",
        "snippet": "    private JSTypeRegistry typeRegistry;",
        "begin_line": 2381,
        "end_line": 2381,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.lifeCycleStage",
        "snippet": "    private AbstractCompiler.LifeCycleStage lifeCycleStage;",
        "begin_line": 2382,
        "end_line": 2382,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.injectedLibraries",
        "snippet": "    private Map<String, Node> injectedLibraries;",
        "begin_line": 2383,
        "end_line": 2383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.templateTypeMap",
        "snippet": "  protected TemplateTypeMap templateTypeMap;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.inTemplatedCheckVisit",
        "snippet": "  private boolean inTemplatedCheckVisit = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.CAN_CAST_TO_VISITOR",
        "snippet": "  private static final CanCastToVisitor CAN_CAST_TO_VISITOR =\n      new CanCastToVisitor();",
        "begin_line": 74,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 77,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 80,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 83,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 86,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    @Override\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 94,
        "end_line": 99,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 1412,
        "end_line": 1412,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 1413,
        "end_line": 1413,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.first",
        "snippet": "    private final Annotatable first;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.second",
        "snippet": "    private final Annotation second;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphAnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.GraphAnnotationState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.nodeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> nodeAnnotationStack;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n   * Used by {@link #pushNodeAnnotations()} and {@link #popNodeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.edgeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> edgeAnnotationStack;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Used by {@link #pushEdgeAnnotations()} and {@link #popEdgeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.graph",
        "snippet": "    private Graph<N, E> graph;",
        "begin_line": 307,
        "end_line": 307,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.nodes",
        "snippet": "    private List<GraphNode<N, E>> nodes = Lists.newArrayList();",
        "begin_line": 308,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME",
        "snippet": "  private static final String COMPILED_CONSTANT_NAME = \"COMPILED\";",
        "begin_line": 57,
        "end_line": 57,
        "comment": " For the --mark-as-compiled pass "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME",
        "snippet": "  private static final String CLOSURE_LOCALE_CONSTANT_NAME = \"goog.LOCALE\";",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Constant name for Closure's locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",
        "snippet": "  static final DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK =\n      DiagnosticType.error(\"JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK\",\n          \"TightenTypes requires type checking. Please use --check_types.\");",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Compiler errors when invalid combinations of passes are run."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR",
        "snippet": "  static final DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR =\n      DiagnosticType.error(\"JSC_CANNOT_USE_PROTOTYPE_AND_VAR\",\n          \"Rename prototypes and inline variables cannot be used together.\");",
        "begin_line": 67,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_EXPORT_LOCALS_AND_EXTERN_PROP_REMOVAL",
        "snippet": "  static final DiagnosticType CANNOT_USE_EXPORT_LOCALS_AND_EXTERN_PROP_REMOVAL =\n      DiagnosticType.error(\"JSC_CANNOT_USE_EXPORT_LOCALS_AND_EXTERN_PROP_REMOVAL\",\n          \"remove_unused_prototype_properties_in_externs \" +\n          \"and export_local_property_definitions cannot be used together.\");",
        "begin_line": 71,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR",
        "snippet": "  static final DiagnosticType REPORT_PATH_IO_ERROR =\n      DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n          \"Error writing compiler report to {0}\");",
        "begin_line": 77,
        "end_line": 79,
        "comment": " Miscellaneous errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR",
        "snippet": "  private static final DiagnosticType NAME_REF_GRAPH_FILE_ERROR =\n      DiagnosticType.error(\"JSC_NAME_REF_GRAPH_FILE_ERROR\",\n          \"Error \\\"{1}\\\" writing name reference graph to \\\"{0}\\\".\");",
        "begin_line": 81,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR",
        "snippet": "  private static final DiagnosticType NAME_REF_REPORT_FILE_ERROR =\n      DiagnosticType.error(\"JSC_NAME_REF_REPORT_FILE_ERROR\",\n          \"Error \\\"{1}\\\" writing name reference report to \\\"{0}\\\".\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.GLOBAL_SYMBOL_NAMESPACE_PATTERN",
        "snippet": "  private static final java.util.regex.Pattern GLOBAL_SYMBOL_NAMESPACE_PATTERN =\n    java.util.regex.Pattern.compile(\"^[a-zA-Z0-9$_]+$\");",
        "begin_line": 89,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.namespaceForChecks",
        "snippet": "  private GlobalNamespace namespaceForChecks = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * A global namespace to share across checking passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.preprocessorSymbolTable",
        "snippet": "  private PreprocessorSymbolTable preprocessorSymbolTable = null;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * A symbol table for registering references that get removed during\n   * preprocessing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypes",
        "snippet": "  private TightenTypes tightenTypes = null;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n   * A type-tightener to share across optimization passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportedNames",
        "snippet": "  private Set<String> exportedNames = null;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Names exported by goog.exportSymbol. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameGenerator",
        "snippet": "  private NameGenerator nameGenerator = null;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Shared name generator that remembers character encoding bias "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleIdGenerator",
        "snippet": "  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator =\n      new CrossModuleMethodMotion.IdGenerator();",
        "begin_line": 117,
        "end_line": 118,
        "comment": "\n   * Ids for cross-module method stubbing, so that each method has\n   * a unique id.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.cssNames",
        "snippet": "  private Map<String, Integer> cssNames = null;",
        "begin_line": 124,
        "end_line": 124,
        "comment": "\n   * Keys are arguments passed to getCssName() found during compilation; values\n   * are the number of times the key appeared as an argument to getCssName().\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.variableMap",
        "snippet": "  private VariableMap variableMap = null;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The variable renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.propertyMap",
        "snippet": "  private VariableMap propertyMap = null;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The property renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.anonymousFunctionNameMap",
        "snippet": "  private VariableMap anonymousFunctionNameMap = null;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " The naming map for anonymous functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.functionNames",
        "snippet": "  private FunctionNames functionNames = null;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Fully qualified function names and globally unique ids "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.stringMap",
        "snippet": "  private VariableMap stringMap = null;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " String replacement map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.idGeneratorMap",
        "snippet": "  private String idGeneratorMap = null;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " Id generator map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkSideEffects",
        "snippet": "  final HotSwapPassFactory checkSideEffects =\n      new HotSwapPassFactory(\"checkSideEffects\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      // The current approach to protecting \"hidden\" side-effects is to\n      // wrap them in a function call that is stripped later, this shouldn't\n      // be done in IDE mode where AST changes may be unexpected.\n      boolean protectHiddenSideEffects =\n          options.protectHiddenSideEffects && !options.ideMode;\n      return new CheckSideEffects(compiler,\n          options.checkSuspiciousCode ? CheckLevel.WARNING : CheckLevel.OFF,\n              protectHiddenSideEffects);\n    }\n  };",
        "begin_line": 814,
        "end_line": 827,
        "comment": "\n   * Checks for code that is probably wrong (such as stray expressions).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.stripSideEffectProtection",
        "snippet": "  final PassFactory stripSideEffectProtection =\n      new PassFactory(\"stripSideEffectProtection\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler\n        compiler) {\n      return new CheckSideEffects.StripProtection(compiler);\n    }\n  };",
        "begin_line": 832,
        "end_line": 839,
        "comment": "\n   * Checks for code that is probably wrong (such as stray expressions).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.suspiciousCode",
        "snippet": "  final HotSwapPassFactory suspiciousCode =\n      new HotSwapPassFactory(\"suspiciousCode\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      List<Callback> sharedCallbacks = Lists.newArrayList();\n      if (options.checkSuspiciousCode) {\n        sharedCallbacks.add(new CheckSuspiciousCode());\n      }\n\n      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        sharedCallbacks.add(new CheckGlobalThis(compiler));\n      }\n\n      if (options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n        sharedCallbacks.add(new CheckDebuggerStatement(compiler));\n      }\n\n      return combineChecks(compiler, sharedCallbacks);\n    }\n\n  };",
        "begin_line": 844,
        "end_line": 864,
        "comment": "\n   * Checks for code that is probably wrong (such as stray expressions).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlStructures",
        "snippet": "  final HotSwapPassFactory checkControlStructures =\n      new HotSwapPassFactory(\"checkControlStructures\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new ControlStructureCheck(compiler);\n    }\n  };",
        "begin_line": 881,
        "end_line": 887,
        "comment": " Checks for validity of the control structures. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkRequires",
        "snippet": "  final HotSwapPassFactory checkRequires =\n      new HotSwapPassFactory(\"checkRequires\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new CheckRequiresForConstructors(compiler, options.checkRequires);\n    }\n  };",
        "begin_line": 890,
        "end_line": 896,
        "comment": " Checks that all constructed classes are goog.require()d. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkProvides",
        "snippet": "  final HotSwapPassFactory checkProvides =\n      new HotSwapPassFactory(\"checkProvides\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new CheckProvides(compiler, options.checkProvides);\n    }\n  };",
        "begin_line": 899,
        "end_line": 905,
        "comment": " Makes sure @constructor is paired with goog.provides(). "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR",
        "snippet": "  private static final DiagnosticType GENERATE_EXPORTS_ERROR =\n      DiagnosticType.error(\n          \"JSC_GENERATE_EXPORTS_ERROR\",\n          \"Exports can only be generated if export symbol/property \" +\n          \"functions are set.\");",
        "begin_line": 907,
        "end_line": 911,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.generateExports",
        "snippet": "  final PassFactory generateExports = new PassFactory(\"generateExports\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (options.removeUnusedPrototypePropertiesInExterns\n          && options.exportLocalPropertyDefinitions) {\n        return new ErrorPass(\n            compiler, CANNOT_USE_EXPORT_LOCALS_AND_EXTERN_PROP_REMOVAL);\n      }\n\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null &&\n          convention.getExportPropertyFunction() != null) {\n        return new GenerateExports(compiler,\n            options.exportLocalPropertyDefinitions,\n            convention.getExportSymbolFunction(),\n            convention.getExportPropertyFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 914,
        "end_line": 934,
        "comment": " Generates exports for @export annotations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportTestFunctions",
        "snippet": "  final PassFactory exportTestFunctions =\n      new PassFactory(\"exportTestFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null) {\n        return new ExportTestFunctions(compiler,\n            convention.getExportSymbolFunction(),\n            convention.getExportPropertyFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 937,
        "end_line": 950,
        "comment": " Generates exports for functions associated with JsUnit. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.gatherRawExports",
        "snippet": "  final PassFactory gatherRawExports =\n      new PassFactory(\"gatherRawExports\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      final GatherRawExports pass = new GatherRawExports(\n          compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          if (exportedNames == null) {\n            exportedNames = Sets.newHashSet();\n          }\n          exportedNames.addAll(pass.getExportedVariableNames());\n        }\n      };\n    }\n  };",
        "begin_line": 953,
        "end_line": 971,
        "comment": " Raw exports processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closurePrimitives",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  final HotSwapPassFactory closurePrimitives =\n      new HotSwapPassFactory(\"closurePrimitives\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      final ProcessClosurePrimitives pass = new ProcessClosurePrimitives(\n          compiler,\n          preprocessorSymbolTable,\n          options.brokenClosureRequiresLevel,\n          options.preserveGoogRequires);\n\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          pass.hotSwapScript(scriptRoot, originalRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 974,
        "end_line": 998,
        "comment": " Closure pre-processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.jqueryAliases",
        "snippet": "  final PassFactory jqueryAliases = new PassFactory(\"jqueryAliases\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ExpandJqueryAliases(compiler);\n    }\n  };",
        "begin_line": 1001,
        "end_line": 1006,
        "comment": " Expand jQuery Primitives and Aliases pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.angularPass",
        "snippet": "  final PassFactory angularPass =\n      new PassFactory(\"angularPass\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AngularPass(compiler);\n    }\n  };",
        "begin_line": 1009,
        "end_line": 1015,
        "comment": " Process AngularJS-specific annotations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceMessages",
        "snippet": "  final PassFactory replaceMessages = new PassFactory(\"replaceMessages\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ReplaceMessages(compiler,\n          options.messageBundle,\n          /* warn about message dupes */\n          true,\n          /* allow messages with goog.getMsg */\n          JsMessage.Style.CLOSURE,\n          /* if we can't find a translation, don't worry about it. */\n          false);\n    }\n  };",
        "begin_line": 1022,
        "end_line": 1034,
        "comment": "\n   * The default i18n pass.\n   * A lot of the options are not configurable, because ReplaceMessages\n   * has a lot of legacy logic.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceMessagesForChrome",
        "snippet": "  final PassFactory replaceMessagesForChrome =\n      new PassFactory(\"replaceMessages\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ReplaceMessagesForChrome(compiler,\n          new GoogleJsMessageIdGenerator(options.tcProjectId),\n          /* warn about message dupes */\n          true,\n          /* allow messages with goog.getMsg */\n          JsMessage.Style.CLOSURE);\n    }\n  };",
        "begin_line": 1036,
        "end_line": 1047,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureGoogScopeAliases",
        "snippet": "  final HotSwapPassFactory closureGoogScopeAliases =\n      new HotSwapPassFactory(\"closureGoogScopeAliases\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      return new ScopedAliases(\n          compiler,\n          preprocessorSymbolTable,\n          options.getAliasTransformationHandler());\n    }\n  };",
        "begin_line": 1050,
        "end_line": 1060,
        "comment": " Applies aliases and inlines goog.scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureRewriteGoogClass",
        "snippet": "  final HotSwapPassFactory closureRewriteGoogClass =\n      new HotSwapPassFactory(\"closureRewriteGoogClass\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new ClosureRewriteClass(compiler);\n    }\n  };",
        "begin_line": 1063,
        "end_line": 1069,
        "comment": " Rewrites goog.class "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureCheckGetCssName",
        "snippet": "  final PassFactory closureCheckGetCssName =\n      new PassFactory(\"closureCheckGetCssName\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      String blacklist = options.checkMissingGetCssNameBlacklist;\n      Preconditions.checkState(blacklist != null && !blacklist.isEmpty(),\n          \"Not checking use of goog.getCssName because of empty blacklist.\");\n      return new CheckMissingGetCssName(\n          compiler, options.checkMissingGetCssNameLevel, blacklist);\n    }\n  };",
        "begin_line": 1072,
        "end_line": 1082,
        "comment": " Checks that CSS class names are wrapped in goog.getCssName "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureReplaceGetCssName",
        "snippet": "  final PassFactory closureReplaceGetCssName =\n      new PassFactory(\"closureReplaceGetCssName\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          ReplaceCssNames pass = new ReplaceCssNames(\n              compiler,\n              newCssNames,\n              options.cssRenamingWhitelist);\n          pass.process(externs, jsRoot);\n          cssNames = newCssNames;\n        }\n      };\n    }\n  };",
        "begin_line": 1089,
        "end_line": 1109,
        "comment": "\n   * Processes goog.getCssName.  The cssRenamingMap is used to lookup\n   * replacement values for the classnames.  If null, the raw class names are\n   * inlined.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.createSyntheticBlocks",
        "snippet": "  final PassFactory createSyntheticBlocks =\n      new PassFactory(\"createSyntheticBlocks\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CreateSyntheticBlocks(compiler,\n          options.syntheticBlockStartMarker,\n          options.syntheticBlockEndMarker);\n    }\n  };",
        "begin_line": 1115,
        "end_line": 1123,
        "comment": "\n   * Creates synthetic blocks to prevent FoldConstants from moving code\n   * past markers in the source.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.peepholeOptimizations",
        "snippet": "  final PassFactory peepholeOptimizations =\n      new PassFactory(\"peepholeOptimizations\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      final boolean late = false;\n      return new PeepholeOptimizationsPass(compiler,\n            new PeepholeMinimizeConditions(late),\n            new PeepholeSubstituteAlternateSyntax(late),\n            new PeepholeReplaceKnownMethods(late),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeFoldConstants(late),\n            new PeepholeCollectPropertyAssignments());\n    }\n  };",
        "begin_line": 1126,
        "end_line": 1139,
        "comment": " Various peephole optimizations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.latePeepholeOptimizations",
        "snippet": "  final PassFactory latePeepholeOptimizations =\n      new PassFactory(\"latePeepholeOptimizations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      final boolean late = true;\n      return new PeepholeOptimizationsPass(compiler,\n            new StatementFusion(options.aggressiveFusion),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeMinimizeConditions(late),\n            new PeepholeSubstituteAlternateSyntax(late),\n            new PeepholeReplaceKnownMethods(late),\n            new PeepholeFoldConstants(late),\n            new ReorderConstantExpression());\n    }\n  };",
        "begin_line": 1142,
        "end_line": 1156,
        "comment": " Same as peepholeOptimizations but aggressively merges code together "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVars",
        "snippet": "  final HotSwapPassFactory checkVars =\n      new HotSwapPassFactory(\"checkVars\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new VarCheck(compiler);\n    }\n  };",
        "begin_line": 1159,
        "end_line": 1165,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkRegExp",
        "snippet": "  final PassFactory checkRegExp =\n      new PassFactory(\"checkRegExp\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      final CheckRegExp pass = new CheckRegExp(compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          compiler.setHasRegExpGlobalReferences(\n              pass.isGlobalRegExpPropertiesUsed());\n        }\n      };\n    }\n  };",
        "begin_line": 1168,
        "end_line": 1183,
        "comment": " Checks for RegExp references. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVariableReferences",
        "snippet": "  final HotSwapPassFactory checkVariableReferences =\n      new HotSwapPassFactory(\"checkVariableReferences\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new VariableReferenceCheck(\n          compiler, options.aggressiveVarCheck);\n    }\n  };",
        "begin_line": 1186,
        "end_line": 1193,
        "comment": " Checks that references to variables look reasonable. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPreprocess",
        "snippet": "  final PassFactory objectPropertyStringPreprocess =\n      new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPreprocess(compiler);\n    }\n  };",
        "begin_line": 1196,
        "end_line": 1202,
        "comment": " Pre-process goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.resolveTypes",
        "snippet": "  final HotSwapPassFactory resolveTypes =\n      new HotSwapPassFactory(\"resolveTypes\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new GlobalTypeResolver(compiler);\n    }\n  };",
        "begin_line": 1205,
        "end_line": 1211,
        "comment": " Creates a typed scope and adds types to the type registry. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.clearTypedScopePass",
        "snippet": "  final PassFactory clearTypedScopePass =\n      new PassFactory(\"clearTypedScopePass\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ClearTypedScope();\n    }\n  };",
        "begin_line": 1214,
        "end_line": 1220,
        "comment": " Clears the typed scope when we're done. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inferTypes",
        "snippet": "  final HotSwapPassFactory inferTypes =\n      new HotSwapPassFactory(\"inferTypes\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(getTypedScopeCreator());\n\n          makeTypeInference(compiler).process(externs, root);\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          makeTypeInference(compiler).inferAllScopes(scriptRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1223,
        "end_line": 1241,
        "comment": " Runs type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inferJsDocInfo",
        "snippet": "  final HotSwapPassFactory inferJsDocInfo =\n      new HotSwapPassFactory(\"inferJsDocInfo\", true) {\n  @Override\n  protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n    return new HotSwapCompilerPass() {\n      @Override\n      public void process(Node externs, Node root) {\n        Preconditions.checkNotNull(topScope);\n        Preconditions.checkNotNull(getTypedScopeCreator());\n\n        makeInferJsDocInfo(compiler).process(externs, root);\n      }\n      @Override\n      public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n        makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot, originalRoot);\n      }\n    };\n  }\n};",
        "begin_line": 1243,
        "end_line": 1261,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkTypes",
        "snippet": "  final HotSwapPassFactory checkTypes =\n      new HotSwapPassFactory(\"checkTypes\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(getTypedScopeCreator());\n\n          TypeCheck check = makeTypeCheck(compiler);\n          check.process(externs, root);\n          compiler.getErrorManager().setTypedPercent(check.getTypedPercent());\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          makeTypeCheck(compiler).check(scriptRoot, false);\n        }\n      };\n    }\n  };",
        "begin_line": 1264,
        "end_line": 1284,
        "comment": " Checks type usage "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlFlow",
        "snippet": "  final HotSwapPassFactory checkControlFlow =\n      new HotSwapPassFactory(\"checkControlFlow\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      List<Callback> callbacks = Lists.newArrayList();\n      if (options.checkUnreachableCode.isOn()) {\n        callbacks.add(\n            new CheckUnreachableCode(compiler, options.checkUnreachableCode));\n      }\n      if (options.checkMissingReturn.isOn() && options.checkTypes) {\n        callbacks.add(\n            new CheckMissingReturn(compiler, options.checkMissingReturn));\n      }\n      return combineChecks(compiler, callbacks);\n    }\n  };",
        "begin_line": 1290,
        "end_line": 1305,
        "comment": "\n   * Checks possible execution paths of the program for problems: missing return\n   * statements and dead code.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkAccessControls",
        "snippet": "  final HotSwapPassFactory checkAccessControls =\n      new HotSwapPassFactory(\"checkAccessControls\", true) {\n    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new CheckAccessControls(compiler);\n    }\n  };",
        "begin_line": 1308,
        "end_line": 1314,
        "comment": " Checks access controls. Depends on type-inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalTypeResolver",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.GlobalTypeResolver.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1326,
        "end_line": 1326,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkGlobalNames",
        "snippet": "  final PassFactory checkGlobalNames =\n      new PassFactory(\"checkGlobalNames\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Create a global namespace for analysis by check passes.\n          // Note that this class does all heavy computation lazily,\n          // so it's OK to create it here.\n          namespaceForChecks = new GlobalNamespace(compiler, externs, jsRoot);\n          new CheckGlobalNames(compiler, options.checkGlobalNamesLevel)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1355,
        "end_line": 1371,
        "comment": " Checks global name usage. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkStrictMode",
        "snippet": "  final PassFactory checkStrictMode =\n      new PassFactory(\"checkStrictMode\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new StrictModeCheck(compiler,\n          !options.checkSymbols,  // don't check variables twice\n          !options.checkCaja);    // disable eval check if not Caja\n    }\n  };",
        "begin_line": 1374,
        "end_line": 1382,
        "comment": " Checks that the code is ES5 or Caja compliant. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.processTweaks",
        "snippet": "  final PassFactory processTweaks = new PassFactory(\"processTweaks\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          new ProcessTweaks(compiler,\n              options.getTweakProcessing().shouldStrip(),\n              options.getTweakReplacements()).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1385,
        "end_line": 1397,
        "comment": " Process goog.tweak.getTweak() calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.processDefines",
        "snippet": "  final PassFactory processDefines = new PassFactory(\"processDefines\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1400,
        "end_line": 1414,
        "comment": " Override @define-annotated constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.garbageCollectChecks",
        "snippet": "  final PassFactory garbageCollectChecks =\n      new HotSwapPassFactory(\"garbageCollectChecks\", true) {\n    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Kill the global namespace so that it can be garbage collected\n          // after all passes are through with it.\n          namespaceForChecks = null;\n        }\n\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          process(null, null);\n        }\n      };\n    }\n  };",
        "begin_line": 1417,
        "end_line": 1435,
        "comment": " Release references to data that is only needed during checks. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkConsts",
        "snippet": "  final PassFactory checkConsts = new PassFactory(\"checkConsts\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ConstCheck(compiler);\n    }\n  };",
        "begin_line": 1438,
        "end_line": 1443,
        "comment": " Checks that all constants are not modified "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkConstParams",
        "snippet": "  final PassFactory checkConstParams =\n      new PassFactory(\"checkConstParams\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ConstParamCheck(compiler);\n    }\n  };",
        "begin_line": 1446,
        "end_line": 1452,
        "comment": " Checks that the arguments are constants "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkEventfulObjectDisposal",
        "snippet": "  final PassFactory checkEventfulObjectDisposal =\n      new PassFactory(\"checkEventfulObjectDisposal\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CheckEventfulObjectDisposal(compiler,\n          options.checkEventfulObjectDisposalPolicy);\n    }\n  };",
        "begin_line": 1455,
        "end_line": 1462,
        "comment": " Check memory bloat patterns "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.computeFunctionNames",
        "snippet": "  final PassFactory computeFunctionNames =\n      new PassFactory(\"computeFunctionNames\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return ((functionNames = new FunctionNames(compiler)));\n    }\n  };",
        "begin_line": 1465,
        "end_line": 1471,
        "comment": " Computes the names of functions for later analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ignoreCajaProperties",
        "snippet": "  final PassFactory ignoreCajaProperties =\n      new PassFactory(\"ignoreCajaProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new IgnoreCajaProperties(compiler);\n    }\n  };",
        "begin_line": 1474,
        "end_line": 1480,
        "comment": " Skips Caja-private properties in for-in loops "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runtimeTypeCheck",
        "snippet": "  final PassFactory runtimeTypeCheck =\n      new PassFactory(\"runtimeTypeCheck\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RuntimeTypeCheck(compiler,\n          options.runtimeTypeCheckLogFunction);\n    }\n  };",
        "begin_line": 1483,
        "end_line": 1490,
        "comment": " Inserts run-time type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceIdGenerators",
        "snippet": "  final PassFactory replaceIdGenerators =\n      new PassFactory(\"replaceIdGenerators\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          ReplaceIdGenerators pass =\n              new ReplaceIdGenerators(\n                  compiler, options.idGenerators, options.generatePseudoNames,\n                  options.idGeneratorsMapSerialized);\n          pass.process(externs, root);\n          idGeneratorMap = pass.getSerializedIdMappings();\n        }\n      };\n    }\n  };",
        "begin_line": 1493,
        "end_line": 1508,
        "comment": " Generates unique ids. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceStrings",
        "snippet": "  final PassFactory replaceStrings = new PassFactory(\"replaceStrings\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          ReplaceStrings pass = new ReplaceStrings(\n              compiler,\n              options.replaceStringsPlaceholderToken,\n              options.replaceStringsFunctionDescriptions,\n              options.replaceStringsReservedStrings,\n              options.replaceStringsInputMap);\n          pass.process(externs, root);\n          stringMap = pass.getStringMap();\n        }\n      };\n    }\n  };",
        "begin_line": 1511,
        "end_line": 1527,
        "comment": " Replace strings. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.optimizeArgumentsArray",
        "snippet": "  final PassFactory optimizeArgumentsArray =\n      new PassFactory(\"optimizeArgumentsArray\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new OptimizeArgumentsArray(compiler);\n    }\n  };",
        "begin_line": 1530,
        "end_line": 1536,
        "comment": " Optimizes the \"arguments\" array. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureCodeRemoval",
        "snippet": "  final PassFactory closureCodeRemoval =\n      new PassFactory(\"closureCodeRemoval\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ClosureCodeRemoval(compiler, options.removeAbstractMethods,\n          options.removeClosureAsserts);\n    }\n  };",
        "begin_line": 1539,
        "end_line": 1546,
        "comment": " Remove variables set to goog.abstractMethod. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureOptimizePrimitives",
        "snippet": "  final PassFactory closureOptimizePrimitives =\n      new PassFactory(\"closureOptimizePrimitives\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ClosureOptimizePrimitives(compiler);\n    }\n  };",
        "begin_line": 1549,
        "end_line": 1555,
        "comment": " Special case optimizations for closure functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.rescopeGlobalSymbols",
        "snippet": "  final PassFactory rescopeGlobalSymbols =\n      new PassFactory(\"rescopeGlobalSymbols\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RescopeGlobalSymbols(\n          compiler,\n          options.renamePrefixNamespace,\n          options.renamePrefixNamespaceAssumeCrossModuleNames);\n    }\n  };",
        "begin_line": 1558,
        "end_line": 1567,
        "comment": " Puts global symbols into a single object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseProperties",
        "snippet": "  final PassFactory collapseProperties =\n      new PassFactory(\"collapseProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CollapseProperties(\n          compiler, options.collapsePropertiesOnExternTypes,\n          !isInliningForbidden());\n    }\n  };",
        "begin_line": 1570,
        "end_line": 1578,
        "comment": " Collapses names in the global scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseObjectLiterals",
        "snippet": "  final PassFactory collapseObjectLiterals =\n      new PassFactory(\"collapseObjectLiterals\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineObjectLiterals(\n          compiler, compiler.getUniqueNameIdSupplier());\n    }\n  };",
        "begin_line": 1581,
        "end_line": 1588,
        "comment": " Rewrite properties as variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypesBuilder",
        "snippet": "  final PassFactory tightenTypesBuilder =\n      new PassFactory(\"tightenTypes\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (!options.checkTypes) {\n        return new ErrorPass(compiler, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n      }\n      tightenTypes = new TightenTypes(compiler);\n      return tightenTypes;\n    }\n  };",
        "begin_line": 1594,
        "end_line": 1604,
        "comment": "\n   * Try to infer the actual types, which may be narrower\n   * than the declared types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.disambiguatePrivateProperties",
        "snippet": "  final PassFactory disambiguatePrivateProperties =\n      new PassFactory(\"disambiguatePrivateProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new DisambiguatePrivateProperties(compiler);\n    }\n  };",
        "begin_line": 1607,
        "end_line": 1613,
        "comment": " Disambiguate property names based on the coding convention. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.disambiguateProperties",
        "snippet": "  final PassFactory disambiguateProperties =\n      new PassFactory(\"disambiguateProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (tightenTypes == null) {\n        return DisambiguateProperties.forJSTypeSystem(compiler,\n            options.propertyInvalidationErrors);\n      } else {\n        return DisambiguateProperties.forConcreteTypeSystem(\n            compiler, tightenTypes, options.propertyInvalidationErrors);\n      }\n    }\n  };",
        "begin_line": 1616,
        "end_line": 1628,
        "comment": " Disambiguate property names based on type information. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.chainCalls",
        "snippet": "  final PassFactory chainCalls = new PassFactory(\"chainCalls\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ChainCalls(compiler);\n    }\n  };",
        "begin_line": 1633,
        "end_line": 1638,
        "comment": "\n   * Chain calls to functions that return this.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.devirtualizePrototypeMethods",
        "snippet": "  final PassFactory devirtualizePrototypeMethods =\n      new PassFactory(\"devirtualizePrototypeMethods\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new DevirtualizePrototypeMethods(compiler);\n    }\n  };",
        "begin_line": 1644,
        "end_line": 1650,
        "comment": "\n   * Rewrite instance methods as static methods, to make them easier\n   * to inline.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.optimizeCallsAndRemoveUnusedVars",
        "snippet": "  final PassFactory optimizeCallsAndRemoveUnusedVars =\n      new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      OptimizeCalls passes = new OptimizeCalls(compiler);\n      if (options.optimizeReturns) {\n        // Remove unused return values.\n        passes.addPass(new OptimizeReturns(compiler));\n      }\n\n      if (options.optimizeParameters) {\n        // Remove all parameters that are constants or unused.\n        passes.addPass(new OptimizeParameters(compiler));\n      }\n\n      if (options.optimizeCalls) {\n        boolean removeOnlyLocals = options.removeUnusedLocalVars\n            && !options.removeUnusedVars;\n        boolean preserveAnonymousFunctionNames =\n            options.anonymousFunctionNaming !=\n            AnonymousFunctionNamingPolicy.OFF;\n        passes.addPass(\n            new RemoveUnusedVars(compiler, !removeOnlyLocals,\n                preserveAnonymousFunctionNames, true));\n      }\n      return passes;\n    }\n  };",
        "begin_line": 1656,
        "end_line": 1683,
        "comment": "\n   * Optimizes unused function arguments, unused return values, and inlines\n   * constant parameters. Also runs RemoveUnusedVars.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markPureFunctions",
        "snippet": "  final PassFactory markPureFunctions =\n      new PassFactory(\"markPureFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new PureFunctionIdentifier.Driver(\n          compiler, options.debugFunctionSideEffectsPath, false);\n    }\n  };",
        "begin_line": 1689,
        "end_line": 1696,
        "comment": "\n   * Look for function calls that are pure, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markNoSideEffectCalls",
        "snippet": "  final PassFactory markNoSideEffectCalls =\n      new PassFactory(\"markNoSideEffectCalls\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new MarkNoSideEffectCalls(compiler);\n    }\n  };",
        "begin_line": 1702,
        "end_line": 1708,
        "comment": "\n   * Look for function calls that have no side effects, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineVariables",
        "snippet": "  final PassFactory inlineVariables =\n      new PassFactory(\"inlineVariables\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (isInliningForbidden()) {\n        // In old renaming schemes, inlining a variable can change whether\n        // or not a property is renamed. This is bad, and those old renaming\n        // schemes need to die.\n        return new ErrorPass(compiler, CANNOT_USE_PROTOTYPE_AND_VAR);\n      } else {\n        InlineVariables.Mode mode;\n        if (options.inlineVariables) {\n          mode = InlineVariables.Mode.ALL;\n        } else if (options.inlineLocalVariables) {\n          mode = InlineVariables.Mode.LOCALS_ONLY;\n        } else {\n          throw new IllegalStateException(\"No variable inlining option set.\");\n        }\n\n        return new InlineVariables(compiler, mode, true);\n      }\n    }\n  };",
        "begin_line": 1711,
        "end_line": 1733,
        "comment": " Inlines variables heuristically. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineConstants",
        "snippet": "  final PassFactory inlineConstants =\n      new PassFactory(\"inlineConstants\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineVariables(\n          compiler, InlineVariables.Mode.CONSTANTS_ONLY, true);\n    }\n  };",
        "begin_line": 1736,
        "end_line": 1743,
        "comment": " Inlines variables that are marked as constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.minimizeExitPoints",
        "snippet": "  final PassFactory minimizeExitPoints =\n      new PassFactory(\"minimizeExitPoints\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new MinimizeExitPoints(compiler);\n    }\n  };",
        "begin_line": 1748,
        "end_line": 1754,
        "comment": "\n   * Perform local control flow optimizations.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnreachableCode",
        "snippet": "  final PassFactory removeUnreachableCode =\n      new PassFactory(\"removeUnreachableCode\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new UnreachableCodeElimination(compiler, true);\n    }\n  };",
        "begin_line": 1759,
        "end_line": 1765,
        "comment": "\n   * Use data flow analysis to remove dead branches.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedPrototypeProperties",
        "snippet": "  final PassFactory removeUnusedPrototypeProperties =\n      new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RemoveUnusedPrototypeProperties(\n          compiler, options.removeUnusedPrototypePropertiesInExterns,\n          !options.removeUnusedVars);\n    }\n  };",
        "begin_line": 1770,
        "end_line": 1778,
        "comment": "\n   * Remove prototype properties that do not appear to be used.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedClassProperties",
        "snippet": "  final PassFactory removeUnusedClassProperties =\n      new PassFactory(\"removeUnusedClassProperties\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new RemoveUnusedClassProperties(compiler);\n    }\n  };",
        "begin_line": 1783,
        "end_line": 1789,
        "comment": "\n   * Remove prototype properties that do not appear to be used.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.smartNamePass",
        "snippet": "  final PassFactory smartNamePass = new PassFactory(\"smartNamePass\", true) {\n    private boolean hasWrittenFile = false;\n\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n\n          String reportPath = options.reportPath;\n          if (reportPath != null) {\n            try {\n              if (hasWrittenFile) {\n                Files.append(na.getHtmlReport(), new File(reportPath),\n                    Charsets.UTF_8);\n              } else {\n                Files.write(na.getHtmlReport(), new File(reportPath),\n                    Charsets.UTF_8);\n                hasWrittenFile = true;\n              }\n            } catch (IOException e) {\n              compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n            }\n          }\n\n          if (options.smartNameRemoval) {\n            na.removeUnreferenced();\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 1795,
        "end_line": 1828,
        "comment": "\n   * Process smart name processing - removes unused classes and does referencing\n   * starting with minimum set of names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.hasWrittenFile",
        "snippet": "    private boolean hasWrittenFile = false;",
        "begin_line": 1796,
        "end_line": 1796,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.smartNamePass2",
        "snippet": "  final PassFactory smartNamePass2 = new PassFactory(\"smartNamePass\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n          na.removeUnreferenced();\n        }\n      };\n    }\n  };",
        "begin_line": 1834,
        "end_line": 1846,
        "comment": "\n   * Process smart name processing - removes unused classes and does referencing\n   * starting with minimum set of names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineSimpleMethods",
        "snippet": "  final PassFactory inlineSimpleMethods =\n      new PassFactory(\"inlineSimpleMethods\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineSimpleMethods(compiler);\n    }\n  };",
        "begin_line": 1849,
        "end_line": 1855,
        "comment": " Inlines simple methods, like getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.deadAssignmentsElimination",
        "snippet": "  final PassFactory deadAssignmentsElimination =\n      new PassFactory(\"deadAssignmentsElimination\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new DeadAssignmentsElimination(compiler);\n    }\n  };",
        "begin_line": 1858,
        "end_line": 1864,
        "comment": " Kills dead assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineFunctions",
        "snippet": "  final PassFactory inlineFunctions =\n      new PassFactory(\"inlineFunctions\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      boolean enableBlockInlining = !isInliningForbidden();\n      return new InlineFunctions(\n          compiler,\n          compiler.getUniqueNameIdSupplier(),\n          options.inlineFunctions,\n          options.inlineLocalFunctions,\n          enableBlockInlining,\n          options.assumeStrictThis()\n              || options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT,\n          options.assumeClosuresOnlyCaptureReferences);\n    }\n  };",
        "begin_line": 1867,
        "end_line": 1882,
        "comment": " Inlines function calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineProperties",
        "snippet": "  final PassFactory inlineProperties =\n      new PassFactory(\"inlineProperties\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new InlineProperties(compiler);\n    }\n  };",
        "begin_line": 1885,
        "end_line": 1891,
        "comment": " Inlines constant properties. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedVars",
        "snippet": "  final PassFactory removeUnusedVars =\n      new PassFactory(\"removeUnusedVars\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      boolean removeOnlyLocals = options.removeUnusedLocalVars\n          && !options.removeUnusedVars;\n      boolean preserveAnonymousFunctionNames =\n          options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n      return new RemoveUnusedVars(\n          compiler,\n          !removeOnlyLocals,\n          preserveAnonymousFunctionNames,\n          false);\n    }\n  };",
        "begin_line": 1894,
        "end_line": 1908,
        "comment": " Removes variables that are never used. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleCodeMotion",
        "snippet": "  final PassFactory crossModuleCodeMotion =\n      new PassFactory(\"crossModuleCodeMotion\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CrossModuleCodeMotion(compiler, compiler.getModuleGraph());\n    }\n  };",
        "begin_line": 1913,
        "end_line": 1919,
        "comment": "\n   * Move global symbols to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleMethodMotion",
        "snippet": "  final PassFactory crossModuleMethodMotion =\n      new PassFactory(\"crossModuleMethodMotion\", false) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CrossModuleMethodMotion(\n          compiler, crossModuleIdGenerator,\n          // Only move properties in externs if we're not treating\n          // them as exports.\n          options.removeUnusedPrototypePropertiesInExterns);\n    }\n  };",
        "begin_line": 1924,
        "end_line": 1934,
        "comment": "\n   * Move methods to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.specializeInitialModule",
        "snippet": "  final PassFactory specializeInitialModule =\n      new PassFactory(\"specializeInitialModule\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new SpecializeModule(compiler, devirtualizePrototypeMethods,\n          inlineFunctions, removeUnusedPrototypeProperties);\n    }\n  };",
        "begin_line": 1939,
        "end_line": 1946,
        "comment": "\n   * Specialize the initial module at the cost of later modules\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.flowSensitiveInlineVariables",
        "snippet": "  final PassFactory flowSensitiveInlineVariables =\n      new PassFactory(\"flowSensitiveInlineVariables\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new FlowSensitiveInlineVariables(compiler);\n    }\n  };",
        "begin_line": 1949,
        "end_line": 1955,
        "comment": " A data-flow based variable inliner. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.coalesceVariableNames",
        "snippet": "  final PassFactory coalesceVariableNames =\n      new PassFactory(\"coalesceVariableNames\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CoalesceVariableNames(compiler, options.generatePseudoNames);\n    }\n  };",
        "begin_line": 1958,
        "end_line": 1964,
        "comment": " Uses register-allocation algorithms to use fewer variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exploitAssign",
        "snippet": "  final PassFactory exploitAssign = new PassFactory(\"exploitAssign\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new PeepholeOptimizationsPass(compiler,\n          new ExploitAssigns());\n    }\n  };",
        "begin_line": 1970,
        "end_line": 1976,
        "comment": "\n   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n   * {@code var x,y;}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseVariableDeclarations",
        "snippet": "  final PassFactory collapseVariableDeclarations =\n      new PassFactory(\"collapseVariableDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CollapseVariableDeclarations(compiler);\n    }\n  };",
        "begin_line": 1982,
        "end_line": 1988,
        "comment": "\n   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n   * {@code var x,y;}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.groupVariableDeclarations",
        "snippet": "  final PassFactory groupVariableDeclarations =\n      new PassFactory(\"groupVariableDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new GroupVariableDeclarations(compiler);\n    }\n  };",
        "begin_line": 1993,
        "end_line": 1999,
        "comment": "\n   * Simple global collapses of variable declarations.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.extractPrototypeMemberDeclarations",
        "snippet": "  final PassFactory extractPrototypeMemberDeclarations =\n      new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ExtractPrototypeMemberDeclarations(\n          compiler, Pattern.USE_GLOBAL_TEMP);\n    }\n  };",
        "begin_line": 2004,
        "end_line": 2011,
        "comment": "\n   * Extracts common sub-expressions.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.rewriteFunctionExpressions",
        "snippet": "  final PassFactory rewriteFunctionExpressions =\n      new PassFactory(\"rewriteFunctionExpressions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new FunctionRewriter(compiler);\n    }\n  };",
        "begin_line": 2014,
        "end_line": 2020,
        "comment": " Rewrites common function definitions to be more compact. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseAnonymousFunctions",
        "snippet": "  final PassFactory collapseAnonymousFunctions =\n      new PassFactory(\"collapseAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new CollapseAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 2023,
        "end_line": 2029,
        "comment": " Collapses functions to not use the VAR keyword. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.moveFunctionDeclarations",
        "snippet": "  final PassFactory moveFunctionDeclarations =\n      new PassFactory(\"moveFunctionDeclarations\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new MoveFunctionDeclarations(compiler);\n    }\n  };",
        "begin_line": 2032,
        "end_line": 2038,
        "comment": " Moves function declarations to the top, to simulate actual hoisting. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameUnmappedAnonymousFunctions",
        "snippet": "  final PassFactory nameUnmappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new NameAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 2040,
        "end_line": 2046,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameMappedAnonymousFunctions",
        "snippet": "  final PassFactory nameMappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          NameAnonymousFunctionsMapped naf =\n              new NameAnonymousFunctionsMapped(\n                  compiler, options.inputAnonymousFunctionNamingMap);\n          naf.process(externs, root);\n          anonymousFunctionNameMap = naf.getFunctionMap();\n        }\n      };\n    }\n  };",
        "begin_line": 2048,
        "end_line": 2062,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasExternals",
        "snippet": "  final PassFactory aliasExternals = new PassFactory(\"aliasExternals\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AliasExternals(compiler, compiler.getModuleGraph(),\n          options.unaliasableGlobals, options.aliasableGlobals);\n    }\n  };",
        "begin_line": 2065,
        "end_line": 2071,
        "comment": " Alias external symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasStrings",
        "snippet": "  final PassFactory aliasStrings = new PassFactory(\"aliasStrings\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AliasStrings(\n          compiler,\n          compiler.getModuleGraph(),\n          options.aliasAllStrings ? null : options.aliasableStrings,\n          options.aliasStringsBlacklist,\n          options.outputJsStringUsage);\n    }\n  };",
        "begin_line": 2077,
        "end_line": 2087,
        "comment": "\n   * Alias string literals with global variables, to avoid creating lots of\n   * transient objects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasKeywords",
        "snippet": "  final PassFactory aliasKeywords = new PassFactory(\"aliasKeywords\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AliasKeywords(compiler);\n    }\n  };",
        "begin_line": 2090,
        "end_line": 2095,
        "comment": " Aliases common keywords (true, false) "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPostprocess",
        "snippet": "  final PassFactory objectPropertyStringPostprocess =\n      new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPostprocess(compiler);\n    }\n  };",
        "begin_line": 2098,
        "end_line": 2104,
        "comment": " Handling for the ObjectPropertyString primitive. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ambiguateProperties",
        "snippet": "  final PassFactory ambiguateProperties =\n      new PassFactory(\"ambiguateProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AmbiguateProperties(\n          compiler, options.anonymousFunctionNaming.getReservedCharacters());\n    }\n  };",
        "begin_line": 2110,
        "end_line": 2117,
        "comment": "\n   * Renames properties so that the two properties that never appear on\n   * the same object get the same name.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markUnnormalized",
        "snippet": "  final PassFactory markUnnormalized =\n      new PassFactory(\"markUnnormalized\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          compiler.setLifeCycleStage(LifeCycleStage.RAW);\n        }\n      };\n    }\n  };",
        "begin_line": 2122,
        "end_line": 2132,
        "comment": "\n   * Mark the point at which the normalized AST assumptions no longer hold.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.denormalize",
        "snippet": "  final PassFactory denormalize = new PassFactory(\"denormalize\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new Denormalize(compiler);\n    }\n  };",
        "begin_line": 2135,
        "end_line": 2140,
        "comment": " Denormalize the AST for code generation. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.invertContextualRenaming",
        "snippet": "  final PassFactory invertContextualRenaming =\n      new PassFactory(\"invertContextualRenaming\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n    }\n  };",
        "begin_line": 2143,
        "end_line": 2149,
        "comment": " Inverting name normalization. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameProperties",
        "snippet": "  final PassFactory renameProperties =\n      new PassFactory(\"renameProperties\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      final VariableMap prevPropertyMap = options.inputPropertyMap;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          propertyMap = runPropertyRenaming(\n              compiler, prevPropertyMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 2154,
        "end_line": 2166,
        "comment": "\n   * Renames properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameVars",
        "snippet": "  final PassFactory renameVars = new PassFactory(\"renameVars\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      final VariableMap prevVariableMap = options.inputVariableMap;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          variableMap = runVariableRenaming(\n              compiler, prevVariableMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 2200,
        "end_line": 2211,
        "comment": " Renames variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.gatherCharBias",
        "snippet": "  final PassFactory gatherCharBias = new PassFactory(\"gatherCharBias\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new GatherCharacterEncodingBias(\n          compiler,\n          getNameGenerator(),\n          options.variableRenaming != VariableRenamingPolicy.LOCAL);\n    }\n  };",
        "begin_line": 2258,
        "end_line": 2266,
        "comment": " Renames labels "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameLabels",
        "snippet": "  final PassFactory renameLabels = new PassFactory(\"renameLabels\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      if (options.aggressiveRenaming) {\n        return new RenameLabels(compiler, getNameGenerator());\n      } else {\n        return new RenameLabels(compiler);\n      }\n    }\n  };",
        "begin_line": 2269,
        "end_line": 2278,
        "comment": " Renames labels "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.convertToDottedProperties",
        "snippet": "  final PassFactory convertToDottedProperties =\n      new PassFactory(\"convertToDottedProperties\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new ConvertToDottedProperties(compiler);\n    }\n  };",
        "begin_line": 2281,
        "end_line": 2287,
        "comment": " Convert bracket access to dot access "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.sanityCheckAst",
        "snippet": "  final PassFactory sanityCheckAst = new PassFactory(\"sanityCheckAst\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new AstValidator();\n    }\n  };",
        "begin_line": 2290,
        "end_line": 2295,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.sanityCheckVars",
        "snippet": "  final PassFactory sanityCheckVars = new PassFactory(\"sanityCheckVars\", true) {\n    @Override\n    protected CompilerPass create(AbstractCompiler compiler) {\n      return new VarCheck(compiler, true);\n    }\n  };",
        "begin_line": 2298,
        "end_line": 2303,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.instrumentFunctions",
        "snippet": "  final PassFactory instrumentFunctions =\n      new PassFactory(\"instrumentFunctions\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          try {\n            FileReader templateFile =\n                new FileReader(options.instrumentationTemplate);\n            (new InstrumentFunctions(\n                compiler, functionNames,\n                options.instrumentationTemplate,\n                options.appNameStr,\n                templateFile)).process(externs, root);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(AbstractCompiler.READ_ERROR,\n                    options.instrumentationTemplate));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2306,
        "end_line": 2328,
        "comment": " Adds instrumentations according to an instrumentation template. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.instrumentMemoryAllocations",
        "snippet": "  final PassFactory instrumentMemoryAllocations =\n      new PassFactory(\"instrumentMemoryAllocations\", true) {\n        @Override\n        protected CompilerPass create(final AbstractCompiler compiler) {\n          return new InstrumentMemoryAllocPass(compiler);\n        }\n      };",
        "begin_line": 2331,
        "end_line": 2337,
        "comment": " Adds instrumentation for memory allocations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.instrumentForCodeCoverage",
        "snippet": "  final PassFactory instrumentForCodeCoverage =\n      new PassFactory(\"instrumentForCodeCoverage\", true) {\n        @Override\n        protected CompilerPass create(final AbstractCompiler compiler) {\n          // TODO(johnlenz): make global instrumentation an option\n          return new CoverageInstrumentationPass(\n              compiler, CoverageReach.CONDITIONAL);\n        }\n      };",
        "begin_line": 2339,
        "end_line": 2347,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.printNameReferenceGraph",
        "snippet": "  final PassFactory printNameReferenceGraph =\n    new PassFactory(\"printNameReferenceGraph\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          NameReferenceGraphConstruction gc =\n              new NameReferenceGraphConstruction(compiler);\n          gc.process(externs, jsRoot);\n          String graphFileName = options.nameReferenceGraphPath;\n          try {\n            Files.write(DotFormatter.toDot(gc.getNameReferenceGraph()),\n                new File(graphFileName),\n                Charsets.UTF_8);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(\n                    NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2418,
        "end_line": 2441,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.printNameReferenceReport",
        "snippet": "  final PassFactory printNameReferenceReport =\n      new PassFactory(\"printNameReferenceReport\", true) {\n    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          NameReferenceGraphConstruction gc =\n              new NameReferenceGraphConstruction(compiler);\n          String reportFileName = options.nameReferenceReportPath;\n          try {\n            NameReferenceGraphReport report =\n                new NameReferenceGraphReport(gc.getNameReferenceGraph());\n            Files.write(report.getHtmlReport(),\n                new File(reportFileName),\n                Charsets.UTF_8);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(\n                    NAME_REF_REPORT_FILE_ERROR,\n                    e.getMessage(),\n                    reportFileName));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2443,
        "end_line": 2469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final PropertyMap properties;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeFallback",
        "snippet": "  private ObjectType implicitPrototypeFallback;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " some subclasses override this to do special resolution handling."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.ownerFunction",
        "snippet": "  private FunctionType ownerFunction = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " to do this for multiple functions, then we'll have to create a new one."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.prettyPrint",
        "snippet": "  private boolean prettyPrint = false;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " by printing all properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",
        "snippet": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.templateKeys",
        "snippet": "  private final ImmutableList<TemplateType> templateKeys;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The TemplateType keys of the map."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.templateValues",
        "snippet": "  private final ImmutableList<JSType> templateValues;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " iterative type resolution to find their true, resolved type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.resolvedTemplateValues",
        "snippet": "  private final ImmutableList<JSType> resolvedTemplateValues;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " equivalence of two TemplateTypeMap instances."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.suppressors",
        "snippet": "  private final Map<String, DiagnosticGroupWarningsGuard> suppressors =\n      Maps.newHashMap();",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Warnings guards for each suppressible warnings group, indexed by name. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.SCOPING_METHOD_NAME",
        "snippet": "  static final String SCOPING_METHOD_NAME = \"goog.scope\";",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Name used to denote an scoped function block used for aliasing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.preprocessorSymbolTable",
        "snippet": "  private final PreprocessorSymbolTable preprocessorSymbolTable;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.transformationHandler",
        "snippet": "  private final AliasTransformationHandler transformationHandler;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USED_IMPROPERLY",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
        "begin_line": 82,
        "end_line": 84,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
        "begin_line": 86,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_REFERENCES_THIS",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
        "begin_line": 92,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_RETURN",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
        "begin_line": 96,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_THROW",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
        "begin_line": 100,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
        "begin_line": 104,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_ALIAS_CYCLE",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_ALIAS_CYCLE = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_CYCLE\",\n      \"The aliases {0} has a cycle.\");",
        "begin_line": 108,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
        "begin_line": 112,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.scopedAliasNames",
        "snippet": "  private Multiset<String> scopedAliasNames = HashMultiset.create();",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasUsage",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasUsage.aliasVar",
        "snippet": "    final Var aliasVar;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasUsage",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasUsage.aliasReference",
        "snippet": "    final Node aliasReference;",
        "begin_line": 193,
        "end_line": 193,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliasDefinitionsInOrder",
        "snippet": "    private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();",
        "begin_line": 249,
        "end_line": 249,
        "comment": " The order of this list determines the order that aliases are applied."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.scopeCalls",
        "snippet": "    private final List<Node> scopeCalls = Lists.newArrayList();",
        "begin_line": 251,
        "end_line": 251,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliasUsages",
        "snippet": "    private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliases",
        "snippet": "    private final Map<String, Var> aliases = Maps.newHashMap();",
        "begin_line": 256,
        "end_line": 256,
        "comment": " This map is temporary and cleared for each scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.injectedDecls",
        "snippet": "    private final Set<Node> injectedDecls = Sets.newHashSet();",
        "begin_line": 259,
        "end_line": 259,
        "comment": " Also temporary and cleared for each scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.forbiddenLocals",
        "snippet": "    private final Set<String> forbiddenLocals = Sets.newHashSet(\"$jscomp\");",
        "begin_line": 271,
        "end_line": 271,
        "comment": " up warning messages downstream)."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.hasNamespaceShadows",
        "snippet": "    private boolean hasNamespaceShadows = false;",
        "begin_line": 272,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.hasErrors",
        "snippet": "    private boolean hasErrors = false;",
        "begin_line": 274,
        "end_line": 274,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.transformation",
        "snippet": "    private AliasTransformation transformation = null;",
        "begin_line": 276,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerpt",
        "snippet": "  private SourceExcerpt excerpt;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerptFormatter",
        "snippet": "  private static final ExcerptFormatter excerptFormatter =\n      new LineNumberingFormatter();",
        "begin_line": 32,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.OBJECTLIT_EXPECTED",
        "snippet": "  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.indirectlyDeclaredProperties",
        "snippet": "  private final Set<String> indirectlyDeclaredProperties;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.propertyTestFunctions",
        "snippet": "  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
        "begin_line": 313,
        "end_line": 316,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssertFunctionByTypeName",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.AssertFunctionByTypeName.typeName",
        "snippet": "    private final String typeName;",
        "begin_line": 477,
        "end_line": 477,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.manageClosureDependencies",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private boolean manageClosureDependencies = false;",
        "begin_line": 44,
        "end_line": 45,
        "comment": " Unused. For people using reflection to circumvent access control."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 7L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageIn",
        "snippet": "  private LanguageMode languageIn;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n   * The JavaScript language version accepted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageOut",
        "snippet": "  private LanguageMode languageOut;",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n   * The JavaScript language version that should be produced.\n   * Currently, this is always the same as {@link #languageIn}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.acceptConstKeyword",
        "snippet": "  boolean acceptConstKeyword;",
        "begin_line": 75,
        "end_line": 75,
        "comment": "\n   * Whether the compiler accepts the `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeStrictThis",
        "snippet": "  private boolean assumeStrictThis;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n   * Whether the compiler should assume that a function's \"this\" value\n   * never needs coercion (for example in non-strict \"null\" or \"undefined\" will\n   * be coerced to the global \"this\" and primitives to objects).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ideMode",
        "snippet": "  public boolean ideMode;",
        "begin_line": 96,
        "end_line": 96,
        "comment": "\n   * Configures the compiler for use as an IDE backend.  In this mode:\n   * <ul>\n   *  <li>No optimization passes will run.</li>\n   *  <li>The last time custom passes are invoked is\n   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}</li>\n   *  <li>The compiler will always try to process all inputs fully, even\n   *      if it encounters errors.</li>\n   *  <li>The compiler may record more information than is strictly\n   *      needed for codegen.</li>\n   * </ul>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.saveDataStructures",
        "snippet": "  boolean saveDataStructures = false;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypes",
        "snippet": "  boolean inferTypes;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\n   * Even if checkTypes is disabled, clients might want to still infer types.\n   * This is mostly used when ideMode is enabled.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllPasses",
        "snippet": "  boolean skipAllPasses;",
        "begin_line": 109,
        "end_line": 109,
        "comment": "\n   * Configures the compiler to skip as many passes as possible.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameAnonymousFunctionsOnly",
        "snippet": "  boolean nameAnonymousFunctionsOnly;",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\n   * If true, name anonymous functions only. All others passes will be skipped.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devMode",
        "snippet": "  DevMode devMode;",
        "begin_line": 120,
        "end_line": 120,
        "comment": "\n   * Configures the compiler to run expensive sanity checks after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkDeterminism",
        "snippet": "  private boolean checkDeterminism;",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * Configures the compiler to log a hash code of the AST after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.dependencyOptions",
        "snippet": "  DependencyOptions dependencyOptions = new DependencyOptions();",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.messageBundle",
        "snippet": "  public transient MessageBundle messageBundle = null;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Transient so that clients don't have to implement Serializable."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSymbols",
        "snippet": "  public boolean checkSymbols;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " Checks that all symbols are defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveVarCheck",
        "snippet": "  public CheckLevel aggressiveVarCheck;",
        "begin_line": 145,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSuspiciousCode",
        "snippet": "  public boolean checkSuspiciousCode;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " Checks for suspicious statements that have no effect "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkControlStructures",
        "snippet": "  public boolean checkControlStructures;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " Checks for invalid control structures "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypes",
        "snippet": "  public boolean checkTypes;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " Checks types on expressions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tightenTypes",
        "snippet": "  boolean tightenTypes;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportMissingOverride",
        "snippet": "  public CheckLevel reportMissingOverride;",
        "begin_line": 168,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkRequires",
        "snippet": "  public CheckLevel checkRequires;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " Checks for missing goog.require() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkProvides",
        "snippet": "  public CheckLevel checkProvides;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalNamesLevel",
        "snippet": "  public CheckLevel checkGlobalNamesLevel;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.brokenClosureRequiresLevel",
        "snippet": "  public CheckLevel brokenClosureRequiresLevel;",
        "begin_line": 202,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalThisLevel",
        "snippet": "  public CheckLevel checkGlobalThisLevel;",
        "begin_line": 209,
        "end_line": 209,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameLevel",
        "snippet": "  public CheckLevel checkMissingGetCssNameLevel;",
        "begin_line": 223,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameBlacklist",
        "snippet": "  public String checkMissingGetCssNameBlacklist;",
        "begin_line": 236,
        "end_line": 236,
        "comment": "\n   * Regex of string literals that may only appear in goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkCaja",
        "snippet": "  boolean checkCaja;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " Checks that the syntactic restrictions of Caja are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extraAnnotationNames",
        "snippet": "  Set<String> extraAnnotationNames;",
        "begin_line": 250,
        "end_line": 250,
        "comment": "\n   * A set of extra annotation names which are accepted and silently ignored\n   * when encountered in a source file. Defaults to null which has the same\n   * effect as specifying an empty set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkEventfulObjectDisposalPolicy",
        "snippet": "  CheckEventfulObjectDisposal.DisposalCheckingPolicy checkEventfulObjectDisposalPolicy;",
        "begin_line": 255,
        "end_line": 255,
        "comment": "\n   * Check for patterns that are known to cause memory leaks.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveRenaming",
        "snippet": "  boolean aggressiveRenaming;",
        "begin_line": 276,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.alternateRenaming",
        "snippet": "  boolean alternateRenaming; // triggers RenameVars2.",
        "begin_line": 277,
        "end_line": 277,
        "comment": " triggers RenameVars2."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveFusion",
        "snippet": "  boolean aggressiveFusion;",
        "begin_line": 280,
        "end_line": 280,
        "comment": " Prefer commas over semicolons when doing statement fusion "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.foldConstants",
        "snippet": "  public boolean foldConstants;",
        "begin_line": 283,
        "end_line": 283,
        "comment": " Folds constants (e.g. (2 + 3) to 5) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.deadAssignmentElimination",
        "snippet": "  public boolean deadAssignmentElimination;",
        "begin_line": 286,
        "end_line": 286,
        "comment": " Remove assignments to values that can not be referenced "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineConstantVars",
        "snippet": "  public boolean inlineConstantVars;",
        "begin_line": 289,
        "end_line": 289,
        "comment": " Inlines constants (symbols that are all CAPS) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineFunctions",
        "snippet": "  public boolean inlineFunctions;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " Inlines global functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalFunctions",
        "snippet": "  public boolean inlineLocalFunctions;",
        "begin_line": 295,
        "end_line": 295,
        "comment": " Inlines functions defined in local scopes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeClosuresOnlyCaptureReferences",
        "snippet": "  boolean assumeClosuresOnlyCaptureReferences;",
        "begin_line": 298,
        "end_line": 298,
        "comment": " More aggressive function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineProperties",
        "snippet": "  boolean inlineProperties;",
        "begin_line": 301,
        "end_line": 301,
        "comment": " Inlines properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleCodeMotion",
        "snippet": "  public boolean crossModuleCodeMotion;",
        "begin_line": 304,
        "end_line": 304,
        "comment": " Move code to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.coalesceVariableNames",
        "snippet": "  public boolean coalesceVariableNames;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Merge two variables together as one. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleMethodMotion",
        "snippet": "  public boolean crossModuleMethodMotion;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " Move methods to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineGetters",
        "snippet": "  public boolean inlineGetters;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " Inlines trivial getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineVariables",
        "snippet": "  public boolean inlineVariables;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalVariables",
        "snippet": "  boolean inlineLocalVariables;",
        "begin_line": 319,
        "end_line": 319,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.flowSensitiveInlineVariables",
        "snippet": "  public boolean flowSensitiveInlineVariables;",
        "begin_line": 323,
        "end_line": 323,
        "comment": " Remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.smartNameRemoval",
        "snippet": "  public boolean smartNameRemoval;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extraSmartNameRemoval",
        "snippet": "  boolean extraSmartNameRemoval;",
        "begin_line": 329,
        "end_line": 329,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeDeadCode",
        "snippet": "  public boolean removeDeadCode;",
        "begin_line": 332,
        "end_line": 332,
        "comment": " Removes code that will never execute "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnreachableCode",
        "snippet": "  public CheckLevel checkUnreachableCode;",
        "begin_line": 334,
        "end_line": 334,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingReturn",
        "snippet": "  public CheckLevel checkMissingReturn;",
        "begin_line": 341,
        "end_line": 341,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extractPrototypeMemberDeclarations",
        "snippet": "  public boolean extractPrototypeMemberDeclarations;",
        "begin_line": 349,
        "end_line": 349,
        "comment": " Extracts common prototype member declarations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypeProperties",
        "snippet": "  public boolean removeUnusedPrototypeProperties;",
        "begin_line": 352,
        "end_line": 352,
        "comment": " Removes unused member prototypes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypePropertiesInExterns",
        "snippet": "  public boolean removeUnusedPrototypePropertiesInExterns;",
        "begin_line": 355,
        "end_line": 355,
        "comment": " Tells AnalyzePrototypeProperties it can remove externed props. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedClassProperties",
        "snippet": "  public boolean removeUnusedClassProperties;",
        "begin_line": 358,
        "end_line": 358,
        "comment": " Removes unused member properties "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVars",
        "snippet": "  public boolean removeUnusedVars;",
        "begin_line": 361,
        "end_line": 361,
        "comment": " Removes unused variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedLocalVars",
        "snippet": "  public boolean removeUnusedLocalVars;",
        "begin_line": 364,
        "end_line": 364,
        "comment": " Removes unused variables in local scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasExternals",
        "snippet": "  public boolean aliasExternals;",
        "begin_line": 367,
        "end_line": 367,
        "comment": " Adds variable aliases for externals to reduce code size "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableGlobals",
        "snippet": "  String aliasableGlobals;",
        "begin_line": 369,
        "end_line": 369,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.unaliasableGlobals",
        "snippet": "  String unaliasableGlobals;",
        "begin_line": 380,
        "end_line": 380,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseVariableDeclarations",
        "snippet": "  public boolean collapseVariableDeclarations;",
        "begin_line": 391,
        "end_line": 391,
        "comment": " Collapses multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.groupVariableDeclarations",
        "snippet": "  boolean groupVariableDeclarations;",
        "begin_line": 394,
        "end_line": 394,
        "comment": " Group multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseAnonymousFunctions",
        "snippet": "  public boolean collapseAnonymousFunctions;",
        "begin_line": 400,
        "end_line": 400,
        "comment": "\n   * Collapses anonymous function declarations into named function\n   * declarations\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableStrings",
        "snippet": "  public Set<String> aliasableStrings;",
        "begin_line": 407,
        "end_line": 407,
        "comment": "\n   * If set to a non-empty set, those strings literals will be aliased to a\n   * single global instance per string, to avoid creating more objects than\n   * necessary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasStringsBlacklist",
        "snippet": "  public String aliasStringsBlacklist;",
        "begin_line": 414,
        "end_line": 414,
        "comment": "\n   * A blacklist in the form of a regular expression to block strings that\n   * contains certain words from being aliased.\n   * If the value is the empty string, no words are blacklisted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasAllStrings",
        "snippet": "  public boolean aliasAllStrings;",
        "begin_line": 421,
        "end_line": 421,
        "comment": "\n   * Aliases all string literals to global instances, to avoid creating more\n   * objects than necessary (if true, overrides any set of strings passed in\n   * to aliasableStrings)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputJsStringUsage",
        "snippet": "  boolean outputJsStringUsage;",
        "begin_line": 424,
        "end_line": 424,
        "comment": " Print string usage as part of the compilation log. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.convertToDottedProperties",
        "snippet": "  public boolean convertToDottedProperties;",
        "begin_line": 427,
        "end_line": 427,
        "comment": " Converts quoted property accesses to dot syntax (a['b'] -> a.b) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteFunctionExpressions",
        "snippet": "  public boolean rewriteFunctionExpressions;",
        "begin_line": 430,
        "end_line": 430,
        "comment": " Reduces the size of common function expressions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeParameters",
        "snippet": "  public boolean optimizeParameters;",
        "begin_line": 435,
        "end_line": 435,
        "comment": "\n   * Remove unused and constant parameters.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeReturns",
        "snippet": "  public boolean optimizeReturns;",
        "begin_line": 440,
        "end_line": 440,
        "comment": "\n   * Remove unused return values.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeCalls",
        "snippet": "  public boolean optimizeCalls;",
        "begin_line": 445,
        "end_line": 445,
        "comment": "\n   * Remove unused parameters from call sites.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeArgumentsArray",
        "snippet": "  public boolean optimizeArgumentsArray;",
        "begin_line": 450,
        "end_line": 450,
        "comment": "\n   * Provide formal names for elements of arguments array.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.chainCalls",
        "snippet": "  boolean chainCalls;",
        "begin_line": 453,
        "end_line": 453,
        "comment": " Chains calls to functions that return this. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.variableRenaming",
        "snippet": "  public VariableRenamingPolicy variableRenaming;",
        "begin_line": 460,
        "end_line": 460,
        "comment": " Controls which variables get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyRenaming",
        "snippet": "  public PropertyRenamingPolicy propertyRenaming;",
        "begin_line": 463,
        "end_line": 463,
        "comment": " Controls which properties get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyAffinity",
        "snippet": "  boolean propertyAffinity;",
        "begin_line": 466,
        "end_line": 466,
        "comment": " Should we use affinity information when generating property names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.labelRenaming",
        "snippet": "  public boolean labelRenaming;",
        "begin_line": 469,
        "end_line": 469,
        "comment": " Controls label renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reserveRawExports",
        "snippet": "  public boolean reserveRawExports;",
        "begin_line": 472,
        "end_line": 472,
        "comment": " Reserve property names on the global this object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shadowVariables",
        "snippet": "  boolean shadowVariables;",
        "begin_line": 475,
        "end_line": 475,
        "comment": " Should shadow variable names in outer scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generatePseudoNames",
        "snippet": "  public boolean generatePseudoNames;",
        "begin_line": 480,
        "end_line": 480,
        "comment": "\n   * Generate pseudo names for variables and properties for debugging purposes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefix",
        "snippet": "  public String renamePrefix;",
        "begin_line": 483,
        "end_line": 483,
        "comment": " Specifies a prefix for all globals "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefixNamespace",
        "snippet": "  public String renamePrefixNamespace;",
        "begin_line": 489,
        "end_line": 489,
        "comment": "\n   * Specifies the name of an object that will be used to store all non-extern\n   * globals.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefixNamespaceAssumeCrossModuleNames",
        "snippet": "  boolean renamePrefixNamespaceAssumeCrossModuleNames = false;",
        "begin_line": 495,
        "end_line": 495,
        "comment": "\n   * Used by tests of the RescopeGlobalSymbols pass to avoid having declare 2\n   * modules in simple cases.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasKeywords",
        "snippet": "  public boolean aliasKeywords;",
        "begin_line": 502,
        "end_line": 502,
        "comment": " Aliases true, false, and null to variables with shorter names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseProperties",
        "snippet": "  public boolean collapseProperties;",
        "begin_line": 505,
        "end_line": 505,
        "comment": " Flattens multi-level property names (e.g. a$b = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseObjectLiterals",
        "snippet": "  boolean collapseObjectLiterals;",
        "begin_line": 508,
        "end_line": 508,
        "comment": " Split object literals into individual variables when possible. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapsePropertiesOnExternTypes",
        "snippet": "  boolean collapsePropertiesOnExternTypes;",
        "begin_line": 515,
        "end_line": 515,
        "comment": " Flattens multi-level property names on extern types (e.g. String$f = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devirtualizePrototypeMethods",
        "snippet": "  public boolean devirtualizePrototypeMethods;",
        "begin_line": 521,
        "end_line": 521,
        "comment": "\n   * Devirtualize prototype method by rewriting them to be static calls that\n   * take the this pointer as their first argument\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.computeFunctionSideEffects",
        "snippet": "  public boolean computeFunctionSideEffects;",
        "begin_line": 527,
        "end_line": 527,
        "comment": "\n   * Use @nosideeffects annotations, function bodies and name graph\n   * to determine if calls have side effects.  Requires --check_types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.debugFunctionSideEffectsPath",
        "snippet": "  String debugFunctionSideEffectsPath;",
        "begin_line": 532,
        "end_line": 532,
        "comment": "\n   * Where to save debug report for compute function side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguatePrivateProperties",
        "snippet": "  boolean disambiguatePrivateProperties;",
        "begin_line": 538,
        "end_line": 538,
        "comment": "\n   * Rename private properties to disambiguate between unrelated fields based on\n   * the coding convention.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguateProperties",
        "snippet": "  public boolean disambiguateProperties;",
        "begin_line": 544,
        "end_line": 544,
        "comment": "\n   * Rename properties to disambiguate between unrelated fields based on\n   * type information.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ambiguateProperties",
        "snippet": "  public boolean ambiguateProperties;",
        "begin_line": 547,
        "end_line": 547,
        "comment": " Rename unrelated properties to the same name to reduce code size. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.anonymousFunctionNaming",
        "snippet": "  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;",
        "begin_line": 550,
        "end_line": 550,
        "comment": " Give anonymous functions names for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputAnonymousFunctionNamingMap",
        "snippet": "  VariableMap inputAnonymousFunctionNamingMap;",
        "begin_line": 553,
        "end_line": 553,
        "comment": " Input anonymous function renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputVariableMap",
        "snippet": "  VariableMap inputVariableMap;",
        "begin_line": 556,
        "end_line": 556,
        "comment": " Input variable renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputPropertyMap",
        "snippet": "  VariableMap inputPropertyMap;",
        "begin_line": 559,
        "end_line": 559,
        "comment": " Input property renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportTestFunctions",
        "snippet": "  public boolean exportTestFunctions;",
        "begin_line": 562,
        "end_line": 562,
        "comment": " Whether to export test functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.specializeInitialModule",
        "snippet": "  boolean specializeInitialModule;",
        "begin_line": 564,
        "end_line": 564,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceMessagesWithChromeI18n",
        "snippet": "  boolean replaceMessagesWithChromeI18n;",
        "begin_line": 579,
        "end_line": 579,
        "comment": "\n   * Replace UI strings with chrome.i18n.getMessage calls.\n   * Used by Chrome extensions/apps.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tcProjectId",
        "snippet": "  String tcProjectId;",
        "begin_line": 580,
        "end_line": 580,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheck",
        "snippet": "  boolean runtimeTypeCheck;",
        "begin_line": 597,
        "end_line": 597,
        "comment": " Inserts run-time type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheckLogFunction",
        "snippet": "  String runtimeTypeCheckLogFunction;",
        "begin_line": 604,
        "end_line": 604,
        "comment": "\n   * A JS function to be used for logging run-time type assertion\n   * failures. It will be passed the warning as a string and the\n   * faulty expression as arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.codingConvention",
        "snippet": "  private CodingConvention codingConvention;",
        "begin_line": 607,
        "end_line": 607,
        "comment": " A CodingConvention to use during the compile. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ignoreCajaProperties",
        "snippet": "  boolean ignoreCajaProperties;",
        "begin_line": 609,
        "end_line": 609,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockStartMarker",
        "snippet": "  public String syntheticBlockStartMarker;",
        "begin_line": 616,
        "end_line": 616,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockEndMarker",
        "snippet": "  public String syntheticBlockEndMarker;",
        "begin_line": 618,
        "end_line": 618,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.locale",
        "snippet": "  public String locale;",
        "begin_line": 621,
        "end_line": 621,
        "comment": " Compiling locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markAsCompiled",
        "snippet": "  public boolean markAsCompiled;",
        "begin_line": 624,
        "end_line": 624,
        "comment": " Sets the special \"COMPILED\" value to true "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeTryCatchFinally",
        "snippet": "  public boolean removeTryCatchFinally;",
        "begin_line": 627,
        "end_line": 627,
        "comment": " Removes try...catch...finally blocks for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.closurePass",
        "snippet": "  public boolean closurePass;",
        "begin_line": 630,
        "end_line": 630,
        "comment": " Processes goog.provide() and goog.require() calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preserveGoogRequires",
        "snippet": "  public boolean preserveGoogRequires;",
        "begin_line": 633,
        "end_line": 633,
        "comment": " Do not strip goog.require() calls from the code. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.jqueryPass",
        "snippet": "  public boolean jqueryPass;",
        "begin_line": 636,
        "end_line": 636,
        "comment": " Processes jQuery aliases "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.angularPass",
        "snippet": "  boolean angularPass;",
        "begin_line": 639,
        "end_line": 639,
        "comment": " Processes AngularJS-specific annotations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeAbstractMethods",
        "snippet": "  boolean removeAbstractMethods;",
        "begin_line": 642,
        "end_line": 642,
        "comment": " Remove goog.abstractMethod assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeClosureAsserts",
        "snippet": "  boolean removeClosureAsserts;",
        "begin_line": 645,
        "end_line": 645,
        "comment": " Remove goog.asserts calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.gatherCssNames",
        "snippet": "  public boolean gatherCssNames;",
        "begin_line": 648,
        "end_line": 648,
        "comment": " Gather CSS names (requires closurePass) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypes",
        "snippet": "  public Set<String> stripTypes;",
        "begin_line": 651,
        "end_line": 651,
        "comment": " Names of types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNameSuffixes",
        "snippet": "  public Set<String> stripNameSuffixes;",
        "begin_line": 654,
        "end_line": 654,
        "comment": " Name suffixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNamePrefixes",
        "snippet": "  public Set<String> stripNamePrefixes;",
        "begin_line": 657,
        "end_line": 657,
        "comment": " Name prefixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypePrefixes",
        "snippet": "  public Set<String> stripTypePrefixes;",
        "begin_line": 660,
        "end_line": 660,
        "comment": " Qualified type name prefixes that determine which types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.customPasses",
        "snippet": "  public transient\n      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;",
        "begin_line": 663,
        "end_line": 664,
        "comment": " Custom passes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markNoSideEffectCalls",
        "snippet": "  public boolean markNoSideEffectCalls;",
        "begin_line": 667,
        "end_line": 667,
        "comment": " Mark no side effect calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.defineReplacements",
        "snippet": "  private Map<String, Object> defineReplacements;",
        "begin_line": 670,
        "end_line": 670,
        "comment": " Replacements for @defines. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakProcessing",
        "snippet": "  private TweakProcessing tweakProcessing;",
        "begin_line": 673,
        "end_line": 673,
        "comment": " What kind of processing to do for goog.tweak functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakReplacements",
        "snippet": "  private Map<String, Object> tweakReplacements;",
        "begin_line": 676,
        "end_line": 676,
        "comment": " Replacements for tweaks. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.moveFunctionDeclarations",
        "snippet": "  public boolean moveFunctionDeclarations;",
        "begin_line": 679,
        "end_line": 679,
        "comment": " Move top-level function declarations to the top "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentMemoryAllocations",
        "snippet": "  private boolean instrumentMemoryAllocations;",
        "begin_line": 682,
        "end_line": 682,
        "comment": " Instrument / Intercept memory allocations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentationTemplate",
        "snippet": "  public String instrumentationTemplate;",
        "begin_line": 685,
        "end_line": 685,
        "comment": " Instrumentation template to use with #recordFunctionInformation "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.appNameStr",
        "snippet": "  String appNameStr;",
        "begin_line": 687,
        "end_line": 687,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.recordFunctionInformation",
        "snippet": "  public boolean recordFunctionInformation;",
        "begin_line": 698,
        "end_line": 698,
        "comment": " Record function information "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generateExports",
        "snippet": "  public boolean generateExports;",
        "begin_line": 700,
        "end_line": 700,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportLocalPropertyDefinitions",
        "snippet": "  boolean exportLocalPropertyDefinitions;",
        "begin_line": 702,
        "end_line": 702,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingMap",
        "snippet": "  public CssRenamingMap cssRenamingMap;",
        "begin_line": 705,
        "end_line": 705,
        "comment": " Map used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingWhitelist",
        "snippet": "  Set<String> cssRenamingWhitelist;",
        "begin_line": 708,
        "end_line": 708,
        "comment": " Whitelist used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processObjectPropertyString",
        "snippet": "  boolean processObjectPropertyString;",
        "begin_line": 711,
        "end_line": 711,
        "comment": " Process instances of goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceIdGenerators",
        "snippet": "  boolean replaceIdGenerators = true;  // true by default for legacy reasons.",
        "begin_line": 714,
        "end_line": 714,
        "comment": " true by default for legacy reasons."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGenerators",
        "snippet": "  ImmutableMap<String, RenamingMap> idGenerators;",
        "begin_line": 717,
        "end_line": 717,
        "comment": " Id generators to replace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGeneratorsMapSerialized",
        "snippet": "  String idGeneratorsMapSerialized;",
        "begin_line": 724,
        "end_line": 724,
        "comment": "\n   * A previous map of ids (serialized to a string by a previous compile).\n   * This will be used as a hint during the ReplaceIdGenerators pass, which\n   * will attempt to reuse the same ids.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsFunctionDescriptions",
        "snippet": "  List<String> replaceStringsFunctionDescriptions;",
        "begin_line": 727,
        "end_line": 727,
        "comment": " Configuration strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsPlaceholderToken",
        "snippet": "  String replaceStringsPlaceholderToken;",
        "begin_line": 729,
        "end_line": 729,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsReservedStrings",
        "snippet": "  Set<String> replaceStringsReservedStrings;",
        "begin_line": 731,
        "end_line": 731,
        "comment": " A list of strings that should not be used as replacements"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsInputMap",
        "snippet": "  VariableMap replaceStringsInputMap;",
        "begin_line": 733,
        "end_line": 733,
        "comment": " A previous map of replacements to strings."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyInvalidationErrors",
        "snippet": "  Map<String, CheckLevel> propertyInvalidationErrors;",
        "begin_line": 736,
        "end_line": 736,
        "comment": " List of properties that we report invalidation errors for. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.transformAMDToCJSModules",
        "snippet": "  boolean transformAMDToCJSModules = false;",
        "begin_line": 739,
        "end_line": 739,
        "comment": " Transform AMD to CommonJS modules. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processCommonJSModules",
        "snippet": "  boolean processCommonJSModules = false;",
        "begin_line": 742,
        "end_line": 742,
        "comment": " Rewrite CommonJS modules so that they can be concatenated together. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.commonJSModulePathPrefix",
        "snippet": "  String commonJSModulePathPrefix =\n      ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 745,
        "end_line": 746,
        "comment": " CommonJS module prefix. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.prettyPrint",
        "snippet": "  public boolean prettyPrint;",
        "begin_line": 754,
        "end_line": 754,
        "comment": " Output in pretty indented format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineBreak",
        "snippet": "  public boolean lineBreak;",
        "begin_line": 757,
        "end_line": 757,
        "comment": " Line break the output a bit more aggressively "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preferLineBreakAtEndOfFile",
        "snippet": "  public boolean preferLineBreakAtEndOfFile;",
        "begin_line": 760,
        "end_line": 760,
        "comment": " Prefer line breaks at end of file "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.printInputDelimiter",
        "snippet": "  public boolean printInputDelimiter;",
        "begin_line": 763,
        "end_line": 763,
        "comment": " Prints a separator comment before each JS script "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputDelimiter",
        "snippet": "  public String inputDelimiter = \"// Input %num%\";",
        "begin_line": 766,
        "end_line": 766,
        "comment": " The string to use as the separator for printInputDelimiter "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.preferSingleQuotes",
        "snippet": "  boolean preferSingleQuotes;",
        "begin_line": 768,
        "end_line": 768,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.trustedStrings",
        "snippet": "  boolean trustedStrings;",
        "begin_line": 779,
        "end_line": 779,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportPath",
        "snippet": "  String reportPath;",
        "begin_line": 791,
        "end_line": 791,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tracer",
        "snippet": "  TracerMode tracer;",
        "begin_line": 798,
        "end_line": 798,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.colorizeErrorOutput",
        "snippet": "  private boolean colorizeErrorOutput;",
        "begin_line": 808,
        "end_line": 808,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorFormat",
        "snippet": "  public ErrorFormat errorFormat;",
        "begin_line": 810,
        "end_line": 810,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.warningsGuard",
        "snippet": "  private ComposeWarningsGuard warningsGuard = new ComposeWarningsGuard();",
        "begin_line": 812,
        "end_line": 812,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.summaryDetailLevel",
        "snippet": "  int summaryDetailLevel = 1;",
        "begin_line": 814,
        "end_line": 814,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineLengthThreshold",
        "snippet": "  int lineLengthThreshold = CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 816,
        "end_line": 816,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExports",
        "snippet": "  private boolean externExports;",
        "begin_line": 826,
        "end_line": 826,
        "comment": "\n   * Whether the exports should be made available via {@link Result} after\n   * compilation. This is implicitly true if {@link #externExportsPath} is set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExportsPath",
        "snippet": "  String externExportsPath;",
        "begin_line": 829,
        "end_line": 829,
        "comment": " The output path for the created externs file. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceReportPath",
        "snippet": "  String nameReferenceReportPath;",
        "begin_line": 831,
        "end_line": 831,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceGraphPath",
        "snippet": "  String nameReferenceGraphPath;",
        "begin_line": 838,
        "end_line": 838,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapOutputPath",
        "snippet": "  public String sourceMapOutputPath;",
        "begin_line": 850,
        "end_line": 850,
        "comment": " The output path for the source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapDetailLevel",
        "snippet": "  public SourceMap.DetailLevel sourceMapDetailLevel =\n      SourceMap.DetailLevel.SYMBOLS;",
        "begin_line": 853,
        "end_line": 854,
        "comment": " The detail level for the generated source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapFormat",
        "snippet": "  public SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 857,
        "end_line": 858,
        "comment": " The source map file format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapLocationMappings",
        "snippet": "  public List<SourceMap.LocationMapping> sourceMapLocationMappings =\n      Collections.emptyList();",
        "begin_line": 860,
        "end_line": 861,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputCharset",
        "snippet": "  String outputCharset;",
        "begin_line": 867,
        "end_line": 867,
        "comment": "\n   * Charset to use when generating code.  If null, then output ASCII.\n   * This needs to be a string because CompilerOptions is serializable.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.looseTypes",
        "snippet": "  boolean looseTypes;",
        "begin_line": 872,
        "end_line": 872,
        "comment": "\n   * Whether the named objects types included 'undefined' by default.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.protectHiddenSideEffects",
        "snippet": "  boolean protectHiddenSideEffects;",
        "begin_line": 877,
        "end_line": 877,
        "comment": "\n   * When set, assume that apparently side-effect free code is meaningful.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasHandler",
        "snippet": "  private transient AliasTransformationHandler aliasHandler;",
        "begin_line": 889,
        "end_line": 889,
        "comment": "\n   * Data holder Alias Transformation information accumulated during a compile.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorHandler",
        "snippet": "  transient ErrorHandler errorHandler;",
        "begin_line": 894,
        "end_line": 894,
        "comment": "\n   * Handler for compiler warnings and errors.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverage",
        "snippet": "  public boolean instrumentForCoverage;",
        "begin_line": 899,
        "end_line": 899,
        "comment": "\n   * Instrument code for the purpose of collecting coverage data.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.UNIQUE_ID_GENERATOR",
        "snippet": "  public static final RenamingMap UNIQUE_ID_GENERATOR =\n      ReplaceIdGenerators.UNIQUE;",
        "begin_line": 1290,
        "end_line": 1291,
        "comment": "\n   * A renaming map instance to use to signal the use of the \"inconsistent\"\n   * id generator type.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER",
        "snippet": "  static final AliasTransformationHandler NULL_ALIAS_TRANSFORMATION_HANDLER =\n      new NullAliasTransformationHandler();",
        "begin_line": 2347,
        "end_line": 2348,
        "comment": "\n   * A Null implementation of the CodeChanges interface which performs all\n   * operations as a No-Op\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 0L;",
        "begin_line": 2352,
        "end_line": 2352,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.NULL_ALIAS_TRANSFORMATION",
        "snippet": "    private static final AliasTransformation NULL_ALIAS_TRANSFORMATION =\n        new NullAliasTransformation();",
        "begin_line": 2354,
        "end_line": 2355,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformation",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformation.serialVersionUID",
        "snippet": "      private static final long serialVersionUID = 0L;",
        "begin_line": 2366,
        "end_line": 2366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.SOURCE_EXCERPT_REGION_LENGTH",
        "snippet": "  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n   * Number of lines in the region returned by {@link #getRegion(int)}.\n   * This length must be odd.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.fileName",
        "snippet": "  private final String fileName;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.isExternFile",
        "snippet": "  private boolean isExternFile = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.originalPath",
        "snippet": "  private String originalPath = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " from a Jar, it could be the path to the Jar."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lineOffsets",
        "snippet": "  private int[] lineOffsets = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Source Line Information"
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.code",
        "snippet": "  private String code = null;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.charset",
        "snippet": "    private Charset charset = Charsets.UTF_8;",
        "begin_line": 365,
        "end_line": 365,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Builder.originalPath",
        "snippet": "    private String originalPath = null;",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Preloaded",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Preloaded.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.generator",
        "snippet": "    private final Generator generator;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.file",
        "snippet": "    private final File file;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.inputCharset",
        "snippet": "    private String inputCharset = Charsets.UTF_8.name();",
        "begin_line": 474,
        "end_line": 474,
        "comment": " Default input file format for JSCompiler has always been UTF_8."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.REGEXP_REFERENCE",
        "snippet": "  static final DiagnosticType REGEXP_REFERENCE =\n    DiagnosticType.warning(\"JSC_REGEXP_REFERENCE\",\n        \"References to the global RegExp object prevents \" +\n        \"optimization of regular expressions.\");",
        "begin_line": 35,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.MALFORMED_REGEXP",
        "snippet": "  static final DiagnosticType MALFORMED_REGEXP = DiagnosticType.warning(\n        \"JSC_MALFORMED_REGEXP\",\n        \"Malformed Regular Expression: {0}\");",
        "begin_line": 39,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.REGEXP_PROPERTY_BLACKLIST",
        "snippet": "  private static final Set<String> REGEXP_PROPERTY_BLACKLIST = ImmutableSet.of(\n      \"$1\", \"$2\", \"$3\", \"$4\", \"$5\", \"$6\", \"$7\", \"$8\", \"$9\",\n      \"$_\", \"$input\",\n      // The following would also be blacklisted, but they aren't valid\n      // identifiers, so can't be accessed with the '.' operator anyway.\n      // \"$*\", \"$&\", \"$+\", \"$`\", \"$'\",\n      \"input\", \"lastMatch\", \"lastParen\", \"leftContext\", \"rightContext\",\n      \"global\", \"ignoreCase\", \"lastIndex\", \"multiline\", \"source\");",
        "begin_line": 43,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.globalRegExpPropertiesUsed",
        "snippet": "  private boolean globalRegExpPropertiesUsed = false;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.orderOfAddition",
        "snippet": "  private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " The order that the guards were added in."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.numberOfAdds",
        "snippet": "  private int numberOfAdds = 0;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guardComparator",
        "snippet": "  private final Comparator<WarningsGuard> guardComparator =\n      new GuardComparator(orderOfAddition);",
        "begin_line": 47,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.demoteErrors",
        "snippet": "  private boolean demoteErrors = false;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.orderOfAddition",
        "snippet": "    private final Map<WarningsGuard, Integer> orderOfAddition;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guards",
        "snippet": "  private final TreeSet<WarningsGuard> guards =\n      new TreeSet<WarningsGuard>(guardComparator);",
        "begin_line": 75,
        "end_line": 76,
        "comment": " The order that the guards are applied in."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.stream",
        "snippet": "  private final JsDocTokenStream stream;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.jsdocBuilder",
        "snippet": "  private final JSDocInfoBuilder jsdocBuilder;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.associatedNode",
        "snippet": "  private final Node associatedNode;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parser",
        "snippet": "  private final ErrorReporterParser parser = new ErrorReporterParser();",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.templateNode",
        "snippet": "  private final Node templateNode;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " memory footprint associated with these (similar to IRFactory)."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileOverviewJSDocInfo",
        "snippet": "  private JSDocInfo fileOverviewJSDocInfo = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The DocInfo with the fileoverview tag for the whole file."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.state",
        "snippet": "  private State state;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.annotationNames",
        "snippet": "  private final Map<String, Annotation> annotationNames;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.suppressionNames",
        "snippet": "  private final Set<String> suppressionNames;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",
        "snippet": "  private static final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
        "begin_line": 96,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.idGeneratorAnnotationKeywords",
        "snippet": "  private static final Set<String> idGeneratorAnnotationKeywords =\n      ImmutableSet.<String>of(\"unique\", \"consistent\", \"stable\", \"mapped\");",
        "begin_line": 98,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileLevelJsDocBuilder",
        "snippet": "  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.string",
        "snippet": "    private final String string;",
        "begin_line": 1420,
        "end_line": 1420,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.token",
        "snippet": "    private final JsDocToken token;",
        "begin_line": 1421,
        "end_line": 1421,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.type",
        "snippet": "    final JSTypeExpression type;",
        "begin_line": 1433,
        "end_line": 1433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.lineno",
        "snippet": "    final int lineno;",
        "begin_line": 1434,
        "end_line": 1434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.charno",
        "snippet": "    final int charno;",
        "begin_line": 1435,
        "end_line": 1435,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",
        "snippet": "  private static final JsDocToken NO_UNREAD_TOKEN = null;",
        "begin_line": 2449,
        "end_line": 2449,
        "comment": "\n   * Specific value indicating that the {@link #unreadToken} contains no token.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.unreadToken",
        "snippet": "  private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
        "begin_line": 2454,
        "end_line": 2454,
        "comment": "\n   * One token buffer.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_FUNCTION_NAME",
        "snippet": "  private static final String MSG_FUNCTION_NAME = \"goog.getMsg\";",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_FALLBACK_FUNCTION_NAME",
        "snippet": "  private static final String MSG_FALLBACK_FUNCTION_NAME =\n      \"goog.getMsgWithFallback\";",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_HAS_NO_DESCRIPTION",
        "snippet": "  static final DiagnosticType MESSAGE_HAS_NO_DESCRIPTION =\n      DiagnosticType.warning(\"JSC_MSG_HAS_NO_DESCRIPTION\",\n          \"Message {0} has no description. Add @desc JsDoc tag.\");",
        "begin_line": 48,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_HAS_NO_TEXT",
        "snippet": "  static final DiagnosticType MESSAGE_HAS_NO_TEXT =\n      DiagnosticType.warning(\"JSC_MSG_HAS_NO_TEXT\",\n          \"Message value of {0} is just an empty string. \"\n              + \"Empty messages are forbidden.\");",
        "begin_line": 52,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_TREE_MALFORMED",
        "snippet": "  static final DiagnosticType MESSAGE_TREE_MALFORMED =\n      DiagnosticType.error(\"JSC_MSG_TREE_MALFORMED\",\n          \"Message parse tree malformed. {0}\");",
        "begin_line": 57,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_HAS_NO_VALUE",
        "snippet": "  static final DiagnosticType MESSAGE_HAS_NO_VALUE =\n      DiagnosticType.error(\"JSC_MSG_HAS_NO_VALUE\",\n          \"message node {0} has no value\");",
        "begin_line": 61,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_DUPLICATE_KEY",
        "snippet": "  static final DiagnosticType MESSAGE_DUPLICATE_KEY =\n      DiagnosticType.error(\"JSC_MSG_KEY_DUPLICATED\",\n          \"duplicate message variable name found for {0}, \" +\n              \"initial definition {1}:{2}\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_NODE_IS_ORPHANED",
        "snippet": "  static final DiagnosticType MESSAGE_NODE_IS_ORPHANED =\n      DiagnosticType.warning(\"JSC_MSG_ORPHANED_NODE\", MSG_FUNCTION_NAME +\n          \"() function could be used only with MSG_* property or variable\");",
        "begin_line": 70,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX",
        "snippet": "  static final DiagnosticType MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX =\n      DiagnosticType.error(\"JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX\",\n          \"message not initialized using \" + MSG_FUNCTION_NAME);",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.BAD_FALLBACK_SYNTAX",
        "snippet": "  static final DiagnosticType BAD_FALLBACK_SYNTAX =\n      DiagnosticType.error(\"JSC_MSG_BAD_FALLBACK_SYNTAX\",\n          String.format(\n              \"Bad syntax. \" +\n              \"Expected syntax: goog.getMsgWithFallback(MSG_1, MSG_2)\",\n              MSG_FALLBACK_FUNCTION_NAME));",
        "begin_line": 78,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.FALLBACK_ARG_ERROR",
        "snippet": "  static final DiagnosticType FALLBACK_ARG_ERROR =\n      DiagnosticType.error(\"JSC_MSG_FALLBACK_ARG_ERROR\",\n          \"Could not find message entry for fallback argument {0}\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_CONVENTIONS",
        "snippet": "  static final DiagnosticGroup MSG_CONVENTIONS = new DiagnosticGroup(\n      \"messageConventions\",\n      MESSAGE_HAS_NO_DESCRIPTION,\n      MESSAGE_HAS_NO_TEXT,\n      MESSAGE_TREE_MALFORMED,\n      MESSAGE_HAS_NO_VALUE,\n      MESSAGE_DUPLICATE_KEY,\n      MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX);",
        "begin_line": 94,
        "end_line": 101,
        "comment": "\n   * Warnings that only apply to people who use MSG_ to denote\n   * messages. Note that this doesn't include warnings about\n   * proper use of goog.getMsg\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.PH_JS_PREFIX",
        "snippet": "  private static final String PH_JS_PREFIX = \"{$\";",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.PH_JS_SUFFIX",
        "snippet": "  private static final String PH_JS_SUFFIX = \"}\";",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_PREFIX",
        "snippet": "  static final String MSG_PREFIX = \"MSG_\";",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MSG_UNNAMED_PATTERN",
        "snippet": "  private static final Pattern MSG_UNNAMED_PATTERN =\n      Pattern.compile(\"MSG_UNNAMED_\\\\d+\");",
        "begin_line": 120,
        "end_line": 121,
        "comment": "\n   * Pattern for unnamed messages.\n   * <p>\n   * All JS messages in JS code should have unique name but messages in\n   * generated code (i.e. from soy template) could have duplicated message names.\n   * Later we replace the message names with ids constructed as a hash of the\n   * message content.\n   * <p>\n   * <link href=\"http://code.google.com/p/closure-templates/\">\n   * Soy</link> generates messages with names MSG_UNNAMED_<NUMBER> . This\n   * pattern recognizes such messages.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.CAMELCASE_PATTERN",
        "snippet": "  private static final Pattern CAMELCASE_PATTERN =\n      Pattern.compile(\"[a-z][a-zA-Z\\\\d]*[_\\\\d]*\");",
        "begin_line": 123,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.HIDDEN_DESC_PREFIX",
        "snippet": "  static final String HIDDEN_DESC_PREFIX = \"@hidden\";",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.DESC_SUFFIX",
        "snippet": "  private static final String DESC_SUFFIX = \"_HELP\";",
        "begin_line": 129,
        "end_line": 129,
        "comment": " For old-style JS messages"
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.needToCheckDuplications",
        "snippet": "  private final boolean needToCheckDuplications;",
        "begin_line": 131,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.style",
        "snippet": "  private final JsMessage.Style style;",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.idGenerator",
        "snippet": "  private final JsMessage.IdGenerator idGenerator;",
        "begin_line": 133,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.messageNames",
        "snippet": "  private final Map<String, MessageLocation> messageNames =\n      Maps.newHashMap();",
        "begin_line": 140,
        "end_line": 141,
        "comment": "\n   * The names encountered associated with their defining node and source. We\n   * use it for tracking duplicated message ids in the source code.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.unnamedMessages",
        "snippet": "  private final Map<Var, JsMessage> unnamedMessages =\n      Maps.newHashMap();",
        "begin_line": 143,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.googMsgNodes",
        "snippet": "  private final Map<Node, String> googMsgNodes = Maps.newHashMap();",
        "begin_line": 154,
        "end_line": 154,
        "comment": "\n   * List of found goog.getMsg call nodes.\n   *\n   * When we visit goog.getMsg() node we add a pair node:sourcename and later\n   * when we visit its parent we remove this pair. All nodes that are left at\n   * the end of traversing are orphaned nodes. It means have no corresponding\n   * var or property node.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.checkLevel",
        "snippet": "  private final CheckLevel checkLevel;",
        "begin_line": 156,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MalformedException",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MalformedException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 934,
        "end_line": 934,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MalformedException",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MalformedException.node",
        "snippet": "    private final Node node;",
        "begin_line": 936,
        "end_line": 936,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MessageLocation",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MessageLocation.message",
        "snippet": "    private final JsMessage message;",
        "begin_line": 949,
        "end_line": 949,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MessageLocation",
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "signature": "com.google.javascript.jscomp.MessageLocation.messageNode",
        "snippet": "    private final Node messageNode;",
        "begin_line": 950,
        "end_line": 950,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.vars",
        "snippet": "  private final Map<String, Var> vars = new LinkedHashMap<String, Var>();",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.parent",
        "snippet": "  private final Scope parent;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.depth",
        "snippet": "  private final int depth;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.rootNode",
        "snippet": "  private final Node rootNode;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.isBottom",
        "snippet": "  private final boolean isBottom;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Whether this is a bottom scope for the purposes of type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.arguments",
        "snippet": "  private Var arguments;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",
        "snippet": "  private static final Predicate<Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES =\n      new Predicate<Var>() {\n    @Override public boolean apply(Var var) {\n      return var.getParentNode() != null &&\n          var.getType() == null && // no declared type\n          var.getParentNode().isVar() &&\n          !var.isExtern();\n    }\n  };",
        "begin_line": 66,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.name",
        "snippet": "    final String name;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " name "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.nameNode",
        "snippet": "    final Node nameNode;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Var node "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.type",
        "snippet": "    private JSType type;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * The variable's type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.typeInferred",
        "snippet": "    private final boolean typeInferred;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n     * Whether the variable's type has been inferred or is declared. An inferred\n     * type may change over time (as more code is discovered), whereas a\n     * declared type is a static contract that must be matched.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.input",
        "snippet": "    final CompilerInput input;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Input source "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.index",
        "snippet": "    final int index;",
        "begin_line": 104,
        "end_line": 104,
        "comment": "\n     * The index at which the var is declared. e..g if it's 0, it's the first\n     * declared variable in that scope\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The enclosing scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.markedEscaped",
        "snippet": "    private boolean markedEscaped = false;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " @see #isMarkedEscaped "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.markedAssignedExactlyOnce",
        "snippet": "    private boolean markedAssignedExactlyOnce = false;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " @see #isMarkedAssignedExactlyOnce "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.typeResolver",
        "snippet": "  private TypeResolver typeResolver;",
        "begin_line": 625,
        "end_line": 625,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.checkOnly",
        "snippet": "  private final boolean checkOnly;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.EOF_CHAR",
        "snippet": "  private static final int EOF_CHAR = -1;",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n   * For chars - because we need something out-of-range\n   * to check.  (And checking EOF by exception is annoying.)\n   * Note distinction from EOF token type!\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.string",
        "snippet": "  private String string = \"\";",
        "begin_line": 453,
        "end_line": 453,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBuffer",
        "snippet": "  private char[] stringBuffer = new char[128];",
        "begin_line": 455,
        "end_line": 455,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBufferTop",
        "snippet": "  private int stringBufferTop;",
        "begin_line": 456,
        "end_line": 456,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetBuffer",
        "snippet": "  private final int[] ungetBuffer = new int[3];",
        "begin_line": 459,
        "end_line": 459,
        "comment": " Room to backtrace from to < on failed match of the last - in <!--"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCursor",
        "snippet": "  private int ungetCursor;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.hitEOF",
        "snippet": "  private boolean hitEOF = false;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineStart",
        "snippet": "  private int lineStart = 0;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineEndChar",
        "snippet": "  private int lineEndChar = -1;",
        "begin_line": 465,
        "end_line": 465,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineno",
        "snippet": "  int lineno;",
        "begin_line": 466,
        "end_line": 466,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.charno",
        "snippet": "  private int charno = -1;",
        "begin_line": 467,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initCharno",
        "snippet": "  private final int initCharno;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initLineno",
        "snippet": "  private final int initLineno;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 471,
        "end_line": 471,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceEnd",
        "snippet": "  private final int sourceEnd;",
        "begin_line": 472,
        "end_line": 472,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceCursor",
        "snippet": "  int sourceCursor;",
        "begin_line": 476,
        "end_line": 476,
        "comment": " sliding window of the source stream."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.cursor",
        "snippet": "  int cursor;",
        "begin_line": 481,
        "end_line": 481,
        "comment": " Its value is the index of the next character to be scanned."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenBeg",
        "snippet": "  int tokenBeg;",
        "begin_line": 484,
        "end_line": 484,
        "comment": " Record start and end positions of last scanned token."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenEnd",
        "snippet": "  int tokenEnd;",
        "begin_line": 485,
        "end_line": 485,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.inputs",
        "snippet": "  private final List<INPUT> inputs;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.sortedList",
        "snippet": "  private final List<INPUT> sortedList;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " A topologically sorted list of the inputs."
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.noProvides",
        "snippet": "  private final List<INPUT> noProvides;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A list of all the inputs that do not have provides."
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.provideMap",
        "snippet": "  private final Map<String, INPUT> provideMap = Maps.newHashMap();",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.UNDEFINED_VAR_ERROR",
        "snippet": "  static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(\n      \"JSC_UNDEFINED_VARIABLE\",\n      \"variable {0} is undeclared\");",
        "begin_line": 40,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(\n      \"JSC_VIOLATED_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}, since {1} loads after {0}\");",
        "begin_line": 44,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.MISSING_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(\n      \"JSC_MISSING_MODULE_DEPENDENCY\",\n      \"missing module dependency; module {0} should depend \" +\n      \"on module {1} because it references {2}\");",
        "begin_line": 49,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.STRICT_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(\n      \"JSC_STRICT_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}\");",
        "begin_line": 54,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR",
        "snippet": "  static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n    DiagnosticType.warning(\n      \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n      \"accessing name {0} in externs has no effect. \" +\n      \"Perhaps you forgot to add a var keyword?\");",
        "begin_line": 59,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.UNDEFINED_EXTERN_VAR_ERROR",
        "snippet": "  static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR =\n    DiagnosticType.warning(\n      \"JSC_UNDEFINED_EXTERN_VAR_ERROR\",\n      \"name {0} is not defined in the externs.\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.VAR_MULTIPLY_DECLARED_ERROR",
        "snippet": "  static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =\n      DiagnosticType.error(\n          \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n          \"Variable {0} first declared in {1}\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.VAR_ARGUMENTS_SHADOWED_ERROR",
        "snippet": "  static final DiagnosticType VAR_ARGUMENTS_SHADOWED_ERROR =\n    DiagnosticType.error(\n        \"JSC_VAR_ARGUMENTS_SHADOWED_ERROR\",\n        \"Shadowing \\\"arguments\\\" is not allowed\");",
        "begin_line": 75,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 82,
        "end_line": 82,
        "comment": " scope, but not explicitly declared."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.varsToDeclareInExterns",
        "snippet": "  private final Set<String> varsToDeclareInExterns = Sets.newHashSet();",
        "begin_line": 87,
        "end_line": 87,
        "comment": " in the normal code."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.sanityCheck",
        "snippet": "  private final boolean sanityCheck;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Whether this is the post-processing sanity check."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.strictExternCheck",
        "snippet": "  private final boolean strictExternCheck;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Whether extern checks emit error."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentInfo",
        "snippet": "  private JSDocInfo currentInfo;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " the current JSDoc which is being populated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populated",
        "snippet": "  private boolean populated = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " whether the current JSDocInfo has valuable information"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.parseDocumentation",
        "snippet": "  private boolean parseDocumentation = false;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " whether to include the documentation itself when parsing the JsDoc"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentMarker",
        "snippet": "  private JSDocInfo.Marker currentMarker = null;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " the current marker, if any."
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.callbacks",
        "snippet": "  private final CallbackWrapper[] callbacks;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The callbacks that this pass combines. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.callback",
        "snippet": "    private final Callback callback;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The callback being wrapped. Never null. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.scopedCallback",
        "snippet": "    private final ScopedCallback scopedCallback;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n     * if (callback instanceof ScopedCallback), then scopedCallback points\n     * to an instance of ScopedCallback, otherwise scopedCallback points to null\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.waiting",
        "snippet": "    private Node waiting = null;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * The node that {@link Callback#shouldTraverse(NodeTraversal, Node, Node)}\n     * returned false for. The wrapped callback doesn't receive messages until\n     * after this node is revisited in the post-order traversal.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.CONFIG_RESOURCE",
        "snippet": "  private static final String CONFIG_RESOURCE =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.suppressionNames",
        "snippet": "  private static Set<String> suppressionNames = null;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.reservedVars",
        "snippet": "  private static Set<String> reservedVars = null;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParseResult",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParseResult.ast",
        "snippet": "    public final Node ast;",
        "begin_line": 153,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParseResult",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParseResult.oldAst",
        "snippet": "    public final AstRoot oldAst;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.GLOBAL_THIS",
        "snippet": "  static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.assignLhsChild",
        "snippet": "  private Node assignLhsChild = null;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n   * If {@code assignLhsChild != null}, then the node being traversed is\n   * a descendant of the first child of an ASSIGN node. assignLhsChild's\n   * parent is this ASSIGN node.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
        "begin_line": 45,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR",
        "snippet": "  static final DiagnosticType EXPECTED_OBJECTLIT_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_OBJECTLIT_ERROR\",\n      \"method \\\"{0}\\\" expected an object literal argument\");",
        "begin_line": 49,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR",
        "snippet": "  static final DiagnosticType EXPECTED_STRING_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_STRING_ERROR\",\n      \"method \\\"{0}\\\" expected an object string argument\");",
        "begin_line": 53,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with invalid argument\");",
        "begin_line": 57,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_STYLE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR\",\n      \"Invalid CSS name map style {0}\");",
        "begin_line": 61,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
        "begin_line": 65,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
        "begin_line": 69,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
        "begin_line": 73,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
        "begin_line": 77,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
        "begin_line": 81,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS identifier name\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR",
        "snippet": "  static final DiagnosticType INVALID_DEFINE_NAME_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_DEFINE_NAME_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS identifier name\");",
        "begin_line": 89,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION",
        "snippet": "  static final DiagnosticType MISSING_DEFINE_ANNOTATION = DiagnosticType.error(\n      \"JSC_INVALID_MISSING_DEFINE_ANNOTATION\",\n      \"Missing @define annotation\");",
        "begin_line": 93,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR",
        "snippet": "  static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
        "begin_line": 97,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",
        "snippet": "  static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP",
        "snippet": "  static final DiagnosticType INVALID_CSS_RENAMING_MAP = DiagnosticType.warning(\n      \"INVALID_CSS_RENAMING_MAP\",\n      \"Invalid entries in css renaming map: {0}\");",
        "begin_line": 107,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR",
        "snippet": "  static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
        "begin_line": 111,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG",
        "snippet": "  static final String GOOG = \"goog\";",
        "begin_line": 116,
        "end_line": 116,
        "comment": " The root Closure namespace "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.providedNames",
        "snippet": "  private final Map<String, ProvidedName> providedNames =\n      Maps.newLinkedHashMap();",
        "begin_line": 122,
        "end_line": 123,
        "comment": " The goog.provides must be processed in a deterministic order."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.unrecognizedRequires",
        "snippet": "  private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
        "begin_line": 125,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.exportedVariables",
        "snippet": "  private final Set<String> exportedVariables = Sets.newHashSet();",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.requiresLevel",
        "snippet": "  private final CheckLevel requiresLevel;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.preprocessorSymbolTable",
        "snippet": "  private final PreprocessorSymbolTable preprocessorSymbolTable;",
        "begin_line": 129,
        "end_line": 129,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.defineCalls",
        "snippet": "  private final List<Node> defineCalls = Lists.newArrayList();",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.preserveGoogRequires",
        "snippet": "  private final boolean preserveGoogRequires;",
        "begin_line": 131,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.namespace",
        "snippet": "    private final String namespace;",
        "begin_line": 879,
        "end_line": 879,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstNode",
        "snippet": "    private final Node firstNode;",
        "begin_line": 883,
        "end_line": 883,
        "comment": " goog.provided."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstModule",
        "snippet": "    private final JSModule firstModule;",
        "begin_line": 884,
        "end_line": 884,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.explicitNode",
        "snippet": "    private Node explicitNode = null;",
        "begin_line": 888,
        "end_line": 888,
        "comment": " if the namespace is always provided implicitly."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.explicitModule",
        "snippet": "    private JSModule explicitModule = null;",
        "begin_line": 889,
        "end_line": 889,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.candidateDefinition",
        "snippet": "    private Node candidateDefinition = null;",
        "begin_line": 892,
        "end_line": 892,
        "comment": " The candidate definition."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.minimumModule",
        "snippet": "    private JSModule minimumModule = null;",
        "begin_line": 895,
        "end_line": 895,
        "comment": " The minimum module where the provide must appear."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.replacementNode",
        "snippet": "    private Node replacementNode = null;",
        "begin_line": 898,
        "end_line": 898,
        "comment": " The replacement declaration."
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.requireNode",
        "snippet": "    final Node requireNode;",
        "begin_line": 1226,
        "end_line": 1226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.namespace",
        "snippet": "    final String namespace;",
        "begin_line": 1227,
        "end_line": 1227,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.inputName",
        "snippet": "    final String inputName;",
        "begin_line": 1228,
        "end_line": 1228,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.type",
        "snippet": "  private final DiagnosticType type;",
        "begin_line": 28,
        "end_line": 28,
        "comment": " A type of the error "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.description",
        "snippet": "  public final String description;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Description of the error "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.sourceName",
        "snippet": "  public final String sourceName;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Name of the source "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.node",
        "snippet": "  final Node node;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Node where the warning occurred. "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.lineNumber",
        "snippet": "  public final int lineNumber;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Line number of the source "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.level",
        "snippet": "  @Deprecated\n  public final CheckLevel level;",
        "begin_line": 43,
        "end_line": 44,
        "comment": " @deprecated Use #getDefaultLevel "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.defaultLevel",
        "snippet": "  private final CheckLevel defaultLevel;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.charno",
        "snippet": "  private final int charno;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " character number"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototypeSlot",
        "snippet": "  private Property prototypeSlot;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   *\n   * If non-null, the type must be a PrototypeObjectType.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.propAccess",
        "snippet": "  private PropAccess propAccess;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n   * Whether the instances are structs, dicts, or unrestricted.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private JSType typeOfThis;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * The interfaces directly implemented by this function (for constructors)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = ImmutableList.of();",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n   * The interfaces directly extended by this function (for interfaces)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 131,
        "end_line": 131,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardLevel",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.GuardLevel.name",
        "snippet": "    final String name;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardLevel",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.GuardLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.guardLevels",
        "snippet": "    private static List<GuardLevel> guardLevels = Lists.newArrayList();",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.displayHelp",
        "snippet": "    @Option(name = \"--help\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Displays this message\")\n    private boolean displayHelp = false;",
        "begin_line": 108,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.printTree",
        "snippet": "    @Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean printTree = false;",
        "begin_line": 113,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.printAst",
        "snippet": "    @Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean printAst = false;",
        "begin_line": 118,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.printPassGraph",
        "snippet": "    @Option(name = \"--print_pass_graph\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean printPassGraph = false;",
        "begin_line": 124,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscompDevMode",
        "snippet": "    @Option(name = \"--jscomp_dev_mode\",\n        // hidden, no usage\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscompDevMode =\n        CompilerOptions.DevMode.OFF;",
        "begin_line": 132,
        "end_line": 136,
        "comment": " compiler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.loggingLevel",
        "snippet": "    @Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String loggingLevel = Level.WARNING.getName();",
        "begin_line": 138,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.externs",
        "snippet": "    @Option(name = \"--externs\",\n        usage = \"The file containing JavaScript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
        "begin_line": 144,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.js",
        "snippet": "    @Option(name = \"--js\",\n        usage = \"The JavaScript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
        "begin_line": 149,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jsOutputFile",
        "snippet": "    @Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String jsOutputFile = \"\";",
        "begin_line": 153,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module",
        "snippet": "    @Option(name = \"--module\",\n        usage = \"A JavaScript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and JS \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant. \"\n        + \"Provide the value 'auto' to trigger module creation from CommonJS\"\n        + \"modules.\")\n    private List<String> module = Lists.newArrayList();",
        "begin_line": 158,
        "end_line": 167,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variableMapInputFile",
        "snippet": "    @Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variableMapInputFile = \"\";",
        "begin_line": 169,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.propertyMapInputFile",
        "snippet": "    @Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String propertyMapInputFile = \"\";",
        "begin_line": 174,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variableMapOutputFile",
        "snippet": "    @Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variableMapOutputFile = \"\";",
        "begin_line": 179,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.createNameMapFiles",
        "snippet": "    @Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variableMapOutputFile or \"\n        + \"property_map_output_file\")\n    private boolean createNameMapFiles = false;",
        "begin_line": 184,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.propertyMapOutputFile",
        "snippet": "    @Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String propertyMapOutputFile = \"\";",
        "begin_line": 193,
        "end_line": 196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.thirdParty",
        "snippet": "    @Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean thirdParty = false;",
        "begin_line": 198,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.summaryDetailLevel",
        "snippet": "    @Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if the 'checkTypes' \"\n        + \"diagnostic  group is enabled, see --jscomp_warning), \"\n        + \"3 (always print summary). The default level is 1\")\n    private int summaryDetailLevel = 1;",
        "begin_line": 204,
        "end_line": 210,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.outputWrapper",
        "snippet": "    @Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. Use marker token %output|jsstring%\"\n        + \" to do js string escaping on the output.\")\n    private String outputWrapper = \"\";",
        "begin_line": 212,
        "end_line": 216,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.moduleWrapper",
        "snippet": "    @Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a JavaScript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder. The %basename% placeholder can \"\n        + \"also be used to substitute the base name of the module output file.\")\n    private List<String> moduleWrapper = Lists.newArrayList();",
        "begin_line": 218,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.moduleOutputPathPrefix",
        "snippet": "    @Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled JS modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String moduleOutputPathPrefix = \"./\";",
        "begin_line": 226,
        "end_line": 230,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.createSourceMap",
        "snippet": "    @Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String createSourceMap = \"\";",
        "begin_line": 232,
        "end_line": 238,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.sourceMapFormat",
        "snippet": "    @Option(name = \"--source_map_format\",\n        usage = \"The source map format to produce. \" +\n        \"Options: V1, V2, V3, DEFAULT. DEFAULT produces V2.\")\n    private SourceMap.Format sourceMapFormat = SourceMap.Format.DEFAULT;",
        "begin_line": 240,
        "end_line": 243,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscompError",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_error\",\n        handler = WarningGuardErrorOptionHandler.class,\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscompError = Lists.newArrayList();",
        "begin_line": 246,
        "end_line": 251,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscompWarning",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_warning\",\n        handler = WarningGuardWarningOptionHandler.class,\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscompWarning = Lists.newArrayList();",
        "begin_line": 254,
        "end_line": 259,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscompOff",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_off\",\n        handler = WarningGuardOffOptionHandler.class,\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscompOff = Lists.newArrayList();",
        "begin_line": 262,
        "end_line": 267,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.define",
        "snippet": "    @Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
        "begin_line": 269,
        "end_line": 276,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.charset",
        "snippet": "    @Option(name = \"--charset\",\n        usage = \"Input and output charset for all files. By default, we \" +\n                \"accept UTF-8 as input and output US_ASCII\")\n    private String charset = \"\";",
        "begin_line": 278,
        "end_line": 281,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.compilationLevel",
        "snippet": "    @Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilationLevel =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
        "begin_line": 283,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.useTypesForOptimization",
        "snippet": "    @Option(name = \"--use_types_for_optimization\",\n        usage = \"Experimental: perform additional optimizations \" +\n        \"based on available information.  Inaccurate type annotations \" +\n        \"may result in incorrect results.\")\n    private boolean useTypesForOptimization = false;",
        "begin_line": 289,
        "end_line": 293,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warningLevel",
        "snippet": "    @Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warningLevel = WarningLevel.DEFAULT;",
        "begin_line": 295,
        "end_line": 298,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.useOnlyCustomExterns",
        "snippet": "    @Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean useOnlyCustomExterns = false;",
        "begin_line": 300,
        "end_line": 303,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.debug",
        "snippet": "    @Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
        "begin_line": 305,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.generateExports",
        "snippet": "    @Option(name = \"--generate_exports\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Generates export code for those marked with @export\")\n    private boolean generateExports = false;",
        "begin_line": 310,
        "end_line": 313,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.formatting",
        "snippet": "    @Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER, SINGLE_QUOTES\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
        "begin_line": 315,
        "end_line": 319,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.processCommonJsModules",
        "snippet": "    @Option(name = \"--process_common_js_modules\",\n        usage = \"Process CommonJS modules to a concatenable form.\")\n    private boolean processCommonJsModules = false;",
        "begin_line": 321,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.commonJsPathPrefix",
        "snippet": "    @Option(name = \"--common_js_module_path_prefix\",\n        usage = \"Path prefix to be removed from CommonJS module names.\")\n    private String commonJsPathPrefix =\n        ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 325,
        "end_line": 328,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.commonJsEntryModule",
        "snippet": "    @Option(name = \"--common_js_entry_module\",\n        usage = \"Root of your common JS dependency hierarchy. \" +\n            \"Your main script.\")\n    private String commonJsEntryModule;",
        "begin_line": 330,
        "end_line": 333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.transformAmdModules",
        "snippet": "    @Option(name = \"--transform_amd_modules\",\n        usage = \"Transform AMD to CommonJS modules.\")\n    private boolean transformAmdModules = false;",
        "begin_line": 335,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.processClosurePrimitives",
        "snippet": "    @Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean processClosurePrimitives = true;",
        "begin_line": 339,
        "end_line": 343,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.manageClosureDependencies",
        "snippet": "    @Option(name = \"--manage_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Automatically sort dependencies so that a file that \"\n        + \"goog.provides symbol X will always come before a file that \"\n        + \"goog.requires symbol X. If an input provides symbols, and \"\n        + \"those symbols are never required, then that input will not \"\n        + \"be included in the compilation.\")\n    private boolean manageClosureDependencies = false;",
        "begin_line": 345,
        "end_line": 352,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.onlyClosureDependencies",
        "snippet": "    @Option(name = \"--only_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Only include files in the transitive dependency of the \"\n        + \"entry points (specified by closure_entry_point). Files that do \"\n        + \"not provide dependencies will be removed. This supersedes\"\n        + \"manage_closure_dependencies\")\n    private boolean onlyClosureDependencies = false;",
        "begin_line": 354,
        "end_line": 360,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.closureEntryPoint",
        "snippet": "    @Option(name = \"--closure_entry_point\",\n        usage = \"Entry points to the program. Must be goog.provide'd \"\n        + \"symbols. Any goog.provide'd symbols that are not a transitive \"\n        + \"dependency of the entry points will be removed. Files without \"\n        + \"goog.provides, and their dependencies, will always be left in. \"\n        + \"If any entry points are specified, then the \"\n        + \"manage_closure_dependencies option will be set to true and \"\n        + \"all files will be sorted in dependency order.\")\n    private List<String> closureEntryPoint = Lists.newArrayList();",
        "begin_line": 362,
        "end_line": 370,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.processJqueryPrimitives",
        "snippet": "    @Option(name = \"--process_jquery_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Jquery library, such as \"\n        + \"jQuery.fn and jQuery.extend()\")\n    private boolean processJqueryPrimitives = false;",
        "begin_line": 372,
        "end_line": 376,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.angularPass",
        "snippet": "    @Option(name = \"--angular_pass\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Generate $inject properties for AngularJS for functions \"\n        + \"annotated with @ngInject\")\n    private boolean angularPass = false;",
        "begin_line": 378,
        "end_line": 382,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.outputManifest",
        "snippet": "    @Option(name = \"--output_manifest\",\n        usage = \"Prints out a list of all the files in the compilation. \"\n        + \"If --manage_closure_dependencies is on, this will not include \"\n        + \"files that got dropped because they were not required. \"\n        + \"The %outname% placeholder expands to the JS output file. \"\n        + \"If you're using modularization, using %outname% will create \"\n        + \"a manifest for each module.\")\n    private String outputManifest = \"\";",
        "begin_line": 384,
        "end_line": 391,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.outputModuleDependencies",
        "snippet": "    @Option(name = \"--output_module_dependencies\",\n        usage = \"Prints out a JSON file of dependencies between modules.\")\n    private String outputModuleDependencies = \"\";",
        "begin_line": 393,
        "end_line": 395,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.acceptConstKeyword",
        "snippet": "    @Option(name = \"--accept_const_keyword\",\n        usage = \"Allows usage of const keyword.\")\n    private boolean acceptConstKeyword = false;",
        "begin_line": 397,
        "end_line": 399,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.languageIn",
        "snippet": "    @Option(name = \"--language_in\",\n        usage = \"Sets what language spec that input sources conform. \"\n        + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private String languageIn = \"ECMASCRIPT3\";",
        "begin_line": 401,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.version",
        "snippet": "    @Option(name = \"--version\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;",
        "begin_line": 406,
        "end_line": 409,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.translationsFile",
        "snippet": "    @Option(name = \"--translations_file\",\n        usage = \"Source of translated messages. Currently only supports XTB.\")\n    private String translationsFile = \"\";",
        "begin_line": 411,
        "end_line": 413,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.translationsProject",
        "snippet": "    @Option(name = \"--translations_project\",\n        usage = \"Scopes all translations to the specified project.\" +\n        \"When specified, we will use different message ids so that messages \" +\n        \"in different projects can have different translations.\")\n    private String translationsProject = null;",
        "begin_line": 415,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.flagFile",
        "snippet": "    @Option(name = \"--flagfile\",\n        usage = \"A file containing additional command-line options.\")\n    private String flagFile = \"\";",
        "begin_line": 421,
        "end_line": 423,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warningsWhitelistFile",
        "snippet": "    @Option(name = \"--warnings_whitelist_file\",\n        usage = \"A file containing warnings to suppress. Each line should be \" +\n            \"of the form\\n\" +\n            \"<file-name>:<line-number>?  <warning-description>\")\n    private String warningsWhitelistFile = \"\";",
        "begin_line": 425,
        "end_line": 429,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.extraAnnotationName",
        "snippet": "    @Option(name = \"--extra_annotation_name\",\n        usage = \"A whitelist of tag names in JSDoc. You may specify multiple\")\n    private List<String> extraAnnotationName = Lists.newArrayList();",
        "begin_line": 431,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.tracerMode",
        "snippet": "    @Option(name = \"--tracer_mode\",\n        usage = \"Shows the duration of each compiler pass and the impact to \" +\n        \"the compiled output size. Options: ALL, RAW_SIZE, TIMING_ONLY, OFF\")\n    private CompilerOptions.TracerMode tracerMode =\n        CompilerOptions.TracerMode.OFF;",
        "begin_line": 435,
        "end_line": 439,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.arguments",
        "snippet": "    @Argument\n    private List<String> arguments = Lists.newArrayList();",
        "begin_line": 441,
        "end_line": 442,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.TRUES",
        "snippet": "      private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
        "begin_line": 474,
        "end_line": 475,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.FALSES",
        "snippet": "      private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
        "begin_line": 476,
        "end_line": 477,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSetter",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSetter.proxy",
        "snippet": "      private final Setter<? super String> proxy;",
        "begin_line": 548,
        "end_line": 548,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSetter",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSetter.level",
        "snippet": "      private final CheckLevel level;",
        "begin_line": 549,
        "end_line": 549,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.flags",
        "snippet": "  private final Flags flags = new Flags();",
        "begin_line": 614,
        "end_line": 614,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.isConfigValid",
        "snippet": "  private boolean isConfigValid = false;",
        "begin_line": 616,
        "end_line": 616,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.DEFAULT_EXTERNS_NAMES",
        "snippet": "  private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(\n    // JS externs\n    \"es3.js\",\n    \"es5.js\",\n\n    // Event APIs\n    \"w3c_event.js\",\n    \"w3c_event3.js\",\n    \"gecko_event.js\",\n    \"ie_event.js\",\n    \"webkit_event.js\",\n    \"w3c_device_sensor_event.js\",\n\n    // DOM apis\n    \"w3c_dom1.js\",\n    \"w3c_dom2.js\",\n    \"w3c_dom3.js\",\n    \"gecko_dom.js\",\n    \"ie_dom.js\",\n    \"webkit_dom.js\",\n\n    // CSS apis\n    \"w3c_css.js\",\n    \"gecko_css.js\",\n    \"ie_css.js\",\n    \"webkit_css.js\",\n\n    // Top-level namespaces\n    \"google.js\",\n\n    \"chrome.js\",\n\n    \"deprecated.js\",\n    \"fileapi.js\",\n    \"flash.js\",\n    \"gears_symbols.js\",\n    \"gears_types.js\",\n    \"gecko_xml.js\",\n    \"html5.js\",\n    \"ie_vml.js\",\n    \"iphone.js\",\n    \"webstorage.js\",\n    \"w3c_anim_timing.js\",\n    \"w3c_css3d.js\",\n    \"w3c_elementtraversal.js\",\n    \"w3c_geolocation.js\",\n    \"w3c_indexeddb.js\",\n    \"w3c_navigation_timing.js\",\n    \"w3c_range.js\",\n    \"w3c_selectors.js\",\n    \"w3c_xml.js\",\n    \"window.js\",\n    \"webkit_notifications.js\",\n    \"webgl.js\");",
        "begin_line": 886,
        "end_line": 939,
        "comment": " The externs expected in externs.zip, in sorted order."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.UNREACHABLE_CODE",
        "snippet": "  static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error(\n      \"JSC_UNREACHABLE_CODE\", \"unreachable code\");",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.source",
        "snippet": "  private final SourceExcerptProvider source;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.colorize",
        "snippet": "  private boolean colorize;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.SUPPORTED_COLOR_TERMINALS",
        "snippet": "  private static final Set<String> SUPPORTED_COLOR_TERMINALS =\n      ImmutableSet.of(\"xterm\",\n                      \"xterm-color\",\n                      \"xterm-256color\",\n                      \"screen-bce\");",
        "begin_line": 46,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.controlCharacter",
        "snippet": "    private final String controlCharacter;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",
        "snippet": "  static final String GETTER_ERROR_MESSAGE =\n      \"getters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 88,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",
        "snippet": "  static final String SETTER_ERROR_MESSAGE =\n      \"setters are not supported in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 93,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",
        "snippet": "  static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
        "begin_line": 98,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  static final String MISPLACED_TYPE_ANNOTATION =\n      \"Type annotations are not allowed here. Are you missing parentheses?\";",
        "begin_line": 102,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.INVALID_ES3_PROP_NAME",
        "snippet": "  static final String INVALID_ES3_PROP_NAME =\n      \"Keywords and reserved words are not allowed as unquoted property \" +\n      \"names in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\";",
        "begin_line": 105,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 111,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newlines",
        "snippet": "  private final List<Integer> newlines;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");",
        "begin_line": 119,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
        "begin_line": 122,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",
        "snippet": "  private static final ImmutableSet<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
        "begin_line": 126,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.reservedKeywords",
        "snippet": "  private final Set<String> reservedKeywords;",
        "begin_line": 133,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.parsedComments",
        "snippet": "  private final Set<Comment> parsedComments = Sets.newHashSet();",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.rootNodeJsDocHolder",
        "snippet": "  Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
        "begin_line": 138,
        "end_line": 138,
        "comment": " and stored in JSDocInfo for placeholder node."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileLevelJsDocBuilder",
        "snippet": "  Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
        "begin_line": 139,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileOverviewInfo",
        "snippet": "  JSDocInfo fileOverviewInfo = null;",
        "begin_line": 141,
        "end_line": 141,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.templateNode",
        "snippet": "  private final Node templateNode;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " memory footprint associated with these."
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.graph",
        "snippet": "  private final DiGraph<N, E> graph;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " FixedPointGraphTraversal accepts them."
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.edgePredicate",
        "snippet": "  private final Predicate<EdgeTuple<N, E>> edgePredicate;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.REACHABLE",
        "snippet": "  public static final Annotation REACHABLE = new Annotation() {};",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.sourceNode",
        "snippet": "    public final N sourceNode;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.edge",
        "snippet": "    public final E edge;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.destNode",
        "snippet": "    public final N destNode;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.name",
        "snippet": "  private String name = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.sourceNode",
        "snippet": "  private Node sourceNode = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.typeOfThis",
        "snippet": "  private JSType typeOfThis = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.templateTypeMap",
        "snippet": "  private TemplateTypeMap templateTypeMap = null;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.inferredReturnType",
        "snippet": "  private boolean inferredReturnType = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isNativeType",
        "snippet": "  private boolean isNativeType = false;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPosition",
        "snippet": "  private Map<Node, Integer> astPosition;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.nodePriorities",
        "snippet": "  private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " TODO(nicksantos): should these be node annotations?"
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityComparator",
        "snippet": "  private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
        "begin_line": 70,
        "end_line": 77,
        "comment": " they will often be executed first in the source program."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPositionCounter",
        "snippet": "  private int astPositionCounter;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityCounter",
        "snippet": "  private int priorityCounter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverseFunctions",
        "snippet": "  private final boolean shouldTraverseFunctions;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.edgeAnnotations",
        "snippet": "  private final boolean edgeAnnotations;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.root",
        "snippet": "  private Node root;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " on only the externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.exceptionHandler",
        "snippet": "  private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * This stack captures the structure of nested TRY blocks. The top of the\n   * stack is the inner most TRY block. A FUNCTION node in this stack implies\n   * that the handler is determined by the caller of the function at runtime.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.finallyMap",
        "snippet": "  private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * This map is used to handle the follow of FINALLY. For example:\n   *\n   * while(x) {\n   *  try {\n   *    try {\n   *      break;\n   *    } catch (a) {\n   *    } finally {\n   *      foo();\n   *    }\n   *    fooFollow();\n   *  } catch (b) {\n   *  } finally {\n   *    bar();\n   *  }\n   *  barFollow();\n   * }\n   * END();\n   *\n   * In this case finallyMap will contain a map from:\n   *    first FINALLY -> bar()\n   *    second FINALLY -> END()\n   *\n   * When we are connecting foo() and bar() to to their respective follow, we\n   * must also look up this map and connect:\n   *   foo() -> bar()\n   *   bar() -> END\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AstControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.AstControlFlowGraph.priorities",
        "snippet": "    private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
        "begin_line": 1006,
        "end_line": 1006,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.logger_",
        "snippet": "  private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.inputId",
        "snippet": "  private transient InputId inputId;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.sourceFile",
        "snippet": "  private transient SourceFile sourceFile;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.fileName",
        "snippet": "  private String fileName;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.root",
        "snippet": "  private Node root;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",
        "snippet": "  static final long MAX_POSITIVE_INTEGER_NUMBER = (long) Math.pow(2, 53);",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",
        "snippet": "  static final String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",
        "snippet": "  static final char LARGEST_BASIC_LATIN = 0x7f;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
        "snippet": "  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
        "begin_line": 58,
        "end_line": 65,
        "comment": " the set of builtin constructors that don't have side effects. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
        "begin_line": 1009,
        "end_line": 1011,
        "comment": " TODO(johnlenz): consider adding an extern annotation for this."
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
        "begin_line": 1012,
        "end_line": 1013,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",
        "snippet": "  private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
        "begin_line": 1014,
        "end_line": 1015,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",
        "snippet": "  private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
        "begin_line": 1016,
        "end_line": 1017,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.IMMUTABLE_PREDICATE",
        "snippet": "  static final Predicate<Node> IMMUTABLE_PREDICATE = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node n) {\n      return isImmutableValue(n);\n    }\n  };",
        "begin_line": 1316,
        "end_line": 1321,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",
        "snippet": "  static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
        "begin_line": 1380,
        "end_line": 1381,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",
        "snippet": "  static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
        "begin_line": 1433,
        "end_line": 1434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",
        "snippet": "  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
        "begin_line": 1479,
        "end_line": 1480,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCollector",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.VarCollector.vars",
        "snippet": "    final Map<String, Node> vars = Maps.newLinkedHashMap();",
        "begin_line": 2561,
        "end_line": 2561,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNameNode",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNameNode.name",
        "snippet": "    final String name;",
        "begin_line": 2662,
        "end_line": 2662,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNodeType",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNodeType.type",
        "snippet": "    final int type;",
        "begin_line": 2678,
        "end_line": 2678,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",
        "snippet": "  static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
        "begin_line": 2711,
        "end_line": 2711,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_TARGET_INVALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_TARGET_INVALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_TARGET_INVALID\",\n      \"Unsupported class definition expression.\");",
        "begin_line": 38,
        "end_line": 40,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_SUPER_CLASS_NOT_VALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_SUPER_CLASS_NOT_VALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_SUPER_CLASS_NOT_VALID\",\n      \"The super class must be null or a valid name reference\");",
        "begin_line": 42,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_DESCRIPTOR_NOT_VALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_DESCRIPTOR_NOT_VALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_DESCRIPTOR_NOT_VALID\",\n      \"The class descriptor must be an object literal\");",
        "begin_line": 46,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_CONSTRUCTOR_MISING",
        "snippet": "  static final DiagnosticType GOOG_CLASS_CONSTRUCTOR_MISING = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_CONSTRUCTOR_MISING\",\n      \"The constructor expression is missing for the class descriptor\");",
        "begin_line": 50,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_STATICS_NOT_VALID",
        "snippet": "  static final DiagnosticType GOOG_CLASS_STATICS_NOT_VALID = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_STATICS_NOT_VALID\",\n      \"The class statics descriptor must be an object or function literal\");",
        "begin_line": 54,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.GOOG_CLASS_UNEXPECTED_PARAMS",
        "snippet": "  static final DiagnosticType GOOG_CLASS_UNEXPECTED_PARAMS = DiagnosticType.error(\n      \"JSC_GOOG_CLASS_UNEXPECTED_PARAMS\",\n      \"The class definition has too many arguments.\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemberDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.MemberDefinition.info",
        "snippet": "    final JSDocInfo info;",
        "begin_line": 149,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemberDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.MemberDefinition.name",
        "snippet": "    final Node name;",
        "begin_line": 150,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MemberDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.MemberDefinition.value",
        "snippet": "    final Node value;",
        "begin_line": 151,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.name",
        "snippet": "    final Node name;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.superClass",
        "snippet": "    final Node superClass;",
        "begin_line": 162,
        "end_line": 162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.constructor",
        "snippet": "    final MemberDefinition constructor;",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.staticProps",
        "snippet": "    final List<MemberDefinition> staticProps;",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.props",
        "snippet": "    final List<MemberDefinition> props;",
        "begin_line": 165,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClassDefinition",
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "signature": "com.google.javascript.jscomp.ClassDefinition.classModifier",
        "snippet": "    final Node classModifier;",
        "begin_line": 166,
        "end_line": 166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceMessages",
        "src_path": "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "signature": "com.google.javascript.jscomp.ReplaceMessages.bundle",
        "snippet": "  private final MessageBundle bundle;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceMessages",
        "src_path": "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "signature": "com.google.javascript.jscomp.ReplaceMessages.strictReplacement",
        "snippet": "  private final boolean strictReplacement;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceMessages",
        "src_path": "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "signature": "com.google.javascript.jscomp.ReplaceMessages.BUNDLE_DOES_NOT_HAVE_THE_MESSAGE",
        "snippet": "  static final DiagnosticType BUNDLE_DOES_NOT_HAVE_THE_MESSAGE =\n      DiagnosticType.error(\"JSC_BUNDLE_DOES_NOT_HAVE_THE_MESSAGE\",\n          \"Message with id = {0} could not be found in replacement bundle\");",
        "begin_line": 36,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.nodes",
        "snippet": "  protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes =\n      Maps.newHashMap();",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useNodeAnnotations",
        "snippet": "  private final boolean useNodeAnnotations;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useEdgeAnnotations",
        "snippet": "  private final boolean useEdgeAnnotations;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.inEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();",
        "begin_line": 335,
        "end_line": 335,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.outEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> outEdgeList =\n        Lists.newArrayList();",
        "begin_line": 336,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.value",
        "snippet": "    protected final N value;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.in",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator();",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.out",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator();",
        "begin_line": 404,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.sourceNode",
        "snippet": "    private DiGraphNode<N, E> sourceNode;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.destNode",
        "snippet": "    private DiGraphNode<N, E> destNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.value",
        "snippet": "    protected final E value;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 558,
        "end_line": 558,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 24,
        "end_line": 24,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.group",
        "snippet": "  private final DiagnosticGroup group;",
        "begin_line": 26,
        "end_line": 26,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.stripTweaks",
        "snippet": "  private final boolean stripTweaks;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compilerDefaultValueOverrides",
        "snippet": "  private final SortedMap<String, Node> compilerDefaultValueOverrides;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.ID_MATCHER",
        "snippet": "  private static final CharMatcher ID_MATCHER = CharMatcher.inRange('a', 'z').\n      or(CharMatcher.inRange('A', 'Z')).or(CharMatcher.anyOf(\"0123456789_.\"));",
        "begin_line": 56,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.UNKNOWN_TWEAK_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_TWEAK_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_TWEAK_WARNING\",\n          \"no tweak registered with ID {0}\");",
        "begin_line": 60,
        "end_line": 63,
        "comment": " Warnings and Errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_MULTIPLY_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_MULTIPLY_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_MULTIPLY_REGISTERED_ERROR\",\n          \"Tweak {0} has already been registered.\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType NON_LITERAL_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_LITERAL_TWEAK_ID_ERROR\",\n          \"tweak ID must be a string literal\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_DEFAULT_VALUE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING\",\n          \"tweak {0} registered with {1} must have a default value that is a \" +\n          \"literal of type {2}\");",
        "begin_line": 75,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_TWEAK_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_TWEAK_INIT_ERROR\",\n          \"tweak declaration {0} must occur in the global scope\");",
        "begin_line": 81,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR\",\n          \"Cannot override the default value of tweak {0} after it has been \" +\n          \"registered\");",
        "begin_line": 86,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING",
        "snippet": "  static final DiagnosticType TWEAK_WRONG_GETTER_TYPE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TWEAK_WRONG_GETTER_TYPE_WARNING\",\n          \"tweak getter function {0} used for tweak registered using {1}\");",
        "begin_line": 92,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_TWEAK_ID_ERROR\",\n          \"tweak ID contains illegal characters. Only letters, numbers, _ \" +\n          \"and . are allowed\");",
        "begin_line": 97,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.name",
        "snippet": "    final String name;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.expectedTypeName",
        "snippet": "    final String expectedTypeName;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeA",
        "snippet": "    final int validNodeTypeA;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeB",
        "snippet": "    final int validNodeTypeB;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.registerFunction",
        "snippet": "    final TweakFunction registerFunction;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_FUNCTIONS_MAP",
        "snippet": "  private static final Map<String, TweakFunction> TWEAK_FUNCTIONS_MAP;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " A map of function name -> TweakFunction."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.tweakInfos",
        "snippet": "    final Map<String, TweakInfo> tweakInfos;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls;",
        "begin_line": 325,
        "end_line": 325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.allTweaks",
        "snippet": "    final Map<String, TweakInfo> allTweaks = Maps.newHashMap();",
        "begin_line": 338,
        "end_line": 338,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls = Lists.newArrayList();",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.sourceName",
        "snippet": "    final String sourceName;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.tweakFunc",
        "snippet": "    final TweakFunction tweakFunc;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.valueNode",
        "snippet": "    final Node valueNode;",
        "begin_line": 435,
        "end_line": 435,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.tweakId",
        "snippet": "    final String tweakId;",
        "begin_line": 459,
        "end_line": 459,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.functionCalls",
        "snippet": "    final List<TweakFunctionCall> functionCalls;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.registerCall",
        "snippet": "    TweakFunctionCall registerCall;",
        "begin_line": 461,
        "end_line": 461,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.defaultValueNode",
        "snippet": "    Node defaultValueNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.name",
        "snippet": "  private final String name;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.USE_OF_WITH",
        "snippet": "  static final DiagnosticType USE_OF_WITH = DiagnosticType.warning(\n      \"JSC_USE_OF_WITH\",\n      \"The use of the 'with' structure should be avoided.\");",
        "begin_line": 31,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.provides",
        "snippet": "  private final List<String> provides;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " A list of provided symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.requires",
        "snippet": "  private final List<String> requires;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " A list of required symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.srcPathRelativeToClosure",
        "snippet": "  private final String srcPathRelativeToClosure;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " The path of the file relative to closure. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.pathOfDefiningFile",
        "snippet": "  private final String pathOfDefiningFile;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " The path to the file from which we extracted the dependency information."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.EMPTY_MAP",
        "snippet": "  private static final PropertyMap EMPTY_MAP = new PropertyMap(\n      ImmutableMap.<String, Property>of());",
        "begin_line": 60,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.PROP_MAP_FROM_TYPE",
        "snippet": "  private static final Function<ObjectType, PropertyMap> PROP_MAP_FROM_TYPE =\n      new Function<ObjectType, PropertyMap>() {\n    @Override public PropertyMap apply(ObjectType t) {\n      return t.getPropertyMap();\n    }\n  };",
        "begin_line": 63,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.parentSource",
        "snippet": "  private ObjectType parentSource = null;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " just reference primary parents and secondary parents directly."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The map of our own properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.name",
        "snippet": "  private final String name;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * Property's name.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "  private JSType type;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Property's type.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "  private final boolean inferred;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * Whether the property's type is inferred.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.propertyNode",
        "snippet": "  private Node propertyNode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n   * The node corresponding to this property, e.g., a GETPROP node that\n   * declares this property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ModificationVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/ModificationVisitor.java",
        "signature": "com.google.javascript.rhino.jstype.ModificationVisitor.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ModificationVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/ModificationVisitor.java",
        "signature": "com.google.javascript.rhino.jstype.ModificationVisitor.visitProperties",
        "snippet": "  private final boolean visitProperties;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ModificationVisitor",
        "src_path": "src/com/google/javascript/rhino/jstype/ModificationVisitor.java",
        "signature": "com.google.javascript.rhino.jstype.ModificationVisitor.seenTypes",
        "snippet": "  private final Set<JSType> seenTypes = Sets.newIdentityHashSet();",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.callback",
        "snippet": "  private final Callback callback;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.curNode",
        "snippet": "  private Node curNode;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Contains the current node"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",
        "snippet": "  public static final DiagnosticType NODE_TRAVERSAL_ERROR =\n      DiagnosticType.error(\"JSC_NODE_TRAVERSAL_ERROR\", \"{0}\");",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopes",
        "snippet": "  private final Deque<Scope> scopes = new ArrayDeque<Scope>();",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Stack containing the Scopes that have been created. The Scope objects\n   * are lazily created; so the {@code scopeRoots} stack contains the\n   * Nodes for all Scopes that have not been created yet.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeRoots",
        "snippet": "  private final Deque<Node> scopeRoots = new ArrayDeque<Node>();",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * A stack of scope roots. All scopes that have not been created\n   * are represented in this Deque.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.cfgs",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Stack of control flow graphs (CFG). There is one CFG per scope. CFGs\n   * are lazily populated: elements are {@code null} until requested by\n   * {@link #getControlFlowGraph()}. Note that {@link ArrayDeque} does not allow\n   * {@code null} elements, so {@link LinkedList} is used instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The current source file name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The current input "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCreator",
        "snippet": "  private ScopeCreator scopeCreator;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The scope creator "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCallback",
        "snippet": "  private ScopedCallback scopeCallback;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Possible callback for scope entry and exist *"
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.nodeTypes",
        "snippet": "    private final Set<Integer> nodeTypes;",
        "begin_line": 198,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.include",
        "snippet": "    private final boolean include;",
        "begin_line": 199,
        "end_line": 199,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",
        "snippet": "  private static final String MISSING_SOURCE = \"[source unknown]\";",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(PhaseOptimizer.class.getName());",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.tracker",
        "snippet": "  private final PerformanceTracker tracker;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.passes",
        "snippet": "  private final List<CompilerPass> passes;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.inLoop",
        "snippet": "  private boolean inLoop;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.sanityCheck",
        "snippet": "  private PassFactory sanityCheck;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.printAstHashcodes",
        "snippet": "  private boolean printAstHashcodes = false;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.progress",
        "snippet": "  private double progress = 0.0;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.progressStep",
        "snippet": "  private double progressStep = 0.0;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.progressRange",
        "snippet": "  private final ProgressRange progressRange;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentPass",
        "snippet": "  private NamedPass currentPass;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " 2) Compiler talks to PhaseOptimizer, not Loop or ScopedChangeHandler"
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.lastRuns",
        "snippet": "  private Map<NamedPass, Integer> lastRuns;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For each pass, remember the time at the end of the pass's last run."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentScope",
        "snippet": "  private Node currentScope;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.timestamp",
        "snippet": "  private int timestamp;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " returning 0 if the custom attribute on a node hasn't been set."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.lastChange",
        "snippet": "  private int lastChange;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The time of the last change made to the program by any pass."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.START_TIME",
        "snippet": "  private static final int START_TIME = 0;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.jsRoot",
        "snippet": "  private final Node jsRoot;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.crossScopeReporting",
        "snippet": "  private boolean crossScopeReporting;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " change handlers. This flag prevents double update in ScopedChangeHandler."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.lastAst",
        "snippet": "  private Node lastAst;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Used for sanity checks between loopable passes"
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.mtoc",
        "snippet": "  private Map<Node, Node> mtoc; // Stands for \"main to clone\"",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Stands for \"main to clone\""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMAL_ORDER",
        "snippet": "  @VisibleForTesting\n  static final List<String> OPTIMAL_ORDER = ImmutableList.of(\n     \"deadAssignmentsElimination\",\n     \"inlineFunctions\",\n     \"removeUnusedPrototypeProperties\",\n     \"removeUnreachableCode\",\n     \"removeUnusedVars\",\n     \"minimizeExitPoints\",\n     \"inlineVariables\",\n     \"collapseObjectLiterals\",\n     \"peepholeOptimizations\");",
        "begin_line": 94,
        "end_line": 104,
        "comment": " future, we should write new code to do it."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.MAX_LOOPS",
        "snippet": "  static final int MAX_LOOPS = 100;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMIZE_LOOP_ERROR",
        "snippet": "  static final String OPTIMIZE_LOOP_ERROR =\n      \"Fixed point loop exceeded the maximum number of iterations.\";",
        "begin_line": 107,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedPass",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.NamedPass.name",
        "snippet": "    final String name;",
        "begin_line": 252,
        "end_line": 252,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedPass",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.NamedPass.factory",
        "snippet": "    private final PassFactory factory;",
        "begin_line": 253,
        "end_line": 253,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedPass",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.NamedPass.tracer",
        "snippet": "    private Tracer tracer;",
        "begin_line": 254,
        "end_line": 254,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedChangeHandler",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.ScopedChangeHandler.lastCodeChangeQuery",
        "snippet": "    private int lastCodeChangeQuery;",
        "begin_line": 346,
        "end_line": 346,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Loop",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.Loop.myPasses",
        "snippet": "    private final List<NamedPass> myPasses = Lists.newArrayList();",
        "begin_line": 383,
        "end_line": 383,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Loop",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.Loop.myNames",
        "snippet": "    private final Set<String> myNames = Sets.newHashSet();",
        "begin_line": 384,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Loop",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.Loop.scopeHandler",
        "snippet": "    private ScopedChangeHandler scopeHandler;",
        "begin_line": 385,
        "end_line": 385,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProgressRange",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.ProgressRange.initialValue",
        "snippet": "    public final double initialValue;",
        "begin_line": 494,
        "end_line": 494,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProgressRange",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.ProgressRange.maxValue",
        "snippet": "    public final double maxValue;",
        "begin_line": 495,
        "end_line": 495,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.success",
        "snippet": "  public final boolean success;",
        "begin_line": 25,
        "end_line": 25,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.errors",
        "snippet": "  public final JSError[] errors;",
        "begin_line": 26,
        "end_line": 26,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.warnings",
        "snippet": "  public final JSError[] warnings;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.debugLog",
        "snippet": "  public final String debugLog;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.variableMap",
        "snippet": "  public final VariableMap variableMap;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.propertyMap",
        "snippet": "  public final VariableMap propertyMap;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.namedAnonFunctionMap",
        "snippet": "  public final VariableMap namedAnonFunctionMap;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.stringMap",
        "snippet": "  public final VariableMap stringMap;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.functionInformationMap",
        "snippet": "  public final FunctionInformationMap functionInformationMap;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.sourceMap",
        "snippet": "  public final SourceMap sourceMap;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.cssNames",
        "snippet": "  public final Map<String, Integer> cssNames;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.externExport",
        "snippet": "  public final String externExport;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.idGeneratorMap",
        "snippet": "  public final String idGeneratorMap;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.callback",
        "snippet": "  private final EdgeCallback<N, E> callback;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.NON_HALTING_ERROR_MSG",
        "snippet": "  public static final String NON_HALTING_ERROR_MSG =\n    \"Fixed point computation not halting\";",
        "begin_line": 44,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedType",
        "snippet": "  private JSType referencedType;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.referencedObjType",
        "snippet": "  private ObjectType referencedObjType;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.name",
        "snippet": "  private final String name;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass",
        "snippet": "  private final boolean isOneTimePass;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.root",
        "snippet": "  private final Node root;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The root of the AST. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The source name where the type expression appears. "
    },
    {
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.warnings",
        "snippet": "    private List<String> warnings = null;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.errors",
        "snippet": "    private List<String> errors = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.types",
        "snippet": "  private final Set<DiagnosticType> types;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The set of types represented by this group, hashed by key."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.name",
        "snippet": "  private final String name;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " A human-readable name for the group."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.singletons",
        "snippet": "  private static final Map<DiagnosticType, DiagnosticGroup> singletons =\n      Maps.newHashMap();",
        "begin_line": 66,
        "end_line": 67,
        "comment": " DiagnosticGroups with only a single DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.MESSAGE_REPRESENTATION_FORMAT",
        "snippet": "  private static final String MESSAGE_REPRESENTATION_FORMAT = \"{$%s}\";",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.key",
        "snippet": "  private final String key;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.id",
        "snippet": "  private final String id;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.parts",
        "snippet": "  private final List<CharSequence> parts;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.placeholders",
        "snippet": "  private final Set<String> placeholders;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.desc",
        "snippet": "  private final String desc;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.hidden",
        "snippet": "  private final boolean hidden;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.meaning",
        "snippet": "  private final String meaning;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.isAnonymous",
        "snippet": "  private final boolean isAnonymous;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.JsMessage.isExternal",
        "snippet": "  private final boolean isExternal;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PlaceholderReference",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.PlaceholderReference.name",
        "snippet": "    private final String name;",
        "begin_line": 244,
        "end_line": 244,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.MSG_EXTERNAL_PATTERN",
        "snippet": "    private static final Pattern MSG_EXTERNAL_PATTERN =\n        Pattern.compile(\"MSG_EXTERNAL_(\\\\d+)\");",
        "begin_line": 296,
        "end_line": 297,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.key",
        "snippet": "    private String key;",
        "begin_line": 308,
        "end_line": 308,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.meaning",
        "snippet": "    private String meaning;",
        "begin_line": 310,
        "end_line": 310,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.desc",
        "snippet": "    private String desc;",
        "begin_line": 312,
        "end_line": 312,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.hidden",
        "snippet": "    private boolean hidden;",
        "begin_line": 313,
        "end_line": 313,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.parts",
        "snippet": "    private List<CharSequence> parts = Lists.newLinkedList();",
        "begin_line": 315,
        "end_line": 315,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.placeholders",
        "snippet": "    private Set<String> placeholders = Sets.newHashSet();",
        "begin_line": 316,
        "end_line": 316,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceName",
        "snippet": "    private String sourceName;",
        "begin_line": 318,
        "end_line": 318,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Hash",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Hash.SEED64",
        "snippet": "    private static final long SEED64 =\n        0x2b992ddfa23249d6L; // part of pi, arbitrary",
        "begin_line": 483,
        "end_line": 484,
        "comment": " Default hash seed (64 bit) "
    },
    {
        "class_name": "com.google.javascript.jscomp.Hash",
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "signature": "com.google.javascript.jscomp.Hash.CONSTANT64",
        "snippet": "    private static final long CONSTANT64 =\n        0xe08c1d668b756f82L; // part of golden ratio, arbitrary",
        "begin_line": 487,
        "end_line": 488,
        "comment": " Hash constant (64 bit) "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING",
        "snippet": "  static final DiagnosticType PARSE_WARNING = DiagnosticType.warning(\n      \"DEPS_PARSE_WARNING\", \"{0}\\n{1}\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR = DiagnosticType.error(\n      \"DEPS_PARSE_ERROR\", \"{0}\\n{1}\");",
        "begin_line": 42,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.shortcutMode",
        "snippet": "  boolean shortcutMode = false;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.ParseException",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.ParseException.serialVersionUID",
        "snippet": "    public static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.ParseException",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.ParseException.fatal",
        "snippet": "    private boolean fatal;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN",
        "snippet": "  private static final Pattern STRING_LITERAL_PATTERN = Pattern.compile(\n      \"\\\\s*(?:'((?:\\\\\\\\'|[^'])*?)'|\\\"((?:\\\\\\\\\\\"|[^\\\"])*?)\\\")\\\\s*\");",
        "begin_line": 71,
        "end_line": 72,
        "comment": " Pattern for matching JavaScript string literals. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.valueMatcher",
        "snippet": "  private Matcher valueMatcher = STRING_LITERAL_PATTERN.matcher(\"\");",
        "begin_line": 75,
        "end_line": 75,
        "comment": " Matcher used in the parsing string literals. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.filePath",
        "snippet": "  String filePath;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Path of the file currently being parsed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.lineNum",
        "snippet": "  int lineNum;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The line number of the line currently being parsed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.errorManager",
        "snippet": "  ErrorManager errorManager;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Handles error messages. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.parseSucceeded",
        "snippet": "  boolean parseSucceeded;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Did our parse succeed. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.DEFAULT_MAX_UNION_SIZE",
        "snippet": "  private static final int DEFAULT_MAX_UNION_SIZE = 20;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.maxUnionSize",
        "snippet": "  private final int maxUnionSize;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.functionTypePosition",
        "snippet": "  private int functionTypePosition = -1;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " one structural function, or just bails out and uses the top function type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.logger",
        "snippet": "  static final Logger logger =\n      Logger.getLogger(Tracer.class.getName());",
        "begin_line": 163,
        "end_line": 164,
        "comment": " package-private for access from unit tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.defaultPrettyPrint",
        "snippet": "  private static volatile boolean defaultPrettyPrint;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Whether pretty printing is enabled. This is intended to be set once\n   * at application startup.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingStatistics",
        "snippet": "  private static List<TracingStatistic> extraTracingStatistics =\n      new CopyOnWriteArrayList<TracingStatistic>();",
        "begin_line": 176,
        "end_line": 177,
        "comment": " This list is guaranteed to only increase in length.  It contains\n   * a list of additional statistics that the user wants to keep track\n   * of.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingValues",
        "snippet": "  private long[] extraTracingValues;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Values returned by extraTracingStatistics "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.type",
        "snippet": "  @Nullable private final String type;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " The type for grouping traces, may be null "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.comment",
        "snippet": "  private final String comment;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A comment string for the report "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startTimeMs",
        "snippet": "  private final long startTimeMs;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Start time of the trace "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.stopTimeMs",
        "snippet": "  private long stopTimeMs;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Stop time of the trace, non-final "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startThread",
        "snippet": "  final Thread startThread;",
        "begin_line": 198,
        "end_line": 198,
        "comment": "\n   * Record our starter thread in order to trap Traces that are started in one\n   * thread and stopped in another\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.MAX_TRACE_SIZE",
        "snippet": "  static final int MAX_TRACE_SIZE = 1000;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n   * We limit the number of events in a Trace in order to catch memory\n   * leaks (a thread that keeps logging events and never clears them).\n   * This number is arbitrary and can be increased if necessary (though\n   * if there are more than 1000 events then the Tracer is probably being\n   * misused).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.clock",
        "snippet": "  static InternalClock clock = new InternalClock() {\n    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n  };",
        "begin_line": 221,
        "end_line": 226,
        "comment": "\n   * Default clock that calls through to the system clock. Can be overridden\n   * in unit tests.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.count",
        "snippet": "    private int count;",
        "begin_line": 541,
        "end_line": 541,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.silent",
        "snippet": "    private int silent;",
        "begin_line": 542,
        "end_line": 542,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.clockTime",
        "snippet": "    private int clockTime;",
        "begin_line": 543,
        "end_line": 543,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.extraInfo",
        "snippet": "    private int[] extraInfo;",
        "begin_line": 544,
        "end_line": 544,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToCountMap",
        "snippet": "  @Nullable private static AtomicTracerStatMap typeToCountMap;",
        "begin_line": 575,
        "end_line": 575,
        "comment": "\n   * This map tracks counts of tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToSilentMap",
        "snippet": "  @Nullable private static AtomicTracerStatMap typeToSilentMap;",
        "begin_line": 580,
        "end_line": 580,
        "comment": "\n   * This map tracks counts of silent tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToTimeMap",
        "snippet": "  @Nullable private static AtomicTracerStatMap typeToTimeMap;",
        "begin_line": 585,
        "end_line": 585,
        "comment": "\n   * This map tracks time (ms) for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.ZERO_STAT",
        "snippet": "  private static final Stat ZERO_STAT = new Stat();",
        "begin_line": 633,
        "end_line": 633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.isStart",
        "snippet": "    boolean isStart;   // else is_stop",
        "begin_line": 644,
        "end_line": 644,
        "comment": " else is_stop"
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.tracer",
        "snippet": "    Tracer tracer;",
        "begin_line": 645,
        "end_line": 645,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.defaultSilenceThreshold",
        "snippet": "    int defaultSilenceThreshold; // non-final",
        "begin_line": 705,
        "end_line": 705,
        "comment": " non-final"
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.events",
        "snippet": "    final ArrayList<Event> events = new ArrayList<Event>();",
        "begin_line": 708,
        "end_line": 708,
        "comment": " The Events corresponding to each startEvent/stopEvent "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.outstandingEvents",
        "snippet": "    final HashSet<Tracer> outstandingEvents = new HashSet<Tracer>();",
        "begin_line": 711,
        "end_line": 711,
        "comment": " Tracers that have not had their .stop() called "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.stats",
        "snippet": "    final Map<String, Stat> stats = new HashMap<String, Stat>();",
        "begin_line": 714,
        "end_line": 714,
        "comment": " Map from type to Stat object "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isOutstandingEventsTruncated",
        "snippet": "    boolean isOutstandingEventsTruncated = false;",
        "begin_line": 720,
        "end_line": 720,
        "comment": "\n     * True if {@code outstandingEvents} has been cleared because we exceeded\n     * the max trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isEventsTruncated",
        "snippet": "    boolean isEventsTruncated = false;",
        "begin_line": 726,
        "end_line": 726,
        "comment": "\n     * True if {@code events} has been cleared because we exceeded the max\n     * trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isInitialized",
        "snippet": "    boolean isInitialized = false;",
        "begin_line": 732,
        "end_line": 732,
        "comment": "\n     * Set to true if {@link Tracer#initCurrentThreadTrace()} was called by\n     * the current thread.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.prettyPrint",
        "snippet": "    boolean prettyPrint = false;",
        "begin_line": 737,
        "end_line": 737,
        "comment": "\n     * Whether pretty printing is enabled for the trace.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.traces",
        "snippet": "  private static ThreadLocal<ThreadTrace> traces =\n      new ThreadLocal<ThreadTrace>();",
        "begin_line": 952,
        "end_line": 953,
        "comment": " Holds the ThreadTrace for each thread.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.AtomicTracerStatMap",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.AtomicTracerStatMap.map",
        "snippet": "    private final ConcurrentMap<String, Long> map =\n        new ConcurrentHashMap<String, Long>();",
        "begin_line": 1033,
        "end_line": 1034,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.stream",
        "snippet": "  private final PrintStream stream;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.summaryDetailLevel",
        "snippet": "  private int summaryDetailLevel = 1;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.serialVersionUID",
        "snippet": "  public static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.InputId",
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "signature": "com.google.javascript.rhino.InputId.id",
        "snippet": "  private final String id;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR =\n      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR",
        "snippet": "  static final DiagnosticType TYPE_PARSE_ERROR =\n      DiagnosticType.warning(\"JSC_TYPE_PARSE_ERROR\", \"{0}\");",
        "begin_line": 36,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TRAILING_COMMA",
        "snippet": "  static final DiagnosticType TRAILING_COMMA =\n      DiagnosticType.error(\"JSC_TRAILING_COMMA\",\n          \"Parse error. IE8 (and below) will parse trailing commas in \" +\n          \"array and object literals incorrectly. \" +\n          \"If you are targeting newer versions of JS, \" +\n          \"set the appropriate language_in option.\");",
        "begin_line": 41,
        "end_line": 46,
        "comment": " warnings API."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.DUPLICATE_PARAM",
        "snippet": "  static final DiagnosticType DUPLICATE_PARAM =\n      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.BAD_JSDOC_ANNOTATION",
        "snippet": "  static final DiagnosticType BAD_JSDOC_ANNOTATION =\n      DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");",
        "begin_line": 51,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  static final DiagnosticType MISPLACED_TYPE_ANNOTATION =\n      DiagnosticType.warning(\"JSC_MISPLACED_TYPE_ANNOTATION\",\n          \"Type annotations are not allowed here. \" +\n          \"Are you missing parentheses?\");",
        "begin_line": 54,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.INVALID_ES3_PROP_NAME",
        "snippet": "  static final DiagnosticType INVALID_ES3_PROP_NAME = DiagnosticType.warning(\n      \"JSC_INVALID_ES3_PROP_NAME\",\n      \"Keywords and reserved words are not allowed as unquoted property \" +\n      \"names in older versions of JavaScript. \" +\n      \"If you are targeting newer versions of JavaScript, \" +\n      \"set the appropriate language_in option.\");",
        "begin_line": 59,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_TREE_TOO_DEEP",
        "snippet": "  static final DiagnosticType PARSE_TREE_TOO_DEEP =\n      DiagnosticType.error(\"PARSE_TREE_TOO_DEEP\",\n          \"Parse tree too deep.\");",
        "begin_line": 66,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.typeMap",
        "snippet": "  private final Map<Pattern, DiagnosticType> typeMap;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " A map of Rhino messages to their DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Collection<JSType> alternates;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private int hashcode;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.PARAM_LIST);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.sortDependencies",
        "snippet": "  private boolean sortDependencies = false;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.pruneDependencies",
        "snippet": "  private boolean pruneDependencies = false;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.dropMoochers",
        "snippet": "  private boolean dropMoochers = false;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "signature": "com.google.javascript.jscomp.DependencyOptions.entryPoints",
        "snippet": "  private final Set<String> entryPoints = Sets.newHashSet();",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnTypeInferred",
        "snippet": "  final boolean returnTypeInferred;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Whether the return type is inferred."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.key",
        "snippet": "  public final String key;",
        "begin_line": 33,
        "end_line": 33,
        "comment": "\n   * The error type. Used as the BugPattern and BugInstance types by\n   * BugBot's XML\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.format",
        "snippet": "  public final MessageFormat format;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " The default way to format errors "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.defaultLevel",
        "snippet": "  public final CheckLevel defaultLevel;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Default level "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.level",
        "snippet": "  public CheckLevel level;",
        "begin_line": 42,
        "end_line": 42,
        "comment": " Reporting level, initially the defaultLevel but may be changed. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.GET_CSS_NAME_FUNCTION",
        "snippet": "  static final String GET_CSS_NAME_FUNCTION = \"goog.getCssName\";",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_NUM_ARGS\",\n          \"goog.getCssName called with \\\"{0}\\\" arguments, expected 1 or 2.\");",
        "begin_line": 87,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR",
        "snippet": "  static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_STRING_LITERAL_EXPECTED\",\n          \"goog.getCssName called with invalid argument, string literal \" +\n          \"expected.  Was \\\"{0}\\\".\");",
        "begin_line": 91,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNEXPECTED_STRING_LITERAL_ERROR",
        "snippet": "  static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR =\n    DiagnosticType.error(\"JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL\",\n        \"goog.getCssName called with invalid arguments, string literal \" +\n        \"passed as first of two arguments.  Did you mean \" +\n        \"goog.getCssName(\\\"{0}-{1}\\\")?\");",
        "begin_line": 96,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_SYMBOL_WARNING =\n      DiagnosticType.warning(\"JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL\",\n         \"goog.getCssName called with unrecognized symbol \\\"{0}\\\" in class \" +\n         \"\\\"{1}\\\".\");",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.cssNames",
        "snippet": "  private final Map<String, Integer> cssNames;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.symbolMap",
        "snippet": "  private CssRenamingMap symbolMap;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.whitelist",
        "snippet": "  private final Set<String> whitelist;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.nativeStringType",
        "snippet": "  private final JSType nativeStringType;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "src_path": "src/com/google/javascript/jscomp/RecentChange.java",
        "signature": "com.google.javascript.jscomp.RecentChange.hasChanged",
        "snippet": "  private boolean hasChanged = false;",
        "begin_line": 24,
        "end_line": 24,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR",
        "snippet": "  static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(\n      \"JSC_USELESS_CODE\",\n      \"Suspicious code. {0}\");",
        "begin_line": 42,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN",
        "snippet": "  static final String PROTECTOR_FN = \"JSCOMPILER_PRESERVE\";",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.problemNodes",
        "snippet": "  private final List<Node> problemNodes = Lists.newArrayList();",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.protectSideEffectFreeCode",
        "snippet": "  private final boolean protectSideEffectFreeCode;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripProtection",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.StripProtection.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 170,
        "end_line": 170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.SUSPICIOUS_SEMICOLON",
        "snippet": "  static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning(\n      \"JSC_SUSPICIOUS_SEMICOLON\",\n      \"If this if/for/while really shouldn't have a body, use {}\");",
        "begin_line": 39,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.SUSPICIOUS_COMPARISON_WITH_NAN",
        "snippet": "  static final DiagnosticType SUSPICIOUS_COMPARISON_WITH_NAN =\n      DiagnosticType.warning(\n          \"JSC_SUSPICIOUS_NAN\",\n          \"Comparison again NaN is always false. Did you mean isNaN()?\");",
        "begin_line": 43,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.SUSPICIOUS_IN_OPERATOR",
        "snippet": "  static final DiagnosticType SUSPICIOUS_IN_OPERATOR =\n      DiagnosticType.warning(\n          \"JSC_SUSPICIOUS_IN\",\n          \"Use of the \\\"in\\\" keyword on non-object types throws an exception.\");",
        "begin_line": 48,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNUSED",
        "snippet": "  static final DiagnosticType UNUSED =\n      DiagnosticType.warning(\"JSC_UNUSED\", \"{0}\");",
        "begin_line": 30,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.groupsByName",
        "snippet": "  private static final Map<String, DiagnosticGroup> groupsByName =\n      Maps.newHashMap();",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES",
        "snippet": "  static final String DIAGNOSTIC_GROUP_NAMES =\n      \"accessControls, ambiguousFunctionDecl, checkEventfulObjectDisposal, \" +\n      \"checkRegExp, checkStructDictInheritance, checkTypes, checkVars, \" +\n      \"const, constantProperty, deprecated, duplicateMessage, es3, \" +\n      \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n      \"internetExplorerChecks, invalidCasts, misplacedTypeAnnotation, \" +\n      \"missingProperties, missingProvide, missingRequire, missingReturn,\" +\n      \"nonStandardJsDocs, reportUnknownTypes, suspiciousCode, \" +\n      \"strictModuleDepCheck, typeInvalidation, \" +\n      \"undefinedNames, undefinedVars, unknownDefines, uselessCode, \" +\n      \"visibility\";",
        "begin_line": 78,
        "end_line": 88,
        "comment": " to parser/ParserConfig.properties"
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS",
        "snippet": "  public static final DiagnosticGroup GLOBAL_THIS =\n      DiagnosticGroups.registerGroup(\"globalThis\",\n          CheckGlobalThis.GLOBAL_THIS);",
        "begin_line": 90,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED",
        "snippet": "  public static final DiagnosticGroup DEPRECATED =\n      DiagnosticGroups.registerGroup(\"deprecated\",\n          CheckAccessControls.DEPRECATED_NAME,\n          CheckAccessControls.DEPRECATED_NAME_REASON,\n          CheckAccessControls.DEPRECATED_PROP,\n          CheckAccessControls.DEPRECATED_PROP_REASON,\n          CheckAccessControls.DEPRECATED_CLASS,\n          CheckAccessControls.DEPRECATED_CLASS_REASON);",
        "begin_line": 94,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY",
        "snippet": "  public static final DiagnosticGroup VISIBILITY =\n      DiagnosticGroups.registerGroup(\"visibility\",\n          CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n          CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n          CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n          CheckAccessControls.PRIVATE_OVERRIDE,\n          CheckAccessControls.VISIBILITY_MISMATCH);",
        "begin_line": 103,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS",
        "snippet": "  public static final DiagnosticGroup ACCESS_CONTROLS =\n      DiagnosticGroups.registerGroup(\"accessControls\",\n          DEPRECATED, VISIBILITY);",
        "begin_line": 111,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC",
        "snippet": "  public static final DiagnosticGroup NON_STANDARD_JSDOC =\n      DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n          RhinoErrorReporter.BAD_JSDOC_ANNOTATION);",
        "begin_line": 115,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS",
        "snippet": "  public static final DiagnosticGroup INVALID_CASTS =\n      DiagnosticGroups.registerGroup(\"invalidCasts\",\n          TypeValidator.INVALID_CAST);",
        "begin_line": 119,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNNECESSARY_CASTS",
        "snippet": "  public static final DiagnosticGroup UNNECESSARY_CASTS =\n      DiagnosticGroups.registerGroup(\"unnecessaryCasts\",\n          TypeValidator.UNNECESSARY_CAST);",
        "begin_line": 123,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC",
        "snippet": "  public static final DiagnosticGroup FILEOVERVIEW_JSDOC =\n      DiagnosticGroups.registerDeprecatedGroup(\"fileoverviewTags\");",
        "begin_line": 127,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK",
        "snippet": "  public static final DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n      DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n          VarCheck.STRICT_MODULE_DEP_ERROR,\n          CheckGlobalNames.STRICT_MODULE_DEP_QNAME);",
        "begin_line": 130,
        "end_line": 133,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VIOLATED_MODULE_DEP",
        "snippet": "  public static final DiagnosticGroup VIOLATED_MODULE_DEP =\n      DiagnosticGroups.registerGroup(\"violatedModuleDep\",\n          VarCheck.VIOLATED_MODULE_DEP_ERROR);",
        "begin_line": 135,
        "end_line": 137,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION",
        "snippet": "  public static final DiagnosticGroup EXTERNS_VALIDATION =\n      DiagnosticGroups.registerGroup(\"externsValidation\",\n          VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n          VarCheck.UNDEFINED_EXTERN_VAR_ERROR);",
        "begin_line": 139,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL",
        "snippet": "  public static final DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n      DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n          VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL,\n          StrictModeCheck.BAD_FUNCTION_DECLARATION);",
        "begin_line": 144,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES",
        "snippet": "  public static final DiagnosticGroup UNKNOWN_DEFINES =\n      DiagnosticGroups.registerGroup(\"unknownDefines\",\n          ProcessDefines.UNKNOWN_DEFINE_WARNING);",
        "begin_line": 149,
        "end_line": 151,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TWEAKS",
        "snippet": "  public static final DiagnosticGroup TWEAKS =\n      DiagnosticGroups.registerGroup(\"tweakValidation\",\n          ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n          ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n          ProcessTweaks.UNKNOWN_TWEAK_WARNING);",
        "begin_line": 153,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES",
        "snippet": "  public static final DiagnosticGroup MISSING_PROPERTIES =\n      DiagnosticGroups.registerGroup(\"missingProperties\",\n          TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION);",
        "begin_line": 159,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_RETURN",
        "snippet": "  public static final DiagnosticGroup MISSING_RETURN =\n      DiagnosticGroups.registerGroup(\"missingReturn\",\n          CheckMissingReturn.MISSING_RETURN_STATEMENT);",
        "begin_line": 163,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS",
        "snippet": "  public static final DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n      DiagnosticGroups.registerGroup(\"internetExplorerChecks\",\n          RhinoErrorReporter.TRAILING_COMMA);",
        "begin_line": 167,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES",
        "snippet": "  public static final DiagnosticGroup UNDEFINED_VARIABLES =\n      DiagnosticGroups.registerGroup(\"undefinedVars\",\n          VarCheck.UNDEFINED_VAR_ERROR);",
        "begin_line": 171,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES",
        "snippet": "  public static final DiagnosticGroup UNDEFINED_NAMES =\n      DiagnosticGroups.registerGroup(\"undefinedNames\",\n          CheckGlobalNames.UNDEFINED_NAME_WARNING);",
        "begin_line": 175,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT",
        "snippet": "  public static final DiagnosticGroup DEBUGGER_STATEMENT_PRESENT =\n      DiagnosticGroups.registerGroup(\"checkDebuggerStatement\",\n          CheckDebuggerStatement.DEBUGGER_STATEMENT_PRESENT);",
        "begin_line": 179,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP",
        "snippet": "  public static final DiagnosticGroup CHECK_REGEXP =\n      DiagnosticGroups.registerGroup(\"checkRegExp\",\n          CheckRegExp.REGEXP_REFERENCE,\n          CheckRegExp.MALFORMED_REGEXP);",
        "begin_line": 183,
        "end_line": 186,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES",
        "snippet": "  public static final DiagnosticGroup CHECK_TYPES =\n      DiagnosticGroups.registerGroup(\"checkTypes\",\n          TypeValidator.ALL_DIAGNOSTICS,\n          TypeCheck.ALL_DIAGNOSTICS);",
        "begin_line": 188,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_EVENTFUL_OBJECT_DISPOSAL",
        "snippet": "  public static final DiagnosticGroup CHECK_EVENTFUL_OBJECT_DISPOSAL =\n      DiagnosticGroups.registerGroup(\"checkEventfulObjectDisposal\",\n          CheckEventfulObjectDisposal.EVENTFUL_OBJECT_NOT_DISPOSED,\n          CheckEventfulObjectDisposal.EVENTFUL_OBJECT_PURELY_LOCAL,\n          CheckEventfulObjectDisposal.OVERWRITE_PRIVATE_EVENTFUL_OBJECT,\n          CheckEventfulObjectDisposal.UNLISTEN_WITH_ANONBOUND);",
        "begin_line": 193,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.REPORT_UNKNOWN_TYPES",
        "snippet": "  public static final DiagnosticGroup REPORT_UNKNOWN_TYPES =\n      DiagnosticGroups.registerGroup(\"reportUnknownTypes\",\n          TypeCheck.UNKNOWN_EXPR_TYPE);",
        "begin_line": 200,
        "end_line": 202,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_STRUCT_DICT_INHERITANCE",
        "snippet": "  public static final DiagnosticGroup CHECK_STRUCT_DICT_INHERITANCE =\n      DiagnosticGroups.registerGroup(\"checkStructDictInheritance\",\n          TypeCheck.CONFLICTING_SHAPE_TYPE);",
        "begin_line": 204,
        "end_line": 206,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES",
        "snippet": "  public static final DiagnosticGroup CHECK_VARIABLES =\n      DiagnosticGroups.registerGroup(\"checkVars\",\n          VarCheck.UNDEFINED_VAR_ERROR,\n          VarCheck.VAR_MULTIPLY_DECLARED_ERROR,\n          VariableReferenceCheck.UNDECLARED_REFERENCE,\n          VariableReferenceCheck.REDECLARED_VARIABLE);",
        "begin_line": 208,
        "end_line": 213,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE",
        "snippet": "  public static final DiagnosticGroup CHECK_USELESS_CODE =\n      DiagnosticGroups.registerGroup(\"uselessCode\",\n          CheckSideEffects.USELESS_CODE_ERROR,\n          CheckUnreachableCode.UNREACHABLE_CODE);",
        "begin_line": 215,
        "end_line": 218,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONST",
        "snippet": "  public static final DiagnosticGroup CONST =\n      DiagnosticGroups.registerGroup(\"const\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE,\n          ConstCheck.CONST_REASSIGNED_VALUE_ERROR);",
        "begin_line": 220,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY",
        "snippet": "  public static final DiagnosticGroup CONSTANT_PROPERTY =\n      DiagnosticGroups.registerGroup(\"constantProperty\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);",
        "begin_line": 226,
        "end_line": 229,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION",
        "snippet": "  public static final DiagnosticGroup TYPE_INVALIDATION =\n      DiagnosticGroups.registerGroup(\"typeInvalidation\",\n          DisambiguateProperties.Warnings.INVALIDATION,\n          DisambiguateProperties.Warnings.INVALIDATION_ON_TYPE);",
        "begin_line": 231,
        "end_line": 234,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_VARS",
        "snippet": "  public static final DiagnosticGroup DUPLICATE_VARS =\n      DiagnosticGroups.registerGroup(\"duplicate\",\n          VarCheck.VAR_MULTIPLY_DECLARED_ERROR,\n          TypeValidator.DUP_VAR_DECLARATION,\n          VariableReferenceCheck.REDECLARED_VARIABLE);",
        "begin_line": 236,
        "end_line": 240,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ES3",
        "snippet": "  public static final DiagnosticGroup ES3 =\n      DiagnosticGroups.registerGroup(\"es3\",\n          RhinoErrorReporter.INVALID_ES3_PROP_NAME,\n          RhinoErrorReporter.TRAILING_COMMA);",
        "begin_line": 242,
        "end_line": 245,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT",
        "snippet": "  public static final DiagnosticGroup ES5_STRICT =\n      DiagnosticGroups.registerGroup(\"es5Strict\",\n          ControlStructureCheck.USE_OF_WITH,\n          StrictModeCheck.UNKNOWN_VARIABLE,\n          StrictModeCheck.EVAL_DECLARATION,\n          StrictModeCheck.EVAL_ASSIGNMENT,\n          StrictModeCheck.ARGUMENTS_DECLARATION,\n          StrictModeCheck.ARGUMENTS_ASSIGNMENT,\n          StrictModeCheck.DELETE_VARIABLE,\n          StrictModeCheck.DUPLICATE_OBJECT_KEY,\n          StrictModeCheck.BAD_FUNCTION_DECLARATION);",
        "begin_line": 247,
        "end_line": 257,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES",
        "snippet": "  public static final DiagnosticGroup CHECK_PROVIDES =\n      DiagnosticGroups.registerGroup(\"checkProvides\",\n          CheckProvides.MISSING_PROVIDE_WARNING);",
        "begin_line": 261,
        "end_line": 263,
        "comment": " the existing and more popular linter suppression"
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROVIDE",
        "snippet": "  public static final DiagnosticGroup MISSING_PROVIDE =\n      DiagnosticGroups.registerGroup(\"missingProvide\",\n          CheckProvides.MISSING_PROVIDE_WARNING);",
        "begin_line": 265,
        "end_line": 267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_REQUIRE",
        "snippet": "  public static final DiagnosticGroup MISSING_REQUIRE =\n      DiagnosticGroups.registerGroup(\"missingRequire\",\n          CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);",
        "begin_line": 269,
        "end_line": 271,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE",
        "snippet": "  public static final DiagnosticGroup DUPLICATE_MESSAGE =\n      DiagnosticGroups.registerGroup(\"duplicateMessage\",\n          JsMessageVisitor.MESSAGE_DUPLICATE_KEY);",
        "begin_line": 273,
        "end_line": 275,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISPLACED_TYPE_ANNOTATION",
        "snippet": "  public static final DiagnosticGroup MISPLACED_TYPE_ANNOTATION =\n      DiagnosticGroups.registerGroup(\"misplacedTypeAnnotation\",\n          RhinoErrorReporter.MISPLACED_TYPE_ANNOTATION);",
        "begin_line": 277,
        "end_line": 279,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.SUSPICIOUS_CODE",
        "snippet": "  public static final DiagnosticGroup SUSPICIOUS_CODE =\n      DiagnosticGroups.registerGroup(\"suspiciousCode\",\n          CheckSuspiciousCode.SUSPICIOUS_SEMICOLON,\n          CheckSuspiciousCode.SUSPICIOUS_COMPARISON_WITH_NAN,\n          CheckSuspiciousCode.SUSPICIOUS_IN_OPERATOR);",
        "begin_line": 281,
        "end_line": 285,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WarningsGuard.value",
        "snippet": "    final int value;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.modules",
        "snippet": "  private List<JSModule> modules;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.modulesByDepth",
        "snippet": "  private List<List<JSModule>> modulesByDepth;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Lists of modules at each depth. <code>modulesByDepth.get(3)</code> is a\n   * list of the modules at depth 3, for example.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.dependencyMap",
        "snippet": "  private Map<JSModule, Set<JSModule>> dependencyMap = Maps.newHashMap();",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n   * dependencyMap is a cache of dependencies that makes the dependsOn\n   * function faster.  Each map entry associates a starting\n   * JSModule with the set of JSModules that are transitively dependent on the\n   * starting module.\n   *\n   * If the cache returns null, then the entry hasn't been filled in for that\n   * module.\n   *\n   * dependencyMap should be filled from leaf to root so that\n   * getTransitiveDepsDeepestFirst can use its results directly.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1;",
        "begin_line": 522,
        "end_line": 522,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 524,
        "end_line": 524,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ModuleDependenceException",
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "signature": "com.google.javascript.jscomp.ModuleDependenceException.dependentModule",
        "snippet": "    private final JSModule dependentModule;",
        "begin_line": 525,
        "end_line": 525,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 42,
        "end_line": 42,
        "comment": "\n   * Whether to parse the descriptions of JsDoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.isIdeMode",
        "snippet": "  final boolean isIdeMode;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n   * Whether we're in IDE mode.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationNames",
        "snippet": "  final Map<String, Annotation> annotationNames;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n   * Recognized JSDoc annotations, mapped from their name to their internal\n   * representation.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.suppressionNames",
        "snippet": "  final Set<String> suppressionNames;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n   * Recognized names in a {@code @suppress} tag.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.languageMode",
        "snippet": "  final LanguageMode languageMode;",
        "begin_line": 63,
        "end_line": 63,
        "comment": "\n   * Accept ECMAScript5 syntax, such as getter/setter.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.acceptConstKeyword",
        "snippet": "  final boolean acceptConstKeyword;",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * Accept `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType CIRCULAR_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_CIRCULAR_DEP\",\n          \"Circular dependency detected: {0}\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.name",
        "snippet": "  private final String name;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Module name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.inputs",
        "snippet": "  private final List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Source code inputs "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.deps",
        "snippet": "  private final List<JSModule> deps = new ArrayList<JSModule>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Modules that this module depends on "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.depth",
        "snippet": "  private int depth;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer.replacements",
        "snippet": "  private final TemplateTypeMap replacements;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer.visitedTypes",
        "snippet": "  private ArrayDeque<TemplateType> visitedTypes;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.baseType",
        "snippet": "    JSTypeExpression baseType = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " Function information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.extendedInterfaces",
        "snippet": "    List<JSTypeExpression> extendedInterfaces = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.implementedInterfaces",
        "snippet": "    List<JSTypeExpression> implementedInterfaces = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.parameters",
        "snippet": "    Map<String, JSTypeExpression> parameters = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.thrownTypes",
        "snippet": "    List<JSTypeExpression> thrownTypes = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.templateTypeNames",
        "snippet": "    ImmutableList<String> templateTypeNames = null;",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.disposedParameters",
        "snippet": "    Set<String> disposedParameters = null;",
        "begin_line": 97,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.description",
        "snippet": "    String description = null;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Other information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.meaning",
        "snippet": "    String meaning = null;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.deprecated",
        "snippet": "    String deprecated = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.license",
        "snippet": "    String license = null;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.suppressions",
        "snippet": "    Set<String> suppressions = null;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.modifies",
        "snippet": "    Set<String> modifies = null;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.lendsName",
        "snippet": "    String lendsName = null;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.ngInject",
        "snippet": "    boolean ngInject = false;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.wizaction",
        "snippet": "    boolean wizaction = false;",
        "begin_line": 111,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.jaggerInject",
        "snippet": "    boolean jaggerInject = false;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Tags for Jagger dependency injection prototype"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.jaggerProvide",
        "snippet": "    boolean jaggerProvide = false;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.jaggerModule",
        "snippet": "    boolean jaggerModule = false;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sourceComment",
        "snippet": "    String sourceComment = null;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.markers",
        "snippet": "    List<Marker> markers = null;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.parameters",
        "snippet": "    Map<String, String> parameters = null;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.throwsDescriptions",
        "snippet": "    Map<JSTypeExpression, String> throwsDescriptions = null;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.blockDescription",
        "snippet": "    String blockDescription = null;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.fileOverview",
        "snippet": "    String fileOverview = null;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.returnDescription",
        "snippet": "    String returnDescription = null;",
        "begin_line": 127,
        "end_line": 127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.version",
        "snippet": "    String version = null;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.authors",
        "snippet": "    List<String> authors = null;",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sees",
        "snippet": "    List<String> sees = null;",
        "begin_line": 131,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TypePosition",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.TypePosition.brackets",
        "snippet": "    private boolean brackets = false;",
        "begin_line": 166,
        "end_line": 166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.annotation",
        "snippet": "    private TrimmedStringPosition annotation = null;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.name",
        "snippet": "    private TrimmedStringPosition name = null;",
        "begin_line": 190,
        "end_line": 190,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.nameNode",
        "snippet": "    private SourcePosition<Node> nameNode = null;",
        "begin_line": 191,
        "end_line": 191,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.description",
        "snippet": "    private StringPosition description = null;",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.type",
        "snippet": "    private TypePosition type = null;",
        "begin_line": 193,
        "end_line": 193,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.info",
        "snippet": "  private LazilyInitializedInfo info = null;",
        "begin_line": 257,
        "end_line": 257,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.documentation",
        "snippet": "  private LazilyInitializedDocumentation documentation = null;",
        "begin_line": 259,
        "end_line": 259,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.associatedNode",
        "snippet": "  private Node associatedNode = null;",
        "begin_line": 262,
        "end_line": 262,
        "comment": " The Node this JSDoc is associated with."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.visibility",
        "snippet": "  private Visibility visibility = null;",
        "begin_line": 264,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.bitset",
        "snippet": "  private int bitset = 0x00;",
        "begin_line": 277,
        "end_line": 277,
        "comment": "\n   * The {@link #isConstant()}, {@link #isConstructor()}, {@link #isInterface},\n   * {@link #isHidden()} and {@link #shouldPreserveTry()} flags as well as\n   * whether the {@link #type} field stores a value for {@link #getType()},\n   * {@link #getReturnType()} or {@link #getEnumParameterType()}.\n   *\n   * @see #setFlag(boolean, int)\n   * @see #getFlag(int)\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.type",
        "snippet": "  private JSTypeExpression type = null;",
        "begin_line": 287,
        "end_line": 287,
        "comment": "\n   * The type for {@link #getType()}, {@link #getReturnType()} or\n   * {@link #getEnumParameterType()}. The knowledge of which one is recorded is\n   * stored in the {@link #bitset} field.\n   *\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.thisType",
        "snippet": "  private JSTypeExpression thisType = null;",
        "begin_line": 292,
        "end_line": 292,
        "comment": "\n   * The type for {@link #getThisType()}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.includeDocumentation",
        "snippet": "  private boolean includeDocumentation = false;",
        "begin_line": 299,
        "end_line": 299,
        "comment": "\n   * Whether to include documentation.\n   *\n   * @see JSDocInfo.LazilyInitializedDocumentation\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.originalCommentPosition",
        "snippet": "  private int originalCommentPosition;",
        "begin_line": 304,
        "end_line": 304,
        "comment": "\n   * Position of the original comment.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FLAGS",
        "snippet": "  private static final int MASK_FLAGS       = 0x3FFFFFFF;",
        "begin_line": 311,
        "end_line": 311,
        "comment": " Mask all the boolean annotation types"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTANT",
        "snippet": "  private static final int MASK_CONSTANT      = 0x00000001; // @const",
        "begin_line": 313,
        "end_line": 313,
        "comment": " @const"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTRUCTOR",
        "snippet": "  private static final int MASK_CONSTRUCTOR   = 0x00000002; // @constructor",
        "begin_line": 314,
        "end_line": 314,
        "comment": " @constructor"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEFINE",
        "snippet": "  private static final int MASK_DEFINE        = 0x00000004; // @define",
        "begin_line": 315,
        "end_line": 315,
        "comment": " @define"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_HIDDEN",
        "snippet": "  private static final int MASK_HIDDEN        = 0x00000008; // @hidden",
        "begin_line": 316,
        "end_line": 316,
        "comment": " @hidden"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_PRESERVETRY",
        "snippet": "  private static final int MASK_PRESERVETRY   = 0x00000010; // @preserveTry",
        "begin_line": 317,
        "end_line": 317,
        "comment": " @preserveTry"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCHECK",
        "snippet": "  private static final int MASK_NOCHECK       = 0x00000020; // @notypecheck",
        "begin_line": 318,
        "end_line": 318,
        "comment": " @notypecheck"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_OVERRIDE",
        "snippet": "  private static final int MASK_OVERRIDE      = 0x00000040; // @override",
        "begin_line": 319,
        "end_line": 319,
        "comment": " @override"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOALIAS",
        "snippet": "  private static final int MASK_NOALIAS       = 0x00000080; // @noalias",
        "begin_line": 320,
        "end_line": 320,
        "comment": " @noalias"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEPRECATED",
        "snippet": "  private static final int MASK_DEPRECATED    = 0x00000100; // @deprecated",
        "begin_line": 321,
        "end_line": 321,
        "comment": " @deprecated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_INTERFACE",
        "snippet": "  private static final int MASK_INTERFACE     = 0x00000200; // @interface",
        "begin_line": 322,
        "end_line": 322,
        "comment": " @interface"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPORT",
        "snippet": "  private static final int MASK_EXPORT        = 0x00000400; // @export",
        "begin_line": 323,
        "end_line": 323,
        "comment": " @export"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSHADOW",
        "snippet": "  private static final int MASK_NOSHADOW      = 0x00000800; // @noshadow",
        "begin_line": 324,
        "end_line": 324,
        "comment": " @noshadow"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FILEOVERVIEW",
        "snippet": "  private static final int MASK_FILEOVERVIEW  = 0x00001000; // @fileoverview",
        "begin_line": 325,
        "end_line": 325,
        "comment": " @fileoverview"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IMPLICITCAST",
        "snippet": "  private static final int MASK_IMPLICITCAST  = 0x00002000; // @implicitCast",
        "begin_line": 326,
        "end_line": 326,
        "comment": " @implicitCast"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSIDEEFFECTS",
        "snippet": "  private static final int MASK_NOSIDEEFFECTS = 0x00004000; // @nosideeffects",
        "begin_line": 327,
        "end_line": 327,
        "comment": " @nosideeffects"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXTERNS",
        "snippet": "  private static final int MASK_EXTERNS       = 0x00008000; // @externs",
        "begin_line": 328,
        "end_line": 328,
        "comment": " @externs"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_JAVADISPATCH",
        "snippet": "  private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispatch",
        "begin_line": 329,
        "end_line": 329,
        "comment": " @javadispatch"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCOMPILE",
        "snippet": "  private static final int MASK_NOCOMPILE     = 0x00020000; // @nocompile",
        "begin_line": 330,
        "end_line": 330,
        "comment": " @nocompile"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSISTIDGEN",
        "snippet": "  private static final int MASK_CONSISTIDGEN  = 0x00040000; // @consistentIdGenerator",
        "begin_line": 331,
        "end_line": 331,
        "comment": " @consistentIdGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IDGEN",
        "snippet": "  private static final int MASK_IDGEN         = 0x00080000; // @idGenerator",
        "begin_line": 332,
        "end_line": 332,
        "comment": " @idGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPOSE",
        "snippet": "  private static final int MASK_EXPOSE        = 0x00100000; // @expose",
        "begin_line": 333,
        "end_line": 333,
        "comment": " @expose"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_STRUCT",
        "snippet": "  private static final int MASK_STRUCT        = 0x00200000; // @struct",
        "begin_line": 334,
        "end_line": 334,
        "comment": " @struct"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DICT",
        "snippet": "  private static final int MASK_DICT          = 0x00400000; // @dict",
        "begin_line": 335,
        "end_line": 335,
        "comment": " @dict"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_STALBEIDGEN",
        "snippet": "  private static final int MASK_STALBEIDGEN   = 0x00800000; // @stableIdGenerator",
        "begin_line": 336,
        "end_line": 336,
        "comment": " @stableIdGenerator"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_MAPPEDIDGEN",
        "snippet": "  private static final int MASK_MAPPEDIDGEN   = 0x01000000; // @idGenerator {mapped}",
        "begin_line": 337,
        "end_line": 337,
        "comment": " @idGenerator {mapped}"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_TYPEFIELD",
        "snippet": "  private static final int MASK_TYPEFIELD    = 0xE0000000; // 1110...",
        "begin_line": 341,
        "end_line": 341,
        "comment": " 1110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPE",
        "snippet": "  private static final int TYPEFIELD_TYPE    = 0x20000000; // 0010...",
        "begin_line": 342,
        "end_line": 342,
        "comment": " 0010..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_RETURN",
        "snippet": "  private static final int TYPEFIELD_RETURN  = 0x40000000; // 0100...",
        "begin_line": 343,
        "end_line": 343,
        "comment": " 0100..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_ENUM",
        "snippet": "  private static final int TYPEFIELD_ENUM    = 0x60000000; // 0110...",
        "begin_line": 344,
        "end_line": 344,
        "comment": " 0110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPEDEF",
        "snippet": "  private static final int TYPEFIELD_TYPEDEF = 0x80000000; // 1000...",
        "begin_line": 345,
        "end_line": 345,
        "comment": " 1000..."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_SAME_AS_INPUT_ERROR",
        "snippet": "  static final DiagnosticType OUTPUT_SAME_AS_INPUT_ERROR = DiagnosticType.error(\n      \"JSC_OUTPUT_SAME_AS_INPUT_ERROR\",\n      \"Bad output file (already listed as input file): {0}\");",
        "begin_line": 96,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.NO_TREE_GENERATED_ERROR",
        "snippet": "  static final DiagnosticType NO_TREE_GENERATED_ERROR = DiagnosticType.error(\n      \"JSC_NO_TREE_GENERATED_ERROR\",\n      \"Code contains errors. No tree was generated.\");",
        "begin_line": 99,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.config",
        "snippet": "  private final CommandLineConfig config;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.defaultJsOutput",
        "snippet": "  private final PrintStream defaultJsOutput;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.err",
        "snippet": "  private final PrintStream err;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.compiler",
        "snippet": "  private A compiler;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset",
        "snippet": "  private Charset inputCharset;",
        "begin_line": 109,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputCharset2",
        "snippet": "  private Charset outputCharset2;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " designed this if I had a time machine."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.legacyOutputCharset",
        "snippet": "  private String legacyOutputCharset;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.testMode",
        "snippet": "  private boolean testMode = false;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.externsSupplierForTesting",
        "snippet": "  private Supplier<List<SourceFile>> externsSupplierForTesting = null;",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.inputsSupplierForTesting",
        "snippet": "  private Supplier<List<SourceFile>> inputsSupplierForTesting = null;",
        "begin_line": 123,
        "end_line": 123,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.modulesSupplierForTesting",
        "snippet": "  private Supplier<List<JSModule>> modulesSupplierForTesting = null;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.exitCodeReceiverForTesting",
        "snippet": "  private Function<Integer, Boolean> exitCodeReceiverForTesting = null;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.rootRelativePathsMap",
        "snippet": "  private Map<String, String> rootRelativePathsMap = null;",
        "begin_line": 126,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.parsedModuleWrappers",
        "snippet": "  private Map<String, String> parsedModuleWrappers = null;",
        "begin_line": 128,
        "end_line": 128,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_MARKER",
        "snippet": "  private static final String OUTPUT_MARKER = \"%output%\";",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_MARKER_JS_STRING",
        "snippet": "  private static final String OUTPUT_MARKER_JS_STRING = \"%output|jsstring%\";",
        "begin_line": 131,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlagUsageException",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.FlagUsageException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 401,
        "end_line": 401,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printTree",
        "snippet": "    private boolean printTree = false;",
        "begin_line": 1535,
        "end_line": 1535,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printAst",
        "snippet": "    private boolean printAst = false;",
        "begin_line": 1543,
        "end_line": 1543,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printPassGraph",
        "snippet": "    private boolean printPassGraph = false;",
        "begin_line": 1554,
        "end_line": 1554,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jscompDevMode",
        "snippet": "    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
        "begin_line": 1562,
        "end_line": 1562,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.loggingLevel",
        "snippet": "    private String loggingLevel = Level.WARNING.getName();",
        "begin_line": 1570,
        "end_line": 1570,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.externs",
        "snippet": "    private final List<String> externs = Lists.newArrayList();",
        "begin_line": 1582,
        "end_line": 1582,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.js",
        "snippet": "    private final List<String> js = Lists.newArrayList();",
        "begin_line": 1593,
        "end_line": 1593,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jsOutputFile",
        "snippet": "    private String jsOutputFile = \"\";",
        "begin_line": 1604,
        "end_line": 1604,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.module",
        "snippet": "    private final List<String> module = Lists.newArrayList();",
        "begin_line": 1614,
        "end_line": 1614,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapInputFile",
        "snippet": "    private String variableMapInputFile = \"\";",
        "begin_line": 1630,
        "end_line": 1630,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapInputFile",
        "snippet": "    private String propertyMapInputFile = \"\";",
        "begin_line": 1641,
        "end_line": 1641,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapOutputFile",
        "snippet": "    private String variableMapOutputFile = \"\";",
        "begin_line": 1652,
        "end_line": 1652,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createNameMapFiles",
        "snippet": "    private boolean createNameMapFiles = false;",
        "begin_line": 1663,
        "end_line": 1663,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapOutputFile",
        "snippet": "    private String propertyMapOutputFile = \"\";",
        "begin_line": 1677,
        "end_line": 1677,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.codingConvention",
        "snippet": "    private CodingConvention codingConvention = CodingConventions.getDefault();",
        "begin_line": 1688,
        "end_line": 1688,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.summaryDetailLevel",
        "snippet": "    private int summaryDetailLevel = 1;",
        "begin_line": 1698,
        "end_line": 1698,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputWrapper",
        "snippet": "    private String outputWrapper = \"\";",
        "begin_line": 1712,
        "end_line": 1712,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleWrapper",
        "snippet": "    private final List<String> moduleWrapper = Lists.newArrayList();",
        "begin_line": 1723,
        "end_line": 1723,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleOutputPathPrefix",
        "snippet": "    private String moduleOutputPathPrefix = \"\";",
        "begin_line": 1735,
        "end_line": 1735,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createSourceMap",
        "snippet": "    private String createSourceMap = \"\";",
        "begin_line": 1747,
        "end_line": 1747,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.sourceMapDetailLevel",
        "snippet": "    private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
        "begin_line": 1761,
        "end_line": 1762,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.sourceMapFormat",
        "snippet": "    private SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 1772,
        "end_line": 1773,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.warningGuards",
        "snippet": "    private WarningGuardSpec warningGuards = null;",
        "begin_line": 1783,
        "end_line": 1783,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.define",
        "snippet": "    private final List<String> define = Lists.newArrayList();",
        "begin_line": 1793,
        "end_line": 1793,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.tweak",
        "snippet": "    private final List<String> tweak = Lists.newArrayList();",
        "begin_line": 1808,
        "end_line": 1808,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.tweakProcessing",
        "snippet": "    private TweakProcessing tweakProcessing = TweakProcessing.OFF;",
        "begin_line": 1822,
        "end_line": 1822,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.charset",
        "snippet": "    private String charset = \"\";",
        "begin_line": 1832,
        "end_line": 1832,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.manageClosureDependencies",
        "snippet": "    private boolean manageClosureDependencies = false;",
        "begin_line": 1842,
        "end_line": 1842,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.onlyClosureDependencies",
        "snippet": "    private boolean onlyClosureDependencies = false;",
        "begin_line": 1853,
        "end_line": 1853,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.closureEntryPoints",
        "snippet": "    private List<String> closureEntryPoints = ImmutableList.of();",
        "begin_line": 1865,
        "end_line": 1865,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputManifests",
        "snippet": "    private List<String> outputManifests = ImmutableList.of();",
        "begin_line": 1877,
        "end_line": 1877,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputModuleDependencies",
        "snippet": "    private String outputModuleDependencies = null;",
        "begin_line": 1894,
        "end_line": 1894,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputBundles",
        "snippet": "    private List<String> outputBundles = ImmutableList.of();",
        "begin_line": 1906,
        "end_line": 1906,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.acceptConstKeyword",
        "snippet": "    private boolean acceptConstKeyword = false;",
        "begin_line": 1916,
        "end_line": 1916,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.languageIn",
        "snippet": "    private String languageIn = \"\";",
        "begin_line": 1926,
        "end_line": 1926,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.skipNormalOutputs",
        "snippet": "    private boolean skipNormalOutputs = false;",
        "begin_line": 1937,
        "end_line": 1937,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.manifestMaps",
        "snippet": "    private List<String> manifestMaps = ImmutableList.of();",
        "begin_line": 1947,
        "end_line": 1947,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.transformAMDToCJSModules",
        "snippet": "    private boolean transformAMDToCJSModules = false;",
        "begin_line": 1958,
        "end_line": 1958,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.processCommonJSModules",
        "snippet": "    private boolean processCommonJSModules = false;",
        "begin_line": 1969,
        "end_line": 1969,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.commonJSModulePathPrefix",
        "snippet": "    private String commonJSModulePathPrefix =\n        ProcessCommonJSModules.DEFAULT_FILENAME_PREFIX;",
        "begin_line": 1981,
        "end_line": 1982,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.warningsWhitelistFile",
        "snippet": "    private String warningsWhitelistFile = \"\";",
        "begin_line": 1993,
        "end_line": 1993,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.angularPass",
        "snippet": "    private boolean angularPass = false;",
        "begin_line": 2003,
        "end_line": 2003,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.tracerMode",
        "snippet": "    private CompilerOptions.TracerMode tracerMode =\n        CompilerOptions.TracerMode.OFF;",
        "begin_line": 2013,
        "end_line": 2014,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Entry",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Entry.level",
        "snippet": "      private final CheckLevel level;",
        "begin_line": 2028,
        "end_line": 2028,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Entry",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Entry.groupName",
        "snippet": "      private final String groupName;",
        "begin_line": 2029,
        "end_line": 2029,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSpec",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSpec.entries",
        "snippet": "    private final List<Entry> entries = Lists.newArrayList();",
        "begin_line": 2038,
        "end_line": 2038,
        "comment": " The entries, in the order that they were added."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.options",
        "snippet": "  final CompilerOptions options;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Used by subclasses in this package."
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.typedScopeCreator",
        "snippet": "  private MemoizedScopeCreator typedScopeCreator;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n   * A memoized version of scopeCreator. It must be memoized so that\n   * we can make two separate passes over the AST, one for inferring types\n   * and one for checking types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.internalScopeCreator",
        "snippet": "  private TypedScopeCreator internalScopeCreator;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n   * This is the scope creator that {@code TypedScopeCreator} delegates to.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.topScope",
        "snippet": "  Scope topScope = null;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The global typed scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfigDelegate",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfigDelegate.delegate",
        "snippet": "    private final PassConfig delegate;",
        "begin_line": 246,
        "end_line": 246,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 282,
        "end_line": 282,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.cssNames",
        "snippet": "    final Map<String, Integer> cssNames;",
        "begin_line": 284,
        "end_line": 284,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.exportedNames",
        "snippet": "    final Set<String> exportedNames;",
        "begin_line": 285,
        "end_line": 285,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.crossModuleIdGenerator",
        "snippet": "    final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.variableMap",
        "snippet": "    final VariableMap variableMap;",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.propertyMap",
        "snippet": "    final VariableMap propertyMap;",
        "begin_line": 288,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.anonymousFunctionNameMap",
        "snippet": "    final VariableMap anonymousFunctionNameMap;",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.stringMap",
        "snippet": "    final VariableMap stringMap;",
        "begin_line": 290,
        "end_line": 290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.functionNames",
        "snippet": "    final FunctionNames functionNames;",
        "begin_line": 291,
        "end_line": 291,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.idGeneratorMap",
        "snippet": "    final String idGeneratorMap;",
        "begin_line": 292,
        "end_line": 292,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.implicitReturn",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> implicitReturn;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n   * A special node marked by the node value key null to a singleton\n   * \"return\" when control is transferred outside of the current control flow\n   * graph.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.entry",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> entry;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scope",
        "snippet": "  private Scope scope;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.inputId",
        "snippet": "  private InputId inputId;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.redeclarationHandler",
        "snippet": "  private final RedeclarationHandler redeclarationHandler;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 39,
        "end_line": 39,
        "comment": " scope, but not explicitly declared."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.module",
        "snippet": "  private JSModule module;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Info about where the file lives."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.id",
        "snippet": "  private final InputId id;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.ast",
        "snippet": "  private final SourceAst ast;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.provides",
        "snippet": "  private final Set<String> provides = Sets.newHashSet();",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Provided and required symbols."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.requires",
        "snippet": "  private final Set<String> requires = Sets.newHashSet();",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.generatedDependencyInfoFromSource",
        "snippet": "  private boolean generatedDependencyInfoFromSource = false;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.compiler",
        "snippet": "  private transient AbstractCompiler compiler;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " We do not want to persist this across serialized state."
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.provides",
        "snippet": "    private final List<String> provides = Lists.newArrayList();",
        "begin_line": 254,
        "end_line": 254,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.requires",
        "snippet": "    private final List<String> requires = Lists.newArrayList();",
        "begin_line": 255,
        "end_line": 255,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.codingConvention",
        "snippet": "    private final CodingConvention codingConvention =\n        new ClosureCodingConvention();",
        "begin_line": 256,
        "end_line": 257,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.messages",
        "snippet": "  private final SortedSet<ErrorWithLevel> messages =\n      Sets.newTreeSet(new LeveledJSErrorComparator());",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.errorCount",
        "snippet": "  private int errorCount = 0;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.warningCount",
        "snippet": "  private int warningCount = 0;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.typedPercent",
        "snippet": "  private double typedPercent = 0.0;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_LT_P2",
        "snippet": "    private static final int P1_LT_P2 = -1;",
        "begin_line": 124,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_GT_P2",
        "snippet": "    private static final int P1_GT_P2 = 1;",
        "begin_line": 125,
        "end_line": 125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.error",
        "snippet": "    final JSError error;",
        "begin_line": 182,
        "end_line": 182,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.logger",
        "snippet": "  private static Logger logger = Logger.getLogger(JsFileParser.class.getName());",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.GOOG_PROVIDE_REQUIRE_PATTERN",
        "snippet": "  private static final Pattern GOOG_PROVIDE_REQUIRE_PATTERN = Pattern.compile(\n      \"(?:^|;)\\\\s*goog\\\\.(provide|require|addDependency)\\\\s*\\\\((.*?)\\\\)\");",
        "begin_line": 43,
        "end_line": 44,
        "comment": " Pattern for matching goog.provide(*) and goog.require(*). "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.BASE_JS_START",
        "snippet": "  private static final String BASE_JS_START = \"var COMPILED = false;\";",
        "begin_line": 47,
        "end_line": 47,
        "comment": " The first non-comment line of base.js "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.googMatcher",
        "snippet": "  private Matcher googMatcher = GOOG_PROVIDE_REQUIRE_PATTERN.matcher(\"\");",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Matchers used in the parsing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.provides",
        "snippet": "  private List<String> provides;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The info for the file we are currently parsing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.requires",
        "snippet": "  private List<String> requires;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.fileHasProvidesOrRequires",
        "snippet": "  private boolean fileHasProvidesOrRequires;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.includeGoogBase",
        "snippet": "  private boolean includeGoogBase = false;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Whether to provide/require the root namespace. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.OBJECT_INDEX_TEMPLATE",
        "snippet": "  public static final String OBJECT_INDEX_TEMPLATE = \"Object#Key\";",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n   * The name associated with the template variable corresponding to the\n   * property key type of the built-in Javascript object.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.objectIndexTemplateKey",
        "snippet": "  private TemplateType objectIndexTemplateKey;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.OBJECT_ELEMENT_TEMPLATE",
        "snippet": "  public static final String OBJECT_ELEMENT_TEMPLATE = \"Object#Element\";",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * The name associated with the template variable corresponding to the\n   * property value type for Javascript Objects and Arrays.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.objectElementTemplateKey",
        "snippet": "  private TemplateType objectElementTemplateKey;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.PROPERTY_CHECKING_UNION_SIZE",
        "snippet": "  private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n   * The UnionTypeBuilder caps the maximum number of alternate types it\n   * remembers and then defaults to \"?\" (unknown type). By default this max\n   * is 20, but it's very easy for the same property to appear on more than 20\n   * types. Use larger unions for property checking. 3000 was picked\n   * semi-randomly for use by the Google+ FE project.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nonNullableTypeNames",
        "snippet": "  private final Set<String> nonNullableTypeNames = new HashSet<String>();",
        "begin_line": 135,
        "end_line": 135,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 140,
        "end_line": 140,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, UnionTypeBuilder> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 144,
        "end_line": 145,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.eachRefTypeIndexedByProperty",
        "snippet": "  private final Map<String, Map<String, ObjectType>>\n      eachRefTypeIndexedByProperty = Maps.newHashMap();",
        "begin_line": 150,
        "end_line": 151,
        "comment": " for de-duping."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 156,
        "end_line": 157,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      LinkedHashMultimap.create();",
        "begin_line": 160,
        "end_line": 161,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 164,
        "end_line": 165,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 168,
        "end_line": 169,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypes",
        "snippet": "  private final Map<String, TemplateType> templateTypes = Maps.newHashMap();",
        "begin_line": 175,
        "end_line": 175,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.emptyTemplateTypeMap",
        "snippet": "  private final TemplateTypeMap emptyTemplateTypeMap;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " there are no template types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.tolerateUndefinedValues",
        "snippet": "  private final boolean tolerateUndefinedValues;",
        "begin_line": 181,
        "end_line": 181,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 530,
        "end_line": 530,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    }
]