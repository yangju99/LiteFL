[
    {
        "name": "JsMessageVisitor.MalformedException#938",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MalformedException.MalformedException(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "    MalformedException(String message, Node node) {\n      super(message);\n      this.node = node;\n    }\n",
        "begin_line": 938,
        "end_line": 941,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessageVisitor.getNode#943",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.MalformedException.getNode()",
        "snippet": "    Node getNode() {\n      return node;\n    }\n",
        "begin_line": 943,
        "end_line": 945,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessageVisitor.visit#195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal traversal, Node node, Node parent) {\n    String messageKey;\n    boolean isVar;\n    Node msgNode, msgNodeParent;\n\n    switch (node.getType()) {\n      case Token.NAME:\n        // var MSG_HELLO = 'Message'\n        if ((parent != null) && (parent.isVar())) {\n          messageKey = node.getString();\n          isVar = true;\n        } else {\n          return;\n        }\n\n        msgNode = node.getFirstChild();\n        msgNodeParent = node;\n        break;\n      case Token.ASSIGN:\n        // somenamespace.someclass.MSG_HELLO = 'Message'\n        isVar = false;\n\n        Node getProp = node.getFirstChild();\n        if (!getProp.isGetProp()) {\n          return;\n        }\n\n        Node propNode = getProp.getLastChild();\n\n        messageKey = propNode.getString();\n        msgNode = node.getLastChild();\n        msgNodeParent = node;\n        break;\n      case Token.CALL:\n        // goog.getMsg()\n        String fnName = node.getFirstChild().getQualifiedName();\n        if (MSG_FUNCTION_NAME.equals(fnName)) {\n          googMsgNodes.put(node, traversal.getSourceName());\n        } else if (MSG_FALLBACK_FUNCTION_NAME.equals(fnName)) {\n          visitFallbackFunctionCall(traversal, node);\n        }\n        return;\n      default:\n        return;\n    }\n\n    // Is this a message name?\n    boolean isNewStyleMessage =\n        msgNode != null && msgNode.isCall();\n    if (!isMessageName(messageKey, isNewStyleMessage)) {\n      return;\n    }\n\n    if (msgNode == null) {\n      compiler.report(\n          traversal.makeError(node, MESSAGE_HAS_NO_VALUE, messageKey));\n      return;\n    }\n\n    // Just report a warning if a qualified messageKey that looks like a message\n    // (e.g. \"a.b.MSG_X\") doesn't use goog.getMsg().\n    if (isNewStyleMessage) {\n      googMsgNodes.remove(msgNode);\n    } else if (style != JsMessage.Style.LEGACY) {\n      compiler.report(traversal.makeError(node, checkLevel,\n          MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX));\n    }\n\n    boolean isUnnamedMsg = isUnnamedMessageName(messageKey);\n\n    Builder builder = new Builder(\n        isUnnamedMsg ? null : messageKey);\n    builder.setSourceName(traversal.getSourceName());\n\n    try {\n      if (isVar) {\n        extractMessageFromVariable(builder, node, parent, parent.getParent());\n      } else {\n        extractMessageFromProperty(builder, node.getFirstChild(), node);\n      }\n    } catch (MalformedException ex) {\n      compiler.report(traversal.makeError(ex.getNode(),\n          MESSAGE_TREE_MALFORMED, ex.getMessage()));\n      return;\n    }\n\n    JsMessage extractedMessage = builder.build(idGenerator);\n\n    // If asked to check named internal messages.\n    if (needToCheckDuplications\n        && !isUnnamedMsg\n        && !extractedMessage.isExternal()) {\n      checkIfMessageDuplicated(messageKey, msgNode);\n    }\n    trackMessage(traversal, extractedMessage,\n        messageKey, msgNode, isUnnamedMsg);\n\n    if (extractedMessage.isEmpty()) {\n      // value of the message is an empty string. Translators do not like it.\n      compiler.report(traversal.makeError(node, MESSAGE_HAS_NO_TEXT,\n          messageKey));\n    }\n\n    // New-style messages must have descriptions. We don't emit a warning\n    // for legacy-style messages, because there are thousands of\n    // them in legacy code that are not worth the effort to fix, since they've\n    // already been translated anyway.\n    String desc = extractedMessage.getDesc();\n    if (isNewStyleMessage\n        && (desc == null || desc.trim().isEmpty())\n        && !extractedMessage.isExternal()) {\n      compiler.report(traversal.makeError(node, MESSAGE_HAS_NO_DESCRIPTION,\n          messageKey));\n    }\n\n    JsMessageDefinition msgDefinition = new JsMessageDefinition(\n        node, msgNode, msgNodeParent);\n    processJsMessage(extractedMessage, msgDefinition);\n  }\n",
        "begin_line": 195,
        "end_line": 314,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessageVisitor.extractMessageFromVariable#383",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.extractMessageFromVariable(com.google.javascript.jscomp.JsMessage.Builder, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void extractMessageFromVariable(\n      Builder builder, Node nameNode, Node parentNode,\n      @Nullable Node grandParentNode) throws MalformedException {\n\n    // Determine the message's value\n    Node valueNode = nameNode.getFirstChild();\n    switch (valueNode.getType()) {\n      case Token.STRING:\n      case Token.ADD:\n        maybeInitMetaDataFromJsDocOrHelpVar(builder, parentNode,\n            grandParentNode);\n        builder.appendStringPart(extractStringFromStringExprNode(valueNode));\n        break;\n      case Token.FUNCTION:\n        maybeInitMetaDataFromJsDocOrHelpVar(builder, parentNode,\n            grandParentNode);\n        extractFromFunctionNode(builder, valueNode);\n        break;\n      case Token.CALL:\n        maybeInitMetaDataFromJsDoc(builder, parentNode);\n        extractFromCallNode(builder, valueNode);\n        break;\n      default:\n        throw new MalformedException(\"Cannot parse value of message \"\n            + builder.getKey(), valueNode);\n    }\n  }\n",
        "begin_line": 383,
        "end_line": 409,
        "comment": "\n   * Creates a {@link JsMessage} for a JS message defined using a JS variable\n   * declaration (e.g <code>var MSG_X = ...;</code>).\n   *\n   * @param builder the message builder\n   * @param nameNode a NAME node for a JS message variable\n   * @param parentNode a VAR node, parent of {@code nameNode}\n   * @param grandParentNode the grandparent of {@code nameNode}. This node is\n   *        only used to get meta data about the message that might be\n   *        surrounding it (e.g. a message description). This argument may be\n   *        null if the meta data is not needed.\n   * @throws MalformedException if {@code varNode} does not\n   *         correspond to a valid JS message VAR node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.compare#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.LeveledJSErrorComparator.compare(com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel, com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel)",
        "snippet": "    @Override\n    public int compare(ErrorWithLevel p1, ErrorWithLevel p2) {\n      // null is the smallest value\n      if (p2 == null) {\n        if (p1 == null) {\n          return 0;\n        } else {\n          return P1_GT_P2;\n        }\n      }\n\n      // check level\n      if (p1.level != p2.level) {\n        return p2.level.compareTo(p1.level);\n      }\n\n      // sourceName comparison\n      String source1 = p1.error.sourceName;\n      String source2 = p2.error.sourceName;\n      if (source1 != null && source2 != null) {\n        int sourceCompare = source1.compareTo(source2);\n        if (sourceCompare != 0) {\n          return sourceCompare;\n        }\n      } else if (source1 == null && source2 != null) {\n        return P1_LT_P2;\n      } else if (source1 != null && source2 == null) {\n        return P1_GT_P2;\n      }\n      // lineno comparison\n      int lineno1 = p1.error.lineNumber;\n      int lineno2 = p2.error.lineNumber;\n      if (lineno1 != lineno2) {\n        return lineno1 - lineno2;\n      } else if (lineno1 < 0 && 0 <= lineno2) {\n        return P1_LT_P2;\n      } else if (0 <= lineno1 && lineno2 < 0) {\n        return P1_GT_P2;\n      }\n      // charno comparison\n      int charno1 = p1.error.getCharno();\n      int charno2 = p2.error.getCharno();\n      if (charno1 != charno2) {\n        return charno1 - charno2;\n      } else if (charno1 < 0 && 0 <= charno2) {\n        return P1_LT_P2;\n      } else if (0 <= charno1 && charno2 < 0) {\n        return P1_GT_P2;\n      }\n      // description\n      return p1.error.description.compareTo(p2.error.description);\n    }\n",
        "begin_line": 127,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.isDescriptionRecorded#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isDescriptionRecorded()",
        "snippet": "  public boolean isDescriptionRecorded() {\n    return currentInfo.getDescription() != null;\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n   * Returns whether this builder recorded a description.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markText#176",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markText(java.lang.String, int, int, int, int)",
        "snippet": "  public void markText(String text, int startLineno, int startCharno,\n      int endLineno, int endCharno) {\n    if (currentMarker != null) {\n      JSDocInfo.StringPosition position = new JSDocInfo.StringPosition();\n      position.setItem(text);\n      position.setPositionInformation(startLineno, startCharno,\n          endLineno, endCharno);\n      currentMarker.setDescription(position);\n    }\n  }\n",
        "begin_line": 176,
        "end_line": 185,
        "comment": "\n   * Adds a textual block to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordDescription#644",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordDescription(java.lang.String)",
        "snippet": "  public boolean recordDescription(String description) {\n    if (description != null && currentInfo.getDescription() == null) {\n      currentInfo.setDescription(description);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 644,
        "end_line": 652,
        "comment": "\n   * Records a description giving context for translation (i18n).\n   *\n   * @return {@code true} if the description was recorded and {@code false}\n   *     if the description was invalid or was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getDescription#1210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getDescription()",
        "snippet": "  public String getDescription() {\n    return (info == null) ? null : info.description;\n  }\n",
        "begin_line": 1210,
        "end_line": 1212,
        "comment": "\n   * Gets the description specified by the {@code @desc} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setDescription#1214",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setDescription(java.lang.String)",
        "snippet": "  void setDescription(String desc) {\n    lazyInitInfo();\n    info.description = desc;\n  }\n",
        "begin_line": 1214,
        "end_line": 1217,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAnnotation#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAnnotation(com.google.javascript.jscomp.parsing.JsDocToken, java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo>)",
        "snippet": "  private JsDocToken parseAnnotation(JsDocToken token,\n      List<ExtendedTypeInfo> extendedTypes) {\n    // JSTypes are represented as Rhino AST nodes, and then resolved later.\n    JSTypeExpression type;\n    int lineno = stream.getLineno();\n    int charno = stream.getCharno();\n\n    String annotationName = stream.getString();\n    Annotation annotation = annotationNames.get(annotationName);\n    if (annotation == null) {\n      parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n          stream.getLineno(), stream.getCharno());\n    } else {\n      // Mark the beginning of the annotation.\n      jsdocBuilder.markAnnotation(annotationName, lineno, charno);\n\n      switch (annotation) {\n        case NG_INJECT:\n          if (jsdocBuilder.isNgInjectRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.nginject.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordNgInject(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_INJECT:\n          if (jsdocBuilder.isJaggerInjectRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerInject.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerInject(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_MODULE:\n          if (jsdocBuilder.isJaggerModuleRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerModule.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerModule(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAGGER_PROVIDE:\n          if (jsdocBuilder.isJaggerProvideRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.jaggerProvide.extra\",\n              stream.getLineno(), stream.getCharno());\n          } else {\n            jsdocBuilder.recordJaggerProvide(true);\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case AUTHOR:\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo authorInfo = extractSingleLineBlock();\n            String author = authorInfo.string;\n\n            if (author.length() == 0) {\n              parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              jsdocBuilder.addAuthor(author);\n            }\n            token = authorInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case CONSISTENTIDGENERATOR:\n          if (!jsdocBuilder.recordConsistentIdGenerator()) {\n            parser.addParserWarning(\"msg.jsdoc.consistidgen\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case STRUCT:\n          if (!jsdocBuilder.recordStruct()) {\n            parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DICT:\n          if (!jsdocBuilder.recordDict()) {\n            parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                                  stream.getLineno(),\n                                  stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case CONSTRUCTOR:\n          if (!jsdocBuilder.recordConstructor()) {\n            if (jsdocBuilder.isInterfaceRecorded()) {\n              parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DEPRECATED:\n          if (!jsdocBuilder.recordDeprecated()) {\n            parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          // Find the reason/description, if any.\n          ExtractionInfo reasonInfo =\n              extractMultilineTextualBlock(token);\n\n          String reason = reasonInfo.string;\n\n          if (reason.length() > 0) {\n            jsdocBuilder.recordDeprecationReason(reason);\n          }\n\n          token = reasonInfo.token;\n          return token;\n\n        case INTERFACE:\n          if (!jsdocBuilder.recordInterface()) {\n            if (jsdocBuilder.isConstructorRecorded()) {\n              parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DESC:\n          if (jsdocBuilder.isDescriptionRecorded()) {\n            parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                stream.getLineno(), stream.getCharno());\n            return eatUntilEOLIfNotAnnotation();\n          } else {\n            ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String description = descriptionInfo.string;\n\n            jsdocBuilder.recordDescription(description);\n            token = descriptionInfo.token;\n            return token;\n          }\n\n        case FILE_OVERVIEW:\n          String fileOverview = \"\";\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo fileOverviewInfo =\n                extractMultilineTextualBlock(token,\n                    WhitespaceOption.TRIM);\n\n            fileOverview = fileOverviewInfo.string;\n\n            token = fileOverviewInfo.token;\n          } else {\n            token = eatTokensUntilEOL(token);\n          }\n\n          if (!jsdocBuilder.recordFileOverview(fileOverview)) {\n            parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return token;\n\n        case LICENSE:\n        case PRESERVE:\n          ExtractionInfo preserveInfo =\n              extractMultilineTextualBlock(token,\n                                           WhitespaceOption.PRESERVE);\n\n          String preserve = preserveInfo.string;\n\n          if (preserve.length() > 0) {\n            if (fileLevelJsDocBuilder != null) {\n              fileLevelJsDocBuilder.append(preserve);\n            }\n          }\n\n          token = preserveInfo.token;\n          return token;\n\n        case ENUM:\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n\n          type = null;\n          if (token != JsDocToken.EOL && token != JsDocToken.EOC) {\n            type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));\n          }\n\n          if (type == null) {\n            type = createJSTypeExpression(newStringNode(\"number\"));\n          }\n          if (!jsdocBuilder.recordEnumParameterType(type)) {\n            parser.addTypeWarning(\n                \"msg.jsdoc.incompat.type\", lineno, charno);\n          }\n          token = eatUntilEOLIfNotAnnotation(token);\n          return token;\n\n        case EXPORT:\n          if (!jsdocBuilder.recordExport()) {\n            parser.addParserWarning(\"msg.jsdoc.export\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXPOSE:\n          if (!jsdocBuilder.recordExpose()) {\n            parser.addParserWarning(\"msg.jsdoc.expose\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXTERNS:\n          if (!jsdocBuilder.recordExterns()) {\n            parser.addParserWarning(\"msg.jsdoc.externs\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case JAVA_DISPATCH:\n          if (!jsdocBuilder.recordJavaDispatch()) {\n            parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case EXTENDS:\n        case IMPLEMENTS:\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          boolean matchingRc = false;\n\n          if (token == JsDocToken.LC) {\n            token = next();\n            matchingRc = true;\n          }\n\n          if (token == JsDocToken.STRING) {\n            Node typeNode = parseAndRecordTypeNameNode(\n                token, lineno, charno, matchingRc);\n\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n\n            typeNode = wrapNode(Token.BANG, typeNode);\n            type = createJSTypeExpression(typeNode);\n\n            if (annotation == Annotation.EXTENDS) {\n              // record the extended type, check later\n              extendedTypes.add(new ExtendedTypeInfo(\n                  type, stream.getLineno(), stream.getCharno()));\n            } else {\n              Preconditions.checkState(\n                  annotation == Annotation.IMPLEMENTS);\n              if (!jsdocBuilder.recordImplementedInterface(type)) {\n                parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                    lineno, charno);\n              }\n            }\n            token = next();\n            if (matchingRc) {\n              if (token != JsDocToken.RC) {\n                parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                    stream.getLineno(), stream.getCharno());\n              } else {\n                token = next();\n              }\n            } else if (token != JsDocToken.EOL &&\n                token != JsDocToken.EOF && token != JsDocToken.EOC) {\n              parser.addTypeWarning(\"msg.end.annotation.expected\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          } else {\n            parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n          }\n          token = eatUntilEOLIfNotAnnotation(token);\n          return token;\n\n        case HIDDEN:\n          if (!jsdocBuilder.recordHiddenness()) {\n            parser.addParserWarning(\"msg.jsdoc.hidden\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case LENDS:\n          skipEOLs();\n\n          matchingRc = false;\n          if (match(JsDocToken.LC)) {\n            token = next();\n            matchingRc = true;\n          }\n\n          if (match(JsDocToken.STRING)) {\n            token = next();\n            if (!jsdocBuilder.recordLends(stream.getString())) {\n              parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          } else {\n            parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          if (matchingRc && !match(JsDocToken.RC)) {\n            parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case MEANING:\n          ExtractionInfo meaningInfo =\n              extractMultilineTextualBlock(token);\n          String meaning = meaningInfo.string;\n          token = meaningInfo.token;\n          if (!jsdocBuilder.recordMeaning(meaning)) {\n            parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return token;\n\n        case NO_ALIAS:\n          if (!jsdocBuilder.recordNoAlias()) {\n            parser.addParserWarning(\"msg.jsdoc.noalias\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_COMPILE:\n          if (!jsdocBuilder.recordNoCompile()) {\n            parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_TYPE_CHECK:\n          if (!jsdocBuilder.recordNoTypeCheck()) {\n            parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NOT_IMPLEMENTED:\n          return eatUntilEOLIfNotAnnotation();\n\n        case INHERIT_DOC:\n        case OVERRIDE:\n          if (!jsdocBuilder.recordOverride()) {\n            parser.addTypeWarning(\"msg.jsdoc.override\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case THROWS: {\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          type = null;\n\n          if (token == JsDocToken.LC) {\n            type = createJSTypeExpression(\n                parseAndRecordTypeNode(token));\n\n            if (type == null) {\n              // parsing error reported during recursive descent\n              // recovering parsing\n              return eatUntilEOLIfNotAnnotation();\n            }\n          }\n\n          // *Update* the token to that after the type annotation.\n          token = current();\n\n          // Save the throw type.\n          jsdocBuilder.recordThrowType(type);\n\n          boolean isAnnotationNext = lookAheadForAnnotation();\n\n          // Find the throw's description (if applicable).\n          if (jsdocBuilder.shouldParseDocumentation() && !isAnnotationNext) {\n            ExtractionInfo descriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String description = descriptionInfo.string;\n\n            if (description.length() > 0) {\n              jsdocBuilder.recordThrowDescription(type, description);\n            }\n\n            token = descriptionInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n        }\n\n        case PARAM:\n          skipEOLs();\n          token = next();\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n          type = null;\n\n          if (token == JsDocToken.LC) {\n            type = createJSTypeExpression(\n                parseAndRecordParamTypeNode(token));\n\n            if (type == null) {\n              // parsing error reported during recursive descent\n              // recovering parsing\n              return eatUntilEOLIfNotAnnotation();\n            }\n            skipEOLs();\n            token = next();\n            lineno = stream.getLineno();\n            charno = stream.getCharno();\n          }\n\n          String name = null;\n          boolean isBracketedParam = JsDocToken.LB == token;\n          if (isBracketedParam) {\n            token = next();\n          }\n\n          if (JsDocToken.STRING != token) {\n            parser.addTypeWarning(\"msg.missing.variable.name\",\n                lineno, charno);\n          } else {\n            name = stream.getString();\n\n            if (isBracketedParam) {\n              token = next();\n\n              // Throw out JsDocToolkit's \"default\" parameter\n              // annotation.  It makes no sense under our type\n              // system.\n              if (JsDocToken.EQUALS == token) {\n                token = next();\n                if (JsDocToken.STRING == token) {\n                  token = next();\n                }\n              }\n\n              if (JsDocToken.RB != token) {\n                reportTypeSyntaxWarning(\"msg.jsdoc.missing.rb\");\n              } else if (type != null) {\n                // Make the type expression optional, if it isn't\n                // already.\n                type = JSTypeExpression.makeOptionalArg(type);\n              }\n            }\n\n            // If the param name has a DOT in it, just throw it out\n            // quietly. We do not handle the JsDocToolkit method\n            // for handling properties of params.\n            if (name.indexOf('.') > -1) {\n              name = null;\n            } else if (!jsdocBuilder.recordParameter(name, type)) {\n              if (jsdocBuilder.hasParameter(name)) {\n                parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                    lineno, charno);\n              } else {\n                parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                    lineno, charno);\n              }\n            }\n          }\n\n          if (name == null) {\n            token = eatUntilEOLIfNotAnnotation(token);\n            return token;\n          }\n\n          jsdocBuilder.markName(name, sourceFile, lineno, charno);\n\n          // Find the parameter's description (if applicable).\n          if (jsdocBuilder.shouldParseDocumentation()\n              && token != JsDocToken.ANNOTATION) {\n            ExtractionInfo paramDescriptionInfo =\n                extractMultilineTextualBlock(token);\n\n            String paramDescription = paramDescriptionInfo.string;\n\n            if (paramDescription.length() > 0) {\n              jsdocBuilder.recordParameterDescription(name,\n                  paramDescription);\n            }\n\n            token = paramDescriptionInfo.token;\n          } else if (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case PRESERVE_TRY:\n          if (!jsdocBuilder.recordPreserveTry()) {\n            parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_SHADOW:\n          if (!jsdocBuilder.recordNoShadow()) {\n            parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case NO_SIDE_EFFECTS:\n          if (!jsdocBuilder.recordNoSideEffects()) {\n            parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case MODIFIES:\n          token = parseModifiesTag(next());\n          return token;\n\n        case IMPLICIT_CAST:\n          if (!jsdocBuilder.recordImplicitCast()) {\n            parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case SEE:\n          if (jsdocBuilder.shouldParseDocumentation()) {\n            ExtractionInfo referenceInfo = extractSingleLineBlock();\n            String reference = referenceInfo.string;\n\n            if (reference.length() == 0) {\n              parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                  stream.getLineno(), stream.getCharno());\n            } else {\n              jsdocBuilder.addReference(reference);\n            }\n\n            token = referenceInfo.token;\n          } else {\n            token = eatUntilEOLIfNotAnnotation();\n          }\n          return token;\n\n        case STABLEIDGENERATOR:\n          if (!jsdocBuilder.recordStableIdGenerator()) {\n            parser.addParserWarning(\"msg.jsdoc.stableidgen\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case SUPPRESS:\n          token = parseSuppressTag(next());\n          return token;\n\n        case TEMPLATE: {\n          ExtractionInfo templateInfo = extractSingleLineBlock();\n          List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));\n\n          if (names.size() == 0 || names.get(0).length() == 0) {\n            parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                  stream.getLineno(), stream.getCharno());\n          } else if (!jsdocBuilder.recordTemplateTypeNames(names)) {\n            parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          token = templateInfo.token;\n          return token;\n        }\n\n        case IDGENERATOR:\n          token = parseIdGeneratorTag(next());\n          return token;\n\n        case WIZACTION:\n          if (!jsdocBuilder.recordWizaction()) {\n            parser.addParserWarning(\"msg.jsdoc.wizaction\",\n              stream.getLineno(), stream.getCharno());\n          }\n          return eatUntilEOLIfNotAnnotation();\n\n        case DISPOSES: {\n          ExtractionInfo templateInfo = extractSingleLineBlock();\n          List<String> names = Lists.newArrayList(\n              Splitter.on(',')\n                  .trimResults()\n                  .split(templateInfo.string));\n\n          if (names.size() == 0 || names.get(0).length() == 0) {\n            parser.addTypeWarning(\"msg.jsdoc.disposeparameter.missing\",\n                  stream.getLineno(), stream.getCharno());\n          } else if (!jsdocBuilder.recordDisposesParameter(names)) {\n            parser.addTypeWarning(\"msg.jsdoc.disposeparameter.error\",\n                stream.getLineno(), stream.getCharno());\n          }\n\n          token = templateInfo.token;\n          return token;\n        }\n\n        case VERSION:\n          ExtractionInfo versionInfo = extractSingleLineBlock();\n          String version = versionInfo.string;\n\n          if (version.length() == 0) {\n            parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                  stream.getLineno(), stream.getCharno());\n          } else {\n            if (!jsdocBuilder.recordVersion(version)) {\n               parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                  stream.getLineno(), stream.getCharno());\n            }\n          }\n\n          token = versionInfo.token;\n          return token;\n\n        case CONSTANT:\n        case DEFINE:\n        case RETURN:\n        case PRIVATE:\n        case PROTECTED:\n        case PUBLIC:\n        case THIS:\n        case TYPE:\n        case TYPEDEF:\n          lineno = stream.getLineno();\n          charno = stream.getCharno();\n\n          Node typeNode = null;\n          boolean hasType = lookAheadForType();\n          boolean isAlternateTypeAnnotation =\n              (annotation == Annotation.PRIVATE ||\n               annotation == Annotation.PROTECTED ||\n               annotation == Annotation.PUBLIC ||\n               annotation == Annotation.CONSTANT);\n          boolean canSkipTypeAnnotation =\n              (isAlternateTypeAnnotation ||\n               annotation == Annotation.RETURN);\n          type = null;\n          if (hasType || !canSkipTypeAnnotation) {\n            skipEOLs();\n            token = next();\n            typeNode = parseAndRecordTypeNode(token);\n\n            if (annotation == Annotation.THIS) {\n              typeNode = wrapNode(Token.BANG, typeNode);\n            }\n            type = createJSTypeExpression(typeNode);\n          }\n\n          // The error was reported during recursive descent\n          // recovering parsing\n          boolean hasError = type == null && !canSkipTypeAnnotation;\n          if (!hasError) {\n            // Record types for @type.\n            // If the @private, @protected, or @public annotations\n            // have a type attached, pretend that they actually wrote:\n            // @type {type}\\n@private\n            // This will have some weird behavior in some cases\n            // (for example, @private can now be used as a type-cast),\n            // but should be mostly OK.\n            if ((type != null && isAlternateTypeAnnotation)\n                || annotation == Annotation.TYPE) {\n              if (!jsdocBuilder.recordType(type)) {\n                parser.addTypeWarning(\n                    \"msg.jsdoc.incompat.type\", lineno, charno);\n              }\n            }\n\n            switch (annotation) {\n              case CONSTANT:\n                if (!jsdocBuilder.recordConstancy()) {\n                  parser.addParserWarning(\"msg.jsdoc.const\",\n                      stream.getLineno(), stream.getCharno());\n                }\n                break;\n\n              case DEFINE:\n                if (!jsdocBuilder.recordDefineType(type)) {\n                  parser.addParserWarning(\"msg.jsdoc.define\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PRIVATE:\n                if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.private\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PROTECTED:\n                if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.protected\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case PUBLIC:\n                if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                  parser.addParserWarning(\n                      \"msg.jsdoc.visibility.public\",\n                      lineno, charno);\n                }\n                return recordDescription(token);\n\n              case RETURN:\n                if (type == null) {\n                  type = createJSTypeExpression(newNode(Token.QMARK));\n                }\n\n                if (!jsdocBuilder.recordReturnType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                  break;\n                }\n\n                // TODO(johnlenz): The extractMultilineTextualBlock method\n                // and friends look directly at the stream, regardless of\n                // last token read, so we don't want to read the first\n                // \"STRING\" out of the stream.\n\n                boolean isAnnotationNext = lookAheadForAnnotation();\n\n                // Find the return's description (if applicable).\n                if (jsdocBuilder.shouldParseDocumentation()\n                    && !isAnnotationNext) {\n                  ExtractionInfo returnDescriptionInfo =\n                      extractMultilineTextualBlock(token);\n\n                  String returnDescription =\n                      returnDescriptionInfo.string;\n\n                  if (returnDescription.length() > 0) {\n                    jsdocBuilder.recordReturnDescription(\n                        returnDescription);\n                  }\n\n                  token = returnDescriptionInfo.token;\n                } else {\n                  token = eatUntilEOLIfNotAnnotation();\n                }\n                return token;\n\n              case THIS:\n                if (!jsdocBuilder.recordThisType(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n\n              case TYPEDEF:\n                if (!jsdocBuilder.recordTypedef(type)) {\n                  parser.addTypeWarning(\n                      \"msg.jsdoc.incompat.type\", lineno, charno);\n                }\n                break;\n            }\n          }\n\n          return eatUntilEOLIfNotAnnotation();\n      }\n    }\n\n    return next();\n  }\n",
        "begin_line": 288,
        "end_line": 1076,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.extractMultilineTextualBlock#1500",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption)",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                      WhitespaceOption option) {\n\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n        token == JsDocToken.EOF) {\n      return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n      line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n    int lineStartChar = -1;\n\n    do {\n      switch (token) {\n        case STAR:\n          if (ignoreStar) {\n            // Mark the position after the star as the new start of the line.\n            lineStartChar = stream.getCharno() + 1;\n          } else {\n            // The star is part of the comment.\n            if (builder.length() > 0) {\n              builder.append(' ');\n            }\n\n            builder.append('*');\n          }\n\n          token = next();\n          continue;\n\n        case EOL:\n          if (option != WhitespaceOption.SINGLE_LINE) {\n            builder.append(\"\\n\");\n          }\n\n          ignoreStar = true;\n          lineStartChar = 0;\n          token = next();\n          continue;\n\n        default:\n          ignoreStar = false;\n          state = State.SEARCHING_ANNOTATION;\n\n          boolean isEOC = token == JsDocToken.EOC;\n          if (!isEOC) {\n            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {\n              int numSpaces = stream.getCharno() - lineStartChar;\n              for (int i = 0; i < numSpaces; i++) {\n                builder.append(' ');\n              }\n              lineStartChar = -1;\n            } else if (builder.length() > 0) {\n              // All tokens must be separated by a space.\n              builder.append(' ');\n            }\n          }\n\n          if (token == JsDocToken.EOC ||\n              token == JsDocToken.EOF ||\n              // When we're capturing a license block, annotations\n              // in the block are OK.\n              (token == JsDocToken.ANNOTATION &&\n               option != WhitespaceOption.PRESERVE)) {\n            String multilineText = builder.toString();\n\n            if (option != WhitespaceOption.PRESERVE) {\n              multilineText = multilineText.trim();\n            }\n\n            int endLineno = stream.getLineno();\n            int endCharno = stream.getCharno();\n\n            if (multilineText.length() > 0) {\n              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                  endLineno, endCharno);\n            }\n\n            return new ExtractionInfo(multilineText, token);\n          }\n\n          builder.append(toString(token));\n\n          line = getRemainingJSDocLine();\n\n          if (option != WhitespaceOption.PRESERVE) {\n            line = trimEnd(line);\n          }\n\n          builder.append(line);\n          token = next();\n      }\n    } while (true);\n  }\n",
        "begin_line": 1500,
        "end_line": 1613,
        "comment": "\n   * Extracts the text found on the current line and all subsequent\n   * until either an annotation, end of comment or end of file is reached.\n   * Note that if this method detects an end of line as the first token, it\n   * will quit immediately (indicating that there is no text where it was\n   * expected).  Note that token = info.token; should be called after this\n   * method is used to update the token properly in the parser.\n   *\n   * @param token The start token.\n   * @param option How to handle whitespace.\n   *\n   * @return The extraction information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessageVisitor.isUnnamedMessageName#863",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.isUnnamedMessageName(java.lang.String)",
        "snippet": "  private static boolean isUnnamedMessageName(String identifier) {\n    return MSG_UNNAMED_PATTERN.matcher(identifier).matches();\n  }\n",
        "begin_line": 863,
        "end_line": 865,
        "comment": "\n   * Returns whether the given message name is in the unnamed namespace.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessage.Builder#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "signature": "com.google.javascript.jscomp.JsMessage.Builder.Builder(java.lang.String)",
        "snippet": "    public Builder(String key) {\n      this.key = key;\n    }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": " Creates an instance. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessage.getKey#330",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "signature": "com.google.javascript.jscomp.JsMessage.Builder.getKey()",
        "snippet": "    public String getKey() {\n      return key;\n    }\n",
        "begin_line": 330,
        "end_line": 332,
        "comment": " Gets the message's key (e.g. {@code \"MSG_HELLO\"}). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessage.setSourceName#346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessage.java",
        "class_name": "com.google.javascript.jscomp.JsMessage",
        "signature": "com.google.javascript.jscomp.JsMessage.Builder.setSourceName(java.lang.String)",
        "snippet": "    public Builder setSourceName(String sourceName) {\n      this.sourceName = sourceName;\n      return this;\n    }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "\n     * @param sourceName The message's sourceName.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getRemainingJSDocLine#199",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getRemainingJSDocLine()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  String getRemainingJSDocLine() {\n    int c;\n    for (;;) {\n      c = getChar();\n      switch (c) {\n        case '*':\n          if (peekChar() != '/') {\n            addToString(c);\n            break;\n          }\n          // fall through\n        case EOF_CHAR:\n        case '\\n':\n          ungetChar(c);\n          this.string = getStringFromBuffer();\n          stringBufferTop = 0;\n          return this.string;\n\n        default:\n          addToString(c);\n          break;\n      }\n    }\n  }\n",
        "begin_line": 199,
        "end_line": 223,
        "comment": "\n   * Gets the remaining JSDoc line without the {@link JsDocToken#EOL},\n   * {@link JsDocToken#EOF} or {@link JsDocToken#EOC}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.update#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.update()",
        "snippet": "  void update() {\n    charno = getOffset();\n  }\n",
        "begin_line": 325,
        "end_line": 327,
        "comment": "\n   * Allows the JSDocParser to update the character offset\n   * so that getCharno() returns a valid character position.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.peekChar#329",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.peekChar()",
        "snippet": "  private int peekChar() {\n    int c = getChar();\n    ungetChar(c);\n    return c;\n  }\n",
        "begin_line": 329,
        "end_line": 333,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getCharIgnoreLineEnd#391",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharIgnoreLineEnd()",
        "snippet": "  private int getCharIgnoreLineEnd() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for (;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 391,
        "end_line": 435,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.ExtractionInfo#1423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo.ExtractionInfo(java.lang.String, com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "    public ExtractionInfo(String string, JsDocToken token) {\n      this.string = string;\n      this.token = token;\n    }\n",
        "begin_line": 1423,
        "end_line": 1426,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.extractMultilineTextualBlock#1469",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token) {\n    return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);\n  }\n",
        "begin_line": 1469,
        "end_line": 1471,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.getRemainingJSDocLine#2516",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getRemainingJSDocLine()",
        "snippet": "  private String getRemainingJSDocLine() {\n    String result = stream.getRemainingJSDocLine();\n    unreadToken = NO_UNREAD_TOKEN;\n    return result;\n  }\n",
        "begin_line": 2516,
        "end_line": 2520,
        "comment": "\n   * Returns the remainder of the line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.findLineOffsets#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.findLineOffsets()",
        "snippet": "  private void findLineOffsets() {\n    if (lineOffsets != null) {\n      return;\n    }\n    try {\n      String[] sourceLines = getCode().split(\"\\n\");\n      lineOffsets = new int[sourceLines.length];\n      for (int ii = 1; ii < sourceLines.length; ++ii) {\n        lineOffsets[ii] =\n            lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;\n      }\n    } catch (IOException e) {\n      lineOffsets = new int[1];\n      lineOffsets[0] = 0;\n    }\n  }\n",
        "begin_line": 106,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.makeError#707",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.makeError(com.google.javascript.rhino.Node, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public JSError makeError(Node n, CheckLevel level, DiagnosticType type,\n      String... arguments) {\n    return JSError.make(getBestSourceFileName(n), n, level, type, arguments);\n  }\n",
        "begin_line": 707,
        "end_line": 710,
        "comment": "\n   * Creates a JSError during NodeTraversal.\n   *\n   * @param n Determines the line and char position within the source file name\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.makeError#719",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.makeError(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public JSError makeError(Node n, DiagnosticType type, String... arguments) {\n    return JSError.make(getBestSourceFileName(n), n, type, arguments);\n  }\n",
        "begin_line": 719,
        "end_line": 721,
        "comment": "\n   * Creates a JSError during NodeTraversal.\n   *\n   * @param n Determines the line and char position within the source file name\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.make#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(String sourceName, Node n, CheckLevel level,\n      DiagnosticType type, String... arguments) {\n\n    return new JSError(sourceName, n, n.getLineno(), n.getCharno(), type, level,\n        arguments);\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Creates a JSError from a file and Node position.\n   *\n   * @param sourceName The source file name\n   * @param n Determines the line and char position within the source file name\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.process#205",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    progress = 0.0;\n    progressStep = 0.0;\n    if (progressRange != null) {\n      progressStep = (progressRange.maxValue - progressRange.initialValue)\n          / passes.size();\n      progress = progressRange.initialValue;\n    }\n    for (CompilerPass pass : passes) {\n      pass.process(externs, root);\n      if (hasHaltingErrors()) {\n        return;\n      }\n    }\n  }\n",
        "begin_line": 205,
        "end_line": 220,
        "comment": "\n   * Run all the passes in the optimizer.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.compileInternal#746",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compileInternal()",
        "snippet": "  private void compileInternal() {\n    setProgress(0.0, null);\n    parse();\n    // 15 percent of the work is assumed to be for parsing (based on some\n    // minimal analysis on big JS projects, of course this depends on options)\n    setProgress(0.15, \"parse\");\n    if (hasErrors()) {\n      return;\n    }\n\n    if (!precheck()) {\n      return;\n    }\n\n    if (options.nameAnonymousFunctionsOnly) {\n      // TODO(nicksantos): Move this into an instrument() phase maybe?\n      check();\n      return;\n    }\n\n    if (!options.skipAllPasses) {\n      check();\n      if (hasErrors()) {\n        return;\n      }\n\n      // IDE-mode is defined to stop here, before the heavy rewriting begins.\n      if (!options.ideMode) {\n        optimize();\n      }\n    }\n\n    if (options.recordFunctionInformation) {\n      recordFunctionInformation();\n    }\n\n    if (options.devMode == DevMode.START_AND_END) {\n      runSanityCheck();\n    }\n    setProgress(1.0, \"recordFunctionInformation\");\n  }\n",
        "begin_line": 746,
        "end_line": 786,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.check#836",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.check()",
        "snippet": "  public void check() {\n    runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);\n\n    // We are currently only interested in check-passes for progress reporting\n    // as it is used for IDEs, that's why the maximum progress is set to 1.0.\n    phaseOptimizer = new PhaseOptimizer(this, tracker,\n        new PhaseOptimizer.ProgressRange(getProgress(), 1.0));\n    if (options.devMode == DevMode.EVERY_PASS) {\n      phaseOptimizer.setSanityCheck(sanityCheck);\n    }\n    if (options.getCheckDeterminism()) {\n      phaseOptimizer.setPrintAstHashcodes(true);\n    }\n    phaseOptimizer.consume(getPassConfig().getChecks());\n    phaseOptimizer.process(externsRoot, jsRoot);\n    if (hasErrors()) {\n      return;\n    }\n\n    // TODO(nicksantos): clean this up. The flow here is too hard to follow.\n    if (options.nameAnonymousFunctionsOnly) {\n      return;\n    }\n\n    if (options.removeTryCatchFinally) {\n      removeTryCatchFinally();\n    }\n\n    if (options.getTweakProcessing().shouldStrip() ||\n        !options.stripTypes.isEmpty() ||\n        !options.stripNameSuffixes.isEmpty() ||\n        !options.stripTypePrefixes.isEmpty() ||\n        !options.stripNamePrefixes.isEmpty()) {\n      stripCode(options.stripTypes, options.stripNameSuffixes,\n          options.stripTypePrefixes, options.stripNamePrefixes);\n    }\n\n    runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n    phaseOptimizer = null;\n  }\n",
        "begin_line": 836,
        "end_line": 875,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessageVisitor.isMessageName#854",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.isMessageName(java.lang.String, boolean)",
        "snippet": "  boolean isMessageName(String identifier, boolean isNewStyleMessage) {\n    return identifier.startsWith(MSG_PREFIX) &&\n        (style == JsMessage.Style.CLOSURE || isNewStyleMessage ||\n         !identifier.endsWith(DESC_SUFFIX));\n  }\n",
        "begin_line": 854,
        "end_line": 858,
        "comment": "\n   * Returns whether the given JS identifier is a valid JS message name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "LightweightMessageFormatter.formatError#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.formatError(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public String formatError(JSError error) {\n    return format(error, false);\n  }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.format#187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.format(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.MessageFormatter)",
        "snippet": "  public String format(CheckLevel level, MessageFormatter formatter) {\n    switch (level) {\n      case ERROR:\n        return formatter.formatError(this);\n\n      case WARNING:\n        return formatter.formatWarning(this);\n\n      default:\n        return null;\n    }\n  }\n",
        "begin_line": 187,
        "end_line": 198,
        "comment": "\n   * Format a message at the given level.\n   *\n   * @return the formatted message or {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.getLevelName#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.getLevelName(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  String getLevelName(CheckLevel level) {\n    switch (level) {\n      case ERROR: return maybeColorize(\"ERROR\", Color.ERROR);\n      case WARNING: return maybeColorize(\"WARNING\", Color.WARNING);\n      default: return level.toString();\n    }\n  }\n",
        "begin_line": 72,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.report#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.report(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public void report(CheckLevel level, JSError error) {\n    if (messages.add(new ErrorWithLevel(error, level))) {\n      if (level == CheckLevel.ERROR) {\n        errorCount++;\n      } else if (level == CheckLevel.WARNING) {\n        warningCount++;\n      }\n    }\n  }\n",
        "begin_line": 43,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.25
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isRegExp#2389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isRegExp()",
        "snippet": "  public boolean isRegExp() {\n    return this.getType() == Token.REGEXP;\n  }\n",
        "begin_line": 2389,
        "end_line": 2391,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceMessages.ReplaceMessages#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceMessages.java",
        "class_name": "com.google.javascript.jscomp.ReplaceMessages",
        "signature": "com.google.javascript.jscomp.ReplaceMessages.ReplaceMessages(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.MessageBundle, boolean, com.google.javascript.jscomp.JsMessage.Style, boolean)",
        "snippet": "  ReplaceMessages(AbstractCompiler compiler, MessageBundle bundle,\n      boolean checkDuplicatedMessages, JsMessage.Style style,\n      boolean strictReplacement) {\n\n    super(compiler, checkDuplicatedMessages, style, bundle.idGenerator());\n\n    this.bundle = bundle;\n    this.strictReplacement = strictReplacement;\n  }\n",
        "begin_line": 40,
        "end_line": 48,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getSourceName#431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName()",
        "snippet": "  public String getSourceName() {\n    return sourceName;\n  }\n",
        "begin_line": 431,
        "end_line": 433,
        "comment": "\n   * Gets the current input source name.\n   *\n   * @return A string that may be empty, but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessageVisitor.JsMessageVisitor#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.JsMessageVisitor(com.google.javascript.jscomp.AbstractCompiler, boolean, com.google.javascript.jscomp.JsMessage.Style, com.google.javascript.jscomp.JsMessage.IdGenerator)",
        "snippet": "  JsMessageVisitor(AbstractCompiler compiler,\n      boolean needToCheckDuplications,\n      JsMessage.Style style, JsMessage.IdGenerator idGenerator) {\n\n    this.compiler = compiler;\n    this.needToCheckDuplications = needToCheckDuplications;\n    this.style = style;\n    this.idGenerator = idGenerator;\n\n    checkLevel = (style == JsMessage.Style.CLOSURE)\n        ? CheckLevel.ERROR : CheckLevel.WARNING;\n\n    // TODO(anatol): add flag that decides whether to process UNNAMED messages.\n    // Some projects would not want such functionality (unnamed) as they don't\n    // use SOY templates.\n  }\n",
        "begin_line": 168,
        "end_line": 183,
        "comment": "\n   * Creates JS message visitor.\n   *\n   * @param compiler the compiler instance\n   * @param needToCheckDuplications whether to check duplicated messages in\n   *        traversed\n   * @param style style that should be used during parsing\n   * @param idGenerator generator that used for creating unique ID for the\n   *        message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsMessageVisitor.process#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsMessageVisitor.java",
        "class_name": "com.google.javascript.jscomp.JsMessageVisitor",
        "signature": "com.google.javascript.jscomp.JsMessageVisitor.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    for (Map.Entry<Node, String> msgNode : googMsgNodes.entrySet()) {\n      compiler.report(JSError.make(msgNode.getValue(), msgNode.getKey(),\n          checkLevel, MESSAGE_NODE_IS_ORPHANED));\n    }\n  }\n",
        "begin_line": 185,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "EmptyMessageBundle.idGenerator#32",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/EmptyMessageBundle.java",
        "class_name": "com.google.javascript.jscomp.EmptyMessageBundle",
        "signature": "com.google.javascript.jscomp.EmptyMessageBundle.idGenerator()",
        "snippet": "  @Override\n  public IdGenerator idGenerator() {\n    return null;\n  }\n",
        "begin_line": 32,
        "end_line": 35,
        "comment": "\n   * Gets a dummy message ID generator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#1170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-dbecce0e-b89a-43a7-86ba-8732a2faf0e9.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      final CheckRegExp pass = new CheckRegExp(compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          compiler.setHasRegExpGlobalReferences(\n              pass.isGlobalRegExpPropertiesUsed());\n        }\n      };\n    }\n",
        "begin_line": 1170,
        "end_line": 1182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-4a439160-6c7f-4151-8b20-ddf80d721c2f.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          compiler.setHasRegExpGlobalReferences(\n              pass.isGlobalRegExpPropertiesUsed());\n        }\n",
        "begin_line": 1175,
        "end_line": 1180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#1023",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-adc222f5-0cd8-4974-9af7-a3969f46dbd7.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new ReplaceMessages(compiler,\n          options.messageBundle,\n          /* warn about message dupes */\n          true,\n          /* allow messages with goog.getMsg */\n          JsMessage.Style.CLOSURE,\n          /* if we can't find a translation, don't worry about it. */\n          false);\n    }\n",
        "begin_line": 1023,
        "end_line": 1033,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.getChecks#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getChecks()",
        "snippet": "  @Override\n  protected List<PassFactory> getChecks() {\n    List<PassFactory> checks = Lists.newArrayList();\n\n    checks.add(createEmptyPass(\"beforeStandardChecks\"));\n\n    if (options.closurePass) {\n      checks.add(closureGoogScopeAliases);\n      checks.add(closureRewriteGoogClass);\n    }\n\n    if (options.nameAnonymousFunctionsOnly) {\n      if (options.anonymousFunctionNaming ==\n          AnonymousFunctionNamingPolicy.MAPPED) {\n        checks.add(nameMappedAnonymousFunctions);\n      } else if (options.anonymousFunctionNaming ==\n          AnonymousFunctionNamingPolicy.UNMAPPED) {\n        checks.add(nameUnmappedAnonymousFunctions);\n      }\n      return checks;\n    }\n\n    if (options.jqueryPass) {\n      checks.add(jqueryAliases);\n    }\n\n    if (options.angularPass) {\n      checks.add(angularPass);\n    }\n\n    checks.add(checkSideEffects);\n\n    if (options.checkSuspiciousCode ||\n        options.enables(DiagnosticGroups.GLOBAL_THIS) ||\n        options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n      checks.add(suspiciousCode);\n    }\n\n    if (options.checkControlStructures\n        || options.enables(DiagnosticGroups.ES5_STRICT))  {\n      checks.add(checkControlStructures);\n    }\n\n    if (options.checkRequires.isOn()) {\n      checks.add(checkRequires);\n    }\n\n    if (options.checkProvides.isOn()) {\n      checks.add(checkProvides);\n    }\n\n    // The following passes are more like \"preprocessor\" passes.\n    // It's important that they run before most checking passes.\n    // Perhaps this method should be renamed?\n    if (options.generateExports) {\n      checks.add(generateExports);\n    }\n\n    if (options.exportTestFunctions) {\n      checks.add(exportTestFunctions);\n    }\n\n    if (options.closurePass) {\n      checks.add(closurePrimitives);\n    }\n\n    if (options.closurePass && options.checkMissingGetCssNameLevel.isOn()) {\n      checks.add(closureCheckGetCssName);\n    }\n\n    if (options.syntheticBlockStartMarker != null) {\n      // This pass must run before the first fold constants pass.\n      checks.add(createSyntheticBlocks);\n    }\n\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n      checks.add(checkRegExp);\n    }\n\n    if (options.aggressiveVarCheck.isOn()) {\n      checks.add(checkVariableReferences);\n    }\n\n    // This pass should run before types are assigned.\n    if (options.processObjectPropertyString) {\n      checks.add(objectPropertyStringPreprocess);\n    }\n\n    checks.add(createEmptyPass(\"beforeTypeChecking\"));\n\n    if (options.checkTypes || options.inferTypes) {\n      checks.add(resolveTypes);\n      checks.add(inferTypes);\n      if (options.checkTypes) {\n        checks.add(checkTypes);\n      } else {\n        checks.add(inferJsDocInfo);\n      }\n\n      // We assume that only IDE-mode clients will try to query the\n      // typed scope creator after the compile job.\n      if (!options.ideMode && !options.saveDataStructures) {\n        checks.add(clearTypedScopePass);\n      }\n    }\n\n    if (options.checkUnreachableCode.isOn() ||\n        (options.checkTypes && options.checkMissingReturn.isOn())) {\n      checks.add(checkControlFlow);\n    }\n\n    // CheckAccessControls only works if check types is on.\n    if (options.checkTypes &&\n        (options.enables(DiagnosticGroups.ACCESS_CONTROLS)\n         || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n      checks.add(checkAccessControls);\n    }\n\n    if (options.checkEventfulObjectDisposalPolicy !=\n        CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF) {\n      checks.add(checkEventfulObjectDisposal);\n    }\n\n    if (options.checkGlobalNamesLevel.isOn()) {\n      checks.add(checkGlobalNames);\n    }\n\n    if (options.enables(DiagnosticGroups.ES5_STRICT) || options.checkCaja) {\n      checks.add(checkStrictMode);\n    }\n\n    // Replace 'goog.getCssName' before processing defines but after the\n    // other checks have been done.\n    if (options.closurePass) {\n      checks.add(closureReplaceGetCssName);\n    }\n\n    // i18n\n    // If you want to customize the compiler to use a different i18n pass,\n    // you can create a PassConfig that calls replacePassFactory\n    // to replace this.\n    if (options.replaceMessagesWithChromeI18n) {\n      checks.add(replaceMessagesForChrome);\n    } else if (options.messageBundle != null) {\n      checks.add(replaceMessages);\n    }\n\n    if (options.getTweakProcessing().isOn()) {\n      checks.add(processTweaks);\n    }\n\n    // Defines in code always need to be processed.\n    checks.add(processDefines);\n\n    if (options.instrumentationTemplate != null ||\n        options.recordFunctionInformation) {\n      checks.add(computeFunctionNames);\n    }\n\n    if (options.nameReferenceGraphPath != null &&\n        !options.nameReferenceGraphPath.isEmpty()) {\n      checks.add(printNameReferenceGraph);\n    }\n\n    if (options.nameReferenceReportPath != null &&\n        !options.nameReferenceReportPath.isEmpty()) {\n      checks.add(printNameReferenceReport);\n    }\n\n    checks.add(createEmptyPass(\"afterStandardChecks\"));\n\n    assertAllOneTimePasses(checks);\n    return checks;\n  }\n",
        "begin_line": 198,
        "end_line": 372,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setInlineFunctions#1312",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineFunctions(com.google.javascript.jscomp.CompilerOptions.Reach)",
        "snippet": "  public void setInlineFunctions(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.inlineFunctions = true;\n        this.inlineLocalFunctions = true;\n        break;\n      case LOCAL_ONLY:\n        this.inlineFunctions = false;\n        this.inlineLocalFunctions = true;\n        break;\n      case NONE:\n        this.inlineFunctions = false;\n        this.inlineLocalFunctions = false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }\n",
        "begin_line": 1312,
        "end_line": 1329,
        "comment": "\n   * Set the function inlining policy for the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setInlineVariables#1334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setInlineVariables(com.google.javascript.jscomp.CompilerOptions.Reach)",
        "snippet": "  public void setInlineVariables(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.inlineVariables = true;\n        this.inlineLocalVariables = true;\n        break;\n      case LOCAL_ONLY:\n        this.inlineVariables = false;\n        this.inlineLocalVariables = true;\n        break;\n      case NONE:\n        this.inlineVariables = false;\n        this.inlineLocalVariables = false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }\n",
        "begin_line": 1334,
        "end_line": 1351,
        "comment": "\n   * Set the variable inlining policy for the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setRemoveUnusedVariables#1371",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setRemoveUnusedVariables(com.google.javascript.jscomp.CompilerOptions.Reach)",
        "snippet": "  public void setRemoveUnusedVariables(Reach reach) {\n    switch (reach) {\n      case ALL:\n        this.removeUnusedVars = true;\n        this.removeUnusedLocalVars = true;\n        break;\n      case LOCAL_ONLY:\n        this.removeUnusedVars = false;\n        this.removeUnusedLocalVars = true;\n        break;\n      case NONE:\n        this.removeUnusedVars = false;\n        this.removeUnusedLocalVars = false;\n        break;\n      default:\n        throw new IllegalStateException(\"unexpected\");\n    }\n  }\n",
        "begin_line": 1371,
        "end_line": 1388,
        "comment": "\n   * Set the variable removal policy for the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setHasRegExpGlobalReferences#2440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setHasRegExpGlobalReferences(boolean)",
        "snippet": "  @Override\n  void setHasRegExpGlobalReferences(boolean references) {\n    hasRegExpGlobalReferences = references;\n  }\n",
        "begin_line": 2440,
        "end_line": 2443,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilationLevel.setOptionsForCompilationLevel#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilationLevel.java",
        "class_name": "com.google.javascript.jscomp.CompilationLevel",
        "signature": "com.google.javascript.jscomp.CompilationLevel.setOptionsForCompilationLevel(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void setOptionsForCompilationLevel(CompilerOptions options) {\n    switch (this) {\n      case WHITESPACE_ONLY:\n        applyBasicCompilationOptions(options);\n        break;\n      case SIMPLE_OPTIMIZATIONS:\n        applySafeCompilationOptions(options);\n        break;\n      case ADVANCED_OPTIMIZATIONS:\n        applyFullCompilationOptions(options);\n        break;\n      default:\n        throw new RuntimeException(\"Unknown compilation level.\");\n    }\n  }\n",
        "begin_line": 53,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilationLevel.applyFullCompilationOptions#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilationLevel.java",
        "class_name": "com.google.javascript.jscomp.CompilationLevel",
        "signature": "com.google.javascript.jscomp.CompilationLevel.applyFullCompilationOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  private static void applyFullCompilationOptions(CompilerOptions options) {\n    // Do not call applySafeCompilationOptions(options) because the call can\n    // create possible conflicts between multiple diagnostic groups.\n\n    // All the safe optimizations.\n    options.dependencyOptions.setDependencySorting(true);\n    options.closurePass = true;\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n    options.deadAssignmentElimination = true;\n    options.extractPrototypeMemberDeclarations = true;\n    options.collapseVariableDeclarations = true;\n    options.convertToDottedProperties = true;\n    options.labelRenaming = true;\n    options.removeDeadCode = true;\n    options.optimizeArgumentsArray = true;\n    options.collapseObjectLiterals = true;\n    options.protectHiddenSideEffects = true;\n\n    // All the advanced optimizations.\n    options.removeClosureAsserts = true;\n    options.reserveRawExports = true;\n    options.setRenamingPolicy(\n        VariableRenamingPolicy.ALL, PropertyRenamingPolicy.ALL_UNQUOTED);\n    options.shadowVariables = true;\n    options.removeUnusedPrototypeProperties = true;\n    options.removeUnusedPrototypePropertiesInExterns = true;\n    options.removeUnusedClassProperties = true;\n    options.collapseAnonymousFunctions = true;\n    options.collapseProperties = true;\n    options.checkGlobalThisLevel = CheckLevel.WARNING;\n    options.rewriteFunctionExpressions = false;\n    options.smartNameRemoval = true;\n    options.inlineConstantVars = true;\n    options.setInlineFunctions(Reach.ALL);\n    options.setAssumeClosuresOnlyCaptureReferences(false);\n    options.inlineGetters = true;\n    options.setInlineVariables(Reach.ALL);\n    options.flowSensitiveInlineVariables = true;\n    options.computeFunctionSideEffects = true;\n\n    // Remove unused vars also removes unused functions.\n    options.setRemoveUnusedVariables(Reach.ALL);\n\n    // Move code around based on the defined modules.\n    options.crossModuleCodeMotion = true;\n    options.crossModuleMethodMotion = true;\n\n    // Call optimizations\n    options.devirtualizePrototypeMethods = true;\n    options.optimizeParameters = true;\n    options.optimizeReturns = true;\n    options.optimizeCalls = true;\n  }\n",
        "begin_line": 125,
        "end_line": 178,
        "comment": "\n   * Add the options that will work only if the user exported all the symbols\n   * correctly.\n   * @param options The CompilerOptions object to set the options on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.createOptions#805",
        "is_bug": true,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.createOptions()",
        "snippet": "  @Override\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.processJqueryPrimitives) {\n      options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n      options.setCodingConvention(new ClosureCodingConvention());\n    }\n\n    options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.useTypesForOptimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n\n    if (flags.generateExports) {\n      options.setGenerateExports(flags.generateExports);\n    }\n\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.processClosurePrimitives;\n\n    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n        flags.processJqueryPrimitives;\n\n    options.angularPass = flags.angularPass;\n\n    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n      // translations file, they might reasonably try to write their own\n      // implementation of goog.getMsg that makes the substitution at\n      // run-time.\n      //\n      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n      // so we might as well inline it. But shut off the i18n warnings,\n      // because the user didn't really ask for i18n.\n      options.messageBundle = new EmptyMessageBundle();\n    }\n\n    return options;\n  }\n",
        "begin_line": 805,
        "end_line": 865,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckRegExp.isGlobalRegExpPropertiesUsed#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "signature": "com.google.javascript.jscomp.CheckRegExp.isGlobalRegExpPropertiesUsed()",
        "snippet": "  public boolean isGlobalRegExpPropertiesUsed() {\n    return globalRegExpPropertiesUsed;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckRegExp.CheckRegExp#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "signature": "com.google.javascript.jscomp.CheckRegExp.CheckRegExp(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public CheckRegExp(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckRegExp.process#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "signature": "com.google.javascript.jscomp.CheckRegExp.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckRegExp.visit#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "signature": "com.google.javascript.jscomp.CheckRegExp.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isReferenceName(n)) {\n      String name = n.getString();\n      if (name.equals(\"RegExp\") && t.getScope().getVar(name) == null) {\n        int parentType = parent.getType();\n        boolean first = (n == parent.getFirstChild());\n        if (!((parentType == Token.NEW && first)\n            || (parentType == Token.CALL && first)\n            || (parentType == Token.INSTANCEOF && !first)\n            || parentType == Token.EQ || parentType == Token.NE\n            || parentType == Token.SHEQ || parentType == Token.SHNE\n            || parentType == Token.CASE\n            || (parentType == Token.GETPROP && first\n            && !REGEXP_PROPERTY_BLACKLIST.contains(\n            parent.getLastChild().getString())))) {\n          t.report(n, REGEXP_REFERENCE);\n          globalRegExpPropertiesUsed = true;\n        }\n      }\n\n    // Check the syntax of regular expression patterns.\n    } else if (n.isRegExp()) {\n      String pattern = n.getFirstChild().getString();\n      String flags = n.getChildCount() == 2\n          ? n.getLastChild().getString() : \"\";\n      try {\n        RegExpTree.parseRegExp(pattern, flags);\n      } catch (IllegalArgumentException ex) {\n        t.report(n, MALFORMED_REGEXP, ex.getMessage());\n      } catch (IndexOutOfBoundsException ex) {\n        t.report(n, MALFORMED_REGEXP, ex.getMessage());\n      }\n    }\n  }\n",
        "begin_line": 68,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsFileLineParser.doParse#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.doParse(java.lang.String, java.io.Reader)",
        "snippet": "  void doParse(String filePath, Reader fileContents) {\n    this.filePath = filePath;\n    parseSucceeded = true;\n\n    BufferedReader lineBuffer = new BufferedReader(fileContents);\n\n    // Parse all lines.\n    String line = null;\n    lineNum = 0;\n    boolean inMultilineComment = false;\n\n    try {\n      while (null != (line = lineBuffer.readLine())) {\n        ++lineNum;\n        try {\n          String revisedLine = line;\n          if (inMultilineComment) {\n            int endOfComment = revisedLine.indexOf(\"*/\");\n            if (endOfComment != -1) {\n              revisedLine = revisedLine.substring(endOfComment + 2);\n              inMultilineComment = false;\n            } else {\n              revisedLine = \"\";\n            }\n          }\n\n          if (!inMultilineComment) {\n            while (true) {\n              int startOfLineComment = revisedLine.indexOf(\"//\");\n              int startOfMultilineComment = revisedLine.indexOf(\"/*\");\n              if (startOfLineComment != -1 &&\n                  (startOfMultilineComment == -1 ||\n                   startOfLineComment < startOfMultilineComment)) {\n                revisedLine = revisedLine.substring(0, startOfLineComment);\n                break;\n              } else if (startOfMultilineComment != -1) {\n                int endOfMultilineComment = revisedLine.indexOf(\"*/\",\n                    startOfMultilineComment + 2);\n                if (endOfMultilineComment == -1) {\n                  revisedLine = revisedLine.substring(\n                      0, startOfMultilineComment);\n                  inMultilineComment = true;\n                  break;\n                } else {\n                  revisedLine =\n                      revisedLine.substring(0, startOfMultilineComment) +\n                      revisedLine.substring(endOfMultilineComment + 2);\n                }\n              } else {\n                break;\n              }\n            }\n          }\n\n          if (!revisedLine.isEmpty()) {\n            // This check for shortcut mode should be redundant, but\n            // it's done for safety reasons.\n            if (!parseLine(revisedLine) && shortcutMode) {\n              break;\n            }\n          }\n        } catch (ParseException e) {\n          // Inform the error handler of the exception.\n          errorManager.report(\n              e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING,\n              JSError.make(filePath, lineNum, 0 /* char offset */,\n                  e.isFatal() ? PARSE_ERROR : PARSE_WARNING,\n                  e.getMessage(), line));\n          parseSucceeded = parseSucceeded && !e.isFatal();\n        }\n      }\n    } catch (IOException e) {\n      errorManager.report(CheckLevel.ERROR,\n          JSError.make(filePath, 0, 0 /* char offset */,\n              PARSE_ERROR, \"Error reading file: \" + filePath));\n      parseSucceeded = false;\n    }\n  }\n",
        "begin_line": 119,
        "end_line": 196,
        "comment": "\n   * Performs the line-by-line parsing of the given fileContents. This method\n   * strips out JavaScript comments and then uses the abstract parseLine()\n   * method to do the line parsing.\n   *\n   * @param filePath The path to the file being parsed. Used for reporting parse\n   *     exceptions.\n   * @param fileContents A reader for the contents of the file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2182
        },
        "num_failing_tests": 1
    },
    {
        "name": "SuppressDocWarningsGuard.level#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    Node node = error.node;\n    if (node != null) {\n      boolean visitedFunction = false;\n      for (Node current = node;\n           current != null;\n           current = current.getParent()) {\n        int type = current.getType();\n        JSDocInfo info = null;\n\n        if (type == Token.FUNCTION) {\n          info = NodeUtil.getBestJSDocInfo(current);\n          visitedFunction = true;\n        } else if (type == Token.SCRIPT) {\n          info = current.getJSDocInfo();\n        } else if (current.isVar() || current.isAssign()) {\n          // There's one edge case we're worried about:\n          // if the warning points to an assigment to a function, we\n          // want the suppressions on that function to apply.\n          // It's OK if we double-count some cases.\n          Node rhs = NodeUtil.getRValueOfLValue(current.getFirstChild());\n          if (rhs != null) {\n            if (rhs.isCast()) {\n              rhs = rhs.getFirstChild();\n            }\n\n            if (rhs.isFunction() && !visitedFunction) {\n              info = NodeUtil.getBestJSDocInfo(current);\n            }\n          }\n        }\n\n        if (info != null) {\n          for (String suppressor : info.getSuppressions()) {\n            WarningsGuard guard = suppressors.get(suppressor);\n\n            // Some @suppress tags are for other tools, and\n            // may not have a warnings guard.\n            if (guard != null) {\n              CheckLevel newLevel = guard.level(error);\n              if (newLevel != null) {\n                return newLevel;\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 51,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrintStreamErrorManager.printSummary#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.printSummary()",
        "snippet": "  @Override\n  public void printSummary() {\n    if (summaryDetailLevel >= 3 ||\n        (summaryDetailLevel >= 1 && getErrorCount() + getWarningCount() > 0) ||\n        (summaryDetailLevel >= 2 && getTypedPercent() > 0.0)) {\n      if (getTypedPercent() > 0.0) {\n        stream.format(\"%d error(s), %d warning(s), %.1f%% typed%n\",\n            getErrorCount(), getWarningCount(), getTypedPercent());\n      } else {\n        stream.format(\"%d error(s), %d warning(s)%n\", getErrorCount(),\n            getWarningCount());\n      }\n    }\n  }\n",
        "begin_line": 63,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "LightweightMessageFormatter.format#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.format(com.google.javascript.jscomp.JSError, boolean)",
        "snippet": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      b.append(sourceExcerpt);\n      b.append('\\n');\n      int charno = error.getCharno();\n\n      // padding equal to the excerpt and arrow at the end\n      // charno == sourceExpert.length() means something is missing\n      // at the end of the line\n      if (excerpt.equals(LINE)\n          && 0 <= charno && charno <= sourceExcerpt.length()) {\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      }\n    }\n    return b.toString();\n  }\n",
        "begin_line": 68,
        "end_line": 113,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.toString#200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.toString()",
        "snippet": "  @Override\n  public String toString() {\n    // TODO(user): remove custom toString.\n    return type.key + \". \" + description + \" at \" +\n      (sourceName != null && sourceName.length() > 0 ?\n       sourceName : \"(unknown source)\") + \" line \" +\n      (lineNumber != -1 ? String.valueOf(lineNumber) : \"(unknown line)\") +\n      \" : \" + (charno != -1 ? String.valueOf(charno) : \"(unknown column)\");\n  }\n",
        "begin_line": 200,
        "end_line": 208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.getLine#215",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getLine(int)",
        "snippet": "  public String getLine(int lineNumber) {\n    findLineOffsets();\n    if (lineNumber > lineOffsets.length) {\n      return null;\n    }\n\n    if (lineNumber < 1) {\n      lineNumber = 1;\n    }\n\n    int pos = lineOffsets[lineNumber - 1];\n    String js = \"\";\n    try {\n      // NOTE(nicksantos): Right now, this is optimized for few warnings.\n      // This is probably the right trade-off, but will be slow if there\n      // are lots of warnings in one file.\n      js = getCode();\n    } catch (IOException e) {\n      return null;\n    }\n\n    if (js.indexOf('\\n', pos) == -1) {\n      // If next new line cannot be found, there are two cases\n      // 1. pos already reaches the end of file, then null should be returned\n      // 2. otherwise, return the contents between pos and the end of file.\n      if (pos >= js.length()) {\n        return null;\n      } else {\n        return js.substring(pos, js.length());\n      }\n    } else {\n      return js.substring(pos, js.indexOf('\\n', pos));\n    }\n  }\n",
        "begin_line": 215,
        "end_line": 248,
        "comment": "\n   * Gets the source line for the indicated line number.\n   *\n   * @param lineNumber the line number, 1 being the first line of the file.\n   * @return The line indicated. Does not include the newline at the end\n   *     of the file. Returns {@code null} if it does not exist,\n   *     or if there was an IO exception.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.make#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(String sourceName, Node n,\n                             DiagnosticType type, String... arguments) {\n    return new JSError(sourceName, n, type, arguments);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "\n   * Creates a JSError from a file and Node position.\n   *\n   * @param sourceName The source file name\n   * @param n Determines the line and char position within the source file name\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.JSError#169",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  private JSError(String sourceName, @Nullable Node node,\n                  DiagnosticType type, String... arguments) {\n    this(sourceName,\n         node,\n         (node != null) ? node.getLineno() : -1,\n         (node != null) ? node.getCharno() : -1,\n         type, null, arguments);\n  }\n",
        "begin_line": 169,
        "end_line": 176,
        "comment": "\n   * Creates a JSError for a source file location.  Private to avoid\n   * any entanglement with code outside of the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getSourceLine#2251",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getSourceLine(java.lang.String, int)",
        "snippet": "  @Override\n  public String getSourceLine(String sourceName, int lineNumber) {\n    if (lineNumber < 1) {\n      return null;\n    }\n    SourceFile input = getSourceFileByName(sourceName);\n    if (input != null) {\n      return input.getLine(lineNumber);\n    }\n    return null;\n  }\n",
        "begin_line": 2251,
        "end_line": 2261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.equals#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object obj) {\n    if (this == obj) return true;\n    if (obj == null) return false;\n    if (getClass() != obj.getClass()) return false;\n    return id.equals(((InputId) obj).id);\n  }\n",
        "begin_line": 64,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.reconcileOptionsWithGuards#318",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.reconcileOptionsWithGuards()",
        "snippet": "  protected void reconcileOptionsWithGuards() {\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn() &&\n        !options.disables(DiagnosticGroups.GLOBAL_THIS)) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(\n          DiagnosticGroups.ES5_STRICT,\n          CheckLevel.ERROR);\n    }\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to warn\n    // about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        !options.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      options.setWarningLevel(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n  }\n",
        "begin_line": 318,
        "end_line": 357,
        "comment": "\n   * When the CompilerOptions and its WarningsGuard overlap, reconcile\n   * any discrepencies.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getSourceFileByName#2238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getSourceFileByName(java.lang.String)",
        "snippet": "  @Override\n  SourceFile getSourceFileByName(String sourceName) {\n    // Here we assume that the source name is the input name, this\n    // is try of JavaScript parsed from source.\n    if (sourceName != null) {\n      CompilerInput input = inputsById.get(new InputId(sourceName));\n      if (input != null) {\n        return input.getSourceFile();\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 2238,
        "end_line": 2249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getBestSourceFileName#723",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getBestSourceFileName(com.google.javascript.rhino.Node)",
        "snippet": "  private String getBestSourceFileName(Node n) {\n    return n == null ? sourceName : n.getSourceFileName();\n  }\n",
        "begin_line": 723,
        "end_line": 725,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1715
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceExcerptProvider.get#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceExcerptProvider.java",
        "class_name": "com.google.javascript.jscomp.SourceExcerptProvider",
        "signature": "com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.get(com.google.javascript.jscomp.SourceExcerptProvider, java.lang.String, int, com.google.javascript.jscomp.SourceExcerptProvider.ExcerptFormatter)",
        "snippet": "      @Override\n      public String get(SourceExcerptProvider source, String sourceName,\n          int lineNumber, ExcerptFormatter formatter) {\n        return formatter.formatLine(\n            source.getSourceLine(sourceName, lineNumber), lineNumber);\n      }\n",
        "begin_line": 33,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrintStreamErrorManager.println#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public void println(CheckLevel level, JSError error) {\n    stream.println(error.format(level, formatter));\n  }\n",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "LightweightMessageFormatter.formatLine#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LineNumberingFormatter.formatLine(java.lang.String, int)",
        "snippet": "    @Override\n    public String formatLine(String line, int lineNumber) {\n      return line;\n    }\n",
        "begin_line": 123,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.generateReport#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.generateReport()",
        "snippet": "  @Override\n  public void generateReport() {\n    for (ErrorWithLevel message : messages) {\n      println(message.level, message.error);\n    }\n    printSummary();\n  }\n",
        "begin_line": 54,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getTypedPercent#98",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getTypedPercent()",
        "snippet": "  @Override\n  public double getTypedPercent() {\n    return typedPercent;\n  }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.Color#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.Color.Color(java.lang.String)",
        "snippet": "    Color(String controlCharacter) {\n      this.controlCharacter = controlCharacter;\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.getSource#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.getSource()",
        "snippet": "  protected final SourceExcerptProvider getSource() {\n    return source;\n  }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n   * Get the source excerpt provider.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.maybeColorize#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.maybeColorize(java.lang.String, com.google.javascript.jscomp.AbstractMessageFormatter.Color)",
        "snippet": "  private String maybeColorize(String text, Color color) {\n    if (!colorize) {\n      return text;\n    }\n    return color.getControlCharacter() +\n        text + Color.RESET.getControlCharacter();\n  }\n",
        "begin_line": 80,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.169
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.getCharno#213",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getCharno()",
        "snippet": "  public int getCharno() {\n    return charno;\n  }\n",
        "begin_line": 213,
        "end_line": 215,
        "comment": "\n   * Get the character number.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#846",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-7b853656-e557-4928-b4ff-2f6e1c69c531.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      List<Callback> sharedCallbacks = Lists.newArrayList();\n      if (options.checkSuspiciousCode) {\n        sharedCallbacks.add(new CheckSuspiciousCode());\n      }\n\n      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        sharedCallbacks.add(new CheckGlobalThis(compiler));\n      }\n\n      if (options.enables(DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT)) {\n        sharedCallbacks.add(new CheckDebuggerStatement(compiler));\n      }\n\n      return combineChecks(compiler, sharedCallbacks);\n    }\n",
        "begin_line": 846,
        "end_line": 862,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.report#2157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.report(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public void report(JSError error) {\n    CheckLevel level = error.getDefaultLevel();\n    if (warningsGuard != null) {\n      CheckLevel newLevel = warningsGuard.level(error);\n      if (newLevel != null) {\n        level = newLevel;\n      }\n    }\n\n    if (level.isOn()) {\n      if (getOptions().errorHandler != null) {\n        getOptions().errorHandler.report(level, error);\n      }\n      errorManager.report(level, error);\n    }\n  }\n",
        "begin_line": 2157,
        "end_line": 2173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckGlobalThis.CheckGlobalThis#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.CheckGlobalThis(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  CheckGlobalThis(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckGlobalThis.shouldTraverse#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.isFunction()) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING_KEY)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      Node gramps = parent.getParent();\n      if (NodeUtil.isObjectLitKey(parent)) {\n        JSDocInfo maybeLends = gramps.getJSDocInfo();\n        if (maybeLends != null &&\n            maybeLends.getLendsName() != null &&\n            maybeLends.getLendsName().endsWith(\".prototype\")) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.isAssign()) {\n      Node lhs = parent.getFirstChild();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.isGetProp() &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.isGetProp() &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 151,
        "comment": "\n   * Since this pass reports errors only when a global {@code this} keyword\n   * is encountered, there is no reason to traverse non global contexts.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckGlobalThis.visit#153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isThis() && shouldReportThis(n)) {\n      compiler.report(t.makeError(n, GLOBAL_THIS));\n    }\n    if (n == assignLhsChild) {\n      assignLhsChild = null;\n    }\n  }\n",
        "begin_line": 153,
        "end_line": 161,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.ErrorWithLevel#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.ErrorWithLevel.ErrorWithLevel(com.google.javascript.jscomp.JSError, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "    ErrorWithLevel(JSError error, CheckLevel level) {\n      this.error = error;\n      this.level = level;\n    }\n",
        "begin_line": 185,
        "end_line": 188,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.toArray#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.toArray(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private JSError[] toArray(CheckLevel level) {\n    List<JSError> errors = new ArrayList<JSError>(messages.size());\n    for (ErrorWithLevel p : messages) {\n      if (p.level == level) {\n        errors.add(p.error);\n      }\n    }\n    return errors.toArray(new JSError[errors.size()]);\n  }\n",
        "begin_line": 103,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.enables#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup otherGroup) {\n    if (level.isOn()) {\n      for (DiagnosticType type : otherGroup.getTypes()) {\n        if (group.matches(type)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 45,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.enables#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean enables(DiagnosticGroup group) {\n    for (WarningsGuard guard : guards) {\n      if (guard.enables(group)) {\n        return true;\n      } else if (guard.disables(group)) {\n        return false;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 147,
        "end_line": 158,
        "comment": "\n   * Determines whether this guard will \"elevate\" the status of any disabled\n   * diagnostic type in the group to a warning or an error.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1543
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isThis#2417",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isThis()",
        "snippet": "  public boolean isThis() {\n    return this.getType() == Token.THIS;\n  }\n",
        "begin_line": 2417,
        "end_line": 2419,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1474
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getOptions#2308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getOptions()",
        "snippet": "  CompilerOptions getOptions() {\n    return options;\n  }\n",
        "begin_line": 2308,
        "end_line": 2310,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1443
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.NumberNode#150",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.NumberNode.NumberNode(double)",
        "snippet": "    NumberNode(double number) {\n      super(Token.NUMBER);\n      this.number = number;\n    }\n",
        "begin_line": 150,
        "end_line": 153,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newNumber#501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newNumber(double)",
        "snippet": "  public static Node newNumber(double number) {\n    return new NumberNode(number);\n  }\n",
        "begin_line": 501,
        "end_line": 503,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.number#454",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.number(double)",
        "snippet": "  public static Node number(double d) {\n    return Node.newNumber(d);\n  }\n",
        "begin_line": 454,
        "end_line": 456,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeSafeDispatcher.process#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java",
        "class_name": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher",
        "signature": "com.google.javascript.jscomp.parsing.TypeSafeDispatcher.process(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  public T process(AstNode node) {\n    switch (node.getType()) {\n      case Token.ADD:\n      case Token.AND:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.IN:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.OR:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return processInfixExpression((InfixExpression) node);\n      case Token.ARRAYLIT:\n        return processArrayLiteral((ArrayLiteral) node);\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_URSH:\n        return processAssignment((Assignment) node);\n      case Token.BITNOT:\n      case Token.DEC:\n      case Token.DELPROP:\n      case Token.INC:\n      case Token.NEG:\n      case Token.NOT:\n      case Token.POS:\n      case Token.TYPEOF:\n      case Token.VOID:\n        return processUnaryExpression((UnaryExpression) node);\n      case Token.BLOCK:\n        if (node instanceof Block) {\n          return processBlock((Block) node);\n        } else  if (node instanceof Scope) {\n          return processScope((Scope) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.BREAK:\n        return processBreakStatement((BreakStatement) node);\n      case Token.CALL:\n        return processFunctionCall((FunctionCall) node);\n      case Token.CASE:\n      case Token.DEFAULT:\n        return processSwitchCase((SwitchCase) node);\n      case Token.CATCH:\n        return processCatchClause((CatchClause) node);\n      case Token.COLON:\n        return processObjectProperty((ObjectProperty) node);\n      case Token.CONTINUE:\n        return processContinueStatement((ContinueStatement) node);\n      case Token.DO:\n        return processDoLoop((DoLoop) node);\n      case Token.EMPTY:\n        return (node instanceof EmptyExpression) ?\n            processEmptyExpression((EmptyExpression) node) :\n            processEmptyStatement((EmptyStatement) node);\n      case Token.EXPR_RESULT:\n      case Token.EXPR_VOID:\n        if (node instanceof ExpressionStatement) {\n          return processExpressionStatement((ExpressionStatement) node);\n        } else  if (node instanceof LabeledStatement) {\n          return processLabeledStatement((LabeledStatement) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.DEBUGGER:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.THIS:\n      case Token.TRUE:\n        return processKeywordLiteral((KeywordLiteral) node);\n      case Token.FOR:\n        if (node instanceof ForInLoop) {\n          return processForInLoop((ForInLoop) node);\n        } else  if (node instanceof ForLoop) {\n          return processForLoop((ForLoop) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.FUNCTION:\n        return processFunctionNode((FunctionNode) node);\n      case Token.GETELEM:\n        return processElementGet((ElementGet) node);\n      case Token.GETPROP:\n        return processPropertyGet((PropertyGet) node);\n      case Token.HOOK:\n        return processConditionalExpression((ConditionalExpression) node);\n      case Token.IF:\n        return processIfStatement((IfStatement) node);\n      case Token.LABEL:\n        return processLabel((Label) node);\n      case Token.LP:\n        return processParenthesizedExpression((ParenthesizedExpression) node);\n      case Token.NAME:\n        return processName((Name) node);\n      case Token.NEW:\n        return processNewExpression((NewExpression) node);\n      case Token.NUMBER:\n        return processNumberLiteral((NumberLiteral) node);\n      case Token.OBJECTLIT:\n        return processObjectLiteral((ObjectLiteral) node);\n      case Token.REGEXP:\n        return processRegExpLiteral((RegExpLiteral) node);\n      case Token.RETURN:\n        return processReturnStatement((ReturnStatement) node);\n      case Token.SCRIPT:\n        return processAstRoot((AstRoot) node);\n      case Token.STRING:\n        return processStringLiteral((StringLiteral) node);\n      case Token.SWITCH:\n        return processSwitchStatement((SwitchStatement) node);\n      case Token.THROW:\n        return processThrowStatement((ThrowStatement) node);\n      case Token.TRY:\n        return processTryStatement((TryStatement) node);\n      case Token.CONST:\n      case Token.VAR:\n        if (node instanceof VariableDeclaration) {\n          return processVariableDeclaration((VariableDeclaration) node);\n        } else  if (node instanceof VariableInitializer) {\n          return processVariableInitializer((VariableInitializer) node);\n        } else {\n          throw new IllegalStateException(\"Unexpected node type.  class: \" +\n                                          node.getClass() +\n                                          \" type: \" +\n                                          Token.typeToName(node.getType()));\n        }\n      case Token.WHILE:\n        return processWhileLoop((WhileLoop) node);\n      case Token.WITH:\n        return processWithStatement((WithStatement) node);\n    }\n    return processIllegalToken(node);\n  }\n",
        "begin_line": 120,
        "end_line": 285,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processNumberLiteral#975",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral)",
        "snippet": "    @Override\n    Node processNumberLiteral(NumberLiteral literalNode) {\n      return newNumberNode(literalNode.getNumber());\n    }\n",
        "begin_line": 975,
        "end_line": 978,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableInitializer#1263",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer)",
        "snippet": "    @Override\n    Node processVariableInitializer(VariableInitializer initializerNode) {\n      Node node;\n      Comment comment = initializerNode.getTarget().getJsDocNode();\n      // TODO(user): At some point, consider allowing only inline jsdocs for\n      // variable initializers\n      if (comment != null && !comment.getValue().contains(\"@\")) {\n        node = transformNodeWithInlineJsDoc(initializerNode.getTarget());\n      } else {\n        node = transform(initializerNode.getTarget());\n      }\n      if (initializerNode.getInitializer() != null) {\n        Node initalizer = transform(initializerNode.getInitializer());\n        node.addChildToBack(initalizer);\n      }\n      return node;\n    }\n",
        "begin_line": 1263,
        "end_line": 1279,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNumberNode#1551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNumberNode(java.lang.Double)",
        "snippet": "  private Node newNumberNode(Double value) {\n    return IR.number(value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1551,
        "end_line": 1553,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.handleCandidateProvideDefinition#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.handleCandidateProvideDefinition(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void handleCandidateProvideDefinition(\n      NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n      String name = null;\n      if (n.isName() && parent.isVar()) {\n        name = n.getString();\n      } else if (n.isAssign() &&\n          parent.isExprResult()) {\n        name = n.getFirstChild().getQualifiedName();\n      }\n\n      if (name != null) {\n        if (parent.getBooleanProp(Node.IS_NAMESPACE)) {\n          processProvideFromPreviousPass(t, name, parent);\n        } else {\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            pn.addDefinition(parent, t.getModule());\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 406,
        "end_line": 428,
        "comment": "\n   * Handles a candidate definition for a goog.provided name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1429
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.getDefaultLevel#241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getDefaultLevel()",
        "snippet": "  public CheckLevel getDefaultLevel() {\n    return defaultLevel;\n  }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": " The default level, before any of the WarningsGuards are applied. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1387
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureRewriteClass.maybeRewriteClassDefinition#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.maybeRewriteClassDefinition(com.google.javascript.rhino.Node)",
        "snippet": "  private void maybeRewriteClassDefinition(Node n) {\n    if (n.isVar()) {\n      Node target = n.getFirstChild();\n      Node value = target.getFirstChild();\n      maybeRewriteClassDefinition(n, target, value);\n    } else if (NodeUtil.isExprAssign(n)) {\n      Node assign = n.getFirstChild();\n      Node target = assign.getFirstChild();\n      Node value = assign.getLastChild();\n      maybeRewriteClassDefinition(n, target, value);\n    }\n  }\n",
        "begin_line": 120,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1374
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getRValueOfLValue#3168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getRValueOfLValue(Node n) {\n    Node parent = n.getParent();\n    switch (parent.getType()) {\n      case Token.ASSIGN:\n        return n.getNext();\n      case Token.VAR:\n        return n.getFirstChild();\n      case Token.FUNCTION:\n        return parent;\n    }\n    return null;\n  }\n",
        "begin_line": 3168,
        "end_line": 3179,
        "comment": " Gets the r-value of a node returned by getBestLValue. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1204
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.visit#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.IF:\n        handleIf(n);\n        return;\n      case Token.WHILE:\n        handleWhile(n);\n        return;\n      case Token.DO:\n        handleDo(n);\n        return;\n      case Token.FOR:\n        handleFor(n);\n        return;\n      case Token.SWITCH:\n        handleSwitch(n);\n        return;\n      case Token.CASE:\n        handleCase(n);\n        return;\n      case Token.DEFAULT_CASE:\n        handleDefault(n);\n        return;\n      case Token.BLOCK:\n      case Token.SCRIPT:\n        handleStmtList(n);\n        return;\n      case Token.FUNCTION:\n        handleFunction(n);\n        return;\n      case Token.EXPR_RESULT:\n        handleExpr(n);\n        return;\n      case Token.THROW:\n        handleThrow(n);\n        return;\n      case Token.TRY:\n        handleTry(n);\n        return;\n      case Token.CATCH:\n        handleCatch(n);\n        return;\n      case Token.BREAK:\n        handleBreak(n);\n        return;\n      case Token.CONTINUE:\n        handleContinue(n);\n        return;\n      case Token.RETURN:\n        handleReturn(n);\n        return;\n      case Token.WITH:\n        handleWith(n);\n        return;\n      case Token.LABEL:\n        return;\n      default:\n        handleStmt(n);\n        return;\n    }\n  }\n",
        "begin_line": 294,
        "end_line": 355,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1195
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.handleStmt#668",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmt(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmt(Node node) {\n    // Simply transfer to the next line.\n    createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    connectToPossibleExceptionHandler(node, node);\n  }\n",
        "begin_line": 668,
        "end_line": 672,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1195
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.mayThrowException#910",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.mayThrowException(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean mayThrowException(Node n) {\n    switch (n.getType()) {\n      case Token.CALL:\n      case Token.GETPROP:\n      case Token.GETELEM:\n      case Token.THROW:\n      case Token.NEW:\n      case Token.ASSIGN:\n      case Token.INC:\n      case Token.DEC:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        return true;\n      case Token.FUNCTION:\n        return false;\n    }\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 910,
        "end_line": 932,
        "comment": "\n   * Determines if the subtree might throw an exception.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1187
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureRewriteClass.isGoogDefineClass#395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.isGoogDefineClass(com.google.javascript.rhino.Node)",
        "snippet": "  private boolean isGoogDefineClass(Node value) {\n    if (value != null && value.isCall()) {\n      String targetName = value.getFirstChild().getQualifiedName();\n      return (\"goog.defineClass\".equals(targetName) ||\n              \"goog.labs.classdef.defineClass\".equals(targetName));\n    }\n    return false;\n  }\n",
        "begin_line": 395,
        "end_line": 402,
        "comment": "\n   * @return Whether the call represents a class definition.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1187
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureRewriteClass.maybeRewriteClassDefinition#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.maybeRewriteClassDefinition(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void maybeRewriteClassDefinition(\n      Node n, Node target, Node value) {\n    if (isGoogDefineClass(value)) {\n      if (!target.isQualifiedName()) {\n        compiler.report(JSError.make(n, GOOG_CLASS_TARGET_INVALID));\n      }\n      ClassDefinition def = extractClassDefinition(target, value);\n      if (def != null) {\n        value.detachFromParent();\n        target.detachFromParent();\n        rewriteGoogDefineClass(n, def);\n      }\n    }\n  }\n",
        "begin_line": 133,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1179
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.connectToPossibleExceptionHandler#830",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.connectToPossibleExceptionHandler(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void connectToPossibleExceptionHandler(Node cfgNode, Node target) {\n    if (mayThrowException(target) && !exceptionHandler.isEmpty()) {\n      Node lastJump = cfgNode;\n      for (Node handler : exceptionHandler) {\n        if (handler.isFunction()) {\n          return;\n        }\n        Preconditions.checkState(handler.isTry());\n        Node catchBlock = NodeUtil.getCatchBlock(handler);\n\n        if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());\n          } else {\n            finallyMap.put(lastJump, handler.getLastChild());\n          }\n        } else { // Has a catch.\n          if (lastJump == cfgNode) {\n            createEdge(cfgNode, Branch.ON_EX, catchBlock);\n            return;\n          } else {\n            finallyMap.put(lastJump, catchBlock);\n          }\n        }\n        lastJump = handler;\n      }\n    }\n  }\n",
        "begin_line": 830,
        "end_line": 857,
        "comment": "\n   * Connects cfgNode to the proper CATCH block if target subtree might throw\n   * an exception. If there are FINALLY blocks reached before a CATCH, it will\n   * make the corresponding entry in finallyMap.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1054
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowGraph.isEnteringNewCfgNode#159",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.isEnteringNewCfgNode(com.google.javascript.rhino.Node)",
        "snippet": "  public static boolean isEnteringNewCfgNode(Node n) {\n    Node parent = n.getParent();\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.TRY:\n        return true;\n      case Token.FUNCTION:\n        // A function node represents the start of a function where the name\n        // bleeds into the local scope and parameters are assigned\n        // to the formal argument names. The node includes the name of the\n        // function and the LP list since we assume the whole set up process\n        // is atomic without change in control flow. The next change of\n        // control is going into the function's body, represented by the second\n        // child.\n        return n != parent.getFirstChild().getNext();\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        // These control structures are represented by a node that holds the\n        // condition. Each of them is a branch node based on its condition.\n        return NodeUtil.getConditionExpression(parent) != n;\n\n      case Token.FOR:\n        // The FOR(;;) node differs from other control structures in that\n        // it has an initialization and an increment statement. Those\n        // two statements have corresponding CFG nodes to represent them.\n        // The FOR node only represents the condition check for each iteration.\n        // That way the following:\n        // for(var x = 0; x < 10; x++) { } has a graph that is isomorphic to\n        // var x = 0; while(x<10) {  x++; }\n        if (NodeUtil.isForIn(parent)) {\n          // TODO(user): Investigate how we should handle the case where\n          // we have a very complex expression inside the FOR-IN header.\n          return n != parent.getFirstChild();\n        } else {\n          return NodeUtil.getConditionExpression(parent) != n;\n        }\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.CATCH:\n      case Token.WITH:\n        return n != parent.getFirstChild();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 159,
        "end_line": 205,
        "comment": "\n   * @return True if n should be represented by a new CFG node in the control\n   * flow graph.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.shouldTraverse#217",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(\n      NodeTraversal nodeTraversal, Node n, Node parent) {\n    astPosition.put(n, astPositionCounter++);\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (shouldTraverseFunctions || n == cfg.getEntry().getValue()) {\n          exceptionHandler.push(n);\n          return true;\n        }\n        return false;\n      case Token.TRY:\n        exceptionHandler.push(n);\n        return true;\n    }\n\n    /*\n     * We are going to stop the traversal depending on what the node's parent\n     * is.\n     *\n     * We are only interested in adding edges between nodes that change control\n     * flow. The most obvious ones are loops and IF-ELSE's. A statement\n     * transfers control to its next sibling.\n     *\n     * In case of an expression tree, there is no control flow within the tree\n     * even when there are short circuited operators and conditionals. When we\n     * are doing data flow analysis, we will simply synthesize lattices up the\n     * expression tree by finding the meet at each expression node.\n     *\n     * For example: within a Token.SWITCH, the expression in question does not\n     * change the control flow and need not to be considered.\n     */\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.FOR:\n          // Only traverse the body of the for loop.\n          return n == parent.getLastChild();\n\n        // Skip the conditions.\n        case Token.IF:\n        case Token.WHILE:\n        case Token.WITH:\n          return n != parent.getFirstChild();\n        case Token.DO:\n          return n != parent.getFirstChild().getNext();\n        // Only traverse the body of the cases\n        case Token.SWITCH:\n        case Token.CASE:\n        case Token.CATCH:\n        case Token.LABEL:\n          return n != parent.getFirstChild();\n        case Token.FUNCTION:\n          return n == parent.getFirstChild().getNext().getNext();\n        case Token.CONTINUE:\n        case Token.BREAK:\n        case Token.EXPR_RESULT:\n        case Token.VAR:\n        case Token.RETURN:\n        case Token.THROW:\n          return false;\n        case Token.TRY:\n          /* Just before we are about to visit the second child of the TRY node,\n           * we know that we will be visiting either the CATCH or the FINALLY.\n           * In other words, we know that the post order traversal of the TRY\n           * block has been finished, no more exceptions can be caught by the\n           * handler at this TRY block and should be taken out of the stack.\n           */\n          if (n == parent.getFirstChild().getNext()) {\n            Preconditions.checkState(exceptionHandler.peek() == parent);\n            exceptionHandler.pop();\n          }\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 217,
        "end_line": 292,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.processArgs#657",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.processArgs(java.lang.String[])",
        "snippet": "  private List<String> processArgs(String[] args) {\n    // Args4j has a different format that the old command-line parser.\n    // So we use some voodoo to get the args into the format that args4j\n    // expects.\n    Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n    Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n    List<String> processedArgs = Lists.newArrayList();\n\n    for (String arg : args) {\n      Matcher matcher = argPattern.matcher(arg);\n      if (matcher.matches()) {\n        processedArgs.add(matcher.group(1));\n\n        String value = matcher.group(2);\n        Matcher quotesMatcher = quotesPattern.matcher(value);\n        if (quotesMatcher.matches()) {\n          processedArgs.add(quotesMatcher.group(1));\n        } else {\n          processedArgs.add(value);\n        }\n      } else {\n        processedArgs.add(arg);\n      }\n    }\n\n    return processedArgs;\n  }\n",
        "begin_line": 657,
        "end_line": 683,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsFileParser.parseLine#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.parseLine(java.lang.String)",
        "snippet": "  @Override\n  protected boolean parseLine(String line) throws ParseException {\n    boolean lineHasProvidesOrRequires = false;\n\n    // Quick sanity check that will catch most cases. This is a performance\n    // win for people with a lot of JS.\n    if (line.indexOf(\"provide\") != -1 ||\n        line.indexOf(\"require\") != -1 ||\n        line.indexOf(\"addDependency\") != -1) {\n      // Iterate over the provides/requires.\n      googMatcher.reset(line);\n      while (googMatcher.find()) {\n        lineHasProvidesOrRequires = true;\n\n        if (includeGoogBase && !fileHasProvidesOrRequires) {\n          fileHasProvidesOrRequires = true;\n          requires.add(\"goog\");\n        }\n\n        // See if it's a require or provide.\n        char firstChar = googMatcher.group(1).charAt(0);\n        boolean isProvide = firstChar == 'p';\n        boolean isRequire = firstChar == 'r';\n\n        if (isProvide || isRequire) {\n          // Parse the param.\n          String arg = parseJsString(googMatcher.group(2));\n\n          // Add the dependency.\n          if (isRequire) {\n            // goog is always implicit.\n            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n            // Remove this later.\n            if (!\"goog\".equals(arg)) {\n              requires.add(arg);\n            }\n          } else {\n            provides.add(arg);\n          }\n        }\n      }\n    } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n               provides.isEmpty() && requires.isEmpty()) {\n      provides.add(\"goog\");\n\n      // base.js can't provide or require anything else.\n      return false;\n    }\n\n    return !shortcutMode || lineHasProvidesOrRequires ||\n        CharMatcher.WHITESPACE.matchesAllOf(line);\n  }\n",
        "begin_line": 137,
        "end_line": 188,
        "comment": "\n   * Parses a line of JavaScript, extracting goog.provide and goog.require\n   * information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1043
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningLevel.setOptionsForWarningLevel#30",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningLevel.java",
        "class_name": "com.google.javascript.jscomp.WarningLevel",
        "signature": "com.google.javascript.jscomp.WarningLevel.setOptionsForWarningLevel(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void setOptionsForWarningLevel(CompilerOptions options) {\n    switch (this) {\n      case QUIET:\n        silenceAllWarnings(options);\n        break;\n      case DEFAULT:\n        addDefaultWarnings(options);\n        break;\n      case VERBOSE:\n        addVerboseWarnings(options);\n        break;\n      default:\n        throw new RuntimeException(\"Unknown warning level.\");\n    }\n  }\n",
        "begin_line": 30,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1037
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.visit#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    switch (n.getType()) {\n      case Token.CALL:\n        boolean isExpr = parent.isExprResult();\n        Node left = n.getFirstChild();\n        if (left.isGetProp()) {\n          Node name = left.getFirstChild();\n          if (name.isName() &&\n              GOOG.equals(name.getString())) {\n            // For the sake of simplicity, we report code changes\n            // when we see a provides/requires, and don't worry about\n            // reporting the change when we actually do the replacement.\n            String methodName = name.getNext().getString();\n            if (\"base\".equals(methodName)) {\n              processBaseClassCall(t, n);\n            } else if (!isExpr) {\n              // All other methods must be called in an EXPR.\n              break;\n            } else if (\"define\".equals(methodName)) {\n              processDefineCall(t, n, parent);\n            } else if (\"require\".equals(methodName)) {\n              processRequireCall(t, n, parent);\n            } else if (\"provide\".equals(methodName)) {\n              processProvideCall(t, n, parent);\n            } else if (\"exportSymbol\".equals(methodName)) {\n              Node arg = left.getNext();\n              if (arg.isString()) {\n                int dot = arg.getString().indexOf('.');\n                if (dot == -1) {\n                  exportedVariables.add(arg.getString());\n                } else {\n                  exportedVariables.add(arg.getString().substring(0, dot));\n                }\n              }\n            } else if (\"addDependency\".equals(methodName)) {\n              CodingConvention convention = compiler.getCodingConvention();\n              List<String> typeDecls =\n                  convention.identifyTypeDeclarationCall(n);\n              if (typeDecls != null) {\n                for (String typeDecl : typeDecls) {\n                  compiler.getTypeRegistry().forwardDeclareType(typeDecl);\n                }\n              }\n\n              // We can't modify parent, so just create a node that will\n              // get compiled out.\n              parent.replaceChild(n, IR.number(0));\n              compiler.reportCodeChange();\n            } else if (\"setCssNameMapping\".equals(methodName)) {\n              processSetCssNameMapping(t, n, parent);\n            }\n          }\n        }\n        break;\n\n      case Token.ASSIGN:\n      case Token.NAME:\n        // If this is an assignment to a provided name, remove the provided\n        // object.\n        handleCandidateProvideDefinition(t, n, parent);\n        break;\n\n      case Token.EXPR_RESULT:\n        handleTypedefDefinition(t, n);\n        break;\n\n      case Token.FUNCTION:\n        // If this is a declaration of a provided named function, this is an\n        // error. Hoisted functions will explode if they're provided.\n        if (t.inGlobalScope() &&\n            !NodeUtil.isFunctionExpression(n)) {\n          String name = n.getFirstChild().getString();\n          ProvidedName pn = providedNames.get(name);\n          if (pn != null) {\n            compiler.report(t.makeError(n, FUNCTION_NAMESPACE_ERROR, name));\n          }\n        }\n        break;\n\n      case Token.GETPROP:\n        if (n.getFirstChild().isName() &&\n            !parent.isCall() &&\n            !parent.isAssign() &&\n            \"goog.base\".equals(n.getQualifiedName())) {\n          reportBadBaseClassUse(t, n, \"May only be called directly.\");\n        }\n        break;\n    }\n  }\n",
        "begin_line": 204,
        "end_line": 293,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1031
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseBranch#515",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseBranch(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseBranch(Node n, Node parent) {\n    int type = n.getType();\n    if (type == Token.SCRIPT) {\n      inputId = n.getInputId();\n      sourceName = getSourceName(n);\n    }\n\n    curNode = n;\n    if (!callback.shouldTraverse(this, n, parent)) {\n      return;\n    }\n\n    if (type == Token.FUNCTION) {\n      traverseFunction(n, parent);\n    } else {\n      for (Node child = n.getFirstChild(); child != null; ) {\n        // child could be replaced, in which case our child node\n        // would no longer point to the true next\n        Node next = child.getNext();\n        traverseBranch(child, n);\n        child = next;\n      }\n    }\n\n    curNode = n;\n    callback.visit(this, n, parent);\n  }\n",
        "begin_line": 515,
        "end_line": 541,
        "comment": "\n   * Traverses a branch.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1031
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.createDependencyOptions#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.createDependencyOptions(boolean, boolean, boolean, java.util.List<java.lang.String>)",
        "snippet": "  static DependencyOptions createDependencyOptions(\n      boolean manageClosureDependencies,\n      boolean onlyClosureDependencies,\n      boolean processCommonJSModules,\n      List<String> closureEntryPoints)\n      throws FlagUsageException {\n    if (onlyClosureDependencies) {\n      if (closureEntryPoints.isEmpty()) {\n        throw new FlagUsageException(\"When only_closure_dependencies is \"\n          + \"on, you must specify at least one closure_entry_point\");\n      }\n\n      return new DependencyOptions()\n          .setDependencyPruning(true)\n          .setDependencySorting(true)\n          .setMoocherDropping(true)\n          .setEntryPoints(closureEntryPoints);\n    } else if (processCommonJSModules) {\n      return new DependencyOptions()\n        .setDependencyPruning(false)\n        .setDependencySorting(true)\n        .setMoocherDropping(false)\n        .setEntryPoints(closureEntryPoints);\n    } else if (manageClosureDependencies ||\n        closureEntryPoints.size() > 0) {\n      return new DependencyOptions()\n          .setDependencyPruning(true)\n          .setDependencySorting(true)\n          .setMoocherDropping(false)\n          .setEntryPoints(closureEntryPoints);\n    }\n    return null;\n  }\n",
        "begin_line": 208,
        "end_line": 240,
        "comment": "\n   * A helper function for creating the dependency options object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1031
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isQualifiedName#1600",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isQualifiedName()",
        "snippet": "  public boolean isQualifiedName() {\n    switch (getType()) {\n      case Token.NAME:\n        return getString().isEmpty() ? false : true;\n      case Token.THIS:\n        return true;\n      case Token.GETPROP:\n        return getFirstChild().isQualifiedName();\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1600,
        "end_line": 1611,
        "comment": "\n   * Returns whether a node corresponds to a simple or a qualified name, such as\n   * <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.EdgeTuple#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple.EdgeTuple(N, E, N)",
        "snippet": "    public EdgeTuple(N sourceNode, E edge, N destNode) {\n      this.sourceNode = sourceNode;\n      this.edge = edge;\n      this.destNode = destNode;\n    }\n",
        "begin_line": 95,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isExpressionResultUsed#3216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExpressionResultUsed(Node expr) {\n    // TODO(johnlenz): consider sharing some code with trySimpleUnusedResult.\n    Node parent = expr.getParent();\n    switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n        return false;\n      case Token.CAST:\n        return isExpressionResultUsed(parent);\n      case Token.HOOK:\n      case Token.AND:\n      case Token.OR:\n        return (expr == parent.getFirstChild())\n            ? true : isExpressionResultUsed(parent);\n      case Token.COMMA:\n        Node gramps = parent.getParent();\n        if (gramps.isCall() &&\n            parent == gramps.getFirstChild()) {\n          // Semantically, a direct call to eval is different from an indirect\n          // call to an eval. See ECMA-262 S15.1.2.1. So it's OK for the first\n          // expression to a comma to be a no-op if it's used to indirect\n          // an eval. This we pretend that this is \"used\".\n          if (expr == parent.getFirstChild() &&\n              parent.getChildCount() == 2 &&\n              expr.getNext().isName() &&\n              \"eval\".equals(expr.getNext().getString())) {\n            return true;\n          }\n        }\n\n        return (expr == parent.getFirstChild())\n            ? false : isExpressionResultUsed(parent);\n      case Token.FOR:\n        if (!NodeUtil.isForIn(parent)) {\n          // Only an expression whose result is in the condition part of the\n          // expression is used.\n          return (parent.getChildAtIndex(1) == expr);\n        }\n        break;\n    }\n    return true;\n  }\n",
        "begin_line": 3216,
        "end_line": 3257,
        "comment": "\n   * @returns false iff the result of the expression is not consumed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModuleGraph.createEntryPointInputs#434",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.createEntryPointInputs(com.google.javascript.jscomp.DependencyOptions, java.util.List<com.google.javascript.jscomp.CompilerInput>, com.google.javascript.jscomp.deps.SortedDependencies<com.google.javascript.jscomp.CompilerInput>)",
        "snippet": "  private Collection<CompilerInput> createEntryPointInputs(\n      DependencyOptions depOptions,\n      List<CompilerInput> inputs,\n      SortedDependencies<CompilerInput> sorter)\n      throws MissingModuleException, MissingProvideException {\n    Set<CompilerInput> entryPointInputs = Sets.newLinkedHashSet();\n    Map<String, JSModule> modulesByName = getModulesByName();\n\n    if (depOptions.shouldPruneDependencies()) {\n      if (!depOptions.shouldDropMoochers()) {\n        entryPointInputs.addAll(sorter.getInputsWithoutProvides());\n      }\n\n      for (String entryPoint : depOptions.getEntryPoints()) {\n        // An entry point is either formatted as:\n        // 'foo.bar' - peg foo.bar to its current module\n        // 'modC:foo.bar' - peg foo.bar to modC\n        String inputName = entryPoint;\n        int splitPoint = entryPoint.indexOf(':');\n        CompilerInput entryPointInput = null;\n        if (splitPoint != -1) {\n          String moduleName = entryPoint.substring(0, splitPoint);\n          inputName = entryPoint.substring(\n              Math.min(splitPoint + 1, entryPoint.length() - 1));\n          JSModule module = modulesByName.get(moduleName);\n          if (module == null) {\n            throw new MissingModuleException(moduleName);\n          } else {\n            entryPointInput = sorter.getInputProviding(inputName);\n            entryPointInput.overrideModule(module);\n          }\n        } else {\n          entryPointInput = sorter.getInputProviding(inputName);\n        }\n\n        entryPointInputs.add(entryPointInput);\n      }\n\n      CompilerInput baseJs = sorter.maybeGetInputProviding(\"goog\");\n      if (baseJs != null) {\n        entryPointInputs.add(baseJs);\n      }\n    } else {\n      entryPointInputs.addAll(inputs);\n    }\n    return entryPointInputs;\n  }\n",
        "begin_line": 434,
        "end_line": 480,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#1292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-4d59d544-85f9-479a-be85-e1c926d082d5.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      List<Callback> callbacks = Lists.newArrayList();\n      if (options.checkUnreachableCode.isOn()) {\n        callbacks.add(\n            new CheckUnreachableCode(compiler, options.checkUnreachableCode));\n      }\n      if (options.checkMissingReturn.isOn() && options.checkTypes) {\n        callbacks.add(\n            new CheckMissingReturn(compiler, options.checkMissingReturn));\n      }\n      return combineChecks(compiler, callbacks);\n    }\n",
        "begin_line": 1292,
        "end_line": 1304,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowGraph.isConditional#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.Branch.isConditional()",
        "snippet": "    public boolean isConditional() {\n      return this == ON_TRUE || this == ON_FALSE;\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.CallbackWrapper#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.CallbackWrapper(com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "    private CallbackWrapper(Callback callback) {\n      this.callback = callback;\n      if (callback instanceof ScopedCallback) {\n        scopedCallback = (ScopedCallback) callback;\n      } else {\n        scopedCallback = null;\n      }\n    }\n",
        "begin_line": 108,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.enterScopeIfActive#135",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.enterScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void enterScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.enterScope(t);\n      }\n    }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.exitScopeIfActive#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.exitScopeIfActive(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    void exitScopeIfActive(NodeTraversal t) {\n      if (isActive() && scopedCallback != null) {\n        scopedCallback.exitScope(t);\n      }\n    }\n",
        "begin_line": 141,
        "end_line": 145,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.apply#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.ReachablePredicate.apply(com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    public boolean apply(EdgeTuple<Node, Branch> input) {\n      Branch branch = input.edge;\n      if (!branch.isConditional()) {\n        return true;\n      }\n      Node predecessor = input.sourceNode;\n      Node condition = NodeUtil.getConditionExpression(predecessor);\n\n      // TODO(user): Handle more complicated expression like true == true,\n      // etc....\n      if (condition != null) {\n        TernaryValue val = NodeUtil.getImpureBooleanValue(condition);\n        if (val != TernaryValue.UNKNOWN) {\n          return val.toBoolean(true) == (branch == Branch.ON_TRUE);\n        }\n      }\n      return true;\n    }\n",
        "begin_line": 93,
        "end_line": 111,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.CheckUnreachableCode#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.CheckUnreachableCode(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  CheckUnreachableCode(AbstractCompiler compiler, CheckLevel level) {\n    this.compiler = compiler;\n    this.level = level;\n  }\n",
        "begin_line": 41,
        "end_line": 44,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.enterScope#46",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    initScope(t.getControlFlowGraph());\n  }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.shouldTraverse#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    GraphNode<Node, Branch> gNode = t.getControlFlowGraph().getNode(n);\n    if (gNode != null && gNode.getAnnotation() != GraphReachability.REACHABLE) {\n\n      // Only report error when there are some line number informations.\n      // There are synthetic nodes with no line number informations, nodes\n      // introduce by other passes (although not likely since this pass should\n      // be executed early) or some rhino bug.\n      if (n.getLineno() != -1 &&\n          // Allow spurious semi-colons and spurious breaks.\n          !n.isEmpty() && !n.isBreak()) {\n        compiler.report(t.makeError(n, level, UNREACHABLE_CODE));\n        // From now on, we are going to assume the user fixed the error and not\n        // give more warning related to code section reachable from this node.\n        new GraphReachability<Node, ControlFlowGraph.Branch>(\n            t.getControlFlowGraph()).recompute(n);\n\n        // Saves time by not traversing children.\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 51,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.initScope#76",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.initScope(com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>)",
        "snippet": "  private void initScope(ControlFlowGraph<Node> controlFlowGraph) {\n    new GraphReachability<Node, ControlFlowGraph.Branch>(\n        controlFlowGraph, new ReachablePredicate()).compute(\n            controlFlowGraph.getEntry().getValue());\n  }\n",
        "begin_line": 76,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.exitScope#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckUnreachableCode.visit#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n  }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.AnnotatedLinkedDirectedGraphEdge#565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphEdge.AnnotatedLinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    AnnotatedLinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      super(sourceNode, edgeValue, destNode);\n    }\n",
        "begin_line": 565,
        "end_line": 568,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getNodes#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNodes()",
        "snippet": "  @Override\n  public Collection<DiGraphNode<N, E>> getNodes() {\n    return Collections.<DiGraphNode<N, E>>unmodifiableCollection(nodes.values());\n  }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.GraphReachability#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.GraphReachability(com.google.javascript.jscomp.graph.DiGraph<N, E>, com.google.common.base.Predicate<com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple<N, E>>)",
        "snippet": "  public GraphReachability(DiGraph<N, E> graph,\n                           Predicate<EdgeTuple<N, E>> edgePredicate) {\n    this.graph = graph;\n    this.edgePredicate = edgePredicate;\n  }\n",
        "begin_line": 51,
        "end_line": 55,
        "comment": "\n   * @param graph The graph.\n   * @param edgePredicate Given the predecessor P of the a node S and the edge\n   *      coming from P to S, this predicate should return true if S is\n   *      reachable from P using the edge.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.compute#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.compute(N)",
        "snippet": "  public void compute(N entry) {\n    graph.clearNodeAnnotations();\n    graph.getNode(entry).setAnnotation(REACHABLE);\n    FixedPointGraphTraversal.newTraversal(this)\n        .computeFixedPoint(graph, entry);\n  }\n",
        "begin_line": 57,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "GraphReachability.traverseEdge#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.traverseEdge(N, E, N)",
        "snippet": "  @Override\n  public boolean traverseEdge(N source, E e, N destination) {\n    if (graph.getNode(source).getAnnotation() == REACHABLE &&\n        (edgePredicate == null ||\n            edgePredicate.apply(new EdgeTuple<N, E>(source, e, destination)))) {\n      GraphNode<N, E> destNode = graph.getNode(destination);\n      if (destNode.getAnnotation() != REACHABLE) {\n        destNode.setAnnotation(REACHABLE);\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 72,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Graph.clearNodeAnnotations#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.clearNodeAnnotations()",
        "snippet": "  @Override\n  public final void clearNodeAnnotations() {\n    for (GraphNode<N, E> n : getNodes()) {\n      n.setAnnotation(null);\n    }\n  }\n",
        "begin_line": 227,
        "end_line": 232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.FixedPointGraphTraversal#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.FixedPointGraphTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<N, E>)",
        "snippet": "  public FixedPointGraphTraversal(EdgeCallback<N, E> callback) {\n    this.callback = callback;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * Create a new traversal.\n   * @param callback A callback for updating the state of the graph each\n   *     time an edge is traversed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.newTraversal#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.newTraversal(com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback<NODE, EDGE>)",
        "snippet": "  public static <NODE, EDGE> FixedPointGraphTraversal<NODE, EDGE> newTraversal(\n      EdgeCallback<NODE, EDGE> callback) {\n    return new FixedPointGraphTraversal<NODE, EDGE>(callback);\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "\n   * Helper method for creating new traversals.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>, N)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph, N entry) {\n    Set<N> entrySet = Sets.newHashSet();\n    entrySet.add(entry);\n    computeFixedPoint(graph, entrySet);\n  }\n",
        "begin_line": 81,
        "end_line": 85,
        "comment": "\n   * Compute a fixed point for the given graph, entering from the given node.\n   * @param graph The graph to traverse.\n   * @param entry The node to begin traversing from.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "FixedPointGraphTraversal.computeFixedPoint#92",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.computeFixedPoint(com.google.javascript.jscomp.graph.DiGraph<N, E>, java.util.Set<N>)",
        "snippet": "  public void computeFixedPoint(DiGraph<N, E> graph, Set<N> entrySet) {\n    int cycleCount = 0;\n    long nodeCount = graph.getNodes().size();\n\n    // Choose a bail-out heuristically in case the computation\n    // doesn't converge.\n    long maxIterations = Math.max(nodeCount * nodeCount * nodeCount, 100);\n\n    // Use a LinkedHashSet, so that the traversal is deterministic.\n    LinkedHashSet<DiGraphNode<N, E>> workSet =\n        Sets.newLinkedHashSet();\n    for (N n : entrySet) {\n      workSet.add(graph.getDirectedGraphNode(n));\n    }\n    for (; !workSet.isEmpty() && cycleCount < maxIterations; cycleCount++) {\n      // For every out edge in the workSet, traverse that edge. If that\n      // edge updates the state of the graph, then add the destination\n      // node to the resultSet, so that we can update all of its out edges\n      // on the next iteration.\n      DiGraphNode<N, E> source = workSet.iterator().next();\n      N sourceValue = source.getValue();\n\n      workSet.remove(source);\n\n      List<DiGraphEdge<N, E>> outEdges = source.getOutEdges();\n      for (DiGraphEdge<N, E> edge : outEdges) {\n        N destNode = edge.getDestination().getValue();\n        if (callback.traverseEdge(sourceValue, edge.getValue(), destNode)) {\n          workSet.add(edge.getDestination());\n        }\n      }\n    }\n\n    Preconditions.checkState(cycleCount != maxIterations,\n        NON_HALTING_ERROR_MSG);\n  }\n",
        "begin_line": 92,
        "end_line": 127,
        "comment": "\n   * Compute a fixed point for the given graph, entering from the given nodes.\n   * @param graph The graph to traverse.\n   * @param entrySet The nodes to begin traversing from.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceCssNames.visit#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.Traversal.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isCall() &&\n          GET_CSS_NAME_FUNCTION.equals(n.getFirstChild().getQualifiedName())) {\n        int count = n.getChildCount();\n        Node first = n.getFirstChild().getNext();\n        switch (count) {\n          case 2:\n            // Replace the function call with the processed argument.\n            if (first.isString()) {\n              processStringNode(t, first);\n              n.removeChild(first);\n              parent.replaceChild(n, first);\n              compiler.reportCodeChange();\n            } else {\n              compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR,\n                  Token.name(first.getType())));\n            }\n            break;\n\n          case 3:\n            // Replace function call with concatenation of two args.  It's\n            // assumed the first arg has already been processed.\n\n            Node second = first.getNext();\n\n            if (!second.isString()) {\n              compiler.report(t.makeError(n, STRING_LITERAL_EXPECTED_ERROR,\n                  Token.name(second.getType())));\n            } else if (first.isString()) {\n              compiler.report(t.makeError(\n                  n, UNEXPECTED_STRING_LITERAL_ERROR,\n                  first.getString(), second.getString()));\n            } else {\n              processStringNode(t, second);\n              n.removeChild(first);\n              Node replacement = IR.add(first,\n                  IR.string(\"-\" + second.getString())\n                      .copyInformationFrom(second))\n                  .copyInformationFrom(n);\n              replacement.setJSType(nativeStringType);\n              parent.replaceChild(n, replacement);\n              compiler.reportCodeChange();\n            }\n            break;\n\n          default:\n            compiler.report(t.makeError(\n                n, INVALID_NUM_ARGUMENTS_ERROR, String.valueOf(count)));\n        }\n      }\n    }\n",
        "begin_line": 145,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceCssNames.ReplaceCssNames#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.ReplaceCssNames(com.google.javascript.jscomp.AbstractCompiler, java.util.Map<java.lang.String, java.lang.Integer>, java.util.Set<java.lang.String>)",
        "snippet": "  ReplaceCssNames(AbstractCompiler compiler,\n      @Nullable Map<String, Integer> cssNames,\n      @Nullable Set<String> whitelist) {\n    this.compiler = compiler;\n    this.cssNames = cssNames;\n    this.whitelist = whitelist;\n    this.nativeStringType =  compiler.getTypeRegistry()\n        .getNativeType(STRING_TYPE);\n  }\n",
        "begin_line": 118,
        "end_line": 126,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceCssNames.process#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    // The CssRenamingMap may not have been available from the compiler when\n    // this ReplaceCssNames pass was constructed, so getCssRenamingMap() should\n    // only be called before this pass is actually run.\n    symbolMap = getCssRenamingMap();\n\n    NodeTraversal.traverse(compiler, root, new Traversal());\n  }\n",
        "begin_line": 128,
        "end_line": 136,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReplaceCssNames.getCssRenamingMap#138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.getCssRenamingMap()",
        "snippet": "  @VisibleForTesting\n  protected CssRenamingMap getCssRenamingMap() {\n    return compiler.getCssRenamingMap();\n  }\n",
        "begin_line": 138,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isReferenceName#1835",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isReferenceName(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isReferenceName(Node n) {\n    return n.isName() && !n.getString().isEmpty();\n  }\n",
        "begin_line": 1835,
        "end_line": 1837,
        "comment": "\n   * @return Whether the name is a reference to a variable, function or\n   *       function parameter (not a label or a empty function expression name).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getControlFlowGraph#649",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getControlFlowGraph()",
        "snippet": "  public ControlFlowGraph<Node> getControlFlowGraph() {\n    if (cfgs.peek() == null) {\n      ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);\n      cfa.process(null, getScopeRoot());\n      cfgs.pop();\n      cfgs.push(cfa.getCfg());\n    }\n    return cfgs.peek();\n  }\n",
        "begin_line": 649,
        "end_line": 657,
        "comment": " Gets the control flow graph for the current JS scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-5ab58140-2ef0-490d-be5c-4a0b323b1180.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new ControlStructureCheck(compiler);\n    }\n",
        "begin_line": 883,
        "end_line": 886,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#1091",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-249306e3-2d5a-4cb0-aa03-c8636db2520a.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected CompilerPass create(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          ReplaceCssNames pass = new ReplaceCssNames(\n              compiler,\n              newCssNames,\n              options.cssRenamingWhitelist);\n          pass.process(externs, jsRoot);\n          cssNames = newCssNames;\n        }\n      };\n    }\n",
        "begin_line": 1091,
        "end_line": 1108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-64edced1-82a9-4a8b-8f25-2a53df212264.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          ReplaceCssNames pass = new ReplaceCssNames(\n              compiler,\n              newCssNames,\n              options.cssRenamingWhitelist);\n          pass.process(externs, jsRoot);\n          cssNames = newCssNames;\n        }\n",
        "begin_line": 1094,
        "end_line": 1106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlStructureCheck.ControlStructureCheck#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.ControlStructureCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  ControlStructureCheck(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlStructureCheck.process#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    check(root);\n  }\n",
        "begin_line": 39,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlStructureCheck.check#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.check(com.google.javascript.rhino.Node)",
        "snippet": "  private void check(Node node) {\n    switch (node.getType()) {\n      case Token.WITH:\n        JSDocInfo info = node.getJSDocInfo();\n        boolean allowWith =\n            info != null && info.getSuppressions().contains(\"with\");\n        if (!allowWith) {\n          report(node, USE_OF_WITH);\n        }\n        break;\n    }\n\n    for (Node bChild = node.getFirstChild(); bChild != null;) {\n      Node next = bChild.getNext();\n      check(bChild);\n      bChild = next;\n    }\n  }\n",
        "begin_line": 54,
        "end_line": 71,
        "comment": "\n   * Reports errors for any invalid use of control structures.\n   *\n   * @param node Current node to check.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getCssRenamingMap#1954",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getCssRenamingMap()",
        "snippet": "  @Override\n  CssRenamingMap getCssRenamingMap() {\n    return options.cssRenamingMap;\n  }\n",
        "begin_line": 1954,
        "end_line": 1957,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1015
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isSyntheticBlock#1953",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isSyntheticBlock()",
        "snippet": "  public boolean isSyntheticBlock() {\n    return getBooleanProp(SYNTHETIC_BLOCK_PROP);\n  }\n",
        "begin_line": 1953,
        "end_line": 1955,
        "comment": "\n   * Returns whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isTry#2429",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isTry()",
        "snippet": "  public boolean isTry() {\n    return this.getType() == Token.TRY;\n  }\n",
        "begin_line": 2429,
        "end_line": 2431,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphNode#346",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.LinkedDirectedGraphNode(N)",
        "snippet": "    LinkedDirectedGraphNode(N nodeValue) {\n      this.value = nodeValue;\n    }\n",
        "begin_line": 346,
        "end_line": 348,
        "comment": "\n     * Constructor\n     *\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getValue#350",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getValue()",
        "snippet": "    @Override\n    public N getValue() {\n      return value;\n    }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getInEdges#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getInEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getInEdges() {\n      return inEdgeList;\n    }\n",
        "begin_line": 387,
        "end_line": 390,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getOutEdges#392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphNode.getOutEdges()",
        "snippet": "    @Override\n    public List<DiGraphEdge<N, E>> getOutEdges() {\n      return outEdgeList;\n    }\n",
        "begin_line": 392,
        "end_line": 395,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraphEdge#471",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.LinkedDirectedGraphEdge(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>, E, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "    LinkedDirectedGraphEdge(DiGraphNode<N, E> sourceNode,\n        E edgeValue, DiGraphNode<N, E> destNode) {\n      this.value = edgeValue;\n      this.sourceNode = sourceNode;\n      this.destNode = destNode;\n    }\n",
        "begin_line": 471,
        "end_line": 476,
        "comment": "\n     * Constructor.\n     *\n     * @param edgeValue Edge Value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getDestination#483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getDestination()",
        "snippet": "    @Override\n    public DiGraphNode<N, E> getDestination() {\n      return destNode;\n    }\n",
        "begin_line": 483,
        "end_line": 486,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getValue#498",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraphEdge.getValue()",
        "snippet": "    @Override\n    public E getValue() {\n      return value;\n    }\n",
        "begin_line": 498,
        "end_line": 501,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.AnnotatedLinkedDirectedGraphNode(N)",
        "snippet": "    AnnotatedLinkedDirectedGraphNode(N nodeValue) {\n      super(nodeValue);\n    }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "\n     * @param nodeValue Node's value.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getAnnotation#441",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.getAnnotation()",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n    @Override\n    public <A extends Annotation> A getAnnotation() {\n      return (A) annotation;\n    }\n",
        "begin_line": 441,
        "end_line": 445,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.setAnnotation#447",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.AnnotatedLinkedDirectedGraphNode.setAnnotation(com.google.javascript.jscomp.graph.Annotation)",
        "snippet": "    @Override\n    public void setAnnotation(Annotation data) {\n      annotation = data;\n    }\n",
        "begin_line": 447,
        "end_line": 450,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.LinkedDirectedGraph#71",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.LinkedDirectedGraph(boolean, boolean)",
        "snippet": "  protected LinkedDirectedGraph(\n      boolean useNodeAnnotations, boolean useEdgeAnnotations) {\n    this.useNodeAnnotations = useNodeAnnotations;\n    this.useEdgeAnnotations = useEdgeAnnotations;\n  }\n",
        "begin_line": 71,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.connect#77",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.connect(N, E, N)",
        "snippet": "  @Override\n  public void connect(N srcValue, E edgeValue, N destValue) {\n    LinkedDirectedGraphNode<N, E> src = getNodeOrFail(srcValue);\n    LinkedDirectedGraphNode<N, E> dest = getNodeOrFail(destValue);\n    LinkedDirectedGraphEdge<N, E> edge =\n        useEdgeAnnotations ?\n        new AnnotatedLinkedDirectedGraphEdge<N, E>(src, edgeValue, dest) :\n        new LinkedDirectedGraphEdge<N, E>(src, edgeValue, dest);\n    src.getOutEdges().add(edge);\n    dest.getInEdges().add(edge);\n  }\n",
        "begin_line": 77,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNodes#105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNodes()",
        "snippet": "  @Override\n  public Iterable<DiGraphNode<N, E>> getDirectedGraphNodes() {\n    return Collections.<DiGraphNode<N, E>>unmodifiableCollection(\n        nodes.values());\n  }\n",
        "begin_line": 105,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getDirectedGraphNode#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> getDirectedGraphNode(N nodeValue) {\n    return nodes.get(nodeValue);\n  }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getNode#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> getNode(N nodeValue) {\n    return getDirectedGraphNode(nodeValue);\n  }\n",
        "begin_line": 116,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.createDirectedGraphNode#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createDirectedGraphNode(N)",
        "snippet": "  @Override\n  public DiGraphNode<N, E> createDirectedGraphNode(N nodeValue) {\n    LinkedDirectedGraphNode<N, E> node = nodes.get(nodeValue);\n    if (node == null) {\n      node = useNodeAnnotations ?\n          new AnnotatedLinkedDirectedGraphNode<N, E>(nodeValue) :\n          new LinkedDirectedGraphNode<N, E>(nodeValue);\n      nodes.put(nodeValue, node);\n    }\n    return node;\n  }\n",
        "begin_line": 133,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.createNode#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.createNode(N)",
        "snippet": "  @Override\n  public GraphNode<N, E> createNode(N value) {\n    return createDirectedGraphNode(value);\n  }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, E, N)",
        "snippet": "  @Override\n  public boolean isConnectedInDirection(N n1, E edgeValue, N n2) {\n    return isConnectedInDirection(n1, Predicates.equalTo(edgeValue), n2);\n  }\n",
        "begin_line": 198,
        "end_line": 201,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.isConnectedInDirection#203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.isConnectedInDirection(N, com.google.common.base.Predicate<E>, N)",
        "snippet": "  private boolean isConnectedInDirection(N n1, Predicate<E> edgeMatcher, N n2) {\n    // Verify the nodes.\n    DiGraphNode<N, E> dNode1 = getNodeOrFail(n1);\n    DiGraphNode<N, E> dNode2 = getNodeOrFail(n2);\n    for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) {\n      if (outEdge.getDestination() == dNode2 &&\n          edgeMatcher.apply(outEdge.getValue())) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 203,
        "end_line": 215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "LinkedDirectedGraph.getDirectedSuccNodes#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.getDirectedSuccNodes(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<N, E>)",
        "snippet": "  @Override\n  public List<DiGraphNode<N, E>> getDirectedSuccNodes(\n      DiGraphNode<N, E> dNode) {\n    if (dNode == null) {\n      throw new IllegalArgumentException(dNode + \" is null\");\n    }\n    List<DiGraphNode<N, E>> nodeList = Lists.newArrayList();\n    for (DiGraphEdge<N, E> edge : dNode.getOutEdges()) {\n      nodeList.add(edge.getDestination());\n    }\n    return nodeList;\n  }\n",
        "begin_line": 240,
        "end_line": 251,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "Graph.connectIfNotFound#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.connectIfNotFound(N, E, N)",
        "snippet": "  public final void connectIfNotFound(N n1, E edge, N n2) {\n    if (!isConnected(n1, edge, n2)) {\n      connect(n1, edge, n2);\n    }\n  }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "\n   * Connects two nodes in the graph with an edge if such edge does not already\n   * exists between the nodes.\n   *\n   * @param n1 First node.\n   * @param edge The edge.\n   * @param n2 Second node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "Graph.getNodeOrFail#218",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "signature": "com.google.javascript.jscomp.graph.Graph.getNodeOrFail(N)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  <T extends GraphNode<N, E>> T getNodeOrFail(N val) {\n    T node = (T) getNode(val);\n    if (node == null) {\n      throw new IllegalArgumentException(val + \" does not exist in graph\");\n    }\n    return node;\n  }\n",
        "begin_line": 218,
        "end_line": 225,
        "comment": "\n   * Gets the node of the specified type, or throws an\n   * IllegalArgumentException.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiGraph.isConnected#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/graph/DiGraph.java",
        "class_name": "com.google.javascript.jscomp.graph.DiGraph",
        "signature": "com.google.javascript.jscomp.graph.DiGraph.isConnected(N, E, N)",
        "snippet": "  @Override\n  public boolean isConnected(N n1, E e, N n2) {\n    return isConnectedInDirection(n1, e, n2) ||\n        isConnectedInDirection(n2, e, n1);\n  }\n",
        "begin_line": 97,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "SortedDependencies.SortedDependencies#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.SortedDependencies(java.util.List<INPUT>)",
        "snippet": "  public SortedDependencies(List<INPUT> inputs)\n      throws CircularDependencyException {\n    this.inputs = Lists.newArrayList(inputs);\n    noProvides = Lists.newArrayList();\n\n    // Collect all symbols provided in these files.\n    for (INPUT input : inputs) {\n      Collection<String> currentProvides = input.getProvides();\n      if (currentProvides.isEmpty()) {\n        noProvides.add(input);\n      }\n\n      for (String provide : currentProvides) {\n        provideMap.put(provide, input);\n      }\n    }\n\n    // Get the direct dependencies.\n    final Multimap<INPUT, INPUT> deps = HashMultimap.create();\n    for (INPUT input : inputs) {\n      for (String req : input.getRequires()) {\n        INPUT dep = provideMap.get(req);\n        if (dep != null && dep != input) {\n          deps.put(input, dep);\n        }\n      }\n    }\n\n    // Sort the inputs by sucking in 0-in-degree nodes until we're done.\n    sortedList = topologicalStableSort(inputs, deps);\n\n    // The dependency graph of inputs has a cycle iff sortedList is a proper\n    // subset of inputs. Also, it has a cycle iff the subgraph\n    // (inputs - sortedList) has a cycle. It's fairly easy to prove this\n    // by the lemma that a graph has a cycle iff it has a subgraph where\n    // no nodes have out-degree 0. I'll leave the proof of this as an exercise\n    // to the reader.\n    if (sortedList.size() < inputs.size()) {\n      List<INPUT> subGraph = Lists.newArrayList(inputs);\n      subGraph.removeAll(sortedList);\n\n      throw new CircularDependencyException(\n          cycleToString(findCycle(subGraph, deps)));\n    }\n  }\n",
        "begin_line": 64,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowGraph.ControlFlowGraph#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.ControlFlowGraph(N, boolean, boolean)",
        "snippet": "  ControlFlowGraph(\n      N entry, boolean nodeAnnotations, boolean edgeAnnotations) {\n    super(nodeAnnotations, edgeAnnotations);\n    implicitReturn = createDirectedGraphNode(null);\n    this.entry = createDirectedGraphNode(entry);\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "\n   * Constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowGraph.getImplicitReturn#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getImplicitReturn()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getImplicitReturn() {\n    return implicitReturn;\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n   * Gets the implicit return node.\n   *\n   * @return Return node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowGraph.getEntry#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.getEntry()",
        "snippet": "  public DiGraphNode<N, ControlFlowGraph.Branch> getEntry() {\n    return entry;\n  }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n   * Gets the entry point of the control flow graph. In general, this should be\n   * the beginning of the global script or beginning of a function.\n   *\n   * @return The entry point.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.AstControlFlowGraph#1014",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.AstControlFlowGraph.AstControlFlowGraph(com.google.javascript.rhino.Node, java.util.Map<com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, java.lang.Integer>, boolean)",
        "snippet": "    private AstControlFlowGraph(Node entry,\n        Map<DiGraphNode<Node, Branch>, Integer> priorities,\n        boolean edgeAnnotations) {\n      super(entry,\n          true /* node annotations */, edgeAnnotations);\n      this.priorities = priorities;\n    }\n",
        "begin_line": 1014,
        "end_line": 1020,
        "comment": "\n     * Constructor.\n     * @param entry The entry node.\n     * @param priorities The map from nodes to position in the AST (to be\n     *    filled by the {@link ControlFlowAnalysis#shouldTraverse}).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.compare#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.Anonymous-dad80e84-5f17-4dfd-a3c3-e18558d26049.compare(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>, com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.ControlFlowAnalysis#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.ControlFlowAnalysis(com.google.javascript.jscomp.AbstractCompiler, boolean, boolean)",
        "snippet": "  ControlFlowAnalysis(AbstractCompiler compiler,\n      boolean shouldTraverseFunctions, boolean edgeAnnotations) {\n    this.compiler = compiler;\n    this.shouldTraverseFunctions = shouldTraverseFunctions;\n    this.edgeAnnotations = edgeAnnotations;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructor.\n   *\n   * @param compiler Compiler instance.\n   * @param shouldTraverseFunctions Whether functions should be traversed (true\n   *    by default).\n   * @param edgeAnnotations Whether to allow edge annotations. By default,\n   *    only node annotations are allowed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.getCfg#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.getCfg()",
        "snippet": "  ControlFlowGraph<Node> getCfg() {\n    return cfg;\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.process#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    this.root = root;\n    astPositionCounter = 0;\n    astPosition = Maps.newHashMap();\n    nodePriorities = Maps.newHashMap();\n    cfg = new AstControlFlowGraph(computeFallThrough(root), nodePriorities,\n                                  edgeAnnotations);\n    NodeTraversal.traverse(compiler, root, this);\n    astPosition.put(null, ++astPositionCounter); // the implicit return is last.\n\n    // Now, generate the priority of nodes by doing a depth-first\n    // search on the CFG.\n    priorityCounter = 0;\n    DiGraphNode<Node, Branch> entry = cfg.getEntry();\n    prioritizeFromEntryNode(entry);\n\n    if (shouldTraverseFunctions) {\n      // If we're traversing inner functions, we need to rank the\n      // priority of them too.\n      for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n        Node value = candidate.getValue();\n        if (value != null && value.isFunction()) {\n          Preconditions.checkState(\n              !nodePriorities.containsKey(candidate) || candidate == entry);\n          prioritizeFromEntryNode(candidate);\n        }\n      }\n    }\n\n    // At this point, all reachable nodes have been given a priority, but\n    // unreachable nodes have not been given a priority. Put them last.\n    // Presumably, it doesn't really matter what priority they get, since\n    // this shouldn't happen in real code.\n    for (DiGraphNode<Node, Branch> candidate : cfg.getDirectedGraphNodes()) {\n      if (!nodePriorities.containsKey(candidate)) {\n        nodePriorities.put(candidate, ++priorityCounter);\n      }\n    }\n\n    // Again, the implicit return node is always last.\n    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n  }\n",
        "begin_line": 148,
        "end_line": 190,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.prioritizeFromEntryNode#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.prioritizeFromEntryNode(com.google.javascript.jscomp.graph.DiGraph.DiGraphNode<com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch>)",
        "snippet": "  private void prioritizeFromEntryNode(DiGraphNode<Node, Branch> entry) {\n    PriorityQueue<DiGraphNode<Node, Branch>> worklist =\n        new PriorityQueue<DiGraphNode<Node, Branch>>(10, priorityComparator);\n    worklist.add(entry);\n\n    while (!worklist.isEmpty()) {\n      DiGraphNode<Node, Branch> current = worklist.remove();\n      if (nodePriorities.containsKey(current)) {\n        continue;\n      }\n\n      nodePriorities.put(current, ++priorityCounter);\n\n      List<DiGraphNode<Node, Branch>> successors =\n          cfg.getDirectedSuccNodes(current);\n      for (DiGraphNode<Node, Branch> candidate : successors) {\n        worklist.add(candidate);\n      }\n    }\n  }\n",
        "begin_line": 196,
        "end_line": 215,
        "comment": "\n   * Given an entry node, find all the nodes reachable from that node\n   * and prioritize them.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.handleStmtList#484",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.handleStmtList(com.google.javascript.rhino.Node)",
        "snippet": "  private void handleStmtList(Node node) {\n    Node parent = node.getParent();\n    // Special case, don't add a block of empty CATCH block to the graph.\n    if (node.isBlock() && parent != null &&\n        parent.isTry() &&\n        NodeUtil.getCatchBlock(parent) == node &&\n        !NodeUtil.hasCatchHandler(node)) {\n      return;\n    }\n\n    // A block transfer control to its first child if it is not empty.\n    Node child = node.getFirstChild();\n\n    // Function declarations are skipped since control doesn't go into that\n    // function (unless it is called)\n    while (child != null && child.isFunction()) {\n      child = child.getNext();\n    }\n\n    if (child != null) {\n      createEdge(node, Branch.UNCOND, computeFallThrough(child));\n    } else {\n      createEdge(node, Branch.UNCOND, computeFollowNode(node, this));\n    }\n\n    // Synthetic blocks\n    if (parent != null) {\n      switch (parent.getType()) {\n        case Token.DEFAULT_CASE:\n        case Token.CASE:\n        case Token.TRY:\n          break;\n        default:\n          if (node.isBlock() && node.isSyntheticBlock()) {\n            createEdge(node, Branch.SYN_BLOCK, computeFollowNode(node, this));\n          }\n          break;\n      }\n    }\n  }\n",
        "begin_line": 484,
        "end_line": 523,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#674",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
        "snippet": "  static Node computeFollowNode(Node node, ControlFlowAnalysis cfa) {\n    return computeFollowNode(node, node, cfa);\n  }\n",
        "begin_line": 674,
        "end_line": 676,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.computeFollowNode#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFollowNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowAnalysis)",
        "snippet": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }\n",
        "begin_line": 692,
        "end_line": 789,
        "comment": "\n   * Computes the follow() node of a given node and its parent. There is a side\n   * effect when calling this function. If this function computed an edge that\n   * exists a FINALLY, it'll attempt to connect the fromNode to the outer\n   * FINALLY according to the finallyMap.\n   *\n   * @param fromNode The original source node since {@code node} is changed\n   *        during recursion.\n   * @param node The node that follow() should compute.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.computeFallThrough#796",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.computeFallThrough(com.google.javascript.rhino.Node)",
        "snippet": "  static Node computeFallThrough(Node n) {\n    switch (n.getType()) {\n      case Token.DO:\n        return computeFallThrough(n.getFirstChild());\n      case Token.FOR:\n        if (NodeUtil.isForIn(n)) {\n          return n.getFirstChild().getNext();\n        }\n        return computeFallThrough(n.getFirstChild());\n      case Token.LABEL:\n        return computeFallThrough(n.getLastChild());\n      default:\n        return n;\n    }\n  }\n",
        "begin_line": 796,
        "end_line": 810,
        "comment": "\n   * Computes the destination node of n when we want to fallthrough into the\n   * subtree of n. We don't always create a CFG edge into n itself because of\n   * DOs and FORs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "ControlFlowAnalysis.createEdge#818",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.createEdge(com.google.javascript.rhino.Node, com.google.javascript.jscomp.ControlFlowGraph.Branch, com.google.javascript.rhino.Node)",
        "snippet": "  private void createEdge(Node fromNode, ControlFlowGraph.Branch branch,\n      Node toNode) {\n    cfg.createNode(fromNode);\n    cfg.createNode(toNode);\n    cfg.connectIfNotFound(fromNode, branch, toNode);\n  }\n",
        "begin_line": 818,
        "end_line": 823,
        "comment": "\n   * Connects the two nodes in the control flow graph.\n   *\n   * @param fromNode Source.\n   * @param toNode Destination.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getIntValue#337",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.getIntValue()",
        "snippet": "    @Override\n    public int getIntValue() {\n      return intValue;\n    }\n",
        "begin_line": 337,
        "end_line": 340,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getIntProp#831",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getIntProp(int)",
        "snippet": "  public int getIntProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return 0;\n    }\n    return item.getIntValue();\n  }\n",
        "begin_line": 831,
        "end_line": 837,
        "comment": "\n   * Returns the integer value for the property, or 0 if the property\n   * is not defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.visit#267",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.NameRefInExternsCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName()) {\n        switch (parent.getType()) {\n          case Token.VAR:\n          case Token.FUNCTION:\n          case Token.PARAM_LIST:\n            // These are okay.\n            break;\n          case Token.GETPROP:\n            if (n == parent.getFirstChild()) {\n              Scope scope = t.getScope();\n              Scope.Var var = scope.getVar(n.getString());\n              if (var == null) {\n                t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());\n                varsToDeclareInExterns.add(n.getString());\n              }\n            }\n            break;\n          default:\n            t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());\n\n            Scope scope = t.getScope();\n            Scope.Var var = scope.getVar(n.getString());\n            if (var == null) {\n              varsToDeclareInExterns.add(n.getString());\n            }\n            break;\n        }\n      }\n    }\n",
        "begin_line": 267,
        "end_line": 297,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.visit#153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (!n.isName()) {\n      return;\n    }\n\n    String varName = n.getString();\n\n    // Only a function can have an empty name.\n    if (varName.isEmpty()) {\n      Preconditions.checkState(parent.isFunction());\n      Preconditions.checkState(NodeUtil.isFunctionExpression(parent));\n      return;\n    }\n\n    // Check if this is a declaration for a var that has been declared\n    // elsewhere. If so, mark it as a duplicate.\n    if ((parent.isVar() ||\n         NodeUtil.isFunctionDeclaration(parent)) &&\n        varsToDeclareInExterns.contains(varName)) {\n      createSynthesizedExternVar(varName);\n\n      n.addSuppression(\"duplicate\");\n    }\n\n    // Check that the var has been declared.\n    Scope scope = t.getScope();\n    Scope.Var var = scope.getVar(varName);\n    if (var == null) {\n      if (NodeUtil.isFunctionExpression(parent)) {\n        // e.g. [ function foo() {} ], it's okay if \"foo\" isn't defined in the\n        // current scope.\n      } else {\n        boolean isArguments = scope.isLocal() && ARGUMENTS.equals(varName);\n        // The extern checks are stricter, don't report a second error.\n        if (!isArguments && !(strictExternCheck && t.getInput().isExtern())) {\n          t.report(n, UNDEFINED_VAR_ERROR, varName);\n        }\n\n        if (sanityCheck) {\n          throw new IllegalStateException(\"Unexpected variable \" + varName);\n        } else {\n          createSynthesizedExternVar(varName);\n          scope.getGlobalScope().declare(varName, n,\n              null, compiler.getSynthesizedExternsInput());\n        }\n      }\n      return;\n    }\n\n    CompilerInput currInput = t.getInput();\n    CompilerInput varInput = var.input;\n    if (currInput == varInput || currInput == null || varInput == null) {\n      // The variable was defined in the same file. This is fine.\n      return;\n    }\n\n    // Check module dependencies.\n    JSModule currModule = currInput.getModule();\n    JSModule varModule = varInput.getModule();\n    JSModuleGraph moduleGraph = compiler.getModuleGraph();\n    if (!sanityCheck &&\n        varModule != currModule && varModule != null && currModule != null) {\n      if (moduleGraph.dependsOn(currModule, varModule)) {\n        // The module dependency was properly declared.\n      } else {\n        if (scope.isGlobal()) {\n          if (moduleGraph.dependsOn(varModule, currModule)) {\n            // The variable reference violates a declared module dependency.\n            t.report(n, VIOLATED_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          } else {\n            // The variable reference is between two modules that have no\n            // dependency relationship. This should probably be considered an\n            // error, but just issue a warning for now.\n            t.report(n, MISSING_MODULE_DEP_ERROR,\n                     currModule.getName(), varModule.getName(), varName);\n          }\n        } else {\n          t.report(n, STRICT_MODULE_DEP_ERROR,\n                   currModule.getName(), varModule.getName(), varName);\n        }\n      }\n    }\n  }\n",
        "begin_line": 153,
        "end_line": 237,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.createScope#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.createScope(com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)",
        "snippet": "  @Override\n  public Scope createScope(Node n, Scope parent) {\n    inputId = null;\n    if (parent == null) {\n      scope = Scope.createGlobalScope(n);\n    } else {\n      scope = new Scope(parent, n);\n    }\n\n    scanRoot(n);\n\n    inputId = null;\n    Scope returnedScope = scope;\n    scope = null;\n    return returnedScope;\n  }\n",
        "begin_line": 55,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.scanRoot#72",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanRoot(com.google.javascript.rhino.Node)",
        "snippet": "  private void scanRoot(Node n) {\n    if (n.isFunction()) {\n      if (inputId == null) {\n        inputId = NodeUtil.getInputId(n);\n        // TODO(johnlenz): inputId maybe null if the FUNCTION node is detached\n        // from the AST.\n        // Is it meaningful to build a scope for detached FUNCTION node?\n      }\n\n      final Node fnNameNode = n.getFirstChild();\n      final Node args = fnNameNode.getNext();\n      final Node body = args.getNext();\n\n      // Bleed the function name into the scope, if it hasn't\n      // been declared in the outer scope.\n      String fnName = fnNameNode.getString();\n      if (!fnName.isEmpty() && NodeUtil.isFunctionExpression(n)) {\n        declareVar(fnNameNode);\n      }\n\n      // Args: Declare function variables\n      Preconditions.checkState(args.isParamList());\n      for (Node a = args.getFirstChild(); a != null;\n           a = a.getNext()) {\n        Preconditions.checkState(a.isName());\n        declareVar(a);\n      }\n\n      // Body\n      scanVars(body);\n    } else {\n      // It's the global block\n      Preconditions.checkState(scope.getParent() == null);\n      scanVars(n);\n    }\n  }\n",
        "begin_line": 72,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.scanVars#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scanVars(com.google.javascript.rhino.Node)",
        "snippet": "  private void scanVars(Node n) {\n    switch (n.getType()) {\n      case Token.VAR:\n        // Declare all variables. e.g. var x = 1, y, z;\n        for (Node child = n.getFirstChild();\n             child != null;) {\n          Node next = child.getNext();\n          declareVar(child);\n          child = next;\n        }\n        return;\n\n      case Token.FUNCTION:\n        if (NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n\n        String fnName = n.getFirstChild().getString();\n        if (fnName.isEmpty()) {\n          // This is invalid, but allow it so the checks can catch it.\n          return;\n        }\n        declareVar(n.getFirstChild());\n        return;   // should not examine function's children\n\n      case Token.CATCH:\n        Preconditions.checkState(n.getChildCount() == 2);\n        Preconditions.checkState(n.getFirstChild().isName());\n        // the first child is the catch var and the third child\n        // is the code block\n\n        final Node var = n.getFirstChild();\n        final Node block = var.getNext();\n\n        declareVar(var);\n        scanVars(block);\n        return;  // only one child to scan\n\n      case Token.SCRIPT:\n        inputId = n.getInputId();\n        Preconditions.checkNotNull(inputId);\n        break;\n    }\n\n    // Variables can only occur in statement-level nodes, so\n    // we only need to traverse children in a couple special cases.\n    if (NodeUtil.isControlStructure(n) || NodeUtil.isStatementBlock(n)) {\n      for (Node child = n.getFirstChild();\n           child != null;) {\n        Node next = child.getNext();\n        scanVars(child);\n        child = next;\n      }\n    }\n  }\n",
        "begin_line": 112,
        "end_line": 166,
        "comment": "\n   * Scans and gather variables declarations under a Node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Scope#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.jscomp.Scope, com.google.javascript.rhino.Node)",
        "snippet": "  Scope(Scope parent, Node rootNode) {\n    Preconditions.checkNotNull(parent);\n    Preconditions.checkArgument(rootNode != parent.rootNode);\n\n    this.parent = parent;\n    this.rootNode = rootNode;\n    this.isBottom = false;\n    this.depth = parent.depth + 1;\n  }\n",
        "begin_line": 386,
        "end_line": 394,
        "comment": "\n   * Creates a Scope given the parent Scope and the root node of the scope.\n   * @param parent  The parent Scope. Cannot be null.\n   * @param rootNode  Typically the FUNCTION node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.combineChecks#1317",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.combineChecks(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback>)",
        "snippet": "  private static HotSwapCompilerPass combineChecks(AbstractCompiler compiler,\n      List<Callback> callbacks) {\n    Preconditions.checkArgument(callbacks.size() > 0);\n    Callback[] array = callbacks.toArray(new Callback[callbacks.size()]);\n    return new CombinedCompilerPass(compiler, array);\n  }\n",
        "begin_line": 1317,
        "end_line": 1322,
        "comment": " Executes the given callbacks with a {@link CombinedCompilerPass}. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.CombinedCompilerPass#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CombinedCompilerPass(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback...)",
        "snippet": "  CombinedCompilerPass(\n      AbstractCompiler compiler, Callback... callbacks) {\n    this(compiler, Lists.<Callback>newArrayList(callbacks));\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "\n   * Creates a combined compiler pass.\n   * @param compiler the compiler\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSuspiciousCode.CheckSuspiciousCode#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.CheckSuspiciousCode()",
        "snippet": "  CheckSuspiciousCode() {\n  }\n",
        "begin_line": 53,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSuspiciousCode.visit#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    checkMissingSemicolon(t, n);\n    checkNaN(t, n);\n    checkInvalidIn(t, n);\n  }\n",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSuspiciousCode.checkMissingSemicolon#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.checkMissingSemicolon(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void checkMissingSemicolon(NodeTraversal t, Node n) {\n    switch (n.getType()) {\n      case Token.IF:\n        Node trueCase = n.getFirstChild().getNext();\n        reportIfWasEmpty(t, trueCase);\n        Node elseCase = trueCase.getNext();\n        if (elseCase != null) {\n          reportIfWasEmpty(t, elseCase);\n        }\n        break;\n\n      case Token.WHILE:\n      case Token.FOR:\n        reportIfWasEmpty(t, NodeUtil.getLoopCodeBlock(n));\n        break;\n    }\n  }\n",
        "begin_line": 63,
        "end_line": 79,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSuspiciousCode.checkNaN#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.checkNaN(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void checkNaN(NodeTraversal t, Node n) {\n    switch (n.getType()) {\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LT:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        reportIfNaN(t, n.getFirstChild());\n        reportIfNaN(t, n.getLastChild());\n    }\n  }\n",
        "begin_line": 93,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSuspiciousCode.checkInvalidIn#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSuspiciousCode.java",
        "class_name": "com.google.javascript.jscomp.CheckSuspiciousCode",
        "signature": "com.google.javascript.jscomp.CheckSuspiciousCode.checkInvalidIn(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)",
        "snippet": "  private void checkInvalidIn(NodeTraversal t, Node n) {\n    if (n.getType() == Token.IN) {\n      reportIfNonObject(t, n.getLastChild());\n    }\n  }\n",
        "begin_line": 115,
        "end_line": 119,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isParamList#2385",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isParamList()",
        "snippet": "  public boolean isParamList() {\n    return this.getType() == Token.PARAM_LIST;\n  }\n",
        "begin_line": 2385,
        "end_line": 2387,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.VarCheck#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  VarCheck(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.VarCheck#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.VarCheck(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  VarCheck(AbstractCompiler compiler, boolean sanityCheck) {\n    this.compiler = compiler;\n    this.strictExternCheck = compiler.getErrorLevel(\n        JSError.make(\"\", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR;\n    this.sanityCheck = sanityCheck;\n  }\n",
        "begin_line": 101,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.createScopeCreator#113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.createScopeCreator()",
        "snippet": "  private ScopeCreator createScopeCreator() {\n    if (sanityCheck) {\n      return new SyntacticScopeCreator(compiler);\n    } else {\n      return new SyntacticScopeCreator(\n          compiler, new RedeclarationCheckHandler());\n    }\n  }\n",
        "begin_line": 113,
        "end_line": 120,
        "comment": "\n   * Create a SyntacticScopeCreator. If not in sanity check mode, use a\n   * {@link RedeclarationCheckHandler} to check var redeclarations.\n   * @return the SyntacticScopeCreator\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "VarCheck.process#122",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "signature": "com.google.javascript.jscomp.VarCheck.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    ScopeCreator scopeCreator = createScopeCreator();\n    // Don't run externs-checking in sanity check mode. Normalization will\n    // remove duplicate VAR declarations, which will make\n    // externs look like they have assigns.\n    if (!sanityCheck) {\n      NodeTraversal traversal = new NodeTraversal(\n          compiler, new NameRefInExternsCheck(), scopeCreator);\n      traversal.traverse(externs);\n    }\n\n    NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);\n    t.traverseRoots(Lists.newArrayList(externs, root));\n    for (String varName : varsToDeclareInExterns) {\n      createSynthesizedExternVar(varName);\n    }\n  }\n",
        "begin_line": 122,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.SyntacticScopeCreator.RedeclarationHandler)",
        "snippet": "  SyntacticScopeCreator(\n      AbstractCompiler compiler, RedeclarationHandler redeclarationHandler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = redeclarationHandler;\n  }\n",
        "begin_line": 49,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.declareVar#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.declareVar(com.google.javascript.rhino.Node)",
        "snippet": "  private void declareVar(Node n) {\n    Preconditions.checkState(n.isName());\n\n    CompilerInput input = compiler.getInput(inputId);\n    String name = n.getString();\n    if (scope.isDeclared(name, false)\n        || (scope.isLocal() && name.equals(ARGUMENTS))) {\n      redeclarationHandler.onRedeclaration(\n          scope, name, n, input);\n    } else {\n      scope.declare(name, n, null, input);\n    }\n  }\n",
        "begin_line": 190,
        "end_line": 202,
        "comment": "\n   * Declares a variable.\n   *\n   * @param n The node corresponding to the variable name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Var#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Var.Var(boolean, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.Scope, int, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "    private Var(boolean inferred, String name, Node nameNode, JSType type,\n                Scope scope, int index, CompilerInput input) {\n      this.name = name;\n      this.nameNode = nameNode;\n      this.type = type;\n      this.scope = scope;\n      this.index = index;\n      this.input = input;\n      this.typeInferred = inferred;\n    }\n",
        "begin_line": 120,
        "end_line": 129,
        "comment": "\n     * Creates a variable.\n     *\n     * @param inferred whether its type is inferred (as opposed to declared)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.Scope#402",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.Scope(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private Scope(Node rootNode, boolean isBottom) {\n    this.parent = null;\n    this.rootNode = rootNode;\n    this.isBottom = isBottom;\n    this.depth = 0;\n  }\n",
        "begin_line": 402,
        "end_line": 407,
        "comment": "\n   * Creates a empty Scope (bottom of the lattice).\n   * @param rootNode Typically a FUNCTION node or the global BLOCK node.\n   * @param isBottom Whether this is the bottom of a lattice. Otherwise,\n   *     it must be a global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.createGlobalScope#409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.createGlobalScope(com.google.javascript.rhino.Node)",
        "snippet": "  static Scope createGlobalScope(Node rootNode) {\n    return new Scope(rootNode, false);\n  }\n",
        "begin_line": 409,
        "end_line": 411,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getRootNode#431",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getRootNode()",
        "snippet": "  @Override\n  public Node getRootNode() {\n    return rootNode;\n  }\n",
        "begin_line": 431,
        "end_line": 434,
        "comment": "\n   * Gets the container node of the scope. This is typically the FUNCTION\n   * node or the global BLOCK/SCRIPT node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getParent#436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getParent()",
        "snippet": "  public Scope getParent() {\n    return parent;\n  }\n",
        "begin_line": 436,
        "end_line": 438,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.declare#479",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {\n    return declare(name, nameNode, type, input, true);\n  }\n",
        "begin_line": 479,
        "end_line": 481,
        "comment": "\n   * Declares a variable whose type is inferred.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.declare#493",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.declare(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, com.google.javascript.jscomp.CompilerInput, boolean)",
        "snippet": "  Var declare(String name, Node nameNode,\n      JSType type, CompilerInput input, boolean inferred) {\n    Preconditions.checkState(name != null && name.length() > 0);\n\n    // Make sure that it's declared only once\n    Preconditions.checkState(vars.get(name) == null);\n\n    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input);\n    vars.put(name, var);\n    return var;\n  }\n",
        "begin_line": 493,
        "end_line": 503,
        "comment": "\n   * Declares a variable.\n   *\n   * @param name name of the variable\n   * @param nameNode the NAME node declaring the variable\n   * @param type the variable's type\n   * @param input the input in which this variable is defined.\n   * @param inferred Whether this variable's type is inferred (as opposed\n   *     to declared).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.getVar#528",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.getVar(java.lang.String)",
        "snippet": "  public Var getVar(String name) {\n    Var var = vars.get(name);\n    if (var != null) {\n      return var;\n    } else if (parent != null) { // Recurse up the parent Scope\n      return parent.getVar(name);\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 528,
        "end_line": 537,
        "comment": "\n   * Returns the variable, may be null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isDeclared#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isDeclared(java.lang.String, boolean)",
        "snippet": "  public boolean isDeclared(String name, boolean recurse) {\n    Scope scope = this;\n    if (scope.vars.containsKey(name)) {\n      return true;\n    }\n    if (scope.parent != null && recurse) {\n      return scope.parent.isDeclared(name, recurse);\n    }\n    return false;\n  }\n",
        "begin_line": 552,
        "end_line": 561,
        "comment": "\n   * Returns true if a variable is declared.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Scope.isLocal#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "class_name": "com.google.javascript.jscomp.Scope",
        "signature": "com.google.javascript.jscomp.Scope.isLocal()",
        "snippet": "  public boolean isLocal() {\n    return parent != null;\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\n   * Returns whether this is a local scope (i.e. not the global scope).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.ProvidedName#900",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.ProvidedName(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, boolean)",
        "snippet": "    ProvidedName(String namespace, Node node, JSModule module,\n        boolean explicit) {\n      Preconditions.checkArgument(\n          node == null /* The base case */ ||\n          node.isExprResult());\n      this.namespace = namespace;\n      this.firstNode = node;\n      this.firstModule = module;\n\n      addProvide(node, module, explicit);\n    }\n",
        "begin_line": 900,
        "end_line": 910,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.addProvide#915",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.addProvide(com.google.javascript.rhino.Node, com.google.javascript.jscomp.JSModule, boolean)",
        "snippet": "    void addProvide(Node node, JSModule module, boolean explicit) {\n      if (explicit) {\n        Preconditions.checkState(explicitNode == null);\n        Preconditions.checkArgument(node.isExprResult());\n        explicitNode = node;\n        explicitModule = module;\n      }\n      updateMinimumModule(module);\n    }\n",
        "begin_line": 915,
        "end_line": 923,
        "comment": "\n     * Add an implicit or explicit provide.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.updateMinimumModule#946",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.updateMinimumModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "    private void updateMinimumModule(JSModule newModule) {\n      if (minimumModule == null) {\n        minimumModule = newModule;\n      } else if (moduleGraph != null) {\n        minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(\n            minimumModule, newModule);\n      } else {\n        // If there is no module graph, then there must be exactly one\n        // module in the program.\n        Preconditions.checkState(newModule == minimumModule,\n                                 \"Missing module graph\");\n      }\n    }\n",
        "begin_line": 946,
        "end_line": 958,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.replace#967",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName.replace()",
        "snippet": "    void replace() {\n      if (firstNode == null) {\n        // Don't touch the base case ('goog').\n        replacementNode = candidateDefinition;\n        return;\n      }\n\n      // Handle the case where there is a duplicate definition for an explicitly\n      // provided symbol.\n      if (candidateDefinition != null && explicitNode != null) {\n        explicitNode.detachFromParent();\n        compiler.reportCodeChange();\n\n        // Does this need a VAR keyword?\n        replacementNode = candidateDefinition;\n        if (candidateDefinition.isExprResult() &&\n            !candidateDefinition.getFirstChild().isQualifiedName()) {\n          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n          Node assignNode = candidateDefinition.getFirstChild();\n          Node nameNode = assignNode.getFirstChild();\n          if (nameNode.isName()) {\n            // Need to convert this assign to a var declaration.\n            Node valueNode = nameNode.getNext();\n            assignNode.removeChild(nameNode);\n            assignNode.removeChild(valueNode);\n            nameNode.addChildToFront(valueNode);\n            Node varNode = IR.var(nameNode);\n            varNode.copyInformationFrom(candidateDefinition);\n            candidateDefinition.getParent().replaceChild(\n                candidateDefinition, varNode);\n            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n            compiler.reportCodeChange();\n            replacementNode = varNode;\n          }\n        }\n      } else {\n        // Handle the case where there's not a duplicate definition.\n        replacementNode = createDeclarationNode();\n        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n          int indexOfDot = namespace.lastIndexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);\n          }\n        }\n        if (explicitNode != null) {\n          explicitNode.detachFromParent();\n        }\n        compiler.reportCodeChange();\n      }\n    }\n",
        "begin_line": 967,
        "end_line": 1030,
        "comment": "\n     * Replace the provide statement.\n     *\n     * If we're providing a name with no definition, then create one.\n     * If we're providing a name with a duplicate definition, then make sure\n     * that definition becomes a declaration.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.ProcessClosurePrimitives#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.ProcessClosurePrimitives(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PreprocessorSymbolTable, com.google.javascript.jscomp.CheckLevel, boolean)",
        "snippet": "  ProcessClosurePrimitives(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      CheckLevel requiresLevel,\n      boolean preserveGoogRequires) {\n    this.compiler = compiler;\n    this.preprocessorSymbolTable = preprocessorSymbolTable;\n    this.moduleGraph = compiler.getModuleGraph();\n    this.requiresLevel = requiresLevel;\n    this.preserveGoogRequires = preserveGoogRequires;\n\n    // goog is special-cased because it is provided in Closure's base library.\n    providedNames.put(GOOG,\n        new ProvidedName(GOOG, null, null, false /* implicit */));\n  }\n",
        "begin_line": 133,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.getExportedVariableNames#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.getExportedVariableNames()",
        "snippet": "  Set<String> getExportedVariableNames() {\n    return exportedVariables;\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessClosurePrimitives.process#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    new NodeTraversal(compiler, this).traverse(root);\n\n    for (Node n : defineCalls) {\n      replaceGoogDefines(n);\n    }\n\n    for (ProvidedName pn : providedNames.values()) {\n      pn.replace();\n    }\n\n    if (requiresLevel.isOn()) {\n      for (UnrecognizedRequire r : unrecognizedRequires) {\n        DiagnosticType error;\n        ProvidedName expectedName = providedNames.get(r.namespace);\n        if (expectedName != null && expectedName.firstNode != null) {\n          // The namespace ended up getting provided after it was required.\n          error = LATE_PROVIDE_ERROR;\n        } else {\n          error = MISSING_PROVIDE_ERROR;\n        }\n\n        compiler.report(JSError.make(\n            r.inputName, r.requireNode, requiresLevel, error, r.namespace));\n      }\n    }\n  }\n",
        "begin_line": 152,
        "end_line": 179,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isControlStructure#1722",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isControlStructure(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isControlStructure(Node n) {\n    switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1722,
        "end_line": 1739,
        "comment": "\n   * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatementBlock#1800",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementBlock(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementBlock(Node n) {\n    return n.isScript() || n.isBlock();\n  }\n",
        "begin_line": 1800,
        "end_line": 1802,
        "comment": "\n   * @return Whether the node is of a type that contain other statements.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunctionDeclaration#1962",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionDeclaration(Node n) {\n    return n.isFunction() && isStatement(n);\n  }\n",
        "begin_line": 1962,
        "end_line": 1964,
        "comment": "\n   * Is this node a function declaration? A function declaration is a function\n   * that has a name that is added to the current scope (i.e. a function that\n   * is not part of a expression; see {@link #isFunctionExpression}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseRoots#298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseRoots(java.util.List<com.google.javascript.rhino.Node>)",
        "snippet": "  public void traverseRoots(List<Node> roots) {\n    if (roots.isEmpty()) {\n      return;\n    }\n\n    try {\n      Node scopeRoot = roots.get(0).getParent();\n      Preconditions.checkState(scopeRoot != null);\n\n      inputId = NodeUtil.getInputId(scopeRoot);\n      sourceName = \"\";\n      curNode = scopeRoot;\n      pushScope(scopeRoot);\n\n      for (Node root : roots) {\n        Preconditions.checkState(root.getParent() == scopeRoot);\n        traverseBranch(root, scopeRoot);\n      }\n\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 298,
        "end_line": 321,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getInput#438",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getInput()",
        "snippet": "  public CompilerInput getInput() {\n    return compiler.getInput(inputId);\n  }\n",
        "begin_line": 438,
        "end_line": 440,
        "comment": "\n   * Gets the current input source.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.popScope#616",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.popScope()",
        "snippet": "  private void popScope() {\n    if (scopeCallback != null) {\n      scopeCallback.exitScope(this);\n    }\n    if (scopeRoots.isEmpty()) {\n      scopes.pop();\n    } else {\n      scopeRoots.pop();\n    }\n    cfgs.pop();\n    if (hasScope()) {\n      compiler.setScope(getScopeRoot());\n    }\n  }\n",
        "begin_line": 616,
        "end_line": 629,
        "comment": " Pops back to the previous scope (e.g. when leaving a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScope#632",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScope()",
        "snippet": "  public Scope getScope() {\n    Scope scope = scopes.isEmpty() ? null : scopes.peek();\n    if (scopeRoots.isEmpty()) {\n      return scope;\n    }\n\n    Iterator<Node> it = scopeRoots.descendingIterator();\n    while (it.hasNext()) {\n      scope = scopeCreator.createScope(it.next(), scope);\n      scopes.push(scope);\n    }\n    scopeRoots.clear();\n    // No need to call compiler.setScope; the top scopeRoot is now the top scope\n    return scope;\n  }\n",
        "begin_line": 632,
        "end_line": 646,
        "comment": " Gets the current scope. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScopeRoot#660",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeRoot()",
        "snippet": "  public Node getScopeRoot() {\n    if (scopeRoots.isEmpty()) {\n      return scopes.peek().getRootNode();\n    } else {\n      return scopeRoots.peek();\n    }\n  }\n",
        "begin_line": 660,
        "end_line": 666,
        "comment": " Returns the current scope's root. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#1161",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-9f58f3be-2245-47e5-9dc4-226d4977085b.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new VarCheck(compiler);\n    }\n",
        "begin_line": 1161,
        "end_line": 1164,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#977",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-d8f52785-6a9a-435d-a52f-aa5e4183877a.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      final ProcessClosurePrimitives pass = new ProcessClosurePrimitives(\n          compiler,\n          preprocessorSymbolTable,\n          options.brokenClosureRequiresLevel,\n          options.preserveGoogRequires);\n\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n          pass.hotSwapScript(scriptRoot, originalRoot);\n        }\n      };\n    }\n",
        "begin_line": 977,
        "end_line": 997,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#987",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-d30669d7-7b65-44ff-9d42-054df85920d9.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n",
        "begin_line": 987,
        "end_line": 991,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getInput#1082",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getInput(com.google.javascript.rhino.InputId)",
        "snippet": "  @Override\n  public CompilerInput getInput(InputId id) {\n    return inputsById.get(id);\n  }\n",
        "begin_line": 1082,
        "end_line": 1085,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getModuleGraph#1209",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getModuleGraph()",
        "snippet": "  @Override\n  JSModuleGraph getModuleGraph() {\n    return moduleGraph;\n  }\n",
        "begin_line": 1209,
        "end_line": 1212,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrorLevel#2175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorLevel(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel getErrorLevel(JSError error) {\n    Preconditions.checkNotNull(options);\n    return warningsGuard.level(error);\n  }\n",
        "begin_line": 2175,
        "end_line": 2179,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.visitOrMaybeActivate#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.visitOrMaybeActivate(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void visitOrMaybeActivate(NodeTraversal t, Node n, Node parent) {\n      if (isActive()) {\n        callback.visit(t, n, parent);\n      } else if (waiting == n) {\n        waiting = null;\n      }\n    }\n",
        "begin_line": 121,
        "end_line": 127,
        "comment": "\n     * Visits the node unless the wrapped callback is inactive. Activates the\n     * callback if appropriate.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.shouldTraverseIfActive#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.shouldTraverseIfActive(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    void shouldTraverseIfActive(NodeTraversal t, Node n, Node parent) {\n      if (isActive() && !callback.shouldTraverse(t, n, parent)) {\n        waiting = n;\n      }\n    }\n",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.isActive#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CallbackWrapper.isActive()",
        "snippet": "    boolean isActive() {\n      return waiting == null;\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.CombinedCompilerPass#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.CombinedCompilerPass(com.google.javascript.jscomp.AbstractCompiler, java.util.List<com.google.javascript.jscomp.NodeTraversal.Callback>)",
        "snippet": "  CombinedCompilerPass(\n      AbstractCompiler compiler, List<Callback> callbacks) {\n    this.compiler = compiler;\n    this.callbacks = new CallbackWrapper[callbacks.size()];\n    for (int i = 0; i < callbacks.size(); i++) {\n      this.callbacks[i] = new CallbackWrapper(callbacks.get(i));\n    }\n  }\n",
        "begin_line": 64,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.process#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public final void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.shouldTraverse#162",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.shouldTraverseIfActive(t, n, parent);\n    }\n    // Note that this method could return false if all callbacks are inactive.\n    // This apparent optimization would make this method more expensive\n    // in the typical case where not all nodes are inactive. It is\n    // very unlikely that many all callbacks would be inactive at the same\n    // time (indeed, there are several checking passes that never return false).\n    return true;\n  }\n",
        "begin_line": 162,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.visit#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.visitOrMaybeActivate(t, n, parent);\n    }\n  }\n",
        "begin_line": 175,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.enterScope#182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void enterScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.enterScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 182,
        "end_line": 187,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "CombinedCompilerPass.exitScope#189",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "  @Override\n  public void exitScope(NodeTraversal t) {\n    for (CallbackWrapper callback : callbacks) {\n      callback.exitScopeIfActive(t);\n    }\n  }\n",
        "begin_line": 189,
        "end_line": 194,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.make#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.make(java.lang.String, int, int, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)",
        "snippet": "  public static JSError make(String sourceName, int lineno, int charno,\n                             DiagnosticType type, String... arguments) {\n    return new JSError(sourceName, null, lineno, charno, type, null, arguments);\n  }\n",
        "begin_line": 85,
        "end_line": 88,
        "comment": "\n   * Creates a JSError at a given source location\n   *\n   * @param sourceName The source file name\n   * @param lineno Line number with source file, or -1 if unknown\n   * @param charno Column number within line, or -1 for whole line.\n   * @param type The DiagnosticType\n   * @param arguments Arguments to be incorporated into the message\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0995
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.VoidType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.VoidType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  VoidType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.toStringHelper#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "VoidType.getDisplayName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "signature": "com.google.javascript.rhino.jstype.VoidType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"undefined\";\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueType.ValueType#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ValueType.java",
        "class_name": "com.google.javascript.rhino.jstype.ValueType",
        "signature": "com.google.javascript.rhino.jstype.ValueType.ValueType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ValueType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnknownType.UnknownType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.UnknownType(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  UnknownType(JSTypeRegistry registry, boolean isChecked) {\n    super(registry);\n    this.isChecked = isChecked;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnknownType.isSubtype#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    return true;\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry) {\n    this(registry, DEFAULT_MAX_UNION_SIZE);\n  }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.UnionTypeBuilder#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.UnionTypeBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry, int)",
        "snippet": "  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n    this.registry = registry;\n    this.maxUnionSize = maxUnionSize;\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.addAlternate#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.addAlternate(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  UnionTypeBuilder addAlternate(JSType alternate) {\n    // build() returns the bottom type by default, so we can\n    // just bail out early here.\n    if (alternate.isNoType()) {\n      return this;\n    }\n\n    isAllType = isAllType || alternate.isAllType();\n\n    boolean isAlternateUnknown = alternate instanceof UnknownType;\n    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;\n    if (isAlternateUnknown) {\n      areAllUnknownsChecked = areAllUnknownsChecked &&\n          alternate.isCheckedUnknownType();\n    }\n    if (!isAllType && !isNativeUnknownType) {\n      if (alternate.isUnionType()) {\n        UnionType union = alternate.toMaybeUnionType();\n        for (JSType unionAlt : union.getAlternates()) {\n          addAlternate(unionAlt);\n        }\n      } else {\n        if (alternates.size() > maxUnionSize) {\n          return this;\n        }\n\n        // Function types are special, because they have their\n        // own bizarre sub-lattice. See the comments on\n        // FunctionType#supAndInf helper and above at functionTypePosition.\n        if (alternate.isFunctionType() && functionTypePosition != -1) {\n          // See the comments on functionTypePosition above.\n          FunctionType other =\n              alternates.get(functionTypePosition).toMaybeFunctionType();\n          FunctionType supremum =\n              alternate.toMaybeFunctionType().supAndInfHelper(other, true);\n          alternates.set(functionTypePosition, supremum);\n          result = null;\n          return this;\n        }\n\n        // Look through the alternates we've got so far,\n        // and check if any of them are duplicates of\n        // one another.\n        int currentIndex = 0;\n        Iterator<JSType> it = alternates.iterator();\n        while (it.hasNext()) {\n          boolean removeCurrent = false;\n          JSType current = it.next();\n\n          // Unknown and NoResolved types may just be names that haven't\n          // been resolved yet. So keep these in the union, and just use\n          // equality checking for simple de-duping.\n          if (alternate.isUnknownType() ||\n              current.isUnknownType() ||\n              alternate.isNoResolvedType() ||\n              current.isNoResolvedType() ||\n              alternate.hasAnyTemplateTypes() ||\n              current.hasAnyTemplateTypes()) {\n            if (alternate.isEquivalentTo(current)) {\n              // Alternate is unnecessary.\n              return this;\n            }\n          } else {\n\n            // Because \"Foo\" and \"Foo.<?>\" are roughly equivalent\n            // templatized types, special care is needed when building the\n            // union. For example:\n            //   Object is consider a subtype of Object.<string>\n            // but we want to leave \"Object\" not \"Object.<string>\" when\n            // building the subtype.\n            //\n\n            if (alternate.isTemplatizedType() || current.isTemplatizedType()) {\n              // Cases:\n              // 1) alternate:Array.<string> and current:Object ==> Object\n              // 2) alternate:Array.<string> and current:Array ==> Array\n              // 3) alternate:Object.<string> and\n              //    current:Array ==> Array|Object.<string>\n              // 4) alternate:Object and current:Array.<string> ==> Object\n              // 5) alternate:Array and current:Array.<string> ==> Array\n              // 6) alternate:Array and\n              //    current:Object.<string> ==> Array|Object.<string>\n              // 7) alternate:Array.<string> and\n              //    current:Array.<number> ==> Array.<?>\n              // 8) alternate:Array.<string> and\n              //    current:Array.<string> ==> Array.<string>\n              // 9) alternate:Array.<string> and\n              //    current:Object.<string> ==> Object.<string>|Array.<string>\n\n              if (!current.isTemplatizedType()) {\n                if (alternate.isSubtype(current)) {\n                  // case 1, 2\n                  return this;\n                }\n                // case 3: leave current, add alternate\n              } else if (!alternate.isTemplatizedType()) {\n                if (current.isSubtype(alternate)) {\n                  // case 4, 5\n                  removeCurrent = true;\n                }\n                // case 6: leave current, add alternate\n              } else {\n                Preconditions.checkState(current.isTemplatizedType()\n                    && alternate.isTemplatizedType());\n                TemplatizedType templatizedAlternate = alternate.toMaybeTemplatizedType();\n                TemplatizedType templatizedCurrent = current.toMaybeTemplatizedType();\n\n                if (templatizedCurrent.wrapsSameRawType(templatizedAlternate)) {\n                  if (alternate.getTemplateTypeMap().checkEquivalenceHelper(\n                      current.getTemplateTypeMap(),\n                      EquivalenceMethod.IDENTITY)) {\n                    // case 8\n                    return this;\n                  } else {\n                    // TODO(johnlenz): should we leave both types?\n                    // case 7: add a merged alternate\n                    // We currently merge to the templatized types to \"unknown\"\n                    // which is equivalent to the raw type.\n                    JSType merged = templatizedCurrent\n                        .getReferencedObjTypeInternal();\n                    return addAlternate(merged);\n                  }\n                }\n                // case 9: leave current, add alternate\n              }\n              // Otherwise leave both templatized types.\n            } else if (alternate.isSubtype(current)) {\n              // Alternate is unnecessary.\n              return this;\n            } else if (current.isSubtype(alternate)) {\n              // Alternate makes current obsolete\n              removeCurrent = true;\n            }\n          }\n\n          if (removeCurrent) {\n            it.remove();\n\n            if (currentIndex == functionTypePosition) {\n              functionTypePosition = -1;\n            } else if (currentIndex < functionTypePosition) {\n              functionTypePosition--;\n              currentIndex--;\n            }\n          }\n          currentIndex++;\n        }\n\n        if (alternate.isFunctionType()) {\n          // See the comments on functionTypePosition above.\n          Preconditions.checkState(functionTypePosition == -1);\n          functionTypePosition = alternates.size();\n        }\n\n        alternates.add(alternate);\n        result = null; // invalidate the memoized result\n      }\n    } else {\n      result = null;\n    }\n    return this;\n  }\n",
        "begin_line": 120,
        "end_line": 281,
        "comment": "\n   * Adds an alternate to the union type under construction. Returns this\n   * for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.reduceAlternatesWithoutUnion#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.reduceAlternatesWithoutUnion()",
        "snippet": "  private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n      return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n      if (areAllUnknownsChecked) {\n        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n      } else {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      }\n    } else {\n      int size = alternates.size();\n      if (size > maxUnionSize) {\n        return registry.getNativeType(UNKNOWN_TYPE);\n      } else if (size > 1) {\n        return null;\n      } else if (size == 1) {\n        return alternates.iterator().next();\n      } else {\n        return registry.getNativeType(NO_TYPE);\n      }\n    }\n  }\n",
        "begin_line": 288,
        "end_line": 309,
        "comment": "\n   * Reduce the alternates into a non-union type.\n   * If the alternates can't be accurately represented with a non-union\n   * type, return null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.build#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.build()",
        "snippet": "  JSType build() {\n    if (result == null) {\n      result = reduceAlternatesWithoutUnion();\n      if (result == null) {\n        result = new UnionType(registry, getAlternateListCopy());\n      }\n    }\n    return result;\n  }\n",
        "begin_line": 316,
        "end_line": 324,
        "comment": "\n   * Creates a union.\n   * @return A UnionType if it has two or more alternates, the\n   *    only alternate if it has one and otherwise {@code NO_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionTypeBuilder.getAlternateListCopy#326",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.getAlternateListCopy()",
        "snippet": "  private Collection<JSType> getAlternateListCopy() {\n    return ImmutableList.copyOf(alternates);\n  }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnionType.UnionType#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "signature": "com.google.javascript.rhino.jstype.UnionType.UnionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.util.Collection<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  UnionType(JSTypeRegistry registry, Collection<JSType> alternates) {\n    super(registry);\n    this.alternates = alternates;\n    this.hashcode = this.alternates.hashCode();\n  }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "\n   * Creates a union type.\n   *\n   * @param alternates the alternates of the union\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMapReplacer.TemplateTypeMapReplacer#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMapReplacer.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMapReplacer.TemplateTypeMapReplacer(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  public TemplateTypeMapReplacer(\n      JSTypeRegistry registry, TemplateTypeMap replacements) {\n    super(registry, false);\n    this.replacements = replacements;\n    this.visitedTypes = new ArrayDeque<TemplateType>();\n  }\n",
        "begin_line": 60,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.TemplateTypeMap#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.TemplateTypeMap(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TemplateType>, com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  TemplateTypeMap(JSTypeRegistry registry,\n                  ImmutableList<TemplateType> templateKeys,\n                  ImmutableList<JSType> templateValues) {\n    Preconditions.checkNotNull(templateKeys);\n    Preconditions.checkNotNull(templateValues);\n\n    this.registry = registry;\n    this.templateKeys = templateKeys;\n\n    int nKeys = templateKeys.size();\n    this.templateValues = templateValues.size() > nKeys ?\n        templateValues.subList(0, nKeys) : templateValues;\n\n    // Iteratively resolve any JSType values that refer to the TemplateType keys\n    // of this TemplateTypeMap.\n    TemplateTypeMapReplacer replacer = new TemplateTypeMapReplacer(\n        registry, this);\n    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n    for (JSType templateValue : this.templateValues) {\n      builder.add(templateValue.visit(replacer));\n    }\n    this.resolvedTemplateValues = builder.build();\n  }\n",
        "begin_line": 69,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.getTemplateKeys#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.getTemplateKeys()",
        "snippet": "  public ImmutableList<TemplateType> getTemplateKeys() {\n    return templateKeys;\n  }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n   * Returns a list of all template keys.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.getTemplateType#149",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.getTemplateType(com.google.javascript.rhino.jstype.TemplateType)",
        "snippet": "  public JSType getTemplateType(TemplateType key) {\n    int index = getTemplateTypeIndex(key);\n    return (index == -1) ? registry.getNativeType(JSTypeNative.UNKNOWN_TYPE) :\n         templateValues.get(index);\n  }\n",
        "begin_line": 149,
        "end_line": 153,
        "comment": "\n   * Returns the JSType value associated with the specified template key. If no\n   * JSType value is associated, returns UNKNOWN_TYPE.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.getTemplateTypeIndex#168",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.getTemplateTypeIndex(com.google.javascript.rhino.jstype.TemplateType)",
        "snippet": "  private int getTemplateTypeIndex(TemplateType key) {\n    int maxIndex = Math.min(templateKeys.size(), templateValues.size());\n    for (int i = maxIndex - 1; i >= 0; i--) {\n      if (templateKeys.get(i) == key) {\n        return i;\n      }\n    }\n    return -1;\n  }\n",
        "begin_line": 168,
        "end_line": 176,
        "comment": "\n   * Returns the index of the JSType value associated with the specified\n   * template key. If no JSType value is associated, returns -1.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.getResolvedTemplateType#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.getResolvedTemplateType(com.google.javascript.rhino.jstype.TemplateType)",
        "snippet": "  private JSType getResolvedTemplateType(TemplateType key) {\n    int index = getTemplateTypeIndex(key);\n    return (index == -1) ? registry.getNativeType(JSTypeNative.UNKNOWN_TYPE) :\n         resolvedTemplateValues.get(index);\n  }\n",
        "begin_line": 178,
        "end_line": 182,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.checkEquivalenceHelper#196",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.checkEquivalenceHelper(com.google.javascript.rhino.jstype.TemplateTypeMap, com.google.javascript.rhino.jstype.EquivalenceMethod)",
        "snippet": "  public boolean checkEquivalenceHelper(\n      TemplateTypeMap that, EquivalenceMethod eqMethod) {\n    ImmutableList<TemplateType> thisKeys = getTemplateKeys();\n    ImmutableList<TemplateType> thatKeys = that.getTemplateKeys();\n\n    EquivalenceMatch[] thatMatches = new EquivalenceMatch[thatKeys.size()];\n    Arrays.fill(thatMatches, EquivalenceMatch.NO_KEY_MATCH);\n\n    for (int i = 0; i < thisKeys.size(); i++) {\n      TemplateType thisKey = thisKeys.get(i);\n      JSType thisType = getResolvedTemplateType(thisKey);\n      EquivalenceMatch thisMatch = EquivalenceMatch.NO_KEY_MATCH;\n\n      for (int j = 0; j < thatKeys.size(); j++) {\n        TemplateType thatKey = thatKeys.get(j);\n        JSType thatType = that.getResolvedTemplateType(thatKey);\n\n        // Cross-compare every key-value pair in this TemplateTypeMap with\n        // those in that TemplateTypeMap. Update the Equivalence match for both\n        // key-value pairs involved.\n        if (thisKey == thatKey) {\n          EquivalenceMatch newMatchType = EquivalenceMatch.VALUE_MISMATCH;\n          if (thisType.checkEquivalenceHelper(thatType, eqMethod)) {\n            newMatchType = EquivalenceMatch.VALUE_MATCH;\n          }\n\n          if (thisMatch != EquivalenceMatch.VALUE_MATCH) {\n            thisMatch = newMatchType;\n          }\n          if (thatMatches[j] != EquivalenceMatch.VALUE_MATCH) {\n            thatMatches[j] = newMatchType;\n          }\n        }\n      }\n\n      if (failedEquivalenceCheck(thisMatch, eqMethod)) {\n        return false;\n      }\n    }\n\n    for (int i = 0; i < thatMatches.length; i++) {\n      if (failedEquivalenceCheck(thatMatches[i], eqMethod)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n",
        "begin_line": 196,
        "end_line": 243,
        "comment": "\n   * Determines if this map and the specified map have equivalent template\n   * types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.failedEquivalenceCheck#250",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.failedEquivalenceCheck(com.google.javascript.rhino.jstype.TemplateTypeMap.EquivalenceMatch, com.google.javascript.rhino.jstype.EquivalenceMethod)",
        "snippet": "  private boolean failedEquivalenceCheck(\n      EquivalenceMatch eqMatch, EquivalenceMethod eqMethod) {\n    return eqMatch == EquivalenceMatch.VALUE_MISMATCH ||\n        (eqMatch == EquivalenceMatch.NO_KEY_MATCH &&\n         eqMethod != EquivalenceMethod.INVARIANT);\n  }\n",
        "begin_line": 250,
        "end_line": 255,
        "comment": "\n   * Determines if the specified EquivalenceMatch is considered a failing\n   * condition for an equivalence check, given the EquivalenceMethod used for\n   * the check.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateTypeMap.hasAnyTemplateTypesInternal#321",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateTypeMap.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateTypeMap",
        "signature": "com.google.javascript.rhino.jstype.TemplateTypeMap.hasAnyTemplateTypesInternal()",
        "snippet": "  boolean hasAnyTemplateTypesInternal() {\n    for (JSType templateValue : templateValues) {\n      if (templateValue.hasAnyTemplateTypes()) {\n        return true;\n      }\n    }\n    return false;\n  }\n",
        "begin_line": 321,
        "end_line": 328,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "TemplateType.TemplateType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/TemplateType.java",
        "class_name": "com.google.javascript.rhino.jstype.TemplateType",
        "signature": "com.google.javascript.rhino.jstype.TemplateType.TemplateType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  TemplateType(JSTypeRegistry registry, String name) {\n    super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n    this.name = name;\n  }\n",
        "begin_line": 53,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.StringType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.StringType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  StringType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.toStringHelper#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringType.getDisplayName#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "signature": "com.google.javascript.rhino.jstype.StringType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"string\";\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProxyObjectType.ProxyObjectType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.ProxyObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ProxyObjectType(JSTypeRegistry registry, JSType referencedType) {\n    this(registry, referencedType, null);\n  }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProxyObjectType.ProxyObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.ProxyObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  ProxyObjectType(JSTypeRegistry registry, JSType referencedType,\n                  TemplateTypeMap templateTypeMap) {\n    super(registry, templateTypeMap);\n    setReferencedType(referencedType);\n  }\n",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProxyObjectType.setReferencedType#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ProxyObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ProxyObjectType",
        "signature": "com.google.javascript.rhino.jstype.ProxyObjectType.setReferencedType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  void setReferencedType(JSType referencedType) {\n    this.referencedType = referencedType;\n    if (referencedType instanceof ObjectType) {\n      this.referencedObjType = (ObjectType) referencedType;\n    } else {\n      this.referencedObjType = null;\n    }\n  }\n",
        "begin_line": 86,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype) {\n    this(registry, className, implicitPrototype, false, null);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": "\n   * Creates an object type.\n   *\n   * @param className the name of the class.  May be {@code null} to\n   *        denote an anonymous class.\n   *\n   * @param implicitPrototype the implicit prototype\n   *        (a.k.a. {@code [[Prototype]]}) as defined by ECMA-262. If the\n   *        implicit prototype is {@code null} the implicit prototype will be\n   *        set to the {@link JSTypeNative#OBJECT_TYPE}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.PrototypeObjectType#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.jstype.ObjectType, boolean, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  PrototypeObjectType(JSTypeRegistry registry, String className,\n      ObjectType implicitPrototype, boolean nativeType,\n      TemplateTypeMap templateTypeMap) {\n    super(registry, templateTypeMap);\n    this.properties = new PropertyMap();\n    this.properties.setParentSource(this);\n\n    this.className = className;\n    this.nativeType = nativeType;\n    if (nativeType || implicitPrototype != null) {\n      setImplicitPrototype(implicitPrototype);\n    } else {\n      setImplicitPrototype(\n          registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n    }\n  }\n",
        "begin_line": 112,
        "end_line": 127,
        "comment": "\n   * Creates an object type, allowing specification of the implicit prototype,\n   * whether the object is native, and any templatized types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setPrettyPrint#271",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setPrettyPrint(boolean)",
        "snippet": "  void setPrettyPrint(boolean prettyPrint) {\n    this.prettyPrint = prettyPrint;\n  }\n",
        "begin_line": 271,
        "end_line": 273,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getImplicitPrototype#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return implicitPrototypeFallback;\n  }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setImplicitPrototype#295",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  final void setImplicitPrototype(ObjectType implicitPrototype) {\n    checkState(!hasCachedValues());\n    this.implicitPrototypeFallback = implicitPrototype;\n  }\n",
        "begin_line": 295,
        "end_line": 298,
        "comment": "\n   * This should only be reset on the FunctionPrototypeType, only to fix an\n   * incorrectly established prototype chain due to the user having a mismatch\n   * in super class declaration, and only before properties on that type are\n   * processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getReferenceName#300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    if (className != null) {\n      return className;\n    } else if (ownerFunction != null) {\n      return ownerFunction.getReferenceName() + \".prototype\";\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 300,
        "end_line": 309,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasReferenceName#311",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return className != null || ownerFunction != null;\n  }\n",
        "begin_line": 311,
        "end_line": 314,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.isSubtype#316",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  @Override\n  public boolean isSubtype(JSType that) {\n    if (JSType.isSubtypeHelper(this, that)) {\n      return true;\n    }\n\n    // Union types\n    if (that.isUnionType()) {\n      // The static {@code JSType.isSubtype} check already decomposed\n      // union types, so we don't need to check those again.\n      return false;\n    }\n\n    // record types\n    if (that.isRecordType()) {\n      return RecordType.isSubtype(this, that.toMaybeRecordType());\n    }\n\n    // Interfaces\n    // Find all the interfaces implemented by this class and compare each one\n    // to the interface instance.\n    ObjectType thatObj = that.toObjectType();\n    FunctionType thatCtor = thatObj == null ? null : thatObj.getConstructor();\n\n    if (getConstructor() != null && getConstructor().isInterface()) {\n      for (ObjectType thisInterface : getCtorExtendedInterfaces()) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    } else if (thatCtor != null && thatCtor.isInterface()) {\n      Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces();\n      for (ObjectType thisInterface : thisInterfaces) {\n        if (thisInterface.isSubtype(that)) {\n          return true;\n        }\n      }\n    }\n\n    // other prototype based objects\n    if (isUnknownType() || implicitPrototypeChainIsUnknown()) {\n      // If unsure, say 'yes', to avoid spurious warnings.\n      // TODO(user): resolve the prototype chain completely in all cases,\n      // to avoid guessing.\n      return true;\n    }\n    return thatObj != null && isImplicitPrototype(thatObj);\n  }\n",
        "begin_line": 316,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.implicitPrototypeChainIsUnknown#365",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeChainIsUnknown()",
        "snippet": "  private boolean implicitPrototypeChainIsUnknown() {\n    ObjectType p = getImplicitPrototype();\n    while (p != null) {\n      if (p.isUnknownType()) {\n        return true;\n      }\n      p = p.getImplicitPrototype();\n    }\n    return false;\n  }\n",
        "begin_line": 365,
        "end_line": 374,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.hasCachedValues#376",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return super.hasCachedValues();\n  }\n",
        "begin_line": 376,
        "end_line": 379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.isNativeObjectType#382",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.isNativeObjectType()",
        "snippet": "  @Override\n  public boolean isNativeObjectType() {\n    return nativeType;\n  }\n",
        "begin_line": 382,
        "end_line": 385,
        "comment": " Whether this is a built-in object. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.setOwnerFunction#387",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  @Override\n  void setOwnerFunction(FunctionType type) {\n    Preconditions.checkState(ownerFunction == null || type == null);\n    ownerFunction = type;\n  }\n",
        "begin_line": 387,
        "end_line": 391,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getOwnerFunction#393",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getOwnerFunction()",
        "snippet": "  @Override\n  public FunctionType getOwnerFunction() {\n    return ownerFunction;\n  }\n",
        "begin_line": 393,
        "end_line": 396,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrototypeObjectType.getCtorExtendedInterfaces#405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return isFunctionPrototypeType()\n        ? getOwnerFunction().getExtendedInterfaces()\n        : ImmutableList.<ObjectType>of();\n  }\n",
        "begin_line": 405,
        "end_line": 410,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.PropertyMap#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.PropertyMap()",
        "snippet": "  PropertyMap() {\n    this(Maps.<String, Property>newTreeMap());\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.PropertyMap#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.PropertyMap(java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.Property>)",
        "snippet": "  private PropertyMap(Map<String, Property> underlyingMap) {\n    this.properties = underlyingMap;\n  }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PropertyMap.setParentSource#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/PropertyMap.java",
        "class_name": "com.google.javascript.rhino.jstype.PropertyMap",
        "signature": "com.google.javascript.rhino.jstype.PropertyMap.setParentSource(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setParentSource(ObjectType ownerType) {\n    if (this != EMPTY_MAP) {\n      this.parentSource = ownerType;\n    }\n  }\n",
        "begin_line": 91,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Property.Property#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "signature": "com.google.javascript.rhino.jstype.Property.Property(java.lang.String, com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.Node)",
        "snippet": "  Property(String name, JSType type, boolean inferred,\n      Node propertyNode) {\n    this.name = name;\n    this.type = type;\n    this.inferred = inferred;\n    this.propertyNode = propertyNode;\n  }\n",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Property.getType#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/Property.java",
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "signature": "com.google.javascript.rhino.jstype.Property.getType()",
        "snippet": "  @Override\n      public JSType getType() {\n    return type;\n  }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.ObjectType#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  ObjectType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.ObjectType#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.ObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  ObjectType(JSTypeRegistry registry, TemplateTypeMap templateTypeMap) {\n    super(registry, templateTypeMap);\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isUnknownType#552",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isUnknownType()",
        "snippet": "  @Override\n  public boolean isUnknownType() {\n    // If the object is unknown now, check the supertype again,\n    // because it might have been resolved since the last check.\n    if (unknown) {\n      ObjectType implicitProto = getImplicitPrototype();\n      if (implicitProto == null ||\n          implicitProto.isNativeObjectType()) {\n        unknown = false;\n        for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n          if (interfaceType.isUnknownType()) {\n            unknown = true;\n            break;\n          }\n        }\n      } else {\n        unknown = implicitProto.isUnknownType();\n      }\n    }\n    return unknown;\n  }\n",
        "begin_line": 552,
        "end_line": 572,
        "comment": "\n   * We treat this as the unknown type if any of its implicit prototype\n   * properties is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.hasCachedValues#584",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.hasCachedValues()",
        "snippet": "  public boolean hasCachedValues() {\n    return !unknown;\n  }\n",
        "begin_line": 584,
        "end_line": 586,
        "comment": "\n   * Returns true if any cached values have been set for this type.  If true,\n   * then the prototype chain should not be changed, as it might invalidate the\n   * cached values.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.isFunctionPrototypeType#608",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.isFunctionPrototypeType()",
        "snippet": "  @Override\n  public final boolean isFunctionPrototypeType() {\n    return getOwnerFunction() != null;\n  }\n",
        "begin_line": 608,
        "end_line": 611,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.NumberType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.NumberType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NumberType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberType.getDisplayName#100",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "signature": "com.google.javascript.rhino.jstype.NumberType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"number\";\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.NullType#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.NullType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NullType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.toStringHelper#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NullType.getDisplayName#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "signature": "com.google.javascript.rhino.jstype.NullType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"null\";\n  }\n",
        "begin_line": 107,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoType.NoType#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.NoType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoType.isNoType#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "signature": "com.google.javascript.rhino.jstype.NoType.isNoType()",
        "snippet": "  @Override\n  public boolean isNoType() {\n    return true;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoResolvedType.NoResolvedType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.NoResolvedType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoResolvedType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NoObjectType.NoObjectType#66",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.NoObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  NoObjectType(JSTypeRegistry registry) {\n    super(registry, null, null,\n          registry.createArrowType(null, null),\n          null, null, true, true);\n    getInternalArrowType().returnType = this;\n    this.setInstanceType(this);\n  }\n",
        "begin_line": 66,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ModificationVisitor.ModificationVisitor#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ModificationVisitor.java",
        "class_name": "com.google.javascript.rhino.jstype.ModificationVisitor",
        "signature": "com.google.javascript.rhino.jstype.ModificationVisitor.ModificationVisitor(com.google.javascript.rhino.jstype.JSTypeRegistry, boolean)",
        "snippet": "  public ModificationVisitor(JSTypeRegistry registry, boolean visitProperties) {\n    this.registry = registry;\n    this.visitProperties = visitProperties;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.initializeBuiltInTypes#241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeBuiltInTypes()",
        "snippet": "  private void initializeBuiltInTypes() {\n    objectIndexTemplateKey = new TemplateType(this, OBJECT_INDEX_TEMPLATE);\n    objectElementTemplateKey = new TemplateType(this, OBJECT_ELEMENT_TEMPLATE);\n\n    // These locals shouldn't be all caps.\n    BooleanType BOOLEAN_TYPE = new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n\n    NullType NULL_TYPE = new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n\n    NumberType NUMBER_TYPE = new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n\n    StringType STRING_TYPE = new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n\n    UnknownType UNKNOWN_TYPE = new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    UnknownType checkedUnknownType = new UnknownType(this, true);\n    registerNativeType(\n        JSTypeNative.CHECKED_UNKNOWN_TYPE, checkedUnknownType);\n\n    VoidType VOID_TYPE = new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n\n    AllType ALL_TYPE = new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n\n    // Top Level Prototype (the One)\n    // The initializations of TOP_LEVEL_PROTOTYPE and OBJECT_FUNCTION_TYPE\n    // use each other's results, so at least one of them will get null\n    // instead of an actual type; however, this seems to be benign.\n    PrototypeObjectType TOP_LEVEL_PROTOTYPE =\n        new PrototypeObjectType(this, null, null, true, null);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n\n    // Object\n    FunctionType OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Object\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE),\n            null,\n            createTemplateTypeMap(ImmutableList.of(\n                objectIndexTemplateKey, objectElementTemplateKey), null),\n            true, true);\n\n    OBJECT_FUNCTION_TYPE.setPrototype(TOP_LEVEL_PROTOTYPE, null);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n\n    ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n\n    ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n\n    // Function\n    FunctionType FUNCTION_FUNCTION_TYPE =\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE),\n            null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n\n    ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n\n    NoType NO_TYPE = new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n\n    NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n\n    NoObjectType NO_RESOLVED_TYPE = new NoResolvedType(this);\n    registerNativeType(JSTypeNative.NO_RESOLVED_TYPE, NO_RESOLVED_TYPE);\n\n    // Array\n    FunctionType ARRAY_FUNCTION_TYPE =\n      new FunctionType(this, \"Array\", null,\n          createArrowType(createParametersWithVarArgs(ALL_TYPE), null),\n          null,\n          createTemplateTypeMap(ImmutableList.of(\n              objectElementTemplateKey), null),\n          true, true);\n    ARRAY_FUNCTION_TYPE.getInternalArrowType().returnType =\n        ARRAY_FUNCTION_TYPE.getInstanceType();\n\n    ARRAY_FUNCTION_TYPE.getPrototype(); // Force initialization\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n\n    ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n\n    // Boolean\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Boolean\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), BOOLEAN_TYPE),\n            null, null, true, true);\n    BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype(); // Force initialization\n    registerNativeType(\n        JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE,\n        BOOLEAN_OBJECT_FUNCTION_TYPE);\n\n    ObjectType BOOLEAN_OBJECT_TYPE =\n        BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n\n    // Date\n    FunctionType DATE_FUNCTION_TYPE =\n      new FunctionType(this, \"Date\", null,\n          createArrowType(\n              createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,\n                  UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),\n              STRING_TYPE),\n          null, null, true, true);\n    DATE_FUNCTION_TYPE.getPrototype(); // Force initialization\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n\n    ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n\n    // Error\n    FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n\n    ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n\n    // EvalError\n    FunctionType EVAL_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n\n    ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n\n    // RangeError\n    FunctionType RANGE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n\n    ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n\n    // ReferenceError\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE,\n        REFERENCE_ERROR_FUNCTION_TYPE);\n\n    ObjectType REFERENCE_ERROR_TYPE =\n        REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n\n    // SyntaxError\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n\n    ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n\n    // TypeError\n    FunctionType TYPE_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n\n    ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n\n    // URIError\n    FunctionType URI_ERROR_FUNCTION_TYPE =\n        new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(\n        JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n\n    ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n\n    // Number\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"Number\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    NUMBER_OBJECT_FUNCTION_TYPE.getPrototype(); // Force initialization\n    registerNativeType(\n        JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n\n    ObjectType NUMBER_OBJECT_TYPE =\n        NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n\n    // RegExp\n    FunctionType REGEXP_FUNCTION_TYPE =\n      new FunctionType(this, \"RegExp\", null,\n          createArrowType(createOptionalParameters(ALL_TYPE, ALL_TYPE)),\n          null, null, true, true);\n    REGEXP_FUNCTION_TYPE.getInternalArrowType().returnType =\n        REGEXP_FUNCTION_TYPE.getInstanceType();\n\n    REGEXP_FUNCTION_TYPE.getPrototype(); // Force initialization\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n\n    ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n\n    // String\n    FunctionType STRING_OBJECT_FUNCTION_TYPE =\n        new FunctionType(this, \"String\", null,\n            createArrowType(createOptionalParameters(ALL_TYPE), STRING_TYPE),\n            null, null, true, true);\n    STRING_OBJECT_FUNCTION_TYPE.getPrototype(); // Force initialization\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n\n    ObjectType STRING_OBJECT_TYPE =\n        STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(\n        JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n\n    // (null,void)\n    JSType NULL_VOID =\n        createUnionType(NULL_TYPE, VOID_TYPE);\n    registerNativeType(JSTypeNative.NULL_VOID, NULL_VOID);\n\n    // (Object,string,number)\n    JSType OBJECT_NUMBER_STRING =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n\n    // (Object,string,number,boolean)\n    JSType OBJECT_NUMBER_STRING_BOOLEAN =\n        createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,\n        OBJECT_NUMBER_STRING_BOOLEAN);\n\n    // (string,number,boolean)\n    JSType NUMBER_STRING_BOOLEAN =\n        createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,\n        NUMBER_STRING_BOOLEAN);\n\n    // (string,number)\n    JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n\n    // Native object properties are filled in by externs...\n\n    // (String, string)\n    JSType STRING_VALUE_OR_OBJECT_TYPE =\n        createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(\n        JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n\n    // (Number, number)\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE =\n        createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(\n        JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n\n    // unknown function type, i.e. (?...) -> ?\n    FunctionType U2U_FUNCTION_TYPE =\n        createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n\n    // unknown constructor type, i.e. (?...) -> ? with the Unknown type\n    // as instance type\n    FunctionType U2U_CONSTRUCTOR_TYPE =\n        // This is equivalent to\n        // createConstructorType(UNKNOWN_TYPE, true, UNKNOWN_TYPE), but,\n        // in addition, overrides getInstanceType() to return the NoObject type\n        // instead of a new anonymous object.\n        new FunctionType(this, \"Function\", null,\n            createArrowType(\n                createParametersWithVarArgs(UNKNOWN_TYPE),\n                UNKNOWN_TYPE),\n            UNKNOWN_TYPE, null, true, true) {\n          private static final long serialVersionUID = 1L;\n\n          @Override public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(\n                JSTypeNative.FUNCTION_FUNCTION_TYPE);\n          }\n        };\n\n    // The U2U_CONSTRUCTOR is weird, because it's the supertype of its\n    // own constructor.\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(\n        JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n\n    // least function type, i.e. (All...) -> NoType\n    FunctionType LEAST_FUNCTION_TYPE =\n        createNativeFunctionTypeWithVarArgs(NO_TYPE, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n\n    // the 'this' object in the global scope\n    FunctionType GLOBAL_THIS_CTOR =\n        new FunctionType(this, \"global this\", null,\n            createArrowType(createParameters(false, ALL_TYPE), NUMBER_TYPE),\n            null, null, true, true);\n    ObjectType GLOBAL_THIS = GLOBAL_THIS_CTOR.getInstanceType();\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n\n    // greatest function type, i.e. (NoType...) -> All\n    FunctionType GREATEST_FUNCTION_TYPE =\n        createNativeFunctionTypeWithVarArgs(ALL_TYPE, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,\n        GREATEST_FUNCTION_TYPE);\n\n    // Register the prototype property. See the comments below in\n    // registerPropertyOnType about the bootstrapping process.\n    registerPropertyOnType(\"prototype\", OBJECT_FUNCTION_TYPE);\n  }\n",
        "begin_line": 241,
        "end_line": 569,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.JSTypeRegistry#193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)",
        "snippet": "  public JSTypeRegistry(\n      ErrorReporter reporter, boolean tolerateUndefinedValues) {\n    this.reporter = reporter;\n    this.emptyTemplateTypeMap = new TemplateTypeMap(\n        this, ImmutableList.<TemplateType>of(), ImmutableList.<JSType>of());\n    nativeTypes = new JSType[JSTypeNative.values().length];\n    namesToTypes = new HashMap<String, JSType>();\n    resetForTypeCheck();\n    this.tolerateUndefinedValues = tolerateUndefinedValues;\n  }\n",
        "begin_line": 193,
        "end_line": 202,
        "comment": "\n   * Constructs a new type registry populated with the built-in types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getObjectElementKey#208",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getObjectElementKey()",
        "snippet": "  public TemplateType getObjectElementKey() {\n    return this.objectElementTemplateKey;\n  }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n   * @return The template variable corresponding to the property value type for\n   * Javascript Objects and Arrays.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.resetForTypeCheck#232",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resetForTypeCheck()",
        "snippet": "  public void resetForTypeCheck() {\n    typesIndexedByProperty.clear();\n    eachRefTypeIndexedByProperty.clear();\n    initializeBuiltInTypes();\n    namesToTypes.clear();\n    namespaces.clear();\n    initializeRegistry();\n  }\n",
        "begin_line": 232,
        "end_line": 239,
        "comment": "\n   * Reset to run the TypeCheck pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.initializeRegistry#571",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.initializeRegistry()",
        "snippet": "  private void initializeRegistry() {\n    register(getNativeType(JSTypeNative.ARRAY_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.BOOLEAN_TYPE));\n    register(getNativeType(JSTypeNative.DATE_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE));\n    register(getNativeType(JSTypeNative.NULL_TYPE), \"Null\");\n    register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.NUMBER_TYPE));\n    register(getNativeType(JSTypeNative.OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.ERROR_TYPE));\n    register(getNativeType(JSTypeNative.URI_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));\n    register(getNativeType(JSTypeNative.REGEXP_TYPE));\n    register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));\n    register(getNativeType(JSTypeNative.STRING_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE));\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"Undefined\");\n    register(getNativeType(JSTypeNative.VOID_TYPE), \"void\");\n    register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), \"Function\");\n  }\n",
        "begin_line": 571,
        "end_line": 595,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.register#597",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void register(JSType type) {\n    register(type, type.toString());\n  }\n",
        "begin_line": 597,
        "end_line": 599,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.register#601",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.register(com.google.javascript.rhino.jstype.JSType, java.lang.String)",
        "snippet": "  private void register(JSType type, String name) {\n    Preconditions.checkArgument(\n        !name.contains(\"<\"), \"Type names cannot contain template annotations.\");\n\n    namesToTypes.put(name, type);\n\n    // Add all the namespaces in which this name lives.\n    while (name.indexOf('.') > 0) {\n      name = name.substring(0, name.lastIndexOf('.'));\n      namespaces.add(name);\n    }\n  }\n",
        "begin_line": 601,
        "end_line": 612,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.registerNativeType#614",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerNativeType(com.google.javascript.rhino.jstype.JSTypeNative, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void registerNativeType(JSTypeNative typeId, JSType type) {\n    nativeTypes[typeId.ordinal()] = type;\n  }\n",
        "begin_line": 614,
        "end_line": 616,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.registerPropertyOnType#630",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void registerPropertyOnType(String propertyName, JSType type) {\n    UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n    if (typeSet == null) {\n      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n      typesIndexedByProperty.put(propertyName, typeSet);\n    }\n\n    typeSet.addAlternate(type);\n    addReferenceTypeIndexedByProperty(propertyName, type);\n\n    // Clear cached values that depend on typesIndexedByProperty.\n    greatestSubtypeByProperty.remove(propertyName);\n  }\n",
        "begin_line": 630,
        "end_line": 642,
        "comment": "\n   * Tells the type system that {@code owner} may have a property named\n   * {@code propertyName}. This allows the registry to keep track of what\n   * types a property is defined upon.\n   *\n   * This is NOT the same as saying that {@code owner} must have a property\n   * named type. ObjectType#hasProperty attempts to minimize false positives\n   * (\"if we're not sure, then don't type check this property\"). The type\n   * registry, on the other hand, should attempt to minimize false negatives\n   * (\"if this property is assigned anywhere in the program, it must\n   * show up in the type registry\").\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.addReferenceTypeIndexedByProperty#644",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.addReferenceTypeIndexedByProperty(java.lang.String, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private void addReferenceTypeIndexedByProperty(\n      String propertyName, JSType type) {\n    if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {\n      Map<String, ObjectType> typeSet =\n          eachRefTypeIndexedByProperty.get(propertyName);\n      if (typeSet == null) {\n        typeSet = Maps.newHashMap();\n        eachRefTypeIndexedByProperty.put(propertyName, typeSet);\n      }\n      ObjectType objType = (ObjectType) type;\n      typeSet.put(objType.getReferenceName(), objType);\n    } else if (type instanceof NamedType) {\n      addReferenceTypeIndexedByProperty(\n          propertyName, ((NamedType) type).getReferencedType());\n    } else if (type.isUnionType()) {\n      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n        addReferenceTypeIndexedByProperty(propertyName, alternate);\n      }\n    }\n  }\n",
        "begin_line": 644,
        "end_line": 663,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeType#903",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public JSType getNativeType(JSTypeNative typeId) {\n    return nativeTypes[typeId.ordinal()];\n  }\n",
        "begin_line": 903,
        "end_line": 905,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeObjectType#907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public ObjectType getNativeObjectType(JSTypeNative typeId) {\n    return (ObjectType) getNativeType(typeId);\n  }\n",
        "begin_line": 907,
        "end_line": 909,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.getNativeFunctionType#911",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  public FunctionType getNativeFunctionType(JSTypeNative typeId) {\n    return (FunctionType) getNativeType(typeId);\n  }\n",
        "begin_line": 911,
        "end_line": 913,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createOptionalType#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public JSType createOptionalType(JSType type) {\n    if (type instanceof UnknownType || type.isAllType()) {\n      return type;\n    } else {\n      return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));\n    }\n  }\n",
        "begin_line": 997,
        "end_line": 1003,
        "comment": "\n   * Creates a type representing optional values of the given type.\n   * @return the union of the type and the void type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createUnionType#1041",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createUnionType(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public JSType createUnionType(JSType... variants) {\n    UnionTypeBuilder builder = new UnionTypeBuilder(this);\n    for (JSType type : variants) {\n      builder.addAlternate(type);\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1041,
        "end_line": 1047,
        "comment": "\n   * Creates a union type whose variants are the arguments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createArrowType#1077",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType createArrowType(Node parametersNode, JSType returnType) {\n    return new ArrowType(this, parametersNode, returnType);\n  }\n",
        "begin_line": 1077,
        "end_line": 1079,
        "comment": "\n   * Creates an arrow type, an abstract representation of the parameters\n   * and return value of a function.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   * @param returnType the function's return type\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createArrowType#1087",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createArrowType(com.google.javascript.rhino.Node)",
        "snippet": "  ArrowType createArrowType(Node parametersNode) {\n    return new ArrowType(this, parametersNode, null);\n  }\n",
        "begin_line": 1087,
        "end_line": 1089,
        "comment": "\n   * Creates an arrow type with an unknown return type.\n   *\n   * @param parametersNode the parameters' types, formatted as a Node with\n   *     param names and optionality info.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionTypeWithVarArgs#1133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1133,
        "end_line": 1137,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createNativeFunctionTypeWithVarArgs#1146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNativeFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private FunctionType createNativeFunctionTypeWithVarArgs(\n      JSType returnType, JSType... parameterTypes) {\n    return createNativeFunctionType(\n        returnType, createParametersWithVarArgs(parameterTypes));\n  }\n",
        "begin_line": 1146,
        "end_line": 1150,
        "comment": "\n   * Creates a function type. The last parameter type of the function is\n   * considered a variable length argument.\n   *\n   * @param returnType the function's return type\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createParametersWithVarArgs#1254",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createParametersWithVarArgs(JSType... parameterTypes) {\n    return createParameters(true, parameterTypes);\n  }\n",
        "begin_line": 1254,
        "end_line": 1256,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list. The last\n   * parameter type is considered a variable length argument.\n   *\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument.\n   * @return a tree hierarchy representing a typed argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createOptionalParameters#1262",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public Node createOptionalParameters(JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    builder.addOptionalParams(parameterTypes);\n    return builder.build();\n  }\n",
        "begin_line": 1262,
        "end_line": 1266,
        "comment": "\n   * Creates a tree hierarchy representing a typed parameter list in which\n   * every parameter is optional.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createParameters#1278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createParameters(boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {\n    FunctionParamBuilder builder = new FunctionParamBuilder(this);\n    int max = parameterTypes.length - 1;\n    for (int i = 0; i <= max; i++) {\n      if (lastVarArgs && i == max) {\n        builder.addVarArgs(parameterTypes[i]);\n      } else {\n        builder.addRequiredParams(parameterTypes[i]);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 1278,
        "end_line": 1289,
        "comment": "\n   * Creates a tree hierarchy representing a typed argument list.\n   *\n   * @param lastVarArgs whether the last type should considered as a variable\n   *     length argument.\n   * @param parameterTypes the parameter types. The last element of this array\n   *     is considered a variable length argument is {@code lastVarArgs} is\n   *     {@code true}.\n   * @return a tree hierarchy representing a typed argument list\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1298",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public FunctionType createFunctionType(JSType returnType,\n      boolean lastVarArgs, JSType... parameterTypes) {\n    if (lastVarArgs) {\n      return createFunctionTypeWithVarArgs(returnType, parameterTypes);\n    } else {\n      return createFunctionType(returnType, parameterTypes);\n    }\n  }\n",
        "begin_line": 1298,
        "end_line": 1305,
        "comment": "\n   * Creates a function type.\n   * @param returnType the function's return type\n   * @param lastVarArgs whether the last parameter type should be considered as\n   * an extensible var_args parameter\n   * @param parameterTypes the parameters' types\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createFunctionType#1341",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionType createFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .build();\n  }\n",
        "begin_line": 1341,
        "end_line": 1347,
        "comment": "\n   * @param parameters the function's parameters or {@code null}\n   *        to indicate that the parameter types are unknown.\n   * @param returnType the function's return type or {@code null} to indicate\n   *        that the return type is unknown.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createNativeFunctionType#1349",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createNativeFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.Node)",
        "snippet": "  private FunctionType createNativeFunctionType(\n      JSType returnType, Node parameters) {\n    return new FunctionBuilder(this)\n        .withParamsNode(parameters)\n        .withReturnType(returnType)\n        .forNativeType()\n        .build();\n  }\n",
        "begin_line": 1349,
        "end_line": 1356,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeRegistry.createTemplateTypeMap#1486",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.createTemplateTypeMap(com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TemplateType>, com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSType>)",
        "snippet": "  public TemplateTypeMap createTemplateTypeMap(\n      ImmutableList<TemplateType> templateKeys,\n      ImmutableList<JSType> templateValues) {\n    templateKeys = templateKeys == null ?\n        ImmutableList.<TemplateType>of() : templateKeys;\n    templateValues = templateValues == null ?\n        ImmutableList.<JSType>of() : templateValues;\n\n    return (templateKeys.isEmpty() && templateValues.isEmpty()) ?\n        emptyTemplateTypeMap :\n        new TemplateTypeMap(this, templateKeys, templateValues);\n  }\n",
        "begin_line": 1486,
        "end_line": 1497,
        "comment": "\n   * Creates a template type map from the specified list of template keys and\n   * template value types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.JSType#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  JSType(JSTypeRegistry registry) {\n    this(registry, null);\n  }\n",
        "begin_line": 107,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.JSType#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.JSType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.TemplateTypeMap)",
        "snippet": "  JSType(JSTypeRegistry registry, TemplateTypeMap templateTypeMap) {\n    this.registry = registry;\n\n    this.templateTypeMap = templateTypeMap == null ?\n        registry.createTemplateTypeMap(null, null) : templateTypeMap;\n  }\n",
        "begin_line": 111,
        "end_line": 116,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.getNativeType#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)",
        "snippet": "  JSType getNativeType(JSTypeNative typeId) {\n    return registry.getNativeType(typeId);\n  }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": "\n   * Utility method for less verbose code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoType#163",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoType()",
        "snippet": "  public boolean isNoType() {\n    return false;\n  }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoResolvedType#167",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoResolvedType()",
        "snippet": "  public boolean isNoResolvedType() {\n    return false;\n  }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNoObjectType#171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNoObjectType()",
        "snippet": "  public boolean isNoObjectType() {\n    return false;\n  }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isEmptyType#175",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEmptyType()",
        "snippet": "  public final boolean isEmptyType() {\n    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n        (registry.getNativeFunctionType(\n             JSTypeNative.LEAST_FUNCTION_TYPE) == this);\n  }\n",
        "begin_line": 175,
        "end_line": 179,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isAllType#252",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isAllType()",
        "snippet": "  public boolean isAllType() {\n    return false;\n  }\n",
        "begin_line": 252,
        "end_line": 254,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isUnknownType#256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnknownType()",
        "snippet": "  public boolean isUnknownType() {\n    return false;\n  }\n",
        "begin_line": 256,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isUnionType#264",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isUnionType()",
        "snippet": "  public final boolean isUnionType() {\n    return toMaybeUnionType() != null;\n  }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeUnionType#323",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeUnionType()",
        "snippet": "  public UnionType toMaybeUnionType() {\n    return null;\n  }\n",
        "begin_line": 323,
        "end_line": 325,
        "comment": "\n   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n   *\n   * Named in honor of Haskell's Maybe type constructor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isFunctionType#333",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isFunctionType()",
        "snippet": "  public final boolean isFunctionType() {\n    return toMaybeFunctionType() != null;\n  }\n",
        "begin_line": 333,
        "end_line": 335,
        "comment": " Returns true if toMaybeFunctionType returns a non-null FunctionType. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeFunctionType#349",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType()",
        "snippet": "  public FunctionType toMaybeFunctionType() {\n    return null;\n  }\n",
        "begin_line": 349,
        "end_line": 351,
        "comment": "\n   * Downcasts this to a FunctionType, or returns null if this is not\n   * a function.\n   *\n   * For the purposes of this function, we define a MaybeFunctionType as any\n   * type in the sub-lattice\n   * { x | LEAST_FUNCTION_TYPE <= x <= GREATEST_FUNCTION_TYPE }\n   * This definition excludes bottom types like NoType and NoObjectType.\n   *\n   * This definition is somewhat arbitrary and axiomatic, but this is the\n   * definition that makes the most sense for the most callers.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isRecordType#386",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isRecordType()",
        "snippet": "  public boolean isRecordType() {\n    return toMaybeRecordType() != null;\n  }\n",
        "begin_line": 386,
        "end_line": 388,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeRecordType#394",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeRecordType()",
        "snippet": "  RecordType toMaybeRecordType() {\n    return null;\n  }\n",
        "begin_line": 394,
        "end_line": 396,
        "comment": "\n   * Downcasts this to a RecordType, or returns null if this is not\n   * a RecordType.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isTemplatizedType#398",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isTemplatizedType()",
        "snippet": "  public final boolean isTemplatizedType() {\n    return toMaybeTemplatizedType() != null;\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeTemplatizedType#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeTemplatizedType()",
        "snippet": "  public TemplatizedType toMaybeTemplatizedType() {\n    return null;\n  }\n",
        "begin_line": 406,
        "end_line": 408,
        "comment": "\n   * Downcasts this to a TemplatizedType, or returns null if this is not\n   * a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isTemplateType#417",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isTemplateType()",
        "snippet": "  public final boolean isTemplateType() {\n    return toMaybeTemplateType() != null;\n  }\n",
        "begin_line": 417,
        "end_line": 419,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toMaybeTemplateType#425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toMaybeTemplateType()",
        "snippet": "  public TemplateType toMaybeTemplateType() {\n    return null;\n  }\n",
        "begin_line": 425,
        "end_line": 427,
        "comment": "\n   * Downcasts this to a TemplateType, or returns null if this is not\n   * a function.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.hasAnyTemplateTypes#436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hasAnyTemplateTypes()",
        "snippet": "  public boolean hasAnyTemplateTypes() {\n    if (!this.inTemplatedCheckVisit) {\n      this.inTemplatedCheckVisit = true;\n      boolean result = hasAnyTemplateTypesInternal();\n      this.inTemplatedCheckVisit = false;\n      return result;\n    } else {\n      // prevent infinite recursion, this is \"not yet\".\n      return false;\n    }\n  }\n",
        "begin_line": 436,
        "end_line": 446,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.hasAnyTemplateTypesInternal#448",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hasAnyTemplateTypesInternal()",
        "snippet": "  boolean hasAnyTemplateTypesInternal() {\n    return templateTypeMap.hasAnyTemplateTypesInternal();\n  }\n",
        "begin_line": 448,
        "end_line": 450,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.getTemplateTypeMap#455",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.getTemplateTypeMap()",
        "snippet": "  public TemplateTypeMap getTemplateTypeMap() {\n    return templateTypeMap;\n  }\n",
        "begin_line": 455,
        "end_line": 457,
        "comment": "\n   * Returns the template type map associated with this type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isNominalType#487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isNominalType()",
        "snippet": "  public boolean isNominalType() {\n    return false;\n  }\n",
        "begin_line": 487,
        "end_line": 489,
        "comment": "\n   * Whether this type is a nominal type (a named instance object or\n   * a named enum).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isEquivalentTo#542",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isEquivalentTo(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public final boolean isEquivalentTo(JSType that) {\n    return checkEquivalenceHelper(that, EquivalenceMethod.IDENTITY);\n  }\n",
        "begin_line": 542,
        "end_line": 544,
        "comment": "\n   * Checks if two types are equivalent.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.checkEquivalenceHelper#570",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.checkEquivalenceHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.EquivalenceMethod)",
        "snippet": "  boolean checkEquivalenceHelper(\n      final JSType that, EquivalenceMethod eqMethod) {\n    if (this == that) {\n      return true;\n    }\n\n    boolean thisUnknown = isUnknownType();\n    boolean thatUnknown = that.isUnknownType();\n    if (thisUnknown || thatUnknown) {\n      if (eqMethod == EquivalenceMethod.INVARIANT) {\n        // If we're checking for invariance, the unknown type is invariant\n        // with everyone.\n        return true;\n      } else if (eqMethod == EquivalenceMethod.DATA_FLOW) {\n        // If we're checking data flow, then two types are the same if they're\n        // both unknown.\n        return thisUnknown && thatUnknown;\n      } else if (thisUnknown && thatUnknown &&\n          (isNominalType() ^ that.isNominalType())) {\n        // If they're both unknown, but one is a nominal type and the other\n        // is not, then we should fail out immediately. This ensures that\n        // we won't unbox the unknowns further down.\n        return false;\n      }\n    }\n\n    if (isUnionType() && that.isUnionType()) {\n      return toMaybeUnionType().checkUnionEquivalenceHelper(\n          that.toMaybeUnionType(), eqMethod);\n    }\n\n    if (isFunctionType() && that.isFunctionType()) {\n      return toMaybeFunctionType().checkFunctionEquivalenceHelper(\n          that.toMaybeFunctionType(), eqMethod);\n    }\n\n    if (isRecordType() && that.isRecordType()) {\n      return toMaybeRecordType().checkRecordEquivalenceHelper(\n          that.toMaybeRecordType(), eqMethod);\n    }\n\n    if (!getTemplateTypeMap().checkEquivalenceHelper(\n        that.getTemplateTypeMap(), eqMethod)) {\n      return false;\n    }\n\n    if (isNominalType() && that.isNominalType()) {\n      // TODO(johnlenz): is this valid across scopes?\n      return getConcreteNominalTypeName(this.toObjectType()).equals(\n          getConcreteNominalTypeName(that.toObjectType()));\n    }\n\n    if (isTemplateType() && that.isTemplateType()) {\n      // TemplateType are they same only if they are object identical,\n      // which we check at the start of this function.\n      return false;\n    }\n\n    // Unbox other proxies.\n    if (this instanceof ProxyObjectType) {\n      return ((ProxyObjectType) this)\n          .getReferencedTypeInternal().checkEquivalenceHelper(\n              that, eqMethod);\n    }\n\n    if (that instanceof ProxyObjectType) {\n      return checkEquivalenceHelper(\n          ((ProxyObjectType) that).getReferencedTypeInternal(),\n          eqMethod);\n    }\n\n    // Relies on the fact that for the base {@link JSType}, only one\n    // instance of each sub-type will ever be created in a given registry, so\n    // there is no need to verify members. If the object pointers are not\n    // identical, then the type member must be different.\n    return false;\n  }\n",
        "begin_line": 570,
        "end_line": 646,
        "comment": "\n   * An equivalence visitor.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.hashCode#671",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return System.identityHashCode(this);\n  }\n",
        "begin_line": 671,
        "end_line": 674,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toObjectType#791",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toObjectType()",
        "snippet": "  public ObjectType toObjectType() {\n    return this instanceof ObjectType ? (ObjectType) this : null;\n  }\n",
        "begin_line": 791,
        "end_line": 793,
        "comment": "\n   * Casts this to an ObjectType, or returns null if this is not an ObjectType.\n   * If this is a scalar type, it will *not* be converted to an object type.\n   * If you want to simulate JS autoboxing or dereferencing, you should use\n   * autoboxesTo() or dereference().\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isSubtype#1248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtype(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean isSubtype(JSType that) {\n    return isSubtypeHelper(this, that);\n  }\n",
        "begin_line": 1248,
        "end_line": 1250,
        "comment": "\n   * Checks whether {@code this} is a subtype of {@code that}.<p>\n   *\n   * Subtyping rules:\n   * <ul>\n   * <li>(unknown) &mdash; every type is a subtype of the Unknown type.</li>\n   * <li>(no) &mdash; the No type is a subtype of every type.</li>\n   * <li>(no-object) &mdash; the NoObject type is a subtype of every object\n   * type (i.e. subtypes of the Object type).</li>\n   * <li>(ref) &mdash; a type is a subtype of itself.</li>\n   * <li>(union-l) &mdash; A union type is a subtype of a type U if all the\n   * union type's constituents are a subtype of U. Formally<br>\n   * {@code (T<sub>1</sub>, &hellip;, T<sub>n</sub>) &lt;: U} if and only\n   * {@code T<sub>k</sub> &lt;: U} for all {@code k &isin; 1..n}.</li>\n   * <li>(union-r) &mdash; A type U is a subtype of a union type if it is a\n   * subtype of one of the union type's constituents. Formally<br>\n   * {@code U &lt;: (T<sub>1</sub>, &hellip;, T<sub>n</sub>)} if and only\n   * if {@code U &lt;: T<sub>k</sub>} for some index {@code k}.</li>\n   * <li>(objects) &mdash; an Object {@code O<sub>1</sub>} is a subtype\n   * of an object {@code O<sub>2</sub>} if it has more properties\n   * than {@code O<sub>2</sub>} and all common properties are\n   * pairwise subtypes.</li>\n   * </ul>\n   *\n   * @return {@code this &lt;: that}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isSubtypeHelper#1256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isSubtypeHelper(JSType thisType, JSType thatType) {\n    // unknown\n    if (thatType.isUnknownType()) {\n      return true;\n    }\n    // all type\n    if (thatType.isAllType()) {\n      return true;\n    }\n    // equality\n    if (thisType.isEquivalentTo(thatType)) {\n      return true;\n    }\n    // unions\n    if (thatType.isUnionType()) {\n      UnionType union = thatType.toMaybeUnionType();\n      for (JSType element : union.alternates) {\n        if (thisType.isSubtype(element)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // TemplateTypeMaps. This check only returns false if the TemplateTypeMaps\n    // are not equivalent.\n    TemplateTypeMap thisTypeParams = thisType.getTemplateTypeMap();\n    TemplateTypeMap thatTypeParams = thatType.getTemplateTypeMap();\n    boolean templateMatch = true;\n    if (isExemptFromTemplateTypeInvariance(thatType)) {\n      // Array and Object are exempt from template type invariance; their\n      // template types maps are considered a match only if the ObjectElementKey\n      // values are subtypes/supertypes of one another.\n      TemplateType key = thisType.registry.getObjectElementKey();\n      JSType thisElement = thisTypeParams.getTemplateType(key);\n      JSType thatElement = thatTypeParams.getTemplateType(key);\n\n      templateMatch = thisElement.isSubtype(thatElement)\n          || thatElement.isSubtype(thisElement);\n    } else {\n      templateMatch = thisTypeParams.checkEquivalenceHelper(\n          thatTypeParams, EquivalenceMethod.INVARIANT);\n    }\n    if (!templateMatch) {\n      return false;\n    }\n\n    // Templatized types. The above check guarantees TemplateTypeMap\n    // equivalence; check if the base type is a subtype.\n    if (thisType.isTemplatizedType()) {\n      return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(\n              thatType);\n    }\n\n    // proxy types\n    if (thatType instanceof ProxyObjectType) {\n      return thisType.isSubtype(\n          ((ProxyObjectType) thatType).getReferencedTypeInternal());\n    }\n    return false;\n  }\n",
        "begin_line": 1256,
        "end_line": 1316,
        "comment": "\n   * A generic implementation meant to be used as a helper for common subtyping\n   * cases.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.isExemptFromTemplateTypeInvariance#1322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.isExemptFromTemplateTypeInvariance(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  static boolean isExemptFromTemplateTypeInvariance(JSType type) {\n    ObjectType objType = type.toObjectType();\n    return objType == null ||\n        \"Array\".equals(objType.getReferenceName()) ||\n        \"Object\".equals(objType.getReferenceName());\n  }\n",
        "begin_line": 1322,
        "end_line": 1327,
        "comment": "\n   * Determines if the specified type is exempt from standard invariant\n   * templatized typing rules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSType.toString#1425",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "signature": "com.google.javascript.rhino.jstype.JSType.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return toStringHelper(false);\n  }\n",
        "begin_line": 1425,
        "end_line": 1428,
        "comment": "\n   * A string representation of this type, suitable for printing\n   * in warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.InstanceObjectType#58",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.InstanceObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.jstype.FunctionType, boolean)",
        "snippet": "  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,\n                     boolean isNativeType) {\n    super(registry, null, null, isNativeType, constructor.getTemplateTypeMap());\n    Preconditions.checkNotNull(constructor);\n    this.constructor = constructor;\n  }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getReferenceName#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getReferenceName()",
        "snippet": "  @Override\n  public String getReferenceName() {\n    return getConstructor().getReferenceName();\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.hasReferenceName#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hasReferenceName()",
        "snippet": "  @Override\n  public boolean hasReferenceName() {\n    return getConstructor().hasReferenceName();\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getImplicitPrototype#75",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getImplicitPrototype()",
        "snippet": "  @Override\n  public ObjectType getImplicitPrototype() {\n    return getConstructor().getPrototype();\n  }\n",
        "begin_line": 75,
        "end_line": 78,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getConstructor#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getConstructor()",
        "snippet": "  @Override\n  public FunctionType getConstructor() {\n    return constructor;\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.toStringHelper#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (constructor.hasReferenceName()) {\n      return constructor.getReferenceName();\n    } else {\n      return super.toStringHelper(forAnnotations);\n    }\n  }\n",
        "begin_line": 95,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.isNominalType#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.isNominalType()",
        "snippet": "  @Override\n  public boolean isNominalType() {\n    return hasReferenceName();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.hashCode#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    if (hasReferenceName()) {\n      return getReferenceName().hashCode();\n    } else {\n      return super.hashCode();\n    }\n  }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "\n   * If this is equal to a NamedType object, its hashCode must be equal\n   * to the hashCode of the NamedType object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "InstanceObjectType.getCtorExtendedInterfaces#174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.getCtorExtendedInterfaces()",
        "snippet": "  @Override\n  public Iterable<ObjectType> getCtorExtendedInterfaces() {\n    return getConstructor().getExtendedInterfaces();\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.FunctionType#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.FunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ArrowType, com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.TemplateTypeMap, boolean, boolean)",
        "snippet": "  FunctionType(JSTypeRegistry registry, String name, Node source,\n               ArrowType arrowType, JSType typeOfThis,\n               TemplateTypeMap templateTypeMap,\n               boolean isConstructor, boolean nativeType) {\n    super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType, templateTypeMap);\n    setPrettyPrint(true);\n\n    Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());\n    Preconditions.checkNotNull(arrowType);\n    this.source = source;\n    if (isConstructor) {\n      this.kind = Kind.CONSTRUCTOR;\n      this.propAccess = PropAccess.ANY;\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);\n    } else {\n      this.kind = Kind.ORDINARY;\n      this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n    }\n    this.call = arrowType;\n  }\n",
        "begin_line": 134,
        "end_line": 159,
        "comment": " Creates an instance for a function that might be a constructor. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.isConstructor#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isConstructor()",
        "snippet": "  @Override\n  public boolean isConstructor() {\n    return kind == Kind.CONSTRUCTOR;\n  }\n",
        "begin_line": 192,
        "end_line": 195,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.isInterface#197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.isInterface()",
        "snippet": "  @Override\n  public boolean isInterface() {\n    return kind == Kind.INTERFACE;\n  }\n",
        "begin_line": 197,
        "end_line": 200,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.toMaybeFunctionType#255",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.toMaybeFunctionType()",
        "snippet": "  @Override\n  public FunctionType toMaybeFunctionType() {\n    return this;\n  }\n",
        "begin_line": 255,
        "end_line": 258,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getInternalArrowType#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInternalArrowType()",
        "snippet": "  ArrowType getInternalArrowType() {\n    return call;\n  }\n",
        "begin_line": 332,
        "end_line": 334,
        "comment": " Gets the internal arrow type. For use by subclasses only. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getPrototype#366",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getPrototype()",
        "snippet": "  public ObjectType getPrototype() {\n    // lazy initialization of the prototype field\n    if (prototypeSlot == null) {\n      String refName = getReferenceName();\n      if (refName == null) {\n        // Someone is trying to access the prototype of a structural function.\n        // We don't want to give real properties to this prototype, because\n        // then it would propagate to all structural functions.\n        setPrototypeNoCheck(\n           registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE),\n           null);\n      } else {\n        setPrototype(\n            new PrototypeObjectType(\n                registry,\n                getReferenceName() + \".prototype\",\n                registry.getNativeObjectType(OBJECT_TYPE),\n                isNativeObjectType(), null),\n            null);\n      }\n    }\n    return (ObjectType) prototypeSlot.getType();\n  }\n",
        "begin_line": 366,
        "end_line": 388,
        "comment": "\n   * Gets the {@code prototype} property of this function type. This is\n   * equivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#395",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  public void setPrototypeBasedOn(ObjectType baseType) {\n    setPrototypeBasedOn(baseType, null);\n  }\n",
        "begin_line": 395,
        "end_line": 397,
        "comment": "\n   * Sets the prototype, creating the prototype object from the given\n   * base type.\n   * @param baseType The base type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeBasedOn#399",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeBasedOn(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  void setPrototypeBasedOn(ObjectType baseType, Node propertyNode) {\n    // This is a bit weird. We need to successfully handle these\n    // two cases:\n    // Foo.prototype = new Bar();\n    // and\n    // Foo.prototype = {baz: 3};\n    // In the first case, we do not want new properties to get\n    // added to Bar. In the second case, we do want new properties\n    // to get added to the type of the anonymous object.\n    //\n    // We handle this by breaking it into two cases:\n    //\n    // In the first case, we create a new PrototypeObjectType and set\n    // its implicit prototype to the type being assigned. This ensures\n    // that Bar will not get any properties of Foo.prototype, but properties\n    // later assigned to Bar will get inherited properly.\n    //\n    // In the second case, we just use the anonymous object as the prototype.\n    if (baseType.hasReferenceName() ||\n        isNativeObjectType() ||\n        baseType.isFunctionPrototypeType()) {\n      baseType = new PrototypeObjectType(\n          registry, getReferenceName() + \".prototype\", baseType);\n    }\n    setPrototype(baseType, propertyNode);\n  }\n",
        "begin_line": 399,
        "end_line": 424,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototype#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototype(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  boolean setPrototype(ObjectType prototype, Node propertyNode) {\n    if (prototype == null) {\n      return false;\n    }\n    // getInstanceType fails if the function is not a constructor\n    if (isConstructor() && prototype == getInstanceType()) {\n      return false;\n    }\n    return setPrototypeNoCheck(prototype, propertyNode);\n  }\n",
        "begin_line": 440,
        "end_line": 449,
        "comment": "\n   * Sets the prototype.\n   * @param prototype the prototype. If this value is {@code null} it will\n   *        silently be discarded.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setPrototypeNoCheck#452",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setPrototypeNoCheck(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.Node)",
        "snippet": "  private boolean setPrototypeNoCheck(ObjectType prototype, Node propertyNode) {\n    ObjectType oldPrototype = prototypeSlot == null\n        ? null : (ObjectType) prototypeSlot.getType();\n    boolean replacedPrototype = oldPrototype != null;\n\n    this.prototypeSlot = new Property(\"prototype\", prototype, true,\n        propertyNode == null ? source : propertyNode);\n    prototype.setOwnerFunction(this);\n\n    if (oldPrototype != null) {\n      // Disassociating the old prototype makes this easier to debug--\n      // we don't have to worry about two prototypes running around.\n      oldPrototype.setOwnerFunction(null);\n    }\n\n    if (isConstructor() || isInterface()) {\n      FunctionType superClass = getSuperClassConstructor();\n      if (superClass != null) {\n        superClass.addSubType(this);\n      }\n\n      if (isInterface()) {\n        for (ObjectType interfaceType : getExtendedInterfaces()) {\n          if (interfaceType.getConstructor() != null) {\n            interfaceType.getConstructor().addSubType(this);\n          }\n        }\n      }\n    }\n\n    if (replacedPrototype) {\n      clearCachedValues();\n    }\n\n    return true;\n  }\n",
        "begin_line": 452,
        "end_line": 487,
        "comment": " Set the prototype without doing any sanity checks. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getExtendedInterfaces#579",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getExtendedInterfaces()",
        "snippet": "  public Iterable<ObjectType> getExtendedInterfaces() {\n    return extendedInterfaces;\n  }\n",
        "begin_line": 579,
        "end_line": 581,
        "comment": " Returns interfaces directly extended by an interface ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getSuperClassConstructor#848",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getSuperClassConstructor()",
        "snippet": "  public FunctionType getSuperClassConstructor() {\n    Preconditions.checkArgument(isConstructor() || isInterface());\n    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();\n    if (maybeSuperInstanceType == null) {\n      return null;\n    }\n    return maybeSuperInstanceType.getConstructor();\n  }\n",
        "begin_line": 848,
        "end_line": 855,
        "comment": "\n   * Given a constructor or an interface type, get its superclass constructor\n   * or {@code null} if none exists.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.getInstanceType#1078",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.getInstanceType()",
        "snippet": "  public ObjectType getInstanceType() {\n    Preconditions.checkState(hasInstanceType());\n    return typeOfThis.toObjectType();\n  }\n",
        "begin_line": 1078,
        "end_line": 1081,
        "comment": "\n   * Gets the type of instance of this function.\n   * @throws IllegalStateException if this function is not a constructor\n   *         (see {@link #isConstructor()}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.setInstanceType#1087",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.setInstanceType(com.google.javascript.rhino.jstype.ObjectType)",
        "snippet": "  void setInstanceType(ObjectType instanceType) {\n    typeOfThis = instanceType;\n  }\n",
        "begin_line": 1087,
        "end_line": 1089,
        "comment": "\n   * Sets the instance type. This should only be used for special\n   * native types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.hasInstanceType#1094",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasInstanceType()",
        "snippet": "  public boolean hasInstanceType() {\n    return isConstructor() || isInterface();\n  }\n",
        "begin_line": 1094,
        "end_line": 1096,
        "comment": "\n   * Returns whether this function type has an instance type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.addSubType#1133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.addSubType(com.google.javascript.rhino.jstype.FunctionType)",
        "snippet": "  private void addSubType(FunctionType subType) {\n    if (subTypes == null) {\n      subTypes = Lists.newArrayList();\n    }\n    subTypes.add(subType);\n  }\n",
        "begin_line": 1133,
        "end_line": 1138,
        "comment": " Adds a type to the list of subtypes for this type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionType.hasCachedValues#1170",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.hasCachedValues()",
        "snippet": "  @Override\n  public boolean hasCachedValues() {\n    return prototypeSlot != null || super.hasCachedValues();\n  }\n",
        "begin_line": 1170,
        "end_line": 1173,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.FunctionParamBuilder#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.FunctionParamBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionParamBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 54,
        "end_line": 56,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addRequiredParams#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addRequiredParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addRequiredParams(JSType ...types) {\n    if (hasOptionalOrVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(type);\n    }\n    return true;\n  }\n",
        "begin_line": 62,
        "end_line": 71,
        "comment": "\n   * Add parameters of the given type to the end of the param list.\n   * @return False if this is called after optional params are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addOptionalParams#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addOptionalParams(com.google.javascript.rhino.jstype.JSType...)",
        "snippet": "  public boolean addOptionalParams(JSType ...types) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    for (JSType type : types) {\n      newParameter(registry.createOptionalType(type)).setOptionalArg(true);\n    }\n    return true;\n  }\n",
        "begin_line": 79,
        "end_line": 88,
        "comment": "\n   * Add optional parameters of the given type to the end of the param list.\n   * @param types Types for each optional parameter. The builder will make them\n   *     undefine-able.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.addVarArgs#94",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.addVarArgs(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public boolean addVarArgs(JSType type) {\n    if (hasVarArgs()) {\n      return false;\n    }\n\n    // There are two types of variable argument functions:\n    // 1) Programmer-defined var args\n    // 2) Native bottom types that can accept any argument.\n    // For the first one, \"undefined\" is a valid value for all arguments.\n    // For the second, we do not want to cast it up to undefined.\n    if (!type.isEmptyType()) {\n      type = registry.createOptionalType(type);\n    }\n    newParameter(type).setVarArgs(true);\n    return true;\n  }\n",
        "begin_line": 94,
        "end_line": 109,
        "comment": "\n   * Add variable arguments to the end of the parameter list.\n   * @return False if this is called after var args are added.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.newParameter#134",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.newParameter(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  private Node newParameter(JSType type) {\n    Node paramNode = Node.newString(Token.NAME, \"\");\n    paramNode.setJSType(type);\n    root.addChildToBack(paramNode);\n    return paramNode;\n  }\n",
        "begin_line": 134,
        "end_line": 139,
        "comment": " Add a parameter to the list with the given type.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.build#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.build()",
        "snippet": "  public Node build() {\n    return root;\n  }\n",
        "begin_line": 141,
        "end_line": 143,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.hasOptionalOrVarArgs#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasOptionalOrVarArgs()",
        "snippet": "  private boolean hasOptionalOrVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null &&\n        (lastChild.isOptionalArg() || lastChild.isVarArgs());\n  }\n",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionParamBuilder.hasVarArgs#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.hasVarArgs()",
        "snippet": "  public boolean hasVarArgs() {\n    Node lastChild = root.getLastChild();\n    return lastChild != null && lastChild.isVarArgs();\n  }\n",
        "begin_line": 151,
        "end_line": 154,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.FunctionBuilder#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.FunctionBuilder(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  public FunctionBuilder(JSTypeRegistry registry) {\n    this.registry = registry;\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.withParamsNode#90",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withParamsNode(com.google.javascript.rhino.Node)",
        "snippet": "  public FunctionBuilder withParamsNode(Node parametersNode) {\n    this.parametersNode = parametersNode;\n    return this;\n  }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\n   * Set the parameters of the function type with a specially-formatted node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.withReturnType#96",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.withReturnType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public FunctionBuilder withReturnType(JSType returnType) {\n    this.returnType = returnType;\n    return this;\n  }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": " Set the return type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.forNativeType#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.forNativeType()",
        "snippet": "  FunctionBuilder forNativeType() {\n    this.isNativeType = true;\n    return this;\n  }\n",
        "begin_line": 141,
        "end_line": 144,
        "comment": " Make this a native type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "FunctionBuilder.build#160",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.build()",
        "snippet": "  public FunctionType build() {\n    return new FunctionType(registry, name, sourceNode,\n        new ArrowType(registry, parametersNode, returnType, inferredReturnType),\n        typeOfThis, templateTypeMap, isConstructor, isNativeType);\n  }\n",
        "begin_line": 160,
        "end_line": 164,
        "comment": " Construct a new function type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ErrorFunctionType.ErrorFunctionType#50",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.ErrorFunctionType(com.google.javascript.rhino.jstype.JSTypeRegistry, java.lang.String)",
        "snippet": "  ErrorFunctionType(JSTypeRegistry registry, String name) {\n    super(\n        registry, name, null,\n        registry.createArrowType(\n            registry.createOptionalParameters(\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE),\n                registry.getNativeType(ALL_TYPE)),\n            null),\n        null, null, true, true);\n\n    // NOTE(nicksantos): Errors have the weird behavior in that they can\n    // be called as functions, and they will return instances of themselves.\n    // Error('x') instanceof Error => true\n    //\n    // In user-defined types, we would deal with this case by creating\n    // a NamedType with the name \"Error\" and then resolve it later.\n    //\n    // For native types, we don't really want the native types to\n    // depend on type-resolution. So we just set the return type manually\n    // at the end of construction.\n    //\n    // There's similar logic in JSTypeRegistry for Array and RegExp.\n    getInternalArrowType().returnType = getInstanceType();\n  }\n",
        "begin_line": 50,
        "end_line": 74,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.BooleanType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.BooleanType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  BooleanType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.toStringHelper#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.toStringHelper(boolean)",
        "snippet": "  @Override\n  String toStringHelper(boolean forAnnotations) {\n    return getDisplayName();\n  }\n",
        "begin_line": 101,
        "end_line": 104,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanType.getDisplayName#106",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.getDisplayName()",
        "snippet": "  @Override\n  public String getDisplayName() {\n    return \"boolean\";\n  }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrowType.ArrowType#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType) {\n    this(registry, parameters, returnType, false);\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrowType.ArrowType#67",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.ArrowType(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType, boolean)",
        "snippet": "  ArrowType(JSTypeRegistry registry, Node parameters,\n      JSType returnType, boolean returnTypeInferred) {\n    super(registry);\n\n    this.parameters = parameters == null ?\n        registry.createParametersWithVarArgs(getNativeType(UNKNOWN_TYPE)) :\n        parameters;\n    this.returnType = returnType == null ?\n        getNativeType(UNKNOWN_TYPE) : returnType;\n    this.returnTypeInferred = returnTypeInferred;\n  }\n",
        "begin_line": 67,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "AllType.AllType#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.AllType(com.google.javascript.rhino.jstype.JSTypeRegistry)",
        "snippet": "  AllType(JSTypeRegistry registry) {\n    super(registry);\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "AllType.isAllType#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "signature": "com.google.javascript.rhino.jstype.AllType.isAllType()",
        "snippet": "  @Override\n  public boolean isAllType() {\n    return true;\n  }\n",
        "begin_line": 56,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setJSType#1845",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSType(com.google.javascript.rhino.jstype.JSType)",
        "snippet": "  public void setJSType(JSType jsType) {\n      this.jsType = jsType;\n  }\n",
        "begin_line": 1845,
        "end_line": 1847,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setVarArgs#1910",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setVarArgs(boolean)",
        "snippet": "  public void setVarArgs(boolean varArgs) {\n    putBooleanProp(VAR_ARGS_NAME, varArgs);\n  }\n",
        "begin_line": 1910,
        "end_line": 1912,
        "comment": "\n   * Sets whether this node is a variable length argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setOptionalArg#1928",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setOptionalArg(boolean)",
        "snippet": "  public void setOptionalArg(boolean optionalArg) {\n    putBooleanProp(OPT_ARG_NAME, optionalArg);\n  }\n",
        "begin_line": 1928,
        "end_line": 1930,
        "comment": "\n   * Sets whether this node is an optional argument node. This\n   * method is meaningful only on {@link Token#NAME} nodes\n   * used to define a {@link Token#FUNCTION}'s argument list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isAssign#2233",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isAssign()",
        "snippet": "  public boolean isAssign() {\n    return this.getType() == Token.ASSIGN;\n  }\n",
        "begin_line": 2233,
        "end_line": 2235,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isComma#2265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isComma()",
        "snippet": "  public boolean isComma() {\n    return this.getType() == Token.COMMA;\n  }\n",
        "begin_line": 2265,
        "end_line": 2267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isEmpty#2293",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isEmpty()",
        "snippet": "  public boolean isEmpty() {\n    return this.getType() == Token.EMPTY;\n  }\n",
        "begin_line": 2293,
        "end_line": 2295,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isExprResult#2297",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isExprResult()",
        "snippet": "  public boolean isExprResult() {\n    return this.getType() == Token.EXPR_RESULT;\n  }\n",
        "begin_line": 2297,
        "end_line": 2299,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.Tracer#285",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String)",
        "snippet": "  Tracer(String comment) {\n    this(null, comment);\n  }\n",
        "begin_line": 285,
        "end_line": 287,
        "comment": "\n   * Create a tracer that isn't summed as part of a total\n   *\n   * @param comment  Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.getAliasDefinitionsInOrder#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.getAliasDefinitionsInOrder()",
        "snippet": "    Collection<Node> getAliasDefinitionsInOrder() {\n      return aliasDefinitionsInOrder;\n    }\n",
        "begin_line": 278,
        "end_line": 280,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.getAliasUsages#282",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.getAliasUsages()",
        "snippet": "    private List<AliasUsage> getAliasUsages() {\n      return aliasUsages;\n    }\n",
        "begin_line": 282,
        "end_line": 284,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.getScopeCalls#286",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.getScopeCalls()",
        "snippet": "    List<Node> getScopeCalls() {\n      return scopeCalls;\n    }\n",
        "begin_line": 286,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.hasErrors#290",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.hasErrors()",
        "snippet": "    boolean hasErrors() {\n      return hasErrors;\n    }\n",
        "begin_line": 290,
        "end_line": 292,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.isCallToScopeMethod#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.isCallToScopeMethod(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isCallToScopeMethod(Node n) {\n      return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());\n    }\n",
        "begin_line": 294,
        "end_line": 297,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.enterScope#299",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.enterScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void enterScope(NodeTraversal t) {\n      Node n = t.getCurrentNode().getParent();\n      if (n != null && isCallToScopeMethod(n)) {\n        transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));\n        findAliases(t);\n      }\n    }\n",
        "begin_line": 299,
        "end_line": 307,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.exitScope#309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.exitScope(com.google.javascript.jscomp.NodeTraversal)",
        "snippet": "    @Override\n    public void exitScope(NodeTraversal t) {\n      if (t.getScopeDepth() > 2) {\n        findNamespaceShadows(t);\n      }\n\n      if (t.getScopeDepth() == 2) {\n        renameNamespaceShadows(t);\n        injectedDecls.clear();\n        aliases.clear();\n        forbiddenLocals.clear();\n        transformation = null;\n        hasNamespaceShadows = false;\n      }\n    }\n",
        "begin_line": 309,
        "end_line": 323,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.shouldTraverse#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction() && t.inGlobalScope()) {\n        // Do not traverse in to functions except for goog.scope functions.\n        if (parent == null || !isCallToScopeMethod(parent)) {\n          return false;\n        }\n      }\n      return true;\n    }\n",
        "begin_line": 325,
        "end_line": 334,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.visit#525",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.Traversal.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (isCallToScopeMethod(n)) {\n        validateScopeCall(t, n, n.getParent());\n      }\n\n      if (t.getScopeDepth() < 2) {\n        return;\n      }\n\n      int type = n.getType();\n      Var aliasVar = null;\n      if (type == Token.NAME) {\n        String name = n.getString();\n        Var lexicalVar = t.getScope().getVar(n.getString());\n        if (lexicalVar != null && lexicalVar == aliases.get(name)) {\n          aliasVar = lexicalVar;\n        }\n      }\n\n      // Validate the top-level of the goog.scope block.\n      if (t.getScopeDepth() == 2) {\n        if (aliasVar != null && NodeUtil.isLValue(n)) {\n          if (aliasVar.getNode() == n) {\n            aliasDefinitionsInOrder.add(n);\n\n            // Return early, to ensure that we don't record a definition\n            // twice.\n            return;\n          } else {\n            report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());\n          }\n        }\n\n        if (type == Token.RETURN) {\n          report(t, n, GOOG_SCOPE_USES_RETURN);\n        } else if (type == Token.THIS) {\n          report(t, n, GOOG_SCOPE_REFERENCES_THIS);\n        } else if (type == Token.THROW) {\n          report(t, n, GOOG_SCOPE_USES_THROW);\n        }\n      }\n\n      // Validate all descendent scopes of the goog.scope block.\n      if (t.getScopeDepth() >= 2) {\n        // Check if this name points to an alias.\n        if (aliasVar != null) {\n          // Note, to support the transitive case, it's important we don't\n          // clone aliasedNode here.  For example,\n          // var g = goog; var d = g.dom; d.createElement('DIV');\n          // The node in aliasedNode (which is \"g\") will be replaced in the\n          // changes pass above with \"goog\".  If we cloned here, we'd end up\n          // with <code>g.dom.createElement('DIV')</code>.\n          aliasUsages.add(new AliasedNode(aliasVar, n));\n        }\n\n        // When we inject declarations, we duplicate jsdoc. Make sure\n        // we only process that jsdoc once.\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && !injectedDecls.contains(n)) {\n          for (Node node : info.getTypeNodes()) {\n            fixTypeNode(node);\n          }\n        }\n\n        // TODO(robbyw): Error for goog.scope not at root.\n      }\n    }\n",
        "begin_line": 525,
        "end_line": 592,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.ScopedAliases#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.ScopedAliases(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PreprocessorSymbolTable, com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler)",
        "snippet": "  ScopedAliases(AbstractCompiler compiler,\n      @Nullable PreprocessorSymbolTable preprocessorSymbolTable,\n      AliasTransformationHandler transformationHandler) {\n    this.compiler = compiler;\n    this.preprocessorSymbolTable = preprocessorSymbolTable;\n    this.transformationHandler = transformationHandler;\n  }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.process#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    hotSwapScript(root, null);\n  }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ScopedAliases.hotSwapScript#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "signature": "com.google.javascript.jscomp.ScopedAliases.hotSwapScript(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void hotSwapScript(Node root, Node originalRoot) {\n    Traversal traversal = new Traversal();\n    NodeTraversal.traverse(compiler, root, traversal);\n\n    if (!traversal.hasErrors()) {\n\n      // Apply the aliases.\n      List<AliasUsage> aliasWorkQueue =\n          Lists.newArrayList(traversal.getAliasUsages());\n      while (!aliasWorkQueue.isEmpty()) {\n        List<AliasUsage> newQueue = Lists.newArrayList();\n        for (AliasUsage aliasUsage : aliasWorkQueue) {\n          if (aliasUsage.referencesOtherAlias()) {\n            newQueue.add(aliasUsage);\n          } else {\n            aliasUsage.applyAlias();\n          }\n        }\n\n        // Prevent an infinite loop.\n        if (newQueue.size() == aliasWorkQueue.size()) {\n          Var cycleVar = newQueue.get(0).aliasVar;\n          compiler.report(JSError.make(\n              cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));\n          break;\n        } else {\n          aliasWorkQueue = newQueue;\n        }\n      }\n\n      // Remove the alias definitions.\n      for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {\n        if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild()) {\n          aliasDefinition.getParent().detachFromParent();\n        } else {\n          aliasDefinition.detachFromParent();\n        }\n      }\n\n      // Collapse the scopes.\n      for (Node scopeCall : traversal.getScopeCalls()) {\n        Node expressionWithScopeCall = scopeCall.getParent();\n        Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();\n        scopeClosureBlock.detachFromParent();\n        expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);\n        NodeUtil.tryMergeBlock(scopeClosureBlock);\n      }\n\n      if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0) {\n        compiler.reportCodeChange();\n      }\n    }\n  }\n",
        "begin_line": 131,
        "end_line": 189,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.ProgressRange#497",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.ProgressRange.ProgressRange(double, double)",
        "snippet": "    public ProgressRange(double initialValue, double maxValue) {\n      this.initialValue = initialValue;\n      this.maxValue = maxValue;\n    }\n",
        "begin_line": 497,
        "end_line": 500,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.NamedPass#256",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.NamedPass.NamedPass(com.google.javascript.jscomp.PassFactory)",
        "snippet": "    NamedPass(PassFactory factory) {\n      this.name = factory.getName();\n      this.factory = factory;\n    }\n",
        "begin_line": 256,
        "end_line": 259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.process#261",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.NamedPass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      logger.fine(name);\n      if (tracker != null) {\n        tracker.recordPassStart(name, factory.isOneTimePass());\n      }\n      tracer = new Tracer(\"JSCompiler\");\n      // Delay the creation of the actual pass until *after* all previous passes\n      // have been processed.\n      // Some precondition checks rely on this, eg, in CoalesceVariableNames.\n      factory.create(compiler).process(externs, root);\n      try {\n        if (progressRange == null) {\n          compiler.setProgress(-1, name);\n        } else {\n          progress += progressStep;\n          compiler.setProgress(progress, name);\n        }\n        if (tracker != null) {\n          tracker.recordPassStop(name, tracer.stop());\n        }\n        maybePrintAstHashcodes(name, root);\n        maybeSanityCheck(externs, root);\n      } catch (IllegalStateException e) {\n        // TODO(johnlenz): Remove this once the normalization checks report\n        // errors instead of exceptions.\n        throw new RuntimeException(\"Sanity check failed for \" + name, e);\n      }\n    }\n",
        "begin_line": 261,
        "end_line": 289,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.PhaseOptimizer#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.PhaseOptimizer(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.PerformanceTracker, com.google.javascript.jscomp.PhaseOptimizer.ProgressRange)",
        "snippet": "  PhaseOptimizer(\n      AbstractCompiler comp, PerformanceTracker tracker, ProgressRange range) {\n    this.compiler = comp;\n    this.jsRoot = comp.getJsRoot();\n    this.tracker = tracker;\n    this.passes = Lists.newArrayList();\n    this.progressRange = range;\n    this.inLoop = false;\n    this.crossScopeReporting = false;\n    this.timestamp = this.lastChange = START_TIME;\n  }\n",
        "begin_line": 116,
        "end_line": 126,
        "comment": "\n   * @param comp the compiler that owns/creates this.\n   * @param tracker an optional performance tracker\n   * @param range the progress range for the process function or null\n   *        if progress should not be reported.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.consume#139",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.consume(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  void consume(List<PassFactory> factories) {\n    Loop currentLoop = new Loop();\n    boolean isCurrentLoopPopulated = false;\n    for (PassFactory factory : factories) {\n      if (factory.isOneTimePass()) {\n        if (isCurrentLoopPopulated) {\n          passes.add(currentLoop);\n          currentLoop = new Loop();\n          isCurrentLoopPopulated = false;\n        }\n        addOneTimePass(factory);\n      } else {\n        currentLoop.addLoopedPass(factory);\n        isCurrentLoopPopulated = true;\n      }\n    }\n\n    if (isCurrentLoopPopulated) {\n      passes.add(currentLoop);\n    }\n  }\n",
        "begin_line": 139,
        "end_line": 159,
        "comment": "\n   * Add the passes generated by the given factories to the compile sequence.\n   * <p>\n   * Automatically pulls multi-run passes into fixed point loops. If there\n   * are 1 or more multi-run passes in a row, they will run together in\n   * the same fixed point loop. The passes will run until they are finished\n   * making changes.\n   * <p>\n   * The PhaseOptimizer is free to tweak the order and frequency of multi-run\n   * passes in a fixed-point loop.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.addOneTimePass#165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.addOneTimePass(com.google.javascript.jscomp.PassFactory)",
        "snippet": "  @VisibleForTesting\n  void addOneTimePass(PassFactory factory) {\n    passes.add(new NamedPass(factory));\n  }\n",
        "begin_line": 165,
        "end_line": 168,
        "comment": "\n   * Add the pass generated by the given factory to the compile sequence.\n   * This pass will be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.maybePrintAstHashcodes#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.maybePrintAstHashcodes(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  private void maybePrintAstHashcodes(String passName, Node root) {\n    if (printAstHashcodes) {\n      String hashCodeMsg = \"AST hashCode after \" + passName + \": \" +\n          compiler.toSource(root).hashCode();\n      System.err.println(hashCodeMsg);\n      compiler.addToDebugLog(hashCodeMsg);\n    }\n  }\n",
        "begin_line": 222,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.maybeSanityCheck#234",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.maybeSanityCheck(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void maybeSanityCheck(Node externs, Node root) {\n    if (sanityCheck != null) {\n      sanityCheck.create(compiler).process(externs, root);\n      if (inLoop) {\n        NodeUtil.verifyScopeChanges(mtoc, jsRoot, true, compiler);\n        setSanityCheckState();\n      }\n    }\n  }\n",
        "begin_line": 234,
        "end_line": 242,
        "comment": "\n   * Runs the sanity check if it is available.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.hasHaltingErrors#244",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.hasHaltingErrors()",
        "snippet": "  private boolean hasHaltingErrors() {\n    return compiler.hasHaltingErrors();\n  }\n",
        "begin_line": 244,
        "end_line": 246,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PhaseOptimizer.setScope#292",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.setScope(com.google.javascript.rhino.Node)",
        "snippet": "  void setScope(Node n) {\n    // NodeTraversal causes setScope calls outside loops; ignore them.\n    if (inLoop) {\n      // Find the top-level node in the scope.\n      currentScope = n.isFunction() ? n : getEnclosingScope(n);\n    }\n  }\n",
        "begin_line": 292,
        "end_line": 298,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassFactory.getName#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.getName()",
        "snippet": "  String getName() {\n    return name;\n  }\n",
        "begin_line": 45,
        "end_line": 47,
        "comment": "\n   * @return The name of this pass.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassFactory.isOneTimePass#52",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass()",
        "snippet": "  boolean isOneTimePass() {\n    return isOneTimePass;\n  }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n   * @return Whether the pass produced by this factory can only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isSimpleOperator#702",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperator(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isSimpleOperator(Node n) {\n    return isSimpleOperatorType(n.getType());\n  }\n",
        "begin_line": 702,
        "end_line": 704,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isSimpleOperatorType#711",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(int)",
        "snippet": "  static boolean isSimpleOperatorType(int type) {\n    switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 711,
        "end_line": 747,
        "comment": "\n   * A \"simple\" operator is one whose children are expressions,\n   * has no direct side-effects (unlike '+='), and has no\n   * conditional aspects (unlike '||').\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.mayHaveSideEffects#815",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(com.google.javascript.rhino.Node, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  static boolean mayHaveSideEffects(Node n, AbstractCompiler compiler) {\n    return checkForStateChangeHelper(n, false, compiler);\n  }\n",
        "begin_line": 815,
        "end_line": 817,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.checkForStateChangeHelper#825",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(com.google.javascript.rhino.Node, boolean, com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private static boolean checkForStateChangeHelper(\n      Node n, boolean checkForNewObjects, AbstractCompiler compiler) {\n    // Rather than id which ops may have side effects, id the ones\n    // that we know to be safe\n    switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.CAST:\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.PARAM_LIST:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.STRING_KEY:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperator(n)) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (assignTarget.isName()) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n",
        "begin_line": 825,
        "end_line": 970,
        "comment": "\n   * Returns true if some node in n's subtree changes application state.\n   * If {@code checkForNewObjects} is true, we assume that newly created\n   * mutable objects (like object literals) change state. Otherwise, we assume\n   * that they have no side effects.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isExprAssign#1646",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isExprAssign(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isExprAssign(Node n) {\n    return n.isExprResult()\n        && n.getFirstChild().isAssign();\n  }\n",
        "begin_line": 1646,
        "end_line": 1649,
        "comment": "\n   * Is this node an assignment expression statement?\n   *\n   * @param n The node\n   * @return True if {@code n} is EXPR_RESULT and {@code n}'s\n   *     first child is ASSIGN\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.getInputId#2957",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.getInputId(com.google.javascript.rhino.Node)",
        "snippet": "  public static InputId getInputId(Node n) {\n    while (n != null && !n.isScript()) {\n      n = n.getParent();\n    }\n\n    return (n != null && n.isScript()) ? n.getInputId() : null;\n  }\n",
        "begin_line": 2957,
        "end_line": 2963,
        "comment": "\n   * @param n The node.\n   * @return The InputId property on the node or its ancestors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.shouldTraverse#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent) {\n      return true;\n    }\n",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.NodeTraversal#238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb,\n      ScopeCreator scopeCreator) {\n    this.callback = cb;\n    if (cb instanceof ScopedCallback) {\n      this.scopeCallback = (ScopedCallback) cb;\n    }\n    this.compiler = compiler;\n    this.inputId = null;\n    this.sourceName = \"\";\n    this.scopeCreator = scopeCreator;\n  }\n",
        "begin_line": 238,
        "end_line": 248,
        "comment": "\n   * Creates a node traversal using the specified callback interface\n   * and the scope creator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getCompiler#406",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCompiler()",
        "snippet": "  public AbstractCompiler getCompiler() {\n    return compiler;\n  }\n",
        "begin_line": 406,
        "end_line": 408,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getCurrentNode#451",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getCurrentNode()",
        "snippet": "  public Node getCurrentNode() {\n    return curNode;\n  }\n",
        "begin_line": 451,
        "end_line": 453,
        "comment": " Returns the node currently being traversed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.pushScope#594",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.pushScope(com.google.javascript.rhino.Node)",
        "snippet": "  private void pushScope(Node node) {\n    Preconditions.checkState(curNode != null);\n    compiler.setScope(node);\n    scopeRoots.push(node);\n    cfgs.push(null);\n    if (scopeCallback != null) {\n      scopeCallback.enterScope(this);\n    }\n  }\n",
        "begin_line": 594,
        "end_line": 602,
        "comment": " Creates a new scope (e.g. when entering a function). ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.inGlobalScope#671",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.inGlobalScope()",
        "snippet": "  boolean inGlobalScope() {\n    return getScopeDepth() <= 1;\n  }\n",
        "begin_line": 671,
        "end_line": 673,
        "comment": "\n   * Determines whether the traversal is currently in the global scope.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getScopeDepth#675",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getScopeDepth()",
        "snippet": "  int getScopeDepth() {\n    return scopes.size() + scopeRoots.size();\n  }\n",
        "begin_line": 675,
        "end_line": 677,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#1065",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-bb538a41-5a12-4a9f-9818-461c1db4763c.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      return new ClosureRewriteClass(compiler);\n    }\n",
        "begin_line": 1065,
        "end_line": 1068,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#1052",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-34260732-add5-4d1b-be13-2b194022018a.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(AbstractCompiler compiler) {\n      maybeInitializePreprocessorSymbolTable(compiler);\n      return new ScopedAliases(\n          compiler,\n          preprocessorSymbolTable,\n          options.getAliasTransformationHandler());\n    }\n",
        "begin_line": 1052,
        "end_line": 1059,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.runInSerial#2390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runInSerial(java.util.Collection<com.google.javascript.jscomp.CompilerPass>)",
        "snippet": "  private static CompilerPass runInSerial(\n      final Collection<CompilerPass> passes) {\n    return new CompilerPass() {\n      @Override public void process(Node externs, Node root) {\n        for (CompilerPass pass : passes) {\n          pass.process(externs, root);\n        }\n      }\n    };\n  }\n",
        "begin_line": 2390,
        "end_line": 2399,
        "comment": " Create a compiler pass that runs the given passes in serial. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.process#2393",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-9ee9d2ee-2fb9-44ca-b662-7ddd573ecb8d.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "      @Override public void process(Node externs, Node root) {\n        for (CompilerPass pass : passes) {\n          pass.process(externs, root);\n        }\n      }\n",
        "begin_line": 2393,
        "end_line": 2397,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.createEmptyPass#2352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.createEmptyPass(java.lang.String)",
        "snippet": "  static PassFactory createEmptyPass(String name) {\n    return new PassFactory(name, true) {\n      @Override\n      protected CompilerPass create(final AbstractCompiler compiler) {\n        return runInSerial();\n      }\n    };\n  }\n",
        "begin_line": 2352,
        "end_line": 2359,
        "comment": "\n   * Create a no-op pass that can only run once. Used to break up loops.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#2354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-518c82c2-e8d5-4029-bf5c-9d3f841a20c9.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "      @Override\n      protected CompilerPass create(final AbstractCompiler compiler) {\n        return runInSerial();\n      }\n",
        "begin_line": 2354,
        "end_line": 2357,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.create#816",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.Anonymous-06ccf786-c694-4c8d-b484-0ad9ce8f8faf.create(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    @Override\n    protected HotSwapCompilerPass create(final AbstractCompiler compiler) {\n      // The current approach to protecting \"hidden\" side-effects is to\n      // wrap them in a function call that is stripped later, this shouldn't\n      // be done in IDE mode where AST changes may be unexpected.\n      boolean protectHiddenSideEffects =\n          options.protectHiddenSideEffects && !options.ideMode;\n      return new CheckSideEffects(compiler,\n          options.checkSuspiciousCode ? CheckLevel.WARNING : CheckLevel.OFF,\n              protectHiddenSideEffects);\n    }\n",
        "begin_line": 816,
        "end_line": 826,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.maybeInitializePreprocessorSymbolTable#188",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.maybeInitializePreprocessorSymbolTable(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  void maybeInitializePreprocessorSymbolTable(AbstractCompiler compiler) {\n    if (options.ideMode) {\n      Node root = compiler.getRoot();\n      if (preprocessorSymbolTable == null ||\n          preprocessorSymbolTable.getRootNode() != root) {\n        preprocessorSymbolTable = new PreprocessorSymbolTable(root);\n      }\n    }\n  }\n",
        "begin_line": 188,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.assertAllOneTimePasses#867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.assertAllOneTimePasses(java.util.List<com.google.javascript.jscomp.PassFactory>)",
        "snippet": "  private static void assertAllOneTimePasses(List<PassFactory> passes) {\n    for (PassFactory pass : passes) {\n      Preconditions.checkState(pass.isOneTimePass());\n    }\n  }\n",
        "begin_line": 867,
        "end_line": 871,
        "comment": " Verify that all the passes are one-time passes. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.runInSerial#2385",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runInSerial(com.google.javascript.jscomp.CompilerPass...)",
        "snippet": "  private static CompilerPass runInSerial(final CompilerPass ... passes) {\n    return runInSerial(Lists.newArrayList(passes));\n  }\n",
        "begin_line": 2385,
        "end_line": 2387,
        "comment": " Create a compiler pass that runs the given passes in serial. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.isOn#2276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TweakProcessing.isOn()",
        "snippet": "    public boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 2276,
        "end_line": 2278,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getTweakProcessing#1561",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getTweakProcessing()",
        "snippet": "  public TweakProcessing getTweakProcessing() {\n    return tweakProcessing;\n  }\n",
        "begin_line": 1561,
        "end_line": 1563,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getAliasTransformationHandler#1604",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getAliasTransformationHandler()",
        "snippet": "  public AliasTransformationHandler getAliasTransformationHandler() {\n    return this.aliasHandler;\n  }\n",
        "begin_line": 1604,
        "end_line": 1606,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getCheckDeterminism#1707",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getCheckDeterminism()",
        "snippet": "  public boolean getCheckDeterminism() {\n    return checkDeterminism;\n  }\n",
        "begin_line": 1707,
        "end_line": 1709,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.runCustomPasses#943",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime)",
        "snippet": "  private void runCustomPasses(CustomPassExecutionTime executionTime) {\n    if (options.customPasses != null) {\n      Tracer t = newTracer(\"runCustomPasses\");\n      try {\n        for (CompilerPass p : options.customPasses.get(executionTime)) {\n          process(p);\n        }\n      } finally {\n        stopTracer(t, \"runCustomPasses\");\n      }\n    }\n  }\n",
        "begin_line": 943,
        "end_line": 954,
        "comment": "\n   * Runs custom passes that are designated to run at a particular time.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getTypeRegistry#1222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getTypeRegistry()",
        "snippet": "  @Override\n  public JSTypeRegistry getTypeRegistry() {\n    if (typeRegistry == null) {\n      typeRegistry = new JSTypeRegistry(oldErrorReporter, options.looseTypes);\n    }\n    return typeRegistry;\n  }\n",
        "begin_line": 1222,
        "end_line": 1228,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setScope#2030",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setScope(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void setScope(Node n) {\n    if (phaseOptimizer != null) {\n      phaseOptimizer.setScope(n);\n    }\n  }\n",
        "begin_line": 2030,
        "end_line": 2035,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getJsRoot#2037",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getJsRoot()",
        "snippet": "  @Override\n  Node getJsRoot() {\n    return jsRoot;\n  }\n",
        "begin_line": 2037,
        "end_line": 2040,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getProgress#2470",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getProgress()",
        "snippet": "  @Override\n  public double getProgress() {\n    return progress;\n  }\n",
        "begin_line": 2470,
        "end_line": 2473,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureRewriteClass.ClosureRewriteClass#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.ClosureRewriteClass(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public ClosureRewriteClass(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureRewriteClass.process#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureRewriteClass.visit#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureRewriteClass.java",
        "class_name": "com.google.javascript.jscomp.ClosureRewriteClass",
        "signature": "com.google.javascript.jscomp.ClosureRewriteClass.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isCall() && isGoogDefineClass(n)) {\n      if (!validateUsage(n)) {\n        compiler.report(JSError.make(n, GOOG_CLASS_TARGET_INVALID));\n      }\n    }\n    maybeRewriteClassDefinition(n);\n  }\n",
        "begin_line": 79,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.CheckSideEffects#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.CheckSideEffects(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.CheckLevel, boolean)",
        "snippet": "  CheckSideEffects(AbstractCompiler compiler, CheckLevel level,\n      boolean protectSideEffectFreeCode) {\n    this.compiler = compiler;\n    this.level = level;\n    this.protectSideEffectFreeCode = protectSideEffectFreeCode;\n  }\n",
        "begin_line": 56,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.process#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n\n    // Code with hidden side-effect code is common, for example\n    // accessing \"el.offsetWidth\" forces a reflow in browsers, to allow this\n    // will still allowing local dead code removal in general,\n    // protect the \"side-effect free\" code in the source.\n    //\n    if (protectSideEffectFreeCode) {\n      protectSideEffects();\n    }\n  }\n",
        "begin_line": 63,
        "end_line": 75,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.visit#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult() || n.isBlock()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperator(n);\n    if (!isResultUsed &&\n        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n\n      t.getCompiler().report(\n          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n      // TODO(johnlenz): determine if it is necessary to\n      // try to protect side-effect free statements as well.\n      if (!NodeUtil.isStatement(n)) {\n        problemNodes.add(n);\n      }\n    }\n  }\n",
        "begin_line": 82,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckSideEffects.protectSideEffects#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.protectSideEffects()",
        "snippet": "  private void protectSideEffects() {\n    if (!problemNodes.isEmpty()) {\n      addExtern();\n      for (Node n : problemNodes) {\n        Node name = IR.name(PROTECTOR_FN).srcref(n);\n        name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n        Node replacement = IR.call(name).srcref(n);\n        replacement.putBooleanProp(Node.FREE_CALL, true);\n        n.getParent().replaceChild(n, replacement);\n        replacement.addChildToBack(n);\n      }\n      compiler.reportCodeChange();\n    }\n  }\n",
        "begin_line": 137,
        "end_line": 150,
        "comment": "\n   * Protect side-effect free nodes by making them parameters\n   * to a extern function call.  This call will be removed\n   * after all the optimizations passes have run.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getBooleanProp#823",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getBooleanProp(int)",
        "snippet": "  public boolean getBooleanProp(int propType) {\n    return getIntProp(propType) != 0;\n  }\n",
        "begin_line": 823,
        "end_line": 825,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isAssignmentOp#1541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isAssignmentOp(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }\n    return false;\n  }\n",
        "begin_line": 1541,
        "end_line": 1558,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.rebuildInputsFromModules#501",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.rebuildInputsFromModules()",
        "snippet": "  public void rebuildInputsFromModules() {\n    inputs = getAllInputsFromModules(modules);\n    initInputsByIdMap();\n  }\n",
        "begin_line": 501,
        "end_line": 504,
        "comment": "\n   * Rebuilds the internal list of inputs by iterating over all modules.\n   * This is necessary if inputs have been added to or removed from a module\n   * after the {@link #init(List, List, CompilerOptions)} call.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.parseInputs#1324",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parseInputs()",
        "snippet": "  Node parseInputs() {\n    boolean devMode = options.devMode != DevMode.OFF;\n\n    // If old roots exist (we are parsing a second time), detach each of the\n    // individual file parse trees.\n    if (externsRoot != null) {\n      externsRoot.detachChildren();\n    }\n    if (jsRoot != null) {\n      jsRoot.detachChildren();\n    }\n\n    // Parse main JS sources.\n    jsRoot = IR.block();\n    jsRoot.setIsSyntheticBlock(true);\n\n    externsRoot = IR.block();\n    externsRoot.setIsSyntheticBlock(true);\n\n    externAndJsRoot = IR.block(externsRoot, jsRoot);\n    externAndJsRoot.setIsSyntheticBlock(true);\n\n    if (options.tracer.isOn()) {\n      tracker = new PerformanceTracker(jsRoot, options.tracer);\n      addChangeHandler(tracker.getCodeChangeHandler());\n    }\n\n    Tracer tracer = newTracer(PARSING_PASS_NAME);\n\n    try {\n      // Parse externs sources.\n      for (CompilerInput input : externs) {\n        Node n = input.getAstRoot(this);\n        if (hasErrors()) {\n          return null;\n        }\n        externsRoot.addChildToBack(n);\n      }\n\n      // Modules inferred in ProcessCommonJS pass.\n      if (options.transformAMDToCJSModules || options.processCommonJSModules) {\n        processAMDAndCommonJSModules();\n      }\n\n      hoistExterns(externsRoot);\n\n      // Check if the sources need to be re-ordered.\n      boolean staleInputs = false;\n      if (options.dependencyOptions.needsManagement()) {\n        for (CompilerInput input : inputs) {\n          // Forward-declare all the provided types, so that they\n          // are not flagged even if they are dropped from the process.\n          for (String provide : input.getProvides()) {\n            getTypeRegistry().forwardDeclareType(provide);\n          }\n        }\n\n        try {\n          inputs =\n              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n              .manageDependencies(options.dependencyOptions, inputs);\n          staleInputs = true;\n        } catch (CircularDependencyException e) {\n          report(JSError.make(\n              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n        } catch (MissingProvideException e) {\n          report(JSError.make(\n              MISSING_ENTRY_ERROR, e.getMessage()));\n        } catch (JSModuleGraph.MissingModuleException e) {\n          report(JSError.make(\n              MISSING_MODULE_ERROR, e.getMessage()));\n        }\n\n        // If in IDE mode, we ignore the error and keep going.\n        if (hasErrors()) {\n          return null;\n        }\n      }\n\n      hoistNoCompileFiles();\n\n      if (staleInputs) {\n        repartitionInputs();\n      }\n\n      // Build the AST.\n      for (CompilerInput input : inputs) {\n        Node n = input.getAstRoot(this);\n        if (n == null) {\n          continue;\n        }\n\n        if (devMode) {\n          runSanityCheck();\n          if (hasErrors()) {\n            return null;\n          }\n        }\n\n        // TODO(johnlenz): we shouldn't need to check both isExternExportsEnabled and\n        // externExportsPath.\n        if (options.sourceMapOutputPath != null ||\n            options.nameReferenceReportPath != null ||\n            options.isExternExportsEnabled() ||\n            options.externExportsPath != null) {\n\n          // Annotate the nodes in the tree with information from the\n          // input file. This information is used to construct the SourceMap.\n          SourceInformationAnnotator sia =\n              new SourceInformationAnnotator(\n                  input.getName(), options.devMode != DevMode.OFF);\n          NodeTraversal.traverse(this, n, sia);\n        }\n\n        jsRoot.addChildToBack(n);\n      }\n\n      if (hasErrors()) {\n        return null;\n      }\n      return externAndJsRoot;\n    } finally {\n      stopTracer(tracer, PARSING_PASS_NAME);\n    }\n  }\n",
        "begin_line": 1324,
        "end_line": 1448,
        "comment": "\n   * Parses the externs and main inputs.\n   *\n   * @return A synthetic root node whose two children are the externs root\n   *     and the main root\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.repartitionInputs#1516",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.repartitionInputs()",
        "snippet": "  private void repartitionInputs() {\n    fillEmptyModules(modules);\n    rebuildInputsFromModules();\n  }\n",
        "begin_line": 1516,
        "end_line": 1519,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isCall#2249",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCall()",
        "snippet": "  public boolean isCall() {\n    return this.getType() == Token.CALL;\n  }\n",
        "begin_line": 2249,
        "end_line": 2251,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isCast#2257",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isCast()",
        "snippet": "  public boolean isCast() {\n    return this.getType() == Token.CAST;\n  }\n",
        "begin_line": 2257,
        "end_line": 2259,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.level#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    for (WarningsGuard guard : guards) {\n      CheckLevel newLevel = guard.level(error);\n      if (newLevel != null) {\n        if (demoteErrors && newLevel == CheckLevel.ERROR) {\n          return CheckLevel.WARNING;\n        }\n        return newLevel;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 109,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getString#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.getString()",
        "snippet": "    @Override\n    public String getString() {\n      return this.str;\n    }\n",
        "begin_line": 212,
        "end_line": 215,
        "comment": "\n     * returns the string content.\n     * @return non null.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isVar#2437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isVar()",
        "snippet": "  public boolean isVar() {\n    return this.getType() == Token.VAR;\n  }\n",
        "begin_line": 2437,
        "end_line": 2439,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.isExternExportsEnabled#1536",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.isExternExportsEnabled()",
        "snippet": "  public boolean isExternExportsEnabled() {\n    return externExports;\n  }\n",
        "begin_line": 1536,
        "end_line": 1538,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.compile#598",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compile(java.util.List<T1>, java.util.List<T2>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T1 extends SourceFile, T2 extends SourceFile> Result compile(\n      List<T1> externs, List<T2> inputs, CompilerOptions options) {\n    // The compile method should only be called once.\n    Preconditions.checkState(jsRoot == null);\n\n    try {\n      init(externs, inputs, options);\n      if (hasErrors()) {\n        return getResult();\n      }\n      return compile();\n    } finally {\n      Tracer t = newTracer(\"generateReport\");\n      errorManager.generateReport();\n      stopTracer(t, \"generateReport\");\n    }\n  }\n",
        "begin_line": 598,
        "end_line": 614,
        "comment": "\n   * Compiles a list of inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.precheck#832",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.precheck()",
        "snippet": "  boolean precheck() {\n    return true;\n  }\n",
        "begin_line": 832,
        "end_line": 834,
        "comment": "\n   * Carry out any special checks or procedures that need to be done before\n   * proceeding with rest of the compilation process.\n   *\n   * @return true, to continue with compilation\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hoistExterns#1453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistExterns(com.google.javascript.rhino.Node)",
        "snippet": "  private void hoistExterns(Node externsRoot) {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      if (options.dependencyOptions.needsManagement()) {\n        // If we're doing scanning dependency info anyway, use that\n        // information to skip sources that obviously aren't externs.\n        if (!input.getProvides().isEmpty() || !input.getRequires().isEmpty()) {\n          continue;\n        }\n      }\n\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isExterns()) {\n        // If the input file is explicitly marked as an externs file, then\n        // assume the programmer made a mistake and throw it into\n        // the externs pile anyways.\n        externsRoot.addChildToBack(n);\n        input.setIsExtern(true);\n\n        input.getModule().remove(input);\n\n        externs.add(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1453,
        "end_line": 1489,
        "comment": "\n   * Hoists inputs with the @externs annotation into the externs list.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hoistNoCompileFiles#1494",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hoistNoCompileFiles()",
        "snippet": "  private void hoistNoCompileFiles() {\n    boolean staleInputs = false;\n    for (CompilerInput input : inputs) {\n      Node n = input.getAstRoot(this);\n\n      // Inputs can have a null AST on a parse error.\n      if (n == null) {\n        continue;\n      }\n\n      JSDocInfo info = n.getJSDocInfo();\n      if (info != null && info.isNoCompile()) {\n        input.getModule().remove(input);\n        staleInputs = true;\n      }\n    }\n\n    if (staleInputs) {\n      repartitionInputs();\n    }\n  }\n",
        "begin_line": 1494,
        "end_line": 1514,
        "comment": "\n   * Hoists inputs with the @nocompile annotation out of the inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.createSourceInputs#453",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.createSourceInputs(java.util.List<java.lang.String>)",
        "snippet": "  private List<SourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException {\n    if (isInTestMode()) {\n      return inputsSupplierForTesting.get();\n    }\n    if (files.isEmpty()) {\n      files = Collections.singletonList(\"-\");\n    }\n    try {\n      return createInputs(files, true);\n    } catch (FlagUsageException e) {\n      throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());\n    }\n  }\n",
        "begin_line": 453,
        "end_line": 466,
        "comment": "\n   * Creates JS source code inputs from a list of files.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.doRun#733",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.doRun()",
        "snippet": "  protected int doRun() throws FlagUsageException, IOException {\n    Compiler.setLoggingLevel(Level.parse(config.loggingLevel));\n\n    List<SourceFile> externs = createExterns();\n\n    compiler = createCompiler();\n    B options = createOptions();\n\n    List<JSModule> modules = null;\n    Result result = null;\n\n    setRunOptions(options);\n\n    boolean writeOutputToFile = !config.jsOutputFile.isEmpty();\n    List<String> outputFileNames = Lists.newArrayList();\n    if (writeOutputToFile) {\n      outputFileNames.add(config.jsOutputFile);\n    }\n\n    List<String> jsFiles = config.js;\n    List<String> moduleSpecs = config.module;\n\n    boolean createCommonJsModules = false;\n    if (options.processCommonJSModules) {\n      if (moduleSpecs.size() == 1 && \"auto\".equals(moduleSpecs.get(0))) {\n        createCommonJsModules = true;\n        moduleSpecs.remove(0);\n      }\n    }\n    if (!moduleSpecs.isEmpty()) {\n      modules = createJsModules(moduleSpecs, jsFiles);\n      for (JSModule m : modules) {\n        outputFileNames.add(getModuleOutputFileName(m));\n      }\n\n      if (config.skipNormalOutputs) {\n        compiler.initModules(externs, modules, options);\n      } else {\n        result = compiler.compileModules(externs, modules, options);\n      }\n    } else {\n      List<SourceFile> inputs = createSourceInputs(jsFiles);\n      if (config.skipNormalOutputs) {\n        compiler.init(externs, inputs, options);\n      } else {\n        result = compiler.compile(externs, inputs, options);\n      }\n    }\n    if (createCommonJsModules) {\n      // For CommonJS modules construct modules from actual inputs.\n      modules = Lists.newArrayList(compiler.getDegenerateModuleGraph()\n          .getAllModules());\n      for (JSModule m : modules) {\n        outputFileNames.add(getModuleOutputFileName(m));\n      }\n    }\n\n    for (String outputFileName : outputFileNames) {\n      if (compiler.getSourceFileByName(outputFileName) != null) {\n        compiler.report(\n            JSError.make(OUTPUT_SAME_AS_INPUT_ERROR, outputFileName));\n        return 1;\n      }\n    }\n\n    return processResults(result, modules, options);\n  }\n",
        "begin_line": 733,
        "end_line": 799,
        "comment": "\n   * Parses command-line arguments and runs the compiler.\n   *\n   * @return system exit status\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0976
        },
        "num_failing_tests": 1
    },
    {
        "name": "TokenStream.isKeyword#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/TokenStream.java",
        "class_name": "com.google.javascript.rhino.TokenStream",
        "signature": "com.google.javascript.rhino.TokenStream.isKeyword(java.lang.String)",
        "snippet": "    public static boolean isKeyword(String name) {\n        boolean id = false;\n        String s = name;\n        complete: {\n            String X = null;\n            int c;\n            partial: switch (s.length()) {\n            case 2: c=s.charAt(1);\n                if (c=='f') {\n                  if (s.charAt(0)=='i') {id=true; break complete;}\n                } else if (c=='n') {\n                  if (s.charAt(0)=='i') {id=true; break complete;}\n                } else if (c=='o') {\n                  if (s.charAt(0)=='d') {id=true; break complete;}\n                }\n                break partial;\n            case 3: switch (s.charAt(0)) {\n                case 'f':\n                  if (s.charAt(2)=='r' && s.charAt(1)=='o') {\n                    id=true; break complete;\n                  } break partial;\n                case 'i':\n                  if (s.charAt(2)=='t' && s.charAt(1)=='n') {\n                    id=true; break complete;\n                  } break partial;\n                case 'n':\n                  if (s.charAt(2)=='w' && s.charAt(1)=='e') {\n                    id=true; break complete;\n                  } break partial;\n                case 't':\n                  if (s.charAt(2)=='y' && s.charAt(1)=='r') {\n                    id=true; break complete;\n                  } break partial;\n                case 'v':\n                  if (s.charAt(2)=='r' && s.charAt(1)=='a') {\n                    id=true; break complete;\n                  } break partial;\n                } break partial;\n            case 4: switch (s.charAt(0)) {\n                case 'b': X=\"byte\";id=true; break partial;\n                case 'c': c=s.charAt(3);\n                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='a') {\n                            id=true; break complete;} }\n                    else if (c=='r') {\n                      if (s.charAt(2)=='a' && s.charAt(1)=='h') {\n                        id=true; break complete;\n                      }\n                    }\n                    break partial;\n                case 'e': c=s.charAt(3);\n                    if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='l') {\n                            id=true; break complete;} }\n                    else if (c=='m') {\n                      if (s.charAt(2)=='u' && s.charAt(1)=='n') {\n                            id=true; break complete;} }\n                    break partial;\n                case 'g': X=\"goto\";id=true; break partial;\n                case 'l': X=\"long\";id=true; break partial;\n                case 'n': X=\"null\";id=true; break partial;\n                case 't': c=s.charAt(3);\n                    if (c=='e') { if (s.charAt(2)=='u' && s.charAt(1)=='r') {\n                            id=true; break complete;} }\n                    else if (c=='s') {\n                      if (s.charAt(2)=='i' && s.charAt(1)=='h') {\n                            id=true; break complete;} }\n                    break partial;\n                case 'v': X=\"void\";id=true; break partial;\n                case 'w': X=\"with\";id=true; break partial;\n                } break partial;\n            case 5: switch (s.charAt(2)) {\n                case 'a': X=\"class\";id=true; break partial;\n                case 'e': X=\"break\";id=true; break partial;\n                case 'i': X=\"while\";id=true; break partial;\n                case 'l': X=\"false\";id=true; break partial;\n                case 'n': c=s.charAt(0);\n                    if (c=='c') { X=\"const\";id=true; }\n                    else if (c=='f') { X=\"final\";id=true; }\n                    break partial;\n                case 'o': c=s.charAt(0);\n                    if (c=='f') { X=\"float\";id=true; }\n                    else if (c=='s') { X=\"short\";id=true; }\n                    break partial;\n                case 'p': X=\"super\";id=true; break partial;\n                case 'r': X=\"throw\";id=true; break partial;\n                case 't': X=\"catch\";id=true; break partial;\n                } break partial;\n            case 6: switch (s.charAt(1)) {\n                case 'a': X=\"native\";id=true; break partial;\n                case 'e': c=s.charAt(0);\n                    if (c=='d') { X=\"delete\";id=true; }\n                    else if (c=='r') { X=\"return\";id=true; }\n                    break partial;\n                case 'h': X=\"throws\";id=true; break partial;\n                case 'm': X=\"import\";id=true; break partial;\n                case 'o': X=\"double\";id=true; break partial;\n                case 't': X=\"static\";id=true; break partial;\n                case 'u': X=\"public\";id=true; break partial;\n                case 'w': X=\"switch\";id=true; break partial;\n                case 'x': X=\"export\";id=true; break partial;\n                case 'y': X=\"typeof\";id=true; break partial;\n                } break partial;\n            case 7: switch (s.charAt(1)) {\n                case 'a': X=\"package\";id=true; break partial;\n                case 'e': X=\"default\";id=true; break partial;\n                case 'i': X=\"finally\";id=true; break partial;\n                case 'o': X=\"boolean\";id=true; break partial;\n                case 'r': X=\"private\";id=true; break partial;\n                case 'x': X=\"extends\";id=true; break partial;\n                } break partial;\n            case 8: switch (s.charAt(0)) {\n                case 'a': X=\"abstract\";id=true; break partial;\n                case 'c': X=\"continue\";id=true; break partial;\n                case 'd': X=\"debugger\";id=true; break partial;\n                case 'f': X=\"function\";id=true; break partial;\n                case 'v': X=\"volatile\";id=true; break partial;\n                } break partial;\n            case 9: c=s.charAt(0);\n                if (c=='i') { X=\"interface\";id=true; }\n                else if (c=='p') { X=\"protected\";id=true; }\n                else if (c=='t') { X=\"transient\";id=true; }\n                break partial;\n            case 10: c=s.charAt(1);\n                if (c=='m') { X=\"implements\";id=true; }\n                else if (c=='n') { X=\"instanceof\";id=true; }\n                break partial;\n            case 12: X=\"synchronized\";id=true; break partial;\n            }\n            // partial match validate the entire string the one possibility\n            if (X!=null && X!=s && !X.equals(s)) return false;\n        }\n        return id;\n    }\n",
        "begin_line": 57,
        "end_line": 188,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "SortedDependencies.getDependenciesOf#210",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.getDependenciesOf(java.util.List<INPUT>, boolean)",
        "snippet": "  public List<INPUT> getDependenciesOf(List<INPUT> roots, boolean sorted) {\n    Preconditions.checkArgument(inputs.containsAll(roots));\n    Set<INPUT> included = Sets.newHashSet();\n    Deque<INPUT> worklist = new ArrayDeque<INPUT>(roots);\n    while (!worklist.isEmpty()) {\n      INPUT current = worklist.pop();\n      if (included.add(current)) {\n        for (String req : current.getRequires()) {\n          INPUT dep = provideMap.get(req);\n          if (dep != null) {\n            worklist.add(dep);\n          }\n        }\n      }\n    }\n\n    ImmutableList.Builder<INPUT> builder = ImmutableList.builder();\n    for (INPUT current : (sorted ? sortedList : inputs)) {\n      if (included.contains(current)) {\n        builder.add(current);\n      }\n    }\n    return builder.build();\n  }\n",
        "begin_line": 210,
        "end_line": 233,
        "comment": "\n   * Gets all the dependencies of the given roots. The inputs must be returned\n   * in a stable order. In other words, if A comes before B, and A does not\n   * transitively depend on B, then A must also come before B in the returned\n   * list.\n   *\n   * @param sorted If true, get them in topologically sorted order. If false,\n   *     get them in the original order they were passed to the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModuleGraph.getAllModules#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.getAllModules()",
        "snippet": "  Iterable<JSModule> getAllModules() {\n    return modules;\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n   * Gets an iterable over all modules in dependency order.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModuleGraph.manageDependencies#367",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.manageDependencies(com.google.javascript.jscomp.DependencyOptions, java.util.List<com.google.javascript.jscomp.CompilerInput>)",
        "snippet": "  public List<CompilerInput> manageDependencies(\n      DependencyOptions depOptions,\n      List<CompilerInput> inputs)\n      throws CircularDependencyException, MissingProvideException,\n          MissingModuleException {\n\n    SortedDependencies<CompilerInput> sorter =\n        new SortedDependencies<CompilerInput>(inputs);\n    Iterable<CompilerInput> entryPointInputs = createEntryPointInputs(\n        depOptions, inputs, sorter);\n\n    // The order of inputs, sorted independently of modules.\n    List<CompilerInput> absoluteOrder =\n        sorter.getDependenciesOf(inputs, depOptions.shouldSortDependencies());\n\n    // Figure out which sources *must* be in each module.\n    ListMultimap<JSModule, CompilerInput> entryPointInputsPerModule =\n        LinkedListMultimap.create();\n    for (CompilerInput input : entryPointInputs) {\n      JSModule module = input.getModule();\n      Preconditions.checkNotNull(module);\n      entryPointInputsPerModule.put(module, input);\n    }\n\n    // Clear the modules of their inputs. This also nulls out\n    // the input's reference to its module.\n    for (JSModule module : getAllModules()) {\n      module.removeAll();\n    }\n\n    // Figure out which sources *must* be in each module, or in one\n    // of that module's dependencies.\n    for (JSModule module : entryPointInputsPerModule.keySet()) {\n      List<CompilerInput> transitiveClosure =\n          sorter.getDependenciesOf(\n              entryPointInputsPerModule.get(module),\n              depOptions.shouldSortDependencies());\n      for (CompilerInput input : transitiveClosure) {\n        JSModule oldModule = input.getModule();\n        if (oldModule == null) {\n          input.setModule(module);\n        } else {\n          input.setModule(null);\n          input.setModule(\n              getDeepestCommonDependencyInclusive(oldModule, module));\n        }\n      }\n    }\n\n    // All the inputs are pointing to the modules that own them. Yeah!\n    // Update the modules to reflect this.\n    for (CompilerInput input : absoluteOrder) {\n      JSModule module = input.getModule();\n      if (module != null) {\n        module.add(input);\n      }\n    }\n\n    // Now, generate the sorted result.\n    List<CompilerInput> result = Lists.newArrayList();\n    for (JSModule module : getAllModules()) {\n      result.addAll(module.getInputs());\n    }\n\n    return result;\n  }\n",
        "begin_line": 367,
        "end_line": 432,
        "comment": "\n   * Apply the dependency options to the list of sources, returning a new\n   * source list re-ordering and dropping files as necessary.\n   * This module graph will be updated to reflect the new list.\n   *\n   * @param inputs The original list of sources. Used to ensure that the sort\n   *     is stable.\n   * @throws CircularDependencyException if there is a circular dependency\n   *     between the provides and requires.\n   * @throws MissingProvideException if an entry point was not provided\n   *     by any of the inputs.\n   * @see DependencyOptions for more info on how this works.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.removeAll#145",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.removeAll()",
        "snippet": "  public void removeAll() {\n    for (CompilerInput input : inputs) {\n      input.setModule(null);\n    }\n    inputs.clear();\n  }\n",
        "begin_line": 145,
        "end_line": 150,
        "comment": " Removes all of the inputs from this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.getType#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.getType()",
        "snippet": "  public DiagnosticType getType() {\n    return type;\n  }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.level#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level(com.google.javascript.jscomp.JSError)",
        "snippet": "  @Override\n  public CheckLevel level(JSError error) {\n    return group.matches(error) ? level : null;\n  }\n",
        "begin_line": 35,
        "end_line": 38,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.JSError)",
        "snippet": "  public boolean matches(JSError error) {\n    return matches(error.getType());\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n   * Returns whether the given error's type matches a type\n   * in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "DependencyOptions.shouldSortDependencies#125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.shouldSortDependencies()",
        "snippet": "  boolean shouldSortDependencies() {\n    return sortDependencies;\n  }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getModule#320",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getModule()",
        "snippet": "  public JSModule getModule() {\n    return module;\n  }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": " Returns the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0967
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getLastChild#541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLastChild()",
        "snippet": "  public Node getLastChild() {\n    return last;\n  }\n",
        "begin_line": 541,
        "end_line": 543,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.isAllowedProp#947",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isAllowedProp(java.lang.String)",
        "snippet": "    private boolean isAllowedProp(String identifier) {\n      if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n        return !TokenStream.isKeyword(identifier);\n      }\n      return true;\n    }\n",
        "begin_line": 947,
        "end_line": 952,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.isReservedKeyword#954",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isReservedKeyword(java.lang.String)",
        "snippet": "    private boolean isReservedKeyword(String identifier) {\n      if (config.languageMode == LanguageMode.ECMASCRIPT3) {\n        return TokenStream.isKeyword(identifier);\n      }\n      return reservedKeywords != null && reservedKeywords.contains(identifier);\n    }\n",
        "begin_line": 954,
        "end_line": 959,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.IRFactory#149",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.IRFactory(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  private IRFactory(String sourceString,\n                    StaticSourceFile sourceFile,\n                    Config config,\n                    ErrorReporter errorReporter) {\n    this.sourceString = sourceString;\n    this.newlines = Lists.newArrayList();\n    this.sourceFile = sourceFile;\n\n    // Pre-generate all the newlines in the file.\n    for (int charNo = 0; true; charNo++) {\n      charNo = sourceString.indexOf('\\n', charNo);\n      if (charNo == -1) break;\n      newlines.add(Integer.valueOf(charNo));\n    }\n\n    // Sometimes this will be null in tests.\n    this.sourceName = sourceFile == null ? null : sourceFile.getName();\n\n    this.config = config;\n    this.errorReporter = errorReporter;\n    this.transformDispatcher = new TransformDispatcher();\n    // The template node properties are applied to all nodes in this transform.\n    this.templateNode = createTemplateNode();\n\n    switch (config.languageMode) {\n      case ECMASCRIPT3:\n        reservedKeywords = null; // use TokenStream.isKeyword instead\n        break;\n      case ECMASCRIPT5:\n        reservedKeywords = ES5_RESERVED_KEYWORDS;\n        break;\n      case ECMASCRIPT5_STRICT:\n        reservedKeywords = ES5_STRICT_RESERVED_KEYWORDS;\n        break;\n      default:\n        throw new IllegalStateException(\"unknown language mode\");\n    }\n  }\n",
        "begin_line": 149,
        "end_line": 186,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModuleGraph.getModulesByName#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.getModulesByName()",
        "snippet": "  Map<String, JSModule> getModulesByName() {\n    Map<String, JSModule> result = Maps.newHashMap();\n    for (JSModule m : modules) {\n      result.put(m.getName(), m);\n    }\n    return result;\n  }\n",
        "begin_line": 127,
        "end_line": 133,
        "comment": "\n   * Gets all modules indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.getName#68",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return name;\n  }\n",
        "begin_line": 68,
        "end_line": 71,
        "comment": " Gets the module name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "DependencyOptions.shouldPruneDependencies#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.shouldPruneDependencies()",
        "snippet": "  boolean shouldPruneDependencies() {\n    return pruneDependencies;\n  }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getParserConfig#2112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getParserConfig()",
        "snippet": "  @Override\n  Config getParserConfig() {\n    if (parserConfig == null) {\n      Config.LanguageMode mode;\n      switch (options.getLanguageIn()) {\n        case ECMASCRIPT3:\n          mode = Config.LanguageMode.ECMASCRIPT3;\n          break;\n        case ECMASCRIPT5:\n          mode = Config.LanguageMode.ECMASCRIPT5;\n          break;\n        case ECMASCRIPT5_STRICT:\n          mode = Config.LanguageMode.ECMASCRIPT5_STRICT;\n          break;\n        default:\n          throw new IllegalStateException(\"unexpected language mode\");\n      }\n\n      parserConfig = ParserRunner.createConfig(\n        isIdeMode(),\n        mode,\n        acceptConstKeyword(),\n        options.extraAnnotationNames);\n    }\n    return parserConfig;\n  }\n",
        "begin_line": 2112,
        "end_line": 2137,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "SortedDependencies.topologicalStableSort#239",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SortedDependencies.java",
        "class_name": "com.google.javascript.jscomp.deps.SortedDependencies",
        "signature": "com.google.javascript.jscomp.deps.SortedDependencies.topologicalStableSort(java.util.List<T>, com.google.common.collect.Multimap<T, T>)",
        "snippet": "  private static <T> List<T> topologicalStableSort(\n      List<T> items, Multimap<T, T> deps) {\n    if (items.size() == 0) {\n      // Priority queue blows up if we give it a size of 0. Since we need\n      // to special case this either way, just bail out.\n      return Lists.newArrayList();\n    }\n\n    final Map<T, Integer> originalIndex = Maps.newHashMap();\n    for (int i = 0; i < items.size(); i++) {\n      originalIndex.put(items.get(i), i);\n    }\n\n    PriorityQueue<T> inDegreeZero = new PriorityQueue<T>(items.size(),\n        new Comparator<T>() {\n      @Override\n      public int compare(T a, T b) {\n        return originalIndex.get(a).intValue() -\n            originalIndex.get(b).intValue();\n      }\n    });\n    List<T> result = Lists.newArrayList();\n\n    Multiset<T> inDegree = HashMultiset.create();\n    Multimap<T, T> reverseDeps = ArrayListMultimap.create();\n    Multimaps.invertFrom(deps, reverseDeps);\n\n    // First, add all the inputs with in-degree 0.\n    for (T item : items) {\n      Collection<T> itemDeps = deps.get(item);\n      inDegree.add(item, itemDeps.size());\n      if (itemDeps.isEmpty()) {\n        inDegreeZero.add(item);\n      }\n    }\n\n    // Then, iterate to a fixed point over the reverse dependency graph.\n    while (!inDegreeZero.isEmpty()) {\n      T item = inDegreeZero.remove();\n      result.add(item);\n      for (T inWaiting : reverseDeps.get(item)) {\n        inDegree.remove(inWaiting, 1);\n        if (inDegree.count(inWaiting) == 0) {\n          inDegreeZero.add(inWaiting);\n        }\n      }\n    }\n\n    return result;\n  }\n",
        "begin_line": 239,
        "end_line": 288,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSError.JSError#152",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "class_name": "com.google.javascript.jscomp.JSError",
        "signature": "com.google.javascript.jscomp.JSError.JSError(java.lang.String, com.google.javascript.rhino.Node, int, int, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.CheckLevel, java.lang.String...)",
        "snippet": "  private JSError(\n      String sourceName, @Nullable Node node, int lineno, int charno,\n      DiagnosticType type, CheckLevel level, String... arguments) {\n    this.type = type;\n    this.node = node;\n    this.description = type.format.format(arguments);\n    this.lineNumber = lineno;\n    this.charno = charno;\n    this.sourceName = sourceName;\n    this.defaultLevel = level == null ? type.level : level;\n    this.level = level == null ? type.level : level;\n  }\n",
        "begin_line": 152,
        "end_line": 163,
        "comment": "\n   * Creates a JSError at a CheckLevel for a source file location.\n   * Private to avoid any entanglement with code outside of the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.fromString#2220",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.LanguageMode.fromString(java.lang.String)",
        "snippet": "    public static LanguageMode fromString(String value) {\n      if (value.equals(\"ECMASCRIPT5_STRICT\") ||\n          value.equals(\"ES5_STRICT\")) {\n        return CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT;\n      } else if (value.equals(\"ECMASCRIPT5\") ||\n          value.equals(\"ES5\")) {\n        return CompilerOptions.LanguageMode.ECMASCRIPT5;\n      } else if (value.equals(\"ECMASCRIPT3\") ||\n                 value.equals(\"ES3\")) {\n        return CompilerOptions.LanguageMode.ECMASCRIPT3;\n      }\n      return null;\n    }\n",
        "begin_line": 2220,
        "end_line": 2232,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0958
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDependencyInfo.SimpleDependencyInfo#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.SimpleDependencyInfo(java.lang.String, java.lang.String, java.util.List<java.lang.String>, java.util.List<java.lang.String>)",
        "snippet": "  public SimpleDependencyInfo(\n      String srcPathRelativeToClosure, String pathOfDefiningFile,\n      List<String> provides, List<String> requires) {\n    this.srcPathRelativeToClosure = srcPathRelativeToClosure;\n    this.pathOfDefiningFile = pathOfDefiningFile;\n    this.provides = provides;\n    this.requires = requires;\n  }\n",
        "begin_line": 55,
        "end_line": 62,
        "comment": "\n   * Constructs a DependencyInfo object with the given list of provides &\n   * requires. This does *not* copy the given lists, but uses them directly.\n   *\n   * @param srcPathRelativeToClosure The closure-relative path of the file\n   *     associated with this DependencyInfo.\n   * @param pathOfDefiningFile The path to the file from which this dependency\n   *     information was extracted.\n   * @param provides List of provided symbols.\n   * @param requires List of required symbols.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDependencyInfo.getProvides#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.getProvides()",
        "snippet": "  @Override\n  public Collection<String> getProvides() {\n    return Collections.<String>unmodifiableList(provides);\n  }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDependencyInfo.getRequires#79",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.getRequires()",
        "snippet": "  @Override\n  public Collection<String> getRequires() {\n    return Collections.<String>unmodifiableList(requires);\n  }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleDependencyInfo.toString#97",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/SimpleDependencyInfo.java",
        "class_name": "com.google.javascript.jscomp.deps.SimpleDependencyInfo",
        "signature": "com.google.javascript.jscomp.deps.SimpleDependencyInfo.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return String.format(\"DependencyInfo(relativePath='%1$s', path='%2$s', \"\n        + \"provides=%3$s, requires=%4$s)\", srcPathRelativeToClosure,\n        pathOfDefiningFile, provides, requires);\n  }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsFileParser.JsFileParser#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.JsFileParser(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public JsFileParser(ErrorManager errorManager) {\n    super(errorManager);\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "\n   * Constructor\n   *\n   * @param errorManager Handles parse errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsFileParser.setIncludeGoogBase#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.setIncludeGoogBase(boolean)",
        "snippet": "  public JsFileParser setIncludeGoogBase(boolean include) {\n    includeGoogBase = include;\n    return this;\n  }\n",
        "begin_line": 82,
        "end_line": 85,
        "comment": "\n   * Sets whether we should create implicit provides and requires of the\n   * root namespace.\n   *\n   * When generating deps files, you do not want this behavior. Deps files\n   * need base.js to run anyway, so they don't need information about it.\n   *\n   * When generating abstract build graphs, you probably do want this behavior.\n   * It will create an implicit dependency of all files with provides/requires\n   * on base.js.\n   *\n   * @return this for easy chaining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsFileParser.parseFile#112",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.parseFile(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  public DependencyInfo parseFile(String filePath, String closureRelativePath,\n      String fileContents) {\n    return parseReader(filePath, closureRelativePath,\n        new StringReader(fileContents));\n  }\n",
        "begin_line": 112,
        "end_line": 116,
        "comment": "\n   * Parses the given file and returns the dependency information that it\n   * contained.\n   *\n   * @param filePath Path to the file to parse.\n   * @param closureRelativePath Path of the file relative to closure.\n   * @param fileContents The contents to parse.\n   * @return A DependencyInfo containing all provides/requires found in the\n   *     file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsFileParser.parseReader#118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileParser.parseReader(java.lang.String, java.lang.String, java.io.Reader)",
        "snippet": "  private DependencyInfo parseReader(String filePath,\n      String closureRelativePath, Reader fileContents) {\n    provides = Lists.newArrayList();\n    requires = Lists.newArrayList();\n    fileHasProvidesOrRequires = false;\n\n    logger.fine(\"Parsing Source: \" + filePath);\n    doParse(filePath, fileContents);\n\n    DependencyInfo dependencyInfo = new SimpleDependencyInfo(\n        closureRelativePath, filePath, provides, requires);\n    logger.fine(\"DepInfo: \" + dependencyInfo);\n    return dependencyInfo;\n  }\n",
        "begin_line": 118,
        "end_line": 131,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsFileLineParser.JsFileLineParser#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/deps/JsFileLineParser.java",
        "class_name": "com.google.javascript.jscomp.deps.JsFileLineParser",
        "signature": "com.google.javascript.jscomp.deps.JsFileLineParser.JsFileLineParser(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public JsFileLineParser(ErrorManager errorManager) {\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\n   * Constructor.\n   *\n   * @param errorManager Parse error handler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModuleGraph.JSModuleGraph#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModuleGraph.java",
        "class_name": "com.google.javascript.jscomp.JSModuleGraph",
        "signature": "com.google.javascript.jscomp.JSModuleGraph.JSModuleGraph(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  public JSModuleGraph(List<JSModule> modulesInDepOrder) {\n    Preconditions.checkState(\n        modulesInDepOrder.size() == Sets.newHashSet(modulesInDepOrder).size(),\n        \"Found duplicate modules\");\n    modules = ImmutableList.copyOf(modulesInDepOrder);\n    modulesByDepth = Lists.newArrayList();\n\n    for (JSModule module : modulesInDepOrder) {\n      int depth = 0;\n      for (JSModule dep : module.getDependencies()) {\n        int depDepth = dep.getDepth();\n        if (depDepth < 0) {\n          throw new ModuleDependenceException(String.format(\n              \"Modules not in dependency order: %s preceded %s\",\n              module.getName(), dep.getName()),\n              module, dep);\n        }\n        depth = Math.max(depth, depDepth + 1);\n      }\n\n      module.setDepth(depth);\n      if (depth == modulesByDepth.size()) {\n        modulesByDepth.add(new ArrayList<JSModule>());\n      }\n      modulesByDepth.get(depth).add(module);\n    }\n  }\n",
        "begin_line": 89,
        "end_line": 115,
        "comment": "\n   * Creates a module graph from a list of modules in dependency order.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.getDependencies#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getDependencies()",
        "snippet": "  public List<JSModule> getDependencies() {\n    return deps;\n  }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n   * Gets the list of modules that this module depends on.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.setDepth#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.setDepth(int)",
        "snippet": "  public void setDepth(int dep) {\n    this.depth = dep;\n  }\n",
        "begin_line": 294,
        "end_line": 296,
        "comment": "\n   * @param dep the depth to set\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getSourceFile#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return ast.getSourceFile();\n  }\n",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.checkErrorManager#151",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.checkErrorManager()",
        "snippet": "  private void checkErrorManager() {\n    Preconditions.checkNotNull(compiler,\n        \"Expected setCompiler to be called first: \" + this);\n    Preconditions.checkNotNull(compiler.getErrorManager(),\n        \"Expected compiler to call an error manager: \" + this);\n  }\n",
        "begin_line": 151,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getRequires#159",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getRequires()",
        "snippet": "  @Override\n  public Collection<String> getRequires() {\n    checkErrorManager();\n    try {\n      regenerateDependencyInfoIfNecessary();\n      return Collections.<String>unmodifiableSet(requires);\n    } catch (IOException e) {\n      compiler.getErrorManager().report(CheckLevel.ERROR,\n          JSError.make(AbstractCompiler.READ_ERROR, getName()));\n      return ImmutableList.<String>of();\n    }\n  }\n",
        "begin_line": 159,
        "end_line": 170,
        "comment": " Gets a list of types depended on by this input. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getProvides#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getProvides()",
        "snippet": "  @Override\n  public Collection<String> getProvides() {\n    checkErrorManager();\n    try {\n      regenerateDependencyInfoIfNecessary();\n      return Collections.<String>unmodifiableSet(provides);\n    } catch (IOException e) {\n      compiler.getErrorManager().report(CheckLevel.ERROR,\n          JSError.make(AbstractCompiler.READ_ERROR, getName()));\n      return ImmutableList.<String>of();\n    }\n  }\n",
        "begin_line": 173,
        "end_line": 184,
        "comment": " Gets a list of types provided by this input. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.regenerateDependencyInfoIfNecessary#206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.regenerateDependencyInfoIfNecessary()",
        "snippet": "  private void regenerateDependencyInfoIfNecessary() throws IOException {\n    // If the code is NOT a JsAst, then it was not originally JS code.\n    // Look at the Ast for dependency info.\n    if (!(ast instanceof JsAst)) {\n      Preconditions.checkNotNull(compiler,\n          \"Expected setCompiler to be called first\");\n      DepsFinder finder = new DepsFinder();\n      Node root = getAstRoot(compiler);\n      if (root == null) {\n        return;\n      }\n\n      finder.visitTree(getAstRoot(compiler));\n\n      // TODO(nicksantos|user): This caching behavior is a bit\n      // odd, and only works if you assume the exact call flow that\n      // clients are currently using.  In that flow, they call\n      // getProvides(), then remove the goog.provide calls from the\n      // AST, and then call getProvides() again.\n      //\n      // This won't work for any other call flow, or any sort of incremental\n      // compilation scheme. The API needs to be fixed so callers aren't\n      // doing weird things like this, and then we should get rid of the\n      // multiple-scan strategy.\n\n      provides.addAll(finder.provides);\n      requires.addAll(finder.requires);\n    } else {\n      // Otherwise, look at the source code.\n      if (!generatedDependencyInfoFromSource) {\n        // Note: it's OK to use getName() instead of\n        // getPathRelativeToClosureBase() here because we're not using\n        // this to generate deps files. (We're only using it for\n        // symbol dependencies.)\n        DependencyInfo info =\n            (new JsFileParser(compiler.getErrorManager()))\n            .setIncludeGoogBase(true)\n            .parseFile(getName(), getName(), getCode());\n\n        provides.addAll(info.getProvides());\n        requires.addAll(info.getRequires());\n\n        generatedDependencyInfoFromSource = true;\n      }\n    }\n  }\n",
        "begin_line": 206,
        "end_line": 251,
        "comment": "\n   * Regenerates the provides/requires if we need to do so.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getCode#315",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return getSourceFile().getCode();\n  }\n",
        "begin_line": 315,
        "end_line": 317,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.toString#360",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.toString()",
        "snippet": "  @Override\n  public String toString() {\n    return getName();\n  }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.processResults#804",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.processResults(com.google.javascript.jscomp.Result, java.util.List<com.google.javascript.jscomp.JSModule>, B)",
        "snippet": "  int processResults(Result result, List<JSModule> modules, B options)\n       throws FlagUsageException, IOException {\n    if (config.printPassGraph) {\n      if (compiler.getRoot() == null) {\n        return 1;\n      } else {\n        Appendable jsOutput = createDefaultOutput();\n        jsOutput.append(\n            DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));\n        jsOutput.append('\\n');\n        closeAppendable(jsOutput);\n        return 0;\n      }\n    }\n\n    if (config.printAst) {\n      if (compiler.getRoot() == null) {\n        return 1;\n      } else {\n        Appendable jsOutput = createDefaultOutput();\n        ControlFlowGraph<Node> cfg = compiler.computeCFG();\n        DotFormatter.appendDot(\n            compiler.getRoot().getLastChild(), cfg, jsOutput);\n        jsOutput.append('\\n');\n        closeAppendable(jsOutput);\n        return 0;\n      }\n    }\n\n    if (config.printTree) {\n      if (compiler.getRoot() == null) {\n        compiler.report(JSError.make(NO_TREE_GENERATED_ERROR));\n        return 1;\n      } else {\n        Appendable jsOutput = createDefaultOutput();\n        compiler.getRoot().appendStringTree(jsOutput);\n        jsOutput.append(\"\\n\");\n        closeAppendable(jsOutput);\n        return 0;\n      }\n    }\n\n    rootRelativePathsMap = constructRootRelativePathsMap();\n\n    if (config.skipNormalOutputs) {\n      // Output the manifest and bundle files if requested.\n      outputManifest();\n      outputBundle();\n      outputModuleGraphJson();\n      return 0;\n    } else if (result.success) {\n      outputModuleGraphJson();\n      if (modules == null) {\n        outputSingleBinary();\n\n        // Output the source map if requested.\n        outputSourceMap(options, config.jsOutputFile);\n      } else {\n        outputModuleBinaryAndSourceMaps(modules, options);\n      }\n\n      // Output the externs if required.\n      if (options.externExportsPath != null) {\n        Writer eeOut =\n            openExternExportsStream(options, config.jsOutputFile);\n        eeOut.append(result.externExport);\n        eeOut.close();\n      }\n\n      // Output the variable and property name maps if requested.\n      outputNameMaps();\n\n      // Output the manifest and bundle files if requested.\n      outputManifest();\n      outputBundle();\n    }\n\n    // return 0 if no errors, the error count otherwise\n    return Math.min(result.errors.length, 0x7f);\n  }\n",
        "begin_line": 804,
        "end_line": 883,
        "comment": "\n   * Processes the results of the compile job, and returns an error code.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.constructRootRelativePathsMap#1513",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.constructRootRelativePathsMap()",
        "snippet": "  private Map<String, String> constructRootRelativePathsMap() {\n    Map<String, String> rootRelativePathsMap = Maps.newLinkedHashMap();\n    for (String mapString : config.manifestMaps) {\n      int colonIndex = mapString.indexOf(':');\n      Preconditions.checkState(colonIndex > 0);\n      String execPath = mapString.substring(0, colonIndex);\n      String rootRelativePath = mapString.substring(colonIndex + 1);\n      Preconditions.checkState(rootRelativePath.indexOf(':') == -1);\n      rootRelativePathsMap.put(execPath, rootRelativePath);\n    }\n    return rootRelativePathsMap;\n  }\n",
        "begin_line": 1513,
        "end_line": 1524,
        "comment": "\n   * Construct and return the input root path map. The key is the exec path of\n   * each input file, and the value is the corresponding root relative path.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.StringNode#200",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String, int, int)",
        "snippet": "    StringNode(int type, String str, int lineno, int charno) {\n      super(type, lineno, charno);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 200,
        "end_line": 206,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#442",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, int, int)",
        "snippet": "  public Node(int nodeType, int lineno, int charno) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 442,
        "end_line": 446,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#448",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, int, int)",
        "snippet": "  public Node(int nodeType, Node child, int lineno, int charno) {\n    this(nodeType, child);\n    sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 448,
        "end_line": 451,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#517",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(java.lang.String, int, int)",
        "snippet": "  public static Node newString(String str, int lineno, int charno) {\n    return new StringNode(Token.STRING, str, lineno, charno);\n  }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setLength#1138",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLength(int)",
        "snippet": "  public void setLength(int length) {\n    putIntProp(LENGTH, length);\n  }\n",
        "begin_line": 1138,
        "end_line": 1140,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.mergeLineCharNo#1197",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.mergeLineCharNo(int, int)",
        "snippet": "  protected static int mergeLineCharNo(int lineno, int charno) {\n    if (lineno < 0 || charno < 0) {\n      return -1;\n    } else if ((charno & ~COLUMN_MASK) != 0) {\n      return lineno << COLUMN_BITS | COLUMN_MASK;\n    } else {\n      return lineno << COLUMN_BITS | (charno & COLUMN_MASK);\n    }\n  }\n",
        "begin_line": 1197,
        "end_line": 1205,
        "comment": "\n   * Merges the line number and character number in one integer. The Character\n   * number takes the first 12 bits and the line number takes the rest. If\n   * the character number is greater than <code>2<sup>12</sup>-1</code> it is\n   * adjusted to <code>2<sup>12</sup>-1</code>.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSTypeExpression.JSTypeExpression#64",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "signature": "com.google.javascript.rhino.JSTypeExpression.JSTypeExpression(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  public JSTypeExpression(Node root, String sourceName) {\n    this.root = root;\n    this.sourceName = sourceName;\n  }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.JSDocInfoBuilder#69",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.JSDocInfoBuilder(boolean)",
        "snippet": "  public JSDocInfoBuilder(boolean parseDocumentation) {\n    this.currentInfo = new JSDocInfo(parseDocumentation);\n    this.parseDocumentation = parseDocumentation;\n  }\n",
        "begin_line": 69,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordOriginalCommentString#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordOriginalCommentString(java.lang.String)",
        "snippet": "  public void recordOriginalCommentString(String sourceComment) {\n    if (parseDocumentation) {\n      currentInfo.setOriginalCommentString(sourceComment);\n    }\n  }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "\n   * Sets the original JSDoc comment string. This is a no-op if the builder\n   * isn't configured to record documentation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordOriginalCommentPosition#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordOriginalCommentPosition(int)",
        "snippet": "  public void recordOriginalCommentPosition(int position) {\n    if (parseDocumentation) {\n      currentInfo.setOriginalCommentPosition(position);\n    }\n  }\n",
        "begin_line": 87,
        "end_line": 91,
        "comment": "\n   * Sets the position of original JSDoc comment.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.shouldParseDocumentation#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.shouldParseDocumentation()",
        "snippet": "  public boolean shouldParseDocumentation() {\n    return parseDocumentation;\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.isPopulated#101",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulated()",
        "snippet": "  public boolean isPopulated() {\n    return populated;\n  }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.isPopulatedWithFileOverview#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.isPopulatedWithFileOverview()",
        "snippet": "  public boolean isPopulatedWithFileOverview() {\n    return isPopulated() &&\n        (currentInfo.hasFileOverview() || currentInfo.isExterns() ||\n         currentInfo.isNoCompile());\n  }\n",
        "begin_line": 110,
        "end_line": 114,
        "comment": "\n   * Returns whether this builder is populated with information that can be\n   * used to {@link #build} a {@link JSDocInfo} object that has a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.build#133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.build(com.google.javascript.rhino.Node)",
        "snippet": "  public JSDocInfo build(Node associatedNode) {\n    if (populated) {\n      JSDocInfo built = currentInfo;\n      built.setAssociatedNode(associatedNode);\n      populateDefaults(built);\n      populated = false;\n      currentInfo = new JSDocInfo(this.parseDocumentation);\n      return built;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 133,
        "end_line": 144,
        "comment": "\n   * Builds a {@link JSDocInfo} object based on the populated information and\n   * returns it. Once this method is called, the builder can be reused to build\n   * another {@link JSDocInfo} object.\n   *\n   * @param associatedNode The source node containing the JSDoc.\n   * @return a {@link JSDocInfo} object populated with the values given to this\n   *     builder. If no value was populated, this method simply returns\n   *     {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.populateDefaults#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  private static void populateDefaults(JSDocInfo info) {\n    if (info.getVisibility() == null) {\n      info.setVisibility(Visibility.INHERITED);\n    }\n  }\n",
        "begin_line": 147,
        "end_line": 151,
        "comment": " Generate defaults when certain parameters are not specified. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markAnnotation#157",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markAnnotation(java.lang.String, int, int)",
        "snippet": "  public void markAnnotation(String annotation, int lineno, int charno) {\n    JSDocInfo.Marker marker = currentInfo.addMarker();\n\n    if (marker != null) {\n      JSDocInfo.TrimmedStringPosition position =\n          new JSDocInfo.TrimmedStringPosition();\n      position.setItem(annotation);\n      position.setPositionInformation(lineno, charno, lineno,\n          charno + annotation.length());\n      marker.setAnnotation(position);\n      populated = true;\n    }\n\n    currentMarker = marker;\n  }\n",
        "begin_line": 157,
        "end_line": 171,
        "comment": "\n   * Adds a marker to the current JSDocInfo and populates the marker with the\n   * annotation information.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markTypeNode#190",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markTypeNode(com.google.javascript.rhino.Node, int, int, int, int, boolean)",
        "snippet": "  public void markTypeNode(Node typeNode, int lineno, int startCharno,\n      int endLineno, int endCharno, boolean hasLC) {\n    if (currentMarker != null) {\n      JSDocInfo.TypePosition position = new JSDocInfo.TypePosition();\n      position.setItem(typeNode);\n      position.setHasBrackets(hasLC);\n      position.setPositionInformation(lineno, startCharno,\n          endLineno, endCharno);\n      currentMarker.setType(position);\n    }\n  }\n",
        "begin_line": 190,
        "end_line": 200,
        "comment": "\n   * Adds a type declaration to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.markName#214",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.markName(java.lang.String, com.google.javascript.rhino.jstype.StaticSourceFile, int, int)",
        "snippet": "  public void markName(String name, StaticSourceFile file,\n      int lineno, int charno) {\n    if (currentMarker != null) {\n      // Record the name as both a SourcePosition<String> and a\n      // SourcePosition<Node>. The <String> form is deprecated,\n      // because <Node> is more consistent with how other name\n      // references are handled (see #markTypeNode)\n      //\n      // TODO(nicksantos): Remove all uses of the Name position\n      // and replace them with the NameNode position.\n      JSDocInfo.TrimmedStringPosition position =\n          new JSDocInfo.TrimmedStringPosition();\n      position.setItem(name);\n      position.setPositionInformation(lineno, charno,\n          lineno, charno + name.length());\n      currentMarker.setName(position);\n\n      SourcePosition<Node> nodePos =\n          new JSDocInfo.NamePosition();\n      Node node = Node.newString(Token.NAME, name, lineno, charno);\n      node.setLength(name.length());\n      node.setStaticSourceFile(file);\n      nodePos.setItem(node);\n      nodePos.setPositionInformation(lineno, charno,\n          lineno, charno + name.length());\n      currentMarker.setNameNode(nodePos);\n    }\n  }\n",
        "begin_line": 214,
        "end_line": 241,
        "comment": "\n   * Adds a name declaration to the current marker.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordParameter#275",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordParameter(java.lang.String, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordParameter(String parameterName, JSTypeExpression type) {\n    if (!hasAnySingletonTypeTags() &&\n        currentInfo.declareParam(type, parameterName)) {\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 275,
        "end_line": 283,
        "comment": "\n   * Records a typed parameter.\n   *\n   * @return {@code true} if the typed parameter was recorded and\n   *     {@code false} if a parameter with the same name was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordThrowType#319",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordThrowType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordThrowType(JSTypeExpression type) {\n    if (!hasAnySingletonTypeTags()) {\n      currentInfo.declareThrows(type);\n      populated = true;\n      return true;\n    }\n    return false;\n  }\n",
        "begin_line": 319,
        "end_line": 326,
        "comment": "\n   * Records a thrown type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordType#477",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordType(JSTypeExpression type) {\n    if (type != null && !hasAnyTypeRelatedTags()) {\n      currentInfo.setType(type);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 477,
        "end_line": 485,
        "comment": "\n   * Records a type.\n   *\n   * @return {@code true} if the type was recorded and {@code false} if\n   *     it is invalid or was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordReturnType#524",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordReturnType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordReturnType(JSTypeExpression jsType) {\n    if (jsType != null && currentInfo.getReturnType() == null &&\n        !hasAnySingletonTypeTags()) {\n      currentInfo.setReturnType(jsType);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 524,
        "end_line": 533,
        "comment": "\n   * Records a return type.\n   *\n   * @return {@code true} if the return type was recorded and {@code false} if\n   *     it is invalid or was already defined\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordThisType#593",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordThisType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  public boolean recordThisType(JSTypeExpression type) {\n    if (type != null && !hasAnySingletonTypeTags() &&\n        !currentInfo.hasThisType()) {\n      currentInfo.setThisType(type);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 593,
        "end_line": 602,
        "comment": "\n   * Records a type for {@code @this} annotation.\n   *\n   * @return {@code true} if the type was recorded and\n   *     {@code false} if it is invalid or if it collided with {@code @enum} or\n   *     {@code @type} annotations\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordConstructor#744",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordConstructor()",
        "snippet": "  public boolean recordConstructor() {\n    if (!hasAnySingletonTypeTags() &&\n        !currentInfo.isConstructor() && !currentInfo.isInterface()) {\n      currentInfo.setConstructor(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 744,
        "end_line": 753,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isConstructor()} flag set to {@code true}.\n   *\n   * @return {@code true} if the constructor was recorded and {@code false}\n   *     if it was already defined or it was incompatible with the existing\n   *     flags\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.recordNoSideEffects#957",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.recordNoSideEffects()",
        "snippet": "  public boolean recordNoSideEffects() {\n    if (!hasAnySingletonSideEffectTags()\n        && !currentInfo.isNoSideEffects()) {\n      currentInfo.setNoSideEffects(true);\n      populated = true;\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 957,
        "end_line": 966,
        "comment": "\n   * Records that the {@link JSDocInfo} being built should have its\n   * {@link JSDocInfo#isNoSideEffects()} flag set to {@code true}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.hasAnyTypeRelatedTags#1165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnyTypeRelatedTags()",
        "snippet": "  private boolean hasAnyTypeRelatedTags() {\n    return currentInfo.isConstructor() ||\n        currentInfo.isInterface() ||\n        currentInfo.getParameterCount() > 0 ||\n        currentInfo.hasReturnType() ||\n        currentInfo.hasBaseType() ||\n        currentInfo.getExtendedInterfacesCount() > 0 ||\n        currentInfo.getLendsName() != null ||\n        currentInfo.hasThisType() ||\n        hasAnySingletonTypeTags();\n  }\n",
        "begin_line": 1165,
        "end_line": 1175,
        "comment": "\n   * Whether the current doc info has other type tags, like\n   * {@code @param} or {@code @return} or {@code @type} or etc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonTypeTags#1182",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonTypeTags()",
        "snippet": "  private boolean hasAnySingletonTypeTags() {\n    return currentInfo.hasType() ||\n        currentInfo.hasTypedefType() ||\n        currentInfo.hasEnumParameterType();\n  }\n",
        "begin_line": 1182,
        "end_line": 1186,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfoBuilder.hasAnySingletonSideEffectTags#1193",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.hasAnySingletonSideEffectTags()",
        "snippet": "  private boolean hasAnySingletonSideEffectTags() {\n    return currentInfo.isNoSideEffects() ||\n        currentInfo.hasModifies();\n  }\n",
        "begin_line": 1193,
        "end_line": 1196,
        "comment": "\n   * Whether the current doc info has any of the singleton type\n   * tags that may not appear with other type tags, like\n   * {@code @type} or {@code @typedef}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setConstructor#374",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setConstructor(boolean)",
        "snippet": "  void setConstructor(boolean value) {\n    setFlag(value, MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 374,
        "end_line": 376,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setNoSideEffects#439",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setNoSideEffects(boolean)",
        "snippet": "  void setNoSideEffects(boolean value) {\n    setFlag(value, MASK_NOSIDEEFFECTS);\n  }\n",
        "begin_line": 439,
        "end_line": 441,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setFlag#455",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setFlag(boolean, int)",
        "snippet": "  private void setFlag(boolean value, int mask) {\n    if (value) {\n      bitset |= mask;\n    } else {\n      bitset &= ~mask;\n    }\n  }\n",
        "begin_line": 455,
        "end_line": 461,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isNoSideEffects#626",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isNoSideEffects()",
        "snippet": "  public boolean isNoSideEffects() {\n    return getFlag(MASK_NOSIDEEFFECTS);\n  }\n",
        "begin_line": 626,
        "end_line": 628,
        "comment": "\n   * Returns whether the {@code @nosideeffects} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isExterns#634",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isExterns()",
        "snippet": "  public boolean isExterns() {\n    return getFlag(MASK_EXTERNS);\n  }\n",
        "begin_line": 634,
        "end_line": 636,
        "comment": "\n   * Returns whether the {@code @externs} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isJavaDispatch#642",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isJavaDispatch()",
        "snippet": "  public boolean isJavaDispatch() {\n    return getFlag(MASK_JAVADISPATCH);\n  }\n",
        "begin_line": 642,
        "end_line": 644,
        "comment": "\n   * Returns whether the {@code @javadispatch} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isNoCompile#650",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isNoCompile()",
        "snippet": "  public boolean isNoCompile() {\n    return getFlag(MASK_NOCOMPILE);\n  }\n",
        "begin_line": 650,
        "end_line": 652,
        "comment": "\n   * Returns whether the {@code @nocompile} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setVisibility#681",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)",
        "snippet": "  public void setVisibility(Visibility visibility) {\n    this.visibility = visibility;\n  }\n",
        "begin_line": 681,
        "end_line": 683,
        "comment": " Visible for testing.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.lazyInitDocumentation#695",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitDocumentation()",
        "snippet": "  private boolean lazyInitDocumentation() {\n    if (!includeDocumentation) {\n      return false;\n    }\n\n    if (documentation == null) {\n      documentation = new LazilyInitializedDocumentation();\n    }\n\n    return true;\n  }\n",
        "begin_line": 695,
        "end_line": 705,
        "comment": "\n   * Lazily initializes the documentation information object, but only\n   * if the JSDocInfo was told to keep such information around.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.addMarker#711",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.addMarker()",
        "snippet": "  Marker addMarker() {\n    if (!lazyInitDocumentation()) {\n      return null;\n    }\n\n    if (documentation.markers == null) {\n      documentation.markers = Lists.newArrayList();\n    }\n\n    Marker marker = new Marker();\n    documentation.markers.add(marker);\n    return marker;\n  }\n",
        "begin_line": 711,
        "end_line": 723,
        "comment": "\n   * Adds a marker to the documentation (if it exists) and\n   * returns the marker. Returns null otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.declareParam#953",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.declareParam(com.google.javascript.rhino.JSTypeExpression, java.lang.String)",
        "snippet": "  boolean declareParam(JSTypeExpression jsType, String parameter) {\n    lazyInitInfo();\n    if (info.parameters == null) {\n      info.parameters = new LinkedHashMap<String, JSTypeExpression>();\n    }\n    if (!info.parameters.containsKey(parameter)) {\n      info.parameters.put(parameter, jsType);\n      return true;\n    } else {\n      return false;\n    }\n  }\n",
        "begin_line": 953,
        "end_line": 964,
        "comment": "\n   * Declares a parameter. Parameters are described using the {@code @param}\n   * annotation.\n   *\n   * @param jsType the parameter's type, it may be {@code null} when the\n   *     {@code @param} annotation did not specify a type.\n   * @param parameter the parameter's name\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.declareThrows#988",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.declareThrows(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  boolean declareThrows(JSTypeExpression jsType) {\n    lazyInitInfo();\n\n    if (info.thrownTypes == null) {\n      info.thrownTypes = Lists.newArrayList();\n    }\n\n    info.thrownTypes.add(jsType);\n    return true;\n  }\n",
        "begin_line": 988,
        "end_line": 997,
        "comment": "\n   * Declares that the method throws a given type.\n   *\n   * @param jsType The type that can be thrown by the method.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setType#1065",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 1065,
        "end_line": 1067,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setReturnType#1069",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setReturnType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setReturnType(JSTypeExpression type) {\n    setType(type, TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1069,
        "end_line": 1071,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setType#1081",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setType(com.google.javascript.rhino.JSTypeExpression, int)",
        "snippet": "  private void setType(JSTypeExpression type, int mask) {\n    if ((bitset & MASK_TYPEFIELD) != 0) {\n      throw new IllegalStateException(\n          \"API tried to add two incompatible type tags. \" +\n          \"This should have been blocked and emitted a warning.\");\n    }\n    this.bitset = (bitset & MASK_FLAGS) | mask;\n    this.type = type;\n  }\n",
        "begin_line": 1081,
        "end_line": 1089,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getReturnType#1147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getReturnType()",
        "snippet": "  public JSTypeExpression getReturnType() {\n    return getType(TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1147,
        "end_line": 1149,
        "comment": "\n   * Gets the return type specified by the {@code @return} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getType#1165",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getType(int)",
        "snippet": "  private JSTypeExpression getType(int typefield) {\n    if ((MASK_TYPEFIELD & bitset) == typefield) {\n      return type;\n    } else {\n      return null;\n    }\n  }\n",
        "begin_line": 1165,
        "end_line": 1171,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setThisType#1183",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setThisType(com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  void setThisType(JSTypeExpression type) {\n    this.thisType = type;\n  }\n",
        "begin_line": 1183,
        "end_line": 1185,
        "comment": "\n   * Sets the type specified by the {@code @this} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getBaseType#1203",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getBaseType()",
        "snippet": "  public JSTypeExpression getBaseType() {\n    return (info == null) ? null : info.baseType;\n  }\n",
        "begin_line": 1203,
        "end_line": 1205,
        "comment": "\n   * Gets the base type specified by the {@code @extends} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getLendsName#1247",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getLendsName()",
        "snippet": "  public String getLendsName() {\n    return (info == null) ? null : info.lendsName;\n  }\n",
        "begin_line": 1247,
        "end_line": 1249,
        "comment": "\n   * Gets the name we're lending to in a {@code @lends} annotation.\n   *\n   * In many reflection APIs, you pass an anonymous object to a function,\n   * and that function mixes the anonymous object into another object.\n   * The {@code @lends} annotation allows the type system to track\n   * those property assignments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasBaseType#1373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasBaseType()",
        "snippet": "  public boolean hasBaseType() {\n    return getBaseType() != null;\n  }\n",
        "begin_line": 1373,
        "end_line": 1375,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @extends}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getExtendedInterfacesCount#1450",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getExtendedInterfacesCount()",
        "snippet": "  public int getExtendedInterfacesCount() {\n    if (info == null || info.extendedInterfaces == null) {\n      return 0;\n    }\n    return info.extendedInterfaces.size();\n  }\n",
        "begin_line": 1450,
        "end_line": 1455,
        "comment": "\n   * Gets the number of extended interfaces specified\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasFileOverview#1542",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasFileOverview()",
        "snippet": "  public boolean hasFileOverview() {\n    return getFlag(MASK_FILEOVERVIEW);\n  }\n",
        "begin_line": 1542,
        "end_line": 1544,
        "comment": "\n   * Returns whether this has a fileoverview flag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.setAssociatedNode#1564",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.setAssociatedNode(com.google.javascript.rhino.Node)",
        "snippet": "  public void setAssociatedNode(Node node) {\n    this.associatedNode = node;\n  }\n",
        "begin_line": 1564,
        "end_line": 1566,
        "comment": "\n   * Sets the node associated with this JSDoc.\n   * Notice that many nodes may have pointer to the same JSDocInfo\n   * object (because we propagate it across the type graph). But there\n   * is only one canonical \"owner\" node of the JSDocInfo, which corresponds\n   * to its original place in the syntax tree.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasModifies#1643",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasModifies()",
        "snippet": "  public boolean hasModifies() {\n    return info != null && info.modifies != null;\n  }\n",
        "begin_line": 1643,
        "end_line": 1645,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.JsDocTokenStream#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.JsDocTokenStream(java.lang.String, int, int)",
        "snippet": "  JsDocTokenStream(String sourceString, int lineno, int initCharno) {\n    Preconditions.checkNotNull(sourceString);\n    this.lineno = lineno;\n    this.sourceString = sourceString;\n    this.sourceEnd = sourceString.length();\n    this.sourceCursor = this.cursor = 0;\n    this.initLineno = lineno;\n    this.initCharno = initCharno;\n  }\n",
        "begin_line": 44,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getJsDocToken#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getJsDocToken()",
        "snippet": "  @SuppressWarnings(\"fallthrough\")\n  final JsDocToken getJsDocToken() {\n    int c;\n    stringBufferTop = 0;\n    for (;;) {\n      // eat white spaces\n      for (;;) {\n        charno = -1;\n        c = getChar();\n        if (c == EOF_CHAR) {\n          return JsDocToken.EOF;\n        } else if (c == '\\n') {\n          return JsDocToken.EOL;\n        } else if (!isJSSpace(c)) {\n          break;\n        }\n      }\n\n      switch (c) {\n        // annotation, e.g. @type or @constructor\n        case '@':\n          do {\n            c = getChar();\n            if (isAlpha(c)) {\n              addToString(c);\n            } else {\n              ungetChar(c);\n              this.string = getStringFromBuffer();\n              stringBufferTop = 0;\n              return JsDocToken.ANNOTATION;\n            }\n          } while (true);\n\n        case '*':\n          if (matchChar('/')) {\n            return JsDocToken.EOC;\n          } else {\n            return JsDocToken.STAR;\n          }\n\n        case ',':\n          return JsDocToken.COMMA;\n\n        case '>':\n          return JsDocToken.GT;\n\n        case '(':\n          return JsDocToken.LP;\n\n        case ')':\n          return JsDocToken.RP;\n\n        case '{':\n          return JsDocToken.LC;\n\n        case '}':\n          return JsDocToken.RC;\n\n        case '[':\n          return JsDocToken.LB;\n\n        case ']':\n          return JsDocToken.RB;\n\n        case '?':\n          return JsDocToken.QMARK;\n\n        case '!':\n          return JsDocToken.BANG;\n\n        case ':':\n          return JsDocToken.COLON;\n\n        case '=':\n          return JsDocToken.EQUALS;\n\n        case '|':\n          matchChar('|');\n          return JsDocToken.PIPE;\n\n        case '.':\n          c = getChar();\n          if (c == '<') {\n            return JsDocToken.LT;\n          } else {\n            if (c == '.') {\n              c = getChar();\n              if (c == '.') {\n                return JsDocToken.ELLIPSIS;\n              } else {\n                addToString('.');\n              }\n            }\n            // we may backtrack across line boundary\n            ungetBuffer[ungetCursor++] = c;\n            c = '.';\n          }\n          // fall through\n\n        default: {\n          // recognize a JsDoc string but discard last . if it is followed by\n          // a non-JsDoc comment char, e.g. Array.<\n          int c1 = c;\n          addToString(c);\n          int c2 = getChar();\n          if (!isJSDocString(c2)) {\n            ungetChar(c2);\n            this.string = getStringFromBuffer();\n            stringBufferTop = 0;\n            return JsDocToken.STRING;\n          } else {\n            do {\n              c1 = c2;\n              c2 = getChar();\n              if (c1 == '.' && c2 == '<') {\n                ungetChar(c2);\n                ungetChar(c1);\n                this.string = getStringFromBuffer();\n                stringBufferTop = 0;\n                return JsDocToken.STRING;\n              } else {\n                if (isJSDocString(c2)) {\n                  addToString(c1);\n                } else {\n                  ungetChar(c2);\n                  addToString(c1);\n                  this.string = getStringFromBuffer();\n                  stringBufferTop = 0;\n                  return JsDocToken.STRING;\n                }\n              }\n            } while (true);\n          }\n        }\n      }\n    }\n  }\n",
        "begin_line": 57,
        "end_line": 193,
        "comment": "\n   * Tokenizes JSDoc comments.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getLineno#225",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getLineno()",
        "snippet": "  final int getLineno() { return lineno; }\n",
        "begin_line": 225,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getCharno#227",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getCharno()",
        "snippet": "  final int getCharno() {\n    return lineno == initLineno ? initCharno + charno : charno;\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getString#231",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getString()",
        "snippet": "  final String getString() { return string; }\n",
        "begin_line": 231,
        "end_line": 231,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getStringFromBuffer#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getStringFromBuffer()",
        "snippet": "  private String getStringFromBuffer() {\n    tokenEnd = cursor;\n    return new String(stringBuffer, 0, stringBufferTop);\n  }\n",
        "begin_line": 235,
        "end_line": 238,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.addToString#240",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.addToString(int)",
        "snippet": "  private void addToString(int c) {\n    int n = stringBufferTop;\n    if (n == stringBuffer.length) {\n        char[] tmp = new char[stringBuffer.length * 2];\n        System.arraycopy(stringBuffer, 0, tmp, 0, n);\n        stringBuffer = tmp;\n    }\n    stringBuffer[n] = (char) c;\n    stringBufferTop = n + 1;\n  }\n",
        "begin_line": 240,
        "end_line": 249,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.ungetChar#251",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetChar(int)",
        "snippet": "  void ungetChar(int c) {\n    // can not unread past across line boundary\n    assert(!(ungetCursor != 0 && ungetBuffer[ungetCursor - 1] == '\\n'));\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 251,
        "end_line": 256,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.matchChar#258",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.matchChar(int)",
        "snippet": "  private boolean matchChar(int test) {\n    int c = getCharIgnoreLineEnd();\n    if (c == test) {\n      tokenEnd = cursor;\n      return true;\n    } else {\n      ungetCharIgnoreLineEnd(c);\n      return false;\n    }\n  }\n",
        "begin_line": 258,
        "end_line": 267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.isAlpha#269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isAlpha(int)",
        "snippet": "  private static boolean isAlpha(int c) {\n    // Use 'Z' < 'a'\n    if (c <= 'Z') {\n      return 'A' <= c;\n    } else {\n      return 'a' <= c && c <= 'z';\n    }\n  }\n",
        "begin_line": 269,
        "end_line": 276,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.isJSDocString#278",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSDocString(int)",
        "snippet": "  private static boolean isJSDocString(int c) {\n    switch (c) {\n      case '@':\n      case '*':\n      case ',':\n      case '>':\n      case ':':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n      case '[':\n      case ']':\n      case '?':\n      case '!':\n      case '|':\n      case '=':\n      case EOF_CHAR:\n      case '\\n':\n        return false;\n\n      default:\n        return !isJSSpace(c);\n    }\n  }\n",
        "begin_line": 278,
        "end_line": 302,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.isJSSpace#308",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.isJSSpace(int)",
        "snippet": "  static boolean isJSSpace(int c) {\n    if (c <= 127) {\n      return c == 0x20 || c == 0x9 || c == 0xC || c == 0xB;\n    } else {\n      return c == 0xA0\n          || Character.getType((char) c) == Character.SPACE_SEPARATOR;\n    }\n  }\n",
        "begin_line": 308,
        "end_line": 315,
        "comment": " As defined in ECMA.  jsscan.c uses C isspace() (which allows\n   * \\v, I think.)  note that code in getChar() implicitly accepts\n   * '\\r' == \\u000D as well.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getChar#335",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getChar()",
        "snippet": "  protected int getChar() {\n    if (ungetCursor != 0) {\n      cursor++;\n      --ungetCursor;\n      if (charno == -1) {\n        charno = getOffset();\n      }\n      return ungetBuffer[ungetCursor];\n    }\n\n    for (;;) {\n      int c;\n      if (sourceCursor == sourceEnd) {\n        hitEOF = true;\n        if (charno == -1) {\n          charno = getOffset();\n        }\n        return EOF_CHAR;\n      }\n      cursor++;\n      c = sourceString.charAt(sourceCursor++);\n\n\n      if (lineEndChar >= 0) {\n        if (lineEndChar == '\\r' && c == '\\n') {\n          lineEndChar = '\\n';\n          continue;\n        }\n        lineEndChar = -1;\n        lineStart = sourceCursor - 1;\n        lineno++;\n      }\n\n      if (c <= 127) {\n        if (c == '\\n' || c == '\\r') {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      } else {\n        if (isJSFormatChar(c)) {\n          continue;\n        }\n        if (ScriptRuntime.isJSLineTerminator(c)) {\n          lineEndChar = c;\n          c = '\\n';\n        }\n      }\n\n      if (charno == -1) {\n        charno = getOffset();\n      }\n\n      return c;\n    }\n  }\n",
        "begin_line": 335,
        "end_line": 389,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.ungetCharIgnoreLineEnd#437",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCharIgnoreLineEnd(int)",
        "snippet": "  private void ungetCharIgnoreLineEnd(int c) {\n    ungetBuffer[ungetCursor++] = c;\n    cursor--;\n  }\n",
        "begin_line": 437,
        "end_line": 440,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocTokenStream.getOffset#445",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.getOffset()",
        "snippet": "  final int getOffset() {\n    return sourceCursor - lineStart - ungetCursor - 1;\n  }\n",
        "begin_line": 445,
        "end_line": 447,
        "comment": "\n   * Returns the offset into the current line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseHelperLoop#241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseHelperLoop(com.google.javascript.jscomp.parsing.JsDocToken, java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo>)",
        "snippet": "  private boolean parseHelperLoop(JsDocToken token,\n                                  List<ExtendedTypeInfo> extendedTypes) {\n    while (true) {\n      switch (token) {\n        case ANNOTATION:\n          if (state == State.SEARCHING_ANNOTATION) {\n            state = State.SEARCHING_NEWLINE;\n            token = parseAnnotation(token, extendedTypes);\n          } else {\n            token = next();\n          }\n          break;\n\n        case EOC:\n          if (hasParsedFileOverviewDocInfo()) {\n            fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();\n          }\n          checkExtendedTypes(extendedTypes);\n          return true;\n\n        case EOF:\n          // discard any accumulated information\n          jsdocBuilder.build(null);\n          parser.addParserWarning(\"msg.unexpected.eof\",\n              stream.getLineno(), stream.getCharno());\n          checkExtendedTypes(extendedTypes);\n          return false;\n\n        case EOL:\n          if (state == State.SEARCHING_NEWLINE) {\n            state = State.SEARCHING_ANNOTATION;\n          }\n          token = next();\n          break;\n\n        default:\n          if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {\n            token = next();\n          } else {\n            state = State.SEARCHING_NEWLINE;\n            token = eatTokensUntilEOL();\n          }\n          break;\n      }\n    }\n  }\n",
        "begin_line": 241,
        "end_line": 286,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.setFileLevelJsDocBuilder#110",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder)",
        "snippet": "  void setFileLevelJsDocBuilder(\n      Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {\n    this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;\n  }\n",
        "begin_line": 110,
        "end_line": 113,
        "comment": "\n   * Sets the JsDocBuilder for the file-level (root) node of this parse. The\n   * parser uses the builder to append any preserve annotations it encounters\n   * in JsDoc comments.\n   *\n   * @param fileLevelJsDocBuilder\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.setFileOverviewJSDocInfo#119",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  void setFileOverviewJSDocInfo(JSDocInfo fileOverviewJSDocInfo) {\n    this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n   * Sets the file overview JSDocInfo, in order to warn about multiple uses of\n   * the @fileoverview tag in a file.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.JsDocInfoParser#129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream, com.google.javascript.rhino.head.ast.Comment, com.google.javascript.rhino.Node, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  JsDocInfoParser(JsDocTokenStream stream,\n                  Comment commentNode,\n                  Node associatedNode,\n                  Config config,\n                  ErrorReporter errorReporter) {\n    this.stream = stream;\n    this.associatedNode = associatedNode;\n\n    // Sometimes this will be null in tests.\n    this.sourceFile = associatedNode == null\n        ? null : associatedNode.getStaticSourceFile();\n\n    this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n    if (commentNode != null) {\n      this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());\n      this.jsdocBuilder.recordOriginalCommentPosition(commentNode.getPosition());\n    }\n    this.annotationNames = config.annotationNames;\n    this.suppressionNames = config.suppressionNames;\n\n    this.errorReporter = errorReporter;\n    this.templateNode = this.createTemplateNode();\n  }\n",
        "begin_line": 129,
        "end_line": 151,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.getSourceName#153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getSourceName()",
        "snippet": "  private String getSourceName() {\n    return sourceFile == null ? null : sourceFile.getName();\n  }\n",
        "begin_line": 153,
        "end_line": 155,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.recordTypeNode#177",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.recordTypeNode(int, int, com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private void recordTypeNode(int lineno, int startCharno, Node typeAst,\n      boolean matchingLC) {\n    if (typeAst != null) {\n      int endLineno = stream.getLineno();\n      int endCharno = stream.getCharno();\n      jsdocBuilder.markTypeNode(\n          typeAst, lineno, startCharno, endLineno, endCharno, matchingLC);\n    }\n  }\n",
        "begin_line": 177,
        "end_line": 185,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parse#216",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parse()",
        "snippet": "  boolean parse() {\n    state = State.SEARCHING_ANNOTATION;\n    skipEOLs();\n\n    JsDocToken token = next();\n\n    // Always record that we have a comment.\n    if (jsdocBuilder.shouldParseDocumentation()) {\n      ExtractionInfo blockInfo = extractBlockComment(token);\n      token = blockInfo.token;\n      if (!blockInfo.string.isEmpty()) {\n        jsdocBuilder.recordBlockDescription(blockInfo.string);\n      }\n    } else {\n      if (token != JsDocToken.ANNOTATION &&\n          token != JsDocToken.EOC) {\n        // Mark that there was a description, but don't bother marking\n        // what it was.\n        jsdocBuilder.recordBlockDescription(\"\");\n      }\n    }\n\n    return parseHelperLoop(token, Lists.<ExtendedTypeInfo>newArrayList());\n  }\n",
        "begin_line": 216,
        "end_line": 239,
        "comment": "\n   * Parses a {@link JSDocInfo} object. This parsing method reads all tokens\n   * returned by the {@link JsDocTokenStream#getJsDocToken()} method until the\n   * {@link JsDocToken#EOC} is returned.\n   *\n   * @return {@code true} if JSDoc information was correctly parsed,\n   *     {@code false} otherwise\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.checkExtendedTypes#1093",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.checkExtendedTypes(java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo>)",
        "snippet": "  private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes) {\n    for (ExtendedTypeInfo typeInfo : extendedTypes) {\n      // If interface, record the multiple extended interfaces\n      if (jsdocBuilder.isInterfaceRecorded()) {\n        if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {\n          parser.addParserWarning(\"msg.jsdoc.extends.duplicate\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      } else {\n        if (!jsdocBuilder.recordBaseType(typeInfo.type)) {\n          parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n              typeInfo.lineno, typeInfo.charno);\n        }\n      }\n    }\n  }\n",
        "begin_line": 1093,
        "end_line": 1108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  Node parseAndRecordTypeNode(JsDocToken token) {\n    return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n        token == JsDocToken.LC, false);\n  }\n",
        "begin_line": 1269,
        "end_line": 1272,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordParamTypeNode#1302",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordParamTypeNode(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseAndRecordParamTypeNode(JsDocToken token) {\n    Preconditions.checkArgument(token == JsDocToken.LC);\n    int lineno = stream.getLineno();\n    int startCharno = stream.getCharno();\n\n    Node typeNode = parseParamTypeExpressionAnnotation(token);\n    recordTypeNode(lineno, startCharno, typeNode, true);\n    return typeNode;\n  }\n",
        "begin_line": 1302,
        "end_line": 1310,
        "comment": "\n   * Looks for a type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * Parameter type expressions are special for two reasons:\n   * <ol>\n   *   <li>They must begin with '{', to distinguish type names from param names.\n   *   <li>They may end in '=', to denote optionality.\n   * </ol>\n   *\n   * @param token The current token.\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseAndRecordTypeNode#1325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken, int, int, boolean, boolean)",
        "snippet": "  private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n                                      int startCharno,\n                                      boolean matchingLC,\n                                      boolean onlyParseSimpleNames) {\n    Node typeNode = null;\n\n    if (onlyParseSimpleNames) {\n      typeNode = parseTypeNameAnnotation(token);\n    } else {\n      typeNode = parseTypeExpressionAnnotation(token);\n    }\n\n    recordTypeNode(lineno, startCharno, typeNode, matchingLC);\n    return typeNode;\n  }\n",
        "begin_line": 1325,
        "end_line": 1339,
        "comment": "\n   * Looks for a parameter type expression at the current token and if found,\n   * returns it. Note that this method consumes input.\n   *\n   * @param token The current token.\n   * @param lineno The line of the type expression.\n   * @param startCharno The starting character position of the type expression.\n   * @param matchingLC Whether the type expression starts with a \"{\".\n   * @param onlyParseSimpleNames If true, only simple type names are parsed\n   *     (via a call to parseTypeNameAnnotation instead of\n   *     parseTypeExpressionAnnotation).\n   * @return The type expression found or null if none.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.createJSTypeExpression#1409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createJSTypeExpression(com.google.javascript.rhino.Node)",
        "snippet": "  JSTypeExpression createJSTypeExpression(Node n) {\n    return n == null ? null :\n        new JSTypeExpression(n, getSourceName());\n  }\n",
        "begin_line": 1409,
        "end_line": 1412,
        "comment": "\n   * Constructs a new {@code JSTypeExpression}.\n   * @param n A node. May be null.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeExpressionAnnotation#1714",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeExpressionAnnotation(JsDocToken token) {\n    if (token == JsDocToken.LC) {\n      skipEOLs();\n      Node typeNode = parseTopLevelTypeExpression(next());\n      if (typeNode != null) {\n        skipEOLs();\n        if (!match(JsDocToken.RC)) {\n          reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n        } else {\n          next();\n        }\n      }\n\n      return typeNode;\n    } else {\n      return parseTypeExpression(token);\n    }\n  }\n",
        "begin_line": 1714,
        "end_line": 1731,
        "comment": "\n   * TypeExpressionAnnotation := TypeExpression |\n   *     '{' TopLevelTypeExpression '}'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseParamTypeExpressionAnnotation#1742",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseParamTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseParamTypeExpressionAnnotation(JsDocToken token) {\n    Preconditions.checkArgument(token == JsDocToken.LC);\n\n    skipEOLs();\n\n    boolean restArg = false;\n    token = next();\n    if (token == JsDocToken.ELLIPSIS) {\n      token = next();\n      if (token == JsDocToken.RC) {\n        // EMPTY represents the UNKNOWN type in the Type AST.\n        return wrapNode(Token.ELLIPSIS, IR.empty());\n      }\n      restArg = true;\n    }\n\n    Node typeNode = parseTopLevelTypeExpression(token);\n    if (typeNode != null) {\n      skipEOLs();\n      if (restArg) {\n        typeNode = wrapNode(Token.ELLIPSIS, typeNode);\n      } else if (match(JsDocToken.EQUALS)) {\n        next();\n        skipEOLs();\n        typeNode = wrapNode(Token.EQUALS, typeNode);\n      }\n\n      if (!match(JsDocToken.RC)) {\n        reportTypeSyntaxWarning(\"msg.jsdoc.missing.rc\");\n      } else {\n        next();\n      }\n    }\n\n    return typeNode;\n  }\n",
        "begin_line": 1742,
        "end_line": 1777,
        "comment": "\n   * ParamTypeExpressionAnnotation :=\n   *     '{' OptionalParameterType '}' |\n   *     '{' TopLevelTypeExpression '}' |\n   *     '{' '...' TopLevelTypeExpression '}'\n   *\n   * OptionalParameterType :=\n   *     TopLevelTypeExpression '='\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTopLevelTypeExpression#1807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTopLevelTypeExpression(JsDocToken token) {\n    Node typeExpr = parseTypeExpression(token);\n    if (typeExpr != null) {\n      // top-level unions are allowed\n      if (match(JsDocToken.PIPE)) {\n        next();\n        if (match(JsDocToken.PIPE)) {\n          // We support double pipes for backwards-compatibility.\n          next();\n        }\n        skipEOLs();\n        token = next();\n        return parseUnionTypeWithAlternate(token, typeExpr);\n      }\n    }\n    return typeExpr;\n  }\n",
        "begin_line": 1807,
        "end_line": 1823,
        "comment": "\n   * TopLevelTypeExpression := TypeExpression\n   *     | TypeUnionList\n   *\n   * We made this rule up, for the sake of backwards compatibility.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeExpression#1856",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.QMARK) {\n      // A QMARK could mean that a type is nullable, or that it's unknown.\n      // We use look-ahead 1 to determine whether it's unknown. Otherwise,\n      // we assume it means nullable. There are 8 cases:\n      // {?} - right curly\n      // {?=} - equals\n      // {function(?, number)} - comma\n      // {function(number, ?)} - right paren\n      // {function(number, ...[?])} - right bracket\n      // {function(): ?|number} - pipe\n      // {Array.<?>} - greater than\n      // /** ? */ - EOC (inline types)\n      // I'm not a big fan of using look-ahead for this, but it makes\n      // the type language a lot nicer.\n      token = next();\n      if (token == JsDocToken.COMMA ||\n          token == JsDocToken.EQUALS ||\n          token == JsDocToken.RB ||\n          token == JsDocToken.RC ||\n          token == JsDocToken.RP ||\n          token == JsDocToken.PIPE ||\n          token == JsDocToken.GT ||\n          token == JsDocToken.EOC) {\n        restoreLookAhead(token);\n        return newNode(Token.QMARK);\n      }\n\n      return wrapNode(Token.QMARK, parseBasicTypeExpression(token));\n    } else if (token == JsDocToken.BANG) {\n      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));\n    } else {\n      Node basicTypeExpr = parseBasicTypeExpression(token);\n      if (basicTypeExpr != null) {\n        if (match(JsDocToken.QMARK)) {\n          next();\n          return wrapNode(Token.QMARK, basicTypeExpr);\n        } else if (match(JsDocToken.BANG)) {\n          next();\n          return wrapNode(Token.BANG, basicTypeExpr);\n        }\n      }\n\n      return basicTypeExpr;\n    }\n  }\n",
        "begin_line": 1856,
        "end_line": 1901,
        "comment": "\n   * TypeExpression := BasicTypeExpression\n   *     | '?' BasicTypeExpression\n   *     | '!' BasicTypeExpression\n   *     | BasicTypeExpression '?'\n   *     | BasicTypeExpression '!'\n   *     | '?'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseBasicTypeExpression#1919",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseBasicTypeExpression(JsDocToken token) {\n    if (token == JsDocToken.STAR) {\n      return newNode(Token.STAR);\n    } else if (token == JsDocToken.LB) {\n      skipEOLs();\n      return parseArrayType(next());\n    } else if (token == JsDocToken.LC) {\n      skipEOLs();\n      return parseRecordType(next());\n    } else if (token == JsDocToken.LP) {\n      skipEOLs();\n      return parseUnionType(next());\n    } else if (token == JsDocToken.STRING) {\n      String string = stream.getString();\n      if (\"function\".equals(string)) {\n        skipEOLs();\n        return parseFunctionType(next());\n      } else if (\"null\".equals(string) || \"undefined\".equals(string)) {\n        return newStringNode(string);\n      } else {\n        return parseTypeName(token);\n      }\n    }\n\n    restoreLookAhead(token);\n    return reportGenericTypeSyntaxWarning();\n  }\n",
        "begin_line": 1919,
        "end_line": 1945,
        "comment": "\n   * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName\n   *     | FunctionType | UnionType | RecordType | ArrayType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.parseTypeName#1951",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private Node parseTypeName(JsDocToken token) {\n    if (token != JsDocToken.STRING) {\n      return reportGenericTypeSyntaxWarning();\n    }\n\n    String typeName = stream.getString();\n    int lineno = stream.getLineno();\n    int charno = stream.getCharno();\n    while (match(JsDocToken.EOL) &&\n        typeName.charAt(typeName.length() - 1) == '.') {\n      skipEOLs();\n      if (match(JsDocToken.STRING)) {\n        next();\n        typeName += stream.getString();\n      }\n    }\n\n    Node typeNameNode = newStringNode(typeName, lineno, charno);\n\n    if (match(JsDocToken.LT)) {\n      next();\n      skipEOLs();\n      Node memberType = parseTypeExpressionList(next());\n      if (memberType != null) {\n        typeNameNode.addChildToFront(memberType);\n\n        skipEOLs();\n        if (!match(JsDocToken.GT)) {\n          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.gt\");\n        }\n\n        next();\n      }\n    }\n    return typeNameNode;\n  }\n",
        "begin_line": 1951,
        "end_line": 1986,
        "comment": "\n   * TypeName := NameExpression | NameExpression TypeApplication\n   * TypeApplication := '.<' TypeExpressionList '>'\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.wrapNode#2369",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.wrapNode(int, com.google.javascript.rhino.Node)",
        "snippet": "  private Node wrapNode(int type, Node n) {\n    return n == null ? null :\n        new Node(type, n, stream.getLineno(),\n            stream.getCharno()).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 2369,
        "end_line": 2373,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.newNode#2375",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type, stream.getLineno(),\n        stream.getCharno()).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 2375,
        "end_line": 2378,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.newStringNode#2384",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.newStringNode(java.lang.String, int, int)",
        "snippet": "  private Node newStringNode(String s, int lineno, int charno) {\n    Node n = Node.newString(s, lineno, charno).clonePropsFrom(templateNode);\n    n.setLength(s.length());\n    return n;\n  }\n",
        "begin_line": 2384,
        "end_line": 2388,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.createTemplateNode#2392",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = IR.script();\n    templateNode.setStaticSourceFile(\n      this.associatedNode != null ?\n      this.associatedNode.getStaticSourceFile() :\n      null);\n    return templateNode;\n  }\n",
        "begin_line": 2392,
        "end_line": 2400,
        "comment": " e.g., source-name, between all nodes.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.eatUntilEOLIfNotAnnotation#2411",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatUntilEOLIfNotAnnotation()",
        "snippet": "  private JsDocToken eatUntilEOLIfNotAnnotation() {\n    return eatUntilEOLIfNotAnnotation(next());\n  }\n",
        "begin_line": 2411,
        "end_line": 2413,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.eatUntilEOLIfNotAnnotation#2415",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatUntilEOLIfNotAnnotation(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private JsDocToken eatUntilEOLIfNotAnnotation(JsDocToken token) {\n    if (token == JsDocToken.ANNOTATION) {\n      state = State.SEARCHING_ANNOTATION;\n      return token;\n    }\n    return eatTokensUntilEOL(token);\n  }\n",
        "begin_line": 2415,
        "end_line": 2421,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.eatTokensUntilEOL#2435",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private JsDocToken eatTokensUntilEOL(JsDocToken token) {\n    do {\n      if (token == JsDocToken.EOL || token == JsDocToken.EOC ||\n          token == JsDocToken.EOF) {\n        state = State.SEARCHING_ANNOTATION;\n        return token;\n      }\n      token = next();\n    } while (true);\n  }\n",
        "begin_line": 2435,
        "end_line": 2444,
        "comment": "\n   * Eats tokens until {@link JsDocToken#EOL} included, and switches back the\n   * state to {@link State#SEARCHING_ANNOTATION}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.match#2465",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.match(com.google.javascript.jscomp.parsing.JsDocToken)",
        "snippet": "  private boolean match(JsDocToken token) {\n    unreadToken = next();\n    return unreadToken == token;\n  }\n",
        "begin_line": 2465,
        "end_line": 2468,
        "comment": "\n   * Tests whether the next symbol of the token stream matches the specific\n   * token.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.next#2483",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.next()",
        "snippet": "  private JsDocToken next() {\n    if (unreadToken == NO_UNREAD_TOKEN) {\n      return stream.getJsDocToken();\n    } else {\n      return current();\n    }\n  }\n",
        "begin_line": 2483,
        "end_line": 2489,
        "comment": "\n   * Gets the next token of the token stream or the buffered token if a matching\n   * was previously made.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.current#2494",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.current()",
        "snippet": "  private JsDocToken current() {\n    JsDocToken t = unreadToken;\n    unreadToken = NO_UNREAD_TOKEN;\n    return t;\n  }\n",
        "begin_line": 2494,
        "end_line": 2498,
        "comment": "\n   * Gets the current token, invalidating it in the process.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.skipEOLs#2504",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.skipEOLs()",
        "snippet": "  private void skipEOLs() {\n    while (match(JsDocToken.EOL)) {\n      next();\n      if (match(JsDocToken.STAR)) {\n        next();\n      }\n    }\n  }\n",
        "begin_line": 2504,
        "end_line": 2511,
        "comment": "\n   * Skips all EOLs and all empty lines in the JSDoc. Call this method if you\n   * want the JSDoc entry to span multiple lines.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.hasParsedFileOverviewDocInfo#2526",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.hasParsedFileOverviewDocInfo()",
        "snippet": "  private boolean hasParsedFileOverviewDocInfo() {\n    return jsdocBuilder.isPopulatedWithFileOverview();\n  }\n",
        "begin_line": 2526,
        "end_line": 2528,
        "comment": "\n   * Determines whether the parser has been populated with docinfo with a\n   * fileoverview tag.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.retrieveAndResetParsedJSDocInfo#2534",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.retrieveAndResetParsedJSDocInfo()",
        "snippet": "  JSDocInfo retrieveAndResetParsedJSDocInfo() {\n    return jsdocBuilder.build(associatedNode);\n  }\n",
        "begin_line": 2534,
        "end_line": 2536,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.getFileOverviewJSDocInfo#2541",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.getFileOverviewJSDocInfo()",
        "snippet": "  JSDocInfo getFileOverviewJSDocInfo() {\n    return fileOverviewJSDocInfo;\n  }\n",
        "begin_line": 2541,
        "end_line": 2543,
        "comment": "\n   * Gets the fileoverview JSDocInfo, if any.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.lookAheadForType#2553",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.lookAheadForType()",
        "snippet": "  private boolean lookAheadForType() {\n    return lookAheadFor('{');\n  }\n",
        "begin_line": 2553,
        "end_line": 2555,
        "comment": "\n   * Look ahead for a type annotation by advancing the character stream.\n   * Does not modify the token stream.\n   * This is kind of a hack, and is only necessary because we use the token\n   * stream to parse types, but need the underlying character stream to get\n   * JsDoc descriptions.\n   * @return Whether we found a type annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.lookAheadForAnnotation#2557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.lookAheadForAnnotation()",
        "snippet": "  private boolean lookAheadForAnnotation() {\n    return lookAheadFor('@');\n  }\n",
        "begin_line": 2557,
        "end_line": 2559,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsDocInfoParser.lookAheadFor#2566",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.lookAheadFor(char)",
        "snippet": "  private boolean lookAheadFor(char expect) {\n    boolean matched = false;\n    int c;\n    while (true) {\n      c = stream.getChar();\n      if (c == ' ') {\n        continue;\n      } else if (c == expect) {\n        matched = true;\n        break;\n      } else {\n        break;\n      }\n    }\n    stream.ungetChar(c);\n    return matched;\n  }\n",
        "begin_line": 2566,
        "end_line": 2582,
        "comment": "\n   * Look ahead by advancing the character stream.\n   * Does not modify the token stream.\n   * @return Whether we found the char.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processGeneric#549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processGeneric(com.google.javascript.rhino.head.Node)",
        "snippet": "    private Node processGeneric(\n        com.google.javascript.rhino.head.Node n) {\n      Node node = newNode(transformTokenType(n.getType()));\n      for (com.google.javascript.rhino.head.Node child : n) {\n        node.addChildToBack(transform((AstNode) child));\n      }\n      return node;\n    }\n",
        "begin_line": 549,
        "end_line": 556,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processAssignment#596",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAssignment(com.google.javascript.rhino.head.ast.Assignment)",
        "snippet": "    @Override\n    Node processAssignment(Assignment assignmentNode) {\n      Node assign = processInfixExpression(assignmentNode);\n      Node target = assign.getFirstChild();\n      if (!validAssignmentTarget(target)) {\n        errorReporter.error(\n          \"invalid assignment target\",\n          sourceName,\n          target.getLineno(), \"\", 0);\n      }\n      return assign;\n    }\n",
        "begin_line": 596,
        "end_line": 607,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.isDirective#645",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.isDirective(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean isDirective(Node n) {\n      if (n == null) {\n        return false;\n      }\n      int nType = n.getType();\n      return nType == Token.EXPR_RESULT &&\n          n.getFirstChild().isString() &&\n          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n    }\n",
        "begin_line": 645,
        "end_line": 653,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processBlock#655",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processBlock(com.google.javascript.rhino.head.ast.Block)",
        "snippet": "    @Override\n    Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n",
        "begin_line": 655,
        "end_line": 658,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processFunctionNode#785",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode)",
        "snippet": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        int functionType = functionNode.getFunctionType();\n        if (functionType != FunctionNode.FUNCTION_EXPRESSION) {\n          errorReporter.error(\n            \"unnamed function statement\",\n            sourceName,\n            functionNode.getLineno(), \"\", 0);\n\n          // Return the bare minimum to put the AST in a valid state.\n          return newNode(Token.EXPR_RESULT, Node.newNumber(0));\n        }\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n      }\n      Node node = newNode(Token.FUNCTION);\n      // if the function has an inline return annotation, attach it\n      Node newName = transformNodeWithInlineJsDoc(name);\n      if (isUnnamedFunction) {\n        // Old Rhino tagged the empty name node with the line number of the\n        // declaration.\n        newName.setLineno(functionNode.getLineno());\n        // TODO(bowdidge) Mark line number of paren correctly.\n        // Same problem as below - the left paren might not be on the\n        // same line as the function keyword.\n        int lpColumn = functionNode.getAbsolutePosition() +\n            functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n        maybeSetLengthFrom(newName, name);\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.PARAM_LIST);\n      // The left paren's complicated because it's not represented by an\n      // AstNode, so there's nothing that has the actual line number that it\n      // appeared on.  We know the paren has to appear on the same line as the\n      // function name (or else a semicolon will be inserted.)  If there's no\n      // function name, assume the paren was on the same line as the function.\n      // TODO(bowdidge): Mark line number of paren correctly.\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() +\n          functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        Node paramNode = transformNodeWithInlineJsDoc(param);\n        // When in ideMode Rhino can generate a param list with only a single\n        // ErrorNode. This is transformed into an EMPTY node. Drop this node in\n        // ideMode to keep the AST in a valid state.\n        if (paramNode.isName()) {\n          lp.addChildToBack(paramNode);\n        } else {\n          // We expect this in ideMode or when there is an error handling\n          // destructuring parameter assignments which aren't supported\n          // (an error has already been reported).\n          Preconditions.checkState(\n              config.isIdeMode\n              || paramNode.isObjectLit()\n              || paramNode.isArrayLit());\n        }\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      if (!bodyNode.isBlock()) {\n        // When in ideMode Rhino tries to parse some constructs the compiler\n        // doesn't support, repair it here. see Rhino's\n        // Parser#parseFunctionBodyExpr.\n        Preconditions.checkState(config.isIdeMode);\n        bodyNode = IR.block();\n      }\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }\n",
        "begin_line": 785,
        "end_line": 868,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processInfixExpression#881",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression)",
        "snippet": "    @Override\n    Node processInfixExpression(InfixExpression exprNode) {\n      Node n =  newNode(\n          transformTokenType(exprNode.getType()),\n          transform(exprNode.getLeft()),\n          transform(exprNode.getRight()));\n      n.setLineno(exprNode.getLineno());\n      n.setCharno(position2charno(exprNode.getAbsolutePosition()));\n      maybeSetLengthFrom(n, exprNode);\n      return n;\n    }\n",
        "begin_line": 881,
        "end_line": 891,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.validAssignmentTarget#1238",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.validAssignmentTarget(com.google.javascript.rhino.Node)",
        "snippet": "    private boolean validAssignmentTarget(Node target) {\n      switch (target.getType()) {\n        case Token.CAST: // CAST is a bit weird, but syntactically valid.\n        case Token.NAME:\n        case Token.GETPROP:\n        case Token.GETELEM:\n          return true;\n      }\n      return false;\n    }\n",
        "begin_line": 1238,
        "end_line": 1247,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformTree#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTree(com.google.javascript.rhino.head.ast.AstRoot, com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter)",
        "snippet": "  public static Node transformTree(AstRoot node,\n                                   StaticSourceFile sourceFile,\n                                   String sourceString,\n                                   Config config,\n                                   ErrorReporter errorReporter) {\n    IRFactory irFactory = new IRFactory(sourceString, sourceFile,\n        config, errorReporter);\n    Node irNode = irFactory.transform(node);\n\n    if (node.getComments() != null) {\n      for (Comment comment : node.getComments()) {\n        if (comment.getCommentType() == CommentType.JSDOC &&\n            !irFactory.parsedComments.contains(comment)) {\n          irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n        } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {\n          irFactory.handleBlockComment(comment);\n        }\n      }\n    }\n\n    irFactory.setFileOverviewJsDoc(irNode);\n\n    return irNode;\n  }\n",
        "begin_line": 198,
        "end_line": 221,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.handlePossibleFileOverviewJsDoc#276",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser)",
        "snippet": "  private boolean handlePossibleFileOverviewJsDoc(\n      JsDocInfoParser jsDocParser) {\n    if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {\n      fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();\n      return true;\n    }\n    return false;\n  }\n",
        "begin_line": 276,
        "end_line": 283,
        "comment": "\n   * @return true if the jsDocParser represents a fileoverview.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.handleJsDoc#291",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.handleJsDoc(com.google.javascript.rhino.head.ast.AstNode, com.google.javascript.rhino.Node)",
        "snippet": "  private JSDocInfo handleJsDoc(AstNode node, Node irNode) {\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n      parsedComments.add(comment);\n      if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n        JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();\n        if (info != null) {\n          validateTypeAnnotations(info, node);\n        }\n        return info;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 291,
        "end_line": 305,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.validateTypeAnnotations#307",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.validateTypeAnnotations(com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void validateTypeAnnotations(JSDocInfo info, AstNode node) {\n    if (info.hasType()) {\n      boolean valid = false;\n      switch (node.getType()) {\n        // Casts are valid\n        case com.google.javascript.rhino.head.Token.LP:\n          valid = node instanceof ParenthesizedExpression;\n          break;\n        // Variable declarations are valid\n        case com.google.javascript.rhino.head.Token.VAR:\n          valid = true;\n          break;\n        // Function declarations are valid\n        case com.google.javascript.rhino.head.Token.FUNCTION:\n          FunctionNode fnNode = (FunctionNode) node;\n          valid = fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;\n          break;\n        // Object literal properties, catch declarations and variable\n        // initializers are valid.\n        case com.google.javascript.rhino.head.Token.NAME:\n          AstNode parent = node.getParent();\n          valid = parent instanceof ObjectProperty\n              || parent instanceof CatchClause\n              || parent instanceof FunctionNode\n              || (parent instanceof VariableInitializer &&\n                  node == ((VariableInitializer) parent).getTarget());\n          break;\n        // Object literal properties are valid\n        case com.google.javascript.rhino.head.Token.GET:\n        case com.google.javascript.rhino.head.Token.SET:\n        case com.google.javascript.rhino.head.Token.NUMBER:\n        case com.google.javascript.rhino.head.Token.STRING:\n          valid = node.getParent() instanceof ObjectProperty;\n          break;\n\n        // Property assignments are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.ASSIGN:\n          if (node instanceof Assignment) {\n            valid = isExprStmt(node.getParent())\n                && isPropAccess(((Assignment) node).getLeft());\n          }\n          break;\n\n        // Property definitions are valid, if at the root of an expression.\n        case com.google.javascript.rhino.head.Token.GETPROP:\n        case com.google.javascript.rhino.head.Token.GETELEM:\n          valid = isExprStmt(node.getParent());\n          break;\n\n        case com.google.javascript.rhino.head.Token.CALL:\n          valid = info.isDefine();\n          break;\n      }\n      if (!valid) {\n        errorReporter.warning(MISPLACED_TYPE_ANNOTATION,\n            sourceName,\n            node.getLineno(), \"\", 0);\n      }\n    }\n  }\n",
        "begin_line": 307,
        "end_line": 366,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.isExprStmt#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.isExprStmt(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private static boolean isExprStmt(AstNode node) {\n    return node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT\n        || node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID;\n  }\n",
        "begin_line": 373,
        "end_line": 376,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transform#378",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transform(AstNode node) {\n    Node irNode = justTransform(node);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode = maybeInjectCastNode(node, jsDocInfo, irNode);\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 378,
        "end_line": 387,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.maybeInjectCastNode#389",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeInjectCastNode(com.google.javascript.rhino.head.ast.AstNode, com.google.javascript.rhino.JSDocInfo, com.google.javascript.rhino.Node)",
        "snippet": "  private Node maybeInjectCastNode(AstNode node, JSDocInfo info, Node irNode) {\n    if (node.getType() == com.google.javascript.rhino.head.Token.LP\n        && node instanceof ParenthesizedExpression\n        && info.hasType()) {\n      irNode = newNode(Token.CAST, irNode);\n    }\n    return irNode;\n  }\n",
        "begin_line": 389,
        "end_line": 396,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformNodeWithInlineJsDoc#408",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformNodeWithInlineJsDoc(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node transformNodeWithInlineJsDoc(AstNode node) {\n    Node irNode = justTransform(node);\n    Comment comment = node.getJsDocNode();\n    if (comment != null) {\n      JSDocInfo info = parseInlineTypeDoc(comment, irNode);\n      if (info != null) {\n        irNode.setJSDocInfo(info);\n      }\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 408,
        "end_line": 419,
        "comment": "\n   * NAMEs in parameters or variable declarations are special, because they can\n   * have inline type docs attached.\n   *\n   * function f(/** string &#42;/ x) {}\n   * annotates 'x' as a string.\n   *\n   * @see <a href=\"http://code.google.com/p/jsdoc-toolkit/wiki/InlineDocs\">\n   *   Using Inline Doc Comments</a>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.createJsDocInfoParser#476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment, com.google.javascript.rhino.Node)",
        "snippet": "  private JsDocInfoParser createJsDocInfoParser(Comment node, Node irNode) {\n    String comment = node.getValue();\n    int lineno = node.getLineno();\n    int position = node.getAbsolutePosition();\n\n    // The JsDocInfoParser expects the comment without the initial '/**'.\n    int numOpeningChars = 3;\n    JsDocInfoParser jsdocParser =\n      new JsDocInfoParser(\n          new JsDocTokenStream(comment.substring(numOpeningChars),\n                               lineno,\n                               position2charno(position) + numOpeningChars),\n          node,\n          irNode,\n          config,\n          errorReporter);\n    jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);\n    jsdocParser.parse();\n    return jsdocParser;\n  }\n",
        "begin_line": 476,
        "end_line": 496,
        "comment": "\n   * Creates a JsDocInfoParser and parses the JsDoc string.\n   *\n   * Used both for handling individual JSDoc comments and for handling\n   * file-level JSDoc comments (@fileoverview and @license).\n   *\n   * @param node The JsDoc Comment node to parse.\n   * @param irNode\n   * @return A JsDocInfoParser. Will contain either fileoverview JsDoc, or\n   *     normal JsDoc, or no JsDoc (if the method parses to the wrong level).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.position2charno#527",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.position2charno(int)",
        "snippet": "  private int position2charno(int position) {\n    int newlineIndex = Collections.binarySearch(newlines, position);\n    int lineIndex = -1;\n    if (newlineIndex >= 0) {\n      lineIndex = newlines.get(newlineIndex);\n    } else if (newlineIndex <= -2) {\n      lineIndex = newlines.get(-newlineIndex - 2);\n    }\n\n    if (lineIndex == -1) {\n      return position;\n    } else {\n      // Subtract one for initial position being 0.\n      return position - lineIndex - 1;\n    }\n  }\n",
        "begin_line": 527,
        "end_line": 542,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformTokenType#1344",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(int)",
        "snippet": "  private static int transformTokenType(int token) {\n    switch (token) {\n      case com.google.javascript.rhino.head.Token.RETURN:\n        return Token.RETURN;\n      case com.google.javascript.rhino.head.Token.BITOR:\n        return Token.BITOR;\n      case com.google.javascript.rhino.head.Token.BITXOR:\n        return Token.BITXOR;\n      case com.google.javascript.rhino.head.Token.BITAND:\n        return Token.BITAND;\n      case com.google.javascript.rhino.head.Token.EQ:\n        return Token.EQ;\n      case com.google.javascript.rhino.head.Token.NE:\n        return Token.NE;\n      case com.google.javascript.rhino.head.Token.LT:\n        return Token.LT;\n      case com.google.javascript.rhino.head.Token.LE:\n        return Token.LE;\n      case com.google.javascript.rhino.head.Token.GT:\n        return Token.GT;\n      case com.google.javascript.rhino.head.Token.GE:\n        return Token.GE;\n      case com.google.javascript.rhino.head.Token.LSH:\n        return Token.LSH;\n      case com.google.javascript.rhino.head.Token.RSH:\n        return Token.RSH;\n      case com.google.javascript.rhino.head.Token.URSH:\n        return Token.URSH;\n      case com.google.javascript.rhino.head.Token.ADD:\n        return Token.ADD;\n      case com.google.javascript.rhino.head.Token.SUB:\n        return Token.SUB;\n      case com.google.javascript.rhino.head.Token.MUL:\n        return Token.MUL;\n      case com.google.javascript.rhino.head.Token.DIV:\n        return Token.DIV;\n      case com.google.javascript.rhino.head.Token.MOD:\n        return Token.MOD;\n      case com.google.javascript.rhino.head.Token.NOT:\n        return Token.NOT;\n      case com.google.javascript.rhino.head.Token.BITNOT:\n        return Token.BITNOT;\n      case com.google.javascript.rhino.head.Token.POS:\n        return Token.POS;\n      case com.google.javascript.rhino.head.Token.NEG:\n        return Token.NEG;\n      case com.google.javascript.rhino.head.Token.NEW:\n        return Token.NEW;\n      case com.google.javascript.rhino.head.Token.DELPROP:\n        return Token.DELPROP;\n      case com.google.javascript.rhino.head.Token.TYPEOF:\n        return Token.TYPEOF;\n      case com.google.javascript.rhino.head.Token.GETPROP:\n        return Token.GETPROP;\n      case com.google.javascript.rhino.head.Token.GETELEM:\n        return Token.GETELEM;\n      case com.google.javascript.rhino.head.Token.CALL:\n        return Token.CALL;\n      case com.google.javascript.rhino.head.Token.NAME:\n        return Token.NAME;\n      case com.google.javascript.rhino.head.Token.NUMBER:\n        return Token.NUMBER;\n      case com.google.javascript.rhino.head.Token.STRING:\n        return Token.STRING;\n      case com.google.javascript.rhino.head.Token.NULL:\n        return Token.NULL;\n      case com.google.javascript.rhino.head.Token.THIS:\n        return Token.THIS;\n      case com.google.javascript.rhino.head.Token.FALSE:\n        return Token.FALSE;\n      case com.google.javascript.rhino.head.Token.TRUE:\n        return Token.TRUE;\n      case com.google.javascript.rhino.head.Token.SHEQ:\n        return Token.SHEQ;\n      case com.google.javascript.rhino.head.Token.SHNE:\n        return Token.SHNE;\n      case com.google.javascript.rhino.head.Token.REGEXP:\n        return Token.REGEXP;\n      case com.google.javascript.rhino.head.Token.THROW:\n        return Token.THROW;\n      case com.google.javascript.rhino.head.Token.IN:\n        return Token.IN;\n      case com.google.javascript.rhino.head.Token.INSTANCEOF:\n        return Token.INSTANCEOF;\n      case com.google.javascript.rhino.head.Token.ARRAYLIT:\n        return Token.ARRAYLIT;\n      case com.google.javascript.rhino.head.Token.OBJECTLIT:\n        return Token.OBJECTLIT;\n      case com.google.javascript.rhino.head.Token.TRY:\n        return Token.TRY;\n      // The LP represents a parameter list\n      case com.google.javascript.rhino.head.Token.LP:\n        return Token.PARAM_LIST;\n      case com.google.javascript.rhino.head.Token.COMMA:\n        return Token.COMMA;\n      case com.google.javascript.rhino.head.Token.ASSIGN:\n        return Token.ASSIGN;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITOR:\n        return Token.ASSIGN_BITOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR:\n        return Token.ASSIGN_BITXOR;\n      case com.google.javascript.rhino.head.Token.ASSIGN_BITAND:\n        return Token.ASSIGN_BITAND;\n      case com.google.javascript.rhino.head.Token.ASSIGN_LSH:\n        return Token.ASSIGN_LSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_RSH:\n        return Token.ASSIGN_RSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_URSH:\n        return Token.ASSIGN_URSH;\n      case com.google.javascript.rhino.head.Token.ASSIGN_ADD:\n        return Token.ASSIGN_ADD;\n      case com.google.javascript.rhino.head.Token.ASSIGN_SUB:\n        return Token.ASSIGN_SUB;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MUL:\n        return Token.ASSIGN_MUL;\n      case com.google.javascript.rhino.head.Token.ASSIGN_DIV:\n        return Token.ASSIGN_DIV;\n      case com.google.javascript.rhino.head.Token.ASSIGN_MOD:\n        return Token.ASSIGN_MOD;\n      case com.google.javascript.rhino.head.Token.HOOK:\n        return Token.HOOK;\n      case com.google.javascript.rhino.head.Token.OR:\n        return Token.OR;\n      case com.google.javascript.rhino.head.Token.AND:\n        return Token.AND;\n      case com.google.javascript.rhino.head.Token.INC:\n        return Token.INC;\n      case com.google.javascript.rhino.head.Token.DEC:\n        return Token.DEC;\n      case com.google.javascript.rhino.head.Token.FUNCTION:\n        return Token.FUNCTION;\n      case com.google.javascript.rhino.head.Token.IF:\n        return Token.IF;\n      case com.google.javascript.rhino.head.Token.SWITCH:\n        return Token.SWITCH;\n      case com.google.javascript.rhino.head.Token.CASE:\n        return Token.CASE;\n      case com.google.javascript.rhino.head.Token.DEFAULT:\n        return Token.DEFAULT_CASE;\n      case com.google.javascript.rhino.head.Token.WHILE:\n        return Token.WHILE;\n      case com.google.javascript.rhino.head.Token.DO:\n        return Token.DO;\n      case com.google.javascript.rhino.head.Token.FOR:\n        return Token.FOR;\n      case com.google.javascript.rhino.head.Token.BREAK:\n        return Token.BREAK;\n      case com.google.javascript.rhino.head.Token.CONTINUE:\n        return Token.CONTINUE;\n      case com.google.javascript.rhino.head.Token.VAR:\n        return Token.VAR;\n      case com.google.javascript.rhino.head.Token.WITH:\n        return Token.WITH;\n      case com.google.javascript.rhino.head.Token.CATCH:\n        return Token.CATCH;\n      case com.google.javascript.rhino.head.Token.VOID:\n        return Token.VOID;\n      case com.google.javascript.rhino.head.Token.EMPTY:\n        return Token.EMPTY;\n      case com.google.javascript.rhino.head.Token.BLOCK:\n        return Token.BLOCK;\n      case com.google.javascript.rhino.head.Token.LABEL:\n        return Token.LABEL;\n      case com.google.javascript.rhino.head.Token.EXPR_VOID:\n      case com.google.javascript.rhino.head.Token.EXPR_RESULT:\n        return Token.EXPR_RESULT;\n      case com.google.javascript.rhino.head.Token.SCRIPT:\n        return Token.SCRIPT;\n      case com.google.javascript.rhino.head.Token.GET:\n        return Token.GETTER_DEF;\n      case com.google.javascript.rhino.head.Token.SET:\n        return Token.SETTER_DEF;\n      case com.google.javascript.rhino.head.Token.CONST:\n        return Token.CONST;\n      case com.google.javascript.rhino.head.Token.DEBUGGER:\n        return Token.DEBUGGER;\n    }\n\n    // Token without name\n    throw new IllegalStateException(String.valueOf(token));\n  }\n",
        "begin_line": 1344,
        "end_line": 1524,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningLevel.addDefaultWarnings#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningLevel.java",
        "class_name": "com.google.javascript.jscomp.WarningLevel",
        "signature": "com.google.javascript.jscomp.WarningLevel.addDefaultWarnings(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  private static void addDefaultWarnings(CompilerOptions options) {\n    options.checkSuspiciousCode = true;\n    options.checkUnreachableCode = CheckLevel.WARNING;\n    options.checkControlStructures = true;\n\n    // Allows annotations that are not standard.\n    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n        CheckLevel.OFF);\n  }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\n   * Add the default checking pass to the compilation options.\n   * @param options The CompilerOptions object to set the options on.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.visit#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.visit(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.CALL:\n          annotateCalls(n);\n          break;\n\n        case Token.FUNCTION:\n          annotateDispatchers(n, parent);\n          break;\n      }\n    }\n",
        "begin_line": 131,
        "end_line": 142,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.annotateDispatchers#184",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.annotateDispatchers(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    private void annotateDispatchers(Node n, Node parent) {\n      Preconditions.checkState(n.isFunction());\n      if (parent.getJSDocInfo() != null\n          && parent.getJSDocInfo().isJavaDispatch()) {\n        if (parent.isAssign()) {\n          Preconditions.checkState(parent.getLastChild() == n);\n          n.putBooleanProp(Node.IS_DISPATCHER, true);\n        }\n      }\n    }\n",
        "begin_line": 184,
        "end_line": 193,
        "comment": "\n     * Translate dispatcher info into the property expected node.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isFunctionExpression#2000",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isFunctionExpression(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isFunctionExpression(Node n) {\n    return n.isFunction() && !isStatement(n);\n  }\n",
        "begin_line": 2000,
        "end_line": 2002,
        "comment": "\n   * Is a FUNCTION node an function expression? An function expression is one\n   * that has either no name or a name that is not added to the current scope.\n   *\n   * <p>Some examples of function expressions:\n   * <pre>\n   * (function () {})\n   * (function f() {})()\n   * [ function f() {} ]\n   * var f = function f() {};\n   * for (function f() {};;) {}\n   * </pre>\n   *\n   * <p>Some examples of functions that are <em>not</em> expressions:\n   * <pre>\n   * function f() {}\n   * if (x); else function f() {}\n   * for (;;) { function f() {} }\n   * </pre>\n   *\n   * @param n A node\n   * @return Whether n is an function used within an expression.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverseFunction#544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverseFunction(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void traverseFunction(Node n, Node parent) {\n    Preconditions.checkState(n.getChildCount() == 3);\n    Preconditions.checkState(n.isFunction());\n\n    final Node fnName = n.getFirstChild();\n    boolean isFunctionExpression = (parent != null)\n        && NodeUtil.isFunctionExpression(n);\n\n    if (!isFunctionExpression) {\n      // Functions declarations are in the scope containing the declaration.\n      traverseBranch(fnName, n);\n    }\n\n    curNode = n;\n    pushScope(n);\n\n    if (isFunctionExpression) {\n      // Function expression names are only accessible within the function\n      // scope.\n      traverseBranch(fnName, n);\n    }\n\n    final Node args = fnName.getNext();\n    final Node body = args.getNext();\n\n    // Args\n    traverseBranch(args, n);\n\n    // Body\n    Preconditions.checkState(body.getNext() == null && body.isBlock(), body);\n    traverseBranch(body, n);\n\n    popScope();\n  }\n",
        "begin_line": 544,
        "end_line": 577,
        "comment": " Traverses a function. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.disables#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup group) {\n    nextSingleton:\n    for (DiagnosticType type : group.getTypes()) {\n      DiagnosticGroup singleton = DiagnosticGroup.forType(type);\n\n      for (WarningsGuard guard : guards) {\n        if (guard.disables(singleton)) {\n          continue nextSingleton;\n        } else if (guard.enables(singleton)) {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n",
        "begin_line": 123,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setRenamingPolicy#1237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setRenamingPolicy(com.google.javascript.jscomp.VariableRenamingPolicy, com.google.javascript.jscomp.PropertyRenamingPolicy)",
        "snippet": "  public void setRenamingPolicy(VariableRenamingPolicy newVariablePolicy,\n      PropertyRenamingPolicy newPropertyPolicy) {\n    this.variableRenaming = newVariablePolicy;\n    this.propertyRenaming = newPropertyPolicy;\n  }\n",
        "begin_line": 1237,
        "end_line": 1241,
        "comment": "\n   * Sets the variable and property renaming policies for the compiler,\n   * in a way that clears warnings about the renaming policy being\n   * uninitialized from flags.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setAssumeClosuresOnlyCaptureReferences#1665",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setAssumeClosuresOnlyCaptureReferences(boolean)",
        "snippet": "  public void setAssumeClosuresOnlyCaptureReferences(boolean enable) {\n    this.assumeClosuresOnlyCaptureReferences = enable;\n  }\n",
        "begin_line": 1665,
        "end_line": 1667,
        "comment": "\n   * Whether to assume closures capture only what they reference. This allows\n   * more aggressive function inlining.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0949
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.StringNode#192",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.StringNode.StringNode(int, java.lang.String)",
        "snippet": "    StringNode(int type, String str) {\n      super(type);\n      if (null == str) {\n        throw new IllegalArgumentException(\"StringNode: str is null\");\n      }\n      this.str = str;\n    }\n",
        "begin_line": 192,
        "end_line": 198,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.ObjectPropListItem#300",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.ObjectPropListItem(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    ObjectPropListItem(int propType, Object objectValue, PropListItem next) {\n      super(propType, next);\n      this.objectValue = objectValue;\n    }\n",
        "begin_line": 300,
        "end_line": 303,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getObjectValue#310",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.ObjectPropListItem.getObjectValue()",
        "snippet": "    @Override\n    public Object getObjectValue() {\n      return objectValue;\n    }\n",
        "begin_line": 310,
        "end_line": 313,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.IntPropListItem#332",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.IntPropListItem(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    IntPropListItem(int propType, int intValue, PropListItem next) {\n      super(propType, next);\n      this.intValue = intValue;\n    }\n",
        "begin_line": 332,
        "end_line": 335,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.chain#352",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.IntPropListItem.chain(com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    @Override\n    public PropListItem chain(PropListItem next) {\n      return new IntPropListItem(getType(), intValue, next);\n    }\n",
        "begin_line": 352,
        "end_line": 355,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.AbstractPropListItem#274",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.AbstractPropListItem(int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "    AbstractPropListItem(int propType, PropListItem next) {\n      this.propType = propType;\n      this.next = next;\n    }\n",
        "begin_line": 274,
        "end_line": 277,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getType#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getType()",
        "snippet": "    @Override\n    public int getType() {\n      return propType;\n    }\n",
        "begin_line": 279,
        "end_line": 282,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getNext#284",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.AbstractPropListItem.getNext()",
        "snippet": "    @Override\n    public PropListItem getNext() {\n      return next;\n    }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#358",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int)",
        "snippet": "  public Node(int nodeType) {\n    type = nodeType;\n    parent = null;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 358,
        "end_line": 362,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#364",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node child) {\n    Preconditions.checkArgument(child.parent == null,\n        \"new child has existing parent\");\n    Preconditions.checkArgument(child.next == null,\n        \"new child has existing sibling\");\n\n    type = nodeType;\n    parent = null;\n    first = last = child;\n    child.next = null;\n    child.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 364,
        "end_line": 376,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.Node#378",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  public Node(int nodeType, Node left, Node right) {\n    Preconditions.checkArgument(left.parent == null,\n        \"first new child has existing parent\");\n    Preconditions.checkArgument(left.next == null,\n        \"first new child has existing sibling\");\n    Preconditions.checkArgument(right.parent == null,\n        \"second new child has existing parent\");\n    Preconditions.checkArgument(right.next == null,\n        \"second new child has existing sibling\");\n    type = nodeType;\n    parent = null;\n    first = left;\n    last = right;\n    left.next = right;\n    left.parent = this;\n    right.next = null;\n    right.parent = this;\n    sourcePosition = -1;\n  }\n",
        "begin_line": 378,
        "end_line": 396,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.newString#513",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.newString(int, java.lang.String)",
        "snippet": "  public static Node newString(int type, String str) {\n    return new StringNode(type, str);\n  }\n",
        "begin_line": 513,
        "end_line": 515,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getType#525",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getType()",
        "snippet": "  public int getType() {\n    return type;\n  }\n",
        "begin_line": 525,
        "end_line": 527,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getFirstChild#537",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getFirstChild()",
        "snippet": "  public Node getFirstChild() {\n    return first;\n  }\n",
        "begin_line": 537,
        "end_line": 539,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getNext#545",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getNext()",
        "snippet": "  public Node getNext() {\n    return next;\n  }\n",
        "begin_line": 545,
        "end_line": 547,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.addChildToBack#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.addChildToBack(com.google.javascript.rhino.Node)",
        "snippet": "  public void addChildToBack(Node child) {\n    Preconditions.checkArgument(child.parent == null);\n    Preconditions.checkArgument(child.next == null);\n    child.parent = this;\n    child.next = null;\n    if (last == null) {\n      first = last = child;\n      return;\n    }\n    last.next = child;\n    last = child;\n  }\n",
        "begin_line": 609,
        "end_line": 620,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.lookupProperty#764",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.lookupProperty(int)",
        "snippet": "  @VisibleForTesting\n  PropListItem lookupProperty(int propType) {\n    PropListItem x = propListHead;\n    while (x != null && propType != x.getType()) {\n      x = x.getNext();\n    }\n    return x;\n  }\n",
        "begin_line": 764,
        "end_line": 771,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.clonePropsFrom#780",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.clonePropsFrom(com.google.javascript.rhino.Node)",
        "snippet": "  public Node clonePropsFrom(Node other) {\n    Preconditions.checkState(this.propListHead == null,\n        \"Node has existing properties.\");\n    this.propListHead = other.propListHead;\n    return this;\n  }\n",
        "begin_line": 780,
        "end_line": 785,
        "comment": "\n   * Clone the properties from the provided node without copying\n   * the property object.  The receiving node may not have any\n   * existing properties.\n   * @param other The node to clone properties from.\n   * @return this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeProp#787",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(int)",
        "snippet": "  public void removeProp(int propType) {\n    PropListItem result = removeProp(propListHead, propType);\n    if (result != propListHead) {\n      propListHead = result;\n    }\n  }\n",
        "begin_line": 787,
        "end_line": 792,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.removeProp#800",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.removeProp(com.google.javascript.rhino.Node.PropListItem, int)",
        "snippet": "  private PropListItem removeProp(PropListItem item, int propType) {\n    if (item == null) {\n      return null;\n    } else if (item.getType() == propType) {\n      return item.getNext();\n    } else {\n      PropListItem result = removeProp(item.getNext(), propType);\n      if (result != item.getNext()) {\n        return item.chain(result);\n      } else {\n        return item;\n      }\n    }\n  }\n",
        "begin_line": 800,
        "end_line": 813,
        "comment": "\n   * @param item The item to inspect\n   * @param propType The property to look for\n   * @return The replacement list if the property was removed, or\n   *   'item' otherwise.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getProp#815",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getProp(int)",
        "snippet": "  public Object getProp(int propType) {\n    PropListItem item = lookupProperty(propType);\n    if (item == null) {\n      return null;\n    }\n    return item.getObjectValue();\n  }\n",
        "begin_line": 815,
        "end_line": 821,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.putProp#847",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putProp(int, java.lang.Object)",
        "snippet": "  public void putProp(int propType, Object value) {\n    removeProp(propType);\n    if (value != null) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 847,
        "end_line": 852,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.putBooleanProp#854",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putBooleanProp(int, boolean)",
        "snippet": "  public void putBooleanProp(int propType, boolean value) {\n    putIntProp(propType, value ? 1 : 0);\n  }\n",
        "begin_line": 854,
        "end_line": 856,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.putIntProp#858",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.putIntProp(int, int)",
        "snippet": "  public void putIntProp(int propType, int value) {\n    removeProp(propType);\n    if (value != 0) {\n      propListHead = createProp(propType, value, propListHead);\n    }\n  }\n",
        "begin_line": 858,
        "end_line": 863,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.createProp#865",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, java.lang.Object, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, Object value, PropListItem next) {\n    return new ObjectPropListItem(propType, value, next);\n  }\n",
        "begin_line": 865,
        "end_line": 867,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.createProp#869",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.createProp(int, int, com.google.javascript.rhino.Node.PropListItem)",
        "snippet": "  PropListItem createProp(int propType, int value, PropListItem next) {\n    return new IntPropListItem(propType, value, next);\n  }\n",
        "begin_line": 869,
        "end_line": 871,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setStaticSourceFile#1096",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile)",
        "snippet": "  public void setStaticSourceFile(StaticSourceFile file) {\n    this.putProp(STATIC_SOURCE_FILE, file);\n  }\n",
        "begin_line": 1096,
        "end_line": 1098,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getSourceFileName#1105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getSourceFileName()",
        "snippet": "  public String getSourceFileName() {\n    StaticSourceFile file = getStaticSourceFile();\n    return file == null ? null : file.getName();\n  }\n",
        "begin_line": 1105,
        "end_line": 1108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getStaticSourceFile#1111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getStaticSourceFile()",
        "snippet": "  public StaticSourceFile getStaticSourceFile() {\n    return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n  }\n",
        "begin_line": 1111,
        "end_line": 1113,
        "comment": " Returns the source file associated with this input. May be null ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setInputId#1118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setInputId(com.google.javascript.rhino.InputId)",
        "snippet": "  public void setInputId(InputId inputId) {\n    this.putProp(INPUT_ID, inputId);\n  }\n",
        "begin_line": 1118,
        "end_line": 1120,
        "comment": "\n   * @param inputId\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getInputId#1125",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getInputId()",
        "snippet": "  public InputId getInputId() {\n    return ((InputId) this.getProp(INPUT_ID));\n  }\n",
        "begin_line": 1125,
        "end_line": 1127,
        "comment": "\n   * @return The Id of the CompilerInput associated with this Node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getLineno#1142",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getLineno()",
        "snippet": "  public int getLineno() {\n    return extractLineno(sourcePosition);\n  }\n",
        "begin_line": 1142,
        "end_line": 1144,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getCharno#1146",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getCharno()",
        "snippet": "  public int getCharno() {\n    return extractCharno(sourcePosition);\n  }\n",
        "begin_line": 1146,
        "end_line": 1148,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setLineno#1166",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setLineno(int)",
        "snippet": "  public void setLineno(int lineno) {\n      int charno = getCharno();\n      if (charno == -1) {\n        charno = 0;\n      }\n      sourcePosition = mergeLineCharNo(lineno, charno);\n  }\n",
        "begin_line": 1166,
        "end_line": 1172,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setCharno#1174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setCharno(int)",
        "snippet": "  public void setCharno(int charno) {\n      sourcePosition = mergeLineCharNo(getLineno(), charno);\n  }\n",
        "begin_line": 1174,
        "end_line": 1176,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.extractLineno#1211",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractLineno(int)",
        "snippet": "  protected static int extractLineno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo >>> COLUMN_BITS;\n    }\n  }\n",
        "begin_line": 1211,
        "end_line": 1217,
        "comment": "\n   * Extracts the line number and character number from a merged line char\n   * number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.extractCharno#1223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.extractCharno(int)",
        "snippet": "  protected static int extractCharno(int lineCharNo) {\n    if (lineCharNo == -1) {\n      return -1;\n    } else {\n      return lineCharNo & COLUMN_MASK;\n    }\n  }\n",
        "begin_line": 1223,
        "end_line": 1229,
        "comment": "\n   * Extracts the character number and character number from a merged line\n   * char number (see {@link #mergeLineCharNo(int, int)}).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getParent#1325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getParent()",
        "snippet": "  public Node getParent() {\n    return parent;\n  }\n",
        "begin_line": 1325,
        "end_line": 1327,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getChildCount#1409",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getChildCount()",
        "snippet": "  public int getChildCount() {\n    int c = 0;\n    for (Node n = first; n != null; n = n.next) {\n      c++;\n    }\n    return c;\n  }\n",
        "begin_line": 1409,
        "end_line": 1415,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getJsDocBuilderForNode#1849",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJsDocBuilderForNode()",
        "snippet": "  public FileLevelJsDocBuilder getJsDocBuilderForNode() {\n    return new FileLevelJsDocBuilder();\n  }\n",
        "begin_line": 1849,
        "end_line": 1851,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.getJSDocInfo#1883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.getJSDocInfo()",
        "snippet": "  public JSDocInfo getJSDocInfo() {\n    return (JSDocInfo) getProp(JSDOC_INFO_PROP);\n  }\n",
        "begin_line": 1883,
        "end_line": 1885,
        "comment": "\n   * Get the {@link JSDocInfo} attached to this node.\n   * @return the information or {@code null} if no JSDoc is attached to this\n   * node\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setJSDocInfo#1890",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setJSDocInfo(com.google.javascript.rhino.JSDocInfo)",
        "snippet": "  public Node setJSDocInfo(JSDocInfo info) {\n      putProp(JSDOC_INFO_PROP, info);\n      return this;\n  }\n",
        "begin_line": 1890,
        "end_line": 1893,
        "comment": "\n   * Sets the {@link JSDocInfo} attached to this node.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.setIsSyntheticBlock#1945",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.setIsSyntheticBlock(boolean)",
        "snippet": "  public void setIsSyntheticBlock(boolean val) {\n    putBooleanProp(SYNTHETIC_BLOCK_PROP, val);\n  }\n",
        "begin_line": 1945,
        "end_line": 1947,
        "comment": "\n   * Sets whether this is a synthetic block that should not be considered\n   * a real source block.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isBlock#2241",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isBlock()",
        "snippet": "  public boolean isBlock() {\n    return this.getType() == Token.BLOCK;\n  }\n",
        "begin_line": 2241,
        "end_line": 2243,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isFunction#2309",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isFunction()",
        "snippet": "  public boolean isFunction() {\n    return this.getType() == Token.FUNCTION;\n  }\n",
        "begin_line": 2309,
        "end_line": 2311,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isName#2353",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isName()",
        "snippet": "  public boolean isName() {\n    return this.getType() == Token.NAME;\n  }\n",
        "begin_line": 2353,
        "end_line": 2355,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isObjectLit#2377",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isObjectLit()",
        "snippet": "  public boolean isObjectLit() {\n    return this.getType() == Token.OBJECTLIT;\n  }\n",
        "begin_line": 2377,
        "end_line": 2379,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isScript#2397",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isScript()",
        "snippet": "  public boolean isScript() {\n    return this.getType() == Token.SCRIPT;\n  }\n",
        "begin_line": 2397,
        "end_line": 2399,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Node.isString#2405",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "class_name": "com.google.javascript.rhino.Node",
        "signature": "com.google.javascript.rhino.Node.isString()",
        "snippet": "  public boolean isString() {\n    return this.getType() == Token.STRING;\n  }\n",
        "begin_line": 2405,
        "end_line": 2407,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.JSDocInfo#351",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.JSDocInfo(boolean)",
        "snippet": "  JSDocInfo(boolean includeDocumentation) {\n    this.includeDocumentation = includeDocumentation;\n  }\n",
        "begin_line": 351,
        "end_line": 353,
        "comment": "\n   * Creates a {@link JSDocInfo} object. This object should be created using\n   * a {@link JSDocInfoBuilder}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isConstructor#497",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isConstructor()",
        "snippet": "  public boolean isConstructor() {\n    return getFlag(MASK_CONSTRUCTOR);\n  }\n",
        "begin_line": 497,
        "end_line": 499,
        "comment": "\n   * Returns whether the {@code @constructor} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.isInterface#578",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.isInterface()",
        "snippet": "  public boolean isInterface() {\n    return getFlag(MASK_INTERFACE);\n  }\n",
        "begin_line": 578,
        "end_line": 580,
        "comment": "\n   * Returns whether the {@code @interface} annotation is present on this\n   * {@link JSDocInfo}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getFlag#676",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getFlag(int)",
        "snippet": "  private boolean getFlag(int mask) {\n    return (bitset & mask) != 0x00;\n  }\n",
        "begin_line": 676,
        "end_line": 678,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.lazyInitInfo#685",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.lazyInitInfo()",
        "snippet": "  private void lazyInitInfo() {\n    if (info == null) {\n      info = new LazilyInitializedInfo();\n    }\n  }\n",
        "begin_line": 685,
        "end_line": 689,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getVisibility#1004",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getVisibility()",
        "snippet": "  public Visibility getVisibility() {\n    return visibility;\n  }\n",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "\n   * Gets the visibility specified by {@code @private}, {@code @protected} or\n   * {@code @public} annotation. If no visibility is specified, visibility\n   * is inherited from the base class.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.getParameterCount#1058",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.getParameterCount()",
        "snippet": "  public int getParameterCount() {\n    if (info == null || info.parameters == null) {\n      return 0;\n    }\n    return info.parameters.size();\n  }\n",
        "begin_line": 1058,
        "end_line": 1063,
        "comment": "\n   * Gets the number of parameters defined.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasType#1105",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType()",
        "snippet": "  public boolean hasType() {\n    return hasType(TYPEFIELD_TYPE);\n  }\n",
        "begin_line": 1105,
        "end_line": 1107,
        "comment": "\n   * Returns whether a type, specified using the {@code @type} annotation, is\n   * present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasEnumParameterType#1113",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasEnumParameterType()",
        "snippet": "  public boolean hasEnumParameterType() {\n    return hasType(TYPEFIELD_ENUM);\n  }\n",
        "begin_line": 1113,
        "end_line": 1115,
        "comment": "\n   * Returns whether an enum parameter type, specified using the {@code @enum}\n   * annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasTypedefType#1121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasTypedefType()",
        "snippet": "  public boolean hasTypedefType() {\n    return hasType(TYPEFIELD_TYPEDEF);\n  }\n",
        "begin_line": 1121,
        "end_line": 1123,
        "comment": "\n   * Returns whether a typedef parameter type, specified using the\n   * {@code @typedef} annotation, is present on this JSDoc.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasReturnType#1129",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasReturnType()",
        "snippet": "  public boolean hasReturnType() {\n    return hasType(TYPEFIELD_RETURN);\n  }\n",
        "begin_line": 1129,
        "end_line": 1131,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @return}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasType#1133",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasType(int)",
        "snippet": "  private boolean hasType(int mask) {\n    return (bitset & MASK_TYPEFIELD) == mask;\n  }\n",
        "begin_line": 1133,
        "end_line": 1135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSDocInfo.hasThisType#1191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "signature": "com.google.javascript.rhino.JSDocInfo.hasThisType()",
        "snippet": "  public boolean hasThisType() {\n    return thisType != null;\n  }\n",
        "begin_line": 1191,
        "end_line": 1193,
        "comment": "\n   * Returns whether this {@link JSDocInfo} contains a type for {@code @this}\n   * annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.InputId#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.InputId(java.lang.String)",
        "snippet": "  public InputId(String id) {\n    this.id = id;\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.getIdName#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.getIdName()",
        "snippet": "  public String getIdName() {\n    return id;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "InputId.hashCode#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/InputId.java",
        "class_name": "com.google.javascript.rhino.InputId",
        "signature": "com.google.javascript.rhino.InputId.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return id.hashCode();\n  }\n",
        "begin_line": 59,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.block#91",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block()",
        "snippet": "  public static Node block() {\n    Node block = new Node(Token.BLOCK);\n    return block;\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.block#102",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.block(com.google.javascript.rhino.Node...)",
        "snippet": "  public static Node block(Node ... stmts) {\n    Node block = block();\n    for (Node stmt : stmts) {\n      Preconditions.checkState(mayBeStatement(stmt));\n      block.addChildToBack(stmt);\n    }\n    return block;\n  }\n",
        "begin_line": 102,
        "end_line": 109,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.script#124",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.script()",
        "snippet": "  public static Node script() {\n    // TODO(johnlenz): finish setting up the SCRIPT node\n    Node block = new Node(Token.SCRIPT);\n    return block;\n  }\n",
        "begin_line": 124,
        "end_line": 128,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.mayBeStatementNoReturn#503",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeStatementNoReturn(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeStatementNoReturn(Node n) {\n    switch (n.getType()) {\n      case Token.EMPTY:\n      case Token.FUNCTION:\n        // EMPTY and FUNCTION are used both in expression and statement\n        // contexts\n        return true;\n\n      case Token.BLOCK:\n      case Token.BREAK:\n      case Token.CONST:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.DO:\n      case Token.EXPR_RESULT:\n      case Token.FOR:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.SWITCH:\n      case Token.THROW:\n      case Token.TRY:\n      case Token.VAR:\n      case Token.WHILE:\n      case Token.WITH:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 503,
        "end_line": 532,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IR.mayBeStatement#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/IR.java",
        "class_name": "com.google.javascript.rhino.IR",
        "signature": "com.google.javascript.rhino.IR.mayBeStatement(com.google.javascript.rhino.Node)",
        "snippet": "  private static boolean mayBeStatement(Node n) {\n    if (!mayBeStatementNoReturn(n)) {\n      return n.isReturn();\n    }\n    return true;\n  }\n",
        "begin_line": 538,
        "end_line": 543,
        "comment": "\n   * It isn't possible to always determine if a detached node is a expression,\n   * so make a best guess.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.ParseResult#156",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.ParseResult.ParseResult(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "    public ParseResult(Node ast, AstRoot oldAst) {\n      this.ast = ast;\n      this.oldAst = oldAst;\n    }\n",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.createConfig#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.createConfig(boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean, java.util.Set<java.lang.String>)",
        "snippet": "  public static Config createConfig(boolean isIdeMode,\n                                    LanguageMode languageMode,\n                                    boolean acceptConstKeyword,\n                                    Set<String> extraAnnotationNames) {\n    initResourceConfig();\n    Set<String> effectiveAnnotationNames;\n    if (extraAnnotationNames == null) {\n      effectiveAnnotationNames = annotationNames;\n    } else {\n      effectiveAnnotationNames = new HashSet<String>(annotationNames);\n      effectiveAnnotationNames.addAll(extraAnnotationNames);\n    }\n    return new Config(effectiveAnnotationNames, suppressionNames,\n        isIdeMode, languageMode, acceptConstKeyword);\n  }\n",
        "begin_line": 57,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.initResourceConfig#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.initResourceConfig()",
        "snippet": "  private static synchronized void initResourceConfig() {\n    if (annotationNames != null) {\n      return;\n    }\n\n    ResourceBundle config = ResourceBundle.getBundle(CONFIG_RESOURCE);\n    annotationNames = extractList(config.getString(\"jsdoc.annotations\"));\n    suppressionNames = extractList(config.getString(\"jsdoc.suppressions\"));\n    reservedVars = extractList(config.getString(\"compiler.reserved.vars\"));\n  }\n",
        "begin_line": 78,
        "end_line": 87,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.extractList#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.extractList(java.lang.String)",
        "snippet": "  private static Set<String> extractList(String configProp) {\n    String[] names = configProp.split(\",\");\n    Set<String> trimmedNames = Sets.newHashSet();\n    for (String name : names) {\n      trimmedNames.add(name.trim());\n    }\n    return ImmutableSet.copyOf(trimmedNames);\n  }\n",
        "begin_line": 89,
        "end_line": 96,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ParserRunner.parse#107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.parse(com.google.javascript.rhino.jstype.StaticSourceFile, java.lang.String, com.google.javascript.jscomp.parsing.Config, com.google.javascript.rhino.head.ErrorReporter, java.util.logging.Logger)",
        "snippet": "  public static ParseResult parse(StaticSourceFile sourceFile,\n                                  String sourceString,\n                                  Config config,\n                                  ErrorReporter errorReporter,\n                                  Logger logger) throws IOException {\n    Context cx = Context.enter();\n    cx.setErrorReporter(errorReporter);\n    cx.setLanguageVersion(Context.VERSION_1_5);\n    CompilerEnvirons compilerEnv = new CompilerEnvirons();\n    compilerEnv.initFromContext(cx);\n    compilerEnv.setRecordingComments(true);\n    compilerEnv.setRecordingLocalJsDocComments(true);\n\n    // ES5 specifically allows trailing commas\n    compilerEnv.setWarnTrailingComma(\n        config.languageMode == LanguageMode.ECMASCRIPT3);\n\n    compilerEnv.setReservedKeywordAsIdentifier(true);\n\n    compilerEnv.setAllowMemberExprAsFunctionName(false);\n    compilerEnv.setIdeMode(config.isIdeMode);\n    compilerEnv.setRecoverFromErrors(config.isIdeMode);\n\n    Parser p = new Parser(compilerEnv, errorReporter);\n    AstRoot astRoot = null;\n    try {\n      astRoot = p.parse(sourceString, sourceFile.getName(), 1);\n    } catch (EvaluatorException e) {\n      logger.info(\n          \"Error parsing \" + sourceFile.getName() + \": \" + e.getMessage());\n    } finally {\n      Context.exit();\n    }\n    Node root = null;\n    if (astRoot != null) {\n      root = IRFactory.transformTree(\n          astRoot, sourceFile, sourceString, config, errorReporter);\n      root.setIsSyntheticBlock(true);\n    }\n    return new ParseResult(root, astRoot);\n  }\n",
        "begin_line": 107,
        "end_line": 147,
        "comment": "\n   * Parses the JavaScript text given by a reader.\n   *\n   * @param sourceString Source code from the file.\n   * @param errorReporter An error.\n   * @param logger A logger.\n   * @return The AST of the given text.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformAsString#567",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.transformAsString(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "    private Node transformAsString(AstNode n) {\n      Node ret;\n      if (n instanceof Name) {\n        ret = transformNameAsString((Name) n);\n      } else if (n instanceof NumberLiteral) {\n        ret = transformNumberAsString((NumberLiteral) n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      } else {\n        ret = transform(n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n      }\n      Preconditions.checkState(ret.isString());\n      return ret;\n    }\n",
        "begin_line": 567,
        "end_line": 580,
        "comment": "\n     * Transforms the given node and then sets its type to Token.STRING if it\n     * was Token.NAME. If its type was already Token.STRING, then quotes it.\n     * Used for properties, as the old AST uses String tokens, while the new one\n     * uses Name tokens for unquoted strings. For example, in\n     * var o = {'a' : 1, b: 2};\n     * the string 'a' is quoted, while the name b is turned into a string, but\n     * unquoted.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processAstRoot#609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processAstRoot(com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "    @Override\n    Node processAstRoot(AstRoot rootNode) {\n      Node node = newNode(Token.SCRIPT);\n      for (com.google.javascript.rhino.head.Node child : rootNode) {\n        node.addChildToBack(transform((AstNode) child));\n      }\n      parseDirectives(node);\n      return node;\n    }\n",
        "begin_line": 609,
        "end_line": 617,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.parseDirectives#628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.parseDirectives(com.google.javascript.rhino.Node)",
        "snippet": "    private void parseDirectives(Node node) {\n      // Remove all the directives, and encode them in the AST.\n      Set<String> directives = null;\n      while (isDirective(node.getFirstChild())) {\n        String directive = node.removeFirstChild().getFirstChild().getString();\n        if (directives == null) {\n          directives = Sets.newHashSet(directive);\n        } else {\n          directives.add(directive);\n        }\n      }\n\n      if (directives != null) {\n        node.setDirectives(directives);\n      }\n    }\n",
        "begin_line": 628,
        "end_line": 643,
        "comment": "\n     * Parse the directives, encode them in the AST, and remove their nodes.\n     *\n     * For information on ES5 directives, see section 14.1 of\n     * ECMA-262, Edition 5.\n     *\n     * It would be nice if Rhino would eventually take care of this for\n     * us, but right now their directive-processing is a one-off.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processExpressionStatement#735",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement)",
        "snippet": "    @Override\n    Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n",
        "begin_line": 735,
        "end_line": 740,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processName#928",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "    @Override\n    Node processName(Name nameNode) {\n      return processName(nameNode, false);\n    }\n",
        "begin_line": 928,
        "end_line": 931,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processName#933",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processName(com.google.javascript.rhino.head.ast.Name, boolean)",
        "snippet": "    Node processName(Name nameNode, boolean asString) {\n      if (asString) {\n        return newStringNode(Token.STRING, nameNode.getIdentifier());\n      } else {\n        if (isReservedKeyword(nameNode.getIdentifier())) {\n          errorReporter.error(\n            \"identifier is a reserved word\",\n            sourceName,\n            nameNode.getLineno(), \"\", 0);\n        }\n        return newStringNode(Token.NAME, nameNode.getIdentifier());\n      }\n    }\n",
        "begin_line": 933,
        "end_line": 945,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processPropertyGet#1047",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet)",
        "snippet": "    @Override\n    Node processPropertyGet(PropertyGet getNode) {\n      Node leftChild = transform(getNode.getTarget());\n      AstNode nodeProp = getNode.getProperty();\n      Node rightChild = transformAsString(nodeProp);\n      if (nodeProp instanceof Name && !isAllowedProp(\n          ((Name) nodeProp).getIdentifier())) {\n        errorReporter.warning(INVALID_ES3_PROP_NAME, sourceName,\n            rightChild.getLineno(), \"\", rightChild.getCharno());\n      }\n      Node newNode = newNode(\n          Token.GETPROP, leftChild, rightChild);\n      newNode.setLineno(leftChild.getLineno());\n      newNode.setCharno(leftChild.getCharno());\n      maybeSetLengthFrom(newNode, getNode);\n      return newNode;\n    }\n",
        "begin_line": 1047,
        "end_line": 1063,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.processVariableDeclaration#1249",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher.processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration)",
        "snippet": "    @Override\n    Node processVariableDeclaration(VariableDeclaration declarationNode) {\n      if (!config.acceptConstKeyword && declarationNode.getType() ==\n          com.google.javascript.rhino.head.Token.CONST) {\n        processIllegalToken(declarationNode);\n      }\n\n      Node node = newNode(Token.VAR);\n      for (VariableInitializer child : declarationNode.getVariables()) {\n        node.addChildToBack(transform(child));\n      }\n      return node;\n    }\n",
        "begin_line": 1249,
        "end_line": 1261,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.createTemplateNode#191",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.createTemplateNode()",
        "snippet": "  private Node createTemplateNode() {\n    // The Node type choice is arbitrary.\n    Node templateNode = new Node(Token.SCRIPT);\n    templateNode.setStaticSourceFile(sourceFile);\n    return templateNode;\n  }\n",
        "begin_line": 191,
        "end_line": 196,
        "comment": " This reduces the cost of these properties to O(nodes) to O(files).",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.setFileOverviewJsDoc#223",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setFileOverviewJsDoc(com.google.javascript.rhino.Node)",
        "snippet": "  private void setFileOverviewJsDoc(Node irNode) {\n    // Only after we've seen all @fileoverview entries, attach the\n    // last one to the root node, and copy the found license strings\n    // to that node.\n    JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();\n    if (rootNodeJsDoc != null) {\n      irNode.setJSDocInfo(rootNodeJsDoc);\n      rootNodeJsDoc.setAssociatedNode(irNode);\n    }\n\n    if (fileOverviewInfo != null) {\n      if ((irNode.getJSDocInfo() != null) &&\n          (irNode.getJSDocInfo().getLicense() != null)) {\n        fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());\n      }\n      irNode.setJSDocInfo(fileOverviewInfo);\n      fileOverviewInfo.setAssociatedNode(irNode);\n    }\n  }\n",
        "begin_line": 223,
        "end_line": 241,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.transformNameAsString#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformNameAsString(com.google.javascript.rhino.head.ast.Name)",
        "snippet": "  private Node transformNameAsString(Name node) {\n    Node irNode = transformDispatcher.processName(node, true);\n    JSDocInfo jsDocInfo = handleJsDoc(node, irNode);\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, node);\n    return irNode;\n  }\n",
        "begin_line": 421,
        "end_line": 429,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.setSourceInfo#452",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.setSourceInfo(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void setSourceInfo(Node irNode, AstNode node) {\n    if (irNode.getLineno() == -1) {\n      // If we didn't already set the line, then set it now. This avoids\n      // cases like ParenthesizedExpression where we just return a previous\n      // node, but don't want the new node to get its parent's line number.\n      int lineno = node.getLineno();\n      irNode.setLineno(lineno);\n      int charno = position2charno(node.getAbsolutePosition());\n      irNode.setCharno(charno);\n      maybeSetLengthFrom(irNode, node);\n    }\n  }\n",
        "begin_line": 452,
        "end_line": 463,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.maybeSetLengthFrom#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.maybeSetLengthFrom(com.google.javascript.rhino.Node, com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private void maybeSetLengthFrom(Node node, AstNode source) {\n    if (config.isIdeMode) {\n      node.setLength(source.getLength());\n    }\n  }\n",
        "begin_line": 521,
        "end_line": 525,
        "comment": " Set the length on the node if we're in IDE mode.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.justTransform#544",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.justTransform(com.google.javascript.rhino.head.ast.AstNode)",
        "snippet": "  private Node justTransform(AstNode node) {\n    return transformDispatcher.process(node);\n  }\n",
        "begin_line": 544,
        "end_line": 546,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNode#1527",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int)",
        "snippet": "  private Node newNode(int type) {\n    return new Node(type).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1527,
        "end_line": 1529,
        "comment": " Simple helper to create nodes and set the initial node properties.",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newNode#1535",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newNode(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private Node newNode(int type, Node child1, Node child2) {\n    return new Node(type, child1, child2).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1535,
        "end_line": 1537,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "IRFactory.newStringNode#1547",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.newStringNode(int, java.lang.String)",
        "snippet": "  private Node newStringNode(int type, String value) {\n    return Node.newString(type, value).clonePropsFrom(templateNode);\n  }\n",
        "begin_line": 1547,
        "end_line": 1549,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Config.Config#74",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.Config(java.util.Set<java.lang.String>, java.util.Set<java.lang.String>, boolean, com.google.javascript.jscomp.parsing.Config.LanguageMode, boolean)",
        "snippet": "  Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n      boolean isIdeMode, LanguageMode languageMode,\n      boolean acceptConstKeyword) {\n    this.annotationNames = buildAnnotationNames(annotationWhitelist);\n    this.parseJsDocDocumentation = isIdeMode;\n    this.suppressionNames = suppressionNames;\n    this.isIdeMode = isIdeMode;\n    this.languageMode = languageMode;\n    this.acceptConstKeyword = acceptConstKeyword;\n  }\n",
        "begin_line": 74,
        "end_line": 83,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Config.buildAnnotationNames#89",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "signature": "com.google.javascript.jscomp.parsing.Config.buildAnnotationNames(java.util.Set<java.lang.String>)",
        "snippet": "  private static Map<String, Annotation> buildAnnotationNames(\n      Set<String> annotationWhitelist) {\n    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n        ImmutableMap.builder();\n    annotationBuilder.putAll(Annotation.recognizedAnnotations);\n    for (String unrecognizedAnnotation : annotationWhitelist) {\n      if (!Annotation.recognizedAnnotations.containsKey(\n              unrecognizedAnnotation)) {\n        annotationBuilder.put(\n            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n      }\n    }\n    return annotationBuilder.build();\n  }\n",
        "begin_line": 89,
        "end_line": 102,
        "comment": "\n   * Create the annotation names from the user-specified\n   * annotation whitelist.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.isInitialized#745",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.ThreadTrace.isInitialized()",
        "snippet": "    boolean isInitialized() {\n      return isInitialized;\n    }\n",
        "begin_line": 745,
        "end_line": 747,
        "comment": " Is initialized? ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.currentTimeMillis#222",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Anonymous-478600b2-589e-47c9-9b74-334cfc83f22c.currentTimeMillis()",
        "snippet": "    @Override\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n",
        "begin_line": 222,
        "end_line": 225,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.Tracer#235",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.Tracer(java.lang.String, java.lang.String)",
        "snippet": "  Tracer(@Nullable String type, @Nullable String comment) {\n    this.type = type;\n    this.comment = comment == null ? \"\" : comment;\n    startTimeMs = clock.currentTimeMillis();\n    startThread = Thread.currentThread();\n    if (!extraTracingStatistics.isEmpty()) {\n      int size = extraTracingStatistics.size();\n      extraTracingValues = new long[size];\n      int i = 0;\n      for (TracingStatistic tracingStatistic : extraTracingStatistics) {\n        extraTracingValues[i] = tracingStatistic.start(startThread);\n        i++;\n      }\n    }\n\n    ThreadTrace trace = getThreadTrace();\n\n    // Do nothing if the current thread trace wasn't initialized.\n    if (!trace.isInitialized()) {\n      return;\n    }\n\n    // Check if we are creating too many Tracers.\n    if (trace.events.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Giant thread trace. Too many Tracers created. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateEvents();\n    }\n\n    // Check if we forgot to close the Tracers.\n    if (trace.outstandingEvents.size() >= MAX_TRACE_SIZE) {\n      logger.log(Level.WARNING,\n                  \"Too many outstanding Tracers. Tracer.stop() is missing \"\n                    + \"or Tracer.stop() is not wrapped in a \"\n                    + \"try/finally block. \"\n                    + \"Clearing to avoid memory leak.\",\n                  new Throwable(trace.toString()));\n      trace.truncateOutstandingEvents();\n    }\n\n    trace.startEvent(this);\n  }\n",
        "begin_line": 235,
        "end_line": 278,
        "comment": "\n   * Create and start a tracer.\n   * Both type and comment may be null. See class comment for usage.\n   *\n   * @param type The type for totaling\n   * @param comment Comment about this tracer\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.stop#407",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop(int)",
        "snippet": "  long stop(int silenceThreshold) {\n    Preconditions.checkState(Thread.currentThread() == startThread);\n\n    ThreadTrace trace = getThreadTrace();\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    stopTimeMs = clock.currentTimeMillis();\n    if (extraTracingValues != null) {\n      // We use extraTracingValues.length rather than\n      // extraTracingStatistics.size() because a new statistic may\n      // have been added\n      for (int i = 0; i < extraTracingValues.length; i++) {\n        long value = extraTracingStatistics.get(i).stop(startThread);\n        extraTracingValues[i] = value - extraTracingValues[i];\n      }\n    }\n\n    // Do nothing if the thread trace was not initialized.\n    if (!trace.isInitialized()) {\n      return 0;\n    }\n\n    trace.endEvent(this, silenceThreshold);\n    return stopTimeMs - startTimeMs;\n  }\n",
        "begin_line": 407,
        "end_line": 434,
        "comment": "\n   * Stop the trace.\n   * This may only be done once and must be done from the same thread\n   * that started it.\n   * @param silenceThreshold Traces for time less than silence_threshold\n   * ms will be left out of the trace report. A value of -1 indicates\n   * that the current ThreadTrace silence_threshold should be used.\n   * @return The time that this trace actually ran\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.stop#440",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.stop()",
        "snippet": "  long stop() {\n    return stop(-1);\n  }\n",
        "begin_line": 440,
        "end_line": 442,
        "comment": " Stop the trace using the default silenceThreshold\n   *\n   * @return  The time that this trace actually ran.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.clearCurrentThreadTrace#518",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.clearCurrentThreadTrace()",
        "snippet": "  static void clearCurrentThreadTrace() {\n    clearThreadTrace();\n  }\n",
        "begin_line": 518,
        "end_line": 520,
        "comment": "\n   * Throw away any Trace associated with the current thread.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.getThreadTrace#958",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.getThreadTrace()",
        "snippet": "  static ThreadTrace getThreadTrace() {\n    ThreadTrace t = traces.get();\n    if (t == null) {\n      t = new ThreadTrace();\n      t.prettyPrint = defaultPrettyPrint;\n      traces.set(t);\n    }\n    return t;\n  }\n",
        "begin_line": 958,
        "end_line": 966,
        "comment": "\n   * Get the ThreadTrace for the current thread, creating one if necessary.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Tracer.clearThreadTrace#969",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "class_name": "com.google.javascript.jscomp.Tracer",
        "signature": "com.google.javascript.jscomp.Tracer.clearThreadTrace()",
        "snippet": "  static void clearThreadTrace() {\n    traces.remove();\n  }\n",
        "begin_line": 969,
        "end_line": 971,
        "comment": " Remove any ThreadTrace associated with the current thread ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "SyntacticScopeCreator.SyntacticScopeCreator#44",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.SyntacticScopeCreator(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  SyntacticScopeCreator(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    this.redeclarationHandler = new DefaultRedeclarationHandler();\n  }\n",
        "begin_line": 44,
        "end_line": 47,
        "comment": "\n   * Creates a ScopeCreator.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "SuppressDocWarningsGuard.SuppressDocWarningsGuard#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.SuppressDocWarningsGuard(java.util.Map<java.lang.String, com.google.javascript.jscomp.DiagnosticGroup>)",
        "snippet": "  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressibleGroups) {\n    for (Map.Entry<String, DiagnosticGroup> entry :\n             suppressibleGroups.entrySet()) {\n      suppressors.put(\n          entry.getKey(),\n          new DiagnosticGroupWarningsGuard(\n              entry.getValue(),\n              CheckLevel.OFF));\n    }\n  }\n",
        "begin_line": 40,
        "end_line": 49,
        "comment": "\n   * The suppressible groups, indexed by name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "SuppressDocWarningsGuard.getPriority#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.getPriority()",
        "snippet": "  @Override\n  public int getPriority() {\n    // Happens after path-based filtering, but before other times\n    // of filtering.\n    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n  }\n",
        "begin_line": 103,
        "end_line": 108,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.getCode#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getCode()",
        "snippet": "  public String getCode() throws IOException {\n    return code;\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "\n   * Gets all the code in this source file.\n   * @throws IOException\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.getName#173",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return fileName;\n  }\n",
        "begin_line": 173,
        "end_line": 176,
        "comment": " Returns a unique name for the source file. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.setIsExtern#185",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setIsExtern(boolean)",
        "snippet": "  void setIsExtern(boolean newVal) {\n    isExternFile = newVal;\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": " Sets that this is an extern. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Result.Result#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "class_name": "com.google.javascript.jscomp.Result",
        "signature": "Result(JSError[], JSError[], String, VariableMap, VariableMap, VariableMap, VariableMap, FunctionInformationMap, SourceMap, String, Map, String)",
        "snippet": "  Result(JSError[] errors, JSError[] warnings, String debugLog,\n         VariableMap variableMap, VariableMap propertyMap,\n         VariableMap namedAnonFunctionMap,\n         VariableMap stringMap,\n         FunctionInformationMap functionInformationMap,\n         SourceMap sourceMap, String externExport,\n         Map<String, Integer> cssNames, String idGeneratorMap) {\n    this.success = errors.length == 0;\n    this.errors = errors;\n    this.warnings = warnings;\n    this.debugLog = debugLog;\n    this.variableMap = variableMap;\n    this.propertyMap = propertyMap;\n    this.namedAnonFunctionMap = namedAnonFunctionMap;\n    this.stringMap = stringMap;\n    this.functionInformationMap = functionInformationMap;\n    this.sourceMap = sourceMap;\n    this.externExport = externExport;\n    this.cssNames = cssNames;\n    this.idGeneratorMap = idGeneratorMap;\n  }\n",
        "begin_line": 39,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "RecentChange.hasCodeChanged#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RecentChange.java",
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "signature": "com.google.javascript.jscomp.RecentChange.hasCodeChanged()",
        "snippet": "  public boolean hasCodeChanged() {\n    return hasChanged;\n  }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrintStreamErrorManager.PrintStreamErrorManager#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.PrintStreamErrorManager(com.google.javascript.jscomp.MessageFormatter, java.io.PrintStream)",
        "snippet": "  public PrintStreamErrorManager(MessageFormatter formatter,\n                                 PrintStream stream) {\n    this.formatter = formatter;\n    this.stream = stream;\n  }\n",
        "begin_line": 41,
        "end_line": 45,
        "comment": "\n   * Creates an error manager.\n   * @param formatter the message formatter used to format the messages\n   * @param stream the stream on which the errors and warnings should be\n   *     printed. This class does not close the stream\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrintStreamErrorManager.setSummaryDetailLevel#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.setSummaryDetailLevel(int)",
        "snippet": "  public void setSummaryDetailLevel(int summaryDetailLevel) {\n    this.summaryDetailLevel = summaryDetailLevel;\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.PrepareAnnotations#120",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.PrepareAnnotations()",
        "snippet": "    PrepareAnnotations() {\n    }\n",
        "begin_line": 120,
        "end_line": 121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.shouldTraverse#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAnnotations.shouldTraverse(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      if (n.isObjectLit()) {\n        normalizeObjectLiteralAnnotations(n);\n      }\n      return true;\n    }\n",
        "begin_line": 123,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.PrepareAst#39",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  PrepareAst(AbstractCompiler compiler) {\n    this(compiler, false);\n  }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.PrepareAst#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.PrepareAst(com.google.javascript.jscomp.AbstractCompiler, boolean)",
        "snippet": "  PrepareAst(AbstractCompiler compiler, boolean checkOnly) {\n    this.compiler = compiler;\n    this.checkOnly = checkOnly;\n  }\n",
        "begin_line": 43,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PrepareAst.process#54",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "signature": "com.google.javascript.jscomp.PrepareAst.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  public void process(Node externs, Node root) {\n    if (checkOnly) {\n      normalizeNodeTypes(root);\n    } else {\n      // Don't perform \"PrepareAnnotations\" when doing checks as\n      // they currently aren't valid during sanity checks.  In particular,\n      // they DIRECT_EVAL shouldn't be applied after inlining has been\n      // performed.\n      if (externs != null) {\n        NodeTraversal.traverse(\n            compiler, externs, new PrepareAnnotations());\n      }\n      if (root != null) {\n        NodeTraversal.traverse(\n            compiler, root, new PrepareAnnotations());\n      }\n    }\n  }\n",
        "begin_line": 54,
        "end_line": 72,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassConfig.State#294",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "signature": "com.google.javascript.jscomp.PassConfig.State.State(java.util.Map<java.lang.String, java.lang.Integer>, java.util.Set<java.lang.String>, com.google.javascript.jscomp.CrossModuleMethodMotion.IdGenerator, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.VariableMap, com.google.javascript.jscomp.FunctionNames, java.lang.String)",
        "snippet": "    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n        CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n        VariableMap variableMap, VariableMap propertyMap,\n        VariableMap anonymousFunctionNameMap,\n        VariableMap stringMap, FunctionNames functionNames,\n        String idGeneratorMap) {\n      this.cssNames = cssNames;\n      this.exportedNames = exportedNames;\n      this.crossModuleIdGenerator = crossModuleIdGenerator;\n      this.variableMap = variableMap;\n      this.propertyMap = propertyMap;\n      this.anonymousFunctionNameMap = anonymousFunctionNameMap;\n      this.stringMap = stringMap;\n      this.idGeneratorMap = idGeneratorMap;\n      this.functionNames = functionNames;\n    }\n",
        "begin_line": 294,
        "end_line": 309,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassConfig.PassConfig#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "signature": "com.google.javascript.jscomp.PassConfig.PassConfig(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public PassConfig(CompilerOptions options) {\n    this.options = options;\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatement#1807",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatement(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatement(Node n) {\n    return isStatementParent(n.getParent());\n  }\n",
        "begin_line": 1807,
        "end_line": 1809,
        "comment": "\n   * @return Whether the node is used as a statement.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeUtil.isStatementParent#1811",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "signature": "com.google.javascript.jscomp.NodeUtil.isStatementParent(com.google.javascript.rhino.Node)",
        "snippet": "  static boolean isStatementParent(Node parent) {\n    // It is not possible to determine definitely if a node is a statement\n    // or not if it is not part of the AST.  A FUNCTION node can be\n    // either part of an expression or a statement.\n    Preconditions.checkState(parent != null);\n    switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }\n  }\n",
        "begin_line": 1811,
        "end_line": 1824,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.NodeTraversal#230",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public NodeTraversal(AbstractCompiler compiler, Callback cb) {\n    this(compiler, cb, new SyntacticScopeCreator(compiler));\n  }\n",
        "begin_line": 230,
        "end_line": 232,
        "comment": "\n   * Creates a node traversal using the specified callback interface.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverse#280",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.rhino.Node)",
        "snippet": "  public void traverse(Node root) {\n    try {\n      inputId = NodeUtil.getInputId(root);\n      sourceName = \"\";\n      curNode = root;\n      pushScope(root);\n      // null parent ensures that the shallow callbacks will traverse root\n      traverseBranch(root, null);\n      popScope();\n    } catch (Exception unexpectedException) {\n      throwUnexpectedException(unexpectedException);\n    }\n  }\n",
        "begin_line": 280,
        "end_line": 292,
        "comment": "\n   * Traverses a parse tree recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.traverse#491",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)",
        "snippet": "  public static void traverse(\n      AbstractCompiler compiler, Node root, Callback cb) {\n    NodeTraversal t = new NodeTraversal(compiler, cb);\n    t.traverse(root);\n  }\n",
        "begin_line": 491,
        "end_line": 495,
        "comment": "\n   * Traverses a node recursively.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.hasScope#679",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.hasScope()",
        "snippet": "  public boolean hasScope() {\n    return !(scopes.isEmpty() && scopeRoots.isEmpty());\n  }\n",
        "begin_line": 679,
        "end_line": 681,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "NodeTraversal.getSourceName#691",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "signature": "com.google.javascript.jscomp.NodeTraversal.getSourceName(com.google.javascript.rhino.Node)",
        "snippet": "  private static String getSourceName(Node n) {\n    String name = n.getSourceFileName();\n    return name == null ? \"\" : name;\n  }\n",
        "begin_line": 691,
        "end_line": 694,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#43",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source) {\n    this(source, LINE);\n  }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "LightweightMessageFormatter.LightweightMessageFormatter#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.LightweightMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider, com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt)",
        "snippet": "  public LightweightMessageFormatter(SourceExcerptProvider source,\n      SourceExcerpt excerpt) {\n    super(source);\n    Preconditions.checkNotNull(source);\n    this.excerpt = excerpt;\n  }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.JsAst#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.JsAst(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public JsAst(SourceFile sourceFile) {\n    this.inputId = new InputId(sourceFile.getName());\n    this.sourceFile = sourceFile;\n    this.fileName = sourceFile.getName();\n  }\n",
        "begin_line": 41,
        "end_line": 45,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.getAstRoot#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    if (root == null) {\n      parse(compiler);\n      root.setInputId(inputId);\n    }\n    return root;\n  }\n",
        "begin_line": 47,
        "end_line": 54,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.getInputId#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return inputId;\n  }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.getSourceFile#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.getSourceFile()",
        "snippet": "  @Override\n  public SourceFile getSourceFile() {\n    return sourceFile;\n  }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JsAst.parse#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "class_name": "com.google.javascript.jscomp.JsAst",
        "signature": "com.google.javascript.jscomp.JsAst.parse(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private void parse(AbstractCompiler compiler) {\n    int startErrorCount = compiler.getErrorManager().getErrorCount();\n    try {\n      ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n          compiler.getParserConfig(),\n          compiler.getDefaultErrorReporter(),\n          logger_);\n      root = result.ast;\n      compiler.setOldParseTree(sourceFile.getName(), result.oldAst);\n    } catch (IOException e) {\n      compiler.report(\n          JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n    }\n\n\n    if (root == null ||\n        // Most passes try to report as many errors as possible,\n        // so there may already be errors. We only care if there were\n        // errors in the code we just parsed.\n        (compiler.getErrorManager().getErrorCount() > startErrorCount && !compiler.isIdeMode())) {\n      // There was a parse error or IOException, so use a dummy block.\n      root = IR.script();\n    } else {\n      compiler.prepareAst(root);\n    }\n\n    // Set the source name so that the compiler passes can track\n    // the source file and module.\n    root.setStaticSourceFile(sourceFile);\n  }\n",
        "begin_line": 81,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.JSModule#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.JSModule(java.lang.String)",
        "snippet": "  public JSModule(String name) {\n    this.name = name;\n    this.depth = -1;\n  }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\n   * Creates an instance.\n   *\n   * @param name A unique name for the module\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.add#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public void add(SourceFile file) {\n    add(new CompilerInput(file));\n  }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": " Adds a source file input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.add#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.add(com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  public void add(CompilerInput input) {\n    inputs.add(input);\n    input.setModule(this);\n  }\n",
        "begin_line": 103,
        "end_line": 106,
        "comment": " Adds a source code input to this module. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "JSModule.getInputs#204",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "class_name": "com.google.javascript.jscomp.JSModule",
        "signature": "com.google.javascript.jscomp.JSModule.getInputs()",
        "snippet": "  public List<CompilerInput> getInputs() {\n    return inputs;\n  }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\n   * Gets this module's list of source code inputs.\n   *\n   * @return A list that may be empty but not null\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ErrorFormat.toFormatter#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ErrorFormat.java",
        "class_name": "com.google.javascript.jscomp.ErrorFormat",
        "signature": "com.google.javascript.jscomp.ErrorFormat.toFormatter(com.google.javascript.jscomp.SourceExcerptProvider, boolean)",
        "snippet": "    @Override\n    public MessageFormatter toFormatter(\n        SourceExcerptProvider source, boolean colorize) {\n      LightweightMessageFormatter formatter = new LightweightMessageFormatter(\n          source);\n      formatter.setColorize(colorize);\n      return formatter;\n    }\n",
        "begin_line": 35,
        "end_line": 42,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.getRegisteredGroups#63",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.getRegisteredGroups()",
        "snippet": "  protected Map<String, DiagnosticGroup> getRegisteredGroups() {\n    return ImmutableMap.copyOf(groupsByName);\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Get the registered diagnostic groups, indexed by name. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.disables#40",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  @Override\n  public boolean disables(DiagnosticGroup otherGroup) {\n    return !level.isOn() && group.isSubGroup(otherGroup);\n  }\n",
        "begin_line": 40,
        "end_line": 43,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private DiagnosticGroup(DiagnosticType type) {\n    this.name = null;\n    this.types = ImmutableSet.of(type);\n  }\n",
        "begin_line": 60,
        "end_line": 63,
        "comment": "\n   * Create a diagnostic group with no name that only matches the given type.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.forType#70",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public static synchronized DiagnosticGroup forType(DiagnosticType type) {\n    if (!singletons.containsKey(type)) {\n      singletons.put(type, new DiagnosticGroup(type));\n    }\n    return singletons.get(type);\n  }\n",
        "begin_line": 70,
        "end_line": 75,
        "comment": " Create a diagnostic group that matches only the given type. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.matches#109",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.matches(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public boolean matches(DiagnosticType type) {\n    return types.contains(type);\n  }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\n   * Returns whether the given type matches a type in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.isSubGroup#116",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.isSubGroup(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean isSubGroup(DiagnosticGroup group) {\n    for (DiagnosticType type : group.types) {\n      if (!matches(type)) {\n        return false;\n      }\n    }\n    return true;\n  }\n",
        "begin_line": 116,
        "end_line": 123,
        "comment": "\n   * Returns whether all of the types in the given group are in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.getTypes#128",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.getTypes()",
        "snippet": "  public Iterable<DiagnosticType> getTypes() {\n    return types;\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n   * Returns an iterable over all the types in this group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DependencyOptions.setDependencySorting#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.setDependencySorting(boolean)",
        "snippet": "  public DependencyOptions setDependencySorting(boolean enabled) {\n    this.sortDependencies = enabled;\n    return this;\n  }\n",
        "begin_line": 55,
        "end_line": 58,
        "comment": "\n   * Enables or disables dependency sorting mode.\n   *\n   * If true, we will sort the input files based on dependency information\n   * in them. Otherwise, we will use the order of files specified\n   * on the command-line.\n   * @return this for easy building.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DependencyOptions.needsManagement#121",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DependencyOptions.java",
        "class_name": "com.google.javascript.jscomp.DependencyOptions",
        "signature": "com.google.javascript.jscomp.DependencyOptions.needsManagement()",
        "snippet": "  boolean needsManagement() {\n    return sortDependencies || pruneDependencies;\n  }\n",
        "begin_line": 121,
        "end_line": 123,
        "comment": " Returns whether re-ordering of files is needed. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.HotSwapPassFactory#2476",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.HotSwapPassFactory.HotSwapPassFactory(java.lang.String, boolean)",
        "snippet": "    HotSwapPassFactory(String name, boolean isOneTimePass) {\n      super(name, isOneTimePass);\n    }\n",
        "begin_line": 2476,
        "end_line": 2478,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.DefaultPassConfig#144",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public DefaultPassConfig(CompilerOptions options) {\n    super(options);\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultPassConfig.getIntermediateState#148",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.getIntermediateState()",
        "snippet": "  @Override\n  protected State getIntermediateState() {\n    return new State(\n        cssNames == null ? null : Maps.newHashMap(cssNames),\n        exportedNames == null ? null :\n            Collections.unmodifiableSet(exportedNames),\n        crossModuleIdGenerator, variableMap, propertyMap,\n        anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);\n  }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.compare#60",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.compare(com.google.javascript.jscomp.WarningsGuard, com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "    @Override\n    public int compare(WarningsGuard a, WarningsGuard b) {\n      int priorityDiff = a.getPriority() - b.getPriority();\n      if (priorityDiff != 0) {\n        return priorityDiff;\n      }\n\n      // If the warnings guards have the same priority, the one that\n      // was added last wins.\n      return orderOfAddition.get(b).intValue() -\n          orderOfAddition.get(a).intValue();\n    }\n",
        "begin_line": 60,
        "end_line": 71,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.addGuard#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  void addGuard(WarningsGuard guard) {\n    if (guard instanceof ComposeWarningsGuard) {\n      ComposeWarningsGuard composeGuard = (ComposeWarningsGuard) guard;\n      if (composeGuard.demoteErrors) {\n        this.demoteErrors = composeGuard.demoteErrors;\n      }\n\n      // Reverse the guards, so that they have the same order in the result.\n      addGuards(Lists.newArrayList(composeGuard.guards.descendingSet()));\n    } else {\n      numberOfAdds++;\n      orderOfAddition.put(guard, numberOfAdds);\n      guards.remove(guard);\n      guards.add(guard);\n    }\n  }\n",
        "begin_line": 86,
        "end_line": 101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.addGuards#103",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.addGuards(java.lang.Iterable<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  private void addGuards(Iterable<WarningsGuard> guards) {\n    for (WarningsGuard guard : guards) {\n      addGuard(guard);\n    }\n  }\n",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.isOn#2265",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.TracerMode.isOn()",
        "snippet": "    boolean isOn() {\n      return this != OFF;\n    }\n",
        "begin_line": 2265,
        "end_line": 2267,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.enables#1187",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.enables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean enables(DiagnosticGroup type) {\n    return warningsGuard.enables(type);\n  }\n",
        "begin_line": 1187,
        "end_line": 1189,
        "comment": "\n   * Whether the warnings guard in this Options object enables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.disables#1195",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disables(com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  boolean disables(DiagnosticGroup type) {\n    return warningsGuard.disables(type);\n  }\n",
        "begin_line": 1195,
        "end_line": 1197,
        "comment": "\n   * Whether the warnings guard in this Options object disables the given\n   * group of warnings.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getWarningsGuard#1206",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getWarningsGuard()",
        "snippet": "  WarningsGuard getWarningsGuard() {\n    return warningsGuard;\n  }\n",
        "begin_line": 1206,
        "end_line": 1208,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.shouldColorizeErrorOutput#1423",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shouldColorizeErrorOutput()",
        "snippet": "  public boolean shouldColorizeErrorOutput() {\n    return colorizeErrorOutput;\n  }\n",
        "begin_line": 1423,
        "end_line": 1425,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.getLanguageIn#1573",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.getLanguageIn()",
        "snippet": "  public LanguageMode getLanguageIn() {\n    return languageIn;\n  }\n",
        "begin_line": 1573,
        "end_line": 1575,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#65",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, boolean isExtern) {\n    this(ast, ast.getInputId(), isExtern);\n  }\n",
        "begin_line": 65,
        "end_line": 67,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceAst, com.google.javascript.rhino.InputId, boolean)",
        "snippet": "  public CompilerInput(SourceAst ast, InputId inputId, boolean isExtern) {\n    this.ast = ast;\n    this.id = inputId;\n\n    // TODO(nicksantos): Add a precondition check here. People are passing\n    // in null, but they should not be.\n    if (ast != null && ast.getSourceFile() != null) {\n      ast.getSourceFile().setIsExtern(isExtern);\n    }\n  }\n",
        "begin_line": 73,
        "end_line": 82,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#84",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile)",
        "snippet": "  public CompilerInput(SourceFile file) {\n    this(file, false);\n  }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.CompilerInput#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.CompilerInput(com.google.javascript.jscomp.SourceFile, boolean)",
        "snippet": "  public CompilerInput(SourceFile file, boolean isExtern) {\n    this(new JsAst(file), isExtern);\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getInputId#93",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getInputId()",
        "snippet": "  @Override\n  public InputId getInputId() {\n    return id;\n  }\n",
        "begin_line": 93,
        "end_line": 96,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getName#99",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getName()",
        "snippet": "  @Override\n  public String getName() {\n    return id.getIdName();\n  }\n",
        "begin_line": 99,
        "end_line": 102,
        "comment": " Returns a name for this input. Must be unique across all inputs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.getAstRoot#115",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.getAstRoot(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  @Override\n  public Node getAstRoot(AbstractCompiler compiler) {\n    Node root = ast.getAstRoot(compiler);\n    // The root maybe null if the AST can not be created.\n    if (root != null) {\n      Preconditions.checkState(root.isScript());\n      Preconditions.checkNotNull(root.getInputId());\n    }\n    return root;\n  }\n",
        "begin_line": 115,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.setCompiler#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setCompiler(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public void setCompiler(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": " Sets an abstract compiler for doing parsing. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerInput.setModule#325",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "signature": "com.google.javascript.jscomp.CompilerInput.setModule(com.google.javascript.jscomp.JSModule)",
        "snippet": "  public void setModule(JSModule module) {\n    // An input may only belong to one module.\n    Preconditions.checkArgument(\n        module == null || this.module == null || this.module == module);\n    this.module = module;\n  }\n",
        "begin_line": 325,
        "end_line": 330,
        "comment": " Sets the module to which the input belongs. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.runInCompilerThread#677",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.runInCompilerThread(java.util.concurrent.Callable<T>)",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  <T> T runInCompilerThread(final Callable<T> callable) {\n    T result = null;\n    final Throwable[] exception = new Throwable[1];\n\n    Preconditions.checkState(\n        compilerThread == null || compilerThread == Thread.currentThread(),\n        \"Please do not share the Compiler across threads\");\n\n    // If the compiler thread is available, use it.\n    if (useThreads && compilerThread == null) {\n      try {\n        final boolean dumpTraceReport =\n            options != null && options.tracer.isOn();\n        Callable<T> bootCompilerThread = new Callable<T>() {\n          @Override\n          public T call() {\n            try {\n              compilerThread = Thread.currentThread();\n              if (dumpTraceReport) {\n                Tracer.initCurrentThreadTrace();\n              }\n              return callable.call();\n            } catch (Throwable e) {\n              exception[0] = e;\n            } finally {\n              compilerThread = null;\n              if (dumpTraceReport) {\n                Tracer.logCurrentThreadTrace();\n                tracker.outputTracerReport(outStream == null ?\n                    System.out : outStream);\n              }\n              Tracer.clearCurrentThreadTrace();\n            }\n            return null;\n          }\n        };\n\n        Future<T> future = compilerExecutor.submit(bootCompilerThread);\n        if (timeout > 0) {\n          result = future.get(timeout, TimeUnit.SECONDS);\n        } else {\n          result = future.get();\n        }\n      } catch (InterruptedException e) {\n        throw Throwables.propagate(e);\n      } catch (ExecutionException e) {\n        throw Throwables.propagate(e);\n      } catch (TimeoutException e) {\n        throw Throwables.propagate(e);\n      }\n    } else {\n      try {\n        result = callable.call();\n      } catch (Exception e) {\n        exception[0] = e;\n      } finally {\n        Tracer.clearCurrentThreadTrace();\n      }\n    }\n\n    // Pass on any exception caught by the runnable object.\n    if (exception[0] != null) {\n      throw new RuntimeException(exception[0]);\n    }\n\n    return result;\n  }\n",
        "begin_line": 677,
        "end_line": 744,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.call#692",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-d2f23957-9bcf-4906-9f85-825822e38d4e.call()",
        "snippet": "          @Override\n          public T call() {\n            try {\n              compilerThread = Thread.currentThread();\n              if (dumpTraceReport) {\n                Tracer.initCurrentThreadTrace();\n              }\n              return callable.call();\n            } catch (Throwable e) {\n              exception[0] = e;\n            } finally {\n              compilerThread = null;\n              if (dumpTraceReport) {\n                Tracer.logCurrentThreadTrace();\n                tracker.outputTracerReport(outStream == null ?\n                    System.out : outStream);\n              }\n              Tracer.clearCurrentThreadTrace();\n            }\n            return null;\n          }\n",
        "begin_line": 692,
        "end_line": 712,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.compile#651",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.compile()",
        "snippet": "  private Result compile() {\n    return runInCompilerThread(new Callable<Result>() {\n      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n    });\n  }\n",
        "begin_line": 651,
        "end_line": 659,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.call#653",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-84514c73-3bcb-4943-9ae2-29884cc294ca.call()",
        "snippet": "      @Override\n      public Result call() throws Exception {\n        compileInternal();\n        return getResult();\n      }\n",
        "begin_line": 653,
        "end_line": 657,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.acceptEcmaScript5#2091",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptEcmaScript5()",
        "snippet": "  @Override\n  public boolean acceptEcmaScript5() {\n    switch (options.getLanguageIn()) {\n      case ECMASCRIPT5:\n      case ECMASCRIPT5_STRICT:\n        return true;\n      case ECMASCRIPT3:\n        return false;\n    }\n    throw new IllegalStateException(\"unexpected language mode\");\n  }\n",
        "begin_line": 2091,
        "end_line": 2101,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.newThread#212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Anonymous-15a70976-e200-42ca-9018-5257d5db783a.newThread(java.lang.Runnable)",
        "snippet": "    @Override public Thread newThread(Runnable r) {\n      return new Thread(null, r, \"jscompiler\", COMPILER_STACK_SIZE);\n    }\n",
        "begin_line": 212,
        "end_line": 214,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setErrorManager#269",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setErrorManager(com.google.javascript.jscomp.ErrorManager)",
        "snippet": "  public void setErrorManager(ErrorManager errorManager) {\n    Preconditions.checkNotNull(\n        errorManager, \"the error manager cannot be null\");\n    this.errorManager = errorManager;\n  }\n",
        "begin_line": 269,
        "end_line": 273,
        "comment": "\n   * Sets the error manager.\n   *\n   * @param errorManager the error manager, it cannot be {@code null}\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.createMessageFormatter#279",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createMessageFormatter()",
        "snippet": "  private MessageFormatter createMessageFormatter() {\n    boolean colorize = options.shouldColorizeErrorOutput();\n    return options.errorFormat.toFormatter(this, colorize);\n  }\n",
        "begin_line": 279,
        "end_line": 282,
        "comment": "\n   * Creates a message formatter instance corresponding to the value of\n   * {@link CompilerOptions}.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initOptions#288",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(\n            new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer =\n            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    reconcileOptionsWithGuards();\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }\n",
        "begin_line": 288,
        "end_line": 312,
        "comment": "\n   * Initialize the compiler options. Only necessary if you're not doing\n   * a normal compile() job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.init#373",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.init(java.util.List<T1>, java.util.List<T2>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T1 extends SourceFile, T2 extends SourceFile> void init(\n      List<T1> externs,\n      List<T2> inputs,\n      CompilerOptions options) {\n    JSModule module = new JSModule(SINGLETON_MODULE_NAME);\n    for (SourceFile input : inputs) {\n      module.add(input);\n    }\n\n    initModules(externs, Lists.newArrayList(module), options);\n  }\n",
        "begin_line": 373,
        "end_line": 383,
        "comment": "\n   * Initializes the instance state needed for a compile job.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initModules#401",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initModules(java.util.List<T>, java.util.List<com.google.javascript.jscomp.JSModule>, com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  public <T extends SourceFile> void initModules(\n      List<T> externs, List<JSModule> modules, CompilerOptions options) {\n    initOptions(options);\n\n    checkFirstModule(modules);\n    fillEmptyModules(modules);\n\n    this.externs = makeCompilerInput(externs, true);\n\n    // Generate the module graph, and report any errors in the module\n    // specification as errors.\n    this.modules = modules;\n    if (modules.size() > 1) {\n      try {\n        this.moduleGraph = new JSModuleGraph(modules);\n      } catch (JSModuleGraph.ModuleDependenceException e) {\n        // problems with the module format.  Report as an error.  The\n        // message gives all details.\n        report(JSError.make(MODULE_DEPENDENCY_ERROR,\n                e.getModule().getName(), e.getDependentModule().getName()));\n        return;\n      }\n    } else {\n      this.moduleGraph = null;\n    }\n\n    this.inputs = getAllInputsFromModules(modules);\n    initBasedOnOptions();\n\n    initInputsByIdMap();\n  }\n",
        "begin_line": 401,
        "end_line": 431,
        "comment": "\n   * Initializes the instance state needed for a compile job if the sources\n   * are in modules.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initBasedOnOptions#436",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initBasedOnOptions()",
        "snippet": "  private void initBasedOnOptions() {\n    // Create the source map if necessary.\n    if (options.sourceMapOutputPath != null) {\n      sourceMap = options.sourceMapFormat.getInstance();\n      sourceMap.setPrefixMappings(options.sourceMapLocationMappings);\n    }\n  }\n",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n   * Do any initialization that is dependent on the compiler options.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.makeCompilerInput#444",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.makeCompilerInput(java.util.List<T>, boolean)",
        "snippet": "  private <T extends SourceFile> List<CompilerInput> makeCompilerInput(\n      List<T> files, boolean isExtern) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    for (T file : files) {\n      inputs.add(new CompilerInput(file, isExtern));\n    }\n    return inputs;\n  }\n",
        "begin_line": 444,
        "end_line": 451,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.checkFirstModule#465",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private void checkFirstModule(List<JSModule> modules) {\n    if (modules.isEmpty()) {\n      report(JSError.make(EMPTY_MODULE_LIST_ERROR));\n    } else if (modules.get(0).getInputs().isEmpty() && modules.size() > 1) {\n      // The root module may only be empty if there is exactly 1 module.\n      report(JSError.make(EMPTY_ROOT_MODULE_ERROR,\n          modules.get(0).getName()));\n    }\n  }\n",
        "begin_line": 465,
        "end_line": 473,
        "comment": "\n   * Verifies that at least one module has been provided and that the first one\n   * has at least one source code input.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.fillEmptyModules#487",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static void fillEmptyModules(List<JSModule> modules) {\n    for (JSModule module : modules) {\n      if (module.getInputs().isEmpty()) {\n        module.add(SourceFile.fromCode(\n            createFillFileName(module.getName()), \"\"));\n      }\n    }\n  }\n",
        "begin_line": 487,
        "end_line": 494,
        "comment": "\n   * Fill any empty modules with a place holder file. It makes any cross module\n   * motion easier.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getAllInputsFromModules#510",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule>)",
        "snippet": "  private static List<CompilerInput> getAllInputsFromModules(\n      List<JSModule> modules) {\n    List<CompilerInput> inputs = Lists.newArrayList();\n    Map<String, JSModule> inputMap = Maps.newHashMap();\n    for (JSModule module : modules) {\n      for (CompilerInput input : module.getInputs()) {\n        String inputName = input.getName();\n\n        // NOTE(nicksantos): If an input is in more than one module,\n        // it will show up twice in the inputs list, and then we\n        // will get an error down the line.\n        inputs.add(input);\n        inputMap.put(inputName, module);\n      }\n    }\n    return inputs;\n  }\n",
        "begin_line": 510,
        "end_line": 526,
        "comment": "\n   * Builds a single list of all module inputs. Verifies that it contains no\n   * duplicates.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.initInputsByIdMap#538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.initInputsByIdMap()",
        "snippet": "  void initInputsByIdMap() {\n    inputsById = new HashMap<InputId, CompilerInput>();\n    for (CompilerInput input : externs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_EXTERN_INPUT, input.getName()));\n      }\n    }\n    for (CompilerInput input : inputs) {\n      InputId id = input.getInputId();\n      CompilerInput previous = putCompilerInput(id, input);\n      if (previous != null) {\n        report(JSError.make(DUPLICATE_INPUT, input.getName()));\n      }\n    }\n  }\n",
        "begin_line": 538,
        "end_line": 554,
        "comment": "\n   * Creates a map to make looking up an input by name fast. Also checks for\n   * duplicate inputs.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.parse#788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.parse()",
        "snippet": "  public void parse() {\n    parseInputs();\n  }\n",
        "begin_line": 788,
        "end_line": 790,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getPassConfig#792",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getPassConfig()",
        "snippet": "  PassConfig getPassConfig() {\n    if (passes == null) {\n      passes = createPassConfigInternal();\n    }\n    return passes;\n  }\n",
        "begin_line": 792,
        "end_line": 797,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.createPassConfigInternal#803",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.createPassConfigInternal()",
        "snippet": "  PassConfig createPassConfigInternal() {\n    return new DefaultPassConfig(options);\n  }\n",
        "begin_line": 803,
        "end_line": 805,
        "comment": "\n   * Create the passes object. Clients should use setPassConfig instead of\n   * overriding this.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.newTracer#984",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.newTracer(java.lang.String)",
        "snippet": "  Tracer newTracer(String passName) {\n    String comment = passName\n        + (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n    if (options.tracer.isOn()) {\n      tracker.recordPassStart(passName, true);\n    }\n    return new Tracer(\"Compiler\", comment);\n  }\n",
        "begin_line": 984,
        "end_line": 991,
        "comment": "\n   * Returns a new tracer for the given pass name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.stopTracer#993",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.stopTracer(com.google.javascript.jscomp.Tracer, java.lang.String)",
        "snippet": "  void stopTracer(Tracer t, String passName) {\n    long result = t.stop();\n    if (options.tracer.isOn()) {\n      tracker.recordPassStop(passName, result);\n    }\n  }\n",
        "begin_line": 993,
        "end_line": 998,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getResult#1003",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getResult()",
        "snippet": "  public Result getResult() {\n    PassConfig.State state = getPassConfig().getIntermediateState();\n    return new Result(getErrors(), getWarnings(), debugLog.toString(),\n        state.variableMap, state.propertyMap,\n        state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n        sourceMap, externExports, state.cssNames, state.idGeneratorMap);\n  }\n",
        "begin_line": 1003,
        "end_line": 1009,
        "comment": "\n   * Returns the result of the compilation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrors#1021",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrors()",
        "snippet": "  public JSError[] getErrors() {\n    return errorManager.getErrors();\n  }\n",
        "begin_line": 1021,
        "end_line": 1023,
        "comment": "\n   * Returns the array of errors (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getWarnings#1028",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getWarnings()",
        "snippet": "  public JSError[] getWarnings() {\n    return errorManager.getWarnings();\n  }\n",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "\n   * Returns the array of warnings (never null).\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.putCompilerInput#1118",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.putCompilerInput(com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput)",
        "snippet": "  private CompilerInput putCompilerInput(InputId id, CompilerInput input) {\n    input.setCompiler(this);\n    return inputsById.put(id, input);\n  }\n",
        "begin_line": 1118,
        "end_line": 1121,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getDefaultErrorReporter#1643",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDefaultErrorReporter()",
        "snippet": "  @Override\n  ErrorReporter getDefaultErrorReporter() {\n    return defaultErrorReporter;\n  }\n",
        "begin_line": 1643,
        "end_line": 1646,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.prepareAst#1994",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.prepareAst(com.google.javascript.rhino.Node)",
        "snippet": "  @Override\n  void prepareAst(Node root) {\n    CompilerPass pass = new PrepareAst(this);\n    pass.process(null, root);\n  }\n",
        "begin_line": 1994,
        "end_line": 1998,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.isIdeMode#2086",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.isIdeMode()",
        "snippet": "  @Override\n  public boolean isIdeMode() {\n    return options.ideMode;\n  }\n",
        "begin_line": 2086,
        "end_line": 2089,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.acceptConstKeyword#2107",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.acceptConstKeyword()",
        "snippet": "  @Override\n  public boolean acceptConstKeyword() {\n    return options.acceptConstKeyword;\n  }\n",
        "begin_line": 2107,
        "end_line": 2110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrorCount#2201",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorCount()",
        "snippet": "  public int getErrorCount() {\n    return errorManager.getErrorCount();\n  }\n",
        "begin_line": 2201,
        "end_line": 2203,
        "comment": "\n   * Gets the number of errors.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hasHaltingErrors#2212",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasHaltingErrors()",
        "snippet": "  @Override\n  boolean hasHaltingErrors() {\n    return !isIdeMode() && getErrorCount() > 0;\n  }\n",
        "begin_line": 2212,
        "end_line": 2215,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.hasErrors#2226",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.hasErrors()",
        "snippet": "  public boolean hasErrors() {\n    return hasHaltingErrors();\n  }\n",
        "begin_line": 2226,
        "end_line": 2228,
        "comment": "\n   * Consults the {@link ErrorManager} to see if we've encountered errors\n   * that should halt compilation. <p>\n   *\n   * If {@link CompilerOptions#ideMode} is {@code true}, this function\n   * always returns {@code false} without consulting the error manager. The\n   * error manager will continue to be told about new errors and warnings, but\n   * the compiler will complete compilation of all inputs.<p>\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getErrorManager#2334",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getErrorManager()",
        "snippet": "  @Override\n  public ErrorManager getErrorManager() {\n    if (options == null) {\n      initOptions(newCompilerOptions());\n    }\n    return errorManager;\n  }\n",
        "begin_line": 2334,
        "end_line": 2340,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setProgress#2480",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setProgress(double, java.lang.String)",
        "snippet": "  @Override\n  void setProgress(double newProgress, String passName) {\n    this.lastPassName = passName;\n    if (newProgress > 1.0) {\n      progress = 1.0;\n    } else {\n      progress = newProgress;\n    }\n  }\n",
        "begin_line": 2480,
        "end_line": 2488,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setOldParseTree#2631",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setOldParseTree(java.lang.String, com.google.javascript.rhino.head.ast.AstRoot)",
        "snippet": "  @Override\n  public void setOldParseTree(String sourceName, AstRoot oldAst) {\n  }\n",
        "begin_line": 2631,
        "end_line": 2633,
        "comment": "\n   * {@inheritDoc}\n   ",
        "resolved_comments": {
            "com.google.javascript.jscomp.AbstractCompiler": "\n    * Stores the \"new\" Rhino parse tree for a given source file.\n    * @param sourceName The source file name.\n    * @param astRoot The \"new\" Rhino parse tree.\n    "
        },
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CheckLevel.isOn#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CheckLevel.java",
        "class_name": "com.google.javascript.jscomp.CheckLevel",
        "signature": "com.google.javascript.jscomp.CheckLevel.isOn()",
        "snippet": "  boolean isOn() {\n    return this != OFF;\n  }\n",
        "begin_line": 29,
        "end_line": 31,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getErrorCount#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrorCount()",
        "snippet": "  @Override\n  public int getErrorCount() {\n    return errorCount;\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarningCount#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarningCount()",
        "snippet": "  @Override\n  public int getWarningCount() {\n    return warningCount;\n  }\n",
        "begin_line": 78,
        "end_line": 81,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getErrors#83",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getErrors()",
        "snippet": "  @Override\n  public JSError[] getErrors() {\n    return toArray(CheckLevel.ERROR);\n  }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "BasicErrorManager.getWarnings#88",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.getWarnings()",
        "snippet": "  @Override\n  public JSError[] getWarnings() {\n    return toArray(CheckLevel.WARNING);\n  }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.AbstractMessageFormatter#31",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.AbstractMessageFormatter(com.google.javascript.jscomp.SourceExcerptProvider)",
        "snippet": "  public AbstractMessageFormatter(SourceExcerptProvider source) {\n    this.source = source;\n  }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractMessageFormatter.setColorize#35",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.setColorize(boolean)",
        "snippet": "  public void setColorize(boolean colorize) {\n    this.colorize = colorize;\n  }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.enableTestMode#153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.enableTestMode(com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>>, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.SourceFile>>, com.google.common.base.Supplier<java.util.List<com.google.javascript.jscomp.JSModule>>, com.google.common.base.Function<java.lang.Integer, java.lang.Boolean>)",
        "snippet": "  @VisibleForTesting\n  void enableTestMode(\n      Supplier<List<SourceFile>> externsSupplier,\n      Supplier<List<SourceFile>> inputsSupplier,\n      Supplier<List<JSModule>> modulesSupplier,\n      Function<Integer, Boolean> exitCodeReceiver) {\n    Preconditions.checkArgument(\n        inputsSupplier == null ^ modulesSupplier == null);\n    testMode = true;\n    this.externsSupplierForTesting = externsSupplier;\n    this.inputsSupplierForTesting = inputsSupplier;\n    this.modulesSupplierForTesting = modulesSupplier;\n    this.exitCodeReceiverForTesting = exitCodeReceiver;\n  }\n",
        "begin_line": 153,
        "end_line": 166,
        "comment": "\n   * Put the command line runner into test mode. In test mode,\n   * all outputs will be blackholed.\n   * @param externsSupplier A provider for externs.\n   * @param inputsSupplier A provider for source inputs.\n   * @param modulesSupplier A provider for modules. Only one of inputsSupplier\n   *     and modulesSupplier may be non-null.\n   * @param exitCodeReceiver A receiver for the status code that would\n   *     have been passed to System.exit in non-test mode.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.getCompiler#359",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getCompiler()",
        "snippet": "  protected final A getCompiler() {\n    return compiler;\n  }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.run#367",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.run()",
        "snippet": "  public final void run() {\n    int result = 0;\n    int runs = 1;\n    try {\n      for (int i = 0; i < runs && result == 0; i++) {\n        result = doRun();\n      }\n    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n      System.err.println(e.getMessage());\n      result = -1;\n    } catch (Throwable t) {\n      t.printStackTrace();\n      result = -2;\n    }\n\n    if (testMode) {\n      exitCodeReceiverForTesting.apply(result);\n    } else {\n      System.exit(result);\n    }\n  }\n",
        "begin_line": 367,
        "end_line": 387,
        "comment": "\n   * Runs the Compiler and calls System.exit() with the exit status of the\n   * compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0945
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setTrustedStrings#787",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setTrustedStrings(boolean)",
        "snippet": "  public void setTrustedStrings(boolean yes) {\n    trustedStrings = yes;\n  }\n",
        "begin_line": 787,
        "end_line": 789,
        "comment": "\n   * Some people want to put arbitrary user input into strings, which are then\n   * run through the compiler. These scripts are then put into HTML.\n   * By default, we assume strings are untrusted. If the compiler is run\n   * from the command-line, we assume that strings are trusted.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setSummaryDetailLevel#1520",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setSummaryDetailLevel(int)",
        "snippet": "  public void setSummaryDetailLevel(int summaryDetailLevel) {\n    this.summaryDetailLevel = summaryDetailLevel;\n  }\n",
        "begin_line": 1520,
        "end_line": 1522,
        "comment": "\n   * Controls how detailed the compilation summary is. Values:\n   *  0 (never print summary), 1 (print summary only if there are\n   * errors or warnings), 2 (print summary if type checking is on,\n   * see --check_types), 3 (always print summary). The default level\n   * is 1\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setLanguageIn#1568",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setLanguageIn(com.google.javascript.jscomp.CompilerOptions.LanguageMode)",
        "snippet": "  public void setLanguageIn(LanguageMode languageIn) {\n    this.languageIn = languageIn;\n    this.languageOut = languageIn;\n  }\n",
        "begin_line": 1568,
        "end_line": 1571,
        "comment": "\n   * Sets ECMAScript version to use.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.shouldRunCompiler#984",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.shouldRunCompiler()",
        "snippet": "  public boolean shouldRunCompiler() {\n    return this.isConfigValid;\n  }\n",
        "begin_line": 984,
        "end_line": 986,
        "comment": "\n   * @return Whether the configuration is valid.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setRunOptions#248",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.setRunOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected void setRunOptions(CompilerOptions options)\n      throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups = getDiagnosticGroups();\n\n    if (config.warningGuards != null) {\n      for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n        diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n      }\n    }\n\n    if (!config.warningsWhitelistFile.isEmpty()) {\n      options.addWarningsGuard(\n          WhitelistWarningsGuard.fromFile(\n              new File(config.warningsWhitelistFile)));\n    }\n\n    createDefineOrTweakReplacements(config.define, options, false);\n\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n\n    DependencyOptions depOptions = createDependencyOptions(\n        config.manageClosureDependencies,\n        config.onlyClosureDependencies,\n        config.processCommonJSModules,\n        config.closureEntryPoints);\n    if (depOptions != null) {\n      options.setDependencyOptions(depOptions);\n    }\n\n    options.devMode = config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    options.setTrustedStrings(true);\n\n    legacyOutputCharset = options.outputCharset = getLegacyOutputCharset();\n    outputCharset2 = getOutputCharset2();\n    inputCharset = getInputCharset();\n\n    if (config.jsOutputFile.length() > 0) {\n      if (config.skipNormalOutputs) {\n        throw new FlagUsageException(\"skip_normal_outputs and js_output_file\"\n            + \" cannot be used together.\");\n      }\n    }\n\n    if (config.skipNormalOutputs && config.printAst) {\n      throw new FlagUsageException(\"skip_normal_outputs and print_ast cannot\"\n          + \" be used together.\");\n    }\n\n    if (config.skipNormalOutputs && config.printTree) {\n      throw new FlagUsageException(\"skip_normal_outputs and print_tree cannot\"\n          + \" be used together.\");\n    }\n\n    if (config.createSourceMap.length() > 0) {\n      options.sourceMapOutputPath = config.createSourceMap;\n    }\n    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n    options.sourceMapFormat = config.sourceMapFormat;\n\n    if (!config.variableMapInputFile.equals(\"\")) {\n      options.inputVariableMap =\n          VariableMap.load(config.variableMapInputFile);\n    }\n\n    if (!config.propertyMapInputFile.equals(\"\")) {\n      options.inputPropertyMap =\n          VariableMap.load(config.propertyMapInputFile);\n    }\n\n    if (config.languageIn.length() > 0) {\n      CompilerOptions.LanguageMode languageMode =\n          CompilerOptions.LanguageMode.fromString(config.languageIn);\n      if (languageMode != null) {\n        options.setLanguageIn(languageMode);\n      } else {\n        throw new FlagUsageException(\"Unknown language `\" + config.languageIn +\n                                     \"' specified.\");\n      }\n    }\n\n    if (!config.outputManifests.isEmpty()) {\n      Set<String> uniqueNames = Sets.newHashSet();\n      for (String filename : config.outputManifests) {\n        if (!uniqueNames.add(filename)) {\n          throw new FlagUsageException(\"output_manifest flags specify \" +\n              \"duplicate file names: \" + filename);\n        }\n      }\n    }\n\n    if (!config.outputBundles.isEmpty()) {\n      Set<String> uniqueNames = Sets.newHashSet();\n      for (String filename : config.outputBundles) {\n        if (!uniqueNames.add(filename)) {\n          throw new FlagUsageException(\"output_bundle flags specify \" +\n              \"duplicate file names: \" + filename);\n        }\n      }\n    }\n\n    options.acceptConstKeyword = config.acceptConstKeyword;\n    options.transformAMDToCJSModules = config.transformAMDToCJSModules;\n    options.processCommonJSModules = config.processCommonJSModules;\n    options.commonJSModulePathPrefix = config.commonJSModulePathPrefix;\n    options.angularPass = config.angularPass;\n    options.tracer = config.tracerMode;\n  }\n",
        "begin_line": 248,
        "end_line": 357,
        "comment": "\n   * Sets options based on the configurations set flags API.\n   * Called during the run() run() method.\n   * If you want to ignore the flags API, or interpret flags your own way,\n   * then you should override this method.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.getInputCharset#959",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getInputCharset()",
        "snippet": "  private Charset getInputCharset() throws FlagUsageException {\n    if (!config.charset.isEmpty()) {\n      if (!Charset.isSupported(config.charset)) {\n        throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");\n      }\n      return Charset.forName(config.charset);\n    }\n    return Charsets.UTF_8;\n  }\n",
        "begin_line": 959,
        "end_line": 968,
        "comment": "\n   * Query the flag for the input charset, and return a Charset object\n   * representing the selection.\n   *\n   * @return Charset to use when reading inputs\n   * @throws FlagUsageException if flag is not a valid Charset name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.getLegacyOutputCharset#982",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getLegacyOutputCharset()",
        "snippet": "  private String getLegacyOutputCharset() throws FlagUsageException {\n    if (!config.charset.isEmpty()) {\n      if (!Charset.isSupported(config.charset)) {\n        throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");\n      }\n      return config.charset;\n    }\n    return \"US-ASCII\";\n  }\n",
        "begin_line": 982,
        "end_line": 991,
        "comment": "\n   * Query the flag for the output charset.\n   *\n   * Let the outputCharset be the same as the input charset... except if\n   * we're reading in UTF-8 by default.  By tradition, we've always\n   * output ASCII to avoid various hiccups with different browsers,\n   * proxies and firewalls.\n   *\n   * @return Name of the charset to use when writing outputs. Guaranteed to\n   *    be a supported charset.\n   * @throws FlagUsageException if flag is not a valid Charset name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.getOutputCharset2#997",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getOutputCharset2()",
        "snippet": "  private Charset getOutputCharset2() throws FlagUsageException {\n    if (!config.charset.isEmpty()) {\n      if (!Charset.isSupported(config.charset)) {\n        throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");\n      }\n      return Charset.forName(config.charset);\n    }\n    return Charsets.UTF_8;\n  }\n",
        "begin_line": 997,
        "end_line": 1006,
        "comment": "\n   * Query the flag for the output charset. Defaults to UTF-8.\n   * @throws FlagUsageException if flag is not a valid Charset name.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0941
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectType.createDelegateSuffix#237",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix(java.lang.String)",
        "snippet": "  public static String createDelegateSuffix(String suffix) {\n    return \"(\" + suffix + \")\";\n  }\n",
        "begin_line": 237,
        "end_line": 239,
        "comment": "\n   * Creates a suffix for a proxy delegate.\n   * @see #getNormalizedReferenceName\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleErrorReporter.getMessage0#108",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.getMessage0(java.lang.String)",
        "snippet": "    public static String getMessage0(String messageId) {\n      return getMessage(messageId, null);\n    }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleErrorReporter.getMessage#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/rhino/SimpleErrorReporter.java",
        "class_name": "com.google.javascript.rhino.SimpleErrorReporter",
        "signature": "com.google.javascript.rhino.SimpleErrorReporter.getMessage(java.lang.String, java.lang.Object[])",
        "snippet": "    static String getMessage(String messageId, Object[] arguments) {\n      final String defaultResource\n          = \"rhino_ast.java.com.google.javascript.rhino.Messages\";\n\n      Locale locale = Locale.getDefault();\n\n      // ResourceBundle does caching.\n      ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);\n\n      String formatString;\n      try {\n          formatString = rb.getString(messageId);\n      } catch (java.util.MissingResourceException mre) {\n          throw new RuntimeException\n              (\"no message resource found for message property \" + messageId);\n      }\n\n      /*\n       * It's OK to format the string, even if 'arguments' is null;\n       * we need to format it anyway, to make double ''s collapse to\n       * single 's.\n       */\n      MessageFormat formatter = new MessageFormat(formatString);\n      return formatter.format(arguments);\n    }\n",
        "begin_line": 117,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.Priority#57",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.Priority.Priority(int)",
        "snippet": "    Priority(int value) {\n      this.value = value;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "WarningsGuard.getPriority#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "signature": "com.google.javascript.jscomp.WarningsGuard.getPriority()",
        "snippet": "  protected int getPriority() {\n    return Priority.DEFAULT.value;\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n   * The priority in which warnings guards are applied. Lower means the\n   * guard will be applied sooner. Expressed on a scale of 1 to 100.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.OldRhinoErrorReporter#174",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.OldRhinoErrorReporter.OldRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private OldRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.NewRhinoErrorReporter#194",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.NewRhinoErrorReporter.NewRhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "    private NewRhinoErrorReporter(AbstractCompiler compiler) {\n      super(compiler);\n    }\n",
        "begin_line": 194,
        "end_line": 196,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.replacePlaceHolders#80",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.replacePlaceHolders(java.lang.String)",
        "snippet": "  private Pattern replacePlaceHolders(String s) {\n    s = Pattern.quote(s);\n    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n  }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\n   * For each message such as \"Not a good use of {0}\", replace the place\n   * holder {0} with a wild card that matches all possible strings.\n   * Also put the any non-place-holder in quotes for regex matching later.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.RhinoErrorReporter#85",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.RhinoErrorReporter(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  private RhinoErrorReporter(AbstractCompiler compiler) {\n    this.compiler = compiler;\n    typeMap = ImmutableMap.<Pattern, DiagnosticType>builder()\n        // Trailing comma\n        .put(replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime.getMessage0(\n                \"msg.extra.trailing.comma\")),\n            TRAILING_COMMA)\n\n        // Duplicate parameter\n        .put(replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime.getMessage0(\n                \"msg.dup.parms\")),\n            DUPLICATE_PARAM)\n\n        // Unknown @annotations.\n        .put(replacePlaceHolders(\n            SimpleErrorReporter.getMessage0(\"msg.bad.jsdoc.tag\")),\n            BAD_JSDOC_ANNOTATION)\n\n        // Unexpected @type annotations\n        .put(Pattern.compile(\"^Type annotations are not allowed here.*\"),\n            MISPLACED_TYPE_ANNOTATION)\n\n        // Unexpected @type annotations\n        .put(Pattern.compile(\"^Keywords and reserved words\" +\n            \" are not allowed as unquoted property.*\"),\n            INVALID_ES3_PROP_NAME)\n\n        // Type annotation errors.\n        .put(Pattern.compile(\"^Bad type annotation.*\"),\n            TYPE_PARSE_ERROR)\n\n        // Parse tree too deep.\n        .put(replacePlaceHolders(\n            com.google.javascript.rhino.head.ScriptRuntime.getMessage0(\n                \"msg.too.deep.parser.recursion\")),\n            PARSE_TREE_TOO_DEEP)\n        .build();\n  }\n",
        "begin_line": 85,
        "end_line": 124,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.forNewRhino#126",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static com.google.javascript.rhino.head.ErrorReporter\n      forNewRhino(AbstractCompiler compiler) {\n    return new NewRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "RhinoErrorReporter.forOldRhino#131",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(com.google.javascript.jscomp.AbstractCompiler)",
        "snippet": "  public static ErrorReporter forOldRhino(AbstractCompiler compiler) {\n    return new OldRhinoErrorReporter(compiler);\n  }\n",
        "begin_line": 131,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#123",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String)",
        "snippet": "    TweakFunction(String name) {\n      this(name, null, Token.ERROR, Token.ERROR, null);\n    }\n",
        "begin_line": 123,
        "end_line": 125,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#127",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA) {\n      this(name, expectedTypeName, validNodeTypeA, Token.ERROR, null);\n    }\n",
        "begin_line": 127,
        "end_line": 130,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#132",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB) {\n      this(name, expectedTypeName, validNodeTypeA, validNodeTypeB, null);\n    }\n",
        "begin_line": 132,
        "end_line": 135,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, TweakFunction registerFunction) {\n      this(name, null, Token.ERROR, Token.ERROR, registerFunction);\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.TweakFunction#141",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.TweakFunction(java.lang.String, java.lang.String, int, int, com.google.javascript.jscomp.ProcessTweaks.TweakFunction)",
        "snippet": "    TweakFunction(String name, String expectedTypeName,\n        int validNodeTypeA, int validNodeTypeB,\n        TweakFunction registerFunction) {\n      this.name = name;\n      this.expectedTypeName = expectedTypeName;\n      this.validNodeTypeA = validNodeTypeA;\n      this.validNodeTypeB = validNodeTypeB;\n      this.registerFunction = registerFunction;\n    }\n",
        "begin_line": 141,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ProcessTweaks.getName#164",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TweakFunction.getName()",
        "snippet": "    String getName() {\n      return name;\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "PassFactory.PassFactory#37",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "signature": "com.google.javascript.jscomp.PassFactory.PassFactory(java.lang.String, boolean)",
        "snippet": "  protected PassFactory(String name, boolean isOneTimePass) {\n    this.name = name;\n    this.isOneTimePass = isOneTimePass;\n  }\n",
        "begin_line": 37,
        "end_line": 40,
        "comment": "\n   * @param name The name of the pass that this factory creates.\n   * @param isOneTimePass If true, the pass produced by this factory can\n   *     only be run once.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.warning#62",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.warning(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType warning(String name, String descriptionFormat) {\n    return make(name, CheckLevel.WARNING, descriptionFormat);\n  }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.WARNING\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.disabled#73",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.disabled(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType disabled(String name,\n      String descriptionFormat) {\n    return make(name, CheckLevel.OFF, descriptionFormat);\n  }\n",
        "begin_line": 73,
        "end_line": 76,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.OFF\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.equals#111",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.equals(java.lang.Object)",
        "snippet": "  @Override\n  public boolean equals(Object type) {\n    return type instanceof DiagnosticType &&\n        ((DiagnosticType) type).key.equals(key);\n  }\n",
        "begin_line": 111,
        "end_line": 115,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.hashCode#117",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.hashCode()",
        "snippet": "  @Override\n  public int hashCode() {\n    return key.hashCode();\n  }\n",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.DiagnosticGroups#33",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DiagnosticGroups()",
        "snippet": "  public DiagnosticGroups() {}\n",
        "begin_line": 33,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerDeprecatedGroup#38",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerDeprecatedGroup(java.lang.String)",
        "snippet": "  static DiagnosticGroup registerDeprecatedGroup(String name) {\n    return registerGroup(name, new DiagnosticGroup(name, UNUSED));\n  }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerGroup#42",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup group) {\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerGroup#48",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticType ... types) {\n    DiagnosticGroup group = new DiagnosticGroup(name, types);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroups.registerGroup#55",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.registerGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  static DiagnosticGroup registerGroup(String name,\n      DiagnosticGroup ... groups) {\n    DiagnosticGroup group = new DiagnosticGroup(name, groups);\n    groupsByName.put(name, group);\n    return group;\n  }\n",
        "begin_line": 55,
        "end_line": 60,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard#29",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public DiagnosticGroupWarningsGuard(\n      DiagnosticGroup group, CheckLevel level) {\n    this.group = group;\n    this.level = level;\n  }\n",
        "begin_line": 29,
        "end_line": 33,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#45",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  DiagnosticGroup(String name, DiagnosticType ...types) {\n    this.name = name;\n    this.types = ImmutableSet.copyOf(Arrays.asList(types));\n  }\n",
        "begin_line": 45,
        "end_line": 48,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(com.google.javascript.jscomp.DiagnosticType...)",
        "snippet": "  public DiagnosticGroup(DiagnosticType ...types) {\n    this(null, types);\n  }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\n   * Create a group that matches all errors of the given types.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticGroup.DiagnosticGroup#87",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.DiagnosticGroup(java.lang.String, com.google.javascript.jscomp.DiagnosticGroup...)",
        "snippet": "  public DiagnosticGroup(String name, DiagnosticGroup ...groups) {\n    Set<DiagnosticType> set = Sets.newHashSet();\n\n    for (DiagnosticGroup group : groups) {\n      set.addAll(group.types);\n    }\n\n    this.name = name;\n    this.types = ImmutableSet.copyOf(set);\n  }\n",
        "begin_line": 87,
        "end_line": 96,
        "comment": "\n   * Create a composite group.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.GuardComparator#56",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.GuardComparator.GuardComparator(java.util.Map<com.google.javascript.jscomp.WarningsGuard, java.lang.Integer>)",
        "snippet": "    private GuardComparator(Map<WarningsGuard, Integer> orderOfAddition) {\n      this.orderOfAddition = orderOfAddition;\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#78",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(java.util.List<com.google.javascript.jscomp.WarningsGuard>)",
        "snippet": "  public ComposeWarningsGuard(List<WarningsGuard> guards) {\n    addGuards(guards);\n  }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ComposeWarningsGuard.ComposeWarningsGuard#82",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.ComposeWarningsGuard(com.google.javascript.jscomp.WarningsGuard...)",
        "snippet": "  public ComposeWarningsGuard(WarningsGuard... guards) {\n    this(Lists.newArrayList(guards));\n  }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.CompilerOptions#907",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.CompilerOptions()",
        "snippet": "  public CompilerOptions() {\n    // Accepted language\n    languageIn = LanguageMode.ECMASCRIPT3;\n\n    // Language variation\n    acceptConstKeyword = false;\n\n    // Checks\n    skipAllPasses = false;\n    nameAnonymousFunctionsOnly = false;\n    devMode = DevMode.OFF;\n    checkDeterminism = false;\n    checkSymbols = false;\n    aggressiveVarCheck = CheckLevel.OFF;\n    checkSuspiciousCode = false;\n    checkControlStructures = false;\n    checkTypes = false;\n    tightenTypes = false;\n    reportMissingOverride = CheckLevel.OFF;\n    checkRequires = CheckLevel.OFF;\n    checkProvides = CheckLevel.OFF;\n    checkGlobalNamesLevel = CheckLevel.OFF;\n    brokenClosureRequiresLevel = CheckLevel.ERROR;\n    checkGlobalThisLevel = CheckLevel.OFF;\n    checkUnreachableCode = CheckLevel.OFF;\n    checkMissingReturn = CheckLevel.OFF;\n    checkMissingGetCssNameLevel = CheckLevel.OFF;\n    checkMissingGetCssNameBlacklist = null;\n    checkCaja = false;\n    computeFunctionSideEffects = false;\n    chainCalls = false;\n    extraAnnotationNames = null;\n    checkEventfulObjectDisposalPolicy = CheckEventfulObjectDisposal.DisposalCheckingPolicy.OFF;\n\n    // Optimizations\n    aggressiveRenaming = false;\n    alternateRenaming = false;\n    foldConstants = false;\n    coalesceVariableNames = false;\n    deadAssignmentElimination = false;\n    inlineConstantVars = false;\n    inlineFunctions = false;\n    inlineLocalFunctions = false;\n    assumeStrictThis = false;\n    assumeClosuresOnlyCaptureReferences = false;\n    inlineProperties = false;\n    crossModuleCodeMotion = false;\n    crossModuleMethodMotion = false;\n    inlineGetters = false;\n    inlineVariables = false;\n    inlineLocalVariables = false;\n    smartNameRemoval = false;\n    extraSmartNameRemoval = false;\n    removeDeadCode = false;\n    extractPrototypeMemberDeclarations = false;\n    removeUnusedPrototypeProperties = false;\n    removeUnusedPrototypePropertiesInExterns = false;\n    removeUnusedClassProperties = false;\n    removeUnusedVars = false;\n    removeUnusedLocalVars = false;\n    aliasExternals = false;\n    collapseVariableDeclarations = false;\n    groupVariableDeclarations = false;\n    collapseAnonymousFunctions = false;\n    aliasableStrings = Collections.emptySet();\n    aliasStringsBlacklist = \"\";\n    aliasAllStrings = false;\n    outputJsStringUsage = false;\n    convertToDottedProperties = false;\n    rewriteFunctionExpressions = false;\n    optimizeParameters = false;\n    optimizeReturns = false;\n\n    // Renaming\n    variableRenaming = VariableRenamingPolicy.OFF;\n    propertyRenaming = PropertyRenamingPolicy.OFF;\n    propertyAffinity = false;\n    labelRenaming = false;\n    generatePseudoNames = false;\n    shadowVariables = false;\n    renamePrefix = null;\n    aliasKeywords = false;\n    collapseProperties = false;\n    collapsePropertiesOnExternTypes = false;\n    collapseObjectLiterals = false;\n    devirtualizePrototypeMethods = false;\n    disambiguateProperties = false;\n    ambiguateProperties = false;\n    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;\n    exportTestFunctions = false;\n\n    // Alterations\n    runtimeTypeCheck = false;\n    runtimeTypeCheckLogFunction = null;\n    ignoreCajaProperties = false;\n    syntheticBlockStartMarker = null;\n    syntheticBlockEndMarker = null;\n    locale = null;\n    markAsCompiled = false;\n    removeTryCatchFinally = false;\n    closurePass = false;\n    preserveGoogRequires = false;\n    jqueryPass = false;\n    angularPass = false;\n    removeAbstractMethods = true;\n    removeClosureAsserts = false;\n    stripTypes = Collections.emptySet();\n    stripNameSuffixes = Collections.emptySet();\n    stripNamePrefixes = Collections.emptySet();\n    stripTypePrefixes = Collections.emptySet();\n    customPasses = null;\n    markNoSideEffectCalls = false;\n    defineReplacements = Maps.newHashMap();\n    tweakProcessing = TweakProcessing.OFF;\n    tweakReplacements = Maps.newHashMap();\n    moveFunctionDeclarations = false;\n    appNameStr = \"\";\n    recordFunctionInformation = false;\n    generateExports = false;\n    exportLocalPropertyDefinitions = false;\n    cssRenamingMap = null;\n    cssRenamingWhitelist = null;\n    processObjectPropertyString = false;\n    idGenerators = ImmutableMap.of();\n    replaceStringsFunctionDescriptions = Collections.emptyList();\n    replaceStringsPlaceholderToken = \"\";\n    replaceStringsReservedStrings = Collections.emptySet();\n    propertyInvalidationErrors = Maps.newHashMap();\n\n    // Instrumentation\n    instrumentationTemplate = null;  // instrument functions\n    instrumentMemoryAllocations = false; // instrument allocations\n    instrumentForCoverage = false;  // instrument lines\n\n    // Output\n    printInputDelimiter = false;\n    prettyPrint = false;\n    lineBreak = false;\n    preferLineBreakAtEndOfFile = false;\n    reportPath = null;\n    tracer = TracerMode.OFF;\n    colorizeErrorOutput = false;\n    errorFormat = ErrorFormat.SINGLELINE;\n    debugFunctionSideEffectsPath = null;\n    externExports = false;\n    nameReferenceReportPath = null;\n    nameReferenceGraphPath = null;\n\n    // Debugging\n    aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n    errorHandler = null;\n  }\n",
        "begin_line": 907,
        "end_line": 1058,
        "comment": "\n   * Initializes compiler options. All options are disabled by default.\n   *\n   * Command-line frontends to the compiler should set these properties\n   * like a builder.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setWarningLevel#1202",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {\n    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));\n  }\n",
        "begin_line": 1202,
        "end_line": 1204,
        "comment": "\n   * Configure the given type of warning to the given level.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.addWarningsGuard#1228",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.addWarningsGuard(com.google.javascript.jscomp.WarningsGuard)",
        "snippet": "  public void addWarningsGuard(WarningsGuard guard) {\n    warningsGuard.addGuard(guard);\n  }\n",
        "begin_line": 1228,
        "end_line": 1230,
        "comment": "\n   * Add a guard to the set of warnings guards.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setCodingConvention#1468",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public void setCodingConvention(CodingConvention codingConvention) {\n    this.codingConvention = codingConvention;\n  }\n",
        "begin_line": 1468,
        "end_line": 1470,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setExtraAnnotationNames#1532",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setExtraAnnotationNames(java.lang.Iterable<java.lang.String>)",
        "snippet": "  public void setExtraAnnotationNames(Iterable<String> extraAnnotationNames) {\n    this.extraAnnotationNames = ImmutableSet.copyOf(extraAnnotationNames);\n  }\n",
        "begin_line": 1532,
        "end_line": 1534,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilerOptions.setTweakProcessing#1557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "signature": "com.google.javascript.jscomp.CompilerOptions.setTweakProcessing(com.google.javascript.jscomp.CompilerOptions.TweakProcessing)",
        "snippet": "  public void setTweakProcessing(TweakProcessing tweakProcessing) {\n    this.tweakProcessing = tweakProcessing;\n  }\n",
        "begin_line": 1557,
        "end_line": 1559,
        "comment": "\n   * Sets how goog.tweak calls are processed.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.Compiler#251",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.Compiler(java.io.PrintStream)",
        "snippet": "  public Compiler(PrintStream stream) {\n    addChangeHandler(recentChange);\n    outStream = stream;\n  }\n",
        "begin_line": 251,
        "end_line": 254,
        "comment": "\n   * Creates a Compiler that reports errors and warnings to an output stream.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.addChangeHandler#2020",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler)",
        "snippet": "  @Override\n  void addChangeHandler(CodeChangeHandler handler) {\n    codeChangeHandlers.add(handler);\n  }\n",
        "begin_line": 2020,
        "end_line": 2023,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.getDiagnosticGroups#2153",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    return new DiagnosticGroups();\n  }\n",
        "begin_line": 2153,
        "end_line": 2155,
        "comment": "\n   * The warning classes that are available from the command-line, and\n   * are suppressible by the {@code @suppress} annotation.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "Compiler.setLoggingLevel#2319",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "class_name": "com.google.javascript.jscomp.Compiler",
        "signature": "com.google.javascript.jscomp.Compiler.setLoggingLevel(java.util.logging.Level)",
        "snippet": "  public static void setLoggingLevel(Level level) {\n    logger.setLevel(level);\n  }\n",
        "begin_line": 2319,
        "end_line": 2321,
        "comment": "\n   * Sets the logging level for the com.google.javascript.jscomp package.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.getJsFiles#463",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.getJsFiles()",
        "snippet": "    List<String> getJsFiles() {\n      List<String> allJsInputs = Lists.newArrayListWithCapacity(\n          js.size() + arguments.size());\n      allJsInputs.addAll(js);\n      allJsInputs.addAll(arguments);\n      return allJsInputs;\n    }\n",
        "begin_line": 463,
        "end_line": 469,
        "comment": "\n     * Users may specify JS inputs via the legacy {@code --js} option, as well\n     * as via additional arguments to the Closure Compiler. For example, it is\n     * convenient to leverage the additional arguments feature when using the\n     * Closure Compiler in combination with {@code find} and {@code xargs}:\n     * <pre>\n     * find MY_JS_SRC_DIR -name '*.js' \\\n     *     | xargs java -jar compiler.jar --manage_closure_dependencies\n     * </pre>\n     * The {@code find} command will produce a list of '*.js' source files in\n     * the {@code MY_JS_SRC_DIR} directory while {@code xargs} will convert them\n     * to a single, space-delimited set of arguments that are appended to the\n     * {@code java} command to run the Compiler.\n     * <p>\n     * Note that it is important to use the\n     * {@code --manage_closure_dependencies} option in this case because the\n     * order produced by {@code find} is unlikely to be sorted correctly with\n     * respect to {@code goog.provide()} and {@code goog.requires()}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.getWarningGuardSpec#579",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.getWarningGuardSpec()",
        "snippet": "    public static WarningGuardSpec getWarningGuardSpec() {\n      WarningGuardSpec spec = new WarningGuardSpec();\n      for (GuardLevel guardLevel : guardLevels) {\n        spec.add(guardLevel.level, guardLevel.name);\n      }\n      return spec;\n    }\n",
        "begin_line": 579,
        "end_line": 585,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.initConfigFromFlags#710",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.initConfigFromFlags(java.lang.String[], java.io.PrintStream)",
        "snippet": "  private void initConfigFromFlags(String[] args, PrintStream err) {\n\n    List<String> processedArgs = processArgs(args);\n\n    CmdLineParser parser = new CmdLineParser(flags);\n    Flags.guardLevels.clear();\n    isConfigValid = true;\n    try {\n      parser.parseArgument(processedArgs.toArray(new String[] {}));\n      // For contains --flagfile flag\n      if (!flags.flagFile.equals(\"\")) {\n        processFlagFile(err);\n      }\n    } catch (CmdLineException e) {\n      err.println(e.getMessage());\n      isConfigValid = false;\n    } catch (IOException ioErr) {\n      err.println(\"ERROR - \" + flags.flagFile + \" read error.\");\n      isConfigValid = false;\n    }\n\n    if (flags.version) {\n      err.println(\n          \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n          \"Version: \" + Compiler.getReleaseVersion() + \"\\n\" +\n          \"Built on: \" + Compiler.getReleaseDate());\n      err.flush();\n    }\n\n    if (flags.processCommonJsModules) {\n      flags.processClosurePrimitives = true;\n      flags.manageClosureDependencies = true;\n      if (flags.commonJsEntryModule == null) {\n        err.println(\"Please specify --common_js_entry_module.\");\n        err.flush();\n        isConfigValid = false;\n      }\n      flags.closureEntryPoint = Lists.newArrayList(\n          ProcessCommonJSModules.toModuleName(flags.commonJsEntryModule));\n    }\n\n    if (!isConfigValid || flags.displayHelp) {\n      isConfigValid = false;\n      parser.printUsage(err);\n    } else {\n      CodingConvention conv;\n      if (flags.thirdParty) {\n        conv = CodingConventions.getDefault();\n      } else if (flags.processJqueryPrimitives) {\n        conv = new JqueryCodingConvention();\n      } else {\n        conv = new ClosureCodingConvention();\n      }\n\n      getCommandLineConfig()\n          .setPrintTree(flags.printTree)\n          .setPrintAst(flags.printAst)\n          .setPrintPassGraph(flags.printPassGraph)\n          .setJscompDevMode(flags.jscompDevMode)\n          .setLoggingLevel(flags.loggingLevel)\n          .setExterns(flags.externs)\n          .setJs(flags.getJsFiles())\n          .setJsOutputFile(flags.jsOutputFile)\n          .setModule(flags.module)\n          .setVariableMapInputFile(flags.variableMapInputFile)\n          .setPropertyMapInputFile(flags.propertyMapInputFile)\n          .setVariableMapOutputFile(flags.variableMapOutputFile)\n          .setCreateNameMapFiles(flags.createNameMapFiles)\n          .setPropertyMapOutputFile(flags.propertyMapOutputFile)\n          .setCodingConvention(conv)\n          .setSummaryDetailLevel(flags.summaryDetailLevel)\n          .setOutputWrapper(flags.outputWrapper)\n          .setModuleWrapper(flags.moduleWrapper)\n          .setModuleOutputPathPrefix(flags.moduleOutputPathPrefix)\n          .setCreateSourceMap(flags.createSourceMap)\n          .setSourceMapFormat(flags.sourceMapFormat)\n          .setWarningGuardSpec(Flags.getWarningGuardSpec())\n          .setDefine(flags.define)\n          .setCharset(flags.charset)\n          .setManageClosureDependencies(flags.manageClosureDependencies)\n          .setOnlyClosureDependencies(flags.onlyClosureDependencies)\n          .setClosureEntryPoints(flags.closureEntryPoint)\n          .setOutputManifest(ImmutableList.of(flags.outputManifest))\n          .setOutputModuleDependencies(flags.outputModuleDependencies)\n          .setAcceptConstKeyword(flags.acceptConstKeyword)\n          .setLanguageIn(flags.languageIn)\n          .setProcessCommonJSModules(flags.processCommonJsModules)\n          .setCommonJSModulePathPrefix(flags.commonJsPathPrefix)\n          .setTransformAMDToCJSModules(flags.transformAmdModules)\n          .setWarningsWhitelistFile(flags.warningsWhitelistFile)\n          .setAngularPass(flags.angularPass)\n          .setTracerMode(flags.tracerMode);\n    }\n  }\n",
        "begin_line": 710,
        "end_line": 803,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.createCompiler#867",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.createCompiler()",
        "snippet": "  @Override\n  protected Compiler createCompiler() {\n    return new Compiler(getErrorPrintStream());\n  }\n",
        "begin_line": 867,
        "end_line": 870,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.createExterns#872",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.createExterns()",
        "snippet": "  @Override\n  protected List<SourceFile> createExterns() throws FlagUsageException,\n      IOException {\n    List<SourceFile> externs = super.createExterns();\n    if (flags.useOnlyCustomExterns || isInTestMode()) {\n      return externs;\n    } else {\n      List<SourceFile> defaultExterns = getDefaultExterns();\n      defaultExterns.addAll(externs);\n      return defaultExterns;\n    }\n  }\n",
        "begin_line": 872,
        "end_line": 883,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.Proxy#59",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.Proxy.Proxy(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    protected Proxy(CodingConvention convention) {\n      this.nextConvention = convention;\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.getIndirectlyDeclaredProperties#465",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.DefaultCodingConvention.getIndirectlyDeclaredProperties()",
        "snippet": "    @Override\n    public Collection<String> getIndirectlyDeclaredProperties() {\n      return ImmutableList.of();\n    }\n",
        "begin_line": 465,
        "end_line": 468,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#49",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention()",
        "snippet": "  public ClosureCodingConvention() {\n    this(CodingConventions.getDefault());\n  }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClosureCodingConvention.ClosureCodingConvention#53",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.ClosureCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "  public ClosureCodingConvention(CodingConvention wrapped) {\n    super(wrapped);\n\n    Set<String> props = Sets.newHashSet(\n        \"superClass_\",\n        \"instance_\",\n        \"getInstance\");\n    props.addAll(wrapped.getIndirectlyDeclaredProperties());\n    indirectlyDeclaredProperties = ImmutableSet.copyOf(props);\n  }\n",
        "begin_line": 53,
        "end_line": 62,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy#47",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.AnonymousFunctionNamingPolicy(char[])",
        "snippet": "  AnonymousFunctionNamingPolicy(char[] reservedCharacters) {\n    this.reservedCharacters = reservedCharacters;\n  }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setPrintTree#1538",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPrintTree(boolean)",
        "snippet": "    CommandLineConfig setPrintTree(boolean printTree) {\n      this.printTree = printTree;\n      return this;\n    }\n",
        "begin_line": 1538,
        "end_line": 1541,
        "comment": " Prints out the parse tree and exits ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setPrintAst#1549",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPrintAst(boolean)",
        "snippet": "    CommandLineConfig setPrintAst(boolean printAst) {\n      this.printAst = printAst;\n      return this;\n    }\n",
        "begin_line": 1549,
        "end_line": 1552,
        "comment": "\n     * Prints a dot file describing the internal abstract syntax tree\n     * and exits\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setPrintPassGraph#1557",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPrintPassGraph(boolean)",
        "snippet": "    CommandLineConfig setPrintPassGraph(boolean printPassGraph) {\n      this.printPassGraph = printPassGraph;\n      return this;\n    }\n",
        "begin_line": 1557,
        "end_line": 1560,
        "comment": " Prints a dot file describing the passes that will get run and exits ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setJscompDevMode#1565",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJscompDevMode(com.google.javascript.jscomp.CompilerOptions.DevMode)",
        "snippet": "    CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode) {\n      this.jscompDevMode = jscompDevMode;\n      return this;\n    }\n",
        "begin_line": 1565,
        "end_line": 1568,
        "comment": " Turns on extra sanity checks ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setLoggingLevel#1577",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setLoggingLevel(java.lang.String)",
        "snippet": "    CommandLineConfig setLoggingLevel(String loggingLevel) {\n      this.loggingLevel = loggingLevel;\n      return this;\n    }\n",
        "begin_line": 1577,
        "end_line": 1580,
        "comment": "\n     * The logging level (standard java.util.logging.Level\n     * values) for Compiler progress. Does not control errors or\n     * warnings for the JavaScript code under compilation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setExterns#1587",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setExterns(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setExterns(List<String> externs) {\n      this.externs.clear();\n      this.externs.addAll(externs);\n      return this;\n    }\n",
        "begin_line": 1587,
        "end_line": 1591,
        "comment": "\n     * The file containing JavaScript externs. You may specify multiple.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setJs#1598",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJs(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setJs(List<String> js) {\n      this.js.clear();\n      this.js.addAll(js);\n      return this;\n    }\n",
        "begin_line": 1598,
        "end_line": 1602,
        "comment": "\n     * The JavaScript filename. You may specify multiple.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setJsOutputFile#1609",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setJsOutputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setJsOutputFile(String jsOutputFile) {\n      this.jsOutputFile = jsOutputFile;\n      return this;\n    }\n",
        "begin_line": 1609,
        "end_line": 1612,
        "comment": "\n     * Primary output filename. If not specified, output is written to stdout\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setModule#1624",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setModule(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setModule(List<String> module) {\n      this.module.clear();\n      this.module.addAll(module);\n      return this;\n    }\n",
        "begin_line": 1624,
        "end_line": 1628,
        "comment": "\n     * A JavaScript module specification. The format is\n     * <name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be\n     * unique. Each dep is the name of a module that this module\n     * depends on. Modules must be listed in dependency order, and JS\n     * source files must be listed in the corresponding order. Where\n     * --module flags occur in relation to --js flags is unimportant\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setVariableMapInputFile#1636",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setVariableMapInputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setVariableMapInputFile(String variableMapInputFile) {\n      this.variableMapInputFile = variableMapInputFile;\n      return this;\n    }\n",
        "begin_line": 1636,
        "end_line": 1639,
        "comment": "\n     * File containing the serialized version of the variable renaming\n     * map produced by a previous compilation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setPropertyMapInputFile#1647",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPropertyMapInputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile) {\n      this.propertyMapInputFile = propertyMapInputFile;\n      return this;\n    }\n",
        "begin_line": 1647,
        "end_line": 1650,
        "comment": "\n     * File containing the serialized version of the property renaming\n     * map produced by a previous compilation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setVariableMapOutputFile#1658",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setVariableMapOutputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile) {\n      this.variableMapOutputFile = variableMapOutputFile;\n      return this;\n    }\n",
        "begin_line": 1658,
        "end_line": 1661,
        "comment": "\n     * File where the serialized version of the variable renaming map\n     * produced should be saved\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setCreateNameMapFiles#1672",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCreateNameMapFiles(boolean)",
        "snippet": "    CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {\n      this.createNameMapFiles = createNameMapFiles;\n      return this;\n    }\n",
        "begin_line": 1672,
        "end_line": 1675,
        "comment": "\n     * If true, variable renaming and property renaming map\n     * files will be produced as {binary name}_vars_map.out and\n     * {binary name}_props_map.out. Note that this flag cannot be used\n     * in conjunction with either variable_map_output_file or\n     * property_map_output_file\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setPropertyMapOutputFile#1683",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setPropertyMapOutputFile(java.lang.String)",
        "snippet": "    CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile) {\n      this.propertyMapOutputFile = propertyMapOutputFile;\n      return this;\n    }\n",
        "begin_line": 1683,
        "end_line": 1686,
        "comment": "\n     * File where the serialized version of the property renaming map\n     * produced should be saved\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setCodingConvention#1693",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCodingConvention(com.google.javascript.jscomp.CodingConvention)",
        "snippet": "    CommandLineConfig setCodingConvention(CodingConvention codingConvention) {\n      this.codingConvention = codingConvention;\n      return this;\n    }\n",
        "begin_line": 1693,
        "end_line": 1696,
        "comment": "\n     * Sets rules and conventions to enforce.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setSummaryDetailLevel#1707",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setSummaryDetailLevel(int)",
        "snippet": "    CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {\n      this.summaryDetailLevel = summaryDetailLevel;\n      return this;\n    }\n",
        "begin_line": 1707,
        "end_line": 1710,
        "comment": "\n     * Controls how detailed the compilation summary is. Values:\n     *  0 (never print summary), 1 (print summary only if there are\n     * errors or warnings), 2 (print summary if type checking is on,\n     * see --check_types), 3 (always print summary). The default level\n     * is 1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setOutputWrapper#1718",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setOutputWrapper(java.lang.String)",
        "snippet": "    CommandLineConfig setOutputWrapper(String outputWrapper) {\n      this.outputWrapper = outputWrapper;\n      return this;\n    }\n",
        "begin_line": 1718,
        "end_line": 1721,
        "comment": "\n     * Interpolate output into this string at the place denoted\n     * by the marker token %output%, or %output|jsstring%\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setModuleWrapper#1729",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setModuleWrapper(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setModuleWrapper(List<String> moduleWrapper) {\n      this.moduleWrapper.clear();\n      this.moduleWrapper.addAll(moduleWrapper);\n      return this;\n    }\n",
        "begin_line": 1729,
        "end_line": 1733,
        "comment": "\n     * An output wrapper for a JavaScript module (optional). See the flag\n     * description for formatting requirements.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setModuleOutputPathPrefix#1742",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setModuleOutputPathPrefix(java.lang.String)",
        "snippet": "    CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix) {\n      this.moduleOutputPathPrefix = moduleOutputPathPrefix;\n      return this;\n    }\n",
        "begin_line": 1742,
        "end_line": 1745,
        "comment": "\n     * Prefix for filenames of compiled JS modules.\n     * <module-name>.js will be appended to this prefix. Directories\n     * will be created as needed. Use with --module\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setCreateSourceMap#1756",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCreateSourceMap(java.lang.String)",
        "snippet": "    CommandLineConfig setCreateSourceMap(String createSourceMap) {\n      this.createSourceMap = createSourceMap;\n      return this;\n    }\n",
        "begin_line": 1756,
        "end_line": 1759,
        "comment": "\n     * If specified, a source map file mapping the generated\n     * source files back to the original source file will be\n     * output to the specified path. The %outname% placeholder will\n     * expand to the name of the output file that the source map\n     * corresponds to.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setSourceMapFormat#1778",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setSourceMapFormat(com.google.javascript.jscomp.SourceMap.Format)",
        "snippet": "    CommandLineConfig setSourceMapFormat(SourceMap.Format format) {\n      this.sourceMapFormat = format;\n      return this;\n    }\n",
        "begin_line": 1778,
        "end_line": 1781,
        "comment": "\n     * The detail supplied in the source map file, if generated.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setWarningGuardSpec#1788",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setWarningGuardSpec(com.google.javascript.jscomp.AbstractCommandLineRunner.WarningGuardSpec)",
        "snippet": "    CommandLineConfig setWarningGuardSpec(WarningGuardSpec spec) {\n      this.warningGuards = spec;\n      return this;\n    }\n",
        "begin_line": 1788,
        "end_line": 1791,
        "comment": "\n     * Add warning guards.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setDefine#1802",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setDefine(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setDefine(List<String> define) {\n      this.define.clear();\n      this.define.addAll(define);\n      return this;\n    }\n",
        "begin_line": 1802,
        "end_line": 1806,
        "comment": "\n     * Override the value of a variable annotated @define.\n     * The format is <name>[=<val>], where <name> is the name of a @define\n     * variable and <val> is a boolean, number, or a single-quoted string\n     * that contains no single quotes. If [=<val>] is omitted,\n     * the variable is marked true\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setCharset#1837",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCharset(java.lang.String)",
        "snippet": "    CommandLineConfig setCharset(String charset) {\n      this.charset = charset;\n      return this;\n    }\n",
        "begin_line": 1837,
        "end_line": 1840,
        "comment": "\n     * Input charset for all files.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setManageClosureDependencies#1848",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setManageClosureDependencies(boolean)",
        "snippet": "    CommandLineConfig setManageClosureDependencies(boolean newVal) {\n      this.manageClosureDependencies = newVal;\n      return this;\n    }\n",
        "begin_line": 1848,
        "end_line": 1851,
        "comment": "\n     * Sets whether to sort files by their goog.provide/require deps,\n     * and prune inputs that are not required.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setOnlyClosureDependencies#1860",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setOnlyClosureDependencies(boolean)",
        "snippet": "    CommandLineConfig setOnlyClosureDependencies(boolean newVal) {\n      this.onlyClosureDependencies = newVal;\n      return this;\n    }\n",
        "begin_line": 1860,
        "end_line": 1863,
        "comment": "\n     * Sets whether to sort files by their goog.provide/require deps,\n     * and prune inputs that are not required, and drop all non-closure\n     * files.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setClosureEntryPoints#1871",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setClosureEntryPoints(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setClosureEntryPoints(List<String> entryPoints) {\n      Preconditions.checkNotNull(entryPoints);\n      this.closureEntryPoints = entryPoints;\n      return this;\n    }\n",
        "begin_line": 1871,
        "end_line": 1875,
        "comment": "\n     * Set closure entry points, which makes the compiler only include\n     * those files and sort them in dependency order.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setOutputManifest#1883",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setOutputManifest(java.util.List<java.lang.String>)",
        "snippet": "    CommandLineConfig setOutputManifest(List<String> outputManifests) {\n      this.outputManifests = Lists.newArrayList();\n      for (String manifestName : outputManifests) {\n        if (!manifestName.isEmpty()) {\n          this.outputManifests.add(manifestName);\n        }\n      }\n      this.outputManifests = ImmutableList.copyOf(this.outputManifests);\n      return this;\n    }\n",
        "begin_line": 1883,
        "end_line": 1892,
        "comment": "\n     * Sets whether to print output manifest files.\n     * Filter out empty file names.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setOutputModuleDependencies#1900",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setOutputModuleDependencies(java.lang.String)",
        "snippet": "    CommandLineConfig setOutputModuleDependencies(String\n        outputModuleDependencies) {\n      this.outputModuleDependencies = outputModuleDependencies;\n      return this;\n    }\n",
        "begin_line": 1900,
        "end_line": 1904,
        "comment": "\n     * Sets whether a JSON file representing the dependencies between modules\n     * should be created.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setAcceptConstKeyword#1921",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setAcceptConstKeyword(boolean)",
        "snippet": "    CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n      this.acceptConstKeyword = acceptConstKeyword;\n      return this;\n    }\n",
        "begin_line": 1921,
        "end_line": 1924,
        "comment": "\n     * Sets whether to accept usage of 'const' keyword.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setLanguageIn#1932",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setLanguageIn(java.lang.String)",
        "snippet": "    CommandLineConfig setLanguageIn(String languageIn) {\n      this.languageIn = languageIn;\n      return this;\n    }\n",
        "begin_line": 1932,
        "end_line": 1935,
        "comment": "\n     * Sets whether to accept input files as ECMAScript5 compliant.\n     * Otherwise, input files are treated as ECMAScript3 compliant.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setTransformAMDToCJSModules#1963",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setTransformAMDToCJSModules(boolean)",
        "snippet": "    CommandLineConfig setTransformAMDToCJSModules(\n        boolean transformAMDToCJSModules) {\n      this.transformAMDToCJSModules = transformAMDToCJSModules;\n      return this;\n    }\n",
        "begin_line": 1963,
        "end_line": 1967,
        "comment": "\n     * Set whether to transform AMD to CommonJS modules.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setProcessCommonJSModules#1974",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setProcessCommonJSModules(boolean)",
        "snippet": "    CommandLineConfig setProcessCommonJSModules(\n        boolean processCommonJSModules) {\n      this.processCommonJSModules = processCommonJSModules;\n      return this;\n    }\n",
        "begin_line": 1974,
        "end_line": 1978,
        "comment": "\n     * Sets whether to process CommonJS modules.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setCommonJSModulePathPrefix#1987",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setCommonJSModulePathPrefix(java.lang.String)",
        "snippet": "    CommandLineConfig setCommonJSModulePathPrefix(\n        String commonJSModulePathPrefix) {\n      this.commonJSModulePathPrefix = commonJSModulePathPrefix;\n      return this;\n    }\n",
        "begin_line": 1987,
        "end_line": 1991,
        "comment": "\n     * Sets the CommonJS module path prefix.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setWarningsWhitelistFile#1998",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setWarningsWhitelistFile(java.lang.String)",
        "snippet": "    CommandLineConfig setWarningsWhitelistFile(String fileName) {\n      this.warningsWhitelistFile = fileName;\n      return this;\n    }\n",
        "begin_line": 1998,
        "end_line": 2001,
        "comment": "\n     * Sets a whitelist file that suppresses warnings.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setAngularPass#2008",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setAngularPass(boolean)",
        "snippet": "    CommandLineConfig setAngularPass(boolean angularPass) {\n      this.angularPass = angularPass;\n      return this;\n    }\n",
        "begin_line": 2008,
        "end_line": 2011,
        "comment": "\n     * Sets whether to process AngularJS-specific annotations.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.setTracerMode#2016",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig.setTracerMode(com.google.javascript.jscomp.CompilerOptions.TracerMode)",
        "snippet": "    CommandLineConfig setTracerMode(CompilerOptions.TracerMode tracerMode) {\n      this.tracerMode = tracerMode;\n      return this;\n    }\n",
        "begin_line": 2016,
        "end_line": 2019,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.isInTestMode#171",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.isInTestMode()",
        "snippet": "  protected boolean isInTestMode() {\n    return testMode;\n  }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\n   * Returns whether we're in test mode.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.getCommandLineConfig#178",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getCommandLineConfig()",
        "snippet": "  protected CommandLineConfig getCommandLineConfig() {\n    return config;\n  }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n   * Get the command line config, so that it can be initialized.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.getDiagnosticGroups#198",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getDiagnosticGroups()",
        "snippet": "  protected DiagnosticGroups getDiagnosticGroups() {\n    if (compiler == null) {\n      return new DiagnosticGroups();\n    }\n    return compiler.getDiagnosticGroups();\n  }\n",
        "begin_line": 198,
        "end_line": 203,
        "comment": "\n   * The warning classes that are available from the command-line.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.getErrorPrintStream#393",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.getErrorPrintStream()",
        "snippet": "  protected PrintStream getErrorPrintStream() {\n    return err;\n  }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "\n   * Returns the PrintStream for writing errors associated with this\n   * AbstractCommandLineRunner.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.createExterns#1008",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.createExterns()",
        "snippet": "  protected List<SourceFile> createExterns() throws FlagUsageException,\n      IOException {\n    return isInTestMode() ? externsSupplierForTesting.get() :\n        createExternInputs(config.externs);\n  }\n",
        "begin_line": 1008,
        "end_line": 1012,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.createDefineOrTweakReplacements#1281",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.createDefineOrTweakReplacements(java.util.List<java.lang.String>, com.google.javascript.jscomp.CompilerOptions, boolean)",
        "snippet": "  @VisibleForTesting\n  static void createDefineOrTweakReplacements(List<String> definitions,\n      CompilerOptions options, boolean tweaks) {\n    // Parse the definitions\n    for (String override : definitions) {\n      String[] assignment = override.split(\"=\", 2);\n      String defName = assignment[0];\n\n      if (defName.length() > 0) {\n        String defValue = assignment.length == 1 ? \"true\" : assignment[1];\n\n        boolean isTrue = defValue.equals(\"true\");\n        boolean isFalse = defValue.equals(\"false\");\n        if (isTrue || isFalse) {\n          if (tweaks) {\n            options.setTweakToBooleanLiteral(defName, isTrue);\n          } else {\n            options.setDefineToBooleanLiteral(defName, isTrue);\n          }\n          continue;\n        } else if (defValue.length() > 1\n            && ((defValue.charAt(0) == '\\'' &&\n                defValue.charAt(defValue.length() - 1) == '\\'')\n                || (defValue.charAt(0) == '\\\"' &&\n                    defValue.charAt(defValue.length() - 1) == '\\\"'))) {\n          // If the value starts and ends with a single quote,\n          // we assume that it's a string.\n          String maybeStringVal =\n              defValue.substring(1, defValue.length() - 1);\n          if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) {\n            if (tweaks) {\n              options.setTweakToStringLiteral(defName, maybeStringVal);\n            } else {\n              options.setDefineToStringLiteral(defName, maybeStringVal);\n            }\n            continue;\n          }\n        } else {\n          try {\n            double value = Double.parseDouble(defValue);\n            if (tweaks) {\n              options.setTweakToDoubleLiteral(defName, value);\n            } else {\n              options.setDefineToDoubleLiteral(defName, value);\n            }\n            continue;\n          } catch (NumberFormatException e) {\n            // do nothing, it will be caught at the end\n          }\n        }\n      }\n\n      if (tweaks) {\n        throw new RuntimeException(\n            \"--tweak flag syntax invalid: \" + override);\n      }\n      throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);\n    }\n  }\n",
        "begin_line": 1281,
        "end_line": 1340,
        "comment": "\n   * Create a map of constant names to constant values from a textual\n   * description of the map.\n   *\n   * @param definitions A list of overriding definitions for defines in\n   *     the form <name>[=<val>], where <val> is a number, boolean, or\n   *     single-quoted string without single quotes.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.Preloaded#421",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Preloaded.Preloaded(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    Preloaded(String fileName, String originalPath, String code) {\n      super(fileName);\n      super.setOriginalPath(originalPath);\n      super.setCode(code);\n    }\n",
        "begin_line": 421,
        "end_line": 425,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.Builder#368",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.Builder()",
        "snippet": "    public Builder() {}\n",
        "begin_line": 368,
        "end_line": 368,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.buildFromCode#390",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.Builder.buildFromCode(java.lang.String, java.lang.String)",
        "snippet": "    public SourceFile buildFromCode(String fileName, String code) {\n      return new Preloaded(fileName, originalPath, code);\n    }\n",
        "begin_line": 390,
        "end_line": 392,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.SourceFile#81",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.SourceFile(java.lang.String)",
        "snippet": "  public SourceFile(String fileName) {\n    if (fileName == null || fileName.isEmpty()) {\n      throw new IllegalArgumentException(\"a source must have a name\");\n    }\n    this.fileName = fileName;\n  }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\n   * Construct a new abstract source file.\n   *\n   * @param fileName The file name of the source file. It does not necessarily\n   *     need to correspond to a real path. But it should be unique. Will\n   *     appear in warning messages emitted by the compiler.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.setCode#147",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setCode(java.lang.String)",
        "snippet": "  private void setCode(String sourceCode) {\n    code = sourceCode;\n  }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.setOriginalPath#155",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.setOriginalPath(java.lang.String)",
        "snippet": "  public void setOriginalPath(String originalPath) {\n    this.originalPath = originalPath;\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.fromCode#322",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.fromCode(java.lang.String, java.lang.String)",
        "snippet": "  public static SourceFile fromCode(String fileName, String code) {\n    return builder().buildFromCode(fileName, code);\n  }\n",
        "begin_line": 322,
        "end_line": 324,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "SourceFile.builder#354",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "signature": "com.google.javascript.jscomp.SourceFile.builder()",
        "snippet": "  public static Builder builder() {\n    return new Builder();\n  }\n",
        "begin_line": 354,
        "end_line": 356,
        "comment": " Create a new builder for source files. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.error#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.error(java.lang.String, java.lang.String)",
        "snippet": "  public static DiagnosticType error(String name, String descriptionFormat) {\n    return make(name, CheckLevel.ERROR, descriptionFormat);\n  }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n   * Create a DiagnosticType at level CheckLevel.ERROR\n   *\n   * @param name An identifier\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.make#86",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.make(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.lang.String)",
        "snippet": "  public static DiagnosticType make(String name, CheckLevel level,\n                                    String descriptionFormat) {\n    return\n        new DiagnosticType(name, level, new MessageFormat(descriptionFormat));\n  }\n",
        "begin_line": 86,
        "end_line": 90,
        "comment": "\n   * Create a DiagnosticType at a given CheckLevel.\n   *\n   * @param name An identifier\n   * @param level Either CheckLevel.ERROR or CheckLevel.WARNING\n   * @param descriptionFormat A format string\n   * @return A new DiagnosticType\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "DiagnosticType.DiagnosticType#95",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "signature": "com.google.javascript.jscomp.DiagnosticType.DiagnosticType(java.lang.String, com.google.javascript.jscomp.CheckLevel, java.text.MessageFormat)",
        "snippet": "  private DiagnosticType(String key, CheckLevel level, MessageFormat format) {\n    this.key = key;\n    this.defaultLevel = level;\n    this.format = format;\n\n    this.level = this.defaultLevel;\n  }\n",
        "begin_line": 95,
        "end_line": 101,
        "comment": "\n   * Create a DiagnosticType. Private to force use of static factory methods.\n   ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompilationLevel.CompilationLevel#51",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CompilationLevel.java",
        "class_name": "com.google.javascript.jscomp.CompilationLevel",
        "signature": "com.google.javascript.jscomp.CompilationLevel.CompilationLevel()",
        "snippet": "  private CompilationLevel() {}\n",
        "begin_line": 51,
        "end_line": 51,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.WarningGuardWarningOptionHandler#530",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardWarningOptionHandler.WarningGuardWarningOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.String>)",
        "snippet": "      public WarningGuardWarningOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super String> setter) {\n        super(parser, option,\n            new WarningGuardSetter(setter, CheckLevel.WARNING));\n      }\n",
        "begin_line": 530,
        "end_line": 535,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.WarningGuardSetter#551",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardSetter.WarningGuardSetter(org.kohsuke.args4j.spi.Setter<? super java.lang.String>, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "      private WarningGuardSetter(\n          Setter<? super String> proxy, CheckLevel level) {\n        this.proxy = proxy;\n        this.level = level;\n      }\n",
        "begin_line": 551,
        "end_line": 555,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.WarningGuardOffOptionHandler#540",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardOffOptionHandler.WarningGuardOffOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.String>)",
        "snippet": "      public WarningGuardOffOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super String> setter) {\n        super(parser, option, new WarningGuardSetter(setter, CheckLevel.OFF));\n      }\n",
        "begin_line": 540,
        "end_line": 544,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.WarningGuardErrorOptionHandler#521",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.WarningGuardErrorOptionHandler.WarningGuardErrorOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.String>)",
        "snippet": "      public WarningGuardErrorOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super String> setter) {\n        super(parser, option, new WarningGuardSetter(setter, CheckLevel.ERROR));\n      }\n",
        "begin_line": 521,
        "end_line": 525,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.BooleanOptionHandler#479",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.Flags.BooleanOptionHandler.BooleanOptionHandler(org.kohsuke.args4j.CmdLineParser, org.kohsuke.args4j.OptionDef, org.kohsuke.args4j.spi.Setter<? super java.lang.Boolean>)",
        "snippet": "      public BooleanOptionHandler(\n          CmdLineParser parser, OptionDef option,\n          Setter<? super Boolean> setter) {\n        super(parser, option, setter);\n      }\n",
        "begin_line": 479,
        "end_line": 483,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CommandLineRunner.CommandLineRunner#628",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.CommandLineRunner(java.lang.String[], java.io.PrintStream, java.io.PrintStream)",
        "snippet": "  protected CommandLineRunner(String[] args, PrintStream out, PrintStream err) {\n    super(out, err);\n    initConfigFromFlags(args, err);\n  }\n",
        "begin_line": 628,
        "end_line": 631,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CodingConventions.getDefault#41",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/CodingConventions.java",
        "class_name": "com.google.javascript.jscomp.CodingConventions",
        "signature": "com.google.javascript.jscomp.CodingConventions.getDefault()",
        "snippet": "  public static CodingConvention getDefault() {\n    return new DefaultCodingConvention();\n  }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": " Gets the default coding convention. ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCommandLineRunner.AbstractCommandLineRunner#137",
        "is_bug": false,
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.AbstractCommandLineRunner(java.io.PrintStream, java.io.PrintStream)",
        "snippet": "  AbstractCommandLineRunner(PrintStream out, PrintStream err) {\n    this.config = new CommandLineConfig();\n    this.defaultJsOutput = Preconditions.checkNotNull(out);\n    this.err = Preconditions.checkNotNull(err);\n  }\n",
        "begin_line": 137,
        "end_line": 141,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    }
]