[
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    externs = DEFAULT_EXTERNS;\n    filenames = Maps.newHashMap();\n    lastCompiler = null;\n    lastArg = null;\n    outReader = new ByteArrayOutputStream();\n    errReader = new ByteArrayOutputStream();\n    useStringComparison = false;\n    useModules = ModulePattern.NONE;\n    args.clear();\n    exitCodes = Lists.newArrayList();\n  }\n",
        "begin_line": 110,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 18)",
            "(line 113,col 5)-(line 113,col 30)",
            "(line 114,col 5)-(line 114,col 34)",
            "(line 115,col 5)-(line 115,col 24)",
            "(line 116,col 5)-(line 116,col 19)",
            "(line 117,col 5)-(line 117,col 44)",
            "(line 118,col 5)-(line 118,col 44)",
            "(line 119,col 5)-(line 119,col 32)",
            "(line 120,col 5)-(line 120,col 36)",
            "(line 121,col 5)-(line 121,col 17)",
            "(line 122,col 5)-(line 122,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    super.tearDown();\n  }\n",
        "begin_line": 125,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 127,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testUnknownAnnotation()",
        "snippet": "  public void testUnknownAnnotation() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @unknownTag */ function f() {}\",\n         RhinoErrorReporter.BAD_JSDOC_ANNOTATION);\n\n    args.add(\"--extra_annotation_name=unknownTag\");\n    testSame(\"/** @unknownTag */ function f() {}\");\n  }\n",
        "begin_line": 130,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 40)",
            "(line 132,col 5)-(line 133,col 50)",
            "(line 135,col 5)-(line 135,col 51)",
            "(line 136,col 5)-(line 136,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering1()",
        "snippet": "  public void testWarningGuardOrdering1() {\n    args.add(\"--jscomp_error=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 140,col 5)-(line 140,col 42)",
            "(line 141,col 5)-(line 141,col 40)",
            "(line 142,col 5)-(line 142,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering2()",
        "snippet": "  public void testWarningGuardOrdering2() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 145,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 40)",
            "(line 147,col 5)-(line 147,col 42)",
            "(line 148,col 5)-(line 148,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering3()",
        "snippet": "  public void testWarningGuardOrdering3() {\n    args.add(\"--jscomp_warning=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 151,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 152,col 5)-(line 152,col 44)",
            "(line 153,col 5)-(line 153,col 40)",
            "(line 154,col 5)-(line 154,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering4()",
        "snippet": "  public void testWarningGuardOrdering4() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_warning=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 157,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 40)",
            "(line 159,col 5)-(line 159,col 44)",
            "(line 160,col 5)-(line 160,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSimpleModeLeavesUnusedParams()",
        "snippet": "  public void testSimpleModeLeavesUnusedParams() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    testSame(\"window.f = function(a) {};\");\n  }\n",
        "begin_line": 163,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 164,col 5)-(line 164,col 57)",
            "(line 165,col 5)-(line 165,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testAdvancedModeRemovesUnusedParams()",
        "snippet": "  public void testAdvancedModeRemovesUnusedParams() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"window.f = function(a) {};\", \"window.a = function() {};\");\n  }\n",
        "begin_line": 168,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 169,col 5)-(line 169,col 59)",
            "(line 170,col 5)-(line 170,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOffByDefault()",
        "snippet": "  public void testCheckGlobalThisOffByDefault() {\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithAdvancedMode()",
        "snippet": "  public void testCheckGlobalThisOnWithAdvancedMode() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 177,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 59)",
            "(line 179,col 5)-(line 179,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithErrorFlag()",
        "snippet": "  public void testCheckGlobalThisOnWithErrorFlag() {\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 182,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 183,col 5)-(line 183,col 42)",
            "(line 184,col 5)-(line 184,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 187,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 40)",
            "(line 189,col 5)-(line 189,col 40)",
            "(line 190,col 5)-(line 190,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {\n    test(\"function f(x) { return x; } f();\",\n         \"function f(a) { return a; } f();\");\n  }\n",
        "begin_line": 193,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 195,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testReflectedMethods()",
        "snippet": "  public void testReflectedMethods() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype.handle = function(x, y) { alert(y); };\" +\n        \"var x = goog.reflect.object(Foo, {handle: 1});\" +\n        \"for (var i in x) { x[i].call(x); }\" +\n        \"window['Foo'] = Foo;\",\n        \"function a() {}\" +\n        \"a.prototype.a = function(e, d) { alert(d); };\" +\n        \"var b = goog.c.b(a, {a: 1}),c;\" +\n        \"for (c in b) { b[c].call(b); }\" +\n        \"window.Foo = a;\");\n  }\n",
        "begin_line": 198,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 199,col 5)-(line 199,col 59)",
            "(line 200,col 5)-(line 211,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    // Verify local var \"val\" in method \"bar\" is not inlined over the \"inc\"\n    // method call (which has side-effects) but \"c\" is inlined (which can't be\n    // modified by the call).\n    test(\n        \"/** @constructor */ function F() { this.a = 0; }\" +\n        \"F.prototype.inc = function() { this.a++; return 10; };\" +\n        \"F.prototype.bar = function() { \" +\n        \"  var c = 3; var val = this.inc(); this.a += val + c;\" +\n        \"};\" +\n        \"window['f'] = new F();\" +\n        \"window['f']['inc'] = window['f'].inc;\" +\n        \"window['f']['bar'] = window['f'].bar;\" +\n        \"use(window['f'].a)\",\n        \"function a(){ this.a = 0; }\" +\n        \"a.prototype.b = function(){ this.a++; return 10; };\" +\n        \"a.prototype.c = function(){ var b=this.b(); this.a += b + 3; };\" +\n        \"window.f = new a;\" +\n        \"window.f.inc = window.f.b;\" +\n        \"window.f.bar = window.f.c;\" +\n        \"use(window.f.a);\");\n  }\n",
        "begin_line": 214,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 215,col 59)",
            "(line 219,col 5)-(line 235,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypedAdvanced()",
        "snippet": "  public void testTypedAdvanced() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--use_types_for_optimization\");\n    test(\n        \"/** @constructor */\\n\" +\n        \"function Foo() {}\\n\" +\n        \"Foo.prototype.handle1 = function(x, y) { alert(y); };\\n\" +\n        \"/** @constructor */\\n\" +\n        \"function Bar() {}\\n\" +\n        \"Bar.prototype.handle1 = function(x, y) {};\\n\" +\n        \"new Foo().handle1(1, 2);\\n\" +\n        \"new Bar().handle1(1, 2);\\n\",\n        \"alert(2)\");\n  }\n",
        "begin_line": 238,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 239,col 59)",
            "(line 240,col 5)-(line 240,col 45)",
            "(line 241,col 5)-(line 250,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 253,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 254,col 5)-(line 254,col 40)",
            "(line 255,col 5)-(line 255,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOffByDefault()",
        "snippet": "  public void testTypeParsingOffByDefault() {\n    testSame(\"/** @return {number */ function f(a) { return a; }\");\n  }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOnWithVerbose()",
        "snippet": "  public void testTypeParsingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n    test(\"/** @return {n} */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 262,
        "end_line": 268,
        "comment": "",
        "child_ranges": [
            "(line 263,col 5)-(line 263,col 40)",
            "(line 264,col 5)-(line 265,col 46)",
            "(line 266,col 5)-(line 267,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=checkTypes\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 270,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 271,col 5)-(line 271,col 40)",
            "(line 272,col 5)-(line 272,col 40)",
            "(line 273,col 5)-(line 273,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    args.add(\"--warning_level=DEFAULT\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    args.add(\"--jscomp_warning=checkTypes\");\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 276,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 40)",
            "(line 278,col 5)-(line 278,col 62)",
            "(line 280,col 5)-(line 280,col 44)",
            "(line 281,col 5)-(line 282,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 285,
        "end_line": 288,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 40)",
            "(line 287,col 5)-(line 287,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", VarCheck.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 290,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 291,col 5)-(line 291,col 40)",
            "(line 292,col 5)-(line 292,col 49)",
            "(line 293,col 5)-(line 293,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=undefinedVars\");\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 296,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 297,col 5)-(line 297,col 40)",
            "(line 298,col 5)-(line 298,col 43)",
            "(line 299,col 5)-(line 299,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForQuiet()",
        "snippet": "  public void testCheckSymbolsOverrideForQuiet() {\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--jscomp_error=undefinedVars\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 302,
        "end_line": 306,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 303,col 38)",
            "(line 304,col 5)-(line 304,col 45)",
            "(line 305,col 5)-(line 305,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties1()",
        "snippet": "  public void testCheckUndefinedProperties1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_error=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 308,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 40)",
            "(line 310,col 5)-(line 310,col 49)",
            "(line 311,col 5)-(line 311,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties2()",
        "snippet": "  public void testCheckUndefinedProperties2() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 314,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 40)",
            "(line 316,col 5)-(line 316,col 47)",
            "(line 317,col 5)-(line 317,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties3()",
        "snippet": "  public void testCheckUndefinedProperties3() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() {var x = {}; var y = x.bar;}\",\n        TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 320,
        "end_line": 324,
        "comment": "",
        "child_ranges": [
            "(line 321,col 5)-(line 321,col 40)",
            "(line 322,col 5)-(line 323,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function f(a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 326,
        "end_line": 329,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 68)",
            "(line 328,col 5)-(line 328,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    args.add(\"--define=FOO\");\n    args.add(\"--define=\\\"BAR=5\\\"\");\n    args.add(\"--D\"); args.add(\"CCC\");\n    args.add(\"-D\"); args.add(\"DDD\");\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\" +\n         \"/** @define {boolean} */ var CCC = false;\" +\n         \"/** @define {boolean} */ var DDD = false;\",\n         \"var FOO = !0, BAR = 5, CCC = !0, DDD = !0;\");\n  }\n",
        "begin_line": 331,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 332,col 5)-(line 332,col 29)",
            "(line 333,col 5)-(line 333,col 35)",
            "(line 334,col 5)-(line 334,col 20)",
            "(line 334,col 22)-(line 334,col 37)",
            "(line 335,col 5)-(line 335,col 19)",
            "(line 335,col 21)-(line 335,col 36)",
            "(line 336,col 5)-(line 340,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag2()",
        "snippet": "  public void testDefineFlag2() {\n    args.add(\"--define=FOO='x\\\"'\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x\\\\\\\"\\\";\");\n  }\n",
        "begin_line": 343,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 344,col 5)-(line 344,col 35)",
            "(line 345,col 5)-(line 346,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3()",
        "snippet": "  public void testDefineFlag3() {\n    args.add(\"--define=FOO=\\\"x'\\\"\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x'\\\";\");\n  }\n",
        "begin_line": 349,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 36)",
            "(line 351,col 5)-(line 352,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 356,col 5)-(line 356,col 30)",
            "(line 357,col 5)-(line 357,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 360,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 361,col 60)",
            "(line 362,col 5)-(line 363,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"/** @const \\n * @const */ var x;\",\n         RhinoErrorReporter.PARSE_ERROR);\n    args.add(\"--warning_level=QUIET\");\n    testSame(\"/** @const \\n * @const */ var x;\");\n  }\n",
        "begin_line": 366,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 367,col 40)",
            "(line 368,col 5)-(line 369,col 41)",
            "(line 370,col 5)-(line 370,col 38)",
            "(line 371,col 5)-(line 371,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessClosurePrimitives()",
        "snippet": "  public void testProcessClosurePrimitives() {\n    test(\"var goog = {}; goog.provide('goog.dom');\",\n         \"var goog = {dom:{}};\");\n    args.add(\"--process_closure_primitives=false\");\n    testSame(\"var goog = {}; goog.provide('goog.dom');\");\n  }\n",
        "begin_line": 374,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 375,col 5)-(line 376,col 33)",
            "(line 377,col 5)-(line 377,col 51)",
            "(line 378,col 5)-(line 378,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGetMsgWiring()",
        "snippet": "  public void testGetMsgWiring() throws Exception {\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\",\n         \"var goog={getMsg:function(a){return a}}, \" +\n         \"MSG_FOO=goog.getMsg('foo');\");\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"var goog = {}; goog.getMsg = function(x) { return x; };\" +\n         \"/** @desc A real foo. */ var MSG_FOO = goog.getMsg('foo');\" +\n         \"window['foo'] = MSG_FOO;\",\n         \"window.foo = 'foo';\");\n  }\n",
        "begin_line": 381,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 382,col 5)-(line 385,col 40)",
            "(line 386,col 5)-(line 386,col 59)",
            "(line 387,col 5)-(line 390,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGetMsgWiringNoWarnings()",
        "snippet": "  public void testGetMsgWiringNoWarnings() throws Exception {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"/** @desc A bad foo. */ var MSG_FOO = 1;\", \"\");\n  }\n",
        "begin_line": 393,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 59)",
            "(line 395,col 5)-(line 395,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCssNameWiring()",
        "snippet": "  public void testCssNameWiring() throws Exception {\n    test(\"var goog = {}; goog.getCssName = function() {};\" +\n         \"goog.setCssNameMapping = function() {};\" +\n         \"goog.setCssNameMapping({'goog': 'a', 'button': 'b'});\" +\n         \"var a = goog.getCssName('goog-button');\" +\n         \"var b = goog.getCssName('css-button');\" +\n         \"var c = goog.getCssName('goog-menu');\" +\n         \"var d = goog.getCssName('css-menu');\",\n         \"var goog = { getCssName: function() {},\" +\n         \"             setCssNameMapping: function() {} },\" +\n         \"    a = 'a-b',\" +\n         \"    b = 'css-b',\" +\n         \"    c = 'a-menu',\" +\n         \"    d = 'css-menu';\");\n  }\n",
        "begin_line": 398,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 411,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70a()",
        "snippet": "  public void testIssue70a() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70b()",
        "snippet": "  public void testIssue70b() {\n    test(\"function foo([]) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 422,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 423,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    useStringComparison = true;\n    test(\"eval('1'); var x = eval; x('2');\",\n         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n  }\n",
        "begin_line": 426,
        "end_line": 431,
        "comment": "",
        "child_ranges": [
            "(line 427,col 5)-(line 427,col 59)",
            "(line 428,col 5)-(line 428,col 31)",
            "(line 429,col 5)-(line 430,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--jscomp_off=es5Strict\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 433,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 434,col 5)-(line 434,col 57)",
            "(line 435,col 5)-(line 435,col 39)",
            "(line 436,col 5)-(line 436,col 40)",
            "(line 437,col 5)-(line 444,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue297()",
        "snippet": "  public void testIssue297() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function f(p) {\" +\n         \" var x;\" +\n         \" return ((x=p.id) && (x=parseInt(x.substr(1)))) && x>0;\" +\n         \"}\",\n         \"function f(b) {\" +\n         \" var a;\" +\n         \" return ((a=b.id) && (a=parseInt(a.substr(1)))) && 0<a;\" +\n         \"}\");\n  }\n",
        "begin_line": 447,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 448,col 57)",
            "(line 449,col 5)-(line 456,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"element.offsetWidth;\",\n         \"element.offsetWidth\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 459,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 59)",
            "(line 461,col 5)-(line 462,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue504()",
        "snippet": "  public void testIssue504() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"void function() { alert('hi'); }();\",\n         \"alert('hi');void 0\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 465,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 466,col 5)-(line 466,col 59)",
            "(line 467,col 5)-(line 468,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601()",
        "snippet": "  public void testIssue601() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"function f(){return'\\\\v'=='v'}window['f']=f\");\n  }\n",
        "begin_line": 471,
        "end_line": 475,
        "comment": "",
        "child_ranges": [
            "(line 472,col 5)-(line 472,col 52)",
            "(line 473,col 5)-(line 474,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601b()",
        "snippet": "  public void testIssue601b() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\v' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\v'=='v'}\");\n  }\n",
        "begin_line": 477,
        "end_line": 481,
        "comment": "",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 59)",
            "(line 479,col 5)-(line 480,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue601c()",
        "snippet": "  public void testIssue601c() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { return '\\\\u000B' == 'v'; } window['f'] = f;\",\n         \"window.f=function(){return'\\\\u000B'=='v'}\");\n  }\n",
        "begin_line": 483,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 484,col 5)-(line 484,col 59)",
            "(line 485,col 5)-(line 486,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue846()",
        "snippet": "  public void testIssue846() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    testSame(\n        \"try { new Function('this is an error'); } catch(a) { alert('x'); }\");\n  }\n",
        "begin_line": 489,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 490,col 59)",
            "(line 491,col 5)-(line 492,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSideEffectIntegration()",
        "snippet": "  public void testSideEffectIntegration() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"/** @constructor */\" +\n         \"var Foo = function() {};\" +\n\n         \"Foo.prototype.blah = function() {\" +\n         \"  Foo.bar_(this)\" +\n         \"};\" +\n\n         \"Foo.bar_ = function(f) {\" +\n         \"  f.x = 5;\" +\n         \"};\" +\n\n         \"var y = new Foo();\" +\n\n         \"Foo.bar_({});\" +\n\n         // We used to strip this too\n         // due to bad side-effect propagation.\n         \"y.blah();\" +\n\n         \"alert(y);\",\n         \"var a = new function(){}; a.a = 5; alert(a);\");\n  }\n",
        "begin_line": 495,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 59)",
            "(line 497,col 5)-(line 517,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=false\");\n    test(\"function foo(a) {}\",\n         \"function foo(a) {}\");\n  }\n",
        "begin_line": 520,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 57)",
            "(line 522,col 5)-(line 522,col 30)",
            "(line 523,col 5)-(line 524,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=true\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 527,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 528,col 5)-(line 528,col 57)",
            "(line 529,col 5)-(line 529,col 29)",
            "(line 530,col 5)-(line 531,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=false\");\n    test(\"function Foo() {}\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"throw (new function() {}).a;\");\n  }\n",
        "begin_line": 534,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 535,col 5)-(line 535,col 59)",
            "(line 536,col 5)-(line 536,col 38)",
            "(line 537,col 5)-(line 537,col 30)",
            "(line 538,col 5)-(line 541,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=true\");\n    test(\"function Foo() {}\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"throw (new function Foo() {}).$x$;\");\n  }\n",
        "begin_line": 544,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 545,col 5)-(line 545,col 59)",
            "(line 546,col 5)-(line 546,col 38)",
            "(line 547,col 5)-(line 547,col 29)",
            "(line 548,col 5)-(line 551,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag1()",
        "snippet": "  public void testBooleanFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 554,
        "end_line": 559,
        "comment": "",
        "child_ranges": [
            "(line 555,col 5)-(line 555,col 57)",
            "(line 556,col 5)-(line 556,col 24)",
            "(line 557,col 5)-(line 558,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag2()",
        "snippet": "  public void testBooleanFlag2() {\n    args.add(\"--debug\");\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 561,
        "end_line": 566,
        "comment": "",
        "child_ranges": [
            "(line 562,col 5)-(line 562,col 24)",
            "(line 563,col 5)-(line 563,col 57)",
            "(line 564,col 5)-(line 565,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHelpFlag()",
        "snippet": "  public void testHelpFlag() {\n    args.add(\"--help\");\n    assertFalse(\n        createCommandLineRunner(\n            new String[] {\"function f() {}\"}).shouldRunCompiler());\n  }\n",
        "begin_line": 568,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 569,col 5)-(line 569,col 23)",
            "(line 570,col 5)-(line 572,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting1()",
        "snippet": "  public void testExternsLifting1() throws Exception{\n    String code = \"/** @externs */ function f() {}\";\n    test(new String[] {code},\n         new String[] {});\n\n    assertEquals(2, lastCompiler.getExternsForTesting().size());\n\n    CompilerInput extern = lastCompiler.getExternsForTesting().get(1);\n    assertNull(extern.getModule());\n    assertTrue(extern.isExtern());\n    assertEquals(code, extern.getCode());\n\n    assertEquals(1, lastCompiler.getInputsForTesting().size());\n\n    CompilerInput input = lastCompiler.getInputsForTesting().get(0);\n    assertNotNull(input.getModule());\n    assertFalse(input.isExtern());\n    assertEquals(\"\", input.getCode());\n  }\n",
        "begin_line": 575,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 52)",
            "(line 577,col 5)-(line 578,col 26)",
            "(line 580,col 5)-(line 580,col 64)",
            "(line 582,col 5)-(line 582,col 70)",
            "(line 583,col 5)-(line 583,col 35)",
            "(line 584,col 5)-(line 584,col 34)",
            "(line 585,col 5)-(line 585,col 41)",
            "(line 587,col 5)-(line 587,col 63)",
            "(line 589,col 5)-(line 589,col 68)",
            "(line 590,col 5)-(line 590,col 37)",
            "(line 591,col 5)-(line 591,col 34)",
            "(line 592,col 5)-(line 592,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting2()",
        "snippet": "  public void testExternsLifting2() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\"/** @externs */ function f() {}\", \"f(3);\"},\n         new String[] {\"f(3);\"},\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 595,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 596,col 40)",
            "(line 597,col 5)-(line 599,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOff()",
        "snippet": "  public void testSourceSortingOff() {\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    testSame(\n        new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n        });\n  }\n",
        "begin_line": 602,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 603,col 5)-(line 603,col 52)",
            "(line 604,col 5)-(line 608,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn()",
        "snippet": "  public void testSourceSortingOn() {\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 611,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 619,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn2()",
        "snippet": "  public void testSourceSortingOn2() {\n    test(new String[] {\n          \"goog.provide('a');\",\n          \"goog.require('a');\\n\" +\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n           \"var a={};\",\n           \"var COMPILED=!1\"\n         });\n  }\n",
        "begin_line": 622,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 631,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn3()",
        "snippet": "  public void testSourceSortingOn3() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.addDependency('sym', [], []);\\nvar x = 3;\",\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n          \"var COMPILED = !1;\",\n          \"var x = 3;\"\n         });\n  }\n",
        "begin_line": 634,
        "end_line": 644,
        "comment": "",
        "child_ranges": [
            "(line 635,col 5)-(line 635,col 51)",
            "(line 636,col 5)-(line 643,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps1()",
        "snippet": "  public void testSourceSortingCircularDeps1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 646,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 647,col 5)-(line 647,col 51)",
            "(line 648,col 5)-(line 653,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps2()",
        "snippet": "  public void testSourceSortingCircularDeps2() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('roses.lime.juice');\",\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\",\n          \"goog.provide('gimlet');\" +\n          \"     goog.require('gin'); goog.require('roses.lime.juice');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 656,
        "end_line": 667,
        "comment": "",
        "child_ranges": [
            "(line 657,col 5)-(line 657,col 51)",
            "(line 658,col 5)-(line 666,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn1()",
        "snippet": "  public void testSourcePruningOn1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 669,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 670,col 5)-(line 670,col 51)",
            "(line 671,col 5)-(line 679,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn2()",
        "snippet": "  public void testSourcePruningOn2() {\n    args.add(\"--closure_entry_point=guinness\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var guinness = {};\"\n         });\n  }\n",
        "begin_line": 682,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 47)",
            "(line 684,col 5)-(line 692,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn3()",
        "snippet": "  public void testSourcePruningOn3() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 695,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 696,col 5)-(line 696,col 45)",
            "(line 697,col 5)-(line 704,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn4()",
        "snippet": "  public void testSourcePruningOn4() {\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 707,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 708,col 5)-(line 708,col 45)",
            "(line 709,col 5)-(line 709,col 43)",
            "(line 710,col 5)-(line 718,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn5()",
        "snippet": "  public void testSourcePruningOn5() {\n    args.add(\"--closure_entry_point=shiraz\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         Compiler.MISSING_ENTRY_ERROR);\n  }\n",
        "begin_line": 721,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 722,col 45)",
            "(line 723,col 5)-(line 728,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn6()",
        "snippet": "  public void testSourcePruningOn6() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 731,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 732,col 5)-(line 732,col 45)",
            "(line 733,col 5)-(line 742,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn7()",
        "snippet": "  public void testSourcePruningOn7() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"var COMPILED = false;\",\n         },\n         new String[] {\n          \"var COMPILED = !1;\",\n         });\n  }\n",
        "begin_line": 745,
        "end_line": 753,
        "comment": "",
        "child_ranges": [
            "(line 746,col 5)-(line 746,col 51)",
            "(line 747,col 5)-(line 752,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn8()",
        "snippet": "  public void testSourcePruningOn8() {\n    args.add(\"--only_closure_dependencies\");\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"/** @externs */\\n\" +\n          \"var externVar;\",\n          \"goog.provide('scotch'); var x = externVar;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = externVar;\",\n         });\n  }\n",
        "begin_line": 755,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 756,col 5)-(line 756,col 44)",
            "(line 757,col 5)-(line 757,col 45)",
            "(line 758,col 5)-(line 758,col 40)",
            "(line 759,col 5)-(line 766,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testModuleEntryPoint()",
        "snippet": "  public void testModuleEntryPoint() throws Exception {\n    useModules = ModulePattern.STAR;\n    args.add(\"--only_closure_dependencies\");\n    args.add(\"--closure_entry_point=m1:a\");\n    test(\n        new String[] {\n          \"goog.provide('a');\",\n          \"goog.provide('b');\"\n        },\n        // Check that 'b' was stripped out, and 'a' was moved to the second\n        // module (m1).\n        new String[] {\n          \"\",\n          \"var a = {};\"\n        });\n  }\n",
        "begin_line": 769,
        "end_line": 784,
        "comment": "",
        "child_ranges": [
            "(line 770,col 5)-(line 770,col 36)",
            "(line 771,col 5)-(line 771,col 44)",
            "(line 772,col 5)-(line 772,col 43)",
            "(line 773,col 5)-(line 783,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testNoCompile()",
        "snippet": "  public void testNoCompile() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"/** @nocompile */\\n\" +\n          \"goog.provide('x');\\n\" +\n          \"var dupeVar;\",\n          \"var dupeVar;\"\n         },\n         new String[] {\n           \"var dupeVar;\"\n         });\n  }\n",
        "begin_line": 786,
        "end_line": 797,
        "comment": "",
        "child_ranges": [
            "(line 787,col 5)-(line 787,col 40)",
            "(line 788,col 5)-(line 796,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDependencySortingWhitespaceMode()",
        "snippet": "  public void testDependencySortingWhitespaceMode() {\n    args.add(\"--manage_closure_dependencies\");\n    args.add(\"--compilation_level=WHITESPACE_ONLY\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.provide('hops');\",\n         },\n         new String[] {\n          \"goog.provide('hops');\",\n          \"goog.provide('beer');\\ngoog.require('hops');\",\n          \"goog.require('beer');\"\n         });\n  }\n",
        "begin_line": 799,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 800,col 5)-(line 800,col 46)",
            "(line 801,col 5)-(line 801,col 52)",
            "(line 802,col 5)-(line 811,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testForwardDeclareDroppedTypes()",
        "snippet": "  public void testForwardDeclareDroppedTypes() {\n    args.add(\"--manage_closure_dependencies=true\");\n\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\",\n          \"goog.provide('Scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {}; function f(a) {}\",\n           \"\"\n         });\n\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\"\n         },\n         new String[] {\n           \"var beer = {}; function f(a) {}\",\n           \"\"\n         },\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 814,
        "end_line": 837,
        "comment": "",
        "child_ranges": [
            "(line 815,col 5)-(line 815,col 51)",
            "(line 817,col 5)-(line 817,col 40)",
            "(line 818,col 5)-(line 826,col 12)",
            "(line 828,col 5)-(line 836,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesEmptyEntryPoints()",
        "snippet": "  public void testOnlyClosureDependenciesEmptyEntryPoints() throws Exception {\n    // Prevents this from trying to load externs.zip\n    args.add(\"--use_only_custom_externs=true\");\n\n    args.add(\"--only_closure_dependencies=true\");\n    try {\n      CommandLineRunner runner = createCommandLineRunner(new String[0]);\n      runner.doRun();\n      fail(\"Expected FlagUsageException\");\n    } catch (FlagUsageException e) {\n      assertTrue(e.getMessage(),\n          e.getMessage().contains(\"only_closure_dependencies\"));\n    }\n  }\n",
        "begin_line": 839,
        "end_line": 852,
        "comment": "",
        "child_ranges": [
            "(line 841,col 5)-(line 841,col 47)",
            "(line 843,col 5)-(line 843,col 49)",
            "(line 844,col 5)-(line 851,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOnlyClosureDependenciesOneEntryPoint()",
        "snippet": "  public void testOnlyClosureDependenciesOneEntryPoint() throws Exception {\n    args.add(\"--only_closure_dependencies=true\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.require('beer'); var beerRequired = 1;\",\n          \"goog.provide('beer');\\ngoog.require('hops');\\nvar beerProvided = 1;\",\n          \"goog.provide('hops'); var hopsProvided = 1;\",\n          \"goog.provide('scotch'); var scotchProvided = 1;\",\n          \"goog.require('scotch');\\nvar includeFileWithoutProvides = 1;\",\n          \"/** This is base.js */\\nvar COMPILED = false;\",\n         },\n         new String[] {\n           \"var COMPILED = !1;\",\n           \"var hops = {}, hopsProvided = 1;\",\n           \"var beer = {}, beerProvided = 1;\"\n         });\n  }\n",
        "begin_line": 854,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 855,col 5)-(line 855,col 49)",
            "(line 856,col 5)-(line 856,col 43)",
            "(line 857,col 5)-(line 869,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion1()",
        "snippet": "  public void testSourceMapExpansion1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--create_source_map=%outname%.map\");\n    testSame(\"var x = 3;\");\n    assertEquals(\"/path/to/out.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 872,
        "end_line": 880,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 873,col 33)",
            "(line 874,col 5)-(line 874,col 32)",
            "(line 875,col 5)-(line 875,col 50)",
            "(line 876,col 5)-(line 876,col 27)",
            "(line 877,col 5)-(line 879,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion2()",
        "snippet": "  public void testSourceMapExpansion2() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 882,
        "end_line": 890,
        "comment": "",
        "child_ranges": [
            "(line 883,col 5)-(line 883,col 37)",
            "(line 884,col 5)-(line 884,col 50)",
            "(line 885,col 5)-(line 885,col 48)",
            "(line 886,col 5)-(line 886,col 56)",
            "(line 887,col 5)-(line 889,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion3()",
        "snippet": "  public void testSourceMapExpansion3() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo_\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo_m0.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(),\n            lastCompiler.getModuleGraph().getRootModule()));\n  }\n",
        "begin_line": 892,
        "end_line": 901,
        "comment": "",
        "child_ranges": [
            "(line 893,col 5)-(line 893,col 37)",
            "(line 894,col 5)-(line 894,col 50)",
            "(line 895,col 5)-(line 895,col 49)",
            "(line 896,col 5)-(line 896,col 56)",
            "(line 897,col 5)-(line 900,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat1()",
        "snippet": "  public void testSourceMapFormat1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.DEFAULT,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 903,
        "end_line": 909,
        "comment": "",
        "child_ranges": [
            "(line 904,col 5)-(line 904,col 33)",
            "(line 905,col 5)-(line 905,col 32)",
            "(line 906,col 5)-(line 906,col 27)",
            "(line 907,col 5)-(line 908,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat2()",
        "snippet": "  public void testSourceMapFormat2() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--source_map_format=V3\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.V3,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 911,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 912,col 5)-(line 912,col 33)",
            "(line 913,col 5)-(line 913,col 32)",
            "(line 914,col 5)-(line 914,col 39)",
            "(line 915,col 5)-(line 915,col 27)",
            "(line 916,col 5)-(line 917,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testModuleWrapperBaseNameExpansion()",
        "snippet": "  public void testModuleWrapperBaseNameExpansion() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--module_wrapper=m0:%s // %basename%\");\n    testSame(new String[] {\n      \"var x = 3;\",\n      \"var y = 4;\"\n    });\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.writeModuleOutput(\n        builder,\n        lastCompiler.getModuleGraph().getRootModule());\n    assertEquals(\"var x=3; // m0.js\\n\", builder.toString());\n  }\n",
        "begin_line": 920,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 921,col 5)-(line 921,col 37)",
            "(line 922,col 5)-(line 922,col 53)",
            "(line 923,col 5)-(line 926,col 7)",
            "(line 928,col 5)-(line 928,col 48)",
            "(line 929,col 5)-(line 931,col 55)",
            "(line 932,col 5)-(line 932,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion()",
        "snippet": "  public void testCharSetExpansion() {\n    testSame(\"\");\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);\n  }\n",
        "begin_line": 935,
        "end_line": 941,
        "comment": "",
        "child_ranges": [
            "(line 936,col 5)-(line 936,col 17)",
            "(line 937,col 5)-(line 937,col 70)",
            "(line 938,col 5)-(line 938,col 32)",
            "(line 939,col 5)-(line 939,col 17)",
            "(line 940,col 5)-(line 940,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testChainModuleManifest()",
        "snippet": "  public void testChainModuleManifest() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m1}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m2}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 943,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 944,col 5)-(line 944,col 37)",
            "(line 945,col 5)-(line 946,col 67)",
            "(line 948,col 5)-(line 948,col 48)",
            "(line 949,col 5)-(line 950,col 54)",
            "(line 951,col 5)-(line 963,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testStarModuleManifest()",
        "snippet": "  public void testStarModuleManifest() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m0}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m0}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 966,
        "end_line": 987,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 967,col 36)",
            "(line 968,col 5)-(line 969,col 67)",
            "(line 971,col 5)-(line 971,col 48)",
            "(line 972,col 5)-(line 973,col 54)",
            "(line 974,col 5)-(line 986,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOutputModuleGraphJson()",
        "snippet": "  public void testOutputModuleGraphJson() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n        \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphJsonTo(builder);\n    assertTrue(builder.toString().indexOf(\"transitive-dependencies\") != -1);\n  }\n",
        "begin_line": 989,
        "end_line": 997,
        "comment": "",
        "child_ranges": [
            "(line 990,col 5)-(line 990,col 36)",
            "(line 991,col 5)-(line 992,col 65)",
            "(line 994,col 5)-(line 994,col 48)",
            "(line 995,col 5)-(line 995,col 58)",
            "(line 996,col 5)-(line 996,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag()",
        "snippet": "  public void testVersionFlag() {\n    args.add(\"--version\");\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 999,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 1000,col 5)-(line 1000,col 26)",
            "(line 1001,col 5)-(line 1001,col 17)",
            "(line 1002,col 5)-(line 1006,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag2()",
        "snippet": "  public void testVersionFlag2() {\n    lastArg = \"--version\";\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 1009,
        "end_line": 1017,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1010,col 26)",
            "(line 1011,col 5)-(line 1011,col 17)",
            "(line 1012,col 5)-(line 1016,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testPrintAstFlag()",
        "snippet": "  public void testPrintAstFlag() {\n    args.add(\"--print_ast=true\");\n    testSame(\"\");\n    assertEquals(\n        \"digraph AST {\\n\" +\n        \"  node [color=lightblue2, style=filled];\\n\" +\n        \"  node0 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node1 [label=\\\"SCRIPT\\\"];\\n\" +\n        \"  node0 -> node1 [weight=1];\\n\" +\n        \"  node1 -> RETURN [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> RETURN [label=\\\"SYN_BLOCK\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"}\\n\\n\",\n        new String(outReader.toByteArray()));\n  }\n",
        "begin_line": 1019,
        "end_line": 1036,
        "comment": "",
        "child_ranges": [
            "(line 1020,col 5)-(line 1020,col 33)",
            "(line 1021,col 5)-(line 1021,col 17)",
            "(line 1022,col 5)-(line 1035,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSyntheticExterns()",
        "snippet": "  public void testSyntheticExterns() {\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"myVar.property;\"));\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         \"var theirVar={},myVar={},yourVar={};\");\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var myVar = {};\",\n         VarCheck.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 1038,
        "end_line": 1053,
        "comment": "",
        "child_ranges": [
            "(line 1039,col 5)-(line 1040,col 59)",
            "(line 1041,col 5)-(line 1042,col 46)",
            "(line 1044,col 5)-(line 1044,col 47)",
            "(line 1045,col 5)-(line 1045,col 40)",
            "(line 1046,col 5)-(line 1047,col 49)",
            "(line 1049,col 5)-(line 1049,col 47)",
            "(line 1050,col 5)-(line 1050,col 40)",
            "(line 1051,col 5)-(line 1052,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGoogAssertStripping()",
        "snippet": "  public void testGoogAssertStripping() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"goog.asserts.assert(false)\",\n         \"\");\n    args.add(\"--debug\");\n    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(!1)\");\n  }\n",
        "begin_line": 1055,
        "end_line": 1061,
        "comment": "",
        "child_ranges": [
            "(line 1056,col 5)-(line 1056,col 59)",
            "(line 1057,col 5)-(line 1058,col 13)",
            "(line 1059,col 5)-(line 1059,col 24)",
            "(line 1060,col 5)-(line 1060,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testMissingReturnCheckOnWithVerbose()",
        "snippet": "  public void testMissingReturnCheckOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number} */ function f() {f()} f();\",\n        CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 1063,
        "end_line": 1067,
        "comment": "",
        "child_ranges": [
            "(line 1064,col 5)-(line 1064,col 40)",
            "(line 1065,col 5)-(line 1066,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGenerateExports()",
        "snippet": "  public void testGenerateExports() {\n    args.add(\"--generate_exports=true\");\n    test(\"/** @export */ foo.prototype.x = function() {};\",\n        \"foo.prototype.x=function(){};\"+\n        \"goog.exportSymbol(\\\"foo.prototype.x\\\",foo.prototype.x);\");\n  }\n",
        "begin_line": 1069,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1070,col 5)-(line 1070,col 40)",
            "(line 1071,col 5)-(line 1073,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDepreciationWithVerbose()",
        "snippet": "  public void testDepreciationWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @deprecated */ function f() {}; f()\",\n       CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 1076,
        "end_line": 1080,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 40)",
            "(line 1078,col 5)-(line 1079,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTwoParseErrors()",
        "snippet": "  public void testTwoParseErrors() {\n    // If parse errors are reported in different files, make\n    // sure all of them are reported.\n    Compiler compiler = compile(new String[] {\n      \"var a b;\",\n      \"var b c;\"\n    });\n    assertEquals(2, compiler.getErrors().length);\n  }\n",
        "begin_line": 1082,
        "end_line": 1090,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1088,col 7)",
            "(line 1089,col 5)-(line 1089,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES3ByDefault()",
        "snippet": "  public void testES3ByDefault() {\n    useStringComparison = true;\n    test(\n        \"var x = f.function\",\n        \"var x=f[\\\"function\\\"];\",\n        RhinoErrorReporter.INVALID_ES3_PROP_NAME);\n  }\n",
        "begin_line": 1092,
        "end_line": 1098,
        "comment": "",
        "child_ranges": [
            "(line 1093,col 5)-(line 1093,col 31)",
            "(line 1094,col 5)-(line 1097,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5ChecksByDefault()",
        "snippet": "  public void testES5ChecksByDefault() {\n    testSame(\"var x = 3; delete x;\");\n  }\n",
        "begin_line": 1100,
        "end_line": 1102,
        "comment": "",
        "child_ranges": [
            "(line 1101,col 5)-(line 1101,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5ChecksInVerbose()",
        "snippet": "  public void testES5ChecksInVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { delete x; }\", StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1104,
        "end_line": 1107,
        "comment": "",
        "child_ranges": [
            "(line 1105,col 5)-(line 1105,col 40)",
            "(line 1106,col 5)-(line 1106,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5()",
        "snippet": "  public void testES5() {\n    args.add(\"--language_in=ECMASCRIPT5\");\n    test(\"var x = f.function\", \"var x = f.function\");\n    test(\"var let\", \"var let\");\n  }\n",
        "begin_line": 1109,
        "end_line": 1113,
        "comment": "",
        "child_ranges": [
            "(line 1110,col 5)-(line 1110,col 42)",
            "(line 1111,col 5)-(line 1111,col 53)",
            "(line 1112,col 5)-(line 1112,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5Strict()",
        "snippet": "  public void testES5Strict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    test(\"var x = f.function\", \"'use strict';var x = f.function\");\n    test(\"var let\", RhinoErrorReporter.PARSE_ERROR);\n    test(\"function f(x) { delete x; }\", StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1115,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1116,col 5)-(line 1116,col 49)",
            "(line 1117,col 5)-(line 1117,col 66)",
            "(line 1118,col 5)-(line 1118,col 52)",
            "(line 1119,col 5)-(line 1119,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrict()",
        "snippet": "  public void testES5StrictUseStrict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n  }\n",
        "begin_line": 1122,
        "end_line": 1127,
        "comment": "",
        "child_ranges": [
            "(line 1123,col 5)-(line 1123,col 49)",
            "(line 1124,col 5)-(line 1124,col 69)",
            "(line 1125,col 5)-(line 1125,col 46)",
            "(line 1126,col 5)-(line 1126,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrictMultipleInputs()",
        "snippet": "  public void testES5StrictUseStrictMultipleInputs() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\",\n        \"var y = f.function\", \"var z = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n    assertEquals(outputSource.substring(13).indexOf(\"'use strict'\"), -1);\n  }\n",
        "begin_line": 1129,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1130,col 5)-(line 1130,col 49)",
            "(line 1131,col 5)-(line 1132,col 53)",
            "(line 1133,col 5)-(line 1133,col 46)",
            "(line 1134,col 5)-(line 1134,col 64)",
            "(line 1135,col 5)-(line 1135,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordDefault()",
        "snippet": "  public void testWithKeywordDefault() {\n    test(\"var x = {}; with (x) {}\", ControlStructureCheck.USE_OF_WITH);\n  }\n",
        "begin_line": 1138,
        "end_line": 1140,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 5)-(line 1139,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWithKeywordWithEs5ChecksOff()",
        "snippet": "  public void testWithKeywordWithEs5ChecksOff() {\n    args.add(\"--jscomp_off=es5Strict\");\n    testSame(\"var x = {}; with (x) {}\");\n  }\n",
        "begin_line": 1142,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1143,col 5)-(line 1143,col 39)",
            "(line 1144,col 5)-(line 1144,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testNoSrCFilesWithManifest()",
        "snippet": "  public void testNoSrCFilesWithManifest() throws IOException {\n    args.add(\"--use_only_custom_externs=true\");\n    args.add(\"--output_manifest=test.MF\");\n    CommandLineRunner runner = createCommandLineRunner(new String[0]);\n    String expectedMessage = \"\";\n    try {\n      runner.doRun();\n    } catch (FlagUsageException e) {\n      expectedMessage = e.getMessage();\n    }\n    assertEquals(expectedMessage, \"Bad --js flag. \" +\n      \"Manifest files cannot be generated when the input is from stdin.\");\n  }\n",
        "begin_line": 1147,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1148,col 5)-(line 1148,col 47)",
            "(line 1149,col 5)-(line 1149,col 42)",
            "(line 1150,col 5)-(line 1150,col 70)",
            "(line 1151,col 5)-(line 1151,col 32)",
            "(line 1152,col 5)-(line 1156,col 5)",
            "(line 1157,col 5)-(line 1158,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMD()",
        "snippet": "  public void testTransformAMD() {\n    args.add(\"--transform_amd_modules\");\n    test(\"define({test: 1})\", \"exports = {test: 1}\");\n  }\n",
        "begin_line": 1161,
        "end_line": 1164,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1162,col 40)",
            "(line 1163,col 5)-(line 1163,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJS()",
        "snippet": "  public void testProcessCJS() {\n    useStringComparison = true;\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    String expected = \"var module$foo$bar={test:1};\";\n    test(\"exports.test = 1\", expected);\n    assertEquals(expected + \"\\n\", outReader.toString());\n  }\n",
        "begin_line": 1166,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1167,col 5)-(line 1167,col 31)",
            "(line 1168,col 5)-(line 1168,col 44)",
            "(line 1169,col 5)-(line 1169,col 49)",
            "(line 1170,col 5)-(line 1170,col 33)",
            "(line 1171,col 5)-(line 1171,col 53)",
            "(line 1172,col 5)-(line 1172,col 39)",
            "(line 1173,col 5)-(line 1173,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessCJSWithModuleOutput()",
        "snippet": "  public void testProcessCJSWithModuleOutput() {\n    useStringComparison = true;\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    args.add(\"--module=auto\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"exports.test = 1\",\n        \"var module$foo$bar={test:1};\");\n    // With modules=auto no direct output is created.\n    assertEquals(\"\", outReader.toString());\n  }\n",
        "begin_line": 1176,
        "end_line": 1186,
        "comment": "",
        "child_ranges": [
            "(line 1177,col 5)-(line 1177,col 31)",
            "(line 1178,col 5)-(line 1178,col 44)",
            "(line 1179,col 5)-(line 1179,col 49)",
            "(line 1180,col 5)-(line 1180,col 30)",
            "(line 1181,col 5)-(line 1181,col 33)",
            "(line 1182,col 5)-(line 1183,col 40)",
            "(line 1185,col 5)-(line 1185,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFormattingSingleQuote()",
        "snippet": "  public void testFormattingSingleQuote() {\n    testSame(\"var x = '';\");\n    assertEquals(\"var x=\\\"\\\";\", lastCompiler.toSource());\n\n    args.add(\"--formatting=SINGLE_QUOTES\");\n    testSame(\"var x = '';\");\n    assertEquals(\"var x='';\", lastCompiler.toSource());\n  }\n",
        "begin_line": 1188,
        "end_line": 1195,
        "comment": "",
        "child_ranges": [
            "(line 1189,col 5)-(line 1189,col 28)",
            "(line 1190,col 5)-(line 1190,col 57)",
            "(line 1192,col 5)-(line 1192,col 43)",
            "(line 1193,col 5)-(line 1193,col 28)",
            "(line 1194,col 5)-(line 1194,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTransformAMDAndProcessCJS()",
        "snippet": "  public void testTransformAMDAndProcessCJS() {\n    useStringComparison = true;\n    args.add(\"--transform_amd_modules\");\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"define({foo: 1})\",\n        \"var module$foo$bar={},module$foo$bar={foo:1};\");\n  }\n",
        "begin_line": 1197,
        "end_line": 1205,
        "comment": "",
        "child_ranges": [
            "(line 1198,col 5)-(line 1198,col 31)",
            "(line 1199,col 5)-(line 1199,col 40)",
            "(line 1200,col 5)-(line 1200,col 44)",
            "(line 1201,col 5)-(line 1201,col 49)",
            "(line 1202,col 5)-(line 1202,col 33)",
            "(line 1203,col 5)-(line 1204,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testModuleJSON()",
        "snippet": "  public void testModuleJSON() {\n    useStringComparison = true;\n    args.add(\"--transform_amd_modules\");\n    args.add(\"--process_common_js_modules\");\n    args.add(\"--common_js_entry_module=foo/bar\");\n    args.add(\"--output_module_dependencies=test.json\");\n    setFilename(0, \"foo/bar.js\");\n    test(\"define({foo: 1})\",\n        \"var module$foo$bar={},module$foo$bar={foo:1};\");\n  }\n",
        "begin_line": 1207,
        "end_line": 1216,
        "comment": "",
        "child_ranges": [
            "(line 1208,col 5)-(line 1208,col 31)",
            "(line 1209,col 5)-(line 1209,col 40)",
            "(line 1210,col 5)-(line 1210,col 44)",
            "(line 1211,col 5)-(line 1211,col 49)",
            "(line 1212,col 5)-(line 1212,col 55)",
            "(line 1213,col 5)-(line 1213,col 33)",
            "(line 1214,col 5)-(line 1215,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testOutputSameAsInput()",
        "snippet": "  public void testOutputSameAsInput() {\n    args.add(\"--js_output_file=\" + getFilename(0));\n    test(\"\", AbstractCommandLineRunner.OUTPUT_SAME_AS_INPUT_ERROR);\n  }\n",
        "begin_line": 1218,
        "end_line": 1221,
        "comment": "",
        "child_ranges": [
            "(line 1219,col 5)-(line 1219,col 51)",
            "(line 1220,col 5)-(line 1220,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 1225,
        "end_line": 1227,
        "comment": "",
        "child_ranges": [
            "(line 1226,col 5)-(line 1226,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 1229,
        "end_line": 1231,
        "comment": "",
        "child_ranges": [
            "(line 1230,col 5)-(line 1230,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 1233,
        "end_line": 1235,
        "comment": "",
        "child_ranges": [
            "(line 1234,col 5)-(line 1234,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    test(original, compiled, null);\n  }\n",
        "begin_line": 1241,
        "end_line": 1243,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 1242,col 5)-(line 1242,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, String[] compiled,\n                    DiagnosticType warning) {\n    Compiler compiler = compile(original);\n\n    if (warning == null) {\n      assertEquals(\"Expected no warnings or errors\\n\" +\n          \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n          \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          0, compiler.getErrors().length + compiler.getWarnings().length);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 1251,
        "end_line": 1275,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   * If {@code warning} is non-null, we will also check if the given\n   * warning type was emitted.\n   ",
        "child_ranges": [
            "(line 1253,col 5)-(line 1253,col 42)",
            "(line 1255,col 5)-(line 1263,col 5)",
            "(line 1265,col 5)-(line 1265,col 50)",
            "(line 1266,col 5)-(line 1274,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 1280,
        "end_line": 1282,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1281,col 5)-(line 1281,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, String expected, DiagnosticType warning) {\n    test(new String[] { original }, new String[] { expected }, warning);\n  }\n",
        "begin_line": 1284,
        "end_line": 1286,
        "comment": "",
        "child_ranges": [
            "(line 1285,col 5)-(line 1285,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n\n    assertTrue(exitCodes.size() > 0);\n    int lastExitCode = exitCodes.get(exitCodes.size() - 1);\n\n    if (compiler.getErrors().length > 0) {\n      assertEquals(1, compiler.getErrors().length);\n      assertEquals(warning, compiler.getErrors()[0].getType());\n      assertEquals(1, lastExitCode);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n      assertEquals(0, lastExitCode);\n    }\n  }\n",
        "begin_line": 1291,
        "end_line": 1310,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 1292,col 5)-(line 1292,col 42)",
            "(line 1293,col 5)-(line 1296,col 72)",
            "(line 1298,col 5)-(line 1298,col 37)",
            "(line 1299,col 5)-(line 1299,col 59)",
            "(line 1301,col 5)-(line 1309,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.createCommandLineRunner(java.lang.String[])",
        "snippet": "  private CommandLineRunner createCommandLineRunner(String[] original) {\n    for (int i = 0; i < original.length; i++) {\n      args.add(\"--js\");\n      args.add(\"/path/to/input\" + i + \".js\");\n      if (useModules == ModulePattern.CHAIN) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? (\":m\" + (i - 1)) : \"\"));\n      } else if (useModules == ModulePattern.STAR) {\n        args.add(\"--module\");\n        args.add(\"m\" + i + \":1\" + (i > 0 ? \":m0\" : \"\"));\n      }\n    }\n\n    if (lastArg != null) {\n      args.add(lastArg);\n    }\n\n    String[] argStrings = args.toArray(new String[] {});\n    return new CommandLineRunner(\n        argStrings,\n        new PrintStream(outReader),\n        new PrintStream(errReader));\n  }\n",
        "begin_line": 1312,
        "end_line": 1334,
        "comment": "",
        "child_ranges": [
            "(line 1313,col 5)-(line 1323,col 5)",
            "(line 1325,col 5)-(line 1327,col 5)",
            "(line 1329,col 5)-(line 1329,col 56)",
            "(line 1330,col 5)-(line 1333,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    CommandLineRunner runner = createCommandLineRunner(original);\n    assertTrue(new String(errReader.toByteArray()), runner.shouldRunCompiler());\n    Supplier<List<SourceFile>> inputsSupplier = null;\n    Supplier<List<JSModule>> modulesSupplier = null;\n\n    if (useModules == ModulePattern.NONE) {\n      List<SourceFile> inputs = Lists.newArrayList();\n      for (int i = 0; i < original.length; i++) {\n        inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n      }\n      inputsSupplier = Suppliers.ofInstance(inputs);\n    } else if (useModules == ModulePattern.STAR) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleStar(original)));\n    } else if (useModules == ModulePattern.CHAIN) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleChain(original)));\n    } else {\n      throw new IllegalArgumentException(\"Unknown module type: \" + useModules);\n    }\n\n    runner.enableTestMode(\n        Suppliers.<List<SourceFile>>ofInstance(externs),\n        inputsSupplier,\n        modulesSupplier,\n        new Function<Integer, Boolean>() {\n          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n        });\n    runner.run();\n    lastCompiler = runner.getCompiler();\n    lastCommandLineRunner = runner;\n    return lastCompiler;\n  }\n",
        "begin_line": 1336,
        "end_line": 1374,
        "comment": "",
        "child_ranges": [
            "(line 1337,col 5)-(line 1337,col 65)",
            "(line 1338,col 5)-(line 1338,col 80)",
            "(line 1339,col 5)-(line 1339,col 53)",
            "(line 1340,col 5)-(line 1340,col 52)",
            "(line 1342,col 5)-(line 1358,col 5)",
            "(line 1360,col 5)-(line 1369,col 11)",
            "(line 1370,col 5)-(line 1370,col 17)",
            "(line 1371,col 5)-(line 1371,col 40)",
            "(line 1372,col 5)-(line 1372,col 35)",
            "(line 1373,col 5)-(line 1373,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.Anonymous-a6318766-b726-4d25-8cb0-45b61458b6d2.apply(java.lang.Integer)",
        "snippet": "          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n",
        "begin_line": 1365,
        "end_line": 1368,
        "comment": "",
        "child_ranges": [
            "(line 1367,col 13)-(line 1367,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = new CommandLineRunner(argStrings);\n    Compiler compiler = runner.createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(getFilename(i), original[i]));\n    }\n    CompilerOptions options = new CompilerOptions();\n    // ECMASCRIPT5 is the most forgiving.\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.init(externs, inputs, options);\n    Node all = compiler.parseInputs();\n    Preconditions.checkState(compiler.getErrorCount() == 0);\n    Preconditions.checkNotNull(all);\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 1376,
        "end_line": 1393,
        "comment": "",
        "child_ranges": [
            "(line 1377,col 5)-(line 1377,col 56)",
            "(line 1378,col 5)-(line 1378,col 65)",
            "(line 1379,col 5)-(line 1379,col 48)",
            "(line 1380,col 5)-(line 1380,col 51)",
            "(line 1381,col 5)-(line 1383,col 5)",
            "(line 1384,col 5)-(line 1384,col 52)",
            "(line 1386,col 5)-(line 1386,col 52)",
            "(line 1387,col 5)-(line 1387,col 44)",
            "(line 1388,col 5)-(line 1388,col 38)",
            "(line 1389,col 5)-(line 1389,col 60)",
            "(line 1390,col 5)-(line 1390,col 36)",
            "(line 1391,col 5)-(line 1391,col 32)",
            "(line 1392,col 5)-(line 1392,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setFilename(int, java.lang.String)",
        "snippet": "  private void setFilename(int i, String filename) {\n    this.filenames.put(i, filename);\n  }\n",
        "begin_line": 1395,
        "end_line": 1397,
        "comment": "",
        "child_ranges": [
            "(line 1396,col 5)-(line 1396,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.getFilename(int)",
        "snippet": "  private String getFilename(int i) {\n    if (filenames.isEmpty()) {\n      return \"input\" + i;\n    }\n    return filenames.get(i);\n  }\n",
        "begin_line": 1399,
        "end_line": 1404,
        "comment": "",
        "child_ranges": [
            "(line 1400,col 5)-(line 1402,col 5)",
            "(line 1403,col 5)-(line 1403,col 28)"
        ]
    }
]