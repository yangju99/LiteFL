[
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.MathUtilsTest(java.lang.String)",
        "snippet": "    public MathUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(MathUtilsTest.class);\n        suite.setName(\"MathUtils Tests\");\n        return suite;\n    }\n",
        "begin_line": 36,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 37,col 9)-(line 37,col 61)",
            "(line 38,col 9)-(line 38,col 41)",
            "(line 39,col 9)-(line 39,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.binomialCoefficient(int, int)",
        "snippet": "    private long binomialCoefficient(int n, int k) {\n        if ((n == k) || (k == 0)) {\n            return 1;\n        }\n        if ((k == 1) || (k == n - 1)) {\n            return n;\n        }\n        return binomialCoefficient(n - 1, k - 1) + binomialCoefficient(n - 1, k);\n    }\n",
        "begin_line": 45,
        "end_line": 53,
        "comment": "\n     * Exact recursive implementation to test against\n     ",
        "child_ranges": [
            "(line 46,col 9)-(line 48,col 9)",
            "(line 49,col 9)-(line 51,col 9)",
            "(line 52,col 9)-(line 52,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.factorial(int)",
        "snippet": "    private long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n",
        "begin_line": 58,
        "end_line": 64,
        "comment": "\n     * Exact direct multiplication implementation to test against\n     ",
        "child_ranges": [
            "(line 59,col 9)-(line 59,col 24)",
            "(line 60,col 9)-(line 62,col 9)",
            "(line 63,col 9)-(line 63,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.test0Choose0()",
        "snippet": "    public void test0Choose0() {\n        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);\n        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);\n        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);\n    }\n",
        "begin_line": 67,
        "end_line": 71,
        "comment": " Verify that b(0,0) = 1 ",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 71)",
            "(line 69,col 9)-(line 69,col 68)",
            "(line 70,col 9)-(line 70,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheck()",
        "snippet": "    public void testAddAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.addAndCheck(big, 0));\n        try {\n            MathUtils.addAndCheck(big, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.addAndCheck(bigNeg, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 73,
        "end_line": 87,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 36)",
            "(line 75,col 9)-(line 75,col 39)",
            "(line 76,col 9)-(line 76,col 57)",
            "(line 77,col 9)-(line 81,col 9)",
            "(line 82,col 9)-(line 86,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLong()",
        "snippet": "    public void testAddAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.addAndCheck(max, 0L));\n        assertEquals(min, MathUtils.addAndCheck(min, 0L));\n        assertEquals(max, MathUtils.addAndCheck(0L, max));\n        assertEquals(min, MathUtils.addAndCheck(0L, min));\n        assertEquals(1, MathUtils.addAndCheck(-1L, 2L));\n        assertEquals(1, MathUtils.addAndCheck(2L, -1L));\n        testAddAndCheckLongFailure(max, 1L);\n        testAddAndCheckLongFailure(min, -1L);\n        testAddAndCheckLongFailure(1L, max);\n        testAddAndCheckLongFailure(-1L, min);\n    }\n",
        "begin_line": 89,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 34)",
            "(line 91,col 9)-(line 91,col 34)",
            "(line 92,col 9)-(line 92,col 58)",
            "(line 93,col 9)-(line 93,col 58)",
            "(line 94,col 9)-(line 94,col 58)",
            "(line 95,col 9)-(line 95,col 58)",
            "(line 96,col 9)-(line 96,col 56)",
            "(line 97,col 9)-(line 97,col 56)",
            "(line 98,col 9)-(line 98,col 44)",
            "(line 99,col 9)-(line 99,col 45)",
            "(line 100,col 9)-(line 100,col 44)",
            "(line 101,col 9)-(line 101,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testAddAndCheckLongFailure(long, long)",
        "snippet": "    private void testAddAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.addAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 104,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 105,col 9)-(line 110,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficient()",
        "snippet": "    public void testBinomialCoefficient() {\n        long[] bcoef5 = {\n            1,\n            5,\n            10,\n            10,\n            5,\n            1 };\n        long[] bcoef6 = {\n            1,\n            6,\n            15,\n            20,\n            15,\n            6,\n            1 };\n        for (int i = 0; i < 6; i++) {\n            assertEquals(\"5 choose \" + i, bcoef5[i], MathUtils.binomialCoefficient(5, i));\n        }\n        for (int i = 0; i < 7; i++) {\n            assertEquals(\"6 choose \" + i, bcoef6[i], MathUtils.binomialCoefficient(6, i));\n        }\n\n        for (int n = 1; n < 10; n++) {\n            for (int k = 0; k <= n; k++) {\n                assertEquals(n + \" choose \" + k, binomialCoefficient(n, k), MathUtils.binomialCoefficient(n, k));\n                assertEquals(n + \" choose \" + k, (double)binomialCoefficient(n, k), MathUtils.binomialCoefficientDouble(n, k), Double.MIN_VALUE);\n                assertEquals(n + \" choose \" + k, Math.log((double)binomialCoefficient(n, k)), MathUtils.binomialCoefficientLog(n, k), 10E-12);\n            }\n        }\n\n        /*\n         * Takes a long time for recursion to unwind, but succeeds and yields\n         * exact value = 2,333,606,220\n         * assertEquals(MathUtils.binomialCoefficient(34,17),\n         * binomialCoefficient(34,17));\n         */\n    }\n",
        "begin_line": 113,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 114,col 9)-(line 120,col 16)",
            "(line 121,col 9)-(line 128,col 16)",
            "(line 129,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 134,col 9)",
            "(line 136,col 9)-(line 142,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testBinomialCoefficientFail()",
        "snippet": "    public void testBinomialCoefficientFail() {\n        try {\n            MathUtils.binomialCoefficient(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n\n        try {\n            MathUtils.binomialCoefficientDouble(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n\n        try {\n            MathUtils.binomialCoefficientLog(4, 5);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.binomialCoefficient(67, 34);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            ;\n        }\n        double x = MathUtils.binomialCoefficientDouble(1030, 515);\n        assertTrue(\"expecting infinite binomial coefficient\", Double.isInfinite(x));\n    }\n",
        "begin_line": 152,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 158,col 9)",
            "(line 160,col 9)-(line 165,col 9)",
            "(line 167,col 9)-(line 172,col 9)",
            "(line 173,col 9)-(line 178,col 9)",
            "(line 179,col 9)-(line 179,col 66)",
            "(line 180,col 9)-(line 180,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCosh()",
        "snippet": "    public void testCosh() {\n        double x = 3.0;\n        double expected = 10.06766;\n        assertEquals(expected, MathUtils.cosh(x), 1.0e-5);\n    }\n",
        "begin_line": 183,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 23)",
            "(line 185,col 9)-(line 185,col 35)",
            "(line 186,col 9)-(line 186,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testCoshNaN()",
        "snippet": "    public void testCoshNaN() {\n        assertTrue(Double.isNaN(MathUtils.cosh(Double.NaN)));\n    }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testEquals()",
        "snippet": "    public void testEquals() {\n        double[] testArray = {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d };\n        for (int i = 0; i < testArray.length; i++) {\n            for (int j = 0; j < testArray.length; j++) {\n                if (i == j) {\n                    assertTrue(MathUtils.equals(testArray[i], testArray[j]));\n                    assertTrue(MathUtils.equals(testArray[j], testArray[i]));\n                } else {\n                    assertTrue(!MathUtils.equals(testArray[i], testArray[j]));\n                    assertTrue(!MathUtils.equals(testArray[j], testArray[i]));\n                }\n            }\n        }\n    }\n",
        "begin_line": 193,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 199,col 17)",
            "(line 200,col 9)-(line 210,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayEquals()",
        "snippet": "    public void testArrayEquals() {\n        assertFalse(MathUtils.equals(new double[] { 1d }, null));\n        assertFalse(MathUtils.equals(null, new double[] { 1d }));\n        assertTrue(MathUtils.equals((double[]) null, (double[]) null));\n\n        assertFalse(MathUtils.equals(new double[] { 1d }, new double[0]));\n        assertTrue(MathUtils.equals(new double[] { 1d }, new double[] { 1d }));\n        assertTrue(MathUtils.equals(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }, new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        assertFalse(MathUtils.equals(new double[] { Double.POSITIVE_INFINITY },\n                                     new double[] { Double.NEGATIVE_INFINITY }));\n        assertFalse(MathUtils.equals(new double[] { 1d },\n                                     new double[] { MathUtils.nextAfter(1d, 2d) }));\n\n    }\n",
        "begin_line": 213,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 214,col 9)-(line 214,col 65)",
            "(line 215,col 9)-(line 215,col 65)",
            "(line 216,col 9)-(line 216,col 71)",
            "(line 218,col 9)-(line 218,col 74)",
            "(line 219,col 9)-(line 219,col 79)",
            "(line 220,col 9)-(line 226,col 40)",
            "(line 227,col 9)-(line 228,col 81)",
            "(line 229,col 9)-(line 230,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorial()",
        "snippet": "    public void testFactorial() {\n        for (int i = 1; i < 10; i++) {\n            assertEquals(i + \"! \", factorial(i), MathUtils.factorial(i));\n            assertEquals(i + \"! \", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);\n            assertEquals(i + \"! \", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);\n        }\n        assertEquals(\"0\", 1, MathUtils.factorial(0));\n        assertEquals(\"0\", 1.0d, MathUtils.factorialDouble(0), 1E-14);\n        assertEquals(\"0\", 0.0d, MathUtils.factorialLog(0), 1E-14);\n    }\n",
        "begin_line": 234,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 235,col 9)-(line 239,col 9)",
            "(line 240,col 9)-(line 240,col 53)",
            "(line 241,col 9)-(line 241,col 69)",
            "(line 242,col 9)-(line 242,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testFactorialFail()",
        "snippet": "    public void testFactorialFail() {\n        try {\n            MathUtils.factorial(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.factorialDouble(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.factorialLog(-1);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            ;\n        }\n        try {\n            MathUtils.factorial(21);\n            fail(\"expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            ;\n        }\n        assertTrue(\"expecting infinite factorial value\", Double.isInfinite(MathUtils.factorialDouble(171)));\n    }\n",
        "begin_line": 245,
        "end_line": 271,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 251,col 9)",
            "(line 252,col 9)-(line 257,col 9)",
            "(line 258,col 9)-(line 263,col 9)",
            "(line 264,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testGcd()",
        "snippet": "    public void testGcd() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.gcd(0, 0));\n\n        assertEquals(b, MathUtils.gcd(0, b));\n        assertEquals(a, MathUtils.gcd(a, 0));\n        assertEquals(b, MathUtils.gcd(0, -b));\n        assertEquals(a, MathUtils.gcd(-a, 0));\n\n        assertEquals(10, MathUtils.gcd(a, b));\n        assertEquals(10, MathUtils.gcd(-a, b));\n        assertEquals(10, MathUtils.gcd(a, -b));\n        assertEquals(10, MathUtils.gcd(-a, -b));\n\n        assertEquals(1, MathUtils.gcd(a, c));\n        assertEquals(1, MathUtils.gcd(-a, c));\n        assertEquals(1, MathUtils.gcd(a, -c));\n        assertEquals(1, MathUtils.gcd(-a, -c));\n\n        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));\n\n    }\n",
        "begin_line": 273,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 274,col 9)-(line 274,col 19)",
            "(line 275,col 9)-(line 275,col 19)",
            "(line 276,col 9)-(line 276,col 19)",
            "(line 278,col 9)-(line 278,col 45)",
            "(line 280,col 9)-(line 280,col 45)",
            "(line 281,col 9)-(line 281,col 45)",
            "(line 282,col 9)-(line 282,col 46)",
            "(line 283,col 9)-(line 283,col 46)",
            "(line 285,col 9)-(line 285,col 46)",
            "(line 286,col 9)-(line 286,col 47)",
            "(line 287,col 9)-(line 287,col 47)",
            "(line 288,col 9)-(line 288,col 48)",
            "(line 290,col 9)-(line 290,col 45)",
            "(line 291,col 9)-(line 291,col 46)",
            "(line 292,col 9)-(line 292,col 46)",
            "(line 293,col 9)-(line 293,col 47)",
            "(line 295,col 9)-(line 295,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testHash()",
        "snippet": "    public void testHash() {\n        double[] testArray = {\n            Double.NaN,\n            Double.POSITIVE_INFINITY,\n            Double.NEGATIVE_INFINITY,\n            1d,\n            0d,\n            1E-14,\n            (1 + 1E-14),\n            Double.MIN_VALUE,\n            Double.MAX_VALUE };\n        for (int i = 0; i < testArray.length; i++) {\n            for (int j = 0; j < testArray.length; j++) {\n                if (i == j) {\n                    assertEquals(MathUtils.hash(testArray[i]), MathUtils.hash(testArray[j]));\n                    assertEquals(MathUtils.hash(testArray[j]), MathUtils.hash(testArray[i]));\n                } else {\n                    assertTrue(MathUtils.hash(testArray[i]) != MathUtils.hash(testArray[j]));\n                    assertTrue(MathUtils.hash(testArray[j]) != MathUtils.hash(testArray[i]));\n                }\n            }\n        }\n    }\n",
        "begin_line": 299,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 300,col 9)-(line 309,col 31)",
            "(line 310,col 9)-(line 320,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testArrayHash()",
        "snippet": "    public void testArrayHash() {\n        assertEquals(0, MathUtils.hash((double[]) null));\n        assertEquals(MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }),\n                     MathUtils.hash(new double[] {\n                                      Double.NaN, Double.POSITIVE_INFINITY,\n                                      Double.NEGATIVE_INFINITY, 1d, 0d\n                                    }));\n        assertFalse(MathUtils.hash(new double[] { 1d }) ==\n                    MathUtils.hash(new double[] { MathUtils.nextAfter(1d, 2d) }));\n        assertFalse(MathUtils.hash(new double[] { 1d }) ==\n                    MathUtils.hash(new double[] { 1d, 1d }));\n    }\n",
        "begin_line": 323,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 57)",
            "(line 325,col 9)-(line 332,col 40)",
            "(line 333,col 9)-(line 334,col 82)",
            "(line 335,col 9)-(line 336,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testPermutedArrayHash()",
        "snippet": "    public void testPermutedArrayHash() {\n        double[] original = new double[10];\n        double[] permuted = new double[10];\n        RandomDataImpl random = new RandomDataImpl();\n        \n        // Generate 10 distinct random values\n        for (int i = 0; i < 10; i++) {\n            original[i] = random.nextUniform((double)i + 0.5, (double)i + 0.75);\n        }\n        \n        // Generate a random permutation, making sure it is not the identity\n        boolean isIdentity = true;\n        do {\n            int[] permutation = random.nextPermutation(10, 10);\n            for (int i = 0; i < 10; i++) {\n                if (i != permutation[i]) {\n                    isIdentity = false;\n                }\n                permuted[i] = original[permutation[i]];\n            }\n        } while (isIdentity);\n        \n        // Verify that permuted array has different hash\n        assertFalse(MathUtils.hash(original) == MathUtils.hash(permuted));\n    }\n",
        "begin_line": 342,
        "end_line": 366,
        "comment": "\n     * Make sure that permuted arrays do not hash to the same value.\n     ",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 43)",
            "(line 344,col 9)-(line 344,col 43)",
            "(line 345,col 9)-(line 345,col 53)",
            "(line 348,col 9)-(line 350,col 9)",
            "(line 353,col 9)-(line 353,col 34)",
            "(line 354,col 9)-(line 362,col 29)",
            "(line 365,col 9)-(line 365,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorByte()",
        "snippet": "    public void testIndicatorByte() {\n        assertEquals((byte)1, MathUtils.indicator((byte)2));\n        assertEquals((byte)1, MathUtils.indicator((byte)0));\n        assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n    }\n",
        "begin_line": 368,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 369,col 9)-(line 369,col 60)",
            "(line 370,col 9)-(line 370,col 60)",
            "(line 371,col 9)-(line 371,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorDouble()",
        "snippet": "    public void testIndicatorDouble() {\n        double delta = 0.0;\n        assertEquals(1.0, MathUtils.indicator(2.0), delta);\n        assertEquals(1.0, MathUtils.indicator(0.0), delta);\n        assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n    }\n",
        "begin_line": 374,
        "end_line": 379,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 27)",
            "(line 376,col 9)-(line 376,col 59)",
            "(line 377,col 9)-(line 377,col 59)",
            "(line 378,col 9)-(line 378,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorFloat()",
        "snippet": "    public void testIndicatorFloat() {\n        float delta = 0.0F;\n        assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n        assertEquals(1.0F, MathUtils.indicator(0.0F), delta);\n        assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n    }\n",
        "begin_line": 381,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 27)",
            "(line 383,col 9)-(line 383,col 61)",
            "(line 384,col 9)-(line 384,col 61)",
            "(line 385,col 9)-(line 385,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorInt()",
        "snippet": "    public void testIndicatorInt() {\n        assertEquals((int)1, MathUtils.indicator((int)(2)));\n        assertEquals((int)1, MathUtils.indicator((int)(0)));\n        assertEquals((int)(-1), MathUtils.indicator((int)(-2)));\n    }\n",
        "begin_line": 388,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 389,col 9)-(line 389,col 60)",
            "(line 390,col 9)-(line 390,col 60)",
            "(line 391,col 9)-(line 391,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorLong()",
        "snippet": "    public void testIndicatorLong() {\n        assertEquals(1L, MathUtils.indicator(2L));\n        assertEquals(1L, MathUtils.indicator(0L));\n        assertEquals(-1L, MathUtils.indicator(-2L));\n    }\n",
        "begin_line": 394,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 50)",
            "(line 396,col 9)-(line 396,col 50)",
            "(line 397,col 9)-(line 397,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testIndicatorShort()",
        "snippet": "    public void testIndicatorShort() {\n        assertEquals((short)1, MathUtils.indicator((short)2));\n        assertEquals((short)1, MathUtils.indicator((short)0));\n        assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n    }\n",
        "begin_line": 400,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 401,col 9)-(line 401,col 62)",
            "(line 402,col 9)-(line 402,col 62)",
            "(line 403,col 9)-(line 403,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLcm()",
        "snippet": "    public void testLcm() {\n        int a = 30;\n        int b = 50;\n        int c = 77;\n\n        assertEquals(0, MathUtils.lcm(0, b));\n        assertEquals(0, MathUtils.lcm(a, 0));\n        assertEquals(b, MathUtils.lcm(1, b));\n        assertEquals(a, MathUtils.lcm(a, 1));\n        assertEquals(150, MathUtils.lcm(a, b));\n        assertEquals(150, MathUtils.lcm(-a, b));\n        assertEquals(150, MathUtils.lcm(a, -b));\n        assertEquals(2310, MathUtils.lcm(a, c));\n\n        try {\n            MathUtils.lcm(Integer.MAX_VALUE, Integer.MAX_VALUE - 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 406,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 407,col 9)-(line 407,col 19)",
            "(line 408,col 9)-(line 408,col 19)",
            "(line 409,col 9)-(line 409,col 19)",
            "(line 411,col 9)-(line 411,col 45)",
            "(line 412,col 9)-(line 412,col 45)",
            "(line 413,col 9)-(line 413,col 45)",
            "(line 414,col 9)-(line 414,col 45)",
            "(line 415,col 9)-(line 415,col 47)",
            "(line 416,col 9)-(line 416,col 48)",
            "(line 417,col 9)-(line 417,col 48)",
            "(line 418,col 9)-(line 418,col 48)",
            "(line 420,col 9)-(line 425,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testLog()",
        "snippet": "    public void testLog() {\n        assertEquals(2.0, MathUtils.log(2, 4), 0);\n        assertEquals(3.0, MathUtils.log(2, 8), 0);\n        assertTrue(Double.isNaN(MathUtils.log(-1, 1)));\n        assertTrue(Double.isNaN(MathUtils.log(1, -1)));\n        assertTrue(Double.isNaN(MathUtils.log(0, 0)));\n        assertEquals(0, MathUtils.log(0, 10), 0);\n        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.log(10, 0), 0);\n    }\n",
        "begin_line": 428,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 429,col 9)-(line 429,col 50)",
            "(line 430,col 9)-(line 430,col 50)",
            "(line 431,col 9)-(line 431,col 55)",
            "(line 432,col 9)-(line 432,col 55)",
            "(line 433,col 9)-(line 433,col 54)",
            "(line 434,col 9)-(line 434,col 49)",
            "(line 435,col 9)-(line 435,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheck()",
        "snippet": "    public void testMulAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.mulAndCheck(big, 1));\n        try {\n            MathUtils.mulAndCheck(big, 2);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.mulAndCheck(bigNeg, 2);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 438,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 36)",
            "(line 440,col 9)-(line 440,col 39)",
            "(line 441,col 9)-(line 441,col 57)",
            "(line 442,col 9)-(line 446,col 9)",
            "(line 447,col 9)-(line 451,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLong()",
        "snippet": "    public void testMulAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.mulAndCheck(max, 1L));\n        assertEquals(min, MathUtils.mulAndCheck(min, 1L));\n        assertEquals(0L, MathUtils.mulAndCheck(max, 0L));\n        assertEquals(0L, MathUtils.mulAndCheck(min, 0L));\n        assertEquals(max, MathUtils.mulAndCheck(1L, max));\n        assertEquals(min, MathUtils.mulAndCheck(1L, min));\n        assertEquals(0L, MathUtils.mulAndCheck(0L, max));\n        assertEquals(0L, MathUtils.mulAndCheck(0L, min));\n        testMulAndCheckLongFailure(max, 2L);\n        testMulAndCheckLongFailure(2L, max);\n        testMulAndCheckLongFailure(min, 2L);\n        testMulAndCheckLongFailure(2L, min);\n        testMulAndCheckLongFailure(min, -1L);\n        testMulAndCheckLongFailure(-1L, min);\n    }\n",
        "begin_line": 454,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 455,col 9)-(line 455,col 34)",
            "(line 456,col 9)-(line 456,col 34)",
            "(line 457,col 9)-(line 457,col 58)",
            "(line 458,col 9)-(line 458,col 58)",
            "(line 459,col 9)-(line 459,col 57)",
            "(line 460,col 9)-(line 460,col 57)",
            "(line 461,col 9)-(line 461,col 58)",
            "(line 462,col 9)-(line 462,col 58)",
            "(line 463,col 9)-(line 463,col 57)",
            "(line 464,col 9)-(line 464,col 57)",
            "(line 465,col 9)-(line 465,col 44)",
            "(line 466,col 9)-(line 466,col 44)",
            "(line 467,col 9)-(line 467,col 44)",
            "(line 468,col 9)-(line 468,col 44)",
            "(line 469,col 9)-(line 469,col 45)",
            "(line 470,col 9)-(line 470,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testMulAndCheckLongFailure(long, long)",
        "snippet": "    private void testMulAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.mulAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n    }\n",
        "begin_line": 473,
        "end_line": 480,
        "comment": "",
        "child_ranges": [
            "(line 474,col 9)-(line 479,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNextAfter()",
        "snippet": "    public void testNextAfter() {\n        // 0x402fffffffffffff 0x404123456789abcd -> 4030000000000000\n        assertEquals(16.0, MathUtils.nextAfter(15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0xc02fffffffffffff 0x404123456789abcd -> c02ffffffffffffe\n        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 34.27555555555555), 0.0);\n\n        // 0x402fffffffffffff 0x400123456789abcd -> 402ffffffffffffe\n        assertEquals(15.999999999999996, MathUtils.nextAfter(15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0xc02fffffffffffff 0x400123456789abcd -> c02ffffffffffffe\n        assertEquals(-15.999999999999996, MathUtils.nextAfter(-15.999999999999998, 2.142222222222222), 0.0);\n\n        // 0x4020000000000000 0x404123456789abcd -> 4020000000000001\n        assertEquals(8.000000000000002, MathUtils.nextAfter(8.0, 34.27555555555555), 0.0);\n\n        // 0xc020000000000000 0x404123456789abcd -> c01fffffffffffff\n        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 34.27555555555555), 0.0);\n\n        // 0x4020000000000000 0x400123456789abcd -> 401fffffffffffff\n        assertEquals(7.999999999999999, MathUtils.nextAfter(8.0, 2.142222222222222), 0.0);\n\n        // 0xc020000000000000 0x400123456789abcd -> c01fffffffffffff\n        assertEquals(-7.999999999999999, MathUtils.nextAfter(-8.0, 2.142222222222222), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a224 -> 3f2e43753d36a224\n        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a223 -> 3f2e43753d36a224\n        assertEquals(2.308922399667661E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0x3f2e43753d36a222 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a224 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a223 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0x3f2e43753d36a223 0xbf2e43753d36a222 -> 3f2e43753d36a222\n        assertEquals(2.3089223996676603E-4, MathUtils.nextAfter(2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a224 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a223 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0x3f2e43753d36a222 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, 2.3089223996676603E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a224 -> bf2e43753d36a224\n        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.308922399667661E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a223 -> bf2e43753d36a224\n        assertEquals(-2.308922399667661E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676606E-4), 0.0);\n\n        // 0xbf2e43753d36a223 0xbf2e43753d36a222 -> bf2e43753d36a222\n        assertEquals(-2.3089223996676603E-4, MathUtils.nextAfter(-2.3089223996676606E-4, -2.3089223996676603E-4), 0.0);\n\n    }\n",
        "begin_line": 482,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 484,col 9)-(line 484,col 92)",
            "(line 487,col 9)-(line 487,col 108)",
            "(line 490,col 9)-(line 490,col 106)",
            "(line 493,col 9)-(line 493,col 108)",
            "(line 496,col 9)-(line 496,col 90)",
            "(line 499,col 9)-(line 499,col 92)",
            "(line 502,col 9)-(line 502,col 90)",
            "(line 505,col 9)-(line 505,col 92)",
            "(line 508,col 9)-(line 508,col 114)",
            "(line 511,col 9)-(line 511,col 115)",
            "(line 514,col 9)-(line 514,col 116)",
            "(line 517,col 9)-(line 517,col 116)",
            "(line 520,col 9)-(line 520,col 117)",
            "(line 523,col 9)-(line 523,col 117)",
            "(line 526,col 9)-(line 526,col 117)",
            "(line 529,col 9)-(line 529,col 118)",
            "(line 532,col 9)-(line 532,col 118)",
            "(line 535,col 9)-(line 535,col 117)",
            "(line 538,col 9)-(line 538,col 118)",
            "(line 541,col 9)-(line 541,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNextAfterSpecialCases()",
        "snippet": "    public void testNextAfterSpecialCases() {\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.NEGATIVE_INFINITY, 0)));\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.POSITIVE_INFINITY, 0)));\n        assertTrue(Double.isNaN(MathUtils.nextAfter(Double.NaN, 0)));\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(Double.MAX_VALUE, Double.POSITIVE_INFINITY)));\n        assertTrue(Double.isInfinite(MathUtils.nextAfter(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY)));\n        assertEquals(Double.MIN_VALUE, MathUtils.nextAfter(0, 1), 0);\n        assertEquals(-Double.MIN_VALUE, MathUtils.nextAfter(0, -1), 0);\n        assertEquals(0, MathUtils.nextAfter(Double.MIN_VALUE, -1), 0);\n        assertEquals(0, MathUtils.nextAfter(-Double.MIN_VALUE, 1), 0);\n    }\n",
        "begin_line": 545,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 546,col 9)-(line 546,col 88)",
            "(line 547,col 9)-(line 547,col 88)",
            "(line 548,col 9)-(line 548,col 69)",
            "(line 549,col 9)-(line 549,col 103)",
            "(line 550,col 9)-(line 550,col 104)",
            "(line 551,col 9)-(line 551,col 69)",
            "(line 552,col 9)-(line 552,col 71)",
            "(line 553,col 9)-(line 553,col 70)",
            "(line 554,col 9)-(line 554,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testScalb()",
        "snippet": "    public void testScalb() {\n        assertEquals( 0.0, MathUtils.scalb(0.0, 5), 1.0e-15);\n        assertEquals(32.0, MathUtils.scalb(1.0, 5), 1.0e-15);\n        assertEquals(1.0 / 32.0, MathUtils.scalb(1.0,  -5), 1.0e-15);\n        assertEquals(Math.PI, MathUtils.scalb(Math.PI, 0), 1.0e-15);\n        assertTrue(Double.isInfinite(MathUtils.scalb(Double.POSITIVE_INFINITY, 1)));\n        assertTrue(Double.isInfinite(MathUtils.scalb(Double.NEGATIVE_INFINITY, 1)));\n        assertTrue(Double.isNaN(MathUtils.scalb(Double.NaN, 1)));\n    }\n",
        "begin_line": 557,
        "end_line": 565,
        "comment": "",
        "child_ranges": [
            "(line 558,col 9)-(line 558,col 61)",
            "(line 559,col 9)-(line 559,col 61)",
            "(line 560,col 9)-(line 560,col 69)",
            "(line 561,col 9)-(line 561,col 68)",
            "(line 562,col 9)-(line 562,col 84)",
            "(line 563,col 9)-(line 563,col 84)",
            "(line 564,col 9)-(line 564,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testNormalizeAngle()",
        "snippet": "    public void testNormalizeAngle() {\n        for (double a = -15.0; a <= 15.0; a += 0.1) {\n            for (double b = -15.0; b <= 15.0; b += 0.2) {\n                double c = MathUtils.normalizeAngle(a, b);\n                assertTrue((b - Math.PI) <= c);\n                assertTrue(c <= (b + Math.PI));\n                double twoK = Math.rint((a - c) / Math.PI);\n                assertEquals(c, a - twoK * Math.PI, 1.0e-14);\n            }\n        }\n    }\n",
        "begin_line": 567,
        "end_line": 577,
        "comment": "",
        "child_ranges": [
            "(line 568,col 9)-(line 576,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundDouble()",
        "snippet": "    public void testRoundDouble() {\n        double x = 1.234567890;\n        assertEquals(1.23, MathUtils.round(x, 2), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4), 0.0);\n\n        // JIRA MATH-151\n        assertEquals(39.25, MathUtils.round(39.245, 2), 0.0);\n        assertEquals(39.24, MathUtils.round(39.245, 2, BigDecimal.ROUND_DOWN), 0.0);\n        double xx = 39.0;\n        xx = xx + 245d / 1000d;\n        assertEquals(39.25, MathUtils.round(xx, 2), 0.0);\n\n        // BZ 35904\n        assertEquals(30.1d, MathUtils.round(30.095d, 2), 0.0d);\n        assertEquals(30.1d, MathUtils.round(30.095d, 1), 0.0d);\n        assertEquals(33.1d, MathUtils.round(33.095d, 1), 0.0d);\n        assertEquals(33.1d, MathUtils.round(33.095d, 2), 0.0d);\n        assertEquals(50.09d, MathUtils.round(50.085d, 2), 0.0d);\n        assertEquals(50.19d, MathUtils.round(50.185d, 2), 0.0d);\n        assertEquals(50.01d, MathUtils.round(50.005d, 2), 0.0d);\n        assertEquals(30.01d, MathUtils.round(30.005d, 2), 0.0d);\n        assertEquals(30.65d, MathUtils.round(30.645d, 2), 0.0d);\n\n        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.2345, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.234, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.2345, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.234, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.234, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.236, MathUtils.round(1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.236, MathUtils.round(-1.2355, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        assertEquals(1.23, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.23, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-1.2345, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        assertEquals(-1.23, MathUtils.round(-1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        assertEquals(1.23, MathUtils.round(1.23, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, BigDecimal.ROUND_UNNECESSARY);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n        assertEquals(1.24, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.235, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.2346, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.24, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.235, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.2346, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234, 2, 1923);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n\n        // MATH-151\n        assertEquals(39.25, MathUtils.round(39.245, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        // special values\n        TestUtils.assertEquals(Double.NaN, MathUtils.round(Double.NaN, 2), 0.0);\n        assertEquals(0.0, MathUtils.round(0.0, 2), 0.0);\n        assertEquals(Double.POSITIVE_INFINITY, MathUtils.round(Double.POSITIVE_INFINITY, 2), 0.0);\n        assertEquals(Double.NEGATIVE_INFINITY, MathUtils.round(Double.NEGATIVE_INFINITY, 2), 0.0);\n    }\n",
        "begin_line": 579,
        "end_line": 685,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 31)",
            "(line 581,col 9)-(line 581,col 55)",
            "(line 582,col 9)-(line 582,col 56)",
            "(line 583,col 9)-(line 583,col 57)",
            "(line 586,col 9)-(line 586,col 61)",
            "(line 587,col 9)-(line 587,col 84)",
            "(line 588,col 9)-(line 588,col 25)",
            "(line 589,col 9)-(line 589,col 31)",
            "(line 590,col 9)-(line 590,col 57)",
            "(line 593,col 9)-(line 593,col 63)",
            "(line 594,col 9)-(line 594,col 63)",
            "(line 595,col 9)-(line 595,col 63)",
            "(line 596,col 9)-(line 596,col 63)",
            "(line 597,col 9)-(line 597,col 64)",
            "(line 598,col 9)-(line 598,col 64)",
            "(line 599,col 9)-(line 599,col 64)",
            "(line 600,col 9)-(line 600,col 64)",
            "(line 601,col 9)-(line 601,col 64)",
            "(line 603,col 9)-(line 603,col 81)",
            "(line 604,col 9)-(line 604,col 82)",
            "(line 605,col 9)-(line 605,col 83)",
            "(line 606,col 9)-(line 606,col 83)",
            "(line 607,col 9)-(line 607,col 84)",
            "(line 608,col 9)-(line 608,col 85)",
            "(line 610,col 9)-(line 610,col 78)",
            "(line 611,col 9)-(line 611,col 79)",
            "(line 612,col 9)-(line 612,col 80)",
            "(line 613,col 9)-(line 613,col 80)",
            "(line 614,col 9)-(line 614,col 81)",
            "(line 615,col 9)-(line 615,col 82)",
            "(line 617,col 9)-(line 617,col 79)",
            "(line 618,col 9)-(line 618,col 80)",
            "(line 619,col 9)-(line 619,col 81)",
            "(line 620,col 9)-(line 620,col 81)",
            "(line 621,col 9)-(line 621,col 82)",
            "(line 622,col 9)-(line 622,col 83)",
            "(line 624,col 9)-(line 624,col 83)",
            "(line 625,col 9)-(line 625,col 84)",
            "(line 626,col 9)-(line 626,col 85)",
            "(line 627,col 9)-(line 627,col 85)",
            "(line 628,col 9)-(line 628,col 86)",
            "(line 629,col 9)-(line 629,col 87)",
            "(line 630,col 9)-(line 630,col 89)",
            "(line 631,col 9)-(line 631,col 91)",
            "(line 633,col 9)-(line 633,col 83)",
            "(line 634,col 9)-(line 634,col 84)",
            "(line 635,col 9)-(line 635,col 85)",
            "(line 636,col 9)-(line 636,col 85)",
            "(line 637,col 9)-(line 637,col 86)",
            "(line 638,col 9)-(line 638,col 87)",
            "(line 639,col 9)-(line 639,col 89)",
            "(line 640,col 9)-(line 640,col 91)",
            "(line 641,col 9)-(line 641,col 89)",
            "(line 642,col 9)-(line 642,col 91)",
            "(line 644,col 9)-(line 644,col 81)",
            "(line 645,col 9)-(line 645,col 82)",
            "(line 646,col 9)-(line 646,col 83)",
            "(line 647,col 9)-(line 647,col 83)",
            "(line 648,col 9)-(line 648,col 84)",
            "(line 649,col 9)-(line 649,col 85)",
            "(line 650,col 9)-(line 650,col 87)",
            "(line 651,col 9)-(line 651,col 89)",
            "(line 653,col 9)-(line 653,col 90)",
            "(line 654,col 9)-(line 654,col 88)",
            "(line 656,col 9)-(line 661,col 9)",
            "(line 663,col 9)-(line 663,col 76)",
            "(line 664,col 9)-(line 664,col 77)",
            "(line 665,col 9)-(line 665,col 78)",
            "(line 666,col 9)-(line 666,col 78)",
            "(line 667,col 9)-(line 667,col 79)",
            "(line 668,col 9)-(line 668,col 80)",
            "(line 670,col 9)-(line 675,col 9)",
            "(line 678,col 9)-(line 678,col 87)",
            "(line 681,col 9)-(line 681,col 80)",
            "(line 682,col 9)-(line 682,col 56)",
            "(line 683,col 9)-(line 683,col 98)",
            "(line 684,col 9)-(line 684,col 98)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testRoundFloat()",
        "snippet": "    public void testRoundFloat() {\n        float x = 1.234567890f;\n        assertEquals(1.23f, MathUtils.round(x, 2), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4), 0.0);\n\n        // BZ 35904\n        assertEquals(30.1f, MathUtils.round(30.095f, 2), 0.0f);\n        assertEquals(30.1f, MathUtils.round(30.095f, 1), 0.0f);\n        assertEquals(50.09f, MathUtils.round(50.085f, 2), 0.0f);\n        assertEquals(50.19f, MathUtils.round(50.185f, 2), 0.0f);\n        assertEquals(50.01f, MathUtils.round(50.005f, 2), 0.0f);\n        assertEquals(30.01f, MathUtils.round(30.005f, 2), 0.0f);\n        assertEquals(30.65f, MathUtils.round(30.645f, 2), 0.0f);\n\n        assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_CEILING), 0.0);\n        assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_CEILING), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-x, 3, BigDecimal.ROUND_DOWN), 0.0);\n        assertEquals(-1.2345f, MathUtils.round(-x, 4, BigDecimal.ROUND_DOWN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.234f, MathUtils.round(x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(1.2345f, MathUtils.round(x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_FLOOR), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_FLOOR), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_DOWN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.234f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.234f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(1.236f, MathUtils.round(1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n        assertEquals(-1.236f, MathUtils.round(-1.2355f, 3, BigDecimal.ROUND_HALF_EVEN), 0.0);\n\n        assertEquals(1.23f, MathUtils.round(x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.23f, MathUtils.round(-x, 2, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-1.2345f, 3, BigDecimal.ROUND_HALF_UP), 0.0);\n\n        assertEquals(-1.23f, MathUtils.round(-1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n        assertEquals(1.23f, MathUtils.round(1.23f, 2, BigDecimal.ROUND_UNNECESSARY), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, BigDecimal.ROUND_UNNECESSARY);\n            fail();\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n        assertEquals(1.24f, MathUtils.round(x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.235f, MathUtils.round(x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(1.2346f, MathUtils.round(x, 4, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.24f, MathUtils.round(-x, 2, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.235f, MathUtils.round(-x, 3, BigDecimal.ROUND_UP), 0.0);\n        assertEquals(-1.2346f, MathUtils.round(-x, 4, BigDecimal.ROUND_UP), 0.0);\n\n        try {\n            MathUtils.round(1.234f, 2, 1923);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            // success\n        }\n\n        // special values\n        TestUtils.assertEquals(Float.NaN, MathUtils.round(Float.NaN, 2), 0.0f);\n        assertEquals(0.0f, MathUtils.round(0.0f, 2), 0.0f);\n        assertEquals(Float.POSITIVE_INFINITY, MathUtils.round(Float.POSITIVE_INFINITY, 2), 0.0f);\n        assertEquals(Float.NEGATIVE_INFINITY, MathUtils.round(Float.NEGATIVE_INFINITY, 2), 0.0f);\n    }\n",
        "begin_line": 687,
        "end_line": 781,
        "comment": "",
        "child_ranges": [
            "(line 688,col 9)-(line 688,col 31)",
            "(line 689,col 9)-(line 689,col 56)",
            "(line 690,col 9)-(line 690,col 57)",
            "(line 691,col 9)-(line 691,col 58)",
            "(line 694,col 9)-(line 694,col 63)",
            "(line 695,col 9)-(line 695,col 63)",
            "(line 696,col 9)-(line 696,col 64)",
            "(line 697,col 9)-(line 697,col 64)",
            "(line 698,col 9)-(line 698,col 64)",
            "(line 699,col 9)-(line 699,col 64)",
            "(line 700,col 9)-(line 700,col 64)",
            "(line 702,col 9)-(line 702,col 82)",
            "(line 703,col 9)-(line 703,col 83)",
            "(line 704,col 9)-(line 704,col 84)",
            "(line 705,col 9)-(line 705,col 84)",
            "(line 706,col 9)-(line 706,col 85)",
            "(line 707,col 9)-(line 707,col 86)",
            "(line 709,col 9)-(line 709,col 79)",
            "(line 710,col 9)-(line 710,col 80)",
            "(line 711,col 9)-(line 711,col 81)",
            "(line 712,col 9)-(line 712,col 81)",
            "(line 713,col 9)-(line 713,col 82)",
            "(line 714,col 9)-(line 714,col 83)",
            "(line 716,col 9)-(line 716,col 80)",
            "(line 717,col 9)-(line 717,col 81)",
            "(line 718,col 9)-(line 718,col 82)",
            "(line 719,col 9)-(line 719,col 82)",
            "(line 720,col 9)-(line 720,col 83)",
            "(line 721,col 9)-(line 721,col 84)",
            "(line 723,col 9)-(line 723,col 84)",
            "(line 724,col 9)-(line 724,col 85)",
            "(line 725,col 9)-(line 725,col 86)",
            "(line 726,col 9)-(line 726,col 86)",
            "(line 727,col 9)-(line 727,col 87)",
            "(line 728,col 9)-(line 728,col 88)",
            "(line 729,col 9)-(line 729,col 91)",
            "(line 730,col 9)-(line 730,col 93)",
            "(line 732,col 9)-(line 732,col 84)",
            "(line 733,col 9)-(line 733,col 85)",
            "(line 734,col 9)-(line 734,col 86)",
            "(line 735,col 9)-(line 735,col 86)",
            "(line 736,col 9)-(line 736,col 87)",
            "(line 737,col 9)-(line 737,col 88)",
            "(line 738,col 9)-(line 738,col 91)",
            "(line 739,col 9)-(line 739,col 93)",
            "(line 740,col 9)-(line 740,col 91)",
            "(line 741,col 9)-(line 741,col 93)",
            "(line 743,col 9)-(line 743,col 82)",
            "(line 744,col 9)-(line 744,col 83)",
            "(line 745,col 9)-(line 745,col 84)",
            "(line 746,col 9)-(line 746,col 84)",
            "(line 747,col 9)-(line 747,col 85)",
            "(line 748,col 9)-(line 748,col 86)",
            "(line 749,col 9)-(line 749,col 89)",
            "(line 750,col 9)-(line 750,col 91)",
            "(line 752,col 9)-(line 752,col 92)",
            "(line 753,col 9)-(line 753,col 90)",
            "(line 755,col 9)-(line 760,col 9)",
            "(line 762,col 9)-(line 762,col 77)",
            "(line 763,col 9)-(line 763,col 78)",
            "(line 764,col 9)-(line 764,col 79)",
            "(line 765,col 9)-(line 765,col 79)",
            "(line 766,col 9)-(line 766,col 80)",
            "(line 767,col 9)-(line 767,col 81)",
            "(line 769,col 9)-(line 774,col 9)",
            "(line 777,col 9)-(line 777,col 79)",
            "(line 778,col 9)-(line 778,col 59)",
            "(line 779,col 9)-(line 779,col 97)",
            "(line 780,col 9)-(line 780,col 97)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignByte()",
        "snippet": "    public void testSignByte() {\n        assertEquals((byte)1, MathUtils.indicator((byte)2));\n        assertEquals((byte)(-1), MathUtils.indicator((byte)(-2)));\n    }\n",
        "begin_line": 783,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 784,col 9)-(line 784,col 60)",
            "(line 785,col 9)-(line 785,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignDouble()",
        "snippet": "    public void testSignDouble() {\n        double delta = 0.0;\n        assertEquals(1.0, MathUtils.indicator(2.0), delta);\n        assertEquals(-1.0, MathUtils.indicator(-2.0), delta);\n    }\n",
        "begin_line": 788,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 789,col 9)-(line 789,col 27)",
            "(line 790,col 9)-(line 790,col 59)",
            "(line 791,col 9)-(line 791,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignFloat()",
        "snippet": "    public void testSignFloat() {\n        float delta = 0.0F;\n        assertEquals(1.0F, MathUtils.indicator(2.0F), delta);\n        assertEquals(-1.0F, MathUtils.indicator(-2.0F), delta);\n    }\n",
        "begin_line": 794,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 795,col 9)-(line 795,col 27)",
            "(line 796,col 9)-(line 796,col 61)",
            "(line 797,col 9)-(line 797,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignInt()",
        "snippet": "    public void testSignInt() {\n        assertEquals((int)1, MathUtils.indicator((int)(2)));\n        assertEquals((int)(-1), MathUtils.indicator((int)(-2)));\n    }\n",
        "begin_line": 800,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 801,col 9)-(line 801,col 60)",
            "(line 802,col 9)-(line 802,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignLong()",
        "snippet": "    public void testSignLong() {\n        assertEquals(1L, MathUtils.indicator(2L));\n        assertEquals(-1L, MathUtils.indicator(-2L));\n    }\n",
        "begin_line": 805,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 806,col 9)-(line 806,col 50)",
            "(line 807,col 9)-(line 807,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSignShort()",
        "snippet": "    public void testSignShort() {\n        assertEquals((short)1, MathUtils.indicator((short)2));\n        assertEquals((short)(-1), MathUtils.indicator((short)(-2)));\n    }\n",
        "begin_line": 810,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 811,col 9)-(line 811,col 62)",
            "(line 812,col 9)-(line 812,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSinh()",
        "snippet": "    public void testSinh() {\n        double x = 3.0;\n        double expected = 10.01787;\n        assertEquals(expected, MathUtils.sinh(x), 1.0e-5);\n    }\n",
        "begin_line": 815,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 816,col 9)-(line 816,col 23)",
            "(line 817,col 9)-(line 817,col 35)",
            "(line 818,col 9)-(line 818,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSinhNaN()",
        "snippet": "    public void testSinhNaN() {\n        assertTrue(Double.isNaN(MathUtils.sinh(Double.NaN)));\n    }\n",
        "begin_line": 821,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 822,col 9)-(line 822,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheck()",
        "snippet": "    public void testSubAndCheck() {\n        int big = Integer.MAX_VALUE;\n        int bigNeg = Integer.MIN_VALUE;\n        assertEquals(big, MathUtils.subAndCheck(big, 0));\n        try {\n            MathUtils.subAndCheck(big, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n        try {\n            MathUtils.subAndCheck(bigNeg, 1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n        }\n    }\n",
        "begin_line": 825,
        "end_line": 839,
        "comment": "",
        "child_ranges": [
            "(line 826,col 9)-(line 826,col 36)",
            "(line 827,col 9)-(line 827,col 39)",
            "(line 828,col 9)-(line 828,col 57)",
            "(line 829,col 9)-(line 833,col 9)",
            "(line 834,col 9)-(line 838,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckErrorMessage()",
        "snippet": "    public void testSubAndCheckErrorMessage() {\n        int big = Integer.MAX_VALUE;\n        try {\n            MathUtils.subAndCheck(big, -1);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            assertEquals(\"overflow: subtract\", ex.getMessage());\n        }\n    }\n",
        "begin_line": 841,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 842,col 9)-(line 842,col 36)",
            "(line 843,col 9)-(line 848,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLong()",
        "snippet": "    public void testSubAndCheckLong() {\n        long max = Long.MAX_VALUE;\n        long min = Long.MIN_VALUE;\n        assertEquals(max, MathUtils.subAndCheck(max, 0));\n        assertEquals(min, MathUtils.subAndCheck(min, 0));\n        assertEquals(-max, MathUtils.subAndCheck(0, max));\n        testSubAndCheckLongFailure(0L, min);\n        testSubAndCheckLongFailure(max, -1L);\n        testSubAndCheckLongFailure(min, 1L);\n    }\n",
        "begin_line": 851,
        "end_line": 860,
        "comment": "",
        "child_ranges": [
            "(line 852,col 9)-(line 852,col 34)",
            "(line 853,col 9)-(line 853,col 34)",
            "(line 854,col 9)-(line 854,col 57)",
            "(line 855,col 9)-(line 855,col 57)",
            "(line 856,col 9)-(line 856,col 58)",
            "(line 857,col 9)-(line 857,col 44)",
            "(line 858,col 9)-(line 858,col 45)",
            "(line 859,col 9)-(line 859,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/util/MathUtilsTest.java",
        "signature": "org.apache.commons.math.util.MathUtilsTest.testSubAndCheckLongFailure(long, long)",
        "snippet": "    private void testSubAndCheckLongFailure(long a, long b) {\n        try {\n            MathUtils.subAndCheck(a, b);\n            fail(\"Expecting ArithmeticException\");\n        } catch (ArithmeticException ex) {\n            // success\n        }\n\n    }\n",
        "begin_line": 862,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 863,col 9)-(line 868,col 9)"
        ]
    }
]