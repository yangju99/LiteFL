[
    {
        "name": "ToStringBuilder.reflectionToString#154",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.reflectionToString(java.lang.Object)",
        "snippet": "    public static String reflectionToString(Object object) {\n        return ReflectionToStringBuilder.toString(object);\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n     * <code>toString</code> for the specified object.</p>\n     * \n     * @param object  the Object to be output\n     * @return the String result\n     * @see ReflectionToStringBuilder#toString(Object)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9135
        },
        "num_failing_tests": 26
    },
    {
        "name": "ReflectionToStringBuilder.toString#122",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(java.lang.Object)",
        "snippet": "    public static String toString(Object object) {\n        return toString(object, null, false, false, null);\n    }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value using the default <code>ToStringStyle</code> through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n     * Superclass fields will be appended.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8987
        },
        "num_failing_tests": 26
    },
    {
        "name": "ToStringStyle.reflectionAppendArrayDetail#922",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.reflectionAppendArrayDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
        "snippet": "    protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {\n        buffer.append(arrayStart);\n        int length = Array.getLength(array);\n        for (int i = 0; i < length; i++) {\n            Object item = Array.get(array, i);\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            if (item == null) {\n                appendNullText(buffer, fieldName);\n\n            } else {\n                appendInternal(buffer, fieldName, item, arrayContentDetail);\n            }\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 922,
        "end_line": 938,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of an array type.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 21
    },
    {
        "name": "ReflectionToStringBuilder.appendFieldsIn#525",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.appendFieldsIn(java.lang.Class<?>)",
        "snippet": "    protected void appendFieldsIn(Class<?> clazz) {\n        if (clazz.isArray()) {\n            this.reflectionAppendArray(this.getObject());\n            return;\n        }\n        Field[] fields = clazz.getDeclaredFields();\n        AccessibleObject.setAccessible(fields, true);\n        for (Field field : fields) {\n            String fieldName = field.getName();\n            if (this.accept(field)) {\n                try {\n                    // Warning: Field.get(Object) creates wrappers objects\n                    // for primitive types.\n                    Object fieldValue = this.getValue(field);\n                    this.append(fieldName, fieldValue);\n                } catch (IllegalAccessException ex) {\n                    //this can't happen. Would get a Security exception\n                    // instead\n                    //throw a runtime exception in case the impossible\n                    // happens.\n                    throw new InternalError(\"Unexpected IllegalAccessException: \" + ex.getMessage());\n                }\n            }\n        }\n    }\n",
        "begin_line": 525,
        "end_line": 549,
        "comment": "\n     * <p>\n     * Appends the fields and values defined by the given object of the given Class.\n     * </p>\n     * \n     * <p>\n     * If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if\n     * <code>Object.toString()</code> had been called and not implemented by the object.\n     * </p>\n     * \n     * @param clazz\n     *            The class of object parameter\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 26
    },
    {
        "name": "ReflectionToStringBuilder.reflectionAppendArray#621",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.reflectionAppendArray(java.lang.Object)",
        "snippet": "    public ReflectionToStringBuilder reflectionAppendArray(Object array) {\n        this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(), null, array);\n        return this;\n    }\n",
        "begin_line": 621,
        "end_line": 624,
        "comment": "\n     * <p>\n     * Append to the <code>toString</code> an <code>Object</code> array.\n     * </p>\n     * \n     * @param array\n     *            the array to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8819
        },
        "num_failing_tests": 21
    },
    {
        "name": "ReflectionToStringBuilder.toString#287",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(T, org.apache.commons.lang3.builder.ToStringStyle, boolean, boolean, java.lang.Class<? super T>)",
        "snippet": "    public static <T> String toString(\n            T object, ToStringStyle style, boolean outputTransients,\n            boolean outputStatics, Class<? super T> reflectUpToClass) {\n        return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients, outputStatics)\n                .toString();\n    }\n",
        "begin_line": 287,
        "end_line": 292,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they\n     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n     * </p>\n     * \n     * <p>\n     * If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are\n     * ignored.\n     * </p>\n     * \n     * <p>\n     * Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as\n     * <code>java.lang.Object</code>.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     * @param outputStatics\n     *            whether to include static fields\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object is <code>null</code>\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 26
    },
    {
        "name": "ReflectionToStringBuilder.ReflectionToStringBuilder#470",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.ReflectionToStringBuilder(T, org.apache.commons.lang3.builder.ToStringStyle, java.lang.StringBuffer, java.lang.Class<? super T>, boolean, boolean)",
        "snippet": "    public <T> ReflectionToStringBuilder(\n            T object, ToStringStyle style, StringBuffer buffer,\n            Class<? super T> reflectUpToClass, boolean outputTransients, boolean outputStatics) {\n        super(object, style, buffer);\n        this.setUpToClass(reflectUpToClass);\n        this.setAppendTransients(outputTransients);\n        this.setAppendStatics(outputStatics);\n    }\n",
        "begin_line": 470,
        "end_line": 477,
        "comment": "\n     * Constructor.\n     * \n     * @param object\n     *            the Object to build a <code>toString</code> for\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param buffer\n     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n     * @param reflectUpToClass\n     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @param outputTransients\n     *            whether to include transient fields\n     * @param outputStatics\n     *            whether to include static fields\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 26
    },
    {
        "name": "ReflectionToStringBuilder.setAppendStatics#635",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.setAppendStatics(boolean)",
        "snippet": "    public void setAppendStatics(boolean appendStatics) {\n        this.appendStatics = appendStatics;\n    }\n",
        "begin_line": 635,
        "end_line": 637,
        "comment": "\n     * <p>\n     * Sets whether or not to append static fields.\n     * </p>\n     * \n     * @param appendStatics\n     *            Whether or not to append static fields.\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 26
    },
    {
        "name": "ReflectionToStringBuilder.setAppendTransients#647",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.setAppendTransients(boolean)",
        "snippet": "    public void setAppendTransients(boolean appendTransients) {\n        this.appendTransients = appendTransients;\n    }\n",
        "begin_line": 647,
        "end_line": 649,
        "comment": "\n     * <p>\n     * Sets whether or not to append transient fields.\n     * </p>\n     * \n     * @param appendTransients\n     *            Whether or not to append transient fields.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 26
    },
    {
        "name": "ReflectionToStringBuilder.setUpToClass#676",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.setUpToClass(java.lang.Class<?>)",
        "snippet": "    public void setUpToClass(Class<?> clazz) {\n        if (clazz != null) {\n            Object object = getObject();\n            if (object != null && clazz.isInstance(object) == false) {\n                throw new IllegalArgumentException(\"Specified class is not a superclass of the object\");\n            }\n        }\n        this.upToClass = clazz;\n    }\n",
        "begin_line": 676,
        "end_line": 684,
        "comment": "\n     * <p>\n     * Sets the last super class to stop appending fields for.\n     * </p>\n     * \n     * @param clazz\n     *            The last super class to stop appending fields for.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8458
        },
        "num_failing_tests": 26
    },
    {
        "name": "ToStringBuilder.getStyle#1044",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.getStyle()",
        "snippet": "    public ToStringStyle getStyle() {\n        return style;\n    }\n",
        "begin_line": 1044,
        "end_line": 1046,
        "comment": "\n     * <p>Gets the <code>ToStringStyle</code> being used.</p>\n     * \n     * @return the <code>ToStringStyle</code> being used\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8083
        },
        "num_failing_tests": 21
    },
    {
        "name": "ReflectionToStringBuilder.toString#693",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString()",
        "snippet": "    @Override\n    public String toString() {\n        if (this.getObject() == null) {\n            return this.getStyle().getNullText();\n        }\n        Class<?> clazz = this.getObject().getClass();\n        this.appendFieldsIn(clazz);\n        while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {\n            clazz = clazz.getSuperclass();\n            this.appendFieldsIn(clazz);\n        }\n        return super.toString();\n    }\n",
        "begin_line": 693,
        "end_line": 705,
        "comment": "\n     * <p>\n     * Gets the String built by this builder.\n     * </p>\n     * \n     * @return the built string\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7721
        },
        "num_failing_tests": 26
    },
    {
        "name": "ReflectionToStringBuilder.getUpToClass#565",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.getUpToClass()",
        "snippet": "    public Class<?> getUpToClass() {\n        return this.upToClass;\n    }\n",
        "begin_line": 565,
        "end_line": 567,
        "comment": "\n     * <p>\n     * Gets the last super class to stop appending fields for.\n     * </p>\n     * \n     * @return The last super class to stop appending fields for.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7543
        },
        "num_failing_tests": 26
    },
    {
        "name": "ToStringStyle.removeLastFieldSeparator#406",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.removeLastFieldSeparator(java.lang.StringBuffer)",
        "snippet": "    protected void removeLastFieldSeparator(StringBuffer buffer) {\n        int len = buffer.length();\n        int sepLen = fieldSeparator.length();\n        if (len > 0 && sepLen > 0 && len >= sepLen) {\n            boolean match = true;\n            for (int i = 0; i < sepLen; i++) {\n                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\n                    match = false;\n                    break;\n                }\n            }\n            if (match) {\n                buffer.setLength(len - sepLen);\n            }\n        }\n    }\n",
        "begin_line": 406,
        "end_line": 421,
        "comment": "\n     * <p>Remove the last field separator from the buffer.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6931
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendInternal#468",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendInternal(java.lang.StringBuffer, java.lang.String, java.lang.Object, boolean)",
        "snippet": "    protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\n        if (isRegistered(value)\n            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n           appendCyclicObject(buffer, fieldName, value);\n           return;\n        }\n\n        register(value);\n\n        try {\n            if (value instanceof Collection<?>) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (Collection<?>) value);\n                } else {\n                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\n                }\n\n            } else if (value instanceof Map<?, ?>) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\n                } else {\n                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\n                }\n\n            } else if (value instanceof long[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (long[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (long[]) value);\n                }\n\n            } else if (value instanceof int[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (int[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (int[]) value);\n                }\n\n            } else if (value instanceof short[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (short[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (short[]) value);\n                }\n\n            } else if (value instanceof byte[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (byte[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (byte[]) value);\n                }\n\n            } else if (value instanceof char[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (char[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (char[]) value);\n                }\n\n            } else if (value instanceof double[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (double[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (double[]) value);\n                }\n\n            } else if (value instanceof float[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (float[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (float[]) value);\n                }\n\n            } else if (value instanceof boolean[]) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (boolean[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (boolean[]) value);\n                }\n\n            } else if (value.getClass().isArray()) {\n                if (detail) {\n                    appendDetail(buffer, fieldName, (Object[]) value);\n                } else {\n                    appendSummary(buffer, fieldName, (Object[]) value);\n                }\n\n            } else {\n                    if (detail) {\n                        appendDetail(buffer, fieldName, value);\n                    } else {\n                        appendSummary(buffer, fieldName, value);\n                    }\n            }\n        } finally {\n            unregister(value);\n        }\n    }\n",
        "begin_line": 468,
        "end_line": 565,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>,\n     * correctly interpreting its type.</p>\n     *\n     * <p>This method performs the main lookup by Class type to correctly\n     * route arrays, <code>Collections</code>, <code>Maps</code> and\n     * <code>Objects</code> to the appropriate method.</p>\n     *\n     * <p>Either detail or summary views can be specified.</p>\n     *\n     * <p>If a cycle is detected, an object will be appended with the\n     * <code>Object.toString()</code> format.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>,\n     *  not <code>null</code>\n     * @param detail  output detail or not\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendCyclicObject#579",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendCyclicObject(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
        "snippet": "    protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) {\n       ObjectUtils.identityToString(buffer, value);\n    }\n",
        "begin_line": 579,
        "end_line": 581,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value that has been detected to participate in a cycle. This\n     * implementation will print the standard string value of the value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>,\n     *  not <code>null</code>\n     *\n     * @since 2.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 9
    },
    {
        "name": "ObjectUtils.identityToString#214",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ObjectUtils.java",
        "class_name": "org.apache.commons.lang3.ObjectUtils",
        "signature": "org.apache.commons.lang3.ObjectUtils.identityToString(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    public static void identityToString(StringBuffer buffer, Object object) {\n        if (object == null) {\n            throw new NullPointerException(\"Cannot get the toString of a null identity\");\n        }\n        buffer.append(object.getClass().getName())\n              .append('@')\n              .append(Integer.toHexString(System.identityHashCode(object)));\n    }\n",
        "begin_line": 214,
        "end_line": 221,
        "comment": "\n     * <p>Appends the toString that would be produced by <code>Object</code>\n     * if a class did not override toString itself. <code>null</code>\n     * will throw a NullPointerException for either of the two parameters. </p>\n     *\n     * <pre>\n     * ObjectUtils.identityToString(buf, \"\")            = buf.append(\"java.lang.String@1e23\"\n     * ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append(\"java.lang.Boolean@7fa\"\n     * ObjectUtils.identityToString(buf, Boolean.TRUE)  = buf.append(\"java.lang.Boolean@7fa\")\n     * </pre>\n     *\n     * @param buffer  the buffer to append to\n     * @param object  the object to create a toString for\n     * @since 2.4\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 9
    },
    {
        "name": "ToStringStyle.appendClassName#1449",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendClassName(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    protected void appendClassName(StringBuffer buffer, Object object) {\n        if (useClassName && object != null) {\n            register(object);\n            if (useShortClassName) {\n                buffer.append(getShortClassName(object.getClass()));\n            } else {\n                buffer.append(object.getClass().getName());\n            }\n        }\n    }\n",
        "begin_line": 1449,
        "end_line": 1458,
        "comment": "\n     * <p>Append to the <code>toString</code> the class name.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> whose name to output\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.512
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendIdentityHashCode#1466",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendIdentityHashCode(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n        if (this.isUseIdentityHashCode() && object!=null) {\n            register(object);\n            buffer.append('@');\n            buffer.append(Integer.toHexString(System.identityHashCode(object)));\n        }\n    }\n",
        "begin_line": 1466,
        "end_line": 1472,
        "comment": "\n     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> whose id to output\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.512
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.getRegistry#147",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.getRegistry()",
        "snippet": "    static Map<Object, Object> getRegistry() {\n        return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * <p>\n     * Returns the registry of objects being traversed by the <code>reflectionToString</code>\n     * methods in the current thread.\n     * </p>\n     *\n     * @return Set the registry of objects being traversed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4932
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.isRegistered#162",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.isRegistered(java.lang.Object)",
        "snippet": "    static boolean isRegistered(Object value) {\n        Map<Object, Object> m = getRegistry();\n        return m.containsKey(value);\n    }\n",
        "begin_line": 162,
        "end_line": 165,
        "comment": "\n     * <p>\n     * Returns <code>true</code> if the registry contains the given object.\n     * Used by the reflection methods to avoid infinite loops.\n     * </p>\n     *\n     * @param value\n     *                  The object to lookup in the registry.\n     * @return boolean <code>true</code> if the registry contains the given\n     *             object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4932
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringBuilder.ToStringBuilder#254",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.ToStringBuilder(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle, java.lang.StringBuffer)",
        "snippet": "    public ToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n        if (style == null) {\n            style = getDefaultStyle();\n        }\n        if (buffer == null) {\n            buffer = new StringBuffer(512);\n        }\n        this.buffer = buffer;\n        this.style = style;\n        this.object = object;\n\n        style.appendStart(buffer, object);\n    }\n",
        "begin_line": 254,
        "end_line": 266,
        "comment": "\n     * <p>Constructs a builder for the specified object.</p>\n     *\n     * <p>If the style is <code>null</code>, the default style is used.</p>\n     *\n     * <p>If the buffer is <code>null</code>, a new one is created.</p>\n     * \n     * @param object  the Object to build a <code>toString</code> for, not recommended to be null\n     * @param style  the style of the <code>toString</code> to create, null uses the default style\n     * @param buffer  the <code>StringBuffer</code> to populate, may be null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4575
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringBuilder.getDefaultStyle#119",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.getDefaultStyle()",
        "snippet": "    public static ToStringStyle getDefaultStyle() {\n        return defaultStyle;\n    }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n     * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n     * \n     * <p>This method gets a singleton default value, typically for the whole JVM.\n     * Changing this default should generally only be done during application startup.\n     * It is recommended to pass a <code>ToStringStyle</code> to the constructor instead\n     * of using this global default.</p>\n     * \n     * <p>This method can be used from multiple threads.\n     * Internally, a <code>volatile</code> variable is used to provide the guarantee\n     * that the latest value set using {@link #setDefaultStyle} is the value returned.\n     * It is strongly recommended that the default style is only changed during application startup.</p>\n     * \n     * <p>One reason for changing the default could be to have a verbose style during\n     * development and a compact style in production.</p>\n     * \n     * @return the default <code>ToStringStyle</code>, never null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4557
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.unregister#202",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.unregister(java.lang.Object)",
        "snippet": "    static void unregister(Object value) {\n        if (value != null) {\n            WeakHashMap<Object, Object> m;\n            synchronized (ToStringStyle.class) {\n                m = REGISTRY.get();\n                if (m != null) {\n                    m.remove(value);\n                    if (m.isEmpty()) {\n                        REGISTRY.remove();\n                    }\n                }\n            }\n        }\n    }\n",
        "begin_line": 202,
        "end_line": 215,
        "comment": "\n     * <p>\n     * Unregisters the given object.\n     * </p>\n     *\n     * <p>\n     * Used by the reflection methods to avoid infinite loops.\n     * </p>\n     *\n     * @param value\n     *                  The object to unregister.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.454
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendEnd#392",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendEnd(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    public void appendEnd(StringBuffer buffer, Object object) {\n        if (this.fieldSeparatorAtEnd == false) {\n            removeLastFieldSeparator(buffer);\n        }\n        appendContentEnd(buffer);\n        unregister(object);\n    }\n",
        "begin_line": 392,
        "end_line": 398,
        "comment": "\n     * <p>Append to the <code>toString</code> the end of data indicator.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> to build a\n     *  <code>toString</code> for.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4506
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendContentEnd#1488",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendContentEnd(java.lang.StringBuffer)",
        "snippet": "    protected void appendContentEnd(StringBuffer buffer) {\n        buffer.append(contentEnd);\n    }\n",
        "begin_line": 1488,
        "end_line": 1490,
        "comment": "\n     * <p>Append to the <code>toString</code> the content end.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4506
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringBuilder.toString#1058",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.toString()",
        "snippet": "    @Override\n    public String toString() {\n        if (this.getObject() == null) {\n            this.getStringBuffer().append(this.getStyle().getNullText());\n        } else {\n            style.appendEnd(this.getStringBuffer(), this.getObject());\n        }\n        return this.getStringBuffer().toString();\n    }\n",
        "begin_line": 1058,
        "end_line": 1066,
        "comment": "\n     * <p>Returns the built <code>toString</code>.</p>\n     * \n     * <p>This method appends the end of data indicator, and can only be called once.\n     * Use {@link #getStringBuffer} to get the current string state.</p>\n     * \n     * <p>If the object is <code>null</code>, return the style's <code>nullText</code></p>\n     * \n     * @return the String <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4506
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.register#176",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.register(java.lang.Object)",
        "snippet": "    static void register(Object value) {\n        if (value != null) {\n            WeakHashMap<Object, Object> m;\n            synchronized (ToStringStyle.class) {\n                m = REGISTRY.get();\n                if (m == null) {\n                    m = new WeakHashMap<Object, Object>();\n                    REGISTRY.set(m);\n                }\n            }\n            m.put(value, null);\n        }\n    }\n",
        "begin_line": 176,
        "end_line": 188,
        "comment": "\n     * <p>\n     * Registers the given object. Used by the reflection methods to avoid\n     * infinite loops.\n     * </p>\n     *\n     * @param value\n     *                  The object to register.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4489
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringBuilder.getStringBuffer#1032",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.getStringBuffer()",
        "snippet": "    public StringBuffer getStringBuffer() {\n        return buffer;\n    }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "\n     * <p>Gets the <code>StringBuffer</code> being populated.</p>\n     * \n     * @return the <code>StringBuffer</code> being populated\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendStart#374",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendStart(java.lang.StringBuffer, java.lang.Object)",
        "snippet": "    public void appendStart(StringBuffer buffer, Object object) {\n        if (object != null) {\n            appendClassName(buffer, object);\n            appendIdentityHashCode(buffer, object);\n            appendContentStart(buffer);\n            if (fieldSeparatorAtStart) {\n                appendFieldSeparator(buffer);\n            }\n        }\n    }\n",
        "begin_line": 374,
        "end_line": 383,
        "comment": "\n     * <p>Append to the <code>toString</code> the start of data indicator.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param object  the <code>Object</code> to build a <code>toString</code> for\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4456
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendContentStart#1479",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendContentStart(java.lang.StringBuffer)",
        "snippet": "    protected void appendContentStart(StringBuffer buffer) {\n        buffer.append(contentStart);\n    }\n",
        "begin_line": 1479,
        "end_line": 1481,
        "comment": "\n     * <p>Append to the <code>toString</code> the content start.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4456
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.isUseIdentityHashCode#1643",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.isUseIdentityHashCode()",
        "snippet": "    protected boolean isUseIdentityHashCode() {\n        return useIdentityHashCode;\n    }\n",
        "begin_line": 1643,
        "end_line": 1645,
        "comment": "\n     * <p>Gets whether to use the identity hash code.</p>\n     *\n     * @return the current useIdentityHashCode flag\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4456
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringBuilder.getObject#1023",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.getObject()",
        "snippet": "    public Object getObject() {\n        return object;\n    }\n",
        "begin_line": 1023,
        "end_line": 1025,
        "comment": "\n     * <p>Returns the <code>Object</code> being output.</p>\n     * \n     * @return The object being output.\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4423
        },
        "num_failing_tests": 27
    },
    {
        "name": "ObjectUtils.Null#340",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ObjectUtils.java",
        "class_name": "org.apache.commons.lang3.ObjectUtils",
        "signature": "org.apache.commons.lang3.ObjectUtils.Null.Null()",
        "snippet": "        Null() {\n            super();\n        }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": "\n         * Restricted constructor - singleton.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.433
        },
        "num_failing_tests": 9
    },
    {
        "name": "ToStringStyle.SimpleToStringStyle#2223",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.SimpleToStringStyle.SimpleToStringStyle()",
        "snippet": "        SimpleToStringStyle() {\n            super();\n            this.setUseClassName(false);\n            this.setUseIdentityHashCode(false);\n            this.setUseFieldNames(false);\n            this.setContentStart(\"\");\n            this.setContentEnd(\"\");\n        }\n",
        "begin_line": 2223,
        "end_line": 2230,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.ShortPrefixToStringStyle#2191",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.ShortPrefixToStringStyle.ShortPrefixToStringStyle()",
        "snippet": "        ShortPrefixToStringStyle() {\n            super();\n            this.setUseShortClassName(true);\n            this.setUseIdentityHashCode(false);\n        }\n",
        "begin_line": 2191,
        "end_line": 2195,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.NoFieldNameToStringStyle#2157",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.NoFieldNameToStringStyle.NoFieldNameToStringStyle()",
        "snippet": "        NoFieldNameToStringStyle() {\n            super();\n            this.setUseFieldNames(false);\n        }\n",
        "begin_line": 2157,
        "end_line": 2160,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.MultiLineToStringStyle#2259",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.MultiLineToStringStyle.MultiLineToStringStyle()",
        "snippet": "        MultiLineToStringStyle() {\n            super();\n            this.setContentStart(\"[\");\n            this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\n            this.setFieldSeparatorAtStart(true);\n            this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n        }\n",
        "begin_line": 2259,
        "end_line": 2265,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.DefaultToStringStyle#2124",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.DefaultToStringStyle.DefaultToStringStyle()",
        "snippet": "        DefaultToStringStyle() {\n            super();\n        }\n",
        "begin_line": 2124,
        "end_line": 2126,
        "comment": "\n         * <p>Constructor.</p>\n         *\n         * <p>Use the static constant rather than instantiating.</p>\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.ToStringStyle#323",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.ToStringStyle()",
        "snippet": "    protected ToStringStyle() {\n        super();\n    }\n",
        "begin_line": 323,
        "end_line": 325,
        "comment": "\n     * <p>Constructor.</p>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setUseClassName#1610",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseClassName(boolean)",
        "snippet": "    protected void setUseClassName(boolean useClassName) {\n        this.useClassName = useClassName;\n    }\n",
        "begin_line": 1610,
        "end_line": 1612,
        "comment": "\n     * <p>Sets whether to use the class name.</p>\n     *\n     * @param useClassName  the new useClassName flag\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setUseShortClassName#1632",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseShortClassName(boolean)",
        "snippet": "    protected void setUseShortClassName(boolean useShortClassName) {\n        this.useShortClassName = useShortClassName;\n    }\n",
        "begin_line": 1632,
        "end_line": 1634,
        "comment": "\n     * <p>Sets whether to output short or long class names.</p>\n     *\n     * @param useShortClassName  the new useShortClassName flag\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setUseIdentityHashCode#1652",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseIdentityHashCode(boolean)",
        "snippet": "    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n        this.useIdentityHashCode = useIdentityHashCode;\n    }\n",
        "begin_line": 1652,
        "end_line": 1654,
        "comment": "\n     * <p>Sets whether to use the identity hash code.</p>\n     *\n     * @param useIdentityHashCode  the new useIdentityHashCode flag\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setUseFieldNames#1672",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setUseFieldNames(boolean)",
        "snippet": "    protected void setUseFieldNames(boolean useFieldNames) {\n        this.useFieldNames = useFieldNames;\n    }\n",
        "begin_line": 1672,
        "end_line": 1674,
        "comment": "\n     * <p>Sets whether to use the field names passed in.</p>\n     *\n     * @param useFieldNames  the new useFieldNames flag\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setContentStart#1815",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setContentStart(java.lang.String)",
        "snippet": "    protected void setContentStart(String contentStart) {\n        if (contentStart == null) {\n            contentStart = \"\";\n        }\n        this.contentStart = contentStart;\n    }\n",
        "begin_line": 1815,
        "end_line": 1820,
        "comment": "\n     * <p>Sets the content start text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param contentStart  the new content start text\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setContentEnd#1841",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setContentEnd(java.lang.String)",
        "snippet": "    protected void setContentEnd(String contentEnd) {\n        if (contentEnd == null) {\n            contentEnd = \"\";\n        }\n        this.contentEnd = contentEnd;\n    }\n",
        "begin_line": 1841,
        "end_line": 1846,
        "comment": "\n     * <p>Sets the content end text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param contentEnd  the new content end text\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setFieldSeparator#1893",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setFieldSeparator(java.lang.String)",
        "snippet": "    protected void setFieldSeparator(String fieldSeparator) {\n        if (fieldSeparator == null) {\n            fieldSeparator = \"\";\n        }\n        this.fieldSeparator = fieldSeparator;\n    }\n",
        "begin_line": 1893,
        "end_line": 1898,
        "comment": "\n     * <p>Sets the field separator text.</p>\n     *\n     * <p><code>null</code> is accepted, but will be converted to\n     * an empty String.</p>\n     *\n     * @param fieldSeparator  the new field separator text\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.setFieldSeparatorAtStart#1920",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.setFieldSeparatorAtStart(boolean)",
        "snippet": "    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\n    }\n",
        "begin_line": 1920,
        "end_line": 1922,
        "comment": "\n     * <p>Sets whether the field separator should be added at the start\n     * of each buffer.</p>\n     *\n     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "SystemUtils.getJavaVersionAsFloat#1132",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionAsFloat()",
        "snippet": "    private static float getJavaVersionAsFloat() {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return 0f;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        }\n        try {\n            return Float.parseFloat(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }\n",
        "begin_line": 1132,
        "end_line": 1145,
        "comment": "\n     * <p>Gets the Java version number as a <code>float</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>1.2f</code> for JDK 1.2\n     *  <li><code>1.31f</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 1.31f for JDK 1.3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "SystemUtils.getJavaVersionAsInt#1161",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionAsInt()",
        "snippet": "    private static int getJavaVersionAsInt() {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return 0;\n        }\n        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n        } else {\n            str = str + \"0\";\n        }\n        try {\n            return Integer.parseInt(str);\n        } catch (Exception ex) {\n            return 0;\n        }\n    }\n",
        "begin_line": 1161,
        "end_line": 1177,
        "comment": "\n     * <p>Gets the Java version number as an <code>int</code>.</p>\n     *\n     * <p>Example return values:</p>\n     * <ul>\n     *  <li><code>120</code> for JDK 1.2\n     *  <li><code>131</code> for JDK 1.3.1\n     * </ul>\n     * \n     * <p>Patch releases are not reported.\n     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n     * \n     * @return the version, for example 131 for JDK 1.3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "SystemUtils.getJavaVersionTrimmed#1184",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionTrimmed()",
        "snippet": "    private static String getJavaVersionTrimmed() {\n        if (JAVA_VERSION != null) {\n            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n                char ch = JAVA_VERSION.charAt(i);\n                if (ch >= '0' && ch <= '9') {\n                    return JAVA_VERSION.substring(i);\n                }\n            }\n        }\n        return null;\n    }\n",
        "begin_line": 1184,
        "end_line": 1194,
        "comment": "\n     * Trims the text of the java version to start with numbers.\n     * \n     * @return the trimmed java version\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "SystemUtils.getJavaVersionMatches#1202",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String)",
        "snippet": "    private static boolean getJavaVersionMatches(String versionPrefix) {\n        if (JAVA_VERSION_TRIMMED == null) {\n            return false;\n        }\n        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n    }    \n",
        "begin_line": 1202,
        "end_line": 1207,
        "comment": "\n     * <p>Decides if the java version matches.</p>\n     * \n     * @param versionPrefix  the prefix for the java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "SystemUtils.getOSMatches#1215",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String)",
        "snippet": "    private static boolean getOSMatches(String osNamePrefix) {\n        if (OS_NAME == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix);\n    }    \n",
        "begin_line": 1215,
        "end_line": 1220,
        "comment": "\n     * <p>Decides if the operating system matches.</p>\n     * \n     * @param osNamePrefix  the prefix for the os name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "SystemUtils.getOSMatches#1229",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String)",
        "snippet": "    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        if (OS_NAME == null || OS_VERSION == null) {\n            return false;\n        }\n        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n    }    \n",
        "begin_line": 1229,
        "end_line": 1234,
        "comment": "\n     * <p>Decides if the operating system matches.</p>\n     * \n     * @param osNamePrefix  the prefix for the os name\n     * @param osVersionPrefix  the prefix for the version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "SystemUtils.getSystemProperty#1247",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String)",
        "snippet": "    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            // we are not allowed to look at this property\n            System.err.println(\n                \"Caught a SecurityException reading the system property '\" + property \n                + \"'; the SystemUtils property value will default to null.\"\n            );\n            return null;\n        }\n    }\n",
        "begin_line": 1247,
        "end_line": 1258,
        "comment": "\n     * <p>Gets a System property, defaulting to <code>null</code> if the property\n     * cannot be read.</p>\n     *\n     * <p>If a <code>SecurityException</code> is caught, the return\n     * value is <code>null</code> and a message is written to <code>System.err</code>.</p>\n     * \n     * @param property the system property name\n     * @return the system property value or <code>null</code> if a security problem occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4215
        },
        "num_failing_tests": 27
    },
    {
        "name": "ToStringStyle.appendDetail#592",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 592,
        "end_line": 594,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value, printing the full detail of the <code>Object</code>.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.322
        },
        "num_failing_tests": 14
    },
    {
        "name": "ToStringStyle.appendNullText#1500",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendNullText(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    protected void appendNullText(StringBuffer buffer, String fieldName) {\n        buffer.append(nullText);\n    }\n",
        "begin_line": 1500,
        "end_line": 1502,
        "comment": "\n     * <p>Append to the <code>toString</code> an indicator for <code>null</code>.</p>\n     *\n     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2379
        },
        "num_failing_tests": 9
    },
    {
        "name": "ReflectionToStringBuilder.accept#491",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.accept(java.lang.reflect.Field)",
        "snippet": "    protected boolean accept(Field field) {\n        if (field.getName().indexOf(ClassUtils.INNER_CLASS_SEPARATOR_CHAR) != -1) {\n            // Reject field from inner class.\n            return false;\n        }\n        if (Modifier.isTransient(field.getModifiers()) && !this.isAppendTransients()) {\n            // Reject transient fields.\n            return false;\n        }\n        if (Modifier.isStatic(field.getModifiers()) && !this.isAppendStatics()) {\n            // Reject static fields.\n            return false;\n        }\n        if (this.excludeFieldNames != null\n            && Arrays.binarySearch(this.excludeFieldNames, field.getName()) >= 0) {\n            // Reject fields from the getExcludeFieldNames list.\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 491,
        "end_line": 510,
        "comment": "\n     * Returns whether or not to append the given <code>Field</code>.\n     * <ul>\n     * <li>Transient fields are appended only if {@link #isAppendTransients()} returns <code>true</code>.\n     * <li>Static fields are appended only if {@link #isAppendStatics()} returns <code>true</code>.\n     * <li>Inner class fields are not appened.</li>\n     * </ul>\n     * \n     * @param field\n     *            The Field to test.\n     * @return Whether or not to append the given <code>Field</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 6
    },
    {
        "name": "ReflectionToStringBuilder.getValue#585",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.getValue(java.lang.reflect.Field)",
        "snippet": "    protected Object getValue(Field field) throws IllegalArgumentException, IllegalAccessException {\n        return field.get(this.getObject());\n    }\n",
        "begin_line": 585,
        "end_line": 587,
        "comment": "\n     * <p>\n     * Calls <code>java.lang.reflect.Field.get(Object)</code>.\n     * </p>\n     * \n     * @param field\n     *            The Field to query.\n     * @return The Object from the given Field.\n     * \n     * @throws IllegalArgumentException\n     *             see {@link java.lang.reflect.Field#get(Object)}\n     * @throws IllegalAccessException\n     *             see {@link java.lang.reflect.Field#get(Object)}\n     * \n     * @see java.lang.reflect.Field#get(Object)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2357
        },
        "num_failing_tests": 6
    },
    {
        "name": "ToStringBuilder.reflectionToString#167",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle)",
        "snippet": "    public static String reflectionToString(Object object, ToStringStyle style) {\n        return ReflectionToStringBuilder.toString(object, style);\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\n     * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n     * <code>toString</code> for the specified object.</p>\n     * \n     * @param object  the Object to be output\n     * @param style  the style of the <code>toString</code> to create, may be <code>null</code>\n     * @return the String result\n     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringBuilder.reflectionToString#181",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.reflectionToString(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle, boolean)",
        "snippet": "    public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients) {\n        return ReflectionToStringBuilder.toString(object, style, outputTransients, false, null);\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\n     * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n     * <code>toString</code> for the specified object.</p>\n     * \n     * @param object  the Object to be output\n     * @param style  the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param outputTransients  whether to include transient fields\n     * @return the String result\n     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringBuilder.reflectionToString#197",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.reflectionToString(T, org.apache.commons.lang3.builder.ToStringStyle, boolean, java.lang.Class<? super T>)",
        "snippet": "    public static <T> String reflectionToString(\n        T object,\n        ToStringStyle style,\n        boolean outputTransients,\n        Class<? super T> reflectUpToClass) {\n        return ReflectionToStringBuilder.toString(object, style, outputTransients, false, reflectUpToClass);\n    }\n",
        "begin_line": 197,
        "end_line": 203,
        "comment": "\n     * <p>Uses <code>ReflectionToStringBuilder</code> to generate a\n     * <code>toString</code> for the specified object.</p>\n     * \n     * @param object  the Object to be output\n     * @param style  the style of the <code>toString</code> to create, may be <code>null</code>\n     * @param outputTransients  whether to include transient fields\n     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be <code>null</code>\n     * @return the String result\n     * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,boolean,Class)\n     * @since 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "ReflectionToStringBuilder.toString#154",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString(java.lang.Object, org.apache.commons.lang3.builder.ToStringStyle)",
        "snippet": "    public static String toString(Object object, ToStringStyle style) {\n        return toString(object, style, false, false, null);\n    }\n",
        "begin_line": 154,
        "end_line": 156,
        "comment": "\n     * <p>\n     * Builds a <code>toString</code> value through reflection.\n     * </p>\n     * \n     * <p>\n     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n     * also not as efficient as testing explicitly.\n     * </p>\n     * \n     * <p>\n     * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n     * Superclass fields will be appended.\n     * </p>\n     * \n     * <p>\n     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n     * </p>\n     * \n     * @param object\n     *            the Object to be output\n     * @param style\n     *            the style of the <code>toString</code> to create, may be <code>null</code>\n     * @return the String result\n     * @throws IllegalArgumentException\n     *             if the Object or <code>ToStringStyle</code> is <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringBuilder.append#849",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.append(java.lang.String, java.lang.Object)",
        "snippet": "    public ToStringBuilder append(String fieldName, Object obj) {\n        style.append(buffer, fieldName, obj, null);\n        return this;\n    }\n",
        "begin_line": 849,
        "end_line": 852,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value.</p>\n     *\n     * @param fieldName  the field name\n     * @param obj  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1703
        },
        "num_failing_tests": 6
    },
    {
        "name": "ToStringStyle.appendFieldStart#1519",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendFieldStart(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n        if (useFieldNames && fieldName != null) {\n            buffer.append(fieldName);\n            buffer.append(fieldNameValueSeparator);\n        }\n    }\n",
        "begin_line": 1519,
        "end_line": 1524,
        "comment": "\n     * <p>Append to the <code>toString</code> the field start.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1601
        },
        "num_failing_tests": 7
    },
    {
        "name": "ToStringStyle.append#436",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.append(java.lang.StringBuffer, java.lang.String, java.lang.Object, java.lang.Boolean)",
        "snippet": "    public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\n        appendFieldStart(buffer, fieldName);\n\n        if (value == null) {\n            appendNullText(buffer, fieldName);\n\n        } else {\n            appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\n        }\n\n        appendFieldEnd(buffer, fieldName);\n    }\n",
        "begin_line": 436,
        "end_line": 447,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value, printing the full <code>toString</code> of the\n     * <code>Object</code> passed in.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name\n     * @param value  the value to add to the <code>toString</code>\n     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n     *  for summary info, <code>null</code> for style decides\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1412
        },
        "num_failing_tests": 7
    },
    {
        "name": "ToStringStyle.isFullDetail#1571",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.isFullDetail(java.lang.Boolean)",
        "snippet": "    protected boolean isFullDetail(Boolean fullDetailRequest) {\n        if (fullDetailRequest == null) {\n            return defaultFullDetail;\n        }\n        return fullDetailRequest.booleanValue();\n    }\n",
        "begin_line": 1571,
        "end_line": 1576,
        "comment": "\n     * <p>Is this field to be output in full detail.</p>\n     *\n     * <p>This method converts a detail request into a detail level.\n     * The calling code may request full detail (<code>true</code>),\n     * but a subclass might ignore that and always return\n     * <code>false</code>. The calling code may pass in\n     * <code>null</code> indicating that it doesn't care about\n     * the detail level. In this case the default detail level is\n     * used.</p>\n     *\n     * @param fullDetailRequest  the detail level requested\n     * @return whether full detail is to be shown\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1412
        },
        "num_failing_tests": 7
    },
    {
        "name": "ReflectionToStringBuilder.isAppendTransients#608",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ReflectionToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ReflectionToStringBuilder.isAppendTransients()",
        "snippet": "    public boolean isAppendTransients() {\n        return this.appendTransients;\n    }\n",
        "begin_line": 608,
        "end_line": 610,
        "comment": "\n     * <p>\n     * Gets whether or not to append transient fields.\n     * </p>\n     * \n     * @return Whether or not to append transient fields.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1361
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendFieldEnd#1532",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendFieldEnd(java.lang.StringBuffer, java.lang.String)",
        "snippet": "    protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n        appendFieldSeparator(buffer);\n    }\n",
        "begin_line": 1532,
        "end_line": 1534,
        "comment": "\n     * <p>Append to the <code>toString<code> the field end.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1315
        },
        "num_failing_tests": 7
    },
    {
        "name": "ToStringStyle.appendFieldSeparator#1509",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendFieldSeparator(java.lang.StringBuffer)",
        "snippet": "    protected void appendFieldSeparator(StringBuffer buffer) {\n        buffer.append(fieldSeparator);\n    }\n",
        "begin_line": 1509,
        "end_line": 1511,
        "comment": "\n     * <p>Append to the <code>toString</code> the field separator.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1308
        },
        "num_failing_tests": 7
    },
    {
        "name": "ToStringStyle.appendDetail#1051",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 1051,
        "end_line": 1060,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of an\n     * <code>int</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1161
        },
        "num_failing_tests": 2
    },
    {
        "name": "ToStringStyle.appendDetail#1112",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, short[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 1112,
        "end_line": 1121,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>short</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#1173",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, byte[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 1173,
        "end_line": 1182,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>byte</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#1234",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, char[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 1234,
        "end_line": 1243,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>char</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#1295",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 1295,
        "end_line": 1304,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>double</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#1356",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, float[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 1356,
        "end_line": 1365,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>float</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#1417",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, boolean[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 1417,
        "end_line": 1426,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>boolean</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1111
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#896",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, java.lang.Object[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            Object item = array[i];\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            if (item == null) {\n                appendNullText(buffer, fieldName);\n\n            } else {\n                appendInternal(buffer, fieldName, item, arrayContentDetail);\n            }\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 896,
        "end_line": 911,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of an\n     * <code>Object</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 3
    },
    {
        "name": "ToStringStyle.appendDetail#715",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, short)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>short</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#743",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, byte)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 743,
        "end_line": 745,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>byte</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#771",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, char)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 771,
        "end_line": 773,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>char</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#799",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, double)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 799,
        "end_line": 801,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>double</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#827",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, float)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 827,
        "end_line": 829,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>float</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0962
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#687",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, int)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 687,
        "end_line": 689,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>int</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0907
        },
        "num_failing_tests": 2
    },
    {
        "name": "ToStringStyle.appendDetail#855",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, boolean)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 855,
        "end_line": 857,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>boolean</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0609
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#990",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, long[])",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\n        buffer.append(arrayStart);\n        for (int i = 0; i < array.length; i++) {\n            if (i > 0) {\n                buffer.append(arraySeparator);\n            }\n            appendDetail(buffer, fieldName, array[i]);\n        }\n        buffer.append(arrayEnd);\n    }\n",
        "begin_line": 990,
        "end_line": 999,
        "comment": "\n     * <p>Append to the <code>toString</code> the detail of a\n     * <code>long</code> array.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param array  the array to add to the <code>toString</code>,\n     *  not <code>null</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0497
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringStyle.appendDetail#659",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringStyle",
        "signature": "org.apache.commons.lang3.builder.ToStringStyle.appendDetail(java.lang.StringBuffer, java.lang.String, long)",
        "snippet": "    protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\n        buffer.append(value);\n    }\n",
        "begin_line": 659,
        "end_line": 661,
        "comment": "\n     * <p>Append to the <code>toString</code> a <code>long</code>\n     * value.</p>\n     *\n     * @param buffer  the <code>StringBuffer</code> to populate\n     * @param fieldName  the field name, typically not used as already appended\n     * @param value  the value to add to the <code>toString</code>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.041
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringBuilder.append#473",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.append(java.lang.Object)",
        "snippet": "    public ToStringBuilder append(Object obj) {\n        style.append(buffer, null, obj, null);\n        return this;\n    }\n",
        "begin_line": 473,
        "end_line": 476,
        "comment": "\n     * <p>Append to the <code>toString</code> an <code>Object</code>\n     * value.</p>\n     *\n     * @param obj  the value to add to the <code>toString</code>\n     * @return this\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "ToStringBuilder.ToStringBuilder#227",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java",
        "class_name": "org.apache.commons.lang3.builder.ToStringBuilder",
        "signature": "org.apache.commons.lang3.builder.ToStringBuilder.ToStringBuilder(java.lang.Object)",
        "snippet": "    public ToStringBuilder(Object object) {\n        this(object, null, null);\n    }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n     * <p>Constructs a builder for the specified object using the default output style.</p>\n     *\n     * <p>This default style is obtained from {@link #getDefaultStyle()}.</p>\n     * \n     * @param object  the Object to build a <code>toString</code> for, not recommended to be null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.02
        },
        "num_failing_tests": 1
    }
]