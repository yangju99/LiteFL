[
    {
        "name": "PolynomialFitter.PolynomialFitter#36",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/PolynomialFitter.java",
        "class_name": "org.apache.commons.math3.fitting.PolynomialFitter",
        "signature": "org.apache.commons.math3.fitting.PolynomialFitter.PolynomialFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)",
        "snippet": "    public PolynomialFitter(MultivariateVectorOptimizer optimizer) {\n        super(optimizer);\n    }\n",
        "begin_line": 36,
        "end_line": 38,
        "comment": "\n     * Simple constructor.\n     *\n     * @param optimizer Optimizer to use for the fitting.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFitter.fit#67",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/PolynomialFitter.java",
        "class_name": "org.apache.commons.math3.fitting.PolynomialFitter",
        "signature": "org.apache.commons.math3.fitting.PolynomialFitter.fit(double[])",
        "snippet": "    public double[] fit(double[] guess) {\n        return fit(new PolynomialFunction.Parametric(), guess);\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Get the coefficients of the polynomial fitting the weighted data points.\n     * The degree of the fitting polynomial is {@code guess.length - 1}.\n     *\n     * @param guess First guess for the coefficients. They must be sorted in\n     * increasing order of the polynomial's degree.\n     * @return the coefficients of the polynomial that best fits the observed points.\n     * @throws org.apache.commons.math3.exception.ConvergenceException\n     * if the algorithm failed to converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFunction.PolynomialFunction#67",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java",
        "class_name": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction",
        "signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.PolynomialFunction(double[])",
        "snippet": "    public PolynomialFunction(double c[])\n        throws NullArgumentException, NoDataException {\n        super();\n        MathUtils.checkNotNull(c);\n        int n = c.length;\n        if (n == 0) {\n            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n        }\n        while ((n > 1) && (c[n - 1] == 0)) {\n            --n;\n        }\n        this.coefficients = new double[n];\n        System.arraycopy(c, 0, this.coefficients, 0, n);\n    }\n",
        "begin_line": 67,
        "end_line": 80,
        "comment": "\n     * Construct a polynomial with the given coefficients.  The first element\n     * of the coefficients array is the constant term.  Higher degree\n     * coefficients follow in sequence.  The degree of the resulting polynomial\n     * is the index of the last non-null element of the array, or 0 if all elements\n     * are null.\n     * <p>\n     * The constructor makes a copy of the input array and assigns the copy to\n     * the coefficients property.</p>\n     *\n     * @param c Polynomial coefficients.\n     * @throws NullArgumentException if {@code c} is {@code null}.\n     * @throws NoDataException if {@code c} is empty.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFunction.value#93",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java",
        "class_name": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction",
        "signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.value(double)",
        "snippet": "    public double value(double x) {\n       return evaluate(coefficients, x);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Compute the value of the function for the given argument.\n     * <p>\n     *  The value returned is <br/>\n     *  <code>coefficients[n] * x^n + ... + coefficients[1] * x  + coefficients[0]</code>\n     * </p>\n     *\n     * @param x Argument for which the function value should be computed.\n     * @return the value of the polynomial at the given point.\n     * @see UnivariateFunction#value(double)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3333
        },
        "num_failing_tests": 1
    },
    {
        "name": "PolynomialFunction.evaluate#128",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/analysis/polynomials/PolynomialFunction.java",
        "class_name": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction",
        "signature": "org.apache.commons.math3.analysis.polynomials.PolynomialFunction.evaluate(double[], double)",
        "snippet": "    protected static double evaluate(double[] coefficients, double argument)\n        throws NullArgumentException, NoDataException {\n        MathUtils.checkNotNull(coefficients);\n        int n = coefficients.length;\n        if (n == 0) {\n            throw new NoDataException(LocalizedFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\n        }\n        double result = coefficients[n - 1];\n        for (int j = n - 2; j >= 0; j--) {\n            result = argument * result + coefficients[j];\n        }\n        return result;\n    }\n",
        "begin_line": 128,
        "end_line": 140,
        "comment": "\n     * Uses Horner's Method to evaluate the polynomial with the given coefficients at\n     * the argument.\n     *\n     * @param coefficients Coefficients of the polynomial to evaluate.\n     * @param argument Input value.\n     * @return the value of the polynomial.\n     * @throws NoDataException if {@code coefficients} is empty.\n     * @throws NullArgumentException if {@code coefficients} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2887
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockRealMatrix.BlockRealMatrix#96",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.BlockRealMatrix",
        "signature": "org.apache.commons.math3.linear.BlockRealMatrix.BlockRealMatrix(int, int)",
        "snippet": "    public BlockRealMatrix(final int rows, final int columns)\n        throws NotStrictlyPositiveException {\n        super(rows, columns);\n        this.rows = rows;\n        this.columns = columns;\n\n        // number of blocks\n        blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n\n        // allocate storage blocks, taking care of smaller ones at right and bottom\n        blocks = createBlocksLayout(rows, columns);\n    }\n",
        "begin_line": 96,
        "end_line": 108,
        "comment": "\n     * Create a new matrix with the supplied row and column dimensions.\n     *\n     * @param rows  the number of rows in the new matrix\n     * @param columns  the number of columns in the new matrix\n     * @throws NotStrictlyPositiveException if row or column dimension is not\n     * positive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.fit#135",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.fitting.CurveFitter.fit(T, double[])",
        "snippet": "    public double[] fit(T f, final double[] initialGuess) {\n        return fit(Integer.MAX_VALUE, f, initialGuess);\n    }\n",
        "begin_line": 135,
        "end_line": 137,
        "comment": "\n     * Fit a curve.\n     * This method compute the coefficients of the curve that best\n     * fit the sample of observed points previously given through calls\n     * to the {@link #addObservedPoint(WeightedObservedPoint)\n     * addObservedPoint} method.\n     *\n     * @param f parametric function to fit.\n     * @param initialGuess first guess of the function parameters.\n     * @return the fitted parameters.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the start point dimension is wrong.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockRealMatrix.createBlocksLayout#257",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/BlockRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.BlockRealMatrix",
        "signature": "org.apache.commons.math3.linear.BlockRealMatrix.createBlocksLayout(int, int)",
        "snippet": "    public static double[][] createBlocksLayout(final int rows, final int columns) {\n        final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        final int blockColumns = (columns + BLOCK_SIZE - 1) / BLOCK_SIZE;\n\n        final double[][] blocks = new double[blockRows * blockColumns][];\n        int blockIndex = 0;\n        for (int iBlock = 0; iBlock < blockRows; ++iBlock) {\n            final int pStart = iBlock * BLOCK_SIZE;\n            final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);\n            final int iHeight = pEnd - pStart;\n            for (int jBlock = 0; jBlock < blockColumns; ++jBlock) {\n                final int qStart = jBlock * BLOCK_SIZE;\n                final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);\n                final int jWidth = qEnd - qStart;\n                blocks[blockIndex] = new double[iHeight * jWidth];\n                ++blockIndex;\n            }\n        }\n\n        return blocks;\n    }\n",
        "begin_line": 257,
        "end_line": 277,
        "comment": "\n     * Create a data array in blocks layout.\n     * <p>\n     * This method can be used to create the array argument of the {@link\n     * #BlockRealMatrix(int, int, double[][], boolean)} constructor.\n     * </p>\n     * @param rows Number of rows in the new matrix.\n     * @param columns Number of columns in the new matrix.\n     * @return a new data array in blocks layout.\n     * @see #toBlocksLayout(double[][])\n     * @see #BlockRealMatrix(int, int, double[][], boolean)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1961
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getWeight#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.fitting.WeightedObservedPoint.getWeight()",
        "snippet": "    public double getWeight() {\n        return weight;\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": "\n     * Gets the weight of the measurement in the fitting process.\n     *\n     * @return the weight of the measurement in the fitting process.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.getModelFunctionJacobian#217",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction.getModelFunctionJacobian()",
        "snippet": "        public ModelFunctionJacobian getModelFunctionJacobian() {\n            return new ModelFunctionJacobian(new MultivariateMatrixFunction() {\n                    public double[][] value(double[] point) {\n                        final double[][] jacobian = new double[observations.size()][];\n                        int i = 0;\n                        for (WeightedObservedPoint observed : observations) {\n                            jacobian[i++] = f.gradient(observed.getX(), point);\n                        }\n                        return jacobian;\n                    }\n                });\n        }\n",
        "begin_line": 217,
        "end_line": 228,
        "comment": "\n         * @return the model function Jacobian.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.getModelFunction#198",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction.getModelFunction()",
        "snippet": "        public ModelFunction getModelFunction() {\n            return new ModelFunction(new MultivariateVectorFunction() {\n                    /** {@inheritDoc} */\n                    public double[] value(double[] point) {\n                        // compute the residuals\n                        final double[] values = new double[observations.size()];\n                        int i = 0;\n                        for (WeightedObservedPoint observed : observations) {\n                            values[i++] = f.value(observed.getX(), point);\n                        }\n\n                        return values;\n                    }\n                });\n        }\n",
        "begin_line": 198,
        "end_line": 212,
        "comment": "\n         * @return the model function values.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.TheoreticalValuesFunction#191",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.fitting.CurveFitter.TheoreticalValuesFunction.TheoreticalValuesFunction(org.apache.commons.math3.analysis.ParametricUnivariateFunction)",
        "snippet": "        public TheoreticalValuesFunction(final ParametricUnivariateFunction f) {\n            this.f = f;\n        }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\n         * @param f function to fit.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.fit#156",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.fitting.CurveFitter.fit(int, T, double[])",
        "snippet": "    public double[] fit(int maxEval, T f,\n                        final double[] initialGuess) {\n        // Prepare least squares problem.\n        double[] target  = new double[observations.size()];\n        double[] weights = new double[observations.size()];\n        int i = 0;\n        for (WeightedObservedPoint point : observations) {\n            target[i]  = point.getY();\n            weights[i] = point.getWeight();\n            ++i;\n        }\n\n        // Input to the optimizer: the model and its Jacobian.\n        final TheoreticalValuesFunction model = new TheoreticalValuesFunction(f);\n\n        // Perform the fit.\n        final PointVectorValuePair optimum\n            = optimizer.optimize(new MaxEval(maxEval),\n                                 model.getModelFunction(),\n                                 model.getModelFunctionJacobian(),\n                                 new Target(target),\n                                 new Weight(weights),\n                                 new InitialGuess(initialGuess));\n        // Extract the coefficients.\n        return optimum.getPointRef();\n    }\n",
        "begin_line": 156,
        "end_line": 181,
        "comment": "\n     * Fit a curve.\n     * This method compute the coefficients of the curve that best\n     * fit the sample of observed points previously given through calls\n     * to the {@link #addObservedPoint(WeightedObservedPoint)\n     * addObservedPoint} method.\n     *\n     * @param f parametric function to fit.\n     * @param initialGuess first guess of the function parameters.\n     * @param maxEval Maximum number of function evaluations.\n     * @return the fitted parameters.\n     * @throws org.apache.commons.math3.exception.TooManyEvaluationsException\n     * if the number of allowed evaluations is exceeded.\n     * @throws org.apache.commons.math3.exception.DimensionMismatchException\n     * if the start point dimension is wrong.\n     * @since 3.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1924
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getY#74",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.fitting.WeightedObservedPoint.getY()",
        "snippet": "    public double getY() {\n        return y;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Gets the observed value of the function at x.\n     *\n     * @return the observed value of the function at x.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.addObservedPoint#91",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.fitting.CurveFitter.addObservedPoint(double, double, double)",
        "snippet": "    public void addObservedPoint(double weight, double x, double y) {\n        observations.add(new WeightedObservedPoint(weight, x, y));\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": " Add an observed weighted (x,y) point to the sample.\n     * @param weight weight of the observed point in the fit\n     * @param x abscissa of the point\n     * @param y observed value of the point at x, after fitting we should\n     * have f(x) as close as possible to this value\n     * @see #addObservedPoint(double, double)\n     * @see #addObservedPoint(WeightedObservedPoint)\n     * @see #getObservations()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.WeightedObservedPoint#45",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math3.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math3.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double)",
        "snippet": "    public WeightedObservedPoint(final double weight, final double x, final double y) {\n        this.weight = weight;\n        this.x      = x;\n        this.y      = y;\n    }\n",
        "begin_line": 45,
        "end_line": 49,
        "comment": "\n     * Simple constructor.\n     *\n     * @param weight Weight of the measurement in the fitting process.\n     * @param x Abscissa of the measurement.\n     * @param y Ordinate of the measurement.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1857
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.CurveFitter#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math3.fitting.CurveFitter",
        "signature": "org.apache.commons.math3.fitting.CurveFitter.CurveFitter(org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer)",
        "snippet": "    public CurveFitter(final MultivariateVectorOptimizer optimizer) {\n        this.optimizer = optimizer;\n        observations = new ArrayList<WeightedObservedPoint>();\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\n     * Simple constructor.\n     *\n     * @param optimizer Optimizer to use for the fitting.\n     * @since 3.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1826
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer#155",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer()",
        "snippet": "    public LevenbergMarquardtOptimizer() {\n        this(100, 1e-10, 1e-10, 1e-10, Precision.SAFE_MIN);\n    }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n     * Build an optimizer for least squares problems with default values\n     * for all the tuning parameters (see the {@link\n     * #LevenbergMarquardtOptimizer(double,double,double,double,double)\n     * other contructor}.\n     * The default values for the algorithm settings are:\n     * <ul>\n     *  <li>Initial step bound factor: 100</li>\n     *  <li>Cost relative tolerance: 1e-10</li>\n     *  <li>Parameters relative tolerance: 1e-10</li>\n     *  <li>Orthogonality tolerance: 1e-10</li>\n     *  <li>QR ranking threshold: {@link Precision#SAFE_MIN}</li>\n     * </ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer#263",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double, double, double, double, double)",
        "snippet": "    public LevenbergMarquardtOptimizer(double initialStepBoundFactor,\n                                       double costRelativeTolerance,\n                                       double parRelativeTolerance,\n                                       double orthoTolerance,\n                                       double threshold) {\n        super(null); // No custom convergence criterion.\n        this.initialStepBoundFactor = initialStepBoundFactor;\n        this.costRelativeTolerance = costRelativeTolerance;\n        this.parRelativeTolerance = parRelativeTolerance;\n        this.orthoTolerance = orthoTolerance;\n        this.qrRankingThreshold = threshold;\n    }\n",
        "begin_line": 263,
        "end_line": 274,
        "comment": "\n     * The arguments control the behaviour of the default convergence checking\n     * procedure.\n     * Additional criteria can defined through the setting of a {@link\n     * ConvergenceChecker}.\n     *\n     * @param initialStepBoundFactor Positive input variable used in\n     * determining the initial step bound. This bound is set to the\n     * product of initialStepBoundFactor and the euclidean norm of\n     * {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}\n     * itself. In most cases factor should lie in the interval\n     * {@code (0.1, 100.0)}. {@code 100} is a generally recommended value.\n     * @param costRelativeTolerance Desired relative error in the sum of\n     * squares.\n     * @param parRelativeTolerance Desired relative error in the approximate\n     * solution parameters.\n     * @param orthoTolerance Desired max cosine on the orthogonality between\n     * the function vector and the columns of the Jacobian.\n     * @param threshold Desired threshold for QR ranking. If the squared norm\n     * of a column vector is smaller or equal to this threshold during QR\n     * decomposition, it is considered to be a zero vector and hence the rank\n     * of the matrix is reduced.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.127
        },
        "num_failing_tests": 1
    },
    {
        "name": "ModelFunctionJacobian.ModelFunctionJacobian#35",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunctionJacobian.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian.ModelFunctionJacobian(org.apache.commons.math3.analysis.MultivariateMatrixFunction)",
        "snippet": "    public ModelFunctionJacobian(MultivariateMatrixFunction j) {\n        jacobian = j;\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * @param j Jacobian of the model function to be optimized.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1078
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.checkNotNull#262",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/MathUtils.java",
        "class_name": "org.apache.commons.math3.util.MathUtils",
        "signature": "org.apache.commons.math3.util.MathUtils.checkNotNull(java.lang.Object)",
        "snippet": "    public static void checkNotNull(Object o)\n        throws NullArgumentException {\n        if (o == null) {\n            throw new NullArgumentException();\n        }\n    }\n",
        "begin_line": 262,
        "end_line": 267,
        "comment": "\n     * Checks that an object is not null.\n     *\n     * @param o Object to be checked.\n     * @throws NullArgumentException if {@code o} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.min#3420",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.min(int, int)",
        "snippet": "    public static int min(final int a, final int b) {\n        return (a <= b) ? a : b;\n    }\n",
        "begin_line": 3420,
        "end_line": 3422,
        "comment": " Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#42",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math3.util.CompositeFormat",
        "signature": "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat()",
        "snippet": "    public static NumberFormat getDefaultNumberFormat() {\n        return getDefaultNumberFormat(Locale.getDefault());\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance()} with the only customizing that the\n     * maximum number of fraction digits is set to 10.\n     * @return the default number format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "Weight.Weight#41",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Weight.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.Weight",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.Weight.Weight(double[])",
        "snippet": "    public Weight(double[] weight) {\n        final int dim = weight.length;\n        weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);\n        for (int i = 0; i < dim; i++) {\n            weightMatrix.setEntry(i, i, weight[i]);\n        }\n    }\n",
        "begin_line": 41,
        "end_line": 47,
        "comment": "\n     * Creates a diagonal weight matrix.\n     *\n     * @param weight List of the values of the diagonal.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "Target.Target#38",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/Target.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.Target",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.Target.Target(double[])",
        "snippet": "    public Target(double[] observations) {\n        target = observations.clone();\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "\n     * @param observations Target values.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "ModelFunction.ModelFunction#35",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/ModelFunction.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.ModelFunction.ModelFunction(org.apache.commons.math3.analysis.MultivariateVectorFunction)",
        "snippet": "    public ModelFunction(MultivariateVectorFunction m) {\n        model = m;\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "\n     * @param m Model function to be optimized.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "MaxEval.MaxEval#35",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/MaxEval.java",
        "class_name": "org.apache.commons.math3.optim.MaxEval",
        "signature": "org.apache.commons.math3.optim.MaxEval.MaxEval(int)",
        "snippet": "    public MaxEval(int max) {\n        if (max <= 0) {\n            throw new NotStrictlyPositiveException(max);\n        }\n\n        maxEval = max;\n    }\n",
        "begin_line": 35,
        "end_line": 41,
        "comment": "\n     * @param max Allowed number of evalutations.\n     * @throws NotStrictlyPositiveException if {@code max <= 0}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#112",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    public RealMatrixFormat(final String prefix, final String suffix,\n                            final String rowPrefix, final String rowSuffix,\n                            final String rowSeparator, final String columnSeparator) {\n        this(prefix, suffix, rowPrefix, rowSuffix, rowSeparator, columnSeparator,\n                CompositeFormat.getDefaultNumberFormat());\n    }\n",
        "begin_line": 112,
        "end_line": 117,
        "comment": "\n     * Create an instance with custom prefix, suffix and separator.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param rowPrefix row prefix to use instead of the default \"{\"\n     * @param rowSuffix row suffix to use instead of the default \"}\"\n     * @param rowSeparator tow separator to use instead of the default \";\"\n     * @param columnSeparator column separator to use instead of the default \", \"\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.getInstance#214",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getInstance()",
        "snippet": "    public static RealMatrixFormat getInstance() {\n        return getInstance(Locale.getDefault());\n    }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\n     * Returns the default real vector format for the current locale.\n     * @return the default real vector format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "MatrixUtils.createRealMatrix#80",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/MatrixUtils.java",
        "class_name": "org.apache.commons.math3.linear.MatrixUtils",
        "signature": "org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(int, int)",
        "snippet": "    public static RealMatrix createRealMatrix(final int rows, final int columns) {\n        return (rows * columns <= 4096) ?\n                new Array2DRowRealMatrix(rows, columns) : new BlockRealMatrix(rows, columns);\n    }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\n     * Returns a {@link RealMatrix} with specified dimensions.\n     * <p>The type of matrix returned depends on the dimension. Below\n     * 2<sup>12</sup> elements (i.e. 4096 elements or 64&times;64 for a\n     * square matrix) which can be stored in a 32kB array, a {@link\n     * Array2DRowRealMatrix} instance is built. Above this threshold a {@link\n     * BlockRealMatrix} instance is built.</p>\n     * <p>The matrix elements are all set to 0.0.</p>\n     * @param rows number of rows of the matrix\n     * @param columns number of columns of the matrix\n     * @return  RealMatrix with specified dimensions\n     * @see #createRealMatrix(double[][])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1072
        },
        "num_failing_tests": 1
    },
    {
        "name": "CompositeFormat.getDefaultNumberFormat#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/CompositeFormat.java",
        "class_name": "org.apache.commons.math3.util.CompositeFormat",
        "signature": "org.apache.commons.math3.util.CompositeFormat.getDefaultNumberFormat(java.util.Locale)",
        "snippet": "    public static NumberFormat getDefaultNumberFormat(final Locale locale) {\n        final NumberFormat nf = NumberFormat.getInstance(locale);\n        nf.setMaximumFractionDigits(10);\n        return nf;\n    }\n",
        "begin_line": 53,
        "end_line": 57,
        "comment": "\n     * Create a default number format.  The default number format is based on\n     * {@link NumberFormat#getInstance(java.util.Locale)} with the only\n     * customizing that the maximum number of fraction digits is set to 10.\n     * @param locale the specific locale used by the format.\n     * @return the default number format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#98",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.text.NumberFormat)",
        "snippet": "    public RealMatrixFormat(final NumberFormat format) {\n        this(DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ROW_PREFIX, DEFAULT_ROW_SUFFIX,\n                DEFAULT_ROW_SEPARATOR, DEFAULT_COLUMN_SEPARATOR, format);\n    }\n",
        "begin_line": 98,
        "end_line": 101,
        "comment": "\n     * Create an instance with a custom number format for components.\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.RealMatrixFormat#130",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.RealMatrixFormat(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.text.NumberFormat)",
        "snippet": "    public RealMatrixFormat(final String prefix, final String suffix,\n                            final String rowPrefix, final String rowSuffix,\n                            final String rowSeparator, final String columnSeparator,\n                            final NumberFormat format) {\n        this.prefix            = prefix;\n        this.suffix            = suffix;\n        this.rowPrefix         = rowPrefix;\n        this.rowSuffix         = rowSuffix;\n        this.rowSeparator      = rowSeparator;\n        this.columnSeparator   = columnSeparator;\n        this.format            = format;\n        // disable grouping to prevent parsing problems\n        this.format.setGroupingUsed(false);\n    }\n",
        "begin_line": 130,
        "end_line": 143,
        "comment": "\n     * Create an instance with custom prefix, suffix, separator and format\n     * for components.\n     * @param prefix prefix to use instead of the default \"{\"\n     * @param suffix suffix to use instead of the default \"}\"\n     * @param rowPrefix row prefix to use instead of the default \"{\"\n     * @param rowSuffix row suffix to use instead of the default \"}\"\n     * @param rowSeparator tow separator to use instead of the default \";\"\n     * @param columnSeparator column separator to use instead of the default \", \"\n     * @param format the custom format for components.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.getFormat#206",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getFormat()",
        "snippet": "    public NumberFormat getFormat() {\n        return format;\n    }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "\n     * Get the components format.\n     * @return components format.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "RealMatrixFormat.getInstance#223",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/RealMatrixFormat.java",
        "class_name": "org.apache.commons.math3.linear.RealMatrixFormat",
        "signature": "org.apache.commons.math3.linear.RealMatrixFormat.getInstance(java.util.Locale)",
        "snippet": "    public static RealMatrixFormat getInstance(final Locale locale) {\n        return new RealMatrixFormat(CompositeFormat.getDefaultNumberFormat(locale));\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\n     * Returns the default real vector format for the given locale.\n     * @param locale the specific locale used by the format.\n     * @return the real vector format specific to the given locale.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRealMatrix.AbstractRealMatrix#65",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java",
        "class_name": "org.apache.commons.math3.linear.AbstractRealMatrix",
        "signature": "org.apache.commons.math3.linear.AbstractRealMatrix.AbstractRealMatrix(int, int)",
        "snippet": "    protected AbstractRealMatrix(final int rowDimension,\n        final int columnDimension)\n        throws NotStrictlyPositiveException {\n        if (rowDimension < 1) {\n            throw new NotStrictlyPositiveException(rowDimension);\n        }\n        if (columnDimension < 1) {\n            throw new NotStrictlyPositiveException(columnDimension);\n        }\n    }\n",
        "begin_line": 65,
        "end_line": 74,
        "comment": "\n     * Create a new RealMatrix with the supplied row and column dimensions.\n     *\n     * @param rowDimension  the number of rows in the new matrix\n     * @param columnDimension  the number of columns in the new matrix\n     * @throws NotStrictlyPositiveException if row or column dimension is not positive\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.Incrementor#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/Incrementor.java",
        "class_name": "org.apache.commons.math3.util.Incrementor",
        "signature": "org.apache.commons.math3.util.Incrementor.Incrementor(int, org.apache.commons.math3.util.Incrementor.MaxCountExceededCallback)",
        "snippet": "    public Incrementor(int max,\n                       MaxCountExceededCallback cb) {\n        if (cb == null){\n            throw new NullArgumentException();\n        }\n        maximalCount = max;\n        maxCountCallback = cb;\n    }\n",
        "begin_line": 79,
        "end_line": 86,
        "comment": "\n     * Defines a maximal count and a callback method to be triggered at\n     * counter exhaustion.\n     *\n     * @param max Maximal count.\n     * @param cb Function to be called when the maximal count has been reached.\n     * @throws NullArgumentException if {@code cb} is {@code null}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer#52",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer(org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>)",
        "snippet": "    protected AbstractLeastSquaresOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\n        super(checker);\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "MultivariateVectorOptimizer.MultivariateVectorOptimizer#47",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/MultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer.MultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>)",
        "snippet": "    protected MultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\n        super(checker);\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "JacobianMultivariateVectorOptimizer.JacobianMultivariateVectorOptimizer#49",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/nonlinear/vector/JacobianMultivariateVectorOptimizer.java",
        "class_name": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer",
        "signature": "org.apache.commons.math3.optim.nonlinear.vector.JacobianMultivariateVectorOptimizer.JacobianMultivariateVectorOptimizer(org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointVectorValuePair>)",
        "snippet": "    protected JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {\n        super(checker);\n    }\n",
        "begin_line": 49,
        "end_line": 51,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseOptimizer.BaseOptimizer#47",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java",
        "class_name": "org.apache.commons.math3.optim.BaseOptimizer",
        "signature": "org.apache.commons.math3.optim.BaseOptimizer.BaseOptimizer(org.apache.commons.math3.optim.ConvergenceChecker<PAIR>)",
        "snippet": "    protected BaseOptimizer(ConvergenceChecker<PAIR> checker) {\n        this.checker = checker;\n\n        evaluations = new Incrementor(0, new MaxEvalCallback());\n        iterations = new Incrementor(0, new MaxIterCallback());\n    }\n",
        "begin_line": 47,
        "end_line": 52,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseMultivariateOptimizer.BaseMultivariateOptimizer#47",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/optim/BaseMultivariateOptimizer.java",
        "class_name": "org.apache.commons.math3.optim.BaseMultivariateOptimizer",
        "signature": "org.apache.commons.math3.optim.BaseMultivariateOptimizer.BaseMultivariateOptimizer(org.apache.commons.math3.optim.ConvergenceChecker<PAIR>)",
        "snippet": "    protected BaseMultivariateOptimizer(ConvergenceChecker<PAIR> checker) {\n        super(checker);\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    }
]