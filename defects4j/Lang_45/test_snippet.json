[
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.WordUtilsTest(java.lang.String)",
        "snippet": "    public WordUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(WordUtilsTest.class);\n        suite.setName(\"WordUtilsTests\");\n        return suite;\n    }\n",
        "begin_line": 39,
        "end_line": 43,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 61)",
            "(line 41,col 9)-(line 41,col 40)",
            "(line 42,col 9)-(line 42,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new WordUtils());\n        Constructor[] cons = WordUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));\n    }\n",
        "begin_line": 46,
        "end_line": 53,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 39)",
            "(line 48,col 9)-(line 48,col 71)",
            "(line 49,col 9)-(line 49,col 37)",
            "(line 50,col 9)-(line 50,col 70)",
            "(line 51,col 9)-(line 51,col 78)",
            "(line 52,col 9)-(line 52,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testWrap_StringInt()",
        "snippet": "    public void testWrap_StringInt() {\n        assertEquals(null, WordUtils.wrap(null, 20));\n        assertEquals(null, WordUtils.wrap(null, -1));\n        \n        assertEquals(\"\", WordUtils.wrap(\"\", 20));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1));\n        \n        // normal\n        String systemNewLine = System.getProperty(\"line.separator\");\n        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" \n            + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n        \n        // long word at end\n        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n        expected = \"Click here to jump\" + systemNewLine + \"to the jakarta\" + systemNewLine \n            + \"website -\" + systemNewLine + \"http://jakarta.apache.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n        \n        // long word in middle\n        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n        expected = \"Click here,\" + systemNewLine + \"http://jakarta.apache.org,\" + systemNewLine \n            + \"to jump to the\" + systemNewLine + \"jakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20));\n    }\n",
        "begin_line": 56,
        "end_line": 81,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 57,col 9)-(line 57,col 53)",
            "(line 58,col 9)-(line 58,col 53)",
            "(line 60,col 9)-(line 60,col 49)",
            "(line 61,col 9)-(line 61,col 49)",
            "(line 64,col 9)-(line 64,col 68)",
            "(line 65,col 9)-(line 65,col 96)",
            "(line 66,col 9)-(line 67,col 84)",
            "(line 68,col 9)-(line 68,col 58)",
            "(line 71,col 9)-(line 71,col 88)",
            "(line 72,col 9)-(line 73,col 72)",
            "(line 74,col 9)-(line 74,col 58)",
            "(line 77,col 9)-(line 77,col 88)",
            "(line 78,col 9)-(line 79,col 67)",
            "(line 80,col 9)-(line 80,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testWrap_StringIntStringBoolean()",
        "snippet": "    public void testWrap_StringIntStringBoolean() {\n        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", false));\n        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", true));\n        assertEquals(null, WordUtils.wrap(null, 20, null, true));\n        assertEquals(null, WordUtils.wrap(null, 20, null, false));\n        assertEquals(null, WordUtils.wrap(null, -1, null, true));\n        assertEquals(null, WordUtils.wrap(null, -1, null, false));\n        \n        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\n        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\n        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\n        \n        // normal\n        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n\n        // unusual newline char\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\n\n        // short line length\n        input = \"Here is one line\";\n        expected = \"Here\\nis one\\nline\";\n        assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\n        expected = \"Here\\nis\\none\\nline\";\n        assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\n\n        // system newline char\n        String systemNewLine = System.getProperty(\"line.separator\");\n        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine \n            + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, null, false));\n        assertEquals(expected, WordUtils.wrap(input, 20, null, true));\n\n        // with extra spaces\n        input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\n        expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // with tab\n        input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n        expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // with tab at wrapColumn\n        input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n        expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // difference because of long word\n        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apache.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apach\\ne.org\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n        \n        // difference because of long word in middle\n        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n        expected = \"Click here,\\nhttp://jakarta.apache.org,\\nto jump to the\\njakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n        expected = \"Click here,\\nhttp://jakarta.apach\\ne.org, to jump to\\nthe jakarta website\";\n        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n//        System.err.println(expected);\n//        System.err.println(WordUtils.wrap(input, 20, \"\\n\", false));\n    }\n",
        "begin_line": 83,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 65)",
            "(line 86,col 9)-(line 86,col 65)",
            "(line 87,col 9)-(line 87,col 66)",
            "(line 88,col 9)-(line 88,col 65)",
            "(line 89,col 9)-(line 89,col 66)",
            "(line 91,col 9)-(line 91,col 62)",
            "(line 92,col 9)-(line 92,col 61)",
            "(line 93,col 9)-(line 93,col 62)",
            "(line 94,col 9)-(line 94,col 61)",
            "(line 95,col 9)-(line 95,col 62)",
            "(line 96,col 9)-(line 96,col 61)",
            "(line 99,col 9)-(line 99,col 96)",
            "(line 100,col 9)-(line 100,col 102)",
            "(line 101,col 9)-(line 101,col 71)",
            "(line 102,col 9)-(line 102,col 70)",
            "(line 105,col 9)-(line 105,col 89)",
            "(line 106,col 9)-(line 106,col 107)",
            "(line 107,col 9)-(line 107,col 75)",
            "(line 108,col 9)-(line 108,col 74)",
            "(line 111,col 9)-(line 111,col 35)",
            "(line 112,col 9)-(line 112,col 40)",
            "(line 113,col 9)-(line 113,col 70)",
            "(line 114,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 70)",
            "(line 116,col 9)-(line 116,col 71)",
            "(line 119,col 9)-(line 119,col 68)",
            "(line 120,col 9)-(line 120,col 89)",
            "(line 121,col 9)-(line 122,col 68)",
            "(line 123,col 9)-(line 123,col 71)",
            "(line 124,col 9)-(line 124,col 70)",
            "(line 127,col 9)-(line 127,col 105)",
            "(line 128,col 9)-(line 128,col 110)",
            "(line 129,col 9)-(line 129,col 71)",
            "(line 130,col 9)-(line 130,col 70)",
            "(line 133,col 9)-(line 133,col 90)",
            "(line 134,col 9)-(line 134,col 96)",
            "(line 135,col 9)-(line 135,col 71)",
            "(line 136,col 9)-(line 136,col 70)",
            "(line 139,col 9)-(line 139,col 90)",
            "(line 140,col 9)-(line 140,col 96)",
            "(line 141,col 9)-(line 141,col 71)",
            "(line 142,col 9)-(line 142,col 70)",
            "(line 145,col 9)-(line 145,col 88)",
            "(line 146,col 9)-(line 146,col 94)",
            "(line 147,col 9)-(line 147,col 71)",
            "(line 148,col 9)-(line 148,col 96)",
            "(line 149,col 9)-(line 149,col 70)",
            "(line 152,col 9)-(line 152,col 88)",
            "(line 153,col 9)-(line 153,col 94)",
            "(line 154,col 9)-(line 154,col 71)",
            "(line 155,col 9)-(line 155,col 95)",
            "(line 156,col 9)-(line 156,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalize_String()",
        "snippet": "    public void testCapitalize_String() {\n        assertEquals(null, WordUtils.capitalize(null));\n        assertEquals(\"\", WordUtils.capitalize(\"\"));\n        assertEquals(\"  \", WordUtils.capitalize(\"  \"));\n        \n        assertEquals(\"I\", WordUtils.capitalize(\"I\") );\n        assertEquals(\"I\", WordUtils.capitalize(\"i\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\") );\n        assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\") );\n        assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n    }\n",
        "begin_line": 162,
        "end_line": 173,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 55)",
            "(line 164,col 9)-(line 164,col 51)",
            "(line 165,col 9)-(line 165,col 55)",
            "(line 167,col 9)-(line 167,col 54)",
            "(line 168,col 9)-(line 168,col 54)",
            "(line 169,col 9)-(line 169,col 78)",
            "(line 170,col 9)-(line 170,col 78)",
            "(line 171,col 9)-(line 171,col 78)",
            "(line 172,col 9)-(line 172,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalizeWithDelimiters_String()",
        "snippet": "    public void testCapitalizeWithDelimiters_String() {\n        assertEquals(null, WordUtils.capitalize(null, null));\n        assertEquals(\"\", WordUtils.capitalize(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.capitalize(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"I\", WordUtils.capitalize(\"I\", chars) );\n        assertEquals(\"I\", WordUtils.capitalize(\"i\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars) );\n        assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars) );\n        assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars) );\n        assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"I aM.Fine\", WordUtils.capitalize(\"i aM.fine\", chars) );\n        assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null) );\n    }\n",
        "begin_line": 175,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 61)",
            "(line 177,col 9)-(line 177,col 64)",
            "(line 178,col 9)-(line 178,col 68)",
            "(line 180,col 9)-(line 180,col 57)",
            "(line 181,col 9)-(line 181,col 61)",
            "(line 182,col 9)-(line 182,col 61)",
            "(line 183,col 9)-(line 183,col 85)",
            "(line 184,col 9)-(line 184,col 85)",
            "(line 185,col 9)-(line 185,col 85)",
            "(line 186,col 9)-(line 186,col 85)",
            "(line 187,col 9)-(line 187,col 33)",
            "(line 188,col 9)-(line 188,col 77)",
            "(line 189,col 9)-(line 189,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalizeFully_String()",
        "snippet": "    public void testCapitalizeFully_String() {\n        assertEquals(null, WordUtils.capitalizeFully(null));\n        assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\n        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\n        \n        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\") );\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\") );\n        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\") );\n    }\n",
        "begin_line": 192,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 193,col 9)-(line 193,col 60)",
            "(line 194,col 9)-(line 194,col 56)",
            "(line 195,col 9)-(line 195,col 60)",
            "(line 197,col 9)-(line 197,col 59)",
            "(line 198,col 9)-(line 198,col 59)",
            "(line 199,col 9)-(line 199,col 83)",
            "(line 200,col 9)-(line 200,col 83)",
            "(line 201,col 9)-(line 201,col 83)",
            "(line 202,col 9)-(line 202,col 83)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testCapitalizeFullyWithDelimiters_String()",
        "snippet": "    public void testCapitalizeFullyWithDelimiters_String() {\n        assertEquals(null, WordUtils.capitalizeFully(null, null));\n        assertEquals(\"\", WordUtils.capitalizeFully(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars) );\n        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars) );\n        assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars) );\n        assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars) );\n        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"I am.Fine\", WordUtils.capitalizeFully(\"i aM.fine\", chars) );\n        assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null) );\n    }\n",
        "begin_line": 205,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 206,col 9)-(line 206,col 66)",
            "(line 207,col 9)-(line 207,col 69)",
            "(line 208,col 9)-(line 208,col 73)",
            "(line 210,col 9)-(line 210,col 57)",
            "(line 211,col 9)-(line 211,col 66)",
            "(line 212,col 9)-(line 212,col 66)",
            "(line 213,col 9)-(line 213,col 90)",
            "(line 214,col 9)-(line 214,col 90)",
            "(line 215,col 9)-(line 215,col 90)",
            "(line 216,col 9)-(line 216,col 90)",
            "(line 217,col 9)-(line 217,col 33)",
            "(line 218,col 9)-(line 218,col 82)",
            "(line 219,col 9)-(line 219,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testUncapitalize_String()",
        "snippet": "    public void testUncapitalize_String() {\n        assertEquals(null, WordUtils.uncapitalize(null));\n        assertEquals(\"\", WordUtils.uncapitalize(\"\"));\n        assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.uncapitalize(\"I\") );\n        assertEquals(\"i\", WordUtils.uncapitalize(\"i\") );\n        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\") );\n        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\") );\n        assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\") );\n        assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n    }\n",
        "begin_line": 222,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 57)",
            "(line 224,col 9)-(line 224,col 53)",
            "(line 225,col 9)-(line 225,col 57)",
            "(line 227,col 9)-(line 227,col 56)",
            "(line 228,col 9)-(line 228,col 56)",
            "(line 229,col 9)-(line 229,col 80)",
            "(line 230,col 9)-(line 230,col 80)",
            "(line 231,col 9)-(line 231,col 80)",
            "(line 232,col 9)-(line 232,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testUncapitalizeWithDelimiters_String()",
        "snippet": "    public void testUncapitalizeWithDelimiters_String() {\n        assertEquals(null, WordUtils.uncapitalize(null, null));\n        assertEquals(\"\", WordUtils.uncapitalize(\"\", new char[0]));\n        assertEquals(\"  \", WordUtils.uncapitalize(\"  \", new char[0]));\n        \n        char[] chars = new char[] { '-', '+', ' ', '@' };\n        assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars) );\n        assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars) );\n        assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars) );\n        assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars) );\n        assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars) );\n        assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars) );\n        chars = new char[] {'.'};\n        assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars) );\n        assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null) );\n    }\n",
        "begin_line": 235,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 63)",
            "(line 237,col 9)-(line 237,col 66)",
            "(line 238,col 9)-(line 238,col 70)",
            "(line 240,col 9)-(line 240,col 57)",
            "(line 241,col 9)-(line 241,col 63)",
            "(line 242,col 9)-(line 242,col 63)",
            "(line 243,col 9)-(line 243,col 87)",
            "(line 244,col 9)-(line 244,col 87)",
            "(line 245,col 9)-(line 245,col 87)",
            "(line 246,col 9)-(line 246,col 87)",
            "(line 247,col 9)-(line 247,col 33)",
            "(line 248,col 9)-(line 248,col 79)",
            "(line 249,col 9)-(line 249,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testInitials_String()",
        "snippet": "    public void testInitials_String() {\n        assertEquals(null, WordUtils.initials(null));\n        assertEquals(\"\", WordUtils.initials(\"\"));\n        assertEquals(\"\", WordUtils.initials(\"  \"));\n\n        assertEquals(\"I\", WordUtils.initials(\"I\"));\n        assertEquals(\"i\", WordUtils.initials(\"i\"));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\n    }\n",
        "begin_line": 253,
        "end_line": 264,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 53)",
            "(line 255,col 9)-(line 255,col 49)",
            "(line 256,col 9)-(line 256,col 51)",
            "(line 258,col 9)-(line 258,col 51)",
            "(line 259,col 9)-(line 259,col 51)",
            "(line 260,col 9)-(line 260,col 64)",
            "(line 261,col 9)-(line 261,col 60)",
            "(line 262,col 9)-(line 262,col 71)",
            "(line 263,col 9)-(line 263,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testInitials_String_charArray()",
        "snippet": "    public void testInitials_String_charArray() {\n        char[] array = null;\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = new char[0];\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"\", WordUtils.initials(\"I\", array));\n        assertEquals(\"\", WordUtils.initials(\"i\", array));\n        assertEquals(\"\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" \".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" .\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \" .'\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\"\", WordUtils.initials(\"  \", array));\n        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n        \n        array = \"SIJo1\".toCharArray();\n        assertEquals(null, WordUtils.initials(null, array));\n        assertEquals(\"\", WordUtils.initials(\"\", array));\n        assertEquals(\" \", WordUtils.initials(\"  \", array));\n        assertEquals(\"\", WordUtils.initials(\"I\", array));\n        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n        assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\n        assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\n        assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\n        assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\n        assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\n        assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\n    }\n",
        "begin_line": 267,
        "end_line": 345,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 268,col 9)-(line 268,col 28)",
            "(line 269,col 9)-(line 269,col 60)",
            "(line 270,col 9)-(line 270,col 56)",
            "(line 271,col 9)-(line 271,col 58)",
            "(line 272,col 9)-(line 272,col 58)",
            "(line 273,col 9)-(line 273,col 58)",
            "(line 274,col 9)-(line 274,col 60)",
            "(line 275,col 9)-(line 275,col 71)",
            "(line 276,col 9)-(line 276,col 67)",
            "(line 277,col 9)-(line 277,col 78)",
            "(line 278,col 9)-(line 278,col 70)",
            "(line 279,col 9)-(line 279,col 73)",
            "(line 281,col 9)-(line 281,col 28)",
            "(line 282,col 9)-(line 282,col 60)",
            "(line 283,col 9)-(line 283,col 56)",
            "(line 284,col 9)-(line 284,col 58)",
            "(line 285,col 9)-(line 285,col 57)",
            "(line 286,col 9)-(line 286,col 57)",
            "(line 287,col 9)-(line 287,col 59)",
            "(line 288,col 9)-(line 288,col 68)",
            "(line 289,col 9)-(line 289,col 65)",
            "(line 290,col 9)-(line 290,col 74)",
            "(line 291,col 9)-(line 291,col 68)",
            "(line 292,col 9)-(line 292,col 69)",
            "(line 294,col 9)-(line 294,col 34)",
            "(line 295,col 9)-(line 295,col 60)",
            "(line 296,col 9)-(line 296,col 56)",
            "(line 297,col 9)-(line 297,col 58)",
            "(line 298,col 9)-(line 298,col 58)",
            "(line 299,col 9)-(line 299,col 58)",
            "(line 300,col 9)-(line 300,col 60)",
            "(line 301,col 9)-(line 301,col 71)",
            "(line 302,col 9)-(line 302,col 67)",
            "(line 303,col 9)-(line 303,col 78)",
            "(line 304,col 9)-(line 304,col 70)",
            "(line 305,col 9)-(line 305,col 73)",
            "(line 307,col 9)-(line 307,col 35)",
            "(line 308,col 9)-(line 308,col 60)",
            "(line 309,col 9)-(line 309,col 56)",
            "(line 310,col 9)-(line 310,col 58)",
            "(line 311,col 9)-(line 311,col 58)",
            "(line 312,col 9)-(line 312,col 58)",
            "(line 313,col 9)-(line 313,col 60)",
            "(line 314,col 9)-(line 314,col 71)",
            "(line 315,col 9)-(line 315,col 68)",
            "(line 316,col 9)-(line 316,col 77)",
            "(line 317,col 9)-(line 317,col 70)",
            "(line 318,col 9)-(line 318,col 73)",
            "(line 320,col 9)-(line 320,col 36)",
            "(line 321,col 9)-(line 321,col 60)",
            "(line 322,col 9)-(line 322,col 56)",
            "(line 323,col 9)-(line 323,col 58)",
            "(line 324,col 9)-(line 324,col 58)",
            "(line 325,col 9)-(line 325,col 58)",
            "(line 326,col 9)-(line 326,col 60)",
            "(line 327,col 9)-(line 327,col 71)",
            "(line 328,col 9)-(line 328,col 68)",
            "(line 329,col 9)-(line 329,col 77)",
            "(line 330,col 9)-(line 330,col 71)",
            "(line 331,col 9)-(line 331,col 73)",
            "(line 333,col 9)-(line 333,col 38)",
            "(line 334,col 9)-(line 334,col 60)",
            "(line 335,col 9)-(line 335,col 56)",
            "(line 336,col 9)-(line 336,col 59)",
            "(line 337,col 9)-(line 337,col 57)",
            "(line 338,col 9)-(line 338,col 58)",
            "(line 339,col 9)-(line 339,col 60)",
            "(line 340,col 9)-(line 340,col 70)",
            "(line 341,col 9)-(line 341,col 67)",
            "(line 342,col 9)-(line 342,col 76)",
            "(line 343,col 9)-(line 343,col 69)",
            "(line 344,col 9)-(line 344,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testSwapCase_String()",
        "snippet": "    public void testSwapCase_String() {\n        assertEquals(null, WordUtils.swapCase(null));\n        assertEquals(\"\", WordUtils.swapCase(\"\"));\n        assertEquals(\"  \", WordUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\") );\n\n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }\n",
        "begin_line": 348,
        "end_line": 363,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 53)",
            "(line 350,col 9)-(line 350,col 49)",
            "(line 351,col 9)-(line 351,col 53)",
            "(line 353,col 9)-(line 353,col 52)",
            "(line 354,col 9)-(line 354,col 52)",
            "(line 355,col 9)-(line 355,col 76)",
            "(line 356,col 9)-(line 356,col 76)",
            "(line 357,col 9)-(line 357,col 76)",
            "(line 358,col 9)-(line 358,col 76)",
            "(line 360,col 9)-(line 360,col 75)",
            "(line 361,col 9)-(line 361,col 77)",
            "(line 362,col 9)-(line 362,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.WordUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/WordUtilsTest.java",
        "signature": "org.apache.commons.lang.WordUtilsTest.testAbbreviate()",
        "snippet": "    public void testAbbreviate() {\n        // check null and empty are returned respectively\n        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n\n        // test upper limit\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test upper limit + append string\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n\n        // test lower value\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\n\n        // test lower value + append\n        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n\n        // others\n        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n    }\n",
        "begin_line": 366,
        "end_line": 401,
        "comment": " -----------------------------------------------------------------------",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 56)",
            "(line 369,col 9)-(line 369,col 75)",
            "(line 372,col 9)-(line 372,col 74)",
            "(line 373,col 9)-(line 373,col 75)",
            "(line 374,col 9)-(line 374,col 74)",
            "(line 375,col 9)-(line 375,col 76)",
            "(line 376,col 9)-(line 376,col 80)",
            "(line 379,col 9)-(line 379,col 76)",
            "(line 380,col 9)-(line 380,col 77)",
            "(line 381,col 9)-(line 381,col 77)",
            "(line 382,col 9)-(line 382,col 76)",
            "(line 383,col 9)-(line 383,col 80)",
            "(line 386,col 9)-(line 386,col 76)",
            "(line 387,col 9)-(line 387,col 80)",
            "(line 388,col 9)-(line 388,col 89)",
            "(line 389,col 9)-(line 389,col 88)",
            "(line 390,col 9)-(line 390,col 85)",
            "(line 393,col 9)-(line 393,col 76)",
            "(line 394,col 9)-(line 394,col 80)",
            "(line 395,col 9)-(line 395,col 93)",
            "(line 396,col 9)-(line 396,col 86)",
            "(line 399,col 9)-(line 399,col 69)",
            "(line 400,col 9)-(line 400,col 71)"
        ]
    }
]