[
    {
        "name": "TimePeriodValues.getMaxMiddleIndex#551",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.getMaxMiddleIndex()",
        "snippet": "    public int getMaxMiddleIndex() {\n        return this.maxMiddleIndex;\n    }\n",
        "begin_line": 551,
        "end_line": 553,
        "comment": "\r\n     * Returns the index of the time period with the maximum middle \r\n     * milliseconds.\r\n     * \r\n     * @return The index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValues.updateBounds#257",
        "is_bug": true,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.updateBounds(org.jfree.data.time.TimePeriod, int)",
        "snippet": "    private void updateBounds(TimePeriod period, int index) {\n        \n        long start = period.getStart().getTime();\n        long end = period.getEnd().getTime();\n        long middle = start + ((end - start) / 2);\n\n        if (this.minStartIndex >= 0) {\n            long minStart = getDataItem(this.minStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start < minStart) {\n                this.minStartIndex = index;           \n            }\n        }\n        else {\n            this.minStartIndex = index;\n        }\n        \n        if (this.maxStartIndex >= 0) {\n            long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n                .getStart().getTime();\n            if (start > maxStart) {\n                this.maxStartIndex = index;           \n            }\n        }\n        else {\n            this.maxStartIndex = index;\n        }\n        \n        if (this.minMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long minMiddle = s + (e - s) / 2;\n            if (middle < minMiddle) {\n                this.minMiddleIndex = index;           \n            }\n        }\n        else {\n            this.minMiddleIndex = index;\n        }\n        \n        if (this.maxMiddleIndex >= 0) {\n            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n                .getTime();\n            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n                .getTime();\n            long maxMiddle = s + (e - s) / 2;\n            if (middle > maxMiddle) {\n                this.maxMiddleIndex = index;           \n            }\n        }\n        else {\n            this.maxMiddleIndex = index;\n        }\n        \n        if (this.minEndIndex >= 0) {\n            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end < minEnd) {\n                this.minEndIndex = index;           \n            }\n        }\n        else {\n            this.minEndIndex = index;\n        }\n       \n        if (this.maxEndIndex >= 0) {\n            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n                .getTime();\n            if (end > maxEnd) {\n                this.maxEndIndex = index;           \n            }\n        }\n        else {\n            this.maxEndIndex = index;\n        }\n        \n    }\n",
        "begin_line": 257,
        "end_line": 335,
        "comment": "\r\n     * Update the index values for the maximum and minimum bounds.\r\n     * \r\n     * @param period  the time period.\r\n     * @param index  the index of the time period.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleTimePeriod.SimpleTimePeriod#76",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "signature": "org.jfree.data.time.SimpleTimePeriod.SimpleTimePeriod(long, long)",
        "snippet": "    public SimpleTimePeriod(long start, long end) {\n        if (start > end) {\n            throw new IllegalArgumentException(\"Requires start <= end.\");\n        }\n        this.start = start;\n        this.end = end;\n    }\n",
        "begin_line": 76,
        "end_line": 82,
        "comment": "\r\n     * Creates a new time allocation.\r\n     *\r\n     * @param start  the start date/time in milliseconds.\r\n     * @param end  the end date/time in milliseconds.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleTimePeriod.getStart#99",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "signature": "org.jfree.data.time.SimpleTimePeriod.getStart()",
        "snippet": "    public Date getStart() {\n        return new Date(this.start);\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\r\n     * Returns the start date/time.\r\n     *\r\n     * @return The start date/time (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleTimePeriod.getEnd#119",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "signature": "org.jfree.data.time.SimpleTimePeriod.getEnd()",
        "snippet": "    public Date getEnd() {\n        return new Date(this.end);\n    }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\r\n     * Returns the end date/time.\r\n     *\r\n     * @return The end date/time (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.Year#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.Year(int)",
        "snippet": "    public Year(int year) {\n        if ((year < SerialDate.MINIMUM_YEAR_SUPPORTED)\n            || (year > SerialDate.MAXIMUM_YEAR_SUPPORTED)) {\n\n            throw new IllegalArgumentException(\n                \"Year constructor: year (\" + year + \") outside valid range.\");\n        }\n        this.year = (short) year;\n        peg(Calendar.getInstance());\n    }\n",
        "begin_line": 96,
        "end_line": 105,
        "comment": "\r\n     * Creates a time period representing a single year.\r\n     *\r\n     * @param year  the year.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getFirstMillisecond#149",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getFirstMillisecond()",
        "snippet": "    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n",
        "begin_line": 149,
        "end_line": 151,
        "comment": "\r\n     * Returns the first millisecond of the year.  This will be determined\r\n     * relative to the time zone specified in the constructor, or in the\r\n     * calendar instance passed in the most recent call to the\r\n     * {@link #peg(Calendar)} method.\r\n     *\r\n     * @return The first millisecond of the year.\r\n     *\r\n     * @see #getLastMillisecond()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getLastMillisecond#163",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getLastMillisecond()",
        "snippet": "    public long getLastMillisecond() {\n        return this.lastMillisecond;\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\r\n     * Returns the last millisecond of the year.  This will be\r\n     * determined relative to the time zone specified in the constructor, or\r\n     * in the calendar instance passed in the most recent call to the\r\n     * {@link #peg(Calendar)} method.\r\n     *\r\n     * @return The last millisecond of the year.\r\n     *\r\n     * @see #getFirstMillisecond()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.peg#175",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 175,
        "end_line": 178,
        "comment": "\r\n     * Recalculates the start date/time and end date/time for this time period\r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getFirstMillisecond#232",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.JANUARY, 1, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 232,
        "end_line": 238,
        "comment": "\r\n     * Returns the first millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The first millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "Year.getLastMillisecond#251",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Year.java",
        "class_name": "org.jfree.data.time.Year",
        "signature": "org.jfree.data.time.Year.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        calendar.set(this.year, Calendar.DECEMBER, 31, 23, 59, 59);\n        calendar.set(Calendar.MILLISECOND, 999);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 251,
        "end_line": 257,
        "comment": "\r\n     * Returns the last millisecond of the year, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The last millisecond of the year.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValues.add#362",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.add(org.jfree.data.time.TimePeriod, double)",
        "snippet": "    public void add(TimePeriod period, double value) {\n        TimePeriodValue item = new TimePeriodValue(period, value);\n        add(item);\n    }\n",
        "begin_line": 362,
        "end_line": 365,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value.\r\n     * \r\n     * @see #add(TimePeriod, Number)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValues.add#374",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.add(org.jfree.data.time.TimePeriod, java.lang.Number)",
        "snippet": "    public void add(TimePeriod period, Number value) {\n        TimePeriodValue item = new TimePeriodValue(period, value);\n        add(item);\n    }\n",
        "begin_line": 374,
        "end_line": 377,
        "comment": "\r\n     * Adds a new data item to the series and sends a {@link SeriesChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3162
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValue.TimePeriodValue#87",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValue.java",
        "class_name": "org.jfree.data.time.TimePeriodValue",
        "signature": "org.jfree.data.time.TimePeriodValue.TimePeriodValue(org.jfree.data.time.TimePeriod, double)",
        "snippet": "    public TimePeriodValue(TimePeriod period, double value) {\n        this(period, new Double(value));\n    }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\r\n     * Constructs a new data item.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value associated with the time period.\r\n     *\r\n     * @throws IllegalArgumentException if <code>period</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "RegularTimePeriod.getStart#181",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/RegularTimePeriod.java",
        "class_name": "org.jfree.data.time.RegularTimePeriod",
        "signature": "org.jfree.data.time.RegularTimePeriod.getStart()",
        "snippet": "    public Date getStart() {\n        return new Date(getFirstMillisecond());\n    }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "\r\n     * Returns the date/time that marks the start of the time period.  This\r\n     * method returns a new <code>Date</code> instance every time it is called.\r\n     *\r\n     * @return The start date/time.\r\n     *\r\n     * @see #getFirstMillisecond()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "RegularTimePeriod.getEnd#193",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/RegularTimePeriod.java",
        "class_name": "org.jfree.data.time.RegularTimePeriod",
        "signature": "org.jfree.data.time.RegularTimePeriod.getEnd()",
        "snippet": "    public Date getEnd() {\n        return new Date(getLastMillisecond());\n    }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": "\r\n     * Returns the date/time that marks the end of the time period.  This\r\n     * method returns a new <code>Date</code> instance every time it is called.\r\n     *\r\n     * @return The end date/time.\r\n     *\r\n     * @see #getLastMillisecond()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValues.getDataItem#204",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.getDataItem(int)",
        "snippet": "    public TimePeriodValue getDataItem(int index) {\n        return (TimePeriodValue) this.data.get(index);\n    }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\r\n     * Returns one data item for the series.\r\n     *\r\n     * @param index  the item index (in the range <code>0</code> to \r\n     *     <code>getItemCount() - 1</code>).\r\n     *\r\n     * @return One data item for the series.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValues.add#242",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.add(org.jfree.data.time.TimePeriodValue)",
        "snippet": "    public void add(TimePeriodValue item) {\n        if (item == null) {\n            throw new IllegalArgumentException(\"Null item not allowed.\");\n        }\n        this.data.add(item);\n        updateBounds(item.getPeriod(), this.data.size() - 1);\n        fireSeriesChanged();\n    }\n",
        "begin_line": 242,
        "end_line": 249,
        "comment": "\r\n     * Adds a data item to the series and sends a {@link SeriesChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param item  the item (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValue.TimePeriodValue#70",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValue.java",
        "class_name": "org.jfree.data.time.TimePeriodValue",
        "signature": "org.jfree.data.time.TimePeriodValue.TimePeriodValue(org.jfree.data.time.TimePeriod, java.lang.Number)",
        "snippet": "    public TimePeriodValue(TimePeriod period, Number value) {\n        if (period == null) {\n            throw new IllegalArgumentException(\"Null 'period' argument.\");\n        }\n        this.period = period;\n        this.value = value;\n    }\n",
        "begin_line": 70,
        "end_line": 76,
        "comment": "\r\n     * Constructs a new data item.\r\n     *\r\n     * @param period  the time period (<code>null</code> not permitted).\r\n     * @param value  the value associated with the time period.\r\n     *\r\n     * @throws IllegalArgumentException if <code>period</code> is\r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValue.getPeriod#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValue.java",
        "class_name": "org.jfree.data.time.TimePeriodValue",
        "signature": "org.jfree.data.time.TimePeriodValue.getPeriod()",
        "snippet": "    public TimePeriod getPeriod() {\n        return this.period;\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\r\n     * Returns the time period.\r\n     *\r\n     * @return The time period (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#60",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        super(source);\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.fireSeriesChanged#312",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 312,
        "end_line": 316,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.notifyListeners#324",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 324,
        "end_line": 334,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2773
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValues.TimePeriodValues#113",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.TimePeriodValues(java.lang.Comparable)",
        "snippet": "    public TimePeriodValues(Comparable name) {\n        this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);\n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\r\n     * Creates a new (empty) collection of time period values.\r\n     *\r\n     * @param name  the name of the series (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "TimePeriodValues.TimePeriodValues#128",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/TimePeriodValues.java",
        "class_name": "org.jfree.data.time.TimePeriodValues",
        "signature": "org.jfree.data.time.TimePeriodValues.TimePeriodValues(java.lang.Comparable, java.lang.String, java.lang.String)",
        "snippet": "    public TimePeriodValues(Comparable name, String domain, String range) {\n        super(name);\n        this.domain = domain;\n        this.range = range;\n        this.data = new ArrayList();\n    }\n",
        "begin_line": 128,
        "end_line": 133,
        "comment": "\r\n     * Creates a new time series that contains no data.\r\n     * <P>\r\n     * Descriptions can be specified for the domain and range.  One situation\r\n     * where this is helpful is when generating a chart for the time series -\r\n     * axis labels can be taken from the domain and range description.\r\n     *\r\n     * @param name  the name of the series (<code>null</code> not permitted).\r\n     * @param domain  the domain description.\r\n     * @param range  the range description.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#101",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\r\n     * Creates a new series with the specified key.  \r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;   \n    }\n",
        "begin_line": 111,
        "end_line": 120,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    }
]