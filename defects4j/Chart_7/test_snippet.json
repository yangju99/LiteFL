[
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(TimePeriodValuesTests.class);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.TimePeriodValuesTests(java.lang.String)",
        "snippet": "    public TimePeriodValuesTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.setUp()",
        "snippet": "    protected void setUp() {\n\n        this.seriesA = new TimePeriodValues(\"Series A\");\n        try {\n            this.seriesA.add(new Year(2000), new Integer(102000));\n            this.seriesA.add(new Year(2001), new Integer(102001));\n            this.seriesA.add(new Year(2002), new Integer(102002));\n            this.seriesA.add(new Year(2003), new Integer(102003));\n            this.seriesA.add(new Year(2004), new Integer(102004));\n            this.seriesA.add(new Year(2005), new Integer(102005));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesB = new TimePeriodValues(\"Series B\");\n        try {\n            this.seriesB.add(new Year(2006), new Integer(202006));\n            this.seriesB.add(new Year(2007), new Integer(202007));\n            this.seriesB.add(new Year(2008), new Integer(202008));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n        this.seriesC = new TimePeriodValues(\"Series C\");\n        try {\n            this.seriesC.add(new Year(1999), new Integer(301999));\n            this.seriesC.add(new Year(2000), new Integer(302000));\n            this.seriesC.add(new Year(2002), new Integer(302002));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem creating series.\");\n        }\n\n    }\n",
        "begin_line": 104,
        "end_line": 139,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 56)",
            "(line 107,col 9)-(line 117,col 9)",
            "(line 119,col 9)-(line 119,col 56)",
            "(line 120,col 9)-(line 127,col 9)",
            "(line 129,col 9)-(line 129,col 56)",
            "(line 130,col 9)-(line 137,col 9)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testClone()",
        "snippet": "    public void testClone() {\n\n        TimePeriodValues series = new TimePeriodValues(\"Test Series\");\n\n        RegularTimePeriod jan1st2002 = new Day(1, MonthConstants.JANUARY, 2002);\n        try {\n            series.add(jan1st2002, new Integer(42));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to collection.\");\n        }\n\n        TimePeriodValues clone = null;\n        try {\n            clone = (TimePeriodValues) series.clone();\n            clone.setKey(\"Clone Series\");\n            try {\n                clone.update(0, new Integer(10));\n            }\n            catch (SeriesException e) {\n                System.err.println(\"Problem updating series.\");\n            }\n        }\n        catch (CloneNotSupportedException e) {\n            assertTrue(false);\n        }\n\n        int seriesValue = series.getValue(0).intValue();\n        int cloneValue = clone.getValue(0).intValue();\n\n        assertEquals(42, seriesValue);\n        assertEquals(10, cloneValue);\n        assertEquals(\"Test Series\", series.getKey());\n        assertEquals(\"Clone Series\", clone.getKey());\n\n    }\n",
        "begin_line": 145,
        "end_line": 180,
        "comment": "\n     * Set up a quarter equal to Q1 1900.  Request the previous quarter, it \n     * should be null.\n     ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 70)",
            "(line 149,col 9)-(line 149,col 80)",
            "(line 150,col 9)-(line 155,col 9)",
            "(line 157,col 9)-(line 157,col 38)",
            "(line 158,col 9)-(line 170,col 9)",
            "(line 172,col 9)-(line 172,col 56)",
            "(line 173,col 9)-(line 173,col 54)",
            "(line 175,col 9)-(line 175,col 38)",
            "(line 176,col 9)-(line 176,col 37)",
            "(line 177,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testAddValue()",
        "snippet": "    public void testAddValue() {\n\n        TimePeriodValues tpvs = new TimePeriodValues(\"Test\");\n        try {\n            tpvs.add(new Year(1999), new Integer(1));\n        }\n        catch (SeriesException e) {\n            System.err.println(\"Problem adding to series.\");\n        }\n\n        int value = tpvs.getValue(0).intValue();\n        assertEquals(1, value);\n\n    }\n",
        "begin_line": 185,
        "end_line": 198,
        "comment": "\n     * Add a value to series A for 1999.  It should be added at index 0.\n     ",
        "child_ranges": [
            "(line 187,col 9)-(line 187,col 61)",
            "(line 188,col 9)-(line 193,col 9)",
            "(line 195,col 9)-(line 195,col 48)",
            "(line 196,col 9)-(line 196,col 31)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        TimePeriodValues s1 = new TimePeriodValues(\"A test\");\n        s1.add(new Year(2000), 13.75);\n        s1.add(new Year(2001), 11.90);\n        s1.add(new Year(2002), null);\n        s1.add(new Year(2005), 19.32);\n        s1.add(new Year(2007), 16.89);\n        TimePeriodValues s2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(s1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            s2 = (TimePeriodValues) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(s1.equals(s2));\n\n    }\n",
        "begin_line": 203,
        "end_line": 229,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 205,col 9)-(line 205,col 61)",
            "(line 206,col 9)-(line 206,col 38)",
            "(line 207,col 9)-(line 207,col 38)",
            "(line 208,col 9)-(line 208,col 37)",
            "(line 209,col 9)-(line 209,col 38)",
            "(line 210,col 9)-(line 210,col 38)",
            "(line 211,col 9)-(line 211,col 35)",
            "(line 213,col 9)-(line 226,col 9)",
            "(line 227,col 9)-(line 227,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testEquals()",
        "snippet": "    public void testEquals() {\n        TimePeriodValues s1 = new TimePeriodValues(\"Time Series 1\");\n        TimePeriodValues s2 = new TimePeriodValues(\"Time Series 2\");\n        boolean b1 = s1.equals(s2);\n        assertFalse(\"b1\", b1);\n\n        s2.setKey(\"Time Series 1\");\n        boolean b2 = s1.equals(s2);\n        assertTrue(\"b2\", b2);\n\n        // domain description\n        s1.setDomainDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        // domain description - null\n        s1.setDomainDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setDomainDescription(null);\n        assertTrue(s1.equals(s2));\n        \n        // range description\n        s1.setRangeDescription(\"XYZ\");\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(\"XYZ\");\n        assertTrue(s1.equals(s2));\n        \n        // range description - null\n        s1.setRangeDescription(null);\n        assertFalse(s1.equals(s2));\n        s2.setRangeDescription(null);\n        assertTrue(s1.equals(s2));\n\n        RegularTimePeriod p1 = new Day();\n        RegularTimePeriod p2 = p1.next();\n        s1.add(p1, 100.0);\n        s1.add(p2, 200.0);\n        boolean b3 = s1.equals(s2);\n        assertFalse(\"b3\", b3);\n\n        s2.add(p1, 100.0);\n        s2.add(p2, 200.0);\n        boolean b4 = s1.equals(s2);\n        assertTrue(\"b4\", b4);\n\n    }\n",
        "begin_line": 234,
        "end_line": 280,
        "comment": "\n     * Tests the equals method.\n     ",
        "child_ranges": [
            "(line 235,col 9)-(line 235,col 68)",
            "(line 236,col 9)-(line 236,col 68)",
            "(line 237,col 9)-(line 237,col 35)",
            "(line 238,col 9)-(line 238,col 30)",
            "(line 240,col 9)-(line 240,col 35)",
            "(line 241,col 9)-(line 241,col 35)",
            "(line 242,col 9)-(line 242,col 29)",
            "(line 245,col 9)-(line 245,col 39)",
            "(line 246,col 9)-(line 246,col 35)",
            "(line 247,col 9)-(line 247,col 39)",
            "(line 248,col 9)-(line 248,col 34)",
            "(line 251,col 9)-(line 251,col 38)",
            "(line 252,col 9)-(line 252,col 35)",
            "(line 253,col 9)-(line 253,col 38)",
            "(line 254,col 9)-(line 254,col 34)",
            "(line 257,col 9)-(line 257,col 38)",
            "(line 258,col 9)-(line 258,col 35)",
            "(line 259,col 9)-(line 259,col 38)",
            "(line 260,col 9)-(line 260,col 34)",
            "(line 263,col 9)-(line 263,col 37)",
            "(line 264,col 9)-(line 264,col 35)",
            "(line 265,col 9)-(line 265,col 37)",
            "(line 266,col 9)-(line 266,col 34)",
            "(line 268,col 9)-(line 268,col 41)",
            "(line 269,col 9)-(line 269,col 41)",
            "(line 270,col 9)-(line 270,col 26)",
            "(line 271,col 9)-(line 271,col 26)",
            "(line 272,col 9)-(line 272,col 35)",
            "(line 273,col 9)-(line 273,col 30)",
            "(line 275,col 9)-(line 275,col 26)",
            "(line 276,col 9)-(line 276,col 26)",
            "(line 277,col 9)-(line 277,col 35)",
            "(line 278,col 9)-(line 278,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.test1161329()",
        "snippet": "    public void test1161329() {\n        TimePeriodValues tpv = new TimePeriodValues(\"Test\");\n        RegularTimePeriod t = new Day();\n        tpv.add(t, 1.0);\n        t = t.next();\n        tpv.add(t, 2.0);\n        tpv.delete(0, 1);\n        assertEquals(0, tpv.getItemCount());\n        tpv.add(t, 2.0);\n        assertEquals(1, tpv.getItemCount());\n    }\n",
        "begin_line": 285,
        "end_line": 295,
        "comment": "\n     * A test for bug report 1161329.\n     ",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 60)",
            "(line 287,col 9)-(line 287,col 40)",
            "(line 288,col 9)-(line 288,col 24)",
            "(line 289,col 9)-(line 289,col 21)",
            "(line 290,col 9)-(line 290,col 24)",
            "(line 291,col 9)-(line 291,col 25)",
            "(line 292,col 9)-(line 292,col 44)",
            "(line 293,col 9)-(line 293,col 24)",
            "(line 294,col 9)-(line 294,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testAdd()",
        "snippet": "    public void testAdd() {\n        TimePeriodValues tpv = new TimePeriodValues(\"Test\");\n        MySeriesChangeListener listener = new MySeriesChangeListener();\n        tpv.addChangeListener(listener);\n        tpv.add(new TimePeriodValue(new SimpleTimePeriod(new Date(1L), \n                new Date(3L)), 99.0));\n        assertEquals(99.0, tpv.getValue(0).doubleValue(), EPSILON);\n        assertEquals(tpv, listener.getLastEvent().getSource());\n        \n        // a null item should throw an IllegalArgumentException\n        boolean pass = false;\n        try {\n            tpv.add((TimePeriodValue) null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);\n    }\n",
        "begin_line": 302,
        "end_line": 320,
        "comment": "\n     * Some checks for the add() methods.\n     ",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 60)",
            "(line 304,col 9)-(line 304,col 71)",
            "(line 305,col 9)-(line 305,col 40)",
            "(line 306,col 9)-(line 307,col 38)",
            "(line 308,col 9)-(line 308,col 67)",
            "(line 309,col 9)-(line 309,col 63)",
            "(line 312,col 9)-(line 312,col 29)",
            "(line 313,col 9)-(line 318,col 9)",
            "(line 319,col 9)-(line 319,col 25)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testGetMinStartIndex()",
        "snippet": "    public void testGetMinStartIndex() {\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n        assertEquals(-1, s.getMinStartIndex());\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n        assertEquals(0, s.getMinStartIndex());\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n        assertEquals(0, s.getMinStartIndex());\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n        assertEquals(2, s.getMinStartIndex());\n    }\n",
        "begin_line": 325,
        "end_line": 334,
        "comment": "\n     * Some tests for the getMinStartIndex() method.\n     ",
        "child_ranges": [
            "(line 326,col 9)-(line 326,col 58)",
            "(line 327,col 9)-(line 327,col 47)",
            "(line 328,col 9)-(line 328,col 53)",
            "(line 329,col 9)-(line 329,col 46)",
            "(line 330,col 9)-(line 330,col 53)",
            "(line 331,col 9)-(line 331,col 46)",
            "(line 332,col 9)-(line 332,col 50)",
            "(line 333,col 9)-(line 333,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testGetMaxStartIndex()",
        "snippet": "    public void testGetMaxStartIndex() {\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n        assertEquals(-1, s.getMaxStartIndex());\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n        assertEquals(0, s.getMaxStartIndex());\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n        assertEquals(1, s.getMaxStartIndex());\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n        assertEquals(1, s.getMaxStartIndex());\n    }\n",
        "begin_line": 339,
        "end_line": 348,
        "comment": "\n     * Some tests for the getMaxStartIndex() method.\n     ",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 58)",
            "(line 341,col 9)-(line 341,col 47)",
            "(line 342,col 9)-(line 342,col 53)",
            "(line 343,col 9)-(line 343,col 46)",
            "(line 344,col 9)-(line 344,col 53)",
            "(line 345,col 9)-(line 345,col 46)",
            "(line 346,col 9)-(line 346,col 50)",
            "(line 347,col 9)-(line 347,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testGetMinMiddleIndex()",
        "snippet": "    public void testGetMinMiddleIndex() {\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n        assertEquals(-1, s.getMinMiddleIndex());\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n        assertEquals(0, s.getMinMiddleIndex());\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n        assertEquals(0, s.getMinMiddleIndex());\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n        assertEquals(2, s.getMinMiddleIndex());\n    }\n",
        "begin_line": 353,
        "end_line": 362,
        "comment": "\n     * Some tests for the getMinMiddleIndex() method.\n     ",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 58)",
            "(line 355,col 9)-(line 355,col 48)",
            "(line 356,col 9)-(line 356,col 53)",
            "(line 357,col 9)-(line 357,col 47)",
            "(line 358,col 9)-(line 358,col 53)",
            "(line 359,col 9)-(line 359,col 47)",
            "(line 360,col 9)-(line 360,col 50)",
            "(line 361,col 9)-(line 361,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.testGetMaxMiddleIndex()",
        "snippet": "    public void testGetMaxMiddleIndex() {\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n        assertEquals(-1, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n        assertEquals(0, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n        assertEquals(1, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n        assertEquals(1, s.getMaxMiddleIndex());\n        s.add(new SimpleTimePeriod(150L, 200L), 4.0);\n        assertEquals(1, s.getMaxMiddleIndex());\n    }\n",
        "begin_line": 367,
        "end_line": 378,
        "comment": "\n     * Some tests for the getMaxMiddleIndex() method.\n     ",
        "child_ranges": [
            "(line 368,col 9)-(line 368,col 58)",
            "(line 369,col 9)-(line 369,col 48)",
            "(line 370,col 9)-(line 370,col 53)",
            "(line 371,col 9)-(line 371,col 47)",
            "(line 372,col 9)-(line 372,col 53)",
            "(line 373,col 9)-(line 373,col 47)",
            "(line 374,col 9)-(line 374,col 50)",
            "(line 375,col 9)-(line 375,col 47)",
            "(line 376,col 9)-(line 376,col 53)",
            "(line 377,col 9)-(line 377,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.getMinEndIndex()",
        "snippet": "    public void getMinEndIndex() {\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n        assertEquals(-1, s.getMinEndIndex());\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n        assertEquals(0, s.getMinEndIndex());\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n        assertEquals(0, s.getMinEndIndex());\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n        assertEquals(2, s.getMinEndIndex());\n    }\n",
        "begin_line": 383,
        "end_line": 392,
        "comment": "\n     * Some tests for the getMinEndIndex() method.\n     ",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 58)",
            "(line 385,col 9)-(line 385,col 45)",
            "(line 386,col 9)-(line 386,col 53)",
            "(line 387,col 9)-(line 387,col 44)",
            "(line 388,col 9)-(line 388,col 53)",
            "(line 389,col 9)-(line 389,col 44)",
            "(line 390,col 9)-(line 390,col 50)",
            "(line 391,col 9)-(line 391,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.getMaxEndIndex()",
        "snippet": "    public void getMaxEndIndex() {\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n        assertEquals(-1, s.getMaxEndIndex());\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n        assertEquals(0, s.getMaxEndIndex());\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n        assertEquals(1, s.getMaxEndIndex());\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n        assertEquals(1, s.getMaxEndIndex());\n    }\n",
        "begin_line": 397,
        "end_line": 406,
        "comment": "\n     * Some tests for the getMaxEndIndex() method.\n     ",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 58)",
            "(line 399,col 9)-(line 399,col 45)",
            "(line 400,col 9)-(line 400,col 53)",
            "(line 401,col 9)-(line 401,col 44)",
            "(line 402,col 9)-(line 402,col 53)",
            "(line 403,col 9)-(line 403,col 44)",
            "(line 404,col 9)-(line 404,col 50)",
            "(line 405,col 9)-(line 405,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.MySeriesChangeListener()",
        "snippet": "        public MySeriesChangeListener() {\n            this.lastEvent = null;\n        }\n",
        "begin_line": 418,
        "end_line": 420,
        "comment": "\n         * Creates a new listener.\n         ",
        "child_ranges": [
            "(line 419,col 13)-(line 419,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.getLastEvent()",
        "snippet": "        public SeriesChangeEvent getLastEvent() {\n            return this.lastEvent;\n        }\n",
        "begin_line": 427,
        "end_line": 429,
        "comment": "\n         * Returns the last event.\n         * \n         * @return The last event (possibly <code>null</code>).\n         ",
        "child_ranges": [
            "(line 428,col 13)-(line 428,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.clearLastEvent()",
        "snippet": "        public void clearLastEvent() {\n            this.lastEvent = null;\n        }\n",
        "begin_line": 434,
        "end_line": 436,
        "comment": "\n         * Clears the last event (sets it to <code>null</code>).\n         ",
        "child_ranges": [
            "(line 435,col 13)-(line 435,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.data.time.junit.TimePeriodValuesTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "signature": "org.jfree.data.time.junit.TimePeriodValuesTests.MySeriesChangeListener.seriesChanged(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "        public void seriesChanged(SeriesChangeEvent event) {\n            this.lastEvent = event;\n        }\n",
        "begin_line": 443,
        "end_line": 445,
        "comment": "\n         * Callback method for series change events.\n         * \n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 444,col 13)-(line 444,col 35)"
        ]
    }
]