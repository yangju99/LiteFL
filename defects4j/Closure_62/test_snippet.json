[
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testNull()",
        "snippet": "  public void testNull() throws Exception {\n    assertNull(format(null));\n  }\n",
        "begin_line": 28,
        "end_line": 30,
        "comment": "",
        "child_ranges": [
            "(line 29,col 5)-(line 29,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testOneLineRegion()",
        "snippet": "  public void testOneLineRegion() throws Exception {\n    assertEquals(\"  5| hello world\", format(region(5, 5, \"hello world\")));\n  }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": "",
        "child_ranges": [
            "(line 33,col 5)-(line 33,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testTwoLineRegion()",
        "snippet": "  public void testTwoLineRegion() throws Exception {\n    assertEquals(\"  5| hello world\\n\" +\n            \"  6| foo bar\", format(region(5, 6, \"hello world\\nfoo bar\")));\n  }\n",
        "begin_line": 36,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 37,col 5)-(line 38,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testThreeLineRegionAcrossNumberRange()",
        "snippet": "  public void testThreeLineRegionAcrossNumberRange() throws Exception {\n    String region = format(region(9, 11, \"hello world\\nfoo bar\\nanother one\"));\n    assertEquals(\"   9| hello world\\n\" +\n            \"  10| foo bar\\n\" +\n            \"  11| another one\", region);\n  }\n",
        "begin_line": 41,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 79)",
            "(line 43,col 5)-(line 45,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testThreeLineRegionEmptyLine()",
        "snippet": "  public void testThreeLineRegionEmptyLine() throws Exception {\n    String region = format(region(7, 9, \"hello world\\n\\nanother one\"));\n    assertEquals(\"  7| hello world\\n\" +\n            \"  8| \\n\" +\n            \"  9| another one\", region);\n  }\n",
        "begin_line": 48,
        "end_line": 53,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 71)",
            "(line 50,col 5)-(line 52,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testOnlyOneEmptyLine()",
        "snippet": "  public void testOnlyOneEmptyLine() throws Exception {\n    assertNull(format(region(7, 7, \"\")));\n  }\n",
        "begin_line": 55,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 56,col 5)-(line 56,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testTwoEmptyLines()",
        "snippet": "  public void testTwoEmptyLines() throws Exception {\n    assertEquals(\"  7| \", format(region(7, 8, \"\\n\")));\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testThreeLineRemoveLastEmptyLine()",
        "snippet": "  public void testThreeLineRemoveLastEmptyLine() throws Exception {\n    String region = format(region(7, 9, \"hello world\\nfoobar\\n\"));\n    assertEquals(\"  7| hello world\\n\" +\n            \"  8| foobar\", region);\n  }\n",
        "begin_line": 63,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 66)",
            "(line 65,col 5)-(line 66,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testFormatErrorSpaces()",
        "snippet": "  public void testFormatErrorSpaces() throws Exception {\n    JSError error = JSError.make(\"javascript/complex.js\",\n        Node.newString(\"foobar\", 5, 8), FOO_TYPE);\n    LightweightMessageFormatter formatter = formatter(\"    if (foobar) {\");\n    assertEquals(\"javascript/complex.js:5: ERROR - error description here\\n\" +\n        \"    if (foobar) {\\n\" +\n        \"        ^\\n\", formatter.formatError(error));\n  }\n",
        "begin_line": 69,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 70,col 5)-(line 71,col 50)",
            "(line 72,col 5)-(line 72,col 75)",
            "(line 73,col 5)-(line 75,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testFormatErrorTabs()",
        "snippet": "  public void testFormatErrorTabs() throws Exception {\n    JSError error = JSError.make(\"javascript/complex.js\",\n        Node.newString(\"foobar\", 5, 6), FOO_TYPE);\n    LightweightMessageFormatter formatter = formatter(\"\\t\\tif (foobar) {\");\n    assertEquals(\"javascript/complex.js:5: ERROR - error description here\\n\" +\n        \"\\t\\tif (foobar) {\\n\" +\n        \"\\t\\t    ^\\n\", formatter.formatError(error));\n  }\n",
        "begin_line": 78,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 80,col 50)",
            "(line 81,col 5)-(line 81,col 75)",
            "(line 82,col 5)-(line 84,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testFormatErrorSpaceEndOfLine1()",
        "snippet": "  public void testFormatErrorSpaceEndOfLine1() throws Exception {\n    JSError error = JSError.make(\"javascript/complex.js\",\n        1, 10, FOO_TYPE);\n    LightweightMessageFormatter formatter = formatter(\"assert (1;\");\n    assertEquals(\"javascript/complex.js:1: ERROR - error description here\\n\" +\n        \"assert (1;\\n\" +\n        \"          ^\\n\", formatter.formatError(error));\n  }\n",
        "begin_line": 87,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 89,col 25)",
            "(line 90,col 5)-(line 90,col 68)",
            "(line 91,col 5)-(line 93,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.testFormatErrorSpaceEndOfLine2()",
        "snippet": "  public void testFormatErrorSpaceEndOfLine2() throws Exception {\n    JSError error = JSError.make(\"javascript/complex.js\",\n        6, 7, FOO_TYPE);\n    LightweightMessageFormatter formatter = formatter(\"if (foo\");\n    assertEquals(\"javascript/complex.js:6: ERROR - error description here\\n\" +\n        \"if (foo\\n\" +\n        \"       ^\\n\", formatter.formatError(error));\n  }\n",
        "begin_line": 96,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 98,col 24)",
            "(line 99,col 5)-(line 99,col 65)",
            "(line 100,col 5)-(line 102,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.formatter(java.lang.String)",
        "snippet": "  private LightweightMessageFormatter formatter(String string) {\n    return new LightweightMessageFormatter(source(string));\n  }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.source(java.lang.String)",
        "snippet": "  private SourceExcerptProvider source(final String source) {\n    return new SourceExcerptProvider() {\n      public String getSourceLine(String sourceName, int lineNumber) {\n        return source;\n      }\n      public Region getSourceRegion(String sourceName, int lineNumber) {\n        throw new UnsupportedOperationException();\n      }\n    };\n  }\n",
        "begin_line": 109,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 117,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.Anonymous-baf75f18-27e0-4fe8-a1e1-fb5d6542f216.getSourceLine(java.lang.String, int)",
        "snippet": "      public String getSourceLine(String sourceName, int lineNumber) {\n        return source;\n      }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.Anonymous-9a96353e-8177-44fb-b3fc-d8ca3e5dbe12.getSourceRegion(java.lang.String, int)",
        "snippet": "      public Region getSourceRegion(String sourceName, int lineNumber) {\n        throw new UnsupportedOperationException();\n      }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.format(com.google.javascript.jscomp.Region)",
        "snippet": "  private String format(Region region) {\n    return new LineNumberingFormatter().formatRegion(region);\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatterTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/LightweightMessageFormatterTest.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatterTest.region(int, int, java.lang.String)",
        "snippet": "  private Region region(final int startLine, final int endLine,\n      final String source) {\n    return new SimpleRegion(startLine, endLine, source);\n  }\n",
        "begin_line": 124,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 56)"
        ]
    }
]