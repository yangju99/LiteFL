[
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.assertFraction(int, int, org.apache.commons.math3.fraction.Fraction)",
        "snippet": "    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumerator());\n        Assert.assertEquals(expectedDenominator, actual.getDenominator());\n    }\n",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 70)",
            "(line 35,col 9)-(line 35,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        assertFraction(0, 1, new Fraction(0, 1));\n        assertFraction(0, 1, new Fraction(0, 2));\n        assertFraction(0, 1, new Fraction(0, -1));\n        assertFraction(1, 2, new Fraction(1, 2));\n        assertFraction(1, 2, new Fraction(2, 4));\n        assertFraction(-1, 2, new Fraction(-1, 2));\n        assertFraction(-1, 2, new Fraction(1, -2));\n        assertFraction(-1, 2, new Fraction(-2, 4));\n        assertFraction(-1, 2, new Fraction(2, -4));\n\n        // overflow\n        try {\n            new Fraction(Integer.MIN_VALUE, -1);\n            Assert.fail();\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n        try {\n            new Fraction(1, Integer.MIN_VALUE);\n            Assert.fail();\n        } catch (MathArithmeticException ex) {\n            // success\n        }\n\n        assertFraction(0, 1, new Fraction(0.00000000000001));\n        assertFraction(2, 5, new Fraction(0.40000000000001));\n        assertFraction(15, 1, new Fraction(15.0000000000001));\n    }\n",
        "begin_line": 38,
        "end_line": 67,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 49)",
            "(line 41,col 9)-(line 41,col 49)",
            "(line 42,col 9)-(line 42,col 50)",
            "(line 43,col 9)-(line 43,col 49)",
            "(line 44,col 9)-(line 44,col 49)",
            "(line 45,col 9)-(line 45,col 51)",
            "(line 46,col 9)-(line 46,col 51)",
            "(line 47,col 9)-(line 47,col 51)",
            "(line 48,col 9)-(line 48,col 51)",
            "(line 51,col 9)-(line 56,col 9)",
            "(line 57,col 9)-(line 62,col 9)",
            "(line 64,col 9)-(line 64,col 61)",
            "(line 65,col 9)-(line 65,col 61)",
            "(line 66,col 9)-(line 66,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testGoldenRatio()",
        "snippet": "    @Test(expected=ConvergenceException.class)\n    public void testGoldenRatio() {\n        // the golden ratio is notoriously a difficult number for continuous fraction\n        new Fraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);\n    }\n",
        "begin_line": 69,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 9)-(line 72,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDoubleConstructor()",
        "snippet": "    @Test\n    public void testDoubleConstructor() throws ConvergenceException  {\n        assertFraction(1, 2, new Fraction((double)1 / (double)2));\n        assertFraction(1, 3, new Fraction((double)1 / (double)3));\n        assertFraction(2, 3, new Fraction((double)2 / (double)3));\n        assertFraction(1, 4, new Fraction((double)1 / (double)4));\n        assertFraction(3, 4, new Fraction((double)3 / (double)4));\n        assertFraction(1, 5, new Fraction((double)1 / (double)5));\n        assertFraction(2, 5, new Fraction((double)2 / (double)5));\n        assertFraction(3, 5, new Fraction((double)3 / (double)5));\n        assertFraction(4, 5, new Fraction((double)4 / (double)5));\n        assertFraction(1, 6, new Fraction((double)1 / (double)6));\n        assertFraction(5, 6, new Fraction((double)5 / (double)6));\n        assertFraction(1, 7, new Fraction((double)1 / (double)7));\n        assertFraction(2, 7, new Fraction((double)2 / (double)7));\n        assertFraction(3, 7, new Fraction((double)3 / (double)7));\n        assertFraction(4, 7, new Fraction((double)4 / (double)7));\n        assertFraction(5, 7, new Fraction((double)5 / (double)7));\n        assertFraction(6, 7, new Fraction((double)6 / (double)7));\n        assertFraction(1, 8, new Fraction((double)1 / (double)8));\n        assertFraction(3, 8, new Fraction((double)3 / (double)8));\n        assertFraction(5, 8, new Fraction((double)5 / (double)8));\n        assertFraction(7, 8, new Fraction((double)7 / (double)8));\n        assertFraction(1, 9, new Fraction((double)1 / (double)9));\n        assertFraction(2, 9, new Fraction((double)2 / (double)9));\n        assertFraction(4, 9, new Fraction((double)4 / (double)9));\n        assertFraction(5, 9, new Fraction((double)5 / (double)9));\n        assertFraction(7, 9, new Fraction((double)7 / (double)9));\n        assertFraction(8, 9, new Fraction((double)8 / (double)9));\n        assertFraction(1, 10, new Fraction((double)1 / (double)10));\n        assertFraction(3, 10, new Fraction((double)3 / (double)10));\n        assertFraction(7, 10, new Fraction((double)7 / (double)10));\n        assertFraction(9, 10, new Fraction((double)9 / (double)10));\n        assertFraction(1, 11, new Fraction((double)1 / (double)11));\n        assertFraction(2, 11, new Fraction((double)2 / (double)11));\n        assertFraction(3, 11, new Fraction((double)3 / (double)11));\n        assertFraction(4, 11, new Fraction((double)4 / (double)11));\n        assertFraction(5, 11, new Fraction((double)5 / (double)11));\n        assertFraction(6, 11, new Fraction((double)6 / (double)11));\n        assertFraction(7, 11, new Fraction((double)7 / (double)11));\n        assertFraction(8, 11, new Fraction((double)8 / (double)11));\n        assertFraction(9, 11, new Fraction((double)9 / (double)11));\n        assertFraction(10, 11, new Fraction((double)10 / (double)11));\n    }\n",
        "begin_line": 76,
        "end_line": 119,
        "comment": " MATH-179",
        "child_ranges": [
            "(line 78,col 9)-(line 78,col 66)",
            "(line 79,col 9)-(line 79,col 66)",
            "(line 80,col 9)-(line 80,col 66)",
            "(line 81,col 9)-(line 81,col 66)",
            "(line 82,col 9)-(line 82,col 66)",
            "(line 83,col 9)-(line 83,col 66)",
            "(line 84,col 9)-(line 84,col 66)",
            "(line 85,col 9)-(line 85,col 66)",
            "(line 86,col 9)-(line 86,col 66)",
            "(line 87,col 9)-(line 87,col 66)",
            "(line 88,col 9)-(line 88,col 66)",
            "(line 89,col 9)-(line 89,col 66)",
            "(line 90,col 9)-(line 90,col 66)",
            "(line 91,col 9)-(line 91,col 66)",
            "(line 92,col 9)-(line 92,col 66)",
            "(line 93,col 9)-(line 93,col 66)",
            "(line 94,col 9)-(line 94,col 66)",
            "(line 95,col 9)-(line 95,col 66)",
            "(line 96,col 9)-(line 96,col 66)",
            "(line 97,col 9)-(line 97,col 66)",
            "(line 98,col 9)-(line 98,col 66)",
            "(line 99,col 9)-(line 99,col 66)",
            "(line 100,col 9)-(line 100,col 66)",
            "(line 101,col 9)-(line 101,col 66)",
            "(line 102,col 9)-(line 102,col 66)",
            "(line 103,col 9)-(line 103,col 66)",
            "(line 104,col 9)-(line 104,col 66)",
            "(line 105,col 9)-(line 105,col 68)",
            "(line 106,col 9)-(line 106,col 68)",
            "(line 107,col 9)-(line 107,col 68)",
            "(line 108,col 9)-(line 108,col 68)",
            "(line 109,col 9)-(line 109,col 68)",
            "(line 110,col 9)-(line 110,col 68)",
            "(line 111,col 9)-(line 111,col 68)",
            "(line 112,col 9)-(line 112,col 68)",
            "(line 113,col 9)-(line 113,col 68)",
            "(line 114,col 9)-(line 114,col 68)",
            "(line 115,col 9)-(line 115,col 68)",
            "(line 116,col 9)-(line 116,col 68)",
            "(line 117,col 9)-(line 117,col 68)",
            "(line 118,col 9)-(line 118,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDigitLimitConstructor()",
        "snippet": "    @Test\n    public void testDigitLimitConstructor() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4,   9));\n        assertFraction(2, 5, new Fraction(0.4,  99));\n        assertFraction(2, 5, new Fraction(0.4, 999));\n\n        assertFraction(3, 5,      new Fraction(0.6152,    9));\n        assertFraction(8, 13,     new Fraction(0.6152,   99));\n        assertFraction(510, 829,  new Fraction(0.6152,  999));\n        assertFraction(769, 1250, new Fraction(0.6152, 9999));\n    }\n",
        "begin_line": 122,
        "end_line": 132,
        "comment": " MATH-181",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 53)",
            "(line 125,col 9)-(line 125,col 53)",
            "(line 126,col 9)-(line 126,col 53)",
            "(line 128,col 9)-(line 128,col 62)",
            "(line 129,col 9)-(line 129,col 62)",
            "(line 130,col 9)-(line 130,col 62)",
            "(line 131,col 9)-(line 131,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testIntegerOverflow()",
        "snippet": "    @Test\n    public void testIntegerOverflow() {\n        checkIntegerOverflow(0.75000000001455192);\n        checkIntegerOverflow(1.0e10);\n        checkIntegerOverflow(-1.0e10);\n        checkIntegerOverflow(-43979.60679604749);\n    }\n",
        "begin_line": 134,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 50)",
            "(line 137,col 9)-(line 137,col 37)",
            "(line 138,col 9)-(line 138,col 38)",
            "(line 139,col 9)-(line 139,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.checkIntegerOverflow(double)",
        "snippet": "    private void checkIntegerOverflow(double a) {\n        try {\n            new Fraction(a, 1.0e-12, 1000);\n            Assert.fail(\"an exception should have been thrown\");\n        } catch (ConvergenceException ce) {\n            // expected behavior\n        }\n    }\n",
        "begin_line": 142,
        "end_line": 149,
        "comment": "",
        "child_ranges": [
            "(line 143,col 9)-(line 148,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testEpsilonLimitConstructor()",
        "snippet": "    @Test\n    public void testEpsilonLimitConstructor() throws ConvergenceException  {\n        assertFraction(2, 5, new Fraction(0.4, 1.0e-5, 100));\n\n        assertFraction(3, 5,      new Fraction(0.6152, 0.02, 100));\n        assertFraction(8, 13,     new Fraction(0.6152, 1.0e-3, 100));\n        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-4, 100));\n        assertFraction(251, 408,  new Fraction(0.6152, 1.0e-5, 100));\n        assertFraction(510, 829,  new Fraction(0.6152, 1.0e-6, 100));\n        assertFraction(769, 1250, new Fraction(0.6152, 1.0e-7, 100));\n    }\n",
        "begin_line": 151,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 61)",
            "(line 155,col 9)-(line 155,col 67)",
            "(line 156,col 9)-(line 156,col 69)",
            "(line 157,col 9)-(line 157,col 69)",
            "(line 158,col 9)-(line 158,col 69)",
            "(line 159,col 9)-(line 159,col 69)",
            "(line 160,col 9)-(line 160,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testCompareTo()",
        "snippet": "    @Test\n    public void testCompareTo() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n        Fraction third = new Fraction(1, 2);\n\n        Assert.assertEquals(0, first.compareTo(first));\n        Assert.assertEquals(0, first.compareTo(third));\n        Assert.assertEquals(1, first.compareTo(second));\n        Assert.assertEquals(-1, second.compareTo(first));\n\n        // these two values are different approximations of PI\n        // the first  one is approximately PI - 3.07e-18\n        // the second one is approximately PI + 1.936e-17\n        Fraction pi1 = new Fraction(1068966896, 340262731);\n        Fraction pi2 = new Fraction( 411557987, 131002976);\n        Assert.assertEquals(-1, pi1.compareTo(pi2));\n        Assert.assertEquals( 1, pi2.compareTo(pi1));\n        Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);\n    }\n",
        "begin_line": 163,
        "end_line": 182,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 44)",
            "(line 166,col 9)-(line 166,col 45)",
            "(line 167,col 9)-(line 167,col 44)",
            "(line 169,col 9)-(line 169,col 55)",
            "(line 170,col 9)-(line 170,col 55)",
            "(line 171,col 9)-(line 171,col 56)",
            "(line 172,col 9)-(line 172,col 57)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 178,col 59)",
            "(line 179,col 9)-(line 179,col 52)",
            "(line 180,col 9)-(line 180,col 52)",
            "(line 181,col 9)-(line 181,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDoubleValue()",
        "snippet": "    @Test\n    public void testDoubleValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n\n        Assert.assertEquals(0.5, first.doubleValue(), 0.0);\n        Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);\n    }\n",
        "begin_line": 184,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 44)",
            "(line 187,col 9)-(line 187,col 45)",
            "(line 189,col 9)-(line 189,col 59)",
            "(line 190,col 9)-(line 190,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testFloatValue()",
        "snippet": "    @Test\n    public void testFloatValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(1, 3);\n\n        Assert.assertEquals(0.5f, first.floatValue(), 0.0f);\n        Assert.assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);\n    }\n",
        "begin_line": 193,
        "end_line": 200,
        "comment": "",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 44)",
            "(line 196,col 9)-(line 196,col 45)",
            "(line 198,col 9)-(line 198,col 60)",
            "(line 199,col 9)-(line 199,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testIntValue()",
        "snippet": "    @Test\n    public void testIntValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(3, 2);\n\n        Assert.assertEquals(0, first.intValue());\n        Assert.assertEquals(1, second.intValue());\n    }\n",
        "begin_line": 202,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 44)",
            "(line 205,col 9)-(line 205,col 45)",
            "(line 207,col 9)-(line 207,col 49)",
            "(line 208,col 9)-(line 208,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testLongValue()",
        "snippet": "    @Test\n    public void testLongValue() {\n        Fraction first = new Fraction(1, 2);\n        Fraction second = new Fraction(3, 2);\n\n        Assert.assertEquals(0L, first.longValue());\n        Assert.assertEquals(1L, second.longValue());\n    }\n",
        "begin_line": 211,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 213,col 9)-(line 213,col 44)",
            "(line 214,col 9)-(line 214,col 45)",
            "(line 216,col 9)-(line 216,col 51)",
            "(line 217,col 9)-(line 217,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testConstructorDouble()",
        "snippet": "    @Test\n    public void testConstructorDouble() {\n        assertFraction(1, 2, new Fraction(0.5));\n        assertFraction(1, 3, new Fraction(1.0 / 3.0));\n        assertFraction(17, 100, new Fraction(17.0 / 100.0));\n        assertFraction(317, 100, new Fraction(317.0 / 100.0));\n        assertFraction(-1, 2, new Fraction(-0.5));\n        assertFraction(-1, 3, new Fraction(-1.0 / 3.0));\n        assertFraction(-17, 100, new Fraction(17.0 / -100.0));\n        assertFraction(-317, 100, new Fraction(-317.0 / 100.0));\n    }\n",
        "begin_line": 220,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 222,col 9)-(line 222,col 48)",
            "(line 223,col 9)-(line 223,col 54)",
            "(line 224,col 9)-(line 224,col 60)",
            "(line 225,col 9)-(line 225,col 62)",
            "(line 226,col 9)-(line 226,col 50)",
            "(line 227,col 9)-(line 227,col 56)",
            "(line 228,col 9)-(line 228,col 62)",
            "(line 229,col 9)-(line 229,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        Fraction a = new Fraction(10, 21);\n        Fraction b = new Fraction(-10, 21);\n        Fraction c = new Fraction(10, -21);\n\n        assertFraction(10, 21, a.abs());\n        assertFraction(10, 21, b.abs());\n        assertFraction(10, 21, c.abs());\n    }\n",
        "begin_line": 232,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 234,col 9)-(line 234,col 42)",
            "(line 235,col 9)-(line 235,col 43)",
            "(line 236,col 9)-(line 236,col 43)",
            "(line 238,col 9)-(line 238,col 40)",
            "(line 239,col 9)-(line 239,col 40)",
            "(line 240,col 9)-(line 240,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testPercentage()",
        "snippet": "    @Test\n    public void testPercentage() {\n        Assert.assertEquals(50.0, new Fraction(1, 2).percentageValue(), 1.0e-15);\n    }\n",
        "begin_line": 243,
        "end_line": 246,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testMath835()",
        "snippet": "    @Test\n    public void testMath835() {\n        final int numer = Integer.MAX_VALUE / 99;\n        final int denom = 1;\n        final double percentage = 100 * ((double) numer) / denom;\n        final Fraction frac = new Fraction(numer, denom);\n        // With the implementation that preceded the fix suggested in MATH-835,\n        // this test was failing, due to overflow.\n        Assert.assertEquals(percentage, frac.percentageValue(), Math.ulp(percentage));\n    }\n",
        "begin_line": 248,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 250,col 9)-(line 250,col 49)",
            "(line 251,col 9)-(line 251,col 28)",
            "(line 252,col 9)-(line 252,col 65)",
            "(line 253,col 9)-(line 253,col 57)",
            "(line 256,col 9)-(line 256,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testReciprocal()",
        "snippet": "    @Test\n    public void testReciprocal() {\n        Fraction f = null;\n\n        f = new Fraction(50, 75);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumerator());\n        Assert.assertEquals(2, f.getDenominator());\n\n        f = new Fraction(4, 3);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumerator());\n        Assert.assertEquals(4, f.getDenominator());\n\n        f = new Fraction(-15, 47);\n        f = f.reciprocal();\n        Assert.assertEquals(-47, f.getNumerator());\n        Assert.assertEquals(15, f.getDenominator());\n\n        f = new Fraction(0, 3);\n        try {\n            f = f.reciprocal();\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        // large values\n        f = new Fraction(Integer.MAX_VALUE, 1);\n        f = f.reciprocal();\n        Assert.assertEquals(1, f.getNumerator());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator());\n    }\n",
        "begin_line": 259,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 261,col 9)-(line 261,col 26)",
            "(line 263,col 9)-(line 263,col 33)",
            "(line 264,col 9)-(line 264,col 27)",
            "(line 265,col 9)-(line 265,col 49)",
            "(line 266,col 9)-(line 266,col 51)",
            "(line 268,col 9)-(line 268,col 31)",
            "(line 269,col 9)-(line 269,col 27)",
            "(line 270,col 9)-(line 270,col 49)",
            "(line 271,col 9)-(line 271,col 51)",
            "(line 273,col 9)-(line 273,col 34)",
            "(line 274,col 9)-(line 274,col 27)",
            "(line 275,col 9)-(line 275,col 51)",
            "(line 276,col 9)-(line 276,col 52)",
            "(line 278,col 9)-(line 278,col 31)",
            "(line 279,col 9)-(line 282,col 47)",
            "(line 285,col 9)-(line 285,col 47)",
            "(line 286,col 9)-(line 286,col 27)",
            "(line 287,col 9)-(line 287,col 49)",
            "(line 288,col 9)-(line 288,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        Fraction f = null;\n\n        f = new Fraction(50, 75);\n        f = f.negate();\n        Assert.assertEquals(-2, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        f = new Fraction(-50, 75);\n        f = f.negate();\n        Assert.assertEquals(2, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        // large values\n        f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n        f = f.negate();\n        Assert.assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominator());\n\n        f = new Fraction(Integer.MIN_VALUE, 1);\n        try {\n            f = f.negate();\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n    }\n",
        "begin_line": 291,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 293,col 9)-(line 293,col 26)",
            "(line 295,col 9)-(line 295,col 33)",
            "(line 296,col 9)-(line 296,col 23)",
            "(line 297,col 9)-(line 297,col 50)",
            "(line 298,col 9)-(line 298,col 51)",
            "(line 300,col 9)-(line 300,col 34)",
            "(line 301,col 9)-(line 301,col 23)",
            "(line 302,col 9)-(line 302,col 49)",
            "(line 303,col 9)-(line 303,col 51)",
            "(line 306,col 9)-(line 306,col 65)",
            "(line 307,col 9)-(line 307,col 23)",
            "(line 308,col 9)-(line 308,col 67)",
            "(line 309,col 9)-(line 309,col 67)",
            "(line 311,col 9)-(line 311,col 47)",
            "(line 312,col 9)-(line 315,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(1, 1, a.add(a));\n        assertFraction(7, 6, a.add(b));\n        assertFraction(7, 6, b.add(a));\n        assertFraction(4, 3, b.add(b));\n\n        Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);\n        Fraction f2 = Fraction.ONE;\n        Fraction f = f1.add(f2);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n        f = f1.add(1);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        f1 = new Fraction(-1, 13*13*2*2);\n        f2 = new Fraction(-2, 13*17*2);\n        f = f1.add(f2);\n        Assert.assertEquals(13*13*17*2*2, f.getDenominator());\n        Assert.assertEquals(-17 - 2*13*2, f.getNumerator());\n\n        try {\n            f.add(null);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = new Fraction(1,32768*3);\n        f2 = new Fraction(1,59049);\n        f = f1.add(f2);\n        Assert.assertEquals(52451, f.getNumerator());\n        Assert.assertEquals(1934917632, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, 3);\n        f2 = new Fraction(1,3);\n        f = f1.add(f2);\n        Assert.assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        f1 = new Fraction(Integer.MAX_VALUE - 1, 1);\n        f2 = Fraction.ONE;\n        f = f1.add(f2);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f = f.add(Fraction.ONE); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n\n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = new Fraction(Integer.MIN_VALUE, 5);\n        f2 = new Fraction(-1,5);\n        try {\n            f = f1.add(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(-Integer.MAX_VALUE, 1);\n            f = f.add(f);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(3,327680);\n        f2 = new Fraction(2,59049);\n        try {\n            f = f1.add(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n    }\n",
        "begin_line": 318,
        "end_line": 399,
        "comment": "",
        "child_ranges": [
            "(line 320,col 9)-(line 320,col 40)",
            "(line 321,col 9)-(line 321,col 40)",
            "(line 323,col 9)-(line 323,col 39)",
            "(line 324,col 9)-(line 324,col 39)",
            "(line 325,col 9)-(line 325,col 39)",
            "(line 326,col 9)-(line 326,col 39)",
            "(line 328,col 9)-(line 328,col 61)",
            "(line 329,col 9)-(line 329,col 35)",
            "(line 330,col 9)-(line 330,col 32)",
            "(line 331,col 9)-(line 331,col 65)",
            "(line 332,col 9)-(line 332,col 51)",
            "(line 333,col 9)-(line 333,col 22)",
            "(line 334,col 9)-(line 334,col 65)",
            "(line 335,col 9)-(line 335,col 51)",
            "(line 337,col 9)-(line 337,col 41)",
            "(line 338,col 9)-(line 338,col 39)",
            "(line 339,col 9)-(line 339,col 23)",
            "(line 340,col 9)-(line 340,col 62)",
            "(line 341,col 9)-(line 341,col 60)",
            "(line 343,col 9)-(line 346,col 52)",
            "(line 350,col 9)-(line 350,col 37)",
            "(line 351,col 9)-(line 351,col 35)",
            "(line 352,col 9)-(line 352,col 23)",
            "(line 353,col 9)-(line 353,col 53)",
            "(line 354,col 9)-(line 354,col 60)",
            "(line 356,col 9)-(line 356,col 48)",
            "(line 357,col 9)-(line 357,col 31)",
            "(line 358,col 9)-(line 358,col 23)",
            "(line 359,col 9)-(line 359,col 67)",
            "(line 360,col 9)-(line 360,col 51)",
            "(line 362,col 9)-(line 362,col 52)",
            "(line 363,col 9)-(line 363,col 26)",
            "(line 364,col 9)-(line 364,col 23)",
            "(line 365,col 9)-(line 365,col 65)",
            "(line 366,col 9)-(line 366,col 51)",
            "(line 368,col 9)-(line 371,col 47)",
            "(line 374,col 9)-(line 374,col 48)",
            "(line 375,col 9)-(line 375,col 32)",
            "(line 376,col 9)-(line 379,col 47)",
            "(line 381,col 9)-(line 385,col 47)",
            "(line 387,col 9)-(line 391,col 47)",
            "(line 393,col 9)-(line 393,col 36)",
            "(line 394,col 9)-(line 394,col 35)",
            "(line 395,col 9)-(line 398,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(1, 1, a.divide(a));\n        assertFraction(3, 4, a.divide(b));\n        assertFraction(4, 3, b.divide(a));\n        assertFraction(1, 1, b.divide(b));\n\n        Fraction f1 = new Fraction(3, 5);\n        Fraction f2 = Fraction.ZERO;\n        try {\n            f1.divide(f2);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(0, 5);\n        f2 = new Fraction(2, 7);\n        Fraction f = f1.divide(f2);\n        Assert.assertSame(Fraction.ZERO, f);\n\n        f1 = new Fraction(2, 7);\n        f2 = Fraction.ONE;\n        f = f1.divide(f2);\n        Assert.assertEquals(2, f.getNumerator());\n        Assert.assertEquals(7, f.getDenominator());\n\n        f1 = new Fraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f1);\n        Assert.assertEquals(1, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = new Fraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f.divide(null);\n            Assert.fail(\"MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        try {\n            f1 = new Fraction(1, Integer.MAX_VALUE);\n            f = f1.divide(f1.reciprocal());  // should overflow\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n        try {\n            f1 = new Fraction(1, -Integer.MAX_VALUE);\n            f = f1.divide(f1.reciprocal());  // should overflow\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(6, 35);\n        f  = f1.divide(15);\n        Assert.assertEquals(2, f.getNumerator());\n        Assert.assertEquals(175, f.getDenominator());\n\n    }\n",
        "begin_line": 401,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 403,col 9)-(line 403,col 40)",
            "(line 404,col 9)-(line 404,col 40)",
            "(line 406,col 9)-(line 406,col 42)",
            "(line 407,col 9)-(line 407,col 42)",
            "(line 408,col 9)-(line 408,col 42)",
            "(line 409,col 9)-(line 409,col 42)",
            "(line 411,col 9)-(line 411,col 41)",
            "(line 412,col 9)-(line 412,col 36)",
            "(line 413,col 9)-(line 416,col 47)",
            "(line 418,col 9)-(line 418,col 32)",
            "(line 419,col 9)-(line 419,col 32)",
            "(line 420,col 9)-(line 420,col 35)",
            "(line 421,col 9)-(line 421,col 44)",
            "(line 423,col 9)-(line 423,col 32)",
            "(line 424,col 9)-(line 424,col 26)",
            "(line 425,col 9)-(line 425,col 26)",
            "(line 426,col 9)-(line 426,col 49)",
            "(line 427,col 9)-(line 427,col 51)",
            "(line 429,col 9)-(line 429,col 48)",
            "(line 430,col 9)-(line 430,col 26)",
            "(line 431,col 9)-(line 431,col 49)",
            "(line 432,col 9)-(line 432,col 51)",
            "(line 434,col 9)-(line 434,col 64)",
            "(line 435,col 9)-(line 435,col 48)",
            "(line 436,col 9)-(line 436,col 26)",
            "(line 437,col 9)-(line 437,col 65)",
            "(line 438,col 9)-(line 438,col 51)",
            "(line 440,col 9)-(line 443,col 52)",
            "(line 445,col 9)-(line 449,col 47)",
            "(line 450,col 9)-(line 454,col 47)",
            "(line 456,col 9)-(line 456,col 33)",
            "(line 457,col 9)-(line 457,col 27)",
            "(line 458,col 9)-(line 458,col 49)",
            "(line 459,col 9)-(line 459,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(1, 4, a.multiply(a));\n        assertFraction(1, 3, a.multiply(b));\n        assertFraction(1, 3, b.multiply(a));\n        assertFraction(4, 9, b.multiply(b));\n\n        Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);\n        Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        Fraction f = f1.multiply(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f.multiply(null);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        f1 = new Fraction(6, 35);\n        f  = f1.multiply(15);\n        Assert.assertEquals(18, f.getNumerator());\n        Assert.assertEquals(7, f.getDenominator());\n    }\n",
        "begin_line": 463,
        "end_line": 488,
        "comment": "",
        "child_ranges": [
            "(line 465,col 9)-(line 465,col 40)",
            "(line 466,col 9)-(line 466,col 40)",
            "(line 468,col 9)-(line 468,col 44)",
            "(line 469,col 9)-(line 469,col 44)",
            "(line 470,col 9)-(line 470,col 44)",
            "(line 471,col 9)-(line 471,col 44)",
            "(line 473,col 9)-(line 473,col 57)",
            "(line 474,col 9)-(line 474,col 73)",
            "(line 475,col 9)-(line 475,col 37)",
            "(line 476,col 9)-(line 476,col 65)",
            "(line 477,col 9)-(line 477,col 51)",
            "(line 479,col 9)-(line 482,col 52)",
            "(line 484,col 9)-(line 484,col 33)",
            "(line 485,col 9)-(line 485,col 29)",
            "(line 486,col 9)-(line 486,col 50)",
            "(line 487,col 9)-(line 487,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        Fraction a = new Fraction(1, 2);\n        Fraction b = new Fraction(2, 3);\n\n        assertFraction(0, 1, a.subtract(a));\n        assertFraction(-1, 6, a.subtract(b));\n        assertFraction(1, 6, b.subtract(a));\n        assertFraction(0, 1, b.subtract(b));\n\n        Fraction f = new Fraction(1,1);\n        try {\n            f.subtract(null);\n            Assert.fail(\"expecting MathIllegalArgumentException\");\n        } catch (MathIllegalArgumentException ex) {}\n\n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        Fraction f1 = new Fraction(1,32768*3);\n        Fraction f2 = new Fraction(1,59049);\n        f = f1.subtract(f2);\n        Assert.assertEquals(-13085, f.getNumerator());\n        Assert.assertEquals(1934917632, f.getDenominator());\n\n        f1 = new Fraction(Integer.MIN_VALUE, 3);\n        f2 = new Fraction(1,3).negate();\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n        Assert.assertEquals(3, f.getDenominator());\n\n        f1 = new Fraction(Integer.MAX_VALUE, 1);\n        f2 = Fraction.ONE;\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n        f = f1.subtract(1);\n        Assert.assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n        Assert.assertEquals(1, f.getDenominator());\n\n        try {\n            f1 = new Fraction(1, Integer.MAX_VALUE);\n            f2 = new Fraction(1, Integer.MAX_VALUE - 1);\n            f = f1.subtract(f2);\n            Assert.fail(\"expecting MathArithmeticException\");  //should overflow\n        } catch (MathArithmeticException ex) {}\n\n        // denominator should not be a multiple of 2 or 3 to trigger overflow\n        f1 = new Fraction(Integer.MIN_VALUE, 5);\n        f2 = new Fraction(1,5);\n        try {\n            f = f1.subtract(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(Integer.MIN_VALUE, 1);\n            f = f.subtract(Fraction.ONE);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        try {\n            f= new Fraction(Integer.MAX_VALUE, 1);\n            f = f.subtract(Fraction.ONE.negate());\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {}\n\n        f1 = new Fraction(3,327680);\n        f2 = new Fraction(2,59049);\n        try {\n            f = f1.subtract(f2); // should overflow\n            Assert.fail(\"expecting MathArithmeticException but got: \" + f.toString());\n        } catch (MathArithmeticException ex) {}\n    }\n",
        "begin_line": 490,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 492,col 9)-(line 492,col 40)",
            "(line 493,col 9)-(line 493,col 40)",
            "(line 495,col 9)-(line 495,col 44)",
            "(line 496,col 9)-(line 496,col 45)",
            "(line 497,col 9)-(line 497,col 44)",
            "(line 498,col 9)-(line 498,col 44)",
            "(line 500,col 9)-(line 500,col 39)",
            "(line 501,col 9)-(line 504,col 52)",
            "(line 508,col 9)-(line 508,col 46)",
            "(line 509,col 9)-(line 509,col 44)",
            "(line 510,col 9)-(line 510,col 28)",
            "(line 511,col 9)-(line 511,col 54)",
            "(line 512,col 9)-(line 512,col 60)",
            "(line 514,col 9)-(line 514,col 48)",
            "(line 515,col 9)-(line 515,col 40)",
            "(line 516,col 9)-(line 516,col 28)",
            "(line 517,col 9)-(line 517,col 67)",
            "(line 518,col 9)-(line 518,col 51)",
            "(line 520,col 9)-(line 520,col 48)",
            "(line 521,col 9)-(line 521,col 26)",
            "(line 522,col 9)-(line 522,col 28)",
            "(line 523,col 9)-(line 523,col 67)",
            "(line 524,col 9)-(line 524,col 51)",
            "(line 525,col 9)-(line 525,col 27)",
            "(line 526,col 9)-(line 526,col 67)",
            "(line 527,col 9)-(line 527,col 51)",
            "(line 529,col 9)-(line 534,col 47)",
            "(line 537,col 9)-(line 537,col 48)",
            "(line 538,col 9)-(line 538,col 31)",
            "(line 539,col 9)-(line 542,col 47)",
            "(line 544,col 9)-(line 548,col 47)",
            "(line 550,col 9)-(line 554,col 47)",
            "(line 556,col 9)-(line 556,col 36)",
            "(line 557,col 9)-(line 557,col 35)",
            "(line 558,col 9)-(line 561,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testEqualsAndHashCode()",
        "snippet": "    @Test\n    public void testEqualsAndHashCode() {\n        Fraction zero  = new Fraction(0,1);\n        Fraction nullFraction = null;\n        Assert.assertTrue( zero.equals(zero));\n        Assert.assertFalse(zero.equals(nullFraction));\n        Assert.assertFalse(zero.equals(Double.valueOf(0)));\n        Fraction zero2 = new Fraction(0,2);\n        Assert.assertTrue(zero.equals(zero2));\n        Assert.assertEquals(zero.hashCode(), zero2.hashCode());\n        Fraction one = new Fraction(1,1);\n        Assert.assertFalse((one.equals(zero) ||zero.equals(one)));\n    }\n",
        "begin_line": 564,
        "end_line": 576,
        "comment": "",
        "child_ranges": [
            "(line 566,col 9)-(line 566,col 43)",
            "(line 567,col 9)-(line 567,col 37)",
            "(line 568,col 9)-(line 568,col 46)",
            "(line 569,col 9)-(line 569,col 54)",
            "(line 570,col 9)-(line 570,col 59)",
            "(line 571,col 9)-(line 571,col 43)",
            "(line 572,col 9)-(line 572,col 46)",
            "(line 573,col 9)-(line 573,col 63)",
            "(line 574,col 9)-(line 574,col 41)",
            "(line 575,col 9)-(line 575,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testGetReducedFraction()",
        "snippet": "    @Test\n    public void testGetReducedFraction() {\n        Fraction threeFourths = new Fraction(3, 4);\n        Assert.assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));\n        Assert.assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));\n        try {\n            Fraction.getReducedFraction(1, 0);\n            Assert.fail(\"expecting MathArithmeticException\");\n        } catch (MathArithmeticException ex) {\n            // expected\n        }\n        Assert.assertEquals(Fraction.getReducedFraction\n                (2, Integer.MIN_VALUE).getNumerator(),-1);\n        Assert.assertEquals(Fraction.getReducedFraction\n                (1, -1).getNumerator(), -1);\n    }\n",
        "begin_line": 578,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 580,col 9)-(line 580,col 51)",
            "(line 581,col 9)-(line 581,col 82)",
            "(line 582,col 9)-(line 582,col 84)",
            "(line 583,col 9)-(line 588,col 9)",
            "(line 589,col 9)-(line 590,col 58)",
            "(line 591,col 9)-(line 592,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testToString()",
        "snippet": "    @Test\n    public void testToString() {\n        Assert.assertEquals(\"0\", new Fraction(0, 3).toString());\n        Assert.assertEquals(\"3\", new Fraction(6, 2).toString());\n        Assert.assertEquals(\"2 / 3\", new Fraction(18, 27).toString());\n    }\n",
        "begin_line": 595,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 597,col 9)-(line 597,col 64)",
            "(line 598,col 9)-(line 598,col 64)",
            "(line 599,col 9)-(line 599,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.fraction.FractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
        "signature": "org.apache.commons.math3.fraction.FractionTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() throws FractionConversionException {\n        Fraction[] fractions = {\n            new Fraction(3, 4), Fraction.ONE, Fraction.ZERO,\n            new Fraction(17), new Fraction(FastMath.PI, 1000),\n            new Fraction(-5, 2)\n        };\n        for (Fraction fraction : fractions) {\n            Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));\n        }\n    }\n",
        "begin_line": 602,
        "end_line": 612,
        "comment": "",
        "child_ranges": [
            "(line 604,col 9)-(line 608,col 10)",
            "(line 609,col 9)-(line 611,col 9)"
        ]
    }
]