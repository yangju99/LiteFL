[
    {
        "name": "FractionConversionException.FractionConversionException#52",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/FractionConversionException.java",
        "class_name": "org.apache.commons.math3.fraction.FractionConversionException",
        "signature": "org.apache.commons.math3.fraction.FractionConversionException.FractionConversionException(double, long, long)",
        "snippet": "    public FractionConversionException(double value, long p, long q) {\n        super(LocalizedFormats.FRACTION_CONVERSION_OVERFLOW, value, p, q);\n    }\n",
        "begin_line": 52,
        "end_line": 54,
        "comment": "\n     * Constructs an exception with specified formatted detail message.\n     * Message formatting is delegated to {@link java.text.MessageFormat}.\n     * @param value double value to convert\n     * @param p current numerator\n     * @param q current denominator\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.Fraction#175",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.Fraction(double, double, int, int)",
        "snippet": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n\n    }\n",
        "begin_line": 175,
        "end_line": 238,
        "comment": "\n     * Create a fraction given the double value and either the maximum error\n     * allowed or the maximum number of denominator digits.\n     * <p>\n     *\n     * NOTE: This constructor is called with EITHER\n     *   - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE\n     *     (that way the maxDenominator has no effect).\n     * OR\n     *   - a valid maxDenominator value and the epsilon value set to zero\n     *     (that way epsilon only has effect if there is an exact match before\n     *     the maxDenominator value is reached).\n     * </p><p>\n     *\n     * It has been done this way so that the same code can be (re)used for both\n     * scenarios. However this could be confusing to users if it were part of\n     * the public API and this constructor should therefore remain PRIVATE.\n     * </p>\n     *\n     * See JIRA issue ticket MATH-181 for more details:\n     *\n     *     https://issues.apache.org/jira/browse/MATH-181\n     *\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxDenominator maximum denominator value allowed.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "ConvergenceException.ConvergenceException#47",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/ConvergenceException.java",
        "class_name": "org.apache.commons.math3.exception.ConvergenceException",
        "signature": "org.apache.commons.math3.exception.ConvergenceException.ConvergenceException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public ConvergenceException(Localizable pattern,\n                                Object ... args) {\n        getContext().addMessage(pattern, args);\n    }\n",
        "begin_line": 47,
        "end_line": 50,
        "comment": "\n     * Construct the exception with a specific context and arguments.\n     *\n     * @param pattern Message pattern providing the specific context of\n     * the error.\n     * @param args Arguments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathIllegalStateException.MathIllegalStateException#68",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException()",
        "snippet": "    public MathIllegalStateException() {\n        this(LocalizedFormats.ILLEGAL_STATE);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathIllegalStateException.getContext#73",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.getContext()",
        "snippet": "    public ExceptionContext getContext() {\n        return context;\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math3.exception.util.ExceptionContextProvider": "\n     * Gets a reference to the \"rich context\" data structure that allows to\n     * customize error messages and store key, value pairs in exceptions.\n     *\n     * @return a reference to the exception context.\n     ",
            "java.lang.IllegalStateException": null
        },
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathIllegalStateException.MathIllegalStateException#44",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/MathIllegalStateException.java",
        "class_name": "org.apache.commons.math3.exception.MathIllegalStateException",
        "signature": "org.apache.commons.math3.exception.MathIllegalStateException.MathIllegalStateException(org.apache.commons.math3.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public MathIllegalStateException(Localizable pattern,\n                                     Object ... args) {\n        context = new ExceptionContext(this);\n        context.addMessage(pattern, args);\n    }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "\n     * Simple constructor.\n     *\n     * @param pattern Message pattern explaining the cause of the error.\n     * @param args Arguments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.floor#3238",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.floor(double)",
        "snippet": "    public static double floor(double x) {\n        long y;\n\n        if (x != x) { // NaN\n            return x;\n        }\n\n        if (x >= TWO_POWER_52 || x <= -TWO_POWER_52) {\n            return x;\n        }\n\n        y = (long) x;\n        if (x < 0 && y != x) {\n            y--;\n        }\n\n        if (y == 0) {\n            return x*y;\n        }\n\n        return y;\n    }\n",
        "begin_line": 3238,
        "end_line": 3259,
        "comment": " Get the largest whole number smaller than x.\n     * @param x number from which floor is requested\n     * @return a double number f such that f is an integer f <= x < f + 1.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.Fraction#118",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.Fraction(double, double, int)",
        "snippet": "    public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException\n    {\n        this(value, epsilon, Integer.MAX_VALUE, maxIterations);\n    }\n",
        "begin_line": 118,
        "end_line": 122,
        "comment": "\n     * Create a fraction given the double value and maximum error allowed.\n     * <p>\n     * References:\n     * <ul>\n     * <li><a href=\"http://mathworld.wolfram.com/ContinuedFraction.html\">\n     * Continued Fraction</a> equations (11) and (22)-(26)</li>\n     * </ul>\n     * </p>\n     * @param value the double value to convert to a fraction.\n     * @param epsilon maximum error allowed.  The resulting fraction is within\n     *        {@code epsilon} of {@code value}, in absolute terms.\n     * @param maxIterations maximum number of convergents\n     * @throws FractionConversionException if the continued fraction failed to\n     *         converge.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1374
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.abs#2926",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(double)",
        "snippet": "    public static double abs(double x) {\n        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n    }\n",
        "begin_line": 2926,
        "end_line": 2928,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1291
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArgUtils.flatten#41",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ArgUtils.java",
        "class_name": "org.apache.commons.math3.exception.util.ArgUtils",
        "signature": "org.apache.commons.math3.exception.util.ArgUtils.flatten(java.lang.Object[])",
        "snippet": "    public static Object[] flatten(Object[] array) {\n        final List<Object> list = new ArrayList<Object>();\n        if (array != null) {\n            for (Object o : array) {\n                if (o instanceof Object[]) {\n                    for (Object oR : flatten((Object[]) o)) {\n                        list.add(oR);\n                    }\n                } else {\n                    list.add(o);\n                }\n            }\n        }\n        return list.toArray();\n    }\n",
        "begin_line": 41,
        "end_line": 55,
        "comment": "\n     * Transform a multidimensional array into a one-dimensional list.\n     *\n     * @param array Array (possibly multidimensional).\n     * @return a list of all the {@code Object} instances contained in\n     * {@code array}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1048
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExceptionContext.ExceptionContext#64",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
        "class_name": "org.apache.commons.math3.exception.util.ExceptionContext",
        "signature": "org.apache.commons.math3.exception.util.ExceptionContext.ExceptionContext(java.lang.Throwable)",
        "snippet": "    public ExceptionContext(final Throwable throwable) {\n        this.throwable = throwable;\n        msgPatterns    = new ArrayList<Localizable>();\n        msgArguments   = new ArrayList<Object[]>();\n        context        = new HashMap<String, Object>();\n    }\n",
        "begin_line": 64,
        "end_line": 69,
        "comment": " Simple constructor.\n     * @param throwable the exception this context refers too\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "ExceptionContext.addMessage#85",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/ExceptionContext.java",
        "class_name": "org.apache.commons.math3.exception.util.ExceptionContext",
        "signature": "org.apache.commons.math3.exception.util.ExceptionContext.addMessage(org.apache.commons.math3.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public void addMessage(Localizable pattern,\n                           Object ... arguments) {\n        msgPatterns.add(pattern);\n        msgArguments.add(ArgUtils.flatten(arguments));\n    }\n",
        "begin_line": 85,
        "end_line": 89,
        "comment": "\n     * Adds a message.\n     *\n     * @param pattern Message pattern.\n     * @param arguments Values for replacing the placeholders in the message\n     * pattern.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1026
        },
        "num_failing_tests": 1
    },
    {
        "name": "LocalizedFormats.LocalizedFormats#366",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/exception/util/LocalizedFormats.java",
        "class_name": "org.apache.commons.math3.exception.util.LocalizedFormats",
        "signature": "org.apache.commons.math3.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String)",
        "snippet": "    private LocalizedFormats(final String sourceFormat) {\n        this.sourceFormat = sourceFormat;\n    }\n",
        "begin_line": 366,
        "end_line": 368,
        "comment": " Simple constructor.\n     * @param sourceFormat source English format to use when no\n     * localized version is available\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.abs#2899",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/FastMath.java",
        "class_name": "org.apache.commons.math3.util.FastMath",
        "signature": "org.apache.commons.math3.util.FastMath.abs(int)",
        "snippet": "    public static int abs(final int x) {\n        return (x < 0) ? -x : x;\n    }\n",
        "begin_line": 2899,
        "end_line": 2901,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0697
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArithmeticUtils.gcd#384",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/util/ArithmeticUtils.java",
        "class_name": "org.apache.commons.math3.util.ArithmeticUtils",
        "signature": "org.apache.commons.math3.util.ArithmeticUtils.gcd(int, int)",
        "snippet": "    public static int gcd(final int p, final int q) {\n        int u = p;\n        int v = q;\n        if ((u == 0) || (v == 0)) {\n            if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) {\n                throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                                                  p, q);\n            }\n            return FastMath.abs(u) + FastMath.abs(v);\n        }\n        // keep u and v negative, as negative integers range down to\n        // -2^31, while positive numbers can only be as large as 2^31-1\n        // (i.e. we can't necessarily negate a negative number without\n        // overflow)\n        /* assert u!=0 && v!=0; */\n        if (u > 0) {\n            u = -u;\n        } // make u negative\n        if (v > 0) {\n            v = -v;\n        } // make v negative\n        // B1. [Find power of 2]\n        int k = 0;\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n                                                            // both even...\n            u /= 2;\n            v /= 2;\n            k++; // cast out twos.\n        }\n        if (k == 31) {\n            throw new MathArithmeticException(LocalizedFormats.GCD_OVERFLOW_32_BITS,\n                                              p, q);\n        }\n        // B2. Initialize: u and v have been divided by 2^k and at least\n        // one is odd.\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        // t negative: u was odd, v may be even (t replaces v)\n        // t positive: u was even, v is odd (t replaces u)\n        do {\n            /* assert u<0 && v<0; */\n            // B4/B3: cast out twos from t.\n            while ((t & 1) == 0) { // while t is even..\n                t /= 2; // cast out twos\n            }\n            // B5 [reset max(u,v)]\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            // B6/B3. at this point both u and v should be odd.\n            t = (v - u) / 2;\n            // |u| larger: t positive (replace u)\n            // |v| larger: t negative (replace v)\n        } while (t != 0);\n        return -u * (1 << k); // gcd is u*2^k\n    }\n",
        "begin_line": 384,
        "end_line": 440,
        "comment": "\n     * <p>\n     * Gets the greatest common divisor of the absolute value of two numbers,\n     * using the \"binary gcd\" method which avoids division and modulo\n     * operations. See Knuth 4.5.2 algorithm B. This algorithm is due to Josef\n     * Stein (1961).\n     * </p>\n     * Special cases:\n     * <ul>\n     * <li>The invocations\n     * {@code gcd(Integer.MIN_VALUE, Integer.MIN_VALUE)},\n     * {@code gcd(Integer.MIN_VALUE, 0)} and\n     * {@code gcd(0, Integer.MIN_VALUE)} throw an\n     * {@code ArithmeticException}, because the result would be 2^31, which\n     * is too large for an int value.</li>\n     * <li>The result of {@code gcd(x, x)}, {@code gcd(0, x)} and\n     * {@code gcd(x, 0)} is the absolute value of {@code x}, except\n     * for the special cases above.\n     * <li>The invocation {@code gcd(0, 0)} is the only one which returns\n     * {@code 0}.</li>\n     * </ul>\n     *\n     * @param p Number.\n     * @param q Number.\n     * @return the greatest common divisor, never negative.\n     * @throws MathArithmeticException if the result cannot be represented as\n     * a non-negative {@code int} value.\n     * @since 1.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0697
        },
        "num_failing_tests": 1
    },
    {
        "name": "Fraction.Fraction#256",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
        "class_name": "org.apache.commons.math3.fraction.Fraction",
        "signature": "org.apache.commons.math3.fraction.Fraction.Fraction(int, int)",
        "snippet": "    public Fraction(int num, int den) {\n        if (den == 0) {\n            throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);\n        }\n        if (den < 0) {\n            if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE) {\n                throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);\n            }\n            num = -num;\n            den = -den;\n        }\n        // reduce numerator and denominator by greatest common denominator.\n        final int d = ArithmeticUtils.gcd(num, den);\n        if (d > 1) {\n            num /= d;\n            den /= d;\n        }\n\n        // move sign to numerator.\n        if (den < 0) {\n            num = -num;\n            den = -den;\n        }\n        this.numerator   = num;\n        this.denominator = den;\n    }\n",
        "begin_line": 256,
        "end_line": 284,
        "comment": "\n     * Create a fraction given the numerator and denominator.  The fraction is\n     * reduced to lowest terms.\n     * @param num the numerator.\n     * @param den the denominator.\n     * @throws MathArithmeticException if the denominator is {@code zero}\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0697
        },
        "num_failing_tests": 1
    }
]