[
    {
        "name": "Frequency.getPct#301",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getPct(java.lang.Object)",
        "snippet": "    @Deprecated\n    public double getPct(Object v) {\n        return getCumPct((Comparable<?>) v);\n    }\n",
        "begin_line": 301,
        "end_line": 304,
        "comment": "\n      * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getPct#341",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getPct(long)",
        "snippet": "    public double getPct(long v) {\n        return getPct(Long.valueOf(v));\n    }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getPct#330",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getPct(int)",
        "snippet": "    public double getPct(int v) {\n        return getPct(Long.valueOf(v));\n    }\n",
        "begin_line": 330,
        "end_line": 332,
        "comment": "\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getCumFreq#380",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getCumFreq(java.lang.Comparable<?>)",
        "snippet": "    @SuppressWarnings(\"unchecked\")\n        public long getCumFreq(Comparable<?> v) {\n        if (getSumFreq() == 0) {\n            return 0;\n        }\n        if (v instanceof Integer) {\n            return getCumFreq(((Integer) v).longValue());\n        }\n        Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();\n        if (c == null) {\n            c = new NaturalComparator();\n        }\n        long result = 0;\n\n        try {\n            Long value = freqTable.get(v);\n            if (value != null) {\n                result = value.longValue();\n            }\n        } catch (ClassCastException ex) {\n            return result;   // v is not comparable\n        }\n\n        if (c.compare(v, freqTable.firstKey()) < 0) {\n            return 0;  // v is comparable, but less than first value\n        }\n\n        if (c.compare(v, freqTable.lastKey()) >= 0) {\n            return getSumFreq();    // v is comparable, but greater than the last value\n        }\n\n        Iterator<Comparable<?>> values = valuesIterator();\n        while (values.hasNext()) {\n            Comparable<?> nextValue = values.next();\n            if (c.compare(v, nextValue) > 0) {\n                result += getCount(nextValue);\n            } else {\n                return result;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 380,
        "end_line": 421,
        "comment": "\n     * Returns the cumulative frequency of values less than or equal to v.\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup.\n     * @return the proportion of values equal to v\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getCumFreq#443",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getCumFreq(long)",
        "snippet": "    public long getCumFreq(long v) {\n        return getCumFreq(Long.valueOf(v));\n    }\n",
        "begin_line": 443,
        "end_line": 445,
        "comment": "\n     * Returns the cumulative frequency of values less than or equal to v.\n     * <p>\n     * Returns 0 if v is not comparable to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.addValue#176",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.addValue(long)",
        "snippet": "    public void addValue(long v) {\n        addValue(Long.valueOf(v));\n    }\n",
        "begin_line": 176,
        "end_line": 178,
        "comment": "\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getPct#315",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getPct(java.lang.Comparable<?>)",
        "snippet": "    public double getPct(Comparable<?> v) {\n        final long sumFreq = getSumFreq();\n        if (sumFreq == 0) {\n            return Double.NaN;\n        }\n        return (double) getCount(v) / (double) sumFreq;\n    }\n",
        "begin_line": 315,
        "end_line": 321,
        "comment": "\n     * Returns the percentage of values that are equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values equal to v\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.compare#559",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.NaturalComparator.compare(java.lang.Comparable<T>, java.lang.Comparable<T>)",
        "snippet": "        @SuppressWarnings(\"unchecked\")\n        public int compare(Comparable<T> o1, Comparable<T> o2) {\n            return o1.compareTo((T) o2);\n        }\n",
        "begin_line": 559,
        "end_line": 562,
        "comment": "\n         * Compare the two {@link Comparable Comparable} arguments.\n         * This method is equivalent to:\n         * <pre>(({@link Comparable Comparable})o1).{@link Comparable#compareTo compareTo}(o2)</pre>\n         *\n         * @param  o1 the first object\n         * @param  o2 the second object\n         * @return  result of comparison\n         * @throws NullPointerException when <i>o1</i> is <code>null</code>,\n         *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n         * @throws ClassCastException when <i>o1</i> is not a {@link Comparable Comparable},\n         *         or when <code>((Comparable)o1).compareTo(o2)</code> does\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.addValue#132",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.addValue(java.lang.Comparable<?>)",
        "snippet": "    public void addValue(Comparable<?> v){\n        Comparable<?> obj = v;\n        if (v instanceof Integer) {\n           obj = Long.valueOf(((Integer) v).longValue());\n        }\n        try {\n            Long count = freqTable.get(obj);\n            if (count == null) {\n                freqTable.put(obj, Long.valueOf(1));\n            } else {\n                freqTable.put(obj, Long.valueOf(count.longValue() + 1));\n            }\n        } catch (ClassCastException ex) {\n            //TreeMap will throw ClassCastException if v is not comparable\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"instance of class {0} not comparable to existing values\",\n                  v.getClass().getName());\n        }\n    }\n",
        "begin_line": 132,
        "end_line": 150,
        "comment": "\n     * Adds 1 to the frequency count for v.\n     * <p>\n     * If other objects have already been added to this Frequency, v must\n     * be comparable to those that have already been added.\n     * </p>\n     *\n     * @param v the value to add.\n     * @throws IllegalArgumentException if <code>v</code> is not comparable with previous entries\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getSumFreq#214",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getSumFreq()",
        "snippet": "    public long getSumFreq() {\n        long result = 0;\n        Iterator<Long> iterator = freqTable.values().iterator();\n        while (iterator.hasNext())  {\n            result += iterator.next().longValue();\n        }\n        return result;\n    }\n",
        "begin_line": 214,
        "end_line": 221,
        "comment": "\n     * Returns the sum of all frequencies.\n     *\n     * @return the total frequency count.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getCount#243",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getCount(java.lang.Comparable<?>)",
        "snippet": "    public long getCount(Comparable<?> v) {\n        if (v instanceof Integer) {\n            return getCount(((Integer) v).longValue());\n        }\n        long result = 0;\n        try {\n            Long count =  freqTable.get(v);\n            if (count != null) {\n                result = count.longValue();\n            }\n        } catch (ClassCastException ex) {\n            // ignore and return 0 -- ClassCastException will be thrown if value is not comparable\n        }\n        return result;\n    }\n",
        "begin_line": 243,
        "end_line": 257,
        "comment": "\n     * Returns the number of values = v.\n     * Returns 0 if the value is not comparable.\n     *\n     * @param v the value to lookup.\n     * @return the frequency of v.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.getCumPct#490",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.getCumPct(java.lang.Comparable<?>)",
        "snippet": "    public double getCumPct(Comparable<?> v) {\n        final long sumFreq = getSumFreq();\n        if (sumFreq == 0) {\n            return Double.NaN;\n        }\n        return (double) getCumFreq(v) / (double) sumFreq;\n    }\n",
        "begin_line": 490,
        "end_line": 496,
        "comment": "\n     * Returns the cumulative percentage of values less than or equal to v\n     * (as a proportion between 0 and 1).\n     * <p>\n     * Returns <code>Double.NaN</code> if no values have been added.\n     * Returns 0 if at least one value has been added, but v is not comparable\n     * to the values set.</p>\n     *\n     * @param v the value to lookup\n     * @return the proportion of values less than or equal to v\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.addValue#157",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.addValue(int)",
        "snippet": "    public void addValue(int v) {\n        addValue(Long.valueOf(v));\n    }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\n     * Adds 1 to the frequency count for v.\n     *\n     * @param v the value to add.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Frequency.Frequency#59",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/stat/Frequency.java",
        "class_name": "org.apache.commons.math.stat.Frequency",
        "signature": "org.apache.commons.math.stat.Frequency.Frequency()",
        "snippet": "    public Frequency() {\n        freqTable = new TreeMap<Comparable<?>, Long>();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    }
]