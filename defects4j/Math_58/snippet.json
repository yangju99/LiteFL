[
    {
        "name": "FastMath.min#3826",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.min(double, double)",
        "snippet": "    public static double min(final double a, final double b) {\n        if (a > b) {\n            return b;\n        }\n        if (a < b) {\n            return a;\n        }\n        /* if either arg is NaN, return NaN */\n        if (a != b) {\n            return Double.NaN;\n        }\n        /* min(+0.0,-0.0) == -0.0 */\n        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n        long bits = Double.doubleToRawLongBits(a);\n        if (bits == 0x8000000000000000L) {\n            return a;\n        }\n        return b;\n    }\n",
        "begin_line": 3826,
        "end_line": 3844,
        "comment": " Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.doOptimize#217",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.doOptimize()",
        "snippet": "    @Override\n    protected VectorialPointValuePair doOptimize() throws MathUserException {\n        // arrays shared with the other private methods\n        solvedCols  = FastMath.min(rows, cols);\n        diagR       = new double[cols];\n        jacNorm     = new double[cols];\n        beta        = new double[cols];\n        permutation = new int[cols];\n        lmDir       = new double[cols];\n\n        // local point\n        double   delta   = 0;\n        double   xNorm   = 0;\n        double[] diag    = new double[cols];\n        double[] oldX    = new double[cols];\n        double[] oldRes  = new double[rows];\n        double[] oldObj  = new double[rows];\n        double[] qtf     = new double[rows];\n        double[] work1   = new double[cols];\n        double[] work2   = new double[cols];\n        double[] work3   = new double[cols];\n\n        // evaluate the function at the starting point and calculate its norm\n        updateResidualsAndCost();\n\n        // outer loop\n        lmPar = 0;\n        boolean firstIteration = true;\n        VectorialPointValuePair current = new VectorialPointValuePair(point, objective);\n        int iter = 0;\n        final ConvergenceChecker<VectorialPointValuePair> checker = getConvergenceChecker();\n        while (true) {\n            ++iter;\n\n            for (int i=0;i<rows;i++) {\n                qtf[i]=weightedResiduals[i];\n            }\n\n            // compute the Q.R. decomposition of the jacobian matrix\n            VectorialPointValuePair previous = current;\n            updateJacobian();\n            qrDecomposition();\n\n            // compute Qt.res\n            qTy(qtf);\n            // now we don't need Q anymore,\n            // so let jacobian contain the R matrix with its diagonal elements\n            for (int k = 0; k < solvedCols; ++k) {\n                int pk = permutation[k];\n                weightedResidualJacobian[k][pk] = diagR[pk];\n            }\n\n            if (firstIteration) {\n                // scale the point according to the norms of the columns\n                // of the initial jacobian\n                xNorm = 0;\n                for (int k = 0; k < cols; ++k) {\n                    double dk = jacNorm[k];\n                    if (dk == 0) {\n                        dk = 1.0;\n                    }\n                    double xk = dk * point[k];\n                    xNorm  += xk * xk;\n                    diag[k] = dk;\n                }\n                xNorm = FastMath.sqrt(xNorm);\n\n                // initialize the step bound delta\n                delta = (xNorm == 0) ? initialStepBoundFactor : (initialStepBoundFactor * xNorm);\n            }\n\n            // check orthogonality between function vector and jacobian columns\n            double maxCosine = 0;\n            if (cost != 0) {\n                for (int j = 0; j < solvedCols; ++j) {\n                    int    pj = permutation[j];\n                    double s  = jacNorm[pj];\n                    if (s != 0) {\n                        double sum = 0;\n                        for (int i = 0; i <= j; ++i) {\n                            sum += weightedResidualJacobian[i][pj] * qtf[i];\n                        }\n                        maxCosine = FastMath.max(maxCosine, FastMath.abs(sum) / (s * cost));\n                    }\n                }\n            }\n            if (maxCosine <= orthoTolerance) {\n                // convergence has been reached\n                updateResidualsAndCost();\n                current = new VectorialPointValuePair(point, objective);\n                return current;\n            }\n\n            // rescale if necessary\n            for (int j = 0; j < cols; ++j) {\n                diag[j] = FastMath.max(diag[j], jacNorm[j]);\n            }\n\n            // inner loop\n            for (double ratio = 0; ratio < 1.0e-4;) {\n\n                // save the state\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    oldX[pj] = point[pj];\n                }\n                double previousCost = cost;\n                double[] tmpVec = weightedResiduals;\n                weightedResiduals = oldRes;\n                oldRes    = tmpVec;\n                tmpVec    = objective;\n                objective = oldObj;\n                oldObj    = tmpVec;\n\n                // determine the Levenberg-Marquardt parameter\n                determineLMParameter(qtf, delta, diag, work1, work2, work3);\n\n                // compute the new point and the norm of the evolution direction\n                double lmNorm = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    lmDir[pj] = -lmDir[pj];\n                    point[pj] = oldX[pj] + lmDir[pj];\n                    double s = diag[pj] * lmDir[pj];\n                    lmNorm  += s * s;\n                }\n                lmNorm = FastMath.sqrt(lmNorm);\n                // on the first iteration, adjust the initial step bound.\n                if (firstIteration) {\n                    delta = FastMath.min(delta, lmNorm);\n                }\n\n                // evaluate the function at x + p and calculate its norm\n                updateResidualsAndCost();\n\n                // compute the scaled actual reduction\n                double actRed = -1.0;\n                if (0.1 * cost < previousCost) {\n                    double r = cost / previousCost;\n                    actRed = 1.0 - r * r;\n                }\n\n                // compute the scaled predicted reduction\n                // and the scaled directional derivative\n                for (int j = 0; j < solvedCols; ++j) {\n                    int pj = permutation[j];\n                    double dirJ = lmDir[pj];\n                    work1[j] = 0;\n                    for (int i = 0; i <= j; ++i) {\n                        work1[i] += weightedResidualJacobian[i][pj] * dirJ;\n                    }\n                }\n                double coeff1 = 0;\n                for (int j = 0; j < solvedCols; ++j) {\n                    coeff1 += work1[j] * work1[j];\n                }\n                double pc2 = previousCost * previousCost;\n                coeff1 = coeff1 / pc2;\n                double coeff2 = lmPar * lmNorm * lmNorm / pc2;\n                double preRed = coeff1 + 2 * coeff2;\n                double dirDer = -(coeff1 + coeff2);\n\n                // ratio of the actual to the predicted reduction\n                ratio = (preRed == 0) ? 0 : (actRed / preRed);\n\n                // update the step bound\n                if (ratio <= 0.25) {\n                    double tmp =\n                        (actRed < 0) ? (0.5 * dirDer / (dirDer + 0.5 * actRed)) : 0.5;\n                        if ((0.1 * cost >= previousCost) || (tmp < 0.1)) {\n                            tmp = 0.1;\n                        }\n                        delta = tmp * FastMath.min(delta, 10.0 * lmNorm);\n                        lmPar /= tmp;\n                } else if ((lmPar == 0) || (ratio >= 0.75)) {\n                    delta = 2 * lmNorm;\n                    lmPar *= 0.5;\n                }\n\n                // test for successful iteration.\n                if (ratio >= 1.0e-4) {\n                    // successful iteration, update the norm\n                    firstIteration = false;\n                    xNorm = 0;\n                    for (int k = 0; k < cols; ++k) {\n                        double xK = diag[k] * point[k];\n                        xNorm += xK * xK;\n                    }\n                    xNorm = FastMath.sqrt(xNorm);\n                    current = new VectorialPointValuePair(point, objective);\n\n                    // tests for convergence.\n                    if (checker != null) {\n                        // we use the vectorial convergence checker\n                        if (checker.converged(iter, previous, current)) {\n                            return current;\n                        }\n                    }\n                } else {\n                    // failed iteration, reset the previous values\n                    cost = previousCost;\n                    for (int j = 0; j < solvedCols; ++j) {\n                        int pj = permutation[j];\n                        point[pj] = oldX[pj];\n                    }\n                    tmpVec    = weightedResiduals;\n                    weightedResiduals = oldRes;\n                    oldRes    = tmpVec;\n                    tmpVec    = objective;\n                    objective = oldObj;\n                    oldObj    = tmpVec;\n                }\n\n                // Default convergence criteria.\n                if ((FastMath.abs(actRed) <= costRelativeTolerance &&\n                     preRed <= costRelativeTolerance &&\n                     ratio <= 2.0) ||\n                    delta <= parRelativeTolerance * xNorm) {\n                    return current;\n                }\n\n                // tests for termination and stringent tolerances\n                // (2.2204e-16 is the machine epsilon for IEEE754)\n                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n                            costRelativeTolerance);\n                } else if (delta <= 2.2204e-16 * xNorm) {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n                            parRelativeTolerance);\n                } else if (maxCosine <= 2.2204e-16)  {\n                    throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n                            orthoTolerance);\n                }\n            }\n        }\n    }\n",
        "begin_line": 217,
        "end_line": 452,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer": null,
            "org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer": null,
            "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer": "\n     * Perform the bulk of the optimization algorithm.\n     *\n     * @return the point/value pair giving the optimal value for the\n     * objective function.\n     * @throws org.apache.commons.math.exception.MathUserException if\n     * the function throws one during search.\n     ",
            "org.apache.commons.math.optimization.BaseMultivariateVectorialOptimizer": null,
            "org.apache.commons.math.optimization.BaseOptimizer": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.determineLMParameter#476",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMParameter(double[], double, double[], double[], double[], double[])",
        "snippet": "    private void determineLMParameter(double[] qy, double delta, double[] diag,\n            double[] work1, double[] work2, double[] work3) {\n\n        // compute and store in x the gauss-newton direction, if the\n        // jacobian is rank-deficient, obtain a least squares solution\n        for (int j = 0; j < rank; ++j) {\n            lmDir[permutation[j]] = qy[j];\n        }\n        for (int j = rank; j < cols; ++j) {\n            lmDir[permutation[j]] = 0;\n        }\n        for (int k = rank - 1; k >= 0; --k) {\n            int pk = permutation[k];\n            double ypk = lmDir[pk] / diagR[pk];\n            for (int i = 0; i < k; ++i) {\n                lmDir[permutation[i]] -= ypk * weightedResidualJacobian[i][pk];\n            }\n            lmDir[pk] = ypk;\n        }\n\n        // evaluate the function at the origin, and test\n        // for acceptance of the Gauss-Newton direction\n        double dxNorm = 0;\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            double s = diag[pj] * lmDir[pj];\n            work1[pj] = s;\n            dxNorm += s * s;\n        }\n        dxNorm = FastMath.sqrt(dxNorm);\n        double fp = dxNorm - delta;\n        if (fp <= 0.1 * delta) {\n            lmPar = 0;\n            return;\n        }\n\n        // if the jacobian is not rank deficient, the Newton step provides\n        // a lower bound, parl, for the zero of the function,\n        // otherwise set this bound to zero\n        double sum2;\n        double parl = 0;\n        if (rank == solvedCols) {\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                work1[pj] *= diag[pj] / dxNorm;\n            }\n            sum2 = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double sum = 0;\n                for (int i = 0; i < j; ++i) {\n                    sum += weightedResidualJacobian[i][pj] * work1[permutation[i]];\n                }\n                double s = (work1[pj] - sum) / diagR[pj];\n                work1[pj] = s;\n                sum2 += s * s;\n            }\n            parl = fp / (delta * sum2);\n        }\n\n        // calculate an upper bound, paru, for the zero of the function\n        sum2 = 0;\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            double sum = 0;\n            for (int i = 0; i <= j; ++i) {\n                sum += weightedResidualJacobian[i][pj] * qy[i];\n            }\n            sum /= diag[pj];\n            sum2 += sum * sum;\n        }\n        double gNorm = FastMath.sqrt(sum2);\n        double paru = gNorm / delta;\n        if (paru == 0) {\n            // 2.2251e-308 is the smallest positive real for IEE754\n            paru = 2.2251e-308 / FastMath.min(delta, 0.1);\n        }\n\n        // if the input par lies outside of the interval (parl,paru),\n        // set par to the closer endpoint\n        lmPar = FastMath.min(paru, FastMath.max(lmPar, parl));\n        if (lmPar == 0) {\n            lmPar = gNorm / dxNorm;\n        }\n\n        for (int countdown = 10; countdown >= 0; --countdown) {\n\n            // evaluate the function at the current value of lmPar\n            if (lmPar == 0) {\n                lmPar = FastMath.max(2.2251e-308, 0.001 * paru);\n            }\n            double sPar = FastMath.sqrt(lmPar);\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                work1[pj] = sPar * diag[pj];\n            }\n            determineLMDirection(qy, work1, work2, work3);\n\n            dxNorm = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                double s = diag[pj] * lmDir[pj];\n                work3[pj] = s;\n                dxNorm += s * s;\n            }\n            dxNorm = FastMath.sqrt(dxNorm);\n            double previousFP = fp;\n            fp = dxNorm - delta;\n\n            // if the function is small enough, accept the current value\n            // of lmPar, also test for the exceptional cases where parl is zero\n            if ((FastMath.abs(fp) <= 0.1 * delta) ||\n                    ((parl == 0) && (fp <= previousFP) && (previousFP < 0))) {\n                return;\n            }\n\n            // compute the Newton correction\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                work1[pj] = work3[pj] * diag[pj] / dxNorm;\n            }\n            for (int j = 0; j < solvedCols; ++j) {\n                int pj = permutation[j];\n                work1[pj] /= work2[j];\n                double tmp = work1[pj];\n                for (int i = j + 1; i < solvedCols; ++i) {\n                    work1[permutation[i]] -= weightedResidualJacobian[i][pj] * tmp;\n                }\n            }\n            sum2 = 0;\n            for (int j = 0; j < solvedCols; ++j) {\n                double s = work1[permutation[j]];\n                sum2 += s * s;\n            }\n            double correction = fp / (delta * sum2);\n\n            // depending on the sign of the function, update parl or paru.\n            if (fp > 0) {\n                parl = FastMath.max(parl, lmPar);\n            } else if (fp < 0) {\n                paru = FastMath.min(paru, lmPar);\n            }\n\n            // compute an improved estimate for lmPar\n            lmPar = FastMath.max(parl, lmPar + correction);\n\n        }\n    }\n",
        "begin_line": 476,
        "end_line": 623,
        "comment": "\n     * Determine the Levenberg-Marquardt parameter.\n     * <p>This implementation is a translation in Java of the MINPACK\n     * <a href=\"http://www.netlib.org/minpack/lmpar.f\">lmpar</a>\n     * routine.</p>\n     * <p>This method sets the lmPar and lmDir attributes.</p>\n     * <p>The authors of the original fortran function are:</p>\n     * <ul>\n     *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n     *   <li>Burton  S. Garbow</li>\n     *   <li>Kenneth E. Hillstrom</li>\n     *   <li>Jorge   J. More</li>\n     * </ul>\n     * <p>Luc Maisonobe did the Java translation.</p>\n     *\n     * @param qy array containing qTy\n     * @param delta upper bound on the euclidean norm of diagR * lmDir\n     * @param diag diagonal matrix\n     * @param work1 work array\n     * @param work2 work array\n     * @param work3 work array\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.determineLMDirection#645",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.determineLMDirection(double[], double[], double[], double[])",
        "snippet": "    private void determineLMDirection(double[] qy, double[] diag,\n            double[] lmDiag, double[] work) {\n\n        // copy R and Qty to preserve input and initialize s\n        //  in particular, save the diagonal elements of R in lmDir\n        for (int j = 0; j < solvedCols; ++j) {\n            int pj = permutation[j];\n            for (int i = j + 1; i < solvedCols; ++i) {\n                weightedResidualJacobian[i][pj] = weightedResidualJacobian[j][permutation[i]];\n            }\n            lmDir[j] = diagR[pj];\n            work[j]  = qy[j];\n        }\n\n        // eliminate the diagonal matrix d using a Givens rotation\n        for (int j = 0; j < solvedCols; ++j) {\n\n            // prepare the row of d to be eliminated, locating the\n            // diagonal element using p from the Q.R. factorization\n            int pj = permutation[j];\n            double dpj = diag[pj];\n            if (dpj != 0) {\n                Arrays.fill(lmDiag, j + 1, lmDiag.length, 0);\n            }\n            lmDiag[j] = dpj;\n\n            //  the transformations to eliminate the row of d\n            // modify only a single element of Qty\n            // beyond the first n, which is initially zero.\n            double qtbpj = 0;\n            for (int k = j; k < solvedCols; ++k) {\n                int pk = permutation[k];\n\n                // determine a Givens rotation which eliminates the\n                // appropriate element in the current row of d\n                if (lmDiag[k] != 0) {\n\n                    final double sin;\n                    final double cos;\n                    double rkk = weightedResidualJacobian[k][pk];\n                    if (FastMath.abs(rkk) < FastMath.abs(lmDiag[k])) {\n                        final double cotan = rkk / lmDiag[k];\n                        sin   = 1.0 / FastMath.sqrt(1.0 + cotan * cotan);\n                        cos   = sin * cotan;\n                    } else {\n                        final double tan = lmDiag[k] / rkk;\n                        cos = 1.0 / FastMath.sqrt(1.0 + tan * tan);\n                        sin = cos * tan;\n                    }\n\n                    // compute the modified diagonal element of R and\n                    // the modified element of (Qty,0)\n                    weightedResidualJacobian[k][pk] = cos * rkk + sin * lmDiag[k];\n                    final double temp = cos * work[k] + sin * qtbpj;\n                    qtbpj = -sin * work[k] + cos * qtbpj;\n                    work[k] = temp;\n\n                    // accumulate the tranformation in the row of s\n                    for (int i = k + 1; i < solvedCols; ++i) {\n                        double rik = weightedResidualJacobian[i][pk];\n                        final double temp2 = cos * rik + sin * lmDiag[i];\n                        lmDiag[i] = -sin * rik + cos * lmDiag[i];\n                        weightedResidualJacobian[i][pk] = temp2;\n                    }\n                }\n            }\n\n            // store the diagonal element of s and restore\n            // the corresponding diagonal element of R\n            lmDiag[j] = weightedResidualJacobian[j][permutation[j]];\n            weightedResidualJacobian[j][permutation[j]] = lmDir[j];\n        }\n\n        // solve the triangular system for z, if the system is\n        // singular, then obtain a least squares solution\n        int nSing = solvedCols;\n        for (int j = 0; j < solvedCols; ++j) {\n            if ((lmDiag[j] == 0) && (nSing == solvedCols)) {\n                nSing = j;\n            }\n            if (nSing < solvedCols) {\n                work[j] = 0;\n            }\n        }\n        if (nSing > 0) {\n            for (int j = nSing - 1; j >= 0; --j) {\n                int pj = permutation[j];\n                double sum = 0;\n                for (int i = j + 1; i < nSing; ++i) {\n                    sum += weightedResidualJacobian[i][pj] * work[i];\n                }\n                work[j] = (work[j] - sum) / lmDiag[j];\n            }\n        }\n\n        // permute the components of z back to components of lmDir\n        for (int j = 0; j < lmDir.length; ++j) {\n            lmDir[permutation[j]] = work[j];\n        }\n    }\n",
        "begin_line": 645,
        "end_line": 744,
        "comment": "\n     * Solve a*x = b and d*x = 0 in the least squares sense.\n     * <p>This implementation is a translation in Java of the MINPACK\n     * <a href=\"http://www.netlib.org/minpack/qrsolv.f\">qrsolv</a>\n     * routine.</p>\n     * <p>This method sets the lmDir and lmDiag attributes.</p>\n     * <p>The authors of the original fortran function are:</p>\n     * <ul>\n     *   <li>Argonne National Laboratory. MINPACK project. March 1980</li>\n     *   <li>Burton  S. Garbow</li>\n     *   <li>Kenneth E. Hillstrom</li>\n     *   <li>Jorge   J. More</li>\n     * </ul>\n     * <p>Luc Maisonobe did the Java translation.</p>\n     *\n     * @param qy array containing qTy\n     * @param diag diagonal matrix\n     * @param lmDiag diagonal elements associated with lmDir\n     * @param work work array\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "LocalizedFormats.getLocalizedString#350",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "class_name": "org.apache.commons.math.exception.util.LocalizedFormats",
        "signature": "org.apache.commons.math.exception.util.LocalizedFormats.getLocalizedString(java.util.Locale)",
        "snippet": "    public String getLocalizedString(final Locale locale) {\n        try {\n            ResourceBundle bundle =\n                    ResourceBundle.getBundle(\"META-INF/localization/LocalizedFormats\", locale);\n            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {\n                // the value of the resource is the translated format\n                return bundle.getString(toString());\n            }\n\n        } catch (MissingResourceException mre) {\n            // do nothing here\n        }\n\n        // either the locale is not supported or the resource is unknown\n        // don't translate and fall back to using the source format\n        return sourceFormat;\n\n    }\n",
        "begin_line": 350,
        "end_line": 367,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "NotStrictlyPositiveException.NotStrictlyPositiveException#37",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java",
        "class_name": "org.apache.commons.math.exception.NotStrictlyPositiveException",
        "signature": "org.apache.commons.math.exception.NotStrictlyPositiveException.NotStrictlyPositiveException(java.lang.Number)",
        "snippet": "    public NotStrictlyPositiveException(Number value) {\n        super(value, 0, false);\n    }\n",
        "begin_line": 37,
        "end_line": 39,
        "comment": "\n     * Construct the exception.\n     *\n     * @param value Argument.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathRuntimeException.getMessage#101",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.getMessage(java.util.Locale)",
        "snippet": "    public String getMessage(final Locale locale) {\n        return MessageFactory.buildMessage(locale, specific, general, arguments);\n    }\n",
        "begin_line": 101,
        "end_line": 103,
        "comment": "\n     * Get the message in a specified locale.\n     *\n     * @param locale Locale in which the message should be translated.\n     * @return the localized message.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathRuntimeException.getMessage#106",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.getMessage()",
        "snippet": "    @Override\n    public String getMessage() {\n        return getMessage(Locale.US);\n    }\n",
        "begin_line": 106,
        "end_line": 109,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.exception.MathThrowable": " Gets the message in a conventional US locale.\n     * @return localized message\n     ",
            "java.lang.RuntimeException": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathRuntimeException.getLocalizedMessage#112",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.getLocalizedMessage()",
        "snippet": "    @Override\n    public String getLocalizedMessage() {\n        return getMessage(Locale.getDefault());\n    }\n",
        "begin_line": 112,
        "end_line": 115,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.exception.MathThrowable": " Gets the message in the system default locale.\n     * @return localized message\n     ",
            "java.lang.RuntimeException": null
        },
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gaussian.validateParameters#175",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "class_name": "org.apache.commons.math.analysis.function.Gaussian",
        "signature": "org.apache.commons.math.analysis.function.Gaussian.Parametric.validateParameters(double[])",
        "snippet": "        private void validateParameters(double[] param) {\n            if (param == null) {\n                throw new NullArgumentException();\n            }\n            if (param.length != 3) {\n                throw new DimensionMismatchException(param.length, 3);\n            }\n            if (param[2] <= 0) {\n                throw new NotStrictlyPositiveException(param[2]);\n            }\n        }\n",
        "begin_line": 175,
        "end_line": 185,
        "comment": "\n         * Validates parameters to ensure they are appropriate for the evaluation of\n         * the {@link #value(double,double[])} and {@link #gradient(double,double[])}\n         * methods.\n         *\n         * @param param Values of norm, mean and standard deviation.\n         * @throws NullArgumentException if {@code param} is {@code null}.\n         * @throws DimensionMismatchException if the size of {@code param} is\n         * not 3.\n         * @throws NotStrictlyPositiveException if {@code param[2]} is negative.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.basicGuess#168",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.basicGuess(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])",
        "snippet": "        private double[] basicGuess(WeightedObservedPoint[] points) {\n            Arrays.sort(points, createWeightedObservedPointComparator());\n            double[] params = new double[3];\n\n            int maxYIdx = findMaxY(points);\n            params[0] = points[maxYIdx].getY();\n            params[1] = points[maxYIdx].getX();\n\n            double fwhmApprox;\n            try {\n                double halfY = params[0] + ((params[1] - params[0]) / 2.0);\n                double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);\n                double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);\n                fwhmApprox = fwhmX2 - fwhmX1;\n            } catch (OutOfRangeException e) {\n                fwhmApprox = points[points.length - 1].getX() - points[0].getX();\n            }\n            params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));\n\n            return params;\n        }\n",
        "begin_line": 168,
        "end_line": 188,
        "comment": "\n         * Guesses the parameters based on the specified observed points.\n         *\n         * @param points Observed points upon which should base guess.\n         * @return the guessed parameters: norm, mean and sigma.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.getInterpolationPointsForY#255",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.getInterpolationPointsForY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double)",
        "snippet": "        private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                   int startIdx, int idxStep, double y)\n            throws OutOfRangeException {\n            if (idxStep == 0) {\n                throw new ZeroException();\n            }\n            for (int i = startIdx;\n                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                 i += idxStep) {\n                if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {\n                    return (idxStep < 0) ?\n                           new WeightedObservedPoint[] { points[i + idxStep], points[i] } :\n                           new WeightedObservedPoint[] { points[i], points[i + idxStep] };\n                }\n            }\n\n            double minY = Double.POSITIVE_INFINITY;\n            double maxY = Double.NEGATIVE_INFINITY;\n            for (final WeightedObservedPoint point : points) {\n                minY = Math.min(minY, point.getY());\n                maxY = Math.max(maxY, point.getY());\n            }\n            throw new OutOfRangeException(y, minY, maxY);\n        }\n",
        "begin_line": 255,
        "end_line": 278,
        "comment": "\n         * Gets the two bounding interpolation points from the specified points\n         * suitable for determining X at the specified Y.\n         *\n         * @param points Points to use for interpolation.\n         * @param startIdx Index within points from which to start search for\n         * interpolation bounds points.\n         * @param idxStep Index step for search for interpolation bounds points.\n         * @param y Y value for which X should be determined.\n         * @return the array containing two points suitable for determining X at\n         * the specified Y.\n         * @throws ZeroException if {@code idxStep} is 0.\n         * @throws OutOfRangeException if specified {@code y} is not within the\n         * range of the specified {@code points}.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "OutOfRangeException.OutOfRangeException#43",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/OutOfRangeException.java",
        "class_name": "org.apache.commons.math.exception.OutOfRangeException",
        "signature": "org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(java.lang.Number, java.lang.Number, java.lang.Number)",
        "snippet": "    public OutOfRangeException(Number wrong,\n                               Number lo,\n                               Number hi) {\n        this(null, wrong, lo, hi);\n    }\n",
        "begin_line": 43,
        "end_line": 47,
        "comment": "\n     * Construct an exception from the mismatched dimensions.\n     *\n     * @param wrong Requested value.\n     * @param lo Lower bound.\n     * @param hi Higher bound.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "OutOfRangeException.OutOfRangeException#58",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/OutOfRangeException.java",
        "class_name": "org.apache.commons.math.exception.OutOfRangeException",
        "signature": "org.apache.commons.math.exception.OutOfRangeException.OutOfRangeException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, java.lang.Number)",
        "snippet": "    public OutOfRangeException(Localizable specific,\n                               Number wrong,\n                               Number lo,\n                               Number hi) {\n        super(specific, LocalizedFormats.OUT_OF_RANGE_SIMPLE,\n              wrong, lo, hi);\n        this.lo = lo;\n        this.hi = hi;\n    }\n",
        "begin_line": 58,
        "end_line": 66,
        "comment": "\n     * Construct an exception from the mismatched dimensions with a\n     * specific context information.\n     *\n     * @param specific Context information.\n     * @param wrong Requested value.\n     * @param lo Lower bound.\n     * @param hi Higher bound.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberIsTooSmallException.NumberIsTooSmallException#49",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java",
        "class_name": "org.apache.commons.math.exception.NumberIsTooSmallException",
        "signature": "org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(java.lang.Number, java.lang.Number, boolean)",
        "snippet": "    public NumberIsTooSmallException(Number wrong,\n                                     Number min,\n                                     boolean boundIsAllowed) {\n        this(null, wrong, min, boundIsAllowed);\n    }\n",
        "begin_line": 49,
        "end_line": 53,
        "comment": "\n     * Construct the exception.\n     *\n     * @param wrong Value that is smaller than the minimum.\n     * @param min Minimum.\n     * @param boundIsAllowed Whether {@code min} is included in the allowed range.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberIsTooSmallException.NumberIsTooSmallException#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java",
        "class_name": "org.apache.commons.math.exception.NumberIsTooSmallException",
        "signature": "org.apache.commons.math.exception.NumberIsTooSmallException.NumberIsTooSmallException(org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Number, boolean)",
        "snippet": "    public NumberIsTooSmallException(Localizable specific,\n                                     Number wrong,\n                                     Number min,\n                                     boolean boundIsAllowed) {\n        super(specific,\n              boundIsAllowed ?\n              LocalizedFormats.NUMBER_TOO_SMALL :\n              LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,\n              wrong, min);\n\n        this.min = min;\n        this.boundIsAllowed = boundIsAllowed;\n    }\n",
        "begin_line": 63,
        "end_line": 75,
        "comment": "\n     * Construct the exception with a specific context.\n     *\n     * @param specific Specific contexte pattern.\n     * @param wrong Value that is smaller than the minimum.\n     * @param min Minimum.\n     * @param boundIsAllowed Whether {@code min} is included in the allowed range.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 1
    },
    {
        "name": "LocalizedFormats.LocalizedFormats#340",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "class_name": "org.apache.commons.math.exception.util.LocalizedFormats",
        "signature": "org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String)",
        "snippet": "    private LocalizedFormats(final String sourceFormat) {\n        this.sourceFormat = sourceFormat;\n    }\n",
        "begin_line": 340,
        "end_line": 342,
        "comment": " Simple constructor.\n     * @param sourceFormat source English format to use when no\n     * localized version is available\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArgUtils.flatten#41",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/util/ArgUtils.java",
        "class_name": "org.apache.commons.math.exception.util.ArgUtils",
        "signature": "org.apache.commons.math.exception.util.ArgUtils.flatten(java.lang.Object[])",
        "snippet": "    public static Object[] flatten(Object[] array) {\n        final List<Object> list = new ArrayList<Object>();\n        if (array != null) {\n            for (Object o : array) {\n                if (o instanceof Object[]) {\n                    for (Object oR : flatten((Object[]) o)) {\n                        list.add(oR);\n                    }\n                } else {\n                    list.add(o);\n                }\n            }\n        }\n        return list.toArray();\n    }\n",
        "begin_line": 41,
        "end_line": 55,
        "comment": "\n     * Transform a multidimensional array into a one-dimensional list.\n     *\n     * @param array Array (possibly multidimensional).\n     * @return a list of all the {@code Object} instances contained in\n     * {@code array}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathRuntimeException.MathRuntimeException#61",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.MathRuntimeException(java.lang.Throwable, org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public MathRuntimeException(final Throwable cause,\n                                final Localizable specific,\n                                final Localizable general,\n                                final Object ... arguments) {\n        super(cause);\n        this.specific = specific;\n        this.general = general;\n        this.arguments = ArgUtils.flatten(arguments);\n    }\n",
        "begin_line": 61,
        "end_line": 69,
        "comment": "\n     * Build an exception from two patterns (specific and general) and\n     * an argument list.\n     *\n     * @param cause Cause of the error (may be null).\n     * @param specific Format specifier for the specific part (may be null).\n     * @param general Format specifier for the general part (may be null).\n     * @param arguments Format arguments. They will be substituted in\n     * <em>both</em> the {@code general} and {@code specific} format specifiers.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathIllegalNumberException.MathIllegalNumberException#46",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java",
        "class_name": "org.apache.commons.math.exception.MathIllegalNumberException",
        "signature": "org.apache.commons.math.exception.MathIllegalNumberException.MathIllegalNumberException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Number, java.lang.Object...)",
        "snippet": "    protected MathIllegalNumberException(Localizable specific,\n                                         Localizable general,\n                                         Number wrong,\n                                         Object ... arguments) {\n        super(specific, general, wrong, arguments);\n        argument = wrong;\n    }\n",
        "begin_line": 46,
        "end_line": 52,
        "comment": "\n     * Construct an exception.\n     *\n     * @param specific Localizable pattern.\n     * @param general Localizable pattern.\n     * @param wrong Wrong number.\n     * @param arguments Arguments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathIllegalArgumentException.MathIllegalArgumentException#41",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
        "class_name": "org.apache.commons.math.exception.MathIllegalArgumentException",
        "signature": "org.apache.commons.math.exception.MathIllegalArgumentException.MathIllegalArgumentException(org.apache.commons.math.exception.util.Localizable, org.apache.commons.math.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public MathIllegalArgumentException(Localizable specific,\n                                        Localizable general,\n                                        Object ... args) {\n        super(null, specific, general, args);\n    }\n",
        "begin_line": 41,
        "end_line": 45,
        "comment": "\n     * @param specific Message pattern providing the specific context of\n     * the error.\n     * @param general Message pattern explaining the cause of the error.\n     * @param args Arguments.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.setMaximalCount#43",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "class_name": "org.apache.commons.math.util.Incrementor",
        "signature": "org.apache.commons.math.util.Incrementor.setMaximalCount(int)",
        "snippet": "    public void setMaximalCount(int max) {\n        maximalCount = max;\n    }\n",
        "begin_line": 43,
        "end_line": 45,
        "comment": "\n     * Set the upper limit for the counter.\n     *\n     * @param max Upper limit of the counter.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.incrementCount#83",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "class_name": "org.apache.commons.math.util.Incrementor",
        "signature": "org.apache.commons.math.util.Incrementor.incrementCount()",
        "snippet": "    public void incrementCount() {\n        if (++count > maximalCount) {\n            throw new MaxCountExceededException(maximalCount);\n        }\n    }\n",
        "begin_line": 83,
        "end_line": 87,
        "comment": "\n     * Add one to the current iteration count.\n     *\n     * @throws MaxCountExceededException at counter exhaustion.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Incrementor.resetCount#92",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "class_name": "org.apache.commons.math.util.Incrementor",
        "signature": "org.apache.commons.math.util.Incrementor.resetCount()",
        "snippet": "    public void resetCount() {\n        count = 0;\n    }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Reset the counter to 0.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.sqrt#276",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.sqrt(double)",
        "snippet": "    public static double sqrt(final double a) {\n        return Math.sqrt(a);\n    }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": " Compute the square root of a number.\n     * <p><b>Note:</b> this implementation currently delegates to {@link Math#sqrt}\n     * @param a number on which evaluation is done\n     * @return square root of a\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.exp#696",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.exp(double)",
        "snippet": "    public static double exp(double x) {\n        return exp(x, 0.0, null);\n    }\n",
        "begin_line": 696,
        "end_line": 698,
        "comment": "\n     * Exponential function.\n     *\n     * Computes exp(x), function result is nearly rounded.   It will be correctly\n     * rounded to the theoretical value for 99.9% of input values, otherwise it will\n     * have a 1 UPL error.\n     *\n     * Method:\n     *    Lookup intVal = exp(int(x))\n     *    Lookup fracVal = exp(int(x-int(x) / 1024.0) * 1024.0 );\n     *    Compute z as the exponential of the remaining bits by a polynomial minus one\n     *    exp(x) = intVal * fracVal * (1 + z)\n     *\n     * Accuracy:\n     *    Calculation is done with 63 bits of precision, so result should be correctly\n     *    rounded for 99.9% of input values, with less than 1 ULP error otherwise.\n     *\n     * @param x   a double\n     * @return double e<sup>x</sup>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.exp#707",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.exp(double, double, double[])",
        "snippet": "    private static double exp(double x, double extra, double[] hiPrec) {\n        double intPartA;\n        double intPartB;\n        int intVal;\n\n        /* Lookup exp(floor(x)).\n         * intPartA will have the upper 22 bits, intPartB will have the lower\n         * 52 bits.\n         */\n        if (x < 0.0) {\n            intVal = (int) -x;\n\n            if (intVal > 746) {\n                if (hiPrec != null) {\n                    hiPrec[0] = 0.0;\n                    hiPrec[1] = 0.0;\n                }\n                return 0.0;\n            }\n\n            if (intVal > 709) {\n                /* This will produce a subnormal output */\n                final double result = exp(x+40.19140625, extra, hiPrec) / 285040095144011776.0;\n                if (hiPrec != null) {\n                    hiPrec[0] /= 285040095144011776.0;\n                    hiPrec[1] /= 285040095144011776.0;\n                }\n                return result;\n            }\n\n            if (intVal == 709) {\n                /* exp(1.494140625) is nearly a machine number... */\n                final double result = exp(x+1.494140625, extra, hiPrec) / 4.455505956692756620;\n                if (hiPrec != null) {\n                    hiPrec[0] /= 4.455505956692756620;\n                    hiPrec[1] /= 4.455505956692756620;\n                }\n                return result;\n            }\n\n            intVal++;\n\n            intPartA = EXP_INT_TABLE_A[750-intVal];\n            intPartB = EXP_INT_TABLE_B[750-intVal];\n\n            intVal = -intVal;\n        } else {\n            intVal = (int) x;\n\n            if (intVal > 709) {\n                if (hiPrec != null) {\n                    hiPrec[0] = Double.POSITIVE_INFINITY;\n                    hiPrec[1] = 0.0;\n                }\n                return Double.POSITIVE_INFINITY;\n            }\n\n            intPartA = EXP_INT_TABLE_A[750+intVal];\n            intPartB = EXP_INT_TABLE_B[750+intVal];\n        }\n\n        /* Get the fractional part of x, find the greatest multiple of 2^-10 less than\n         * x and look up the exp function of it.\n         * fracPartA will have the upper 22 bits, fracPartB the lower 52 bits.\n         */\n        final int intFrac = (int) ((x - intVal) * 1024.0);\n        final double fracPartA = EXP_FRAC_TABLE_A[intFrac];\n        final double fracPartB = EXP_FRAC_TABLE_B[intFrac];\n\n        /* epsilon is the difference in x from the nearest multiple of 2^-10.  It\n         * has a value in the range 0 <= epsilon < 2^-10.\n         * Do the subtraction from x as the last step to avoid possible loss of percison.\n         */\n        final double epsilon = x - (intVal + intFrac / 1024.0);\n\n        /* Compute z = exp(epsilon) - 1.0 via a minimax polynomial.  z has\n       full double precision (52 bits).  Since z < 2^-10, we will have\n       62 bits of precision when combined with the contant 1.  This will be\n       used in the last addition below to get proper rounding. */\n\n        /* Remez generated polynomial.  Converges on the interval [0, 2^-10], error\n       is less than 0.5 ULP */\n        double z = 0.04168701738764507;\n        z = z * epsilon + 0.1666666505023083;\n        z = z * epsilon + 0.5000000000042687;\n        z = z * epsilon + 1.0;\n        z = z * epsilon + -3.940510424527919E-20;\n\n        /* Compute (intPartA+intPartB) * (fracPartA+fracPartB) by binomial\n       expansion.\n       tempA is exact since intPartA and intPartB only have 22 bits each.\n       tempB will have 52 bits of precision.\n         */\n        double tempA = intPartA * fracPartA;\n        double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;\n\n        /* Compute the result.  (1+z)(tempA+tempB).  Order of operations is\n       important.  For accuracy add by increasing size.  tempA is exact and\n       much larger than the others.  If there are extra bits specified from the\n       pow() function, use them. */\n        final double tempC = tempB + tempA;\n        final double result;\n        if (extra != 0.0) {\n            result = tempC*extra*z + tempC*extra + tempC*z + tempB + tempA;\n        } else {\n            result = tempC*z + tempB + tempA;\n        }\n\n        if (hiPrec != null) {\n            // If requesting high precision\n            hiPrec[0] = tempA;\n            hiPrec[1] = tempC*extra*z + tempC*extra + tempC*z + tempB;\n        }\n\n        return result;\n    }\n",
        "begin_line": 707,
        "end_line": 822,
        "comment": "\n     * Internal helper method for exponential function.\n     * @param x original argument of the exponential function\n     * @param extra extra bits of precision on input (To Be Confirmed)\n     * @param hiPrec extra bits of precision on output (To Be Confirmed)\n     * @return exp(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.slowexp#986",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.slowexp(double, double[])",
        "snippet": "    private static double slowexp(final double x, final double result[]) {\n        final double xs[] = new double[2];\n        final double ys[] = new double[2];\n        final double facts[] = new double[2];\n        final double as[] = new double[2];\n        split(x, xs);\n        ys[0] = ys[1] = 0.0;\n\n        for (int i = 19; i >= 0; i--) {\n            splitMult(xs, ys, as);\n            ys[0] = as[0];\n            ys[1] = as[1];\n\n            split(FACT[i], as);\n            splitReciprocal(as, facts);\n\n            splitAdd(ys, facts, as);\n            ys[0] = as[0];\n            ys[1] = as[1];\n        }\n\n        if (result != null) {\n            result[0] = ys[0];\n            result[1] = ys[1];\n        }\n\n        return ys[0] + ys[1];\n    }\n",
        "begin_line": 986,
        "end_line": 1013,
        "comment": "\n     *  For x between 0 and 1, returns exp(x), uses extended precision\n     *  @param x argument of exponential\n     *  @param result placeholder where to place exp(x) split in two terms\n     *  for extra precision (i.e. exp(x) = result[0] \u00b0 result[1]\n     *  @return exp(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.split#1020",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.split(double, double[])",
        "snippet": "    private static void split(final double d, final double split[]) {\n        if (d < 8e298 && d > -8e298) {\n            final double a = d * HEX_40000000;\n            split[0] = (d + a) - a;\n            split[1] = d - split[0];\n        } else {\n            final double a = d * 9.31322574615478515625E-10;\n            split[0] = (d + a - d) * HEX_40000000;\n            split[1] = d - split[0];\n        }\n    }\n",
        "begin_line": 1020,
        "end_line": 1030,
        "comment": " Compute split[0], split[1] such that their sum is equal to d,\n     * and split[0] has its 30 least significant bits as zero.\n     * @param d number to split\n     * @param split placeholder where to place the result\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.resplit#1036",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.resplit(double[])",
        "snippet": "    private static void resplit(final double a[]) {\n        final double c = a[0] + a[1];\n        final double d = -(c - a[0] - a[1]);\n\n        if (c < 8e298 && c > -8e298) {\n            double z = c * HEX_40000000;\n            a[0] = (c + z) - z;\n            a[1] = c - a[0] + d;\n        } else {\n            double z = c * 9.31322574615478515625E-10;\n            a[0] = (c + z - c) * HEX_40000000;\n            a[1] = c - a[0] + d;\n        }\n    }\n",
        "begin_line": 1036,
        "end_line": 1049,
        "comment": " Recompute a split.\n     * @param a input/out array containing the split, changed\n     * on output\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.splitMult#1056",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.splitMult(double[], double[], double[])",
        "snippet": "    private static void splitMult(double a[], double b[], double ans[]) {\n        ans[0] = a[0] * b[0];\n        ans[1] = a[0] * b[1] + a[1] * b[0] + a[1] * b[1];\n\n        /* Resplit */\n        resplit(ans);\n    }\n",
        "begin_line": 1056,
        "end_line": 1062,
        "comment": " Multiply two numbers in split form.\n     * @param a first term of multiplication\n     * @param b second term of multiplication\n     * @param ans placeholder where to put the result\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.splitAdd#1069",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.splitAdd(double[], double[], double[])",
        "snippet": "    private static void splitAdd(final double a[], final double b[], final double ans[]) {\n        ans[0] = a[0] + b[0];\n        ans[1] = a[1] + b[1];\n\n        resplit(ans);\n    }\n",
        "begin_line": 1069,
        "end_line": 1074,
        "comment": " Add two numbers in split form.\n     * @param a first term of addition\n     * @param b second term of addition\n     * @param ans placeholder where to put the result\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.splitReciprocal#1094",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.splitReciprocal(double[], double[])",
        "snippet": "    private static void splitReciprocal(final double in[], final double result[]) {\n        final double b = 1.0/4194304.0;\n        final double a = 1.0 - b;\n\n        if (in[0] == 0.0) {\n            in[0] = in[1];\n            in[1] = 0.0;\n        }\n\n        result[0] = a / in[0];\n        result[1] = (b*in[0]-a*in[1]) / (in[0]*in[0] + in[0]*in[1]);\n\n        if (result[1] != result[1]) { // can happen if result[1] is NAN\n            result[1] = 0.0;\n        }\n\n        /* Resplit */\n        resplit(result);\n\n        for (int i = 0; i < 2; i++) {\n            /* this may be overkill, probably once is enough */\n            double err = 1.0 - result[0] * in[0] - result[0] * in[1] -\n            result[1] * in[0] - result[1] * in[1];\n            /*err = 1.0 - err; */\n            err = err * (result[0] + result[1]);\n            /*printf(\"err = %16e\\n\", err); */\n            result[1] += err;\n        }\n    }\n",
        "begin_line": 1094,
        "end_line": 1122,
        "comment": " Compute the reciprocal of in.  Use the following algorithm.\n     *  in = c + d.\n     *  want to find x + y such that x+y = 1/(c+d) and x is much\n     *  larger than y and x has several zero bits on the right.\n     *\n     *  Set b = 1/(2^22),  a = 1 - b.  Thus (a+b) = 1.\n     *  Use following identity to compute (a+b)/(c+d)\n     *\n     *  (a+b)/(c+d)  =   a/c   +    (bc - ad) / (c^2 + cd)\n     *  set x = a/c  and y = (bc - ad) / (c^2 + cd)\n     *  This will be close to the right answer, but there will be\n     *  some rounding in the calculation of X.  So by carefully\n     *  computing 1 - (c+d)(x+y) we can compute an error and\n     *  add that back in.   This is done carefully so that terms\n     *  of similar size are subtracted first.\n     *  @param in initial number, in split form\n     *  @param result placeholder where to put the result\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.quadMult#1129",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.quadMult(double[], double[], double[])",
        "snippet": "    private static void quadMult(final double a[], final double b[], final double result[]) {\n        final double xs[] = new double[2];\n        final double ys[] = new double[2];\n        final double zs[] = new double[2];\n\n        /* a[0] * b[0] */\n        split(a[0], xs);\n        split(b[0], ys);\n        splitMult(xs, ys, zs);\n\n        result[0] = zs[0];\n        result[1] = zs[1];\n\n        /* a[0] * b[1] */\n        split(b[1], ys);\n        splitMult(xs, ys, zs);\n\n        double tmp = result[0] + zs[0];\n        result[1] = result[1] - (tmp - result[0] - zs[0]);\n        result[0] = tmp;\n        tmp = result[0] + zs[1];\n        result[1] = result[1] - (tmp - result[0] - zs[1]);\n        result[0] = tmp;\n\n        /* a[1] * b[0] */\n        split(a[1], xs);\n        split(b[0], ys);\n        splitMult(xs, ys, zs);\n\n        tmp = result[0] + zs[0];\n        result[1] = result[1] - (tmp - result[0] - zs[0]);\n        result[0] = tmp;\n        tmp = result[0] + zs[1];\n        result[1] = result[1] - (tmp - result[0] - zs[1]);\n        result[0] = tmp;\n\n        /* a[1] * b[0] */\n        split(a[1], xs);\n        split(b[1], ys);\n        splitMult(xs, ys, zs);\n\n        tmp = result[0] + zs[0];\n        result[1] = result[1] - (tmp - result[0] - zs[0]);\n        result[0] = tmp;\n        tmp = result[0] + zs[1];\n        result[1] = result[1] - (tmp - result[0] - zs[1]);\n        result[0] = tmp;\n    }\n",
        "begin_line": 1129,
        "end_line": 1176,
        "comment": " Compute (a[0] + a[1]) * (b[0] + b[1]) in extended precision.\n     * @param a first term of the multiplication\n     * @param b second term of the multiplication\n     * @param result placeholder where to put the result\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.expint#1183",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.expint(int, double[])",
        "snippet": "    private static double expint(int p, final double result[]) {\n        //double x = M_E;\n        final double xs[] = new double[2];\n        final double as[] = new double[2];\n        final double ys[] = new double[2];\n        //split(x, xs);\n        //xs[1] = (double)(2.7182818284590452353602874713526625L - xs[0]);\n        //xs[0] = 2.71827697753906250000;\n        //xs[1] = 4.85091998273542816811e-06;\n        //xs[0] = Double.longBitsToDouble(0x4005bf0800000000L);\n        //xs[1] = Double.longBitsToDouble(0x3ed458a2bb4a9b00L);\n\n        /* E */\n        xs[0] = 2.718281828459045;\n        xs[1] = 1.4456468917292502E-16;\n\n        split(1.0, ys);\n\n        while (p > 0) {\n            if ((p & 1) != 0) {\n                quadMult(ys, xs, as);\n                ys[0] = as[0]; ys[1] = as[1];\n            }\n\n            quadMult(xs, xs, as);\n            xs[0] = as[0]; xs[1] = as[1];\n\n            p >>= 1;\n        }\n\n        if (result != null) {\n            result[0] = ys[0];\n            result[1] = ys[1];\n\n            resplit(result);\n        }\n\n        return ys[0] + ys[1];\n    }\n",
        "begin_line": 1183,
        "end_line": 1221,
        "comment": " Compute exp(p) for a integer p in extended precision.\n     * @param p integer whose exponential is requested\n     * @param result placeholder where to put the result in extended precision\n     * @return exp(p) in standard precision (equal to result[0] + result[1])\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.slowLog#1715",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.slowLog(double)",
        "snippet": "    private static double[] slowLog(double xi) {\n        double x[] = new double[2];\n        double x2[] = new double[2];\n        double y[] = new double[2];\n        double a[] = new double[2];\n\n        split(xi, x);\n\n        /* Set X = (x-1)/(x+1) */\n        x[0] += 1.0;\n        resplit(x);\n        splitReciprocal(x, a);\n        x[0] -= 2.0;\n        resplit(x);\n        splitMult(x, a, y);\n        x[0] = y[0];\n        x[1] = y[1];\n\n        /* Square X -> X2*/\n        splitMult(x, x, x2);\n\n\n        //x[0] -= 1.0;\n        //resplit(x);\n\n        y[0] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][0];\n        y[1] = LN_SPLIT_COEF[LN_SPLIT_COEF.length-1][1];\n\n        for (int i = LN_SPLIT_COEF.length-2; i >= 0; i--) {\n            splitMult(y, x2, a);\n            y[0] = a[0];\n            y[1] = a[1];\n            splitAdd(y, LN_SPLIT_COEF[i], a);\n            y[0] = a[0];\n            y[1] = a[1];\n        }\n\n        splitMult(y, x, a);\n        y[0] = a[0];\n        y[1] = a[1];\n\n        return y;\n    }\n",
        "begin_line": 1715,
        "end_line": 1757,
        "comment": " xi in the range of [1, 2].\n     *                                3        5        7\n     *      x+1           /          x        x        x          \\\n     *  ln ----- =   2 *  |  x  +   ----  +  ----  +  ---- + ...  |\n     *      1-x           \\          3        5        7          /\n     *\n     * So, compute a Remez approximation of the following function\n     *\n     *  ln ((sqrt(x)+1)/(1-sqrt(x)))  /  x\n     *\n     * This will be an even function with only positive coefficents.\n     * x is in the range [0 - 1/3].\n     *\n     * Transform xi for input to the above function by setting\n     * x = (xi-1)/(xi+1).   Input to the polynomial is x^2, then\n     * the result is multiplied by x.\n     * @param xi number from which log is requested\n     * @return log(xi)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.slowSin#1765",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.slowSin(double, double[])",
        "snippet": "    private static double slowSin(final double x, final double result[]) {\n        final double xs[] = new double[2];\n        final double ys[] = new double[2];\n        final double facts[] = new double[2];\n        final double as[] = new double[2];\n        split(x, xs);\n        ys[0] = ys[1] = 0.0;\n\n        for (int i = 19; i >= 0; i--) {\n            splitMult(xs, ys, as);\n            ys[0] = as[0]; ys[1] = as[1];\n\n            if ( (i & 1) == 0) {\n                continue;\n            }\n\n            split(FACT[i], as);\n            splitReciprocal(as, facts);\n\n            if ( (i & 2) != 0 ) {\n                facts[0] = -facts[0];\n                facts[1] = -facts[1];\n            }\n\n            splitAdd(ys, facts, as);\n            ys[0] = as[0]; ys[1] = as[1];\n        }\n\n        if (result != null) {\n            result[0] = ys[0];\n            result[1] = ys[1];\n        }\n\n        return ys[0] + ys[1];\n    }\n",
        "begin_line": 1765,
        "end_line": 1799,
        "comment": "\n     * For x between 0 and pi/4 compute sine.\n     * @param x number from which sine is requested\n     * @param result placeholder where to put the result in extended precision\n     * @return sin(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.slowCos#1807",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.slowCos(double, double[])",
        "snippet": "    private static double slowCos(final double x, final double result[]) {\n\n        final double xs[] = new double[2];\n        final double ys[] = new double[2];\n        final double facts[] = new double[2];\n        final double as[] = new double[2];\n        split(x, xs);\n        ys[0] = ys[1] = 0.0;\n\n        for (int i = 19; i >= 0; i--) {\n            splitMult(xs, ys, as);\n            ys[0] = as[0]; ys[1] = as[1];\n\n            if ( (i & 1) != 0) {\n                continue;\n            }\n\n            split(FACT[i], as);\n            splitReciprocal(as, facts);\n\n            if ( (i & 2) != 0 ) {\n                facts[0] = -facts[0];\n                facts[1] = -facts[1];\n            }\n\n            splitAdd(ys, facts, as);\n            ys[0] = as[0]; ys[1] = as[1];\n        }\n\n        if (result != null) {\n            result[0] = ys[0];\n            result[1] = ys[1];\n        }\n\n        return ys[0] + ys[1];\n    }\n",
        "begin_line": 1807,
        "end_line": 1842,
        "comment": "\n     *  For x between 0 and pi/4 compute cosine\n     * @param x number from which cosine is requested\n     * @param result placeholder where to put the result in extended precision\n     * @return cos(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.buildSinCosTables#1846",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.buildSinCosTables()",
        "snippet": "    private static void buildSinCosTables() {\n        final double result[] = new double[2];\n\n        /* Use taylor series for 0 <= x <= 6/8 */\n        for (int i = 0; i < 7; i++) {\n            double x = i / 8.0;\n\n            slowSin(x, result);\n            SINE_TABLE_A[i] = result[0];\n            SINE_TABLE_B[i] = result[1];\n\n            slowCos(x, result);\n            COSINE_TABLE_A[i] = result[0];\n            COSINE_TABLE_B[i] = result[1];\n        }\n\n        /* Use angle addition formula to complete table to 13/8, just beyond pi/2 */\n        for (int i = 7; i < 14; i++) {\n            double xs[] = new double[2];\n            double ys[] = new double[2];\n            double as[] = new double[2];\n            double bs[] = new double[2];\n            double temps[] = new double[2];\n\n            if ( (i & 1) == 0) {\n                // Even, use double angle\n                xs[0] = SINE_TABLE_A[i/2];\n                xs[1] = SINE_TABLE_B[i/2];\n                ys[0] = COSINE_TABLE_A[i/2];\n                ys[1] = COSINE_TABLE_B[i/2];\n\n                /* compute sine */\n                splitMult(xs, ys, result);\n                SINE_TABLE_A[i] = result[0] * 2.0;\n                SINE_TABLE_B[i] = result[1] * 2.0;\n\n                /* Compute cosine */\n                splitMult(ys, ys, as);\n                splitMult(xs, xs, temps);\n                temps[0] = -temps[0];\n                temps[1] = -temps[1];\n                splitAdd(as, temps, result);\n                COSINE_TABLE_A[i] = result[0];\n                COSINE_TABLE_B[i] = result[1];\n            } else {\n                xs[0] = SINE_TABLE_A[i/2];\n                xs[1] = SINE_TABLE_B[i/2];\n                ys[0] = COSINE_TABLE_A[i/2];\n                ys[1] = COSINE_TABLE_B[i/2];\n                as[0] = SINE_TABLE_A[i/2+1];\n                as[1] = SINE_TABLE_B[i/2+1];\n                bs[0] = COSINE_TABLE_A[i/2+1];\n                bs[1] = COSINE_TABLE_B[i/2+1];\n\n                /* compute sine */\n                splitMult(xs, bs, temps);\n                splitMult(ys, as, result);\n                splitAdd(result, temps, result);\n                SINE_TABLE_A[i] = result[0];\n                SINE_TABLE_B[i] = result[1];\n\n                /* Compute cosine */\n                splitMult(ys, bs, result);\n                splitMult(xs, as, temps);\n                temps[0] = -temps[0];\n                temps[1] = -temps[1];\n                splitAdd(result, temps, result);\n                COSINE_TABLE_A[i] = result[0];\n                COSINE_TABLE_B[i] = result[1];\n            }\n        }\n\n        /* Compute tangent = sine/cosine */\n        for (int i = 0; i < 14; i++) {\n            double xs[] = new double[2];\n            double ys[] = new double[2];\n            double as[] = new double[2];\n\n            as[0] = COSINE_TABLE_A[i];\n            as[1] = COSINE_TABLE_B[i];\n\n            splitReciprocal(as, ys);\n\n            xs[0] = SINE_TABLE_A[i];\n            xs[1] = SINE_TABLE_B[i];\n\n            splitMult(xs, ys, as);\n\n            TANGENT_TABLE_A[i] = as[0];\n            TANGENT_TABLE_B[i] = as[1];\n        }\n\n    }\n",
        "begin_line": 1846,
        "end_line": 1938,
        "comment": " Build the sine and cosine tables.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.abs#3379",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.abs(double)",
        "snippet": "    public static double abs(double x) {\n        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n    }\n",
        "begin_line": 3379,
        "end_line": 3381,
        "comment": "\n     * Absolute value.\n     * @param x number from which absolute value is requested\n     * @return abs(x)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.min#3783",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.min(int, int)",
        "snippet": "    public static int min(final int a, final int b) {\n        return (a <= b) ? a : b;\n    }\n",
        "begin_line": 3783,
        "end_line": 3785,
        "comment": " Compute the minimum of two values\n     * @param a first value\n     * @param b second value\n     * @return a if a is lesser or equal to b, b otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "FastMath.max#3894",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "class_name": "org.apache.commons.math.util.FastMath",
        "signature": "org.apache.commons.math.util.FastMath.max(double, double)",
        "snippet": "    public static double max(final double a, final double b) {\n        if (a > b) {\n            return a;\n        }\n        if (a < b) {\n            return b;\n        }\n        /* if either arg is NaN, return NaN */\n        if (a != b) {\n            return Double.NaN;\n        }\n        /* min(+0.0,-0.0) == -0.0 */\n        /* 0x8000000000000000L == Double.doubleToRawLongBits(-0.0d) */\n        long bits = Double.doubleToRawLongBits(a);\n        if (bits == 0x8000000000000000L) {\n            return b;\n        }\n        return a;\n    }\n",
        "begin_line": 3894,
        "end_line": 3912,
        "comment": " Compute the maximum of two values\n     * @param a first value\n     * @param b second value\n     * @return b if a is lesser or equal to b, a otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.qrDecomposition#768",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrDecomposition()",
        "snippet": "    private void qrDecomposition() throws ConvergenceException {\n\n        // initializations\n        for (int k = 0; k < cols; ++k) {\n            permutation[k] = k;\n            double norm2 = 0;\n            for (int i = 0; i < weightedResidualJacobian.length; ++i) {\n                double akk = weightedResidualJacobian[i][k];\n                norm2 += akk * akk;\n            }\n            jacNorm[k] = FastMath.sqrt(norm2);\n        }\n\n        // transform the matrix column after column\n        for (int k = 0; k < cols; ++k) {\n\n            // select the column with the greatest norm on active components\n            int nextColumn = -1;\n            double ak2 = Double.NEGATIVE_INFINITY;\n            for (int i = k; i < cols; ++i) {\n                double norm2 = 0;\n                for (int j = k; j < weightedResidualJacobian.length; ++j) {\n                    double aki = weightedResidualJacobian[j][permutation[i]];\n                    norm2 += aki * aki;\n                }\n                if (Double.isInfinite(norm2) || Double.isNaN(norm2)) {\n                    throw new ConvergenceException(LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN,\n                            rows, cols);\n                }\n                if (norm2 > ak2) {\n                    nextColumn = i;\n                    ak2        = norm2;\n                }\n            }\n            if (ak2 <= qrRankingThreshold) {\n                rank = k;\n                return;\n            }\n            int pk                  = permutation[nextColumn];\n            permutation[nextColumn] = permutation[k];\n            permutation[k]          = pk;\n\n            // choose alpha such that Hk.u = alpha ek\n            double akk   = weightedResidualJacobian[k][pk];\n            double alpha = (akk > 0) ? -FastMath.sqrt(ak2) : FastMath.sqrt(ak2);\n            double betak = 1.0 / (ak2 - akk * alpha);\n            beta[pk]     = betak;\n\n            // transform the current column\n            diagR[pk]        = alpha;\n            weightedResidualJacobian[k][pk] -= alpha;\n\n            // transform the remaining columns\n            for (int dk = cols - 1 - k; dk > 0; --dk) {\n                double gamma = 0;\n                for (int j = k; j < weightedResidualJacobian.length; ++j) {\n                    gamma += weightedResidualJacobian[j][pk] * weightedResidualJacobian[j][permutation[k + dk]];\n                }\n                gamma *= betak;\n                for (int j = k; j < weightedResidualJacobian.length; ++j) {\n                    weightedResidualJacobian[j][permutation[k + dk]] -= gamma * weightedResidualJacobian[j][pk];\n                }\n            }\n        }\n        rank = solvedCols;\n    }\n",
        "begin_line": 768,
        "end_line": 833,
        "comment": "\n     * Decompose a matrix A as A.P = Q.R using Householder transforms.\n     * <p>As suggested in the P. Lascaux and R. Theodor book\n     * <i>Analyse num&eacute;rique matricielle appliqu&eacute;e &agrave;\n     * l'art de l'ing&eacute;nieur</i> (Masson, 1986), instead of representing\n     * the Householder transforms with u<sub>k</sub> unit vectors such that:\n     * <pre>\n     * H<sub>k</sub> = I - 2u<sub>k</sub>.u<sub>k</sub><sup>t</sup>\n     * </pre>\n     * we use <sub>k</sub> non-unit vectors such that:\n     * <pre>\n     * H<sub>k</sub> = I - beta<sub>k</sub>v<sub>k</sub>.v<sub>k</sub><sup>t</sup>\n     * </pre>\n     * where v<sub>k</sub> = a<sub>k</sub> - alpha<sub>k</sub> e<sub>k</sub>.\n     * The beta<sub>k</sub> coefficients are provided upon exit as recomputing\n     * them from the v<sub>k</sub> vectors would be costly.</p>\n     * <p>This decomposition handles rank deficient cases since the tranformations\n     * are performed in non-increasing columns norms order thanks to columns\n     * pivoting. The diagonal elements of the R matrix are therefore also in\n     * non-increasing absolute values order.</p>\n     * @exception ConvergenceException if the decomposition cannot be performed\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.qTy#840",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qTy(double[])",
        "snippet": "    private void qTy(double[] y) {\n        for (int k = 0; k < cols; ++k) {\n            int pk = permutation[k];\n            double gamma = 0;\n            for (int i = k; i < rows; ++i) {\n                gamma += weightedResidualJacobian[i][pk] * y[i];\n            }\n            gamma *= beta[pk];\n            for (int i = k; i < rows; ++i) {\n                y[i] -= gamma * weightedResidualJacobian[i][pk];\n            }\n        }\n    }\n",
        "begin_line": 840,
        "end_line": 852,
        "comment": "\n     * Compute the product Qt.y for some Q.R. decomposition.\n     *\n     * @param y vector to multiply (will be overwritten with the result)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.updateJacobian#101",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateJacobian()",
        "snippet": "    protected void updateJacobian() {\n        ++jacobianEvaluations;\n        weightedResidualJacobian = jF.value(point);\n        if (weightedResidualJacobian.length != rows) {\n            throw new DimensionMismatchException(weightedResidualJacobian.length, rows);\n        }\n\n        final double[] residualsWeights = getWeightRef();\n\n        for (int i = 0; i < rows; i++) {\n            final double[] ji = weightedResidualJacobian[i];\n            double wi = FastMath.sqrt(residualsWeights[i]);\n            for (int j = 0; j < cols; ++j) {\n                //ji[j] *=  -1.0;\n                weightedResidualJacobian[i][j] = -ji[j]*wi;\n            }\n        }\n    }\n",
        "begin_line": 101,
        "end_line": 118,
        "comment": "\n     * Update the jacobian matrix.\n     *\n     * @throws DimensionMismatchException if the Jacobian dimension does not\n     * match problem dimension.\n     * @throws org.apache.commons.math.exception.MathUserException if the jacobian\n     * function throws one.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.updateResidualsAndCost#127",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.updateResidualsAndCost()",
        "snippet": "    protected void updateResidualsAndCost() {\n        objective = computeObjectiveValue(point);\n        if (objective.length != rows) {\n            throw new DimensionMismatchException(objective.length, rows);\n        }\n\n        final double[] targetValues = getTargetRef();\n        final double[] residualsWeights = getWeightRef();\n\n        cost = 0;\n        int index = 0;\n        for (int i = 0; i < rows; i++) {\n            final double residual = targetValues[i] - objective[i];\n            weightedResiduals[i]= residual*FastMath.sqrt(residualsWeights[i]);\n            cost += residualsWeights[i] * residual * residual;\n            index += cols;\n        }\n        cost = FastMath.sqrt(cost);\n    }\n",
        "begin_line": 127,
        "end_line": 145,
        "comment": "\n     * Update the residuals array and cost function value.\n     * @throws DimensionMismatchException if the dimension does not match the\n     * problem dimension.\n     * @throws org.apache.commons.math.exception.TooManyEvaluationsException\n     * if the maximal number of evaluations is exceeded.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.optimize#231",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.optimize(int, org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction, double[], double[], double[])",
        "snippet": "    @Override\n    public VectorialPointValuePair optimize(int maxEval,\n                                            final DifferentiableMultivariateVectorialFunction f,\n                                            final double[] target, final double[] weights,\n                                            final double[] startPoint) {\n        // Reset counter.\n        jacobianEvaluations = 0;\n\n        // Store least squares problem characteristics.\n        jF = f.jacobian();\n        this.residuals = new double[target.length];\n\n        // Arrays shared with the other private methods.\n        point = startPoint.clone();\n        rows = target.length;\n        cols = point.length;\n\n        weightedResidualJacobian = new double[rows][cols];\n        this.weightedResiduals = new double[rows];\n\n        cost = Double.POSITIVE_INFINITY;\n\n        return super.optimize(maxEval, f, target, weights, startPoint);\n    }\n",
        "begin_line": 231,
        "end_line": 254,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer": null,
            "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer": null,
            "org.apache.commons.math.optimization.BaseMultivariateVectorialOptimizer": null,
            "org.apache.commons.math.optimization.BaseOptimizer": null
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getWeight#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getWeight()",
        "snippet": "    public double getWeight() {\n        return weight;\n    }\n",
        "begin_line": 56,
        "end_line": 58,
        "comment": " Get the weight of the measurement in the fitting process.\n     * @return weight of the measurement in the fitting process\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getX#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getX()",
        "snippet": "    public double getX() {\n        return x;\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Get the abscissa of the point.\n     * @return abscissa of the point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.getY#70",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.getY()",
        "snippet": "    public double getY() {\n        return y;\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": " Get the observed value of the function at x.\n     * @return observed value of the function at x\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.createWeightedObservedPointComparator#301",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.createWeightedObservedPointComparator()",
        "snippet": "        private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {\n            return new Comparator<WeightedObservedPoint>() {\n                public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                    if (p1 == null && p2 == null) {\n                        return 0;\n                    }\n                    if (p1 == null) {\n                        return -1;\n                    }\n                    if (p2 == null) {\n                        return 1;\n                    }\n                    if (p1.getX() < p2.getX()) {\n                        return -1;\n                    }\n                    if (p1.getX() > p2.getX()) {\n                        return 1;\n                    }\n                    if (p1.getY() < p2.getY()) {\n                        return -1;\n                    }\n                    if (p1.getY() > p2.getY()) {\n                        return 1;\n                    }\n                    if (p1.getWeight() < p2.getWeight()) {\n                        return -1;\n                    }\n                    if (p1.getWeight() > p2.getWeight()) {\n                        return 1;\n                    }\n                    return 0;\n                }\n            };\n        }\n",
        "begin_line": 301,
        "end_line": 334,
        "comment": "\n         * Factory method creating {@code Comparator} for comparing\n         * {@code WeightedObservedPoint} instances.\n         *\n         * @return the new {@code Comparator} instance.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.compare#303",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.Anonymous-745d76a4-5aaf-4de1-9744-36b001bb29bf.compare(org.apache.commons.math.optimization.fitting.WeightedObservedPoint, org.apache.commons.math.optimization.fitting.WeightedObservedPoint)",
        "snippet": "                public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                    if (p1 == null && p2 == null) {\n                        return 0;\n                    }\n                    if (p1 == null) {\n                        return -1;\n                    }\n                    if (p2 == null) {\n                        return 1;\n                    }\n                    if (p1.getX() < p2.getX()) {\n                        return -1;\n                    }\n                    if (p1.getX() > p2.getX()) {\n                        return 1;\n                    }\n                    if (p1.getY() < p2.getY()) {\n                        return -1;\n                    }\n                    if (p1.getY() > p2.getY()) {\n                        return 1;\n                    }\n                    if (p1.getWeight() < p2.getWeight()) {\n                        return -1;\n                    }\n                    if (p1.getWeight() > p2.getWeight()) {\n                        return 1;\n                    }\n                    return 0;\n                }\n",
        "begin_line": 303,
        "end_line": 332,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.ParameterGuesser#140",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.ParameterGuesser(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])",
        "snippet": "        public ParameterGuesser(WeightedObservedPoint[] observations) {\n            if (observations == null) {\n                throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n            }\n            if (observations.length < 3) {\n                throw new NumberIsTooSmallException(observations.length, 3, true);\n            }\n            this.observations = observations.clone();\n        }\n",
        "begin_line": 140,
        "end_line": 148,
        "comment": "\n         * Constructs instance with the specified observed points.\n         *\n         * @param observations observed points upon which should base guess\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.guess#155",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.guess()",
        "snippet": "        public double[] guess() {\n            if (parameters == null) {\n                parameters = basicGuess(observations);\n            }\n            return parameters.clone();\n        }\n",
        "begin_line": 155,
        "end_line": 160,
        "comment": "\n         * Guesses the parameters based on the observed points.\n         *\n         * @return the guessed parameters: norm, mean and sigma.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.findMaxY#196",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.findMaxY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[])",
        "snippet": "        private int findMaxY(WeightedObservedPoint[] points) {\n            int maxYIdx = 0;\n            for (int i = 1; i < points.length; i++) {\n                if (points[i].getY() > points[maxYIdx].getY()) {\n                    maxYIdx = i;\n                }\n            }\n            return maxYIdx;\n        }\n",
        "begin_line": 196,
        "end_line": 204,
        "comment": "\n         * Finds index of point in specified points with the largest Y.\n         *\n         * @param points Points to search.\n         * @return the index in specified points array.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.interpolateXAtY#220",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.interpolateXAtY(org.apache.commons.math.optimization.fitting.WeightedObservedPoint[], int, int, double)",
        "snippet": "        private double interpolateXAtY(WeightedObservedPoint[] points,\n                                       int startIdx, int idxStep, double y)\n            throws OutOfRangeException {\n            if (idxStep == 0) {\n                throw new ZeroException();\n            }\n            WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);\n            WeightedObservedPoint pointA = twoPoints[0];\n            WeightedObservedPoint pointB = twoPoints[1];\n            if (pointA.getY() == y) {\n                return pointA.getX();\n            }\n            if (pointB.getY() == y) {\n                return pointB.getX();\n            }\n            return pointA.getX() +\n                   (((y - pointA.getY()) * (pointB.getX() - pointA.getX())) /\n                    (pointB.getY() - pointA.getY()));\n        }\n",
        "begin_line": 220,
        "end_line": 238,
        "comment": "\n         * Interpolates using the specified points to determine X at the\n         * specified Y.\n         *\n         * @param points Points to use for interpolation.\n         * @param startIdx Index within points from which to start search for\n         *  interpolation bounds points.\n         * @param idxStep Index step for search for interpolation bounds points.\n         * @param y Y value for which X should be determined.\n         * @return the value of X at the specified Y.\n         * @throws ZeroException if {@code idxStep} is 0.\n         * @throws OutOfRangeException if specified {@code y} is not within the\n         * range of the specified {@code points}.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.isBetween#290",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.ParameterGuesser.isBetween(double, double, double)",
        "snippet": "        private boolean isBetween(double value, double boundary1, double boundary2) {\n            return (value >= boundary1 && value <= boundary2) ||\n                   (value >= boundary2 && value <= boundary1);\n        }\n",
        "begin_line": 290,
        "end_line": 293,
        "comment": "\n         * Determines whether a value is between two other values.\n         *\n         * @param value Value to determine whether is between {@code boundary1}\n         * and {@code boundary2}.\n         * @param boundary1 One end of the range.\n         * @param boundary2 Other end of the range.\n         * @return {@code true} if {@code value} is between {@code boundary1} and\n         * {@code boundary2} (inclusive), {@code false} otherwise.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.fit#119",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.fit()",
        "snippet": "    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        return fit(new Gaussian.Parametric(), guess);\n    }\n",
        "begin_line": 119,
        "end_line": 122,
        "comment": "\n     * Fits a Gaussian function to the observed points.\n     *\n     * @return the parameters of the Gaussian function that best fits the\n     * observed points (in the same order as above).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.jacobian#182",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.TheoreticalValuesFunction.jacobian()",
        "snippet": "        public MultivariateMatrixFunction jacobian() {\n            return new MultivariateMatrixFunction() {\n                public double[][] value(double[] point) {\n                    final double[][] jacobian = new double[observations.size()][];\n\n                    int i = 0;\n                    for (WeightedObservedPoint observed : observations) {\n                        jacobian[i++] = f.gradient(observed.getX(), point);\n                    }\n\n                    return jacobian;\n                }\n            };\n        }\n",
        "begin_line": 182,
        "end_line": 195,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction": "\n     * Returns the jacobian function.\n     * @return the jacobian function\n     "
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.value#184",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.TheoreticalValuesFunction.Anonymous-ea4281a2-339c-47bf-b008-d9511a35d5ce.value(double[])",
        "snippet": "                public double[][] value(double[] point) {\n                    final double[][] jacobian = new double[observations.size()][];\n\n                    int i = 0;\n                    for (WeightedObservedPoint observed : observations) {\n                        jacobian[i++] = f.gradient(observed.getX(), point);\n                    }\n\n                    return jacobian;\n                }\n",
        "begin_line": 184,
        "end_line": 193,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.TheoreticalValuesFunction#177",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.TheoreticalValuesFunction.TheoreticalValuesFunction(org.apache.commons.math.analysis.ParametricUnivariateRealFunction)",
        "snippet": "        public TheoreticalValuesFunction(final ParametricUnivariateRealFunction f) {\n            this.f = f;\n        }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": " Simple constructor.\n         * @param f function to fit.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.value#198",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.TheoreticalValuesFunction.value(double[])",
        "snippet": "        public double[] value(double[] point) {\n            // compute the residuals\n            final double[] values = new double[observations.size()];\n            int i = 0;\n            for (WeightedObservedPoint observed : observations) {\n                values[i++] = f.value(observed.getX(), point);\n            }\n\n            return values;\n        }\n",
        "begin_line": 198,
        "end_line": 207,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction": null,
            "org.apache.commons.math.analysis.MultivariateVectorialFunction": "\n     * Compute the value for the function at the given point.\n     * @param point point at which the function must be evaluated\n     * @return function value for the given point\n     * @exception MathUserException if the function evaluation fails\n     * @exception IllegalArgumentException if points dimension is wrong\n     "
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.fit#125",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.fit(org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[])",
        "snippet": "    public double[] fit(final ParametricUnivariateRealFunction f, final double[] initialGuess) {\n        return fit(Integer.MAX_VALUE, f, initialGuess);\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * Fit a curve.\n     * This method compute the coefficients of the curve that best\n     * fit the sample of observed points previously given through calls\n     * to the {@link #addObservedPoint(WeightedObservedPoint)\n     * addObservedPoint} method.\n     *\n     * @param f parametric function to fit.\n     * @param initialGuess first guess of the function parameters.\n     * @return the fitted parameters.\n     * @throws org.apache.commons.math.exception.DimensionMismatchException\n     * if the start point dimension is wrong.\n     * @throws org.apache.commons.math.exception.MathUserException if the\n     * parametric function throws one.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.fit#147",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.fit(int, org.apache.commons.math.analysis.ParametricUnivariateRealFunction, double[])",
        "snippet": "    public double[] fit(int maxEval, final ParametricUnivariateRealFunction f,\n                        final double[] initialGuess) {\n        // prepare least squares problem\n        double[] target  = new double[observations.size()];\n        double[] weights = new double[observations.size()];\n        int i = 0;\n        for (WeightedObservedPoint point : observations) {\n            target[i]  = point.getY();\n            weights[i] = point.getWeight();\n            ++i;\n        }\n\n        // perform the fit\n        VectorialPointValuePair optimum =\n            optimizer.optimize(maxEval, new TheoreticalValuesFunction(f),\n                               target, weights, initialGuess);\n\n        // extract the coefficients\n        return optimum.getPointRef();\n    }\n",
        "begin_line": 147,
        "end_line": 166,
        "comment": "\n     * Fit a curve.\n     * This method compute the coefficients of the curve that best\n     * fit the sample of observed points previously given through calls\n     * to the {@link #addObservedPoint(WeightedObservedPoint)\n     * addObservedPoint} method.\n     *\n     * @param f parametric function to fit.\n     * @param initialGuess first guess of the function parameters.\n     * @param maxEval Maximum number of function evaluations.\n     * @return the fitted parameters.\n     * @throws org.apache.commons.math.exception.TooManyEvaluationsException\n     * if the number of allowed evaluations is exceeded.\n     * @throws org.apache.commons.math.exception.DimensionMismatchException\n     * if the start point dimension is wrong.\n     * @throws org.apache.commons.math.exception.MathUserException if the\n     * parametric function throws one.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractVectorialOptimizer.getConvergenceChecker#87",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getConvergenceChecker()",
        "snippet": "    public ConvergenceChecker<VectorialPointValuePair> getConvergenceChecker() {\n        return checker;\n    }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.BaseMultivariateVectorialOptimizer": null,
            "org.apache.commons.math.optimization.BaseOptimizer": "\n     * Get the convergence checker.\n     *\n     * @return the object used to check for convergence.\n     "
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractVectorialOptimizer.computeObjectiveValue#101",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.computeObjectiveValue(double[])",
        "snippet": "    protected double[] computeObjectiveValue(double[] point) {\n        try {\n            evaluations.incrementCount();\n        } catch (MaxCountExceededException e) {\n            throw new TooManyEvaluationsException(e.getMax());\n        }\n        return function.value(point);\n    }\n",
        "begin_line": 101,
        "end_line": 108,
        "comment": "\n     * Compute the objective function value.\n     *\n     * @param point Point at which the objective function must be evaluated.\n     * @return the objective function value at the specified point.\n     * @throws TooManyEvaluationsException if the maximal number of evaluations is\n     * exceeded.\n     * @throws org.apache.commons.math.exception.MathUserException if the\n     * objective function throws one.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractVectorialOptimizer.optimize#111",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.optimize(int, FUNC, double[], double[], double[])",
        "snippet": "    public VectorialPointValuePair optimize(int maxEval, FUNC f, double[] t, double[] w,\n                                            double[] startPoint) {\n        // Checks.\n        if (f == null) {\n            throw new NullArgumentException();\n        }\n        if (t == null) {\n            throw new NullArgumentException();\n        }\n        if (w == null) {\n            throw new NullArgumentException();\n        }\n        if (startPoint == null) {\n            throw new NullArgumentException();\n        }\n        if (t.length != w.length) {\n            throw new DimensionMismatchException(t.length, w.length);\n        }\n\n        // Reset.\n        evaluations.setMaximalCount(maxEval);\n        evaluations.resetCount();\n\n        // Store optimization problem characteristics.\n        function = f;\n        target = t.clone();\n        weight = w.clone();\n        start = startPoint.clone();\n\n        // Perform computation.\n        return doOptimize();\n    }\n",
        "begin_line": 111,
        "end_line": 142,
        "comment": " {@inheritDoc} ",
        "resolved_comments": {
            "org.apache.commons.math.optimization.BaseMultivariateVectorialOptimizer": "\n     * Optimize an objective function.\n     * Optimization is considered to be a weighted least-squares minimization.\n     * The cost function to be minimized is\n     * <code>&sum;weight<sub>i</sub>(objective<sub>i</sub> - target<sub>i</sub>)<sup>2</sup></code>\n     *\n     * @param f Objective function.\n     * @param target Target value for the objective functions at optimum.\n     * @param weight Weights for the least squares cost computation.\n     * @param startPoint Start point for optimization.\n     * @return the point/value pair giving the optimal value for objective\n     * function.\n     * @param maxEval Maximum number of function evaluations.\n     * @throws org.apache.commons.math.exception.DimensionMismatchException\n     * if the start point dimension is wrong.\n     * @throws org.apache.commons.math.exception.TooManyEvaluationsException\n     * if the maximal number of evaluations is exceeded.\n     * @throws org.apache.commons.math.exception.NullArgumentException if\n     * any argument is {@code null}.\n     * @throws org.apache.commons.math.exception.MathUserException if the\n     * function throws one during search.\n     "
        },
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractVectorialOptimizer.getTargetRef#164",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getTargetRef()",
        "snippet": "    protected double[] getTargetRef() {\n        return target;\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "\n     * @return a reference to the {@link #target array}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractVectorialOptimizer.getWeightRef#170",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.getWeightRef()",
        "snippet": "    protected double[] getWeightRef() {\n        return weight;\n    }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "\n     * @return a reference to the {@link #weight array}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "VectorialPointValuePair.VectorialPointValuePair#46",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.VectorialPointValuePair(double[], double[])",
        "snippet": "    public VectorialPointValuePair(final double[] point, final double[] value) {\n        this.point = (point == null) ? null : point.clone();\n        this.value = (value == null) ? null : value.clone();\n    }\n",
        "begin_line": 46,
        "end_line": 49,
        "comment": " Build a point/objective function value pair.\n     * @param point point coordinates (the built instance will store\n     * a copy of the array, not the array passed as argument)\n     * @param value value of an objective function at the point\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "VectorialPointValuePair.getValueRef#96",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.getValueRef()",
        "snippet": "    public double[] getValueRef() {\n        return value;\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": " Get a reference to the value of the objective function.\n     * <p>This method is provided as a convenience to avoid copying\n     * the array, the elements of the array should <em>not</em> be modified.</p>\n     * @return a reference to the internal array storing the value of the objective function\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleVectorialValueChecker.converged#72",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.converged(int, org.apache.commons.math.optimization.VectorialPointValuePair, org.apache.commons.math.optimization.VectorialPointValuePair)",
        "snippet": "    @Override\n    public boolean converged(final int iteration,\n                             final VectorialPointValuePair previous,\n                             final VectorialPointValuePair current) {\n        final double[] p = previous.getValueRef();\n        final double[] c = current.getValueRef();\n        for (int i = 0; i < p.length; ++i) {\n            final double pi         = p[i];\n            final double ci         = c[i];\n            final double difference = FastMath.abs(pi - ci);\n            final double size       = FastMath.max(FastMath.abs(pi), FastMath.abs(ci));\n            if (difference > size * getRelativeThreshold() &&\n                difference > getAbsoluteThreshold()) {\n                return false;\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 72,
        "end_line": 89,
        "comment": "\n     * Check if the optimization algorithm has converged considering the\n     * last two points.\n     * This method may be called several time from the same algorithm\n     * iteration with different points. This can be detected by checking the\n     * iteration number at each call if needed. Each time this method is\n     * called, the previous and current point correspond to points with the\n     * same role at each iteration, so they can be compared. As an example,\n     * simplex-based algorithms call this method for all points of the simplex,\n     * not only for the best or worst ones.\n     *\n     * @param iteration Index of current iteration\n     * @param previous Best point in the previous iteration.\n     * @param current Best point in the current iteration.\n     * @return {@code true} if the algorithm has converged.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractConvergenceChecker.getRelativeThreshold#72",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.getRelativeThreshold()",
        "snippet": "    public double getRelativeThreshold() {\n        return relativeThreshold;\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * @return the relative threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractConvergenceChecker.getAbsoluteThreshold#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.getAbsoluteThreshold()",
        "snippet": "    public double getAbsoluteThreshold() {\n        return absoluteThreshold;\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\n     * @return the absolute threshold.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gaussian.value#126",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "class_name": "org.apache.commons.math.analysis.function.Gaussian",
        "signature": "org.apache.commons.math.analysis.function.Gaussian.Parametric.value(double, double[])",
        "snippet": "        public double value(double x,\n                            double[] param) {\n            validateParameters(param);\n\n            final double diff = x - param[1];\n            final double i2s2 = 1 / (2 * param[2] * param[2]);\n            return Gaussian.value(diff, param[0], i2s2);\n        }\n",
        "begin_line": 126,
        "end_line": 133,
        "comment": "\n         * Computes the value of the Gaussian at {@code x}.\n         *\n         * @param x Value for which the function must be computed.\n         * @param param Values of norm, mean and standard deviation.\n         * @return the value of the function.\n         * @throws NullArgumentException if {@code param} is {@code null}.\n         * @throws DimensionMismatchException if the size of {@code param} is\n         * not 3.\n         * @throws NotStrictlyPositiveException if {@code param[2]} is negative.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gaussian.gradient#149",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "class_name": "org.apache.commons.math.analysis.function.Gaussian",
        "signature": "org.apache.commons.math.analysis.function.Gaussian.Parametric.gradient(double, double[])",
        "snippet": "        public double[] gradient(double x, double[] param) {\n            validateParameters(param);\n\n            final double norm = param[0];\n            final double diff = x - param[1];\n            final double sigma = param[2];\n            final double i2s2 = 1 / (2 * sigma * sigma);\n\n            final double n = Gaussian.value(diff, 1, i2s2);\n            final double m = norm * n * 2 * i2s2 * diff;\n            final double s = m * diff / sigma;\n\n            return new double[] { n, m, s };\n        }\n",
        "begin_line": 149,
        "end_line": 162,
        "comment": "\n         * Computes the value of the gradient at {@code x}.\n         * The components of the gradient vector are the partial\n         * derivatives of the function with respect to each of the\n         * <em>parameters</em> (norm, mean and standard deviation).\n         *\n         * @param x Value at which the gradient must be computed.\n         * @param param Values of norm, mean and standard deviation.\n         * @return the gradient vector at {@code x}.\n         * @throws NullArgumentException if {@code param} is {@code null}.\n         * @throws DimensionMismatchException if the size of {@code param} is\n         * not 3.\n         * @throws NotStrictlyPositiveException if {@code param[2]} is negative.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "Gaussian.value#194",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "class_name": "org.apache.commons.math.analysis.function.Gaussian",
        "signature": "org.apache.commons.math.analysis.function.Gaussian.value(double, double, double)",
        "snippet": "    private static double value(double xMinusMean,\n                                double norm,\n                                double i2s2) {\n        return norm * FastMath.exp(-xMinusMean * xMinusMean * i2s2);\n    }\n",
        "begin_line": 194,
        "end_line": 198,
        "comment": "\n     * @param xMinusMean {@code x - mean}.\n     * @param norm Normalization factor.\n     * @param i2s2 Inverse of twice the square of the standard deviation.\n     * @return the value of the Gaussian at {@code x}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "WeightedObservedPoint.WeightedObservedPoint#47",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.WeightedObservedPoint(double, double, double)",
        "snippet": "    public WeightedObservedPoint(final double weight, final double x, final double y) {\n        this.weight = weight;\n        this.x      = x;\n        this.y      = y;\n    }\n",
        "begin_line": 47,
        "end_line": 51,
        "comment": " Simple constructor.\n     * @param weight weight of the measurement in the fitting process\n     * @param x abscissa of the measurement\n     * @param y ordinate of the measurement\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.addObservedPoint#66",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double)",
        "snippet": "    public void addObservedPoint(double x, double y) {\n        addObservedPoint(1.0, x, y);\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": " Add an observed (x,y) point to the sample with unit weight.\n     * <p>Calling this method is equivalent to call\n     * {@code addObservedPoint(1.0, x, y)}.</p>\n     * @param x abscissa of the point\n     * @param y observed value of the point at x, after fitting we should\n     * have f(x) as close as possible to this value\n     * @see #addObservedPoint(double, double, double)\n     * @see #addObservedPoint(WeightedObservedPoint)\n     * @see #getObservations()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.addObservedPoint#79",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.addObservedPoint(double, double, double)",
        "snippet": "    public void addObservedPoint(double weight, double x, double y) {\n        observations.add(new WeightedObservedPoint(weight, x, y));\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": " Add an observed weighted (x,y) point to the sample.\n     * @param weight weight of the observed point in the fit\n     * @param x abscissa of the point\n     * @param y observed value of the point at x, after fitting we should\n     * have f(x) as close as possible to this value\n     * @see #addObservedPoint(double, double)\n     * @see #addObservedPoint(WeightedObservedPoint)\n     * @see #getObservations()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer#151",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer()",
        "snippet": "    public LevenbergMarquardtOptimizer() {\n        this(100, 1e-10, 1e-10, 1e-10, MathUtils.SAFE_MIN);\n    }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "\n     * Build an optimizer for least squares problems with default values\n     * for all the tuning parameters (see the {@link\n     * #LevenbergMarquardtOptimizer(double,double,double,double,double)\n     * other contructor}.\n     * The default values for the algorithm settings are:\n     * <ul>\n     *  <li>Initial step bound factor}: 100</li>\n     *  <li>Cost relative tolerance}: 1e-10</li>\n     *  <li>Parameters relative tolerance}: 1e-10</li>\n     *  <li>Orthogonality tolerance}: 1e-10</li>\n     *  <li>QR ranking threshold}: {@link MathUtils#SAFE_MIN}</li>\n     * </ul>\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer#204",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.LevenbergMarquardtOptimizer(double, double, double, double, double)",
        "snippet": "    public LevenbergMarquardtOptimizer(double initialStepBoundFactor,\n                                       double costRelativeTolerance,\n                                       double parRelativeTolerance,\n                                       double orthoTolerance,\n                                       double threshold) {\n        this.initialStepBoundFactor = initialStepBoundFactor;\n        this.costRelativeTolerance = costRelativeTolerance;\n        this.parRelativeTolerance = parRelativeTolerance;\n        this.orthoTolerance = orthoTolerance;\n        this.qrRankingThreshold = threshold;\n    }\n",
        "begin_line": 204,
        "end_line": 214,
        "comment": "\n     * The arguments control the behaviour of the default convergence checking\n     * procedure.\n     * Additional criteria can defined through the setting of a {@link\n     * ConvergenceChecker}.\n     *\n     * @param initialStepBoundFactor Positive input variable used in\n     * determining the initial step bound. This bound is set to the\n     * product of initialStepBoundFactor and the euclidean norm of\n     * {@code diag * x} if non-zero, or else to {@code initialStepBoundFactor}\n     * itself. In most cases factor should lie in the interval\n     * {@code (0.1, 100.0)}. {@code 100} is a generally recommended value.\n     * @param costRelativeTolerance Desired relative error in the sum of\n     * squares.\n     * @param parRelativeTolerance Desired relative error in the approximate\n     * solution parameters.\n     * @param orthoTolerance Desired max cosine on the orthogonality between\n     * the function vector and the columns of the Jacobian.\n     * @param threshold Desired threshold for QR ranking. If the squared norm\n     * of a column vector is smaller or equal to this threshold during QR\n     * decomposition, it is considered to be a zero vector and hence the rank\n     * of the matrix is reduced.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer#78",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.AbstractLeastSquaresOptimizer()",
        "snippet": "    protected AbstractLeastSquaresOptimizer() {}\n",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     * Simple constructor with default settings.\n     * The convergence check is set to a {@link\n     * org.apache.commons.math.optimization.SimpleVectorialValueChecker}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "GaussianFitter.GaussianFitter#67",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.GaussianFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)",
        "snippet": "    public GaussianFitter(DifferentiableMultivariateVectorialOptimizer optimizer) {\n        super(optimizer);\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * Constructs an instance using the specified optimizer.\n     *\n     * @param optimizer Optimizer to use for the fitting.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.CurveFitter#51",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.CurveFitter(org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer)",
        "snippet": "    public CurveFitter(final DifferentiableMultivariateVectorialOptimizer optimizer) {\n        this.optimizer = optimizer;\n        observations = new ArrayList<WeightedObservedPoint>();\n    }\n",
        "begin_line": 51,
        "end_line": 54,
        "comment": " Simple constructor.\n     * @param optimizer optimizer to use for the fitting\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "CurveFitter.getObservations#99",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.getObservations()",
        "snippet": "    public WeightedObservedPoint[] getObservations() {\n        return observations.toArray(new WeightedObservedPoint[observations.size()]);\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": " Get the observed points.\n     * @return observed points\n     * @see #addObservedPoint(double, double)\n     * @see #addObservedPoint(double, double, double)\n     * @see #addObservedPoint(WeightedObservedPoint)\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer#61",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer()",
        "snippet": "    protected BaseAbstractVectorialOptimizer() {\n        this(new SimpleVectorialValueChecker());\n    }\n",
        "begin_line": 61,
        "end_line": 63,
        "comment": "\n     * Simple constructor with default settings.\n     * The convergence check is set to a {@link SimpleVectorialValueChecker} and\n     * the allowed number of evaluations is set to {@link Integer#MAX_VALUE}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer#67",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.BaseAbstractVectorialOptimizer(org.apache.commons.math.optimization.ConvergenceChecker<org.apache.commons.math.optimization.VectorialPointValuePair>)",
        "snippet": "    protected BaseAbstractVectorialOptimizer(ConvergenceChecker<VectorialPointValuePair> checker) {\n        this.checker = checker;\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\n     * @param checker Convergence checker.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleVectorialValueChecker.SimpleVectorialValueChecker#39",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/SimpleVectorialValueChecker.java",
        "class_name": "org.apache.commons.math.optimization.SimpleVectorialValueChecker",
        "signature": "org.apache.commons.math.optimization.SimpleVectorialValueChecker.SimpleVectorialValueChecker()",
        "snippet": "    public SimpleVectorialValueChecker() {}\n",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n     * Build an instance with default thresholds.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractConvergenceChecker.AbstractConvergenceChecker#52",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.AbstractConvergenceChecker()",
        "snippet": "    public AbstractConvergenceChecker() {\n        this.relativeThreshold = DEFAULT_RELATIVE_THRESHOLD;\n        this.absoluteThreshold = DEFAULT_ABSOLUTE_THRESHOLD;\n    }\n",
        "begin_line": 52,
        "end_line": 55,
        "comment": "\n     * Build an instance with default thresholds.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    }
]