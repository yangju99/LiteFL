[
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.weightedResidualJacobian",
        "snippet": "    protected double[][] weightedResidualJacobian;",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n     * Jacobian matrix of the weighted residuals.\n     * This matrix is in canonical form just after the calls to\n     * {@link #updateJacobian()}, but may be modified by the solver\n     * in the derived class (the {@link LevenbergMarquardtOptimizer\n     * Levenberg-Marquardt optimizer} does this).\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.cols",
        "snippet": "    protected int cols;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Number of columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.rows",
        "snippet": "    protected int rows;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Number of rows of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.point",
        "snippet": "    protected double[] point;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " Current point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.objective",
        "snippet": "    protected double[] objective;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Current objective function value. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.residuals",
        "snippet": "    protected double[] residuals;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Current residuals. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.weightedResiduals",
        "snippet": "    protected double[] weightedResiduals;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Weighted residuals "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.cost",
        "snippet": "    protected double cost;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Cost value (square root of the sum of the residuals). "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jF",
        "snippet": "    private MultivariateMatrixFunction jF;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Objective function derivatives. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.AbstractLeastSquaresOptimizer.jacobianEvaluations",
        "snippet": "    private int jacobianEvaluations;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Number of evaluations of the Jacobian. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.optimizer",
        "snippet": "    private final DifferentiableMultivariateVectorialOptimizer optimizer;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Optimizer to use for the fitting. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.CurveFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.CurveFitter.observations",
        "snippet": "    private final List<WeightedObservedPoint> observations;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Observed points. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.TheoreticalValuesFunction",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/CurveFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.TheoreticalValuesFunction.f",
        "snippet": "        private final ParametricUnivariateRealFunction f;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " Function to fit. "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6024911025449780478L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.specific",
        "snippet": "    private final Localizable specific;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n     * Pattern used to build the specific part of the message (problem description).\n     "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.general",
        "snippet": "    private final Localizable general;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n     * Pattern used to build the general part of the message (problem description).\n     "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathRuntimeException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathRuntimeException.java",
        "signature": "org.apache.commons.math.exception.MathRuntimeException.arguments",
        "snippet": "    private final Object[] arguments;",
        "begin_line": 49,
        "end_line": 49,
        "comment": "\n     * Arguments used to build the message.\n     "
    },
    {
        "class_name": "org.apache.commons.math.exception.util.LocalizedFormats",
        "src_path": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "signature": "org.apache.commons.math.exception.util.LocalizedFormats.sourceFormat",
        "snippet": "    private final String sourceFormat;",
        "begin_line": 334,
        "end_line": 334,
        "comment": " Source English format. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.function.Gaussian",
        "src_path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "signature": "org.apache.commons.math.analysis.function.Gaussian.mean",
        "snippet": "    private final double mean;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Mean. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.function.Gaussian",
        "src_path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "signature": "org.apache.commons.math.analysis.function.Gaussian.i2s2",
        "snippet": "    private final double i2s2;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Inverse of twice the square of the standard deviation. "
    },
    {
        "class_name": "org.apache.commons.math.analysis.function.Gaussian",
        "src_path": "src/main/java/org/apache/commons/math/analysis/function/Gaussian.java",
        "signature": "org.apache.commons.math.analysis.function.Gaussian.norm",
        "snippet": "    private final double norm;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Normalization factor. "
    },
    {
        "class_name": "org.apache.commons.math.exception.OutOfRangeException",
        "src_path": "src/main/java/org/apache/commons/math/exception/OutOfRangeException.java",
        "signature": "org.apache.commons.math.exception.OutOfRangeException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 111601815794403609L;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math.exception.OutOfRangeException",
        "src_path": "src/main/java/org/apache/commons/math/exception/OutOfRangeException.java",
        "signature": "org.apache.commons.math.exception.OutOfRangeException.lo",
        "snippet": "    private final Number lo;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Lower bound. "
    },
    {
        "class_name": "org.apache.commons.math.exception.OutOfRangeException",
        "src_path": "src/main/java/org/apache/commons/math/exception/OutOfRangeException.java",
        "signature": "org.apache.commons.math.exception.OutOfRangeException.hi",
        "snippet": "    private final Number hi;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Higher bound. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.solvedCols",
        "snippet": "    private int solvedCols;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " Number of solved point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.diagR",
        "snippet": "    private double[] diagR;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " Diagonal elements of the R matrix in the Q.R. decomposition. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.jacNorm",
        "snippet": "    private double[] jacNorm;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " Norms of the columns of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.beta",
        "snippet": "    private double[] beta;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " Coefficients of the Householder transforms vectors. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.permutation",
        "snippet": "    private int[] permutation;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Columns permutation array. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.rank",
        "snippet": "    private int rank;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Rank of the jacobian matrix. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.lmPar",
        "snippet": "    private double lmPar;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Levenberg-Marquardt parameter. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.lmDir",
        "snippet": "    private double[] lmDir;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " Parameters evolution direction associated with lmPar. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.initialStepBoundFactor",
        "snippet": "    private final double initialStepBoundFactor;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " Positive input variable used in determining the initial step bound. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.costRelativeTolerance",
        "snippet": "    private final double costRelativeTolerance;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Desired relative error in the sum of squares. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.parRelativeTolerance",
        "snippet": "    private final double parRelativeTolerance;",
        "begin_line": 130,
        "end_line": 130,
        "comment": "  Desired relative error in the approximate solution parameters. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.orthoTolerance",
        "snippet": "    private final double orthoTolerance;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Desired max cosine on the orthogonality between the function vector\n     * and the columns of the jacobian. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java",
        "signature": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer.qrRankingThreshold",
        "snippet": "    private final double qrRankingThreshold;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " Threshold for QR ranking. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI",
        "snippet": "    public static final double PI = 105414357.0 / 33554432.0 + 1.984187159361080883e-9;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Archimede's constant PI, ratio of circle circumference to diameter. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.E",
        "snippet": "    public static final double E = 2850325.0 / 1048576.0 + 8.254840070411028747e-8;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Napier's constant e, base of the natural logarithm. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_A",
        "snippet": "    private static final double EXP_INT_TABLE_A[] = new double[1500];",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_INT_TABLE_B",
        "snippet": "    private static final double EXP_INT_TABLE_B[] = new double[1500];",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Exponential evaluated at integer values,\n     * exp(x) =  expIntTableA[x + 750] + expIntTableB[x+750]\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_A",
        "snippet": "    private static final double EXP_FRAC_TABLE_A[] = new double[1025];",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EXP_FRAC_TABLE_B",
        "snippet": "    private static final double EXP_FRAC_TABLE_B[] = new double[1025];",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Exponential over the range of 0 - 1 in increments of 2^-10\n     * exp(x/1024) =  expFracTableA[x] + expFracTableB[x].\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.FACT",
        "snippet": "    private static final double FACT[] = new double[20];",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Factorial table, for Taylor series expansions. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_MANT",
        "snippet": "    private static final double LN_MANT[][] = new double[1024][];",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Extended precision logarithm table over the range 1 - 2 in increments of 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_A",
        "snippet": "    private static final double LN_2_A = 0.693147063255310059;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " log(2) (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_2_B",
        "snippet": "    private static final double LN_2_B = 1.17304635250823482e-7;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " log(2) (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_SPLIT_COEF",
        "snippet": "    private static final double LN_SPLIT_COEF[][] = {\n        {2.0, 0.0},\n        {0.6666666269302368, 3.9736429850260626E-8},\n        {0.3999999761581421, 2.3841857910019882E-8},\n        {0.2857142686843872, 1.7029898543501842E-8},\n        {0.2222222089767456, 1.3245471311735498E-8},\n        {0.1818181574344635, 2.4384203044354907E-8},\n        {0.1538461446762085, 9.140260083262505E-9},\n        {0.13333332538604736, 9.220590270857665E-9},\n        {0.11764700710773468, 1.2393345855018391E-8},\n        {0.10526403784751892, 8.251545029714408E-9},\n        {0.0952233225107193, 1.2675934823758863E-8},\n        {0.08713622391223907, 1.1430250008909141E-8},\n        {0.07842259109020233, 2.404307984052299E-9},\n        {0.08371849358081818, 1.176342548272881E-8},\n        {0.030589580535888672, 1.2958646899018938E-9},\n        {0.14982303977012634, 1.225743062930824E-8},\n    };",
        "begin_line": 85,
        "end_line": 102,
        "comment": " Coefficients for slowLog. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_QUICK_COEF",
        "snippet": "    private static final double LN_QUICK_COEF[][] = {\n        {1.0, 5.669184079525E-24},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.986821492305628E-8},\n        {-0.25, -6.663542893624021E-14},\n        {0.19999998807907104, 1.1921056801463227E-8},\n        {-0.1666666567325592, -7.800414592973399E-9},\n        {0.1428571343421936, 5.650007086920087E-9},\n        {-0.12502530217170715, -7.44321345601866E-11},\n        {0.11113807559013367, 9.219544613762692E-9},\n    };",
        "begin_line": 105,
        "end_line": 115,
        "comment": " Coefficients for log, when input 0.99 < x < 1.01. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.LN_HI_PREC_COEF",
        "snippet": "    private static final double LN_HI_PREC_COEF[][] = {\n        {1.0, -6.032174644509064E-23},\n        {-0.25, -0.25},\n        {0.3333333134651184, 1.9868161777724352E-8},\n        {-0.2499999701976776, -2.957007209750105E-8},\n        {0.19999954104423523, 1.5830993332061267E-10},\n        {-0.16624879837036133, -2.6033824355191673E-8}\n    };",
        "begin_line": 118,
        "end_line": 125,
        "comment": " Coefficients for log in the range of 1.0 < x < 1.0 + 2^-10. "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_A",
        "snippet": "    private static final double SINE_TABLE_A[] = new double[14];",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Sine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.SINE_TABLE_B",
        "snippet": "    private static final double SINE_TABLE_B[] = new double[14];",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Sine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_A",
        "snippet": "    private static final double COSINE_TABLE_A[] = new double[14];",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Cosine table (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.COSINE_TABLE_B",
        "snippet": "    private static final double COSINE_TABLE_B[] = new double[14];",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Cosine table (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_A",
        "snippet": "    private static final double TANGENT_TABLE_A[] = new double[14];",
        "begin_line": 140,
        "end_line": 140,
        "comment": " Tangent table, used by atan() (high bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TANGENT_TABLE_B",
        "snippet": "    private static final double TANGENT_TABLE_B[] = new double[14];",
        "begin_line": 143,
        "end_line": 143,
        "comment": " Tangent table, used by atan() (low bits). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.RECIP_2PI",
        "snippet": "    private static final long RECIP_2PI[] = new long[] {\n        (0x28be60dbL << 32) | 0x9391054aL,\n        (0x7f09d5f4L << 32) | 0x7d4d3770L,\n        (0x36d8a566L << 32) | 0x4f10e410L,\n        (0x7f9458eaL << 32) | 0xf7aef158L,\n        (0x6dc91b8eL << 32) | 0x909374b8L,\n        (0x01924bbaL << 32) | 0x82746487L,\n        (0x3f877ac7L << 32) | 0x2c4a69cfL,\n        (0xba208d7dL << 32) | 0x4baed121L,\n        (0x3a671c09L << 32) | 0xad17df90L,\n        (0x4e64758eL << 32) | 0x60d4ce7dL,\n        (0x272117e2L << 32) | 0xef7e4a0eL,\n        (0xc7fe25ffL << 32) | 0xf7816603L,\n        (0xfbcbc462L << 32) | 0xd6829b47L,\n        (0xdb4d9fb3L << 32) | 0xc9f2c26dL,\n        (0xd3d18fd9L << 32) | 0xa797fa8bL,\n        (0x5d49eeb1L << 32) | 0xfaf97c5eL,\n        (0xcf41ce7dL << 32) | 0xe294a4baL,\n         0x9afed7ecL << 32  };",
        "begin_line": 146,
        "end_line": 164,
        "comment": " Bits of 1/(2*pi), need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.PI_O_4_BITS",
        "snippet": "    private static final long PI_O_4_BITS[] = new long[] {\n        (0xc90fdaa2L << 32) | 0x2168c234L,\n        (0xc4c6628bL << 32) | 0x80dc1cd1L };",
        "begin_line": 167,
        "end_line": 169,
        "comment": " Bits of pi/4, need for reducePayneHanek(). "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.EIGHTHS",
        "snippet": "    private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};",
        "begin_line": 175,
        "end_line": 175,
        "comment": " Eighths.\n     * This is used by sinQ, because its faster to do a table lookup than\n     * a multiply in this time-critical routine\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.CBRTTWO",
        "snippet": "    private static final double CBRTTWO[] = { 0.6299605249474366,\n                                            0.7937005259840998,\n                                            1.0,\n                                            1.2599210498948732,\n                                            1.5874010519681994 };",
        "begin_line": 178,
        "end_line": 182,
        "comment": " Table of 2^((n+2)/3) "
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.HEX_40000000",
        "snippet": "    private static final long HEX_40000000 = 0x40000000L; // 1073741824L",
        "begin_line": 195,
        "end_line": 195,
        "comment": " 1073741824L"
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.MASK_30BITS",
        "snippet": "    private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " 0xFFFFFFFFC0000000L;"
    },
    {
        "class_name": "org.apache.commons.math.util.FastMath",
        "src_path": "src/main/java/org/apache/commons/math/util/FastMath.java",
        "signature": "org.apache.commons.math.util.FastMath.TWO_POWER_52",
        "snippet": "    private static final double TWO_POWER_52 = 4503599627370496.0;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5306874947404636157L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version id. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.weight",
        "snippet": "    private final double weight;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " Weight of the measurement in the fitting process. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.x",
        "snippet": "    private final double x;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Abscissa of the point. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/WeightedObservedPoint.java",
        "signature": "org.apache.commons.math.optimization.fitting.WeightedObservedPoint.y",
        "snippet": "    private final double y;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " Observed value of the function at x. "
    },
    {
        "class_name": "org.apache.commons.math.exception.NotStrictlyPositiveException",
        "src_path": "src/main/java/org/apache/commons/math/exception/NotStrictlyPositiveException.java",
        "signature": "org.apache.commons.math.exception.NotStrictlyPositiveException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7824848630829852237L;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math.exception.NumberIsTooSmallException",
        "src_path": "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java",
        "signature": "org.apache.commons.math.exception.NumberIsTooSmallException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6100997100383932834L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math.exception.NumberIsTooSmallException",
        "src_path": "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java",
        "signature": "org.apache.commons.math.exception.NumberIsTooSmallException.min",
        "snippet": "    private final Number min;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n     * Higher bound.\n     "
    },
    {
        "class_name": "org.apache.commons.math.exception.NumberIsTooSmallException",
        "src_path": "src/main/java/org/apache/commons/math/exception/NumberIsTooSmallException.java",
        "signature": "org.apache.commons.math.exception.NumberIsTooSmallException.boundIsAllowed",
        "snippet": "    private final boolean boundIsAllowed;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n     * Whether the maximum is included in the allowed range.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitter",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitter.g",
        "snippet": "                private final ParametricUnivariateRealFunction g = new Gaussian.Parametric();",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.ParameterGuesser",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.ParameterGuesser.observations",
        "snippet": "        private final WeightedObservedPoint[] observations;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " Observed points. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.ParameterGuesser",
        "src_path": "src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java",
        "signature": "org.apache.commons.math.optimization.fitting.ParameterGuesser.parameters",
        "snippet": "        private double[] parameters;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Resulting guessed parameters. "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathIllegalArgumentException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalArgumentException.java",
        "signature": "org.apache.commons.math.exception.MathIllegalArgumentException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6024911025449780478L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.evaluations",
        "snippet": "    protected final Incrementor evaluations = new Incrementor();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Evaluations counter. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.checker",
        "snippet": "    private ConvergenceChecker<VectorialPointValuePair> checker;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Convergence checker. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.target",
        "snippet": "    private double[] target;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Target value for the objective functions at optimum. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.weight",
        "snippet": "    private double[] weight;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Weight for the least squares cost computation. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.start",
        "snippet": "    private double[] start;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Initial guess. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer",
        "src_path": "src/main/java/org/apache/commons/math/optimization/direct/BaseAbstractVectorialOptimizer.java",
        "signature": "org.apache.commons.math.optimization.direct.BaseAbstractVectorialOptimizer.function",
        "snippet": "    private MultivariateVectorialFunction function;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Objective function. "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathIllegalNumberException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java",
        "signature": "org.apache.commons.math.exception.MathIllegalNumberException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7447085893598031110L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version Id. "
    },
    {
        "class_name": "org.apache.commons.math.exception.MathIllegalNumberException",
        "src_path": "src/main/java/org/apache/commons/math/exception/MathIllegalNumberException.java",
        "signature": "org.apache.commons.math.exception.MathIllegalNumberException.argument",
        "snippet": "    private final Number argument;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Requested. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.DEFAULT_RELATIVE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_RELATIVE_THRESHOLD = 100 * MathUtils.EPSILON;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n     * Default relative threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.DEFAULT_ABSOLUTE_THRESHOLD",
        "snippet": "    private static final double DEFAULT_ABSOLUTE_THRESHOLD = 100 * MathUtils.SAFE_MIN;",
        "begin_line": 39,
        "end_line": 39,
        "comment": "\n     * Default absolute threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.relativeThreshold",
        "snippet": "    private final double relativeThreshold;",
        "begin_line": 43,
        "end_line": 43,
        "comment": "\n     * Relative tolerance threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.AbstractConvergenceChecker",
        "src_path": "src/main/java/org/apache/commons/math/optimization/AbstractConvergenceChecker.java",
        "signature": "org.apache.commons.math.optimization.AbstractConvergenceChecker.absoluteThreshold",
        "snippet": "    private final double absoluteThreshold;",
        "begin_line": 47,
        "end_line": 47,
        "comment": "\n     * Absolute tolerance threshold.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "signature": "org.apache.commons.math.util.Incrementor.maximalCount",
        "snippet": "    private int maximalCount;",
        "begin_line": 32,
        "end_line": 32,
        "comment": "\n     * Upper limit for the counter.\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.Incrementor",
        "src_path": "src/main/java/org/apache/commons/math/util/Incrementor.java",
        "signature": "org.apache.commons.math.util.Incrementor.count",
        "snippet": "    private int count;",
        "begin_line": 36,
        "end_line": 36,
        "comment": "\n     * Current count.\n     "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1003888396256744753L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Serializable version identifier. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.point",
        "snippet": "    private final double[] point;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Point coordinates. "
    },
    {
        "class_name": "org.apache.commons.math.optimization.VectorialPointValuePair",
        "src_path": "src/main/java/org/apache/commons/math/optimization/VectorialPointValuePair.java",
        "signature": "org.apache.commons.math.optimization.VectorialPointValuePair.value",
        "snippet": "    private final double[] value;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Vectorial value of the objective function at the point. "
    }
]