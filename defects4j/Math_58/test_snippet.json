[
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit01()",
        "snippet": "    @Test\n    public void testFit01()\n    throws OptimizationException {\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        addDatasetToGaussianFitter(DATASET1, fitter);\n        double[] parameters = fitter.fit();\n\n        Assert.assertEquals(3496978.1837704973, parameters[0], 1e-4);\n        Assert.assertEquals(4.054933085999146, parameters[1], 1e-4);\n        Assert.assertEquals(0.015039355620304326, parameters[2], 1e-4);\n    }\n",
        "begin_line": 188,
        "end_line": 198,
        "comment": "\n     * Basic.\n     *\n     * @throws OptimizationException in the event of a test case error\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 86)",
            "(line 192,col 9)-(line 192,col 53)",
            "(line 193,col 9)-(line 193,col 43)",
            "(line 195,col 9)-(line 195,col 69)",
            "(line 196,col 9)-(line 196,col 68)",
            "(line 197,col 9)-(line 197,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit02()",
        "snippet": "    @Test(expected=MathIllegalArgumentException.class)\n    public void testFit02()\n    throws OptimizationException {\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        fitter.fit();\n    }\n",
        "begin_line": 205,
        "end_line": 210,
        "comment": "\n     * Zero points is not enough observed points.\n     *\n     * @throws OptimizationException in the event of a test case error\n     ",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 86)",
            "(line 209,col 9)-(line 209,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit03()",
        "snippet": "    @Test(expected=MathIllegalArgumentException.class)\n    public void testFit03()\n    throws OptimizationException {\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        addDatasetToGaussianFitter(new double[][] {\n            {4.0254623,  531026.0},\n            {4.02804905, 664002.0}},\n            fitter);\n        fitter.fit();\n    }\n",
        "begin_line": 217,
        "end_line": 226,
        "comment": "\n     * Two points is not enough observed points.\n     *\n     * @throws OptimizationException in the event of a test case error\n     ",
        "child_ranges": [
            "(line 220,col 9)-(line 220,col 86)",
            "(line 221,col 9)-(line 224,col 20)",
            "(line 225,col 9)-(line 225,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit04()",
        "snippet": "    @Test\n    public void testFit04()\n    throws OptimizationException \n    {\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        addDatasetToGaussianFitter(DATASET2, fitter);\n        double[] parameters = fitter.fit();\n\n        Assert.assertEquals(233003.2967252038, parameters[0], 1e-4);\n        Assert.assertEquals(-10.654887521095983, parameters[1], 1e-4);\n        Assert.assertEquals(4.335937353196641, parameters[2], 1e-4);\n    }  \n",
        "begin_line": 233,
        "end_line": 244,
        "comment": "\n     * Poor data: right of peak not symmetric with left of peak.\n     *\n     * @throws OptimizationException in the event of a test case error\n     ",
        "child_ranges": [
            "(line 237,col 9)-(line 237,col 86)",
            "(line 238,col 9)-(line 238,col 53)",
            "(line 239,col 9)-(line 239,col 43)",
            "(line 241,col 9)-(line 241,col 68)",
            "(line 242,col 9)-(line 242,col 70)",
            "(line 243,col 9)-(line 243,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit05()",
        "snippet": "    @Test\n    public void testFit05()\n    throws OptimizationException {\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        addDatasetToGaussianFitter(DATASET3, fitter);\n        double[] parameters = fitter.fit();\n\n        Assert.assertEquals(283863.81929180305, parameters[0], 1e-4);\n        Assert.assertEquals(-13.29641995105174, parameters[1], 1e-4);\n        Assert.assertEquals(1.7297330293549908, parameters[2], 1e-4);\n    }\n",
        "begin_line": 251,
        "end_line": 261,
        "comment": "\n     * Poor data: long tails.\n     *\n     * @throws OptimizationException in the event of a test case error\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 86)",
            "(line 255,col 9)-(line 255,col 53)",
            "(line 256,col 9)-(line 256,col 43)",
            "(line 258,col 9)-(line 258,col 69)",
            "(line 259,col 9)-(line 259,col 69)",
            "(line 260,col 9)-(line 260,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit06()",
        "snippet": "    @Test\n    public void testFit06()\n    throws OptimizationException {\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        addDatasetToGaussianFitter(DATASET4, fitter);\n        double[] parameters = fitter.fit();\n\n        Assert.assertEquals(285250.66754309234, parameters[0], 1e-4);\n        Assert.assertEquals(-13.528375695228455, parameters[1], 1e-4);\n        Assert.assertEquals(1.5204344894331614, parameters[2], 1e-4);\n    }    \n",
        "begin_line": 268,
        "end_line": 278,
        "comment": "\n     * Poor data: right of peak is missing.\n     *\n     * @throws OptimizationException in the event of a test case error\n     ",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 86)",
            "(line 272,col 9)-(line 272,col 53)",
            "(line 273,col 9)-(line 273,col 43)",
            "(line 275,col 9)-(line 275,col 69)",
            "(line 276,col 9)-(line 276,col 70)",
            "(line 277,col 9)-(line 277,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testFit07()",
        "snippet": "    @Test\n    public void testFit07()\n    throws OptimizationException {\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        addDatasetToGaussianFitter(DATASET5, fitter);\n        double[] parameters = fitter.fit();\n\n        Assert.assertEquals(3514384.729342235, parameters[0], 1e-4);\n        Assert.assertEquals(4.054970307455625, parameters[1], 1e-4);\n        Assert.assertEquals(0.015029412832160017, parameters[2], 1e-4);\n    }\n",
        "begin_line": 285,
        "end_line": 295,
        "comment": "\n     * Basic with smaller dataset.\n     *\n     * @throws OptimizationException in the event of a test case error\n     ",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 86)",
            "(line 289,col 9)-(line 289,col 53)",
            "(line 290,col 9)-(line 290,col 43)",
            "(line 292,col 9)-(line 292,col 68)",
            "(line 293,col 9)-(line 293,col 68)",
            "(line 294,col 9)-(line 294,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.testMath519()",
        "snippet": "    @Test\n    public void testMath519() {\n        // The optimizer will try negative sigma values but \"GaussianFitter\"\n        // will catch the raised exceptions and return NaN values instead.\n\n        final double[] data = { \n            1.1143831578403364E-29,\n            4.95281403484594E-28,\n            1.1171347211930288E-26,\n            1.7044813962636277E-25,\n            1.9784716574832164E-24,\n            1.8630236407866774E-23,\n            1.4820532905097742E-22,\n            1.0241963854632831E-21,\n            6.275077366673128E-21,\n            3.461808994532493E-20,\n            1.7407124684715706E-19,\n            8.056687953553974E-19,\n            3.460193945992071E-18,\n            1.3883326374011525E-17,\n            5.233894983671116E-17,\n            1.8630791465263745E-16,\n            6.288759227922111E-16,\n            2.0204433920597856E-15,\n            6.198768938576155E-15,\n            1.821419346860626E-14,\n            5.139176445538471E-14,\n            1.3956427429045787E-13,\n            3.655705706448139E-13,\n            9.253753324779779E-13,\n            2.267636001476696E-12,\n            5.3880460095836855E-12,\n            1.2431632654852931E-11\n        };\n\n        GaussianFitter fitter = new GaussianFitter(new LevenbergMarquardtOptimizer());\n        for (int i = 0; i < data.length; i++) {\n            fitter.addObservedPoint(i, data[i]);\n        }\n        final double[] p = fitter.fit();\n\n        Assert.assertEquals(53.1572792, p[1], 1e-7);\n        Assert.assertEquals(5.75214622, p[2], 1e-8);\n    }\n",
        "begin_line": 297,
        "end_line": 340,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 330,col 10)",
            "(line 332,col 9)-(line 332,col 86)",
            "(line 333,col 9)-(line 335,col 9)",
            "(line 336,col 9)-(line 336,col 40)",
            "(line 338,col 9)-(line 338,col 52)",
            "(line 339,col 9)-(line 339,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.fitting.GaussianFitterTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/fitting/GaussianFitterTest.java",
        "signature": "org.apache.commons.math.optimization.fitting.GaussianFitterTest.addDatasetToGaussianFitter(double[][], org.apache.commons.math.optimization.fitting.GaussianFitter)",
        "snippet": "    protected static void addDatasetToGaussianFitter(double[][] points,\n                                                     GaussianFitter fitter) {\n        for (int i = 0; i < points.length; i++) {\n            fitter.addObservedPoint(points[i][0], points[i][1]);\n        }\n    }\n",
        "begin_line": 353,
        "end_line": 358,
        "comment": "\n     * Adds the specified points to specified <code>GaussianFitter</code>\n     * instance.\n     *\n     * @param points data points where first dimension is a point index and\n     *        second dimension is an array of length two representing the point\n     *        with the first value corresponding to X and the second value\n     *        corresponding to Y\n     * @param fitter fitter to which the points in <code>points</code> should be\n     *        added as observed points\n     ",
        "child_ranges": [
            "(line 355,col 9)-(line 357,col 9)"
        ]
    }
]