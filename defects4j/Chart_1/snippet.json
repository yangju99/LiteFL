[
    {
        "name": "AbstractCategoryItemRenderer.getLegendItems#1790",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItems()",
        "snippet": "    public LegendItemCollection getLegendItems() {\n        LegendItemCollection result = new LegendItemCollection();\n        if (this.plot == null) {\n            return result;\n        }\n        int index = this.plot.getIndexOf(this);\n        CategoryDataset dataset = this.plot.getDataset(index);\n        if (dataset != null) {\n            return result;\n        }\n        int seriesCount = dataset.getRowCount();\n        if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n            for (int i = 0; i < seriesCount; i++) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        else {\n            for (int i = seriesCount - 1; i >= 0; i--) {\n                if (isSeriesVisibleInLegend(i)) {\n                    LegendItem item = getLegendItem(index, i);\n                    if (item != null) {\n                        result.add(item);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1790,
        "end_line": 1822,
        "comment": "\r\n     * Returns a (possibly empty) collection of legend items for the series\r\n     * that this renderer is responsible for drawing.\r\n     *\r\n     * @return The legend item collection (never <code>null</code>).\r\n     *\r\n     * @see #getLegendItem(int, int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRenderer#1612",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public void setRenderer(CategoryItemRenderer renderer) {\n        setRenderer(0, renderer, true);\n    }\n",
        "begin_line": 1612,
        "end_line": 1614,
        "comment": "\r\n     * Sets the renderer at index 0 (sometimes referred to as the \"primary\"\r\n     * renderer) and sends a {@link PlotChangeEvent} to all registered\r\n     * listeners.\r\n     *\r\n     * @param renderer  the renderer (<code>null</code> permitted.\r\n     *\r\n     * @see #getRenderer()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4472
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRenderer#1661",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer, boolean)",
        "snippet": "    public void setRenderer(int index, CategoryItemRenderer renderer,\n                            boolean notify) {\n\n        // stop listening to the existing renderer...\n        CategoryItemRenderer existing\n            = (CategoryItemRenderer) this.renderers.get(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n\n        // register the new renderer...\n        this.renderers.set(index, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        configureDomainAxes();\n        configureRangeAxes();\n\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 1661,
        "end_line": 1684,
        "comment": "\r\n     * Sets a renderer.  A {@link PlotChangeEvent} is sent to all registered\r\n     * listeners.\r\n     *\r\n     * @param index  the index.\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @see #getRenderer(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.CategoryPlot#566",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot()",
        "snippet": "    public CategoryPlot() {\n        this(null, null, null, null);\n    }\n",
        "begin_line": 566,
        "end_line": 568,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2673
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setDataset#1338",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDataset(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public void setDataset(CategoryDataset dataset) {\n        setDataset(0, dataset);\n    }\n",
        "begin_line": 1338,
        "end_line": 1340,
        "comment": "\r\n     * Sets the dataset for the plot, replacing the existing dataset, if there\r\n     * is one.  This method also calls the\r\n     * {@link #datasetChanged(DatasetChangeEvent)} method, which adjusts the\r\n     * axis ranges if necessary and sends a {@link PlotChangeEvent} to all\r\n     * registered listeners.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     *\r\n     * @see #getDataset()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setDataset#1350",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDataset(int, org.jfree.data.category.CategoryDataset)",
        "snippet": "    public void setDataset(int index, CategoryDataset dataset) {\n\n        CategoryDataset existing = (CategoryDataset) this.datasets.get(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.datasets.set(index, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        // send a dataset change event to self...\n        DatasetChangeEvent event = new DatasetChangeEvent(this, dataset,\n                new DatasetChangeInfo());\n        // TODO: fill in real dataset change info\n        datasetChanged(event);\n\n    }\n",
        "begin_line": 1350,
        "end_line": 1367,
        "comment": "\r\n     * Sets a dataset for the plot.\r\n     *\r\n     * @param index  the dataset index.\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     *\r\n     * @see #getDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.getRangeAxis#1039",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis(int)",
        "snippet": "    public ValueAxis getRangeAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.rangeAxes.size()) {\n            result = (ValueAxis) this.rangeAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot cp = (CategoryPlot) parent;\n                result = cp.getRangeAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1039,
        "end_line": 1052,
        "comment": "\r\n     * Returns a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2085
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineAndShapeRenderer.LineAndShapeRenderer#200",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.LineAndShapeRenderer()",
        "snippet": "    public LineAndShapeRenderer() {\n        this(true, true);\n    }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\r\n     * Creates a renderer with both lines and shapes visible by default.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.getIndexOf#1726",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getIndexOf(org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public int getIndexOf(CategoryItemRenderer renderer) {\n        return this.renderers.indexOf(renderer);\n    }\n",
        "begin_line": 1726,
        "end_line": 1728,
        "comment": "\r\n     * Returns the index of the specified renderer, or <code>-1</code> if the\r\n     * renderer is not assigned to this plot.\r\n     *\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     *\r\n     * @return The renderer index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultCategoryDataset.addValue#257",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.addValue(double, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(double value, Comparable rowKey,\n                         Comparable columnKey) {\n        addValue(new Double(value), rowKey, columnKey);\n    }\n",
        "begin_line": 257,
        "end_line": 260,
        "comment": "\r\n     * Adds a value to the table.\r\n     *\r\n     * @param value  the value.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     *\r\n     * @see #getValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineAndShapeRenderer.LineAndShapeRenderer#210",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.LineAndShapeRenderer(boolean, boolean)",
        "snippet": "    public LineAndShapeRenderer(boolean lines, boolean shapes) {\n        super();\n        this.seriesLinesVisible = new BooleanList();\n        this.baseLinesVisible = lines;\n        this.seriesShapesVisible = new BooleanList();\n        this.baseShapesVisible = shapes;\n        this.seriesShapesFilled = new BooleanList();\n        this.baseShapesFilled = true;\n        this.useFillPaint = false;\n        this.drawOutlines = true;\n        this.useOutlinePaint = false;\n        this.useSeriesOffset = false;  // preserves old behaviour\n        this.itemMargin = 0.0;\n    }\n",
        "begin_line": 210,
        "end_line": 223,
        "comment": "\r\n     * Creates a new renderer with lines and/or shapes visible.\r\n     *\r\n     * @param lines  draw lines?\r\n     * @param shapes  draw shapes?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.14
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.notifyListeners#188",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.event.DatasetChangeEvent)",
        "snippet": "    protected void notifyListeners(DatasetChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == DatasetChangeListener.class) {\n                ((DatasetChangeListener) listeners[i + 1]).datasetChanged(\n                        event);\n            }\n        }\n    }\n",
        "begin_line": 188,
        "end_line": 196,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param event  contains information about the event that triggered the\r\n     *               notification.\r\n     *\r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1302
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendItemCollection.getItemCount#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.items.size();\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\r\n     * Returns the number of legend items in the collection.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.128
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendItemCollection.LegendItemCollection#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.LegendItemCollection()",
        "snippet": "    public LegendItemCollection() {\n        this.items = new java.util.ArrayList();\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Constructs a new legend item collection, initially empty.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.124
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultCategoryDataset.addValue#241",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(Number value, Comparable rowKey,\n                         Comparable columnKey) {\n        this.data.addObject(new SelectableValue(value), rowKey, columnKey);\n        fireDatasetChanged(new DatasetChangeInfo());\n        // TODO:  fill in real change details\n    }\n",
        "begin_line": 241,
        "end_line": 246,
        "comment": "\r\n     * Adds a value to the table.  Performs the same function as setValue().\r\n     *\r\n     * @param value  the value.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     *\r\n     * @see #getValue(Comparable, Comparable)\r\n     * @see #removeValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1118
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultCategoryDataset.DefaultCategoryDataset#80",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.DefaultCategoryDataset()",
        "snippet": "    public DefaultCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        // FIXME: will need to remove this later, because it should be optional\n        setSelectionState(this);\n    }\n",
        "begin_line": 80,
        "end_line": 84,
        "comment": "\r\n     * Creates a new (empty) dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryDataset.AbstractCategoryDataset#63",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/AbstractCategoryDataset.java",
        "class_name": "org.jfree.data.category.AbstractCategoryDataset",
        "signature": "org.jfree.data.category.AbstractCategoryDataset.AbstractCategoryDataset()",
        "snippet": "    public AbstractCategoryDataset() {\n        super();\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryDataset.setSelectionState#86",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/AbstractCategoryDataset.java",
        "class_name": "org.jfree.data.category.AbstractCategoryDataset",
        "signature": "org.jfree.data.category.AbstractCategoryDataset.setSelectionState(org.jfree.data.category.CategoryDatasetSelectionState)",
        "snippet": "    public void setSelectionState(CategoryDatasetSelectionState state) {\n        this.selectionState = state;\n        fireDatasetChanged(new DatasetChangeInfo());\n        // TODO:  fill in real change details\n    }\n",
        "begin_line": 86,
        "end_line": 90,
        "comment": "\n     * Sets the selection state for this dataset.\n     *\n     * @param state  the selection state (<code>null</code> permitted).\n     *\n     * @since 1.2.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1021
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.addObject#255",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.addObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addObject(Object object, Comparable rowKey,\n            Comparable columnKey) {\n        setObject(object, rowKey, columnKey);\n    }\n",
        "begin_line": 255,
        "end_line": 258,
        "comment": "\r\n     * Adds an object to the table.  Performs the same function as setObject().\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.101
        },
        "num_failing_tests": 1
    },
    {
        "name": "SelectableValue.SelectableValue#64",
        "is_bug": false,
        "src_path": "source/org/jfree/data/SelectableValue.java",
        "class_name": "org.jfree.data.SelectableValue",
        "signature": "org.jfree.data.SelectableValue.SelectableValue(java.lang.Number)",
        "snippet": "    public SelectableValue(Number value) {\n        this(value, false);\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * Creates a new instance with the specified value and the selection\n     * state set to <code>false</code>.\n     *\n     * @param value  the value (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "SelectableValue.SelectableValue#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/SelectableValue.java",
        "class_name": "org.jfree.data.SelectableValue",
        "signature": "org.jfree.data.SelectableValue.SelectableValue(java.lang.Number, boolean)",
        "snippet": "    public SelectableValue(Number value, boolean selected) {\n        this.value = value;\n        this.selected = selected;\n    }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "\n     * Creates a new instance with the specified value and selection state.\n     *\n     * @param value  the value (<code>null</code> permitted).\n     * @param selected  the selection state.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.099
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryItemRenderer.setPlot#292",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setPlot(org.jfree.chart.plot.CategoryPlot)",
        "snippet": "    public void setPlot(CategoryPlot plot) {\n        if (plot == null) {\n            throw new IllegalArgumentException(\"Null 'plot' argument.\");\n        }\n        this.plot = plot;\n    }\n",
        "begin_line": 292,
        "end_line": 297,
        "comment": "\r\n     * Sets the plot that the renderer has been assigned to.  This method is\r\n     * usually called by the {@link CategoryPlot}, in normal usage you\r\n     * shouldn't need to call this method directly.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     *\r\n     * @see #getPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.setObject#267",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.setObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void setObject(Object object, Comparable rowKey,\n            Comparable columnKey) {\n\n        if (rowKey == null) {\n            throw new IllegalArgumentException(\"Null 'rowKey' argument.\");\n        }\n        if (columnKey == null) {\n            throw new IllegalArgumentException(\"Null 'columnKey' argument.\");\n        }\n        KeyedObjects row;\n        int rowIndex = this.rowKeys.indexOf(rowKey);\n        if (rowIndex >= 0) {\n            row = (KeyedObjects) this.rows.get(rowIndex);\n        }\n        else {\n            this.rowKeys.add(rowKey);\n            row = new KeyedObjects();\n            this.rows.add(row);\n        }\n        row.setObject(columnKey, object);\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n\n    }\n",
        "begin_line": 267,
        "end_line": 292,
        "comment": "\r\n     * Adds or updates an object.\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects2D.KeyedObjects2D#73",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.KeyedObjects2D()",
        "snippet": "    public KeyedObjects2D() {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n    }\n",
        "begin_line": 73,
        "end_line": 77,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0937
        },
        "num_failing_tests": 1
    },
    {
        "name": "SortOrder.SortOrder#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.SortOrder(java.lang.String)",
        "snippet": "    private SortOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.CategoryPlot#579",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot(org.jfree.data.category.CategoryDataset, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public CategoryPlot(CategoryDataset dataset,\n                        CategoryAxis domainAxis,\n                        ValueAxis rangeAxis,\n                        CategoryItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n\n        // allocate storage for dataset, axes and renderers\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n\n        this.datasetToDomainAxesMap = new TreeMap();\n        this.datasetToRangeAxesMap = new TreeMap();\n\n        this.renderers = new ObjectList();\n\n        this.datasets = new ObjectList();\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);\n\n        setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false);\n        setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false);\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.drawSharedDomainAxis = false;\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n\n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = DEFAULT_DOMAIN_GRIDLINES_VISIBLE;\n        this.domainGridlinePosition = CategoryAnchor.MIDDLE;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeZeroBaselineVisible = false;\n        this.rangeZeroBaselinePaint = Color.black;\n        this.rangeZeroBaselineStroke = new BasicStroke(0.5f);\n\n        this.rangeGridlinesVisible = DEFAULT_RANGE_GRIDLINES_VISIBLE;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeMinorGridlinesVisible = false;\n        this.rangeMinorGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeMinorGridlinePaint = Color.white;\n\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        this.anchorValue = 0.0;\n\n        this.domainCrosshairVisible = false;\n        this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n        this.rangeCrosshairVisible = DEFAULT_CROSSHAIR_VISIBLE;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n\n        this.annotations = new java.util.ArrayList();\n\n        this.rangePannable = false;\n        this.shadowGenerator = new DefaultShadowGenerator();\n    }\n",
        "begin_line": 579,
        "end_line": 671,
        "comment": "\r\n     * Creates a new plot.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\r\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\r\n     * @param renderer  the item renderer (<code>null</code> permitted).\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#911",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(AxisLocation location, boolean notify) {\n        // delegate...\n        setDomainAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 911,
        "end_line": 914,
        "comment": "\r\n     * Sets the location of the domain axis and, if requested, sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the axis location (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether listeners are notified.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#944",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(int index, AxisLocation location,\n            boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.domainAxisLocations.set(index, location);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 944,
        "end_line": 954,
        "comment": "\r\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.0.5\r\n     *\r\n     * @see #getDomainAxisLocation(int)\r\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.configureDomainAxes#1012",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureDomainAxes()",
        "snippet": "    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1012,
        "end_line": 1019,
        "comment": "\r\n     * Configures the domain axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1196",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(AxisLocation location, boolean notify) {\n        setRangeAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 1196,
        "end_line": 1198,
        "comment": "\r\n     * Sets the location of the range axis and, if requested, sends a\r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @see #setDomainAxisLocation(AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1225",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(int index, AxisLocation location,\n                                     boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.rangeAxisLocations.set(index, location);\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 1225,
        "end_line": 1235,
        "comment": "\r\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @see #getRangeAxisLocation(int)\r\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.configureRangeAxes#1290",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureRangeAxes()",
        "snippet": "    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1290,
        "end_line": 1297,
        "comment": "\r\n     * Configures the range axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.getDataset#1319",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataset(int)",
        "snippet": "    public CategoryDataset getDataset(int index) {\n        CategoryDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (CategoryDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1319,
        "end_line": 1325,
        "comment": "\r\n     * Returns the dataset at the given index.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     *\r\n     * @see #setDataset(int, CategoryDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.mapDatasetToDomainAxis#1409",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis(int, int)",
        "snippet": "    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        List axisIndices = new java.util.ArrayList(1);\n        axisIndices.add(new Integer(axisIndex));\n        mapDatasetToDomainAxes(index, axisIndices);\n    }\n",
        "begin_line": 1409,
        "end_line": 1413,
        "comment": "\r\n     * Maps a dataset to a particular domain axis.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     *\r\n     * @see #getDomainAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.mapDatasetToDomainAxes#1425",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes(int, java.util.List)",
        "snippet": "    public void mapDatasetToDomainAxes(int index, List axisIndices) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires 'index' >= 0.\");\n        }\n        checkAxisIndices(axisIndices);\n        Integer key = new Integer(index);\n        this.datasetToDomainAxesMap.put(key, new ArrayList(axisIndices));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index),\n                new DatasetChangeInfo()));\n        // TODO: fill in real dataset change info\n    }\n",
        "begin_line": 1425,
        "end_line": 1436,
        "comment": "\r\n     * Maps the specified dataset to the axes in the list.  Note that the\r\n     * conversion of data values into Java2D space is always performed using\r\n     * the first axis in the list.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\r\n     *\r\n     * @since 1.0.12\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.checkAxisIndices#1445",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.checkAxisIndices(java.util.List)",
        "snippet": "    private void checkAxisIndices(List indices) {\n        // axisIndices can be:\n        // 1.  null;\n        // 2.  non-empty, containing only Integer objects that are unique.\n        if (indices == null) {\n            return;  // OK\n        }\n        int count = indices.size();\n        if (count == 0) {\n            throw new IllegalArgumentException(\"Empty list not permitted.\");\n        }\n        HashSet set = new HashSet();\n        for (int i = 0; i < count; i++) {\n            Object item = indices.get(i);\n            if (!(item instanceof Integer)) {\n                throw new IllegalArgumentException(\n                        \"Indices must be Integer instances.\");\n            }\n            if (set.contains(item)) {\n                throw new IllegalArgumentException(\"Indices must be unique.\");\n            }\n            set.add(item);\n        }\n    }\n",
        "begin_line": 1445,
        "end_line": 1468,
        "comment": "\r\n     * This method is used to perform argument checking on the list of\r\n     * axis indices passed to mapDatasetToDomainAxes() and\r\n     * mapDatasetToRangeAxes().\r\n     *\r\n     * @param indices  the list of indices (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.mapDatasetToRangeAxis#1506",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis(int, int)",
        "snippet": "    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        List axisIndices = new java.util.ArrayList(1);\n        axisIndices.add(new Integer(axisIndex));\n        mapDatasetToRangeAxes(index, axisIndices);\n    }\n",
        "begin_line": 1506,
        "end_line": 1510,
        "comment": "\r\n     * Maps a dataset to a particular range axis.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     *\r\n     * @see #getRangeAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.mapDatasetToRangeAxes#1522",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes(int, java.util.List)",
        "snippet": "    public void mapDatasetToRangeAxes(int index, List axisIndices) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires 'index' >= 0.\");\n        }\n        checkAxisIndices(axisIndices);\n        Integer key = new Integer(index);\n        this.datasetToRangeAxesMap.put(key, new ArrayList(axisIndices));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index),\n                new DatasetChangeInfo()));\n\n        // TODO: fill in real dataset change info\n    }\n",
        "begin_line": 1522,
        "end_line": 1534,
        "comment": "\r\n     * Maps the specified dataset to the axes in the list.  Note that the\r\n     * conversion of data values into Java2D space is always performed using\r\n     * the first axis in the list.\r\n     *\r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndices  the axis indices (<code>null</code> permitted).\r\n     *\r\n     * @since 1.0.12\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.datasetChanged#2332",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetChanged(org.jfree.data.event.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n\n        int count = this.rangeAxes.size();\n        for (int axisIndex = 0; axisIndex < count; axisIndex++) {\n            ValueAxis yAxis = getRangeAxis(axisIndex);\n            if (yAxis != null) {\n                yAxis.configure();\n            }\n        }\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n\n    }\n",
        "begin_line": 2332,
        "end_line": 2350,
        "comment": "\r\n     * Receives notification of a change to the plot's dataset.\r\n     * <P>\r\n     * The range axis bounds will be recalculated if necessary.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0933
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryAnchor.CategoryAnchor#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.CategoryAnchor(java.lang.String)",
        "snippet": "    private CategoryAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0928
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects.KeyedObjects#72",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.KeyedObjects()",
        "snippet": "    public KeyedObjects() {\n        this.data = new java.util.ArrayList();\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\r\n     * Creates a new collection (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects.getIndex#132",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.getIndex(java.lang.Comparable)",
        "snippet": "    public int getIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int i = 0;\n        Iterator iterator = this.data.iterator();\n        while (iterator.hasNext()) {\n            KeyedObject ko = (KeyedObject) iterator.next();\n            if (ko.getKey().equals(key)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n",
        "begin_line": 132,
        "end_line": 146,
        "comment": "\r\n     * Returns the index for a given key, or <code>-1</code>.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     *\r\n     * @return The index, or <code>-1</code> if the key is unrecognised.\r\n     *\r\n     * @see #getKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObjects.setObject#204",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.setObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public void setObject(Comparable key, Object object) {\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            KeyedObject ko = (KeyedObject) this.data.get(keyIndex);\n            ko.setObject(object);\n        }\n        else {\n            KeyedObject ko = new KeyedObject(key, object);\n            this.data.add(ko);\n        }\n    }\n",
        "begin_line": 204,
        "end_line": 214,
        "comment": "\r\n     * Replaces an existing object, or adds a new object to the collection.\r\n     * This is the same as the {@link #addObject(Comparable, Object)}\r\n     * method.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     * @param object  the object.\r\n     *\r\n     * @see #getObject(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyedObject.KeyedObject#71",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.KeyedObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public KeyedObject(Comparable key, Object object) {\n        this.key = key;\n        this.object = object;\n    }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": "\r\n     * Creates a new (key, object) pair.\r\n     *\r\n     * @param key  the key.\r\n     * @param object  the object (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0913
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultShadowGenerator.DefaultShadowGenerator#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/DefaultShadowGenerator.java",
        "class_name": "org.jfree.chart.util.DefaultShadowGenerator",
        "signature": "org.jfree.chart.util.DefaultShadowGenerator.DefaultShadowGenerator()",
        "snippet": "    public DefaultShadowGenerator() {\n        this(5, Color.black, 0.5f, 5, -Math.PI / 4);\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\n     * Creates a new instance with default attributes.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0822
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultShadowGenerator.DefaultShadowGenerator#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/DefaultShadowGenerator.java",
        "class_name": "org.jfree.chart.util.DefaultShadowGenerator",
        "signature": "org.jfree.chart.util.DefaultShadowGenerator.DefaultShadowGenerator(int, java.awt.Color, float, int, double)",
        "snippet": "    public DefaultShadowGenerator(int size, Color color, float opacity,\n            int distance, double angle) {\n        if (color == null) {\n            throw new IllegalArgumentException(\"Null 'color' argument.\");\n        }\n        this.shadowSize = size;\n        this.shadowColor = color;\n        this.shadowOpacity = opacity;\n        this.distance = distance;\n        this.angle = angle;\n    }\n",
        "begin_line": 90,
        "end_line": 100,
        "comment": "\n     * Creates a new instance with the specified attributes.\n     *\n     * @param size  the shadow size.\n     * @param color  the shadow color.\n     * @param opacity  the shadow opacity.\n     * @param distance  the shadow offset distance.\n     * @param angle  the shadow offset angle (in radians).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0819
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.indexOf#160",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.indexOf(java.lang.Object)",
        "snippet": "    protected int indexOf(Object object) {\n        for (int index = 0; index < this.size; index++) {\n            if (this.objects[index] == object) {\n                return (index);\n            }\n        }\n        return -1;\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "\n     * Returns the index of the specified object, or -1 if the object is not in\n     * the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0772
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectList.indexOf#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.indexOf(java.lang.Object)",
        "snippet": "    public int indexOf(Object object) {\n        return super.indexOf(object);\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Returns the index of the specified object, or -1 if the object is not\n     * in the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0762
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.addChangeListener#132",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.addChangeListener(org.jfree.data.event.DatasetChangeListener)",
        "snippet": "    public void addChangeListener(DatasetChangeListener listener) {\n        this.listenerList.add(DatasetChangeListener.class, listener);\n    }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\r\n     * Registers an object to receive notification of changes to the dataset.\r\n     *\r\n     * @param listener  the object to register.\r\n     *\r\n     * @see #removeChangeListener(DatasetChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.076
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.addChangeListener#2891",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.addChangeListener(org.jfree.chart.event.RendererChangeListener)",
        "snippet": "    public void addChangeListener(RendererChangeListener listener) {\n        if (listener == null) {\n            throw new IllegalArgumentException(\"Null 'listener' argument.\");\n        }\n        this.listenerList.add(RendererChangeListener.class, listener);\n    }\n",
        "begin_line": 2891,
        "end_line": 2896,
        "comment": "\r\n     * Registers an object to receive notification of changes to the renderer.\r\n     *\r\n     * @param listener  the listener (<code>null</code> not permitted).\r\n     *\r\n     * @see #removeChangeListener(RendererChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0752
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.fireChangeEvent#985",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.fireChangeEvent()",
        "snippet": "    protected void fireChangeEvent() {\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 985,
        "end_line": 987,
        "comment": "\r\n     * Sends a {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @since 1.0.10\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0747
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.fireDatasetChanged#175",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged(org.jfree.chart.event.DatasetChangeInfo)",
        "snippet": "    protected void fireDatasetChanged(DatasetChangeInfo info) {\n        notifyListeners(new DatasetChangeEvent(this, this, info));\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param info  information about the change (<code>null</code> not\r\n     *         permitted).\r\n     *\r\n     * @see #addChangeListener(DatasetChangeListener)\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0743
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetGroup.DatasetGroup#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractDataset.AbstractDataset#95",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own\r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetRenderingOrder.DatasetRenderingOrder#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder(java.lang.String)",
        "snippet": "    private DatasetRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 1
    },
    {
        "name": "AxisLocation.AxisLocation#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation(java.lang.String)",
        "snippet": "    private AxisLocation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0714
        },
        "num_failing_tests": 1
    },
    {
        "name": "PlotOrientation.PlotOrientation#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
        "snippet": "    private PlotOrientation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0705
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectList.get#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.get(int)",
        "snippet": "    public Object get(int index) {\n        return super.get(index);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the object at the specified index, if there is one, or\n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0702
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectList.set#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.set(int, java.lang.Object)",
        "snippet": "    public void set(int index, Object object) {\n        super.set(index, object);\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.07
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.setType#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setType(org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public void setType(ChartChangeEventType type) {\n        this.type = type;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\r\n     * Sets the event type.\r\n     *\r\n     * @param type  the event type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.07
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.get#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.get(int)",
        "snippet": "    protected Object get(int index) {\n        Object result = null;\n        if (index >= 0 && index < this.size) {\n            result = this.objects[index];\n        }\n        return result;\n    }\n",
        "begin_line": 108,
        "end_line": 114,
        "comment": "\n     * Returns the object at the specified index, if there is one, or\n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0684
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.getParent#455",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getParent()",
        "snippet": "    public Plot getParent() {\n        return this.parent;\n    }\n",
        "begin_line": 455,
        "end_line": 457,
        "comment": "\r\n     * Returns the parent plot (or <code>null</code> if this plot is not part\r\n     * of a combined plot).\r\n     *\r\n     * @return The parent plot.\r\n     *\r\n     * @see #setParent(Plot)\r\n     * @see #getRootPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0684
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.set#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.set(int, java.lang.Object)",
        "snippet": "    protected void set(int index, Object object) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires index >= 0.\");\n        }\n        if (index >= this.objects.length) {\n            Object[] enlarged = new Object[index + this.increment];\n            System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);\n            this.objects = enlarged;\n        }\n        this.objects[index] = object;\n        this.size = Math.max(this.size, index + 1);\n    }\n",
        "begin_line": 122,
        "end_line": 133,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0682
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.notifyListeners#966",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void notifyListeners(PlotChangeEvent event) {\n        // if the 'notify' flag has been switched to false, we don't notify\n        // the listeners\n        if (!this.notify) {\n            return;\n        }\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == PlotChangeListener.class) {\n                ((PlotChangeListener) listeners[i + 1]).plotChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 966,
        "end_line": 978,
        "comment": "\r\n     * Notifies all registered listeners that the plot has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0668
        },
        "num_failing_tests": 1
    },
    {
        "name": "PlotChangeEvent.PlotChangeEvent#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
        "snippet": "    public PlotChangeEvent(Plot plot) {\n        super(plot);\n        this.plot = plot;\n    }\n",
        "begin_line": 63,
        "end_line": 66,
        "comment": "\r\n     * Creates a new PlotChangeEvent.\r\n     *\r\n     * @param plot  the plot that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0668
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.Plot#306",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"Tahoma\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.notify = true;\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 306,
        "end_line": 327,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0662
        },
        "num_failing_tests": 1
    },
    {
        "name": "ResourceBundleWrapper.getBundle#118",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ResourceBundleWrapper.java",
        "class_name": "org.jfree.chart.util.ResourceBundleWrapper",
        "signature": "org.jfree.chart.util.ResourceBundleWrapper.getBundle(java.lang.String)",
        "snippet": "    public static final ResourceBundle getBundle(String baseName) {\n        // the noCodeBaseClassLoader is configured by a call to the\n        // removeCodeBase() method, typically in the init() method of an\n        // applet...\n        if (noCodeBaseClassLoader != null) {\n            return ResourceBundle.getBundle(baseName, Locale.getDefault(),\n                    noCodeBaseClassLoader);\n        }\n        else {\n            // standard ResourceBundle behaviour\n            return ResourceBundle.getBundle(baseName);\n        }\n    }\n",
        "begin_line": 118,
        "end_line": 130,
        "comment": "\r\n     * Finds and returns the specified resource bundle.\r\n     *\r\n     * @param baseName  the base name.\r\n     *\r\n     * @return The resource bundle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0659
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 148,
        "end_line": 156,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline\r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#194",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence,\n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 194,
        "end_line": 205,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     *\r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 287,
        "end_line": 337,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series\r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.intArray#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 516,
        "end_line": 518,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.intArray#531",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartColor.createDefaultPaintArray#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 149,
        "end_line": 187,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and\r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0658
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/event/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.event.DatasetChangeEvent",
        "signature": "org.jfree.data.event.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset, org.jfree.chart.event.DatasetChangeInfo)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset,\n            DatasetChangeInfo info) {\n        super(source);\n        if (info == null) {\n            throw new IllegalArgumentException(\"Null 'info' argument.\");\n        }\n        this.dataset = dataset;\n        this.info = info;\n    }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the\r\n     * {@link Plot} class.  The dataset can be <code>null</code> (in this case\r\n     * the source will be the {@link Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     * @param info  information about the change (<code>null</code> not\r\n     *         permitted).\r\n     *\r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0647
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryItemRenderer.AbstractCategoryItemRenderer#249",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.AbstractCategoryItemRenderer()",
        "snippet": "    protected AbstractCategoryItemRenderer() {\n        this.itemLabelGeneratorList = new ObjectList();\n        this.toolTipGeneratorList = new ObjectList();\n        this.urlGeneratorList = new ObjectList();\n        this.legendItemLabelGenerator\n                = new StandardCategorySeriesLabelGenerator();\n        this.backgroundAnnotations = new ArrayList();\n        this.foregroundAnnotations = new ArrayList();\n    }\n",
        "begin_line": 249,
        "end_line": 257,
        "comment": "\r\n     * Creates a new renderer with no tool tip generator and no URL generator.\r\n     * The defaults (no tool tip or URL generators) have been chosen to\r\n     * minimise the processing required to generate a default chart.  If you\r\n     * require tool tips or URLs, then you can easily add the required\r\n     * generators.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0638
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator()",
        "snippet": "    public StandardCategorySeriesLabelGenerator() {\n        this(DEFAULT_LABEL_FORMAT);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Creates a default series label generator (uses\r\n     * {@link #DEFAULT_LABEL_FORMAT}).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0638
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator(java.lang.String)",
        "snippet": "    public StandardCategorySeriesLabelGenerator(String format) {\n        if (format == null) {\n            throw new IllegalArgumentException(\"Null 'format' argument.\");\n        }\n        this.formatPattern = format;\n    }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\r\n     * Creates a new series label generator.\r\n     *\r\n     * @param format  the format pattern (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0638
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.RectangleInsets#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom,\n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);\n    }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     *\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0632
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.RectangleInsets#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left,\n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 115,
        "end_line": 125,
        "comment": "\n     * Creates a new instance.\n     *\n     * @param unitType  absolute or relative units (<code>null</code> not\n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0632
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnitType.UnitType#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0626
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.size#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.size()",
        "snippet": "    public int size() {\n        return this.size;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0557
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrokeList.StrokeList#57",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.StrokeList()",
        "snippet": "    public StrokeList() {\n        super();\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "ShapeList.ShapeList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.ShapeList()",
        "snippet": "    public ShapeList() {\n        super();\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintList.PaintList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.PaintList()",
        "snippet": "    public PaintList() {\n        super();\n    }\n",
        "begin_line": 58,
        "end_line": 60,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanList.BooleanList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.BooleanList()",
        "snippet": "    public BooleanList() {\n    }\n",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "RenderAttributes.RenderAttributes#119",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/RenderAttributes.java",
        "class_name": "org.jfree.chart.renderer.RenderAttributes",
        "signature": "org.jfree.chart.renderer.RenderAttributes.RenderAttributes()",
        "snippet": "    public RenderAttributes() {\n        this(true);\n    }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n     * Creates a new instance.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "RenderAttributes.RenderAttributes#123",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/RenderAttributes.java",
        "class_name": "org.jfree.chart.renderer.RenderAttributes",
        "signature": "org.jfree.chart.renderer.RenderAttributes.RenderAttributes(boolean)",
        "snippet": "    public RenderAttributes(boolean allowNull) {\n        this.paintList = new PaintList();\n        this.defaultPaint = allowNull ? null : Color.BLACK;\n        this.strokeList = new StrokeList();\n        this.defaultStroke = allowNull ? null : new BasicStroke(1.0f);\n        this.fillPaintList = new PaintList();\n        this.defaultFillPaint = allowNull ? null : Color.BLACK;\n        this.outlinePaintList = new PaintList();\n        this.defaultOutlinePaint = allowNull ? null : Color.BLACK;\n        this.shapeList = new ShapeList();\n    }\n",
        "begin_line": 123,
        "end_line": 133,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "RenderAttributes.setDefaultFillPaint#264",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/RenderAttributes.java",
        "class_name": "org.jfree.chart.renderer.RenderAttributes",
        "signature": "org.jfree.chart.renderer.RenderAttributes.setDefaultFillPaint(java.awt.Paint)",
        "snippet": "    public void setDefaultFillPaint(Paint paint) {\n        if (paint == null && !this.allowNull) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.defaultFillPaint = paint;\n    }\n",
        "begin_line": 264,
        "end_line": 269,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.AbstractRenderer#396",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.AbstractRenderer()",
        "snippet": "    public AbstractRenderer() {\n\n        this.seriesVisibleList = new BooleanList();\n        this.baseSeriesVisible = true;\n\n        this.seriesVisibleInLegendList = new BooleanList();\n        this.baseSeriesVisibleInLegend = true;\n\n        this.paintList = new PaintList();\n        this.basePaint = DEFAULT_PAINT;\n        this.autoPopulateSeriesPaint = true;\n\n        this.fillPaintList = new PaintList();\n        this.baseFillPaint = Color.white;\n        this.autoPopulateSeriesFillPaint = false;\n\n        this.outlinePaintList = new PaintList();\n        this.baseOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.autoPopulateSeriesOutlinePaint = false;\n\n        this.strokeList = new StrokeList();\n        this.baseStroke = DEFAULT_STROKE;\n        this.autoPopulateSeriesStroke = true;\n\n        this.outlineStrokeList = new StrokeList();\n        this.baseOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.autoPopulateSeriesOutlineStroke = false;\n\n        this.shapeList = new ShapeList();\n        this.baseShape = DEFAULT_SHAPE;\n        this.autoPopulateSeriesShape = true;\n\n        this.itemLabelsVisibleList = new BooleanList();\n        this.baseItemLabelsVisible = false;\n\n        this.itemLabelFontList = new ObjectList();\n        this.baseItemLabelFont = new Font(\"Tahoma\", Font.PLAIN, 10);\n\n        this.itemLabelPaintList = new PaintList();\n        this.baseItemLabelPaint = Color.black;\n\n        this.positiveItemLabelPositionList = new ObjectList();\n        this.basePositiveItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER);\n\n        this.negativeItemLabelPositionList = new ObjectList();\n        this.baseNegativeItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER);\n\n        this.createEntitiesList = new BooleanList();\n        this.baseCreateEntities = true;\n\n        this.defaultEntityRadius = 3;\n\n        this.legendShapeList = new ShapeList();\n        this.baseLegendShape = null;\n\n        this.treatLegendShapeAsLine = false;\n\n        this.legendTextFont = new ObjectList();\n        this.baseLegendTextFont = null;\n\n        this.legendTextPaint = new PaintList();\n        this.baseLegendTextPaint = null;\n\n        this.listenerList = new EventListenerList();\n\n        this.selectedItemAttributes = new RenderAttributes();\n        this.selectedItemAttributes.setDefaultFillPaint(Color.WHITE);\n    }\n",
        "begin_line": 396,
        "end_line": 465,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#88",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,\n                             TextAnchor textAnchor) {\n        this(itemLabelAnchor, textAnchor, TextAnchor.CENTER, 0.0);\n    }\n",
        "begin_line": 88,
        "end_line": 91,
        "comment": "\r\n     * Creates a new position record (with zero rotation).\r\n     *\r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not\r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor,\n                             TextAnchor textAnchor,\n                             TextAnchor rotationAnchor,\n                             double angle) {\n\n        if (itemLabelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'itemLabelAnchor' argument.\");\n        }\n        if (textAnchor == null) {\n            throw new IllegalArgumentException(\"Null 'textAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n\n        this.itemLabelAnchor = itemLabelAnchor;\n        this.textAnchor = textAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n\n    }\n",
        "begin_line": 106,
        "end_line": 128,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point\r\n     * relative to the data item (dot, bar or other visual item) on a chart.\r\n     * The item label is aligned by aligning the text anchor with the\r\n     * item label anchor.\r\n     *\r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not\r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not\r\n     *                        permitted).\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelAnchor.ItemLabelAnchor#167",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.ItemLabelAnchor(java.lang.String)",
        "snippet": "    private ItemLabelAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0535
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextAnchor.TextAnchor#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.052
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title,\r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart,\n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectList.ObjectList#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 58,
        "end_line": 59,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0498
        },
        "num_failing_tests": 1
    }
]