[
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AbstractCategoryItemRendererTests.class);\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 82,col 9)-(line 82,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BarRenderer r1 = new BarRenderer();\n        BarRenderer r2 = new BarRenderer();\n        assertEquals(r1, r2);\n\n        // the plot field is NOT tested\n\n        // toolTipGeneratorList\n        r1.setSeriesToolTipGenerator(1, new StandardCategoryToolTipGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesToolTipGenerator(1, new StandardCategoryToolTipGenerator());\n        assertTrue(r1.equals(r2));\n\n        // baseToolTipGenerator\n        r1.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(\"{2}\",\n                NumberFormat.getInstance()));\n        assertFalse(r1.equals(r2));\n        r2.setBaseToolTipGenerator(new StandardCategoryToolTipGenerator(\"{2}\",\n                NumberFormat.getInstance()));\n        assertTrue(r1.equals(r2));\n\n        // itemLabelGeneratorList\n        r1.setSeriesItemLabelGenerator(1,\n                new StandardCategoryItemLabelGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesItemLabelGenerator(1,\n                new StandardCategoryItemLabelGenerator());\n        assertTrue(r1.equals(r2));\n\n        // baseItemLabelGenerator\n        r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(\n                \"{2}\", NumberFormat.getInstance()));\n        assertFalse(r1.equals(r2));\n        r2.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(\n                \"{2}\", NumberFormat.getInstance()));\n        assertTrue(r1.equals(r2));\n\n        // urlGeneratorList\n        r1.setSeriesURLGenerator(1, new StandardCategoryURLGenerator());\n        assertFalse(r1.equals(r2));\n        r2.setSeriesURLGenerator(1, new StandardCategoryURLGenerator());\n        assertTrue(r1.equals(r2));\n\n        // baseItemURLGenerator\n        r1.setBaseURLGenerator(new StandardCategoryURLGenerator(\n                \"abc.html\"));\n        assertFalse(r1.equals(r2));\n        r2.setBaseURLGenerator(new StandardCategoryURLGenerator(\n                \"abc.html\"));\n        assertTrue(r1.equals(r2));\n\n        // legendItemLabelGenerator\n        r1.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator(\n                \"XYZ\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemLabelGenerator(new StandardCategorySeriesLabelGenerator(\n                \"XYZ\"));\n        assertTrue(r1.equals(r2));\n\n        // legendItemToolTipGenerator\n        r1.setLegendItemToolTipGenerator(\n                new StandardCategorySeriesLabelGenerator(\"ToolTip\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemToolTipGenerator(\n                new StandardCategorySeriesLabelGenerator(\"ToolTip\"));\n        assertTrue(r1.equals(r2));\n\n        // legendItemURLGenerator\n        r1.setLegendItemURLGenerator(\n                new StandardCategorySeriesLabelGenerator(\"URL\"));\n        assertFalse(r1.equals(r2));\n        r2.setLegendItemURLGenerator(\n                new StandardCategorySeriesLabelGenerator(\"URL\"));\n        assertTrue(r1.equals(r2));\n\n        // background annotation\n        r1.addAnnotation(new CategoryTextAnnotation(\"ABC\", \"A\", 2.0),\n                Layer.BACKGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new CategoryTextAnnotation(\"ABC\", \"A\", 2.0),\n                Layer.BACKGROUND);\n        assertTrue(r1.equals(r2));\n\n        // foreground annotation\n        r1.addAnnotation(new CategoryTextAnnotation(\"DEF\", \"B\", 4.0),\n                Layer.FOREGROUND);\n        assertFalse(r1.equals(r2));\n        r2.addAnnotation(new CategoryTextAnnotation(\"DEF\", \"B\", 4.0),\n                Layer.FOREGROUND);\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 88,
        "end_line": 178,
        "comment": "\n     * Checks that all fields are distinguished.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 43)",
            "(line 90,col 9)-(line 90,col 43)",
            "(line 91,col 9)-(line 91,col 29)",
            "(line 96,col 9)-(line 96,col 80)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 80)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 102,col 9)-(line 103,col 45)",
            "(line 104,col 9)-(line 104,col 35)",
            "(line 105,col 9)-(line 106,col 45)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 110,col 9)-(line 111,col 58)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 114,col 58)",
            "(line 115,col 9)-(line 115,col 34)",
            "(line 118,col 9)-(line 119,col 52)",
            "(line 120,col 9)-(line 120,col 35)",
            "(line 121,col 9)-(line 122,col 52)",
            "(line 123,col 9)-(line 123,col 34)",
            "(line 126,col 9)-(line 126,col 72)",
            "(line 127,col 9)-(line 127,col 35)",
            "(line 128,col 9)-(line 128,col 72)",
            "(line 129,col 9)-(line 129,col 34)",
            "(line 132,col 9)-(line 133,col 29)",
            "(line 134,col 9)-(line 134,col 35)",
            "(line 135,col 9)-(line 136,col 29)",
            "(line 137,col 9)-(line 137,col 34)",
            "(line 140,col 9)-(line 141,col 24)",
            "(line 142,col 9)-(line 142,col 35)",
            "(line 143,col 9)-(line 144,col 24)",
            "(line 145,col 9)-(line 145,col 34)",
            "(line 148,col 9)-(line 149,col 69)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 152,col 69)",
            "(line 153,col 9)-(line 153,col 34)",
            "(line 156,col 9)-(line 157,col 65)",
            "(line 158,col 9)-(line 158,col 35)",
            "(line 159,col 9)-(line 160,col 65)",
            "(line 161,col 9)-(line 161,col 34)",
            "(line 164,col 9)-(line 165,col 34)",
            "(line 166,col 9)-(line 166,col 35)",
            "(line 167,col 9)-(line 168,col 34)",
            "(line 169,col 9)-(line 169,col 34)",
            "(line 172,col 9)-(line 173,col 34)",
            "(line 174,col 9)-(line 174,col 35)",
            "(line 175,col 9)-(line 176,col 34)",
            "(line 177,col 9)-(line 177,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning1()",
        "snippet": "    public void testCloning1() {\n        AbstractCategoryItemRenderer r1 = new BarRenderer();\n        r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());\n        AbstractCategoryItemRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1 = new BarRenderer();\n        r1.setSeriesItemLabelGenerator(0,\n                new StandardCategoryItemLabelGenerator());\n        r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1 = new BarRenderer();\n        r1.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());\n        r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 183,
        "end_line": 223,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 184,col 9)-(line 184,col 60)",
            "(line 185,col 9)-(line 185,col 79)",
            "(line 186,col 9)-(line 186,col 47)",
            "(line 187,col 9)-(line 192,col 9)",
            "(line 193,col 9)-(line 193,col 29)",
            "(line 194,col 9)-(line 194,col 51)",
            "(line 195,col 9)-(line 195,col 34)",
            "(line 197,col 9)-(line 197,col 31)",
            "(line 198,col 9)-(line 199,col 58)",
            "(line 200,col 9)-(line 200,col 18)",
            "(line 201,col 9)-(line 206,col 9)",
            "(line 207,col 9)-(line 207,col 29)",
            "(line 208,col 9)-(line 208,col 51)",
            "(line 209,col 9)-(line 209,col 34)",
            "(line 211,col 9)-(line 211,col 31)",
            "(line 212,col 9)-(line 212,col 79)",
            "(line 213,col 9)-(line 213,col 18)",
            "(line 214,col 9)-(line 219,col 9)",
            "(line 220,col 9)-(line 220,col 29)",
            "(line 221,col 9)-(line 221,col 51)",
            "(line 222,col 9)-(line 222,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning2()",
        "snippet": "    public void testCloning2() {\n        BarRenderer r1 = new BarRenderer();\n        r1.setBaseItemLabelGenerator(new IntervalCategoryItemLabelGenerator());\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1 = new BarRenderer();\n        r1.setSeriesItemLabelGenerator(0,\n                new IntervalCategoryItemLabelGenerator());\n        r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        r1 = new BarRenderer();\n        r1.setBaseItemLabelGenerator(new IntervalCategoryItemLabelGenerator());\n        r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 228,
        "end_line": 268,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 43)",
            "(line 230,col 9)-(line 230,col 79)",
            "(line 231,col 9)-(line 231,col 30)",
            "(line 232,col 9)-(line 237,col 9)",
            "(line 238,col 9)-(line 238,col 29)",
            "(line 239,col 9)-(line 239,col 51)",
            "(line 240,col 9)-(line 240,col 34)",
            "(line 242,col 9)-(line 242,col 31)",
            "(line 243,col 9)-(line 244,col 58)",
            "(line 245,col 9)-(line 245,col 18)",
            "(line 246,col 9)-(line 251,col 9)",
            "(line 252,col 9)-(line 252,col 29)",
            "(line 253,col 9)-(line 253,col 51)",
            "(line 254,col 9)-(line 254,col 34)",
            "(line 256,col 9)-(line 256,col 31)",
            "(line 257,col 9)-(line 257,col 79)",
            "(line 258,col 9)-(line 258,col 18)",
            "(line 259,col 9)-(line 264,col 9)",
            "(line 265,col 9)-(line 265,col 29)",
            "(line 266,col 9)-(line 266,col 51)",
            "(line 267,col 9)-(line 267,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemLabelGenerator()",
        "snippet": "    public void testCloning_LegendItemLabelGenerator() {\n        StandardCategorySeriesLabelGenerator generator\n                = new StandardCategorySeriesLabelGenerator(\"Series {0}\");\n        BarRenderer r1 = new BarRenderer();\n        r1.setLegendItemLabelGenerator(generator);\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemLabelGenerator()\n                != r2.getLegendItemLabelGenerator());\n    }\n",
        "begin_line": 273,
        "end_line": 292,
        "comment": "\n     * Check that the legendItemLabelGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 274,col 9)-(line 275,col 73)",
            "(line 276,col 9)-(line 276,col 43)",
            "(line 277,col 9)-(line 277,col 50)",
            "(line 278,col 9)-(line 278,col 30)",
            "(line 279,col 9)-(line 284,col 9)",
            "(line 285,col 9)-(line 285,col 29)",
            "(line 286,col 9)-(line 286,col 51)",
            "(line 287,col 9)-(line 287,col 34)",
            "(line 290,col 9)-(line 291,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemToolTipGenerator()",
        "snippet": "    public void testCloning_LegendItemToolTipGenerator() {\n        StandardCategorySeriesLabelGenerator generator\n                = new StandardCategorySeriesLabelGenerator(\"Series {0}\");\n        BarRenderer r1 = new BarRenderer();\n        r1.setLegendItemToolTipGenerator(generator);\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemToolTipGenerator()\n                != r2.getLegendItemToolTipGenerator());\n    }\n",
        "begin_line": 297,
        "end_line": 316,
        "comment": "\n     * Check that the legendItemToolTipGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 298,col 9)-(line 299,col 73)",
            "(line 300,col 9)-(line 300,col 43)",
            "(line 301,col 9)-(line 301,col 52)",
            "(line 302,col 9)-(line 302,col 30)",
            "(line 303,col 9)-(line 308,col 9)",
            "(line 309,col 9)-(line 309,col 29)",
            "(line 310,col 9)-(line 310,col 51)",
            "(line 311,col 9)-(line 311,col 34)",
            "(line 314,col 9)-(line 315,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testCloning_LegendItemURLGenerator()",
        "snippet": "    public void testCloning_LegendItemURLGenerator() {\n        StandardCategorySeriesLabelGenerator generator\n                = new StandardCategorySeriesLabelGenerator(\"Series {0}\");\n        BarRenderer r1 = new BarRenderer();\n        r1.setLegendItemURLGenerator(generator);\n        BarRenderer r2 = null;\n        try {\n            r2 = (BarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n\n        // check that the generator has been cloned\n        assertTrue(r1.getLegendItemURLGenerator()\n                != r2.getLegendItemURLGenerator());\n    }\n",
        "begin_line": 321,
        "end_line": 340,
        "comment": "\n     * Check that the legendItemURLGenerator is cloned.\n     ",
        "child_ranges": [
            "(line 322,col 9)-(line 323,col 73)",
            "(line 324,col 9)-(line 324,col 43)",
            "(line 325,col 9)-(line 325,col 48)",
            "(line 326,col 9)-(line 326,col 30)",
            "(line 327,col 9)-(line 332,col 9)",
            "(line 333,col 9)-(line 333,col 29)",
            "(line 334,col 9)-(line 334,col 51)",
            "(line 335,col 9)-(line 335,col 34)",
            "(line 338,col 9)-(line 339,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testGetSeriesItemLabelGenerator()",
        "snippet": "    public void testGetSeriesItemLabelGenerator() {\n        CategoryItemRenderer r = new BarRenderer();\n        assertNull(r.getSeriesItemLabelGenerator(2));\n        r.setSeriesItemLabelGenerator(2,\n                new StandardCategoryItemLabelGenerator());\n        assertNotNull(r.getSeriesItemLabelGenerator(2));\n        r.setSeriesItemLabelGenerator(2, null);\n        assertNull(r.getSeriesItemLabelGenerator(2));\n        r.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator());\n        assertNull(r.getSeriesItemLabelGenerator(2));\n    }\n",
        "begin_line": 346,
        "end_line": 356,
        "comment": "\n     * Check that the getSeriesItemLabelGenerator() method behaves as\n     * expected.\n     ",
        "child_ranges": [
            "(line 347,col 9)-(line 347,col 51)",
            "(line 348,col 9)-(line 348,col 53)",
            "(line 349,col 9)-(line 350,col 58)",
            "(line 351,col 9)-(line 351,col 56)",
            "(line 352,col 9)-(line 352,col 47)",
            "(line 353,col 9)-(line 353,col 53)",
            "(line 354,col 9)-(line 354,col 78)",
            "(line 355,col 9)-(line 355,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testGetSeriesURLGenerator()",
        "snippet": "    public void testGetSeriesURLGenerator() {\n        CategoryItemRenderer r = new BarRenderer();\n        assertNull(r.getSeriesURLGenerator(2));\n        r.setSeriesURLGenerator(2, new StandardCategoryURLGenerator());\n        assertNotNull(r.getSeriesURLGenerator(2));\n        r.setSeriesURLGenerator(2, null);\n        assertNull(r.getSeriesURLGenerator(2));\n        r.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        assertNull(r.getSeriesURLGenerator(2));\n    }\n",
        "begin_line": 361,
        "end_line": 370,
        "comment": "\n     * Check that the getSeriesURLGenerator() method behaves as expected.\n     ",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 51)",
            "(line 363,col 9)-(line 363,col 47)",
            "(line 364,col 9)-(line 364,col 71)",
            "(line 365,col 9)-(line 365,col 50)",
            "(line 366,col 9)-(line 366,col 41)",
            "(line 367,col 9)-(line 367,col 47)",
            "(line 368,col 9)-(line 368,col 66)",
            "(line 369,col 9)-(line 369,col 47)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.testFindRangeBounds()",
        "snippet": "    public void testFindRangeBounds() {\n        AbstractCategoryItemRenderer r = new LineAndShapeRenderer();\n        assertNull(r.findRangeBounds(null));\n\n        // an empty dataset should return a null range\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        assertNull(r.findRangeBounds(dataset));\n\n        dataset.addValue(1.0, \"R1\", \"C1\");\n        assertEquals(new Range(1.0, 1.0), r.findRangeBounds(dataset));\n\n        dataset.addValue(-2.0, \"R1\", \"C2\");\n        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));\n\n        dataset.addValue(null, \"R1\", \"C3\");\n        assertEquals(new Range(-2.0, 1.0), r.findRangeBounds(dataset));\n    }\n",
        "begin_line": 375,
        "end_line": 391,
        "comment": "\n     * Some checks for the findRangeBounds() method.\n     ",
        "child_ranges": [
            "(line 376,col 9)-(line 376,col 68)",
            "(line 377,col 9)-(line 377,col 44)",
            "(line 380,col 9)-(line 380,col 70)",
            "(line 381,col 9)-(line 381,col 47)",
            "(line 383,col 9)-(line 383,col 42)",
            "(line 384,col 9)-(line 384,col 70)",
            "(line 386,col 9)-(line 386,col 43)",
            "(line 387,col 9)-(line 387,col 71)",
            "(line 389,col 9)-(line 389,col 43)",
            "(line 390,col 9)-(line 390,col 71)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.test2947660()",
        "snippet": "    public void test2947660() {\n        AbstractCategoryItemRenderer r = new LineAndShapeRenderer();\n        assertNotNull(r.getLegendItems());\n        assertEquals(0, r.getLegendItems().getItemCount());\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        CategoryPlot plot = new CategoryPlot();\n        plot.setDataset(dataset);\n        plot.setRenderer(r);\n        assertEquals(0, r.getLegendItems().getItemCount());\n\n        dataset.addValue(1.0, \"S1\", \"C1\");\n        LegendItemCollection lic = r.getLegendItems();\n        assertEquals(1, lic.getItemCount());\n        assertEquals(\"S1\", lic.get(0).getLabel());\n    }\n",
        "begin_line": 396,
        "end_line": 411,
        "comment": "\n     * A test that reproduces the problem reported in bug 2947660.\n     ",
        "child_ranges": [
            "(line 397,col 9)-(line 397,col 68)",
            "(line 398,col 9)-(line 398,col 42)",
            "(line 399,col 9)-(line 399,col 59)",
            "(line 401,col 9)-(line 401,col 70)",
            "(line 402,col 9)-(line 402,col 47)",
            "(line 403,col 9)-(line 403,col 33)",
            "(line 404,col 9)-(line 404,col 28)",
            "(line 405,col 9)-(line 405,col 59)",
            "(line 407,col 9)-(line 407,col 42)",
            "(line 408,col 9)-(line 408,col 54)",
            "(line 409,col 9)-(line 409,col 44)",
            "(line 410,col 9)-(line 410,col 50)"
        ]
    }
]