[
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testNextGeneration()",
        "snippet": "    @Test\n    public void testNextGeneration() {\n        ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);\n\n        for (int i=0; i<pop.getPopulationLimit(); i++) {\n            pop.addChromosome(new DummyChromosome());\n        }\n\n        Population nextGeneration = pop.nextGeneration();\n\n        Assert.assertEquals(20, nextGeneration.getPopulationSize());\n    }\n",
        "begin_line": 31,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 78)",
            "(line 35,col 9)-(line 37,col 9)",
            "(line 39,col 9)-(line 39,col 57)",
            "(line 41,col 9)-(line 41,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testSetElitismRate()",
        "snippet": "    @Test\n    public void testSetElitismRate() {\n        final double rate = 0.25;\n        final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);\n        pop.setElitismRate(rate);\n        Assert.assertEquals(rate, pop.getElitismRate(), 1e-6);\n    }\n",
        "begin_line": 44,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 46,col 33)",
            "(line 47,col 9)-(line 47,col 84)",
            "(line 48,col 9)-(line 48,col 33)",
            "(line 49,col 9)-(line 49,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testSetElitismRateTooLow()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testSetElitismRateTooLow() {\n        final double rate = -0.25;\n        final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);\n        pop.setElitismRate(rate);\n    }\n",
        "begin_line": 52,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 34)",
            "(line 55,col 9)-(line 55,col 84)",
            "(line 56,col 9)-(line 56,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testSetElitismRateTooHigh()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testSetElitismRateTooHigh() {\n        final double rate = 1.25;\n        final ElitisticListPopulation pop = new ElitisticListPopulation(100, 0.203);\n        pop.setElitismRate(rate);\n    }\n",
        "begin_line": 59,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 33)",
            "(line 62,col 9)-(line 62,col 84)",
            "(line 63,col 9)-(line 63,col 33)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooLow()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testConstructorTooLow() {\n        final double rate = -0.25;\n        new ElitisticListPopulation(100, rate);\n    }\n",
        "begin_line": 66,
        "end_line": 70,
        "comment": "",
        "child_ranges": [
            "(line 68,col 9)-(line 68,col 34)",
            "(line 69,col 9)-(line 69,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testConstructorTooHigh()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testConstructorTooHigh() {\n        final double rate = 1.25;\n        new ElitisticListPopulation(100, rate);\n    }\n",
        "begin_line": 72,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 33)",
            "(line 75,col 9)-(line 75,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooLow()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testChromosomeListConstructorTooLow() {\n        final List<Chromosome> chromosomes = Collections.emptyList();\n        final double rate = -0.25;\n        new ElitisticListPopulation(chromosomes, 100, rate);\n    }\n",
        "begin_line": 78,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 69)",
            "(line 81,col 9)-(line 81,col 34)",
            "(line 82,col 9)-(line 82,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.testChromosomeListConstructorTooHigh()",
        "snippet": "    @Test(expected = OutOfRangeException.class)\n    public void testChromosomeListConstructorTooHigh() {\n        final List<Chromosome> chromosomes = Collections.emptyList();\n        final double rate = 1.25;\n        new ElitisticListPopulation(chromosomes, 100, rate);\n    }\n",
        "begin_line": 85,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 69)",
            "(line 88,col 9)-(line 88,col 33)",
            "(line 89,col 9)-(line 89,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.DummyChromosome.DummyChromosome()",
        "snippet": "        public DummyChromosome() {\n            this.fitness = counter;\n            counter++;\n        }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 96,col 13)-(line 96,col 35)",
            "(line 97,col 13)-(line 97,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.genetics.ElitisticListPopulationTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/genetics/ElitisticListPopulationTest.java",
        "signature": "org.apache.commons.math3.genetics.ElitisticListPopulationTest.DummyChromosome.fitness()",
        "snippet": "        public double fitness() {\n            return this.fitness;\n        }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 13)-(line 101,col 32)"
        ]
    }
]