[
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    mode = LanguageMode.ECMASCRIPT3;\n    isIdeMode = false;\n  }\n",
        "begin_line": 52,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 18)",
            "(line 55,col 5)-(line 55,col 36)",
            "(line 56,col 5)-(line 56,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAssign1()",
        "snippet": "  public void testLinenoCharnoAssign1() throws Exception {\n    Node assign = parse(\"a = b\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ASSIGN, assign.getType());\n    assertEquals(1, assign.getLineno());\n    assertEquals(0, assign.getCharno());\n  }\n",
        "begin_line": 59,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 65)",
            "(line 62,col 5)-(line 62,col 49)",
            "(line 63,col 5)-(line 63,col 40)",
            "(line 64,col 5)-(line 64,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAssign2()",
        "snippet": "  public void testLinenoCharnoAssign2() throws Exception {\n    Node assign = parse(\"\\n a.g.h.k    =  45\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ASSIGN, assign.getType());\n    assertEquals(2, assign.getLineno());\n    assertEquals(1, assign.getCharno());\n  }\n",
        "begin_line": 67,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 79)",
            "(line 70,col 5)-(line 70,col 49)",
            "(line 71,col 5)-(line 71,col 40)",
            "(line 72,col 5)-(line 72,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoCall()",
        "snippet": "  public void testLinenoCharnoCall() throws Exception {\n    Node call = parse(\"\\n foo(123);\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.CALL, call.getType());\n    assertEquals(2, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 75,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 70)",
            "(line 78,col 5)-(line 78,col 45)",
            "(line 79,col 5)-(line 79,col 38)",
            "(line 80,col 5)-(line 80,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetProp1()",
        "snippet": "  public void testLinenoCharnoGetProp1() throws Exception {\n    Node getprop = parse(\"\\n foo.bar\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETPROP, getprop.getType());\n    assertEquals(2, getprop.getLineno());\n    assertEquals(1, getprop.getCharno());\n\n    Node name = getprop.getFirstChild().getNext();\n    assertEquals(Token.STRING, name.getType());\n    assertEquals(2, name.getLineno());\n    assertEquals(5, name.getCharno());\n  }\n",
        "begin_line": 83,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 84,col 5)-(line 84,col 71)",
            "(line 86,col 5)-(line 86,col 51)",
            "(line 87,col 5)-(line 87,col 41)",
            "(line 88,col 5)-(line 88,col 41)",
            "(line 90,col 5)-(line 90,col 50)",
            "(line 91,col 5)-(line 91,col 47)",
            "(line 92,col 5)-(line 92,col 38)",
            "(line 93,col 5)-(line 93,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetProp2()",
        "snippet": "  public void testLinenoCharnoGetProp2() throws Exception {\n    Node getprop = parse(\"\\n foo.\\nbar\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETPROP, getprop.getType());\n    assertEquals(2, getprop.getLineno());\n    assertEquals(1, getprop.getCharno());\n\n    Node name = getprop.getFirstChild().getNext();\n    assertEquals(Token.STRING, name.getType());\n    assertEquals(3, name.getLineno());\n    assertEquals(0, name.getCharno());\n  }\n",
        "begin_line": 96,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 73)",
            "(line 99,col 5)-(line 99,col 51)",
            "(line 100,col 5)-(line 100,col 41)",
            "(line 101,col 5)-(line 101,col 41)",
            "(line 103,col 5)-(line 103,col 50)",
            "(line 104,col 5)-(line 104,col 47)",
            "(line 105,col 5)-(line 105,col 38)",
            "(line 106,col 5)-(line 106,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem1()",
        "snippet": "  public void testLinenoCharnoGetelem1() throws Exception {\n    Node call = parse(\"\\n foo[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(2, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 109,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 110,col 5)-(line 110,col 69)",
            "(line 112,col 5)-(line 112,col 48)",
            "(line 113,col 5)-(line 113,col 38)",
            "(line 114,col 5)-(line 114,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem2()",
        "snippet": "  public void testLinenoCharnoGetelem2() throws Exception {\n    Node call = parse(\"\\n   \\n foo()[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(3, call.getLineno());\n    assertEquals(1, call.getCharno());\n  }\n",
        "begin_line": 117,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 118,col 76)",
            "(line 120,col 5)-(line 120,col 48)",
            "(line 121,col 5)-(line 121,col 38)",
            "(line 122,col 5)-(line 122,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGetelem3()",
        "snippet": "  public void testLinenoCharnoGetelem3() throws Exception {\n    Node call = parse(\"\\n   \\n (8 + kl)[123]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.GETELEM, call.getType());\n    assertEquals(3, call.getLineno());\n    assertEquals(2, call.getCharno());\n  }\n",
        "begin_line": 125,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 79)",
            "(line 128,col 5)-(line 128,col 48)",
            "(line 129,col 5)-(line 129,col 38)",
            "(line 130,col 5)-(line 130,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoForComparison()",
        "snippet": "  public void testLinenoCharnoForComparison() throws Exception {\n    Node lt =\n      parse(\"for (; i < j;){}\").getFirstChild().getFirstChild().getNext();\n\n    assertEquals(Token.LT, lt.getType());\n    assertEquals(1, lt.getLineno());\n    assertEquals(7, lt.getCharno());\n  }\n",
        "begin_line": 133,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 135,col 74)",
            "(line 137,col 5)-(line 137,col 41)",
            "(line 138,col 5)-(line 138,col 36)",
            "(line 139,col 5)-(line 139,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoHook()",
        "snippet": "  public void testLinenoCharnoHook() throws Exception {\n    Node n = parse(\"\\n a ? 9 : 0\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.HOOK, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(1, n.getCharno());\n  }\n",
        "begin_line": 142,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 67)",
            "(line 145,col 5)-(line 145,col 42)",
            "(line 146,col 5)-(line 146,col 35)",
            "(line 147,col 5)-(line 147,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoArrayLiteral()",
        "snippet": "  public void testLinenoCharnoArrayLiteral() throws Exception {\n    Node n = parse(\"\\n  [8, 9]\").getFirstChild().getFirstChild();\n\n    assertEquals(Token.ARRAYLIT, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(2, n.getCharno());\n\n    n = n.getFirstChild();\n\n    assertEquals(Token.NUMBER, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(3, n.getCharno());\n\n    n = n.getNext();\n\n    assertEquals(Token.NUMBER, n.getType());\n    assertEquals(2, n.getLineno());\n    assertEquals(6, n.getCharno());\n  }\n",
        "begin_line": 150,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 151,col 5)-(line 151,col 65)",
            "(line 153,col 5)-(line 153,col 46)",
            "(line 154,col 5)-(line 154,col 35)",
            "(line 155,col 5)-(line 155,col 35)",
            "(line 157,col 5)-(line 157,col 26)",
            "(line 159,col 5)-(line 159,col 44)",
            "(line 160,col 5)-(line 160,col 35)",
            "(line 161,col 5)-(line 161,col 35)",
            "(line 163,col 5)-(line 163,col 20)",
            "(line 165,col 5)-(line 165,col 44)",
            "(line 166,col 5)-(line 166,col 35)",
            "(line 167,col 5)-(line 167,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoObjectLiteral()",
        "snippet": "  public void testLinenoCharnoObjectLiteral() throws Exception {\n    Node n = parse(\"\\n\\n var a = {a:0\\n,b :1};\")\n        .getFirstChild().getFirstChild().getFirstChild();\n\n    assertEquals(Token.OBJECTLIT, n.getType());\n    assertEquals(3, n.getLineno());\n    assertEquals(9, n.getCharno());\n\n    Node key = n.getFirstChild();\n\n    assertEquals(Token.STRING, key.getType());\n    assertEquals(3, key.getLineno());\n    assertEquals(10, key.getCharno());\n\n    Node value = key.getFirstChild();\n\n    assertEquals(Token.NUMBER, value.getType());\n    assertEquals(3, value.getLineno());\n    assertEquals(12, value.getCharno());\n\n    key = key.getNext();\n\n    assertEquals(Token.STRING, key.getType());\n    assertEquals(4, key.getLineno());\n    assertEquals(1, key.getCharno());\n\n    value = key.getFirstChild();\n\n    assertEquals(Token.NUMBER, value.getType());\n    assertEquals(4, value.getLineno());\n    assertEquals(4, value.getCharno());\n  }\n",
        "begin_line": 170,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 172,col 57)",
            "(line 174,col 5)-(line 174,col 47)",
            "(line 175,col 5)-(line 175,col 35)",
            "(line 176,col 5)-(line 176,col 35)",
            "(line 178,col 5)-(line 178,col 33)",
            "(line 180,col 5)-(line 180,col 46)",
            "(line 181,col 5)-(line 181,col 37)",
            "(line 182,col 5)-(line 182,col 38)",
            "(line 184,col 5)-(line 184,col 37)",
            "(line 186,col 5)-(line 186,col 48)",
            "(line 187,col 5)-(line 187,col 39)",
            "(line 188,col 5)-(line 188,col 40)",
            "(line 190,col 5)-(line 190,col 24)",
            "(line 192,col 5)-(line 192,col 46)",
            "(line 193,col 5)-(line 193,col 37)",
            "(line 194,col 5)-(line 194,col 37)",
            "(line 196,col 5)-(line 196,col 32)",
            "(line 198,col 5)-(line 198,col 48)",
            "(line 199,col 5)-(line 199,col 39)",
            "(line 200,col 5)-(line 200,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAdd()",
        "snippet": "  public void testLinenoCharnoAdd() throws Exception {\n    testLinenoCharnoBinop(\"+\");\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoSub()",
        "snippet": "  public void testLinenoCharnoSub() throws Exception {\n    testLinenoCharnoBinop(\"-\");\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoMul()",
        "snippet": "  public void testLinenoCharnoMul() throws Exception {\n    testLinenoCharnoBinop(\"*\");\n  }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoDiv()",
        "snippet": "  public void testLinenoCharnoDiv() throws Exception {\n    testLinenoCharnoBinop(\"/\");\n  }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoMod()",
        "snippet": "  public void testLinenoCharnoMod() throws Exception {\n    testLinenoCharnoBinop(\"%\");\n  }\n",
        "begin_line": 219,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoShift()",
        "snippet": "  public void testLinenoCharnoShift() throws Exception {\n    testLinenoCharnoBinop(\"<<\");\n  }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinaryAnd()",
        "snippet": "  public void testLinenoCharnoBinaryAnd() throws Exception {\n    testLinenoCharnoBinop(\"&\");\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoAnd()",
        "snippet": "  public void testLinenoCharnoAnd() throws Exception {\n    testLinenoCharnoBinop(\"&&\");\n  }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "",
        "child_ranges": [
            "(line 232,col 5)-(line 232,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinaryOr()",
        "snippet": "  public void testLinenoCharnoBinaryOr() throws Exception {\n    testLinenoCharnoBinop(\"|\");\n  }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 236,col 5)-(line 236,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoOr()",
        "snippet": "  public void testLinenoCharnoOr() throws Exception {\n    testLinenoCharnoBinop(\"||\");\n  }\n",
        "begin_line": 239,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 240,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoLt()",
        "snippet": "  public void testLinenoCharnoLt() throws Exception {\n    testLinenoCharnoBinop(\"<\");\n  }\n",
        "begin_line": 243,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 244,col 5)-(line 244,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoLe()",
        "snippet": "  public void testLinenoCharnoLe() throws Exception {\n    testLinenoCharnoBinop(\"<=\");\n  }\n",
        "begin_line": 247,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGt()",
        "snippet": "  public void testLinenoCharnoGt() throws Exception {\n    testLinenoCharnoBinop(\">\");\n  }\n",
        "begin_line": 251,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoGe()",
        "snippet": "  public void testLinenoCharnoGe() throws Exception {\n    testLinenoCharnoBinop(\">=\");\n  }\n",
        "begin_line": 255,
        "end_line": 257,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 256,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLinenoCharnoBinop(java.lang.String)",
        "snippet": "  private void testLinenoCharnoBinop(String binop) {\n    Node op = parse(\"var a = 89 \" + binop + \" 76\").getFirstChild().\n        getFirstChild().getFirstChild();\n\n    assertEquals(1, op.getLineno());\n    assertEquals(8, op.getCharno());\n  }\n",
        "begin_line": 259,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 260,col 5)-(line 261,col 40)",
            "(line 263,col 5)-(line 263,col 36)",
            "(line 264,col 5)-(line 264,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment1()",
        "snippet": "  public void testJSDocAttachment1() {\n    Node varNode = parse(\"/** @type number */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 267,
        "end_line": 280,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 70)",
            "(line 271,col 5)-(line 271,col 47)",
            "(line 272,col 5)-(line 272,col 44)",
            "(line 273,col 5)-(line 273,col 24)",
            "(line 274,col 5)-(line 274,col 50)",
            "(line 277,col 5)-(line 277,col 44)",
            "(line 278,col 5)-(line 278,col 49)",
            "(line 279,col 5)-(line 279,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment2()",
        "snippet": "  public void testJSDocAttachment2() {\n    Node varNode = parse(\"/** @type number */var a,b;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // First NAME\n    Node nameNode1 = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode1.getType());\n    assertNull(nameNode1.getJSDocInfo());\n\n    // Second NAME\n    Node nameNode2 = nameNode1.getNext();\n    assertEquals(Token.NAME, nameNode2.getType());\n    assertNull(nameNode2.getJSDocInfo());\n  }\n",
        "begin_line": 282,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 283,col 5)-(line 283,col 72)",
            "(line 286,col 5)-(line 286,col 47)",
            "(line 287,col 5)-(line 287,col 44)",
            "(line 288,col 5)-(line 288,col 24)",
            "(line 289,col 5)-(line 289,col 50)",
            "(line 292,col 5)-(line 292,col 45)",
            "(line 293,col 5)-(line 293,col 50)",
            "(line 294,col 5)-(line 294,col 41)",
            "(line 297,col 5)-(line 297,col 41)",
            "(line 298,col 5)-(line 298,col 50)",
            "(line 299,col 5)-(line 299,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment3()",
        "snippet": "  public void testJSDocAttachment3() {\n    Node assignNode = parse(\n        \"/** @type number */goog.FOO = 5;\").getFirstChild().getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.ASSIGN, assignNode.getType());\n    JSDocInfo info = assignNode.getJSDocInfo();\n    assertNotNull(info);\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 302,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 304,col 76)",
            "(line 307,col 5)-(line 307,col 53)",
            "(line 308,col 5)-(line 308,col 47)",
            "(line 309,col 5)-(line 309,col 24)",
            "(line 310,col 5)-(line 310,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment4()",
        "snippet": "  public void testJSDocAttachment4() {\n    Node varNode = parse(\n        \"var a, /** @define {number} */b = 5;\").getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.VAR, varNode.getType());\n    assertNull(varNode.getJSDocInfo());\n\n    // a\n    Node a = varNode.getFirstChild();\n    assertNull(a.getJSDocInfo());\n\n    // b\n    Node b = a.getNext();\n    JSDocInfo info = b.getJSDocInfo();\n    assertNotNull(info);\n    assertTrue(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 313,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 314,col 5)-(line 315,col 64)",
            "(line 318,col 5)-(line 318,col 47)",
            "(line 319,col 5)-(line 319,col 39)",
            "(line 322,col 5)-(line 322,col 37)",
            "(line 323,col 5)-(line 323,col 33)",
            "(line 326,col 5)-(line 326,col 25)",
            "(line 327,col 5)-(line 327,col 38)",
            "(line 328,col 5)-(line 328,col 24)",
            "(line 329,col 5)-(line 329,col 32)",
            "(line 330,col 5)-(line 330,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment5()",
        "snippet": "  public void testJSDocAttachment5() {\n    Node varNode = parse(\n        \"var /** @type number */a, /** @define {number} */b = 5;\")\n        .getFirstChild();\n\n    // ASSIGN\n    assertEquals(Token.VAR, varNode.getType());\n    assertNull(varNode.getJSDocInfo());\n\n    // a\n    Node a = varNode.getFirstChild();\n    assertNotNull(a.getJSDocInfo());\n    JSDocInfo info = a.getJSDocInfo();\n    assertNotNull(info);\n    assertFalse(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n\n    // b\n    Node b = a.getNext();\n    info = b.getJSDocInfo();\n    assertNotNull(info);\n    assertTrue(info.isDefine());\n    assertTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 333,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 336,col 25)",
            "(line 339,col 5)-(line 339,col 47)",
            "(line 340,col 5)-(line 340,col 39)",
            "(line 343,col 5)-(line 343,col 37)",
            "(line 344,col 5)-(line 344,col 36)",
            "(line 345,col 5)-(line 345,col 38)",
            "(line 346,col 5)-(line 346,col 24)",
            "(line 347,col 5)-(line 347,col 33)",
            "(line 348,col 5)-(line 348,col 50)",
            "(line 351,col 5)-(line 351,col 25)",
            "(line 352,col 5)-(line 352,col 28)",
            "(line 353,col 5)-(line 353,col 24)",
            "(line 354,col 5)-(line 354,col 32)",
            "(line 355,col 5)-(line 355,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment6()",
        "snippet": "  public void testJSDocAttachment6() throws Exception {\n    Node functionNode = parse(\n        \"var a = /** @param {number} index */5;\" +\n        \"/** @return boolean */function f(index){}\")\n        .getFirstChild().getNext();\n\n    assertEquals(Token.FUNCTION, functionNode.getType());\n    JSDocInfo info = functionNode.getJSDocInfo();\n    assertNotNull(info);\n    assertFalse(info.hasParameter(\"index\"));\n    assertTrue(info.hasReturnType());\n    assertTypeEquals(UNKNOWN_TYPE, info.getReturnType());\n  }\n",
        "begin_line": 362,
        "end_line": 374,
        "comment": "\n   * Tests that a JSDoc comment in an unexpected place of the code does not\n   * propagate to following code due to {@link JSDocInfo} aggregation.\n   ",
        "child_ranges": [
            "(line 363,col 5)-(line 366,col 35)",
            "(line 368,col 5)-(line 368,col 57)",
            "(line 369,col 5)-(line 369,col 49)",
            "(line 370,col 5)-(line 370,col 24)",
            "(line 371,col 5)-(line 371,col 44)",
            "(line 372,col 5)-(line 372,col 37)",
            "(line 373,col 5)-(line 373,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment7()",
        "snippet": "  public void testJSDocAttachment7() {\n    Node varNode = parse(\"/** */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 376,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 377,col 57)",
            "(line 380,col 5)-(line 380,col 47)",
            "(line 383,col 5)-(line 383,col 44)",
            "(line 384,col 5)-(line 384,col 49)",
            "(line 385,col 5)-(line 385,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment8()",
        "snippet": "  public void testJSDocAttachment8() {\n    Node varNode = parse(\"/** x */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 388,
        "end_line": 398,
        "comment": "",
        "child_ranges": [
            "(line 389,col 5)-(line 389,col 59)",
            "(line 392,col 5)-(line 392,col 47)",
            "(line 395,col 5)-(line 395,col 44)",
            "(line 396,col 5)-(line 396,col 49)",
            "(line 397,col 5)-(line 397,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment9()",
        "snippet": "  public void testJSDocAttachment9() {\n    Node varNode = parse(\"/** \\n x */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 400,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 401,col 5)-(line 401,col 62)",
            "(line 404,col 5)-(line 404,col 47)",
            "(line 407,col 5)-(line 407,col 44)",
            "(line 408,col 5)-(line 408,col 49)",
            "(line 409,col 5)-(line 409,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment10()",
        "snippet": "  public void testJSDocAttachment10() {\n    Node varNode = parse(\"/** x\\n */var a;\").getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 412,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 413,col 5)-(line 413,col 61)",
            "(line 416,col 5)-(line 416,col 47)",
            "(line 419,col 5)-(line 419,col 44)",
            "(line 420,col 5)-(line 420,col 49)",
            "(line 421,col 5)-(line 421,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment11()",
        "snippet": "  public void testJSDocAttachment11() {\n    Node varNode =\n       parse(\"/** @type {{x : number, 'y' : string, z}} */var a;\")\n        .getFirstChild();\n\n    // VAR\n    assertEquals(Token.VAR, varNode.getType());\n    JSDocInfo info = varNode.getJSDocInfo();\n    assertNotNull(info);\n\n    assertTypeEquals(createRecordTypeBuilder().\n                     addProperty(\"x\", NUMBER_TYPE, null).\n                     addProperty(\"y\", STRING_TYPE, null).\n                     addProperty(\"z\", UNKNOWN_TYPE, null).\n                     build(),\n                     info.getType());\n\n    // NAME\n    Node nameNode = varNode.getFirstChild();\n    assertEquals(Token.NAME, nameNode.getType());\n    assertNull(nameNode.getJSDocInfo());\n  }\n",
        "begin_line": 424,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 427,col 25)",
            "(line 430,col 5)-(line 430,col 47)",
            "(line 431,col 5)-(line 431,col 44)",
            "(line 432,col 5)-(line 432,col 24)",
            "(line 434,col 5)-(line 439,col 37)",
            "(line 442,col 5)-(line 442,col 44)",
            "(line 443,col 5)-(line 443,col 49)",
            "(line 444,col 5)-(line 444,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment12()",
        "snippet": "  public void testJSDocAttachment12() {\n    Node varNode =\n       parse(\"var a = {/** @type {Object} */ b: c};\")\n        .getFirstChild();\n    Node objectLitNode = varNode.getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLitNode.getType());\n    assertNotNull(objectLitNode.getFirstChild().getJSDocInfo());\n  }\n",
        "begin_line": 447,
        "end_line": 454,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 450,col 25)",
            "(line 451,col 5)-(line 451,col 65)",
            "(line 452,col 5)-(line 452,col 59)",
            "(line 453,col 5)-(line 453,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment13()",
        "snippet": "  public void testJSDocAttachment13() {\n    Node varNode = parse(\"/** foo */ var a;\").getFirstChild();\n    assertNotNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 456,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 457,col 5)-(line 457,col 62)",
            "(line 458,col 5)-(line 458,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment14()",
        "snippet": "  public void testJSDocAttachment14() {\n    Node varNode = parse(\"/** */ var a;\").getFirstChild();\n    assertNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 461,
        "end_line": 464,
        "comment": "",
        "child_ranges": [
            "(line 462,col 5)-(line 462,col 58)",
            "(line 463,col 5)-(line 463,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment15()",
        "snippet": "  public void testJSDocAttachment15() {\n    Node varNode = parse(\"/** \\n * \\n */ var a;\").getFirstChild();\n    assertNull(varNode.getJSDocInfo());\n  }\n",
        "begin_line": 466,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 467,col 5)-(line 467,col 66)",
            "(line 468,col 5)-(line 468,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testJSDocAttachment16()",
        "snippet": "  public void testJSDocAttachment16() {\n    Node exprCall =\n        parse(\"/** @private */ x(); function f() {};\").getFirstChild();\n    assertEquals(Token.EXPR_RESULT, exprCall.getType());\n    assertNull(exprCall.getNext().getJSDocInfo());\n    assertNotNull(exprCall.getFirstChild().getJSDocInfo());\n  }\n",
        "begin_line": 471,
        "end_line": 477,
        "comment": "",
        "child_ranges": [
            "(line 472,col 5)-(line 473,col 71)",
            "(line 474,col 5)-(line 474,col 56)",
            "(line 475,col 5)-(line 475,col 50)",
            "(line 476,col 5)-(line 476,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing1()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing1() throws Exception {\n    assertNodeEquality(\n        parse(\"var a = [1,2]\"),\n        parse(\"/** @type Array.<number*/var a = [1,2]\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 479,
        "end_line": 484,
        "comment": "",
        "child_ranges": [
            "(line 480,col 5)-(line 483,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing2()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing2() throws Exception {\n    assertNodeEquality(\n        parse(\"var a = [1,2]\"),\n        parse(\"/** @type {Array.<number}*/var a = [1,2]\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 486,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 487,col 5)-(line 490,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing3()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing3() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param {Array.<number} nums */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n            MISSING_GT_MESSAGE));\n  }\n",
        "begin_line": 493,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 498,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing4()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing4() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @return boolean */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\"));\n  }\n",
        "begin_line": 501,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 502,col 5)-(line 505,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing5()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing5() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param boolean this is some string*/\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\"));\n  }\n",
        "begin_line": 508,
        "end_line": 513,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 512,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing6()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing6() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @param {bool!*%E$} */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n            \"Bad type annotation. expected closing }\",\n            \"Bad type annotation. expecting a variable name in a @param tag\"));\n  }\n",
        "begin_line": 515,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 516,col 5)-(line 521,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing7()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing7() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @see */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"@see tag missing description\"));\n  }\n",
        "begin_line": 524,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 529,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing8()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing8() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @author */\" +\n            \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"@author tag missing author\"));\n  }\n",
        "begin_line": 532,
        "end_line": 538,
        "comment": "",
        "child_ranges": [
            "(line 533,col 5)-(line 537,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIncorrectJSDocDoesNotAlterJSParsing9()",
        "snippet": "  public void testIncorrectJSDocDoesNotAlterJSParsing9() throws Exception {\n    assertNodeEquality(\n        parse(\"C.prototype.say=function(nums) {alert(nums.join(','));};\"),\n        parse(\"/** @someillegaltag */\" +\n              \"C.prototype.say=function(nums) {alert(nums.join(','));};\",\n              \"illegal use of unknown JSDoc tag \\\"someillegaltag\\\";\"\n              + \" ignoring it\"));\n  }\n",
        "begin_line": 540,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 541,col 5)-(line 546,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnescapedSlashInRegexpCharClass()",
        "snippet": "  public void testUnescapedSlashInRegexpCharClass() throws Exception {\n    // The tokenizer without the fix for this bug throws an error.\n    parse(\"var foo = /[/]/;\");\n    parse(\"var foo = /[hi there/]/;\");\n    parse(\"var foo = /[/yo dude]/;\");\n    parse(\"var foo = /\\\\/[@#$/watashi/wa/suteevu/desu]/;\");\n  }\n",
        "begin_line": 549,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 551,col 5)-(line 551,col 30)",
            "(line 552,col 5)-(line 552,col 38)",
            "(line 553,col 5)-(line 553,col 37)",
            "(line 554,col 5)-(line 554,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.assertNodeEquality(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void assertNodeEquality(Node expected, Node found) {\n    String message = expected.checkTreeEquals(found);\n    if (message != null) {\n      fail(message);\n    }\n  }\n",
        "begin_line": 557,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 558,col 5)-(line 558,col 53)",
            "(line 559,col 5)-(line 561,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testParse()",
        "snippet": "  @SuppressWarnings(\"unchecked\")\n  public void testParse() {\n    Node a = Node.newString(Token.NAME, \"a\");\n    a.addChildToFront(Node.newString(Token.NAME, \"b\"));\n    List<ParserResult> testCases = ImmutableList.of(\n        new ParserResult(\n            \"3;\",\n            createScript(new Node(Token.EXPR_RESULT, Node.newNumber(3.0)))),\n        new ParserResult(\n            \"var a = b;\",\n             createScript(new Node(Token.VAR, a))),\n        new ParserResult(\n            \"\\\"hell\\\\\\no\\\\ world\\\\\\n\\\\\\n!\\\"\",\n             createScript(new Node(Token.EXPR_RESULT,\n             Node.newString(Token.STRING, \"hello world!\")))));\n\n    for (ParserResult testCase : testCases) {\n      assertNodeEquality(testCase.node, parse(testCase.code));\n    }\n  }\n",
        "begin_line": 564,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 566,col 5)-(line 566,col 45)",
            "(line 567,col 5)-(line 567,col 55)",
            "(line 568,col 5)-(line 578,col 62)",
            "(line 580,col 5)-(line 582,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.createScript(com.google.javascript.rhino.Node)",
        "snippet": "  private Node createScript(Node n) {\n    Node script = new Node(Token.SCRIPT);\n    script.setIsSyntheticBlock(true);\n    script.addChildToBack(n);\n    return script;\n  }\n",
        "begin_line": 585,
        "end_line": 590,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 586,col 41)",
            "(line 587,col 5)-(line 587,col 37)",
            "(line 588,col 5)-(line 588,col 29)",
            "(line 589,col 5)-(line 589,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning1()",
        "snippet": "  public void testTrailingCommaWarning1() {\n    parse(\"var a = ['foo', 'bar'];\");\n  }\n",
        "begin_line": 592,
        "end_line": 594,
        "comment": "",
        "child_ranges": [
            "(line 593,col 5)-(line 593,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning2()",
        "snippet": "  public void testTrailingCommaWarning2() {\n    parse(\"var a = ['foo',,'bar'];\");\n  }\n",
        "begin_line": 596,
        "end_line": 598,
        "comment": "",
        "child_ranges": [
            "(line 597,col 5)-(line 597,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning3()",
        "snippet": "  public void testTrailingCommaWarning3() {\n    parse(\"var a = ['foo', 'bar',];\", TRAILING_COMMA_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var a = ['foo', 'bar',];\");\n  }\n",
        "begin_line": 600,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 601,col 5)-(line 601,col 62)",
            "(line 602,col 5)-(line 602,col 36)",
            "(line 603,col 5)-(line 603,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning4()",
        "snippet": "  public void testTrailingCommaWarning4() {\n    parse(\"var a = [,];\", TRAILING_COMMA_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var a = [,];\");\n  }\n",
        "begin_line": 606,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 607,col 50)",
            "(line 608,col 5)-(line 608,col 36)",
            "(line 609,col 5)-(line 609,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning5()",
        "snippet": "  public void testTrailingCommaWarning5() {\n    parse(\"var a = {'foo': 'bar'};\");\n  }\n",
        "begin_line": 612,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 613,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning6()",
        "snippet": "  public void testTrailingCommaWarning6() {\n    parse(\"var a = {'foo': 'bar',};\", TRAILING_COMMA_MESSAGE);\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var a = {'foo': 'bar',};\");\n  }\n",
        "begin_line": 616,
        "end_line": 620,
        "comment": "",
        "child_ranges": [
            "(line 617,col 5)-(line 617,col 62)",
            "(line 618,col 5)-(line 618,col 36)",
            "(line 619,col 5)-(line 619,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testTrailingCommaWarning7()",
        "snippet": "  public void testTrailingCommaWarning7() {\n    parseError(\"var a = {,};\", BAD_PROPERTY_MESSAGE);\n  }\n",
        "begin_line": 622,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 623,col 5)-(line 623,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning1()",
        "snippet": "  public void testSuspiciousBlockCommentWarning1() {\n    parse(\"/* @type {number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 626,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 627,col 5)-(line 627,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSuspiciousBlockCommentWarning2()",
        "snippet": "  public void testSuspiciousBlockCommentWarning2() {\n    parse(\"/* \\n * @type {number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n  }\n",
        "begin_line": 630,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 631,col 5)-(line 631,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testCatchClauseForbidden()",
        "snippet": "  public void testCatchClauseForbidden() {\n    parseError(\"try { } catch (e if true) {}\",\n        \"Catch clauses are not supported\");\n  }\n",
        "begin_line": 634,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 635,col 5)-(line 636,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testConstForbidden()",
        "snippet": "  public void testConstForbidden() {\n    parseError(\"const x = 3;\", \"Unsupported syntax: CONST\");\n  }\n",
        "begin_line": 639,
        "end_line": 641,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 640,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden()",
        "snippet": "  public void testDestructuringAssignForbidden() {\n    parseError(\"var [x, y] = foo();\", \"destructuring assignment forbidden\");\n  }\n",
        "begin_line": 643,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 644,col 5)-(line 644,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden2()",
        "snippet": "  public void testDestructuringAssignForbidden2() {\n    parseError(\"var {x, y} = foo();\", \"missing : after property id\");\n  }\n",
        "begin_line": 647,
        "end_line": 649,
        "comment": "",
        "child_ranges": [
            "(line 648,col 5)-(line 648,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden3()",
        "snippet": "  public void testDestructuringAssignForbidden3() {\n    parseError(\"var {x: x, y: y} = foo();\",\n        \"destructuring assignment forbidden\");\n  }\n",
        "begin_line": 651,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 652,col 5)-(line 653,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDestructuringAssignForbidden4()",
        "snippet": "  public void testDestructuringAssignForbidden4() {\n    parseError(\"[x, y] = foo();\",\n        \"destructuring assignment forbidden\",\n        \"invalid assignment target\");\n  }\n",
        "begin_line": 656,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 657,col 5)-(line 659,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLetForbidden()",
        "snippet": "  public void testLetForbidden() {\n    parseError(\"function f() { let (x = 3) { alert(x); }; }\",\n        \"missing ; before statement\", \"syntax error\");\n  }\n",
        "begin_line": 662,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 663,col 5)-(line 664,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testYieldForbidden()",
        "snippet": "  public void testYieldForbidden() {\n    parseError(\"function f() { yield 3; }\", \"missing ; before statement\");\n  }\n",
        "begin_line": 667,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 668,col 5)-(line 668,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testBracelessFunctionForbidden()",
        "snippet": "  public void testBracelessFunctionForbidden() {\n    parseError(\"var sq = function(x) x * x;\",\n        \"missing { before function body\");\n  }\n",
        "begin_line": 671,
        "end_line": 674,
        "comment": "",
        "child_ranges": [
            "(line 672,col 5)-(line 673,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGeneratorsForbidden()",
        "snippet": "  public void testGeneratorsForbidden() {\n    parseError(\"var i = (x for (x in obj));\",\n        \"missing ) in parenthetical\");\n  }\n",
        "begin_line": 676,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 677,col 5)-(line 678,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden1()",
        "snippet": "  public void testGettersForbidden1() {\n    parseError(\"var x = {get foo() { return 3; }};\",\n        \"getters are not supported in Internet Explorer\");\n  }\n",
        "begin_line": 681,
        "end_line": 684,
        "comment": "",
        "child_ranges": [
            "(line 682,col 5)-(line 683,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden2()",
        "snippet": "  public void testGettersForbidden2() {\n    parseError(\"var x = {get foo bar() { return 3; }};\",\n        \"invalid property id\");\n  }\n",
        "begin_line": 686,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 687,col 5)-(line 688,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden3()",
        "snippet": "  public void testGettersForbidden3() {\n    parseError(\"var x = {a getter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 691,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 692,col 5)-(line 693,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden4()",
        "snippet": "  public void testGettersForbidden4() {\n    parseError(\"var x = {\\\"a\\\" getter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 696,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 697,col 5)-(line 698,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGettersForbidden5()",
        "snippet": "  public void testGettersForbidden5() {\n    parseError(\"var x = {a: 2, get foo() { return 3; }};\",\n        \"getters are not supported in Internet Explorer\");\n  }\n",
        "begin_line": 701,
        "end_line": 704,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 703,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSettersForbidden()",
        "snippet": "  public void testSettersForbidden() {\n    parseError(\"var x = {set foo() { return 3; }};\",\n        \"setters are not supported in Internet Explorer\");\n  }\n",
        "begin_line": 706,
        "end_line": 709,
        "comment": "",
        "child_ranges": [
            "(line 707,col 5)-(line 708,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSettersForbidden2()",
        "snippet": "  public void testSettersForbidden2() {\n    parseError(\"var x = {a setter:function b() { return 3; }};\",\n        \"missing : after property id\", \"syntax error\");\n  }\n",
        "begin_line": 711,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 712,col 5)-(line 713,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDoc1()",
        "snippet": "  public void testFileOverviewJSDoc1() {\n    Node n = parse(\"/** @fileoverview Hi mom! */ function Foo() {}\");\n    assertEquals(Token.FUNCTION, n.getFirstChild().getType());\n    assertTrue(n.getJSDocInfo() != null);\n    assertNull(n.getFirstChild().getJSDocInfo());\n    assertEquals(\"Hi mom!\",\n        n.getJSDocInfo().getFileOverview());\n  }\n",
        "begin_line": 716,
        "end_line": 723,
        "comment": "",
        "child_ranges": [
            "(line 717,col 5)-(line 717,col 69)",
            "(line 718,col 5)-(line 718,col 62)",
            "(line 719,col 5)-(line 719,col 41)",
            "(line 720,col 5)-(line 720,col 49)",
            "(line 721,col 5)-(line 722,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDocDoesNotHoseParsing()",
        "snippet": "  public void testFileOverviewJSDocDoesNotHoseParsing() {\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview Hi mom! \\n */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview Hi mom! \\n * * * */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview \\n * x */ function Foo() {}\")\n            .getFirstChild().getType());\n    assertEquals(\n        Token.FUNCTION,\n        parse(\"/** @fileoverview \\n * x \\n */ function Foo() {}\")\n            .getFirstChild().getType());\n  }\n",
        "begin_line": 725,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 726,col 5)-(line 729,col 40)",
            "(line 730,col 5)-(line 733,col 40)",
            "(line 734,col 5)-(line 737,col 40)",
            "(line 738,col 5)-(line 741,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testFileOverviewJSDoc2()",
        "snippet": "  public void testFileOverviewJSDoc2() {\n    Node n = parse(\"/** @fileoverview Hi mom! */ \" +\n        \"/** @constructor */ function Foo() {}\");\n    assertTrue(n.getJSDocInfo() != null);\n    assertEquals(\"Hi mom!\", n.getJSDocInfo().getFileOverview());\n    assertTrue(n.getFirstChild().getJSDocInfo() != null);\n    assertFalse(n.getFirstChild().getJSDocInfo().hasFileOverview());\n    assertTrue(n.getFirstChild().getJSDocInfo().isConstructor());\n  }\n",
        "begin_line": 744,
        "end_line": 752,
        "comment": "",
        "child_ranges": [
            "(line 745,col 5)-(line 746,col 49)",
            "(line 747,col 5)-(line 747,col 41)",
            "(line 748,col 5)-(line 748,col 64)",
            "(line 749,col 5)-(line 749,col 57)",
            "(line 750,col 5)-(line 750,col 68)",
            "(line 751,col 5)-(line 751,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testObjectLiteralDoc1()",
        "snippet": "  public void testObjectLiteralDoc1() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLit.getType());\n\n    Node number = objectLit.getFirstChild();\n    assertEquals(Token.STRING, number.getType());\n    assertNotNull(number.getJSDocInfo());\n  }\n",
        "begin_line": 754,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 755,col 5)-(line 755,col 60)",
            "(line 757,col 5)-(line 757,col 71)",
            "(line 758,col 5)-(line 758,col 55)",
            "(line 760,col 5)-(line 760,col 44)",
            "(line 761,col 5)-(line 761,col 49)",
            "(line 762,col 5)-(line 762,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testDuplicatedParam()",
        "snippet": "  public void testDuplicatedParam() {\n    parse(\"function foo(x, x) {}\", \"Duplicate parameter name \\\"x\\\".\");\n  }\n",
        "begin_line": 765,
        "end_line": 767,
        "comment": "",
        "child_ranges": [
            "(line 766,col 5)-(line 766,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGetter()",
        "snippet": "  public void testGetter() {\n    mode = LanguageMode.ECMASCRIPT3;\n    parseError(\"var x = {get 1(){}};\",\n        \"getters are not supported in Internet Explorer\");\n    parseError(\"var x = {get 'a'(){}};\",\n        \"getters are not supported in Internet Explorer\");\n    parseError(\"var x = {get a(){}};\",\n        \"getters are not supported in Internet Explorer\");\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var x = {get 1(){}};\");\n    parse(\"var x = {get 'a'(){}};\");\n    parse(\"var x = {get a(){}};\");\n    parseError(\"var x = {get a(b){}};\", \"getters may not have parameters\");\n  }\n",
        "begin_line": 769,
        "end_line": 782,
        "comment": "",
        "child_ranges": [
            "(line 770,col 5)-(line 770,col 36)",
            "(line 771,col 5)-(line 772,col 58)",
            "(line 773,col 5)-(line 774,col 58)",
            "(line 775,col 5)-(line 776,col 58)",
            "(line 777,col 5)-(line 777,col 36)",
            "(line 778,col 5)-(line 778,col 34)",
            "(line 779,col 5)-(line 779,col 36)",
            "(line 780,col 5)-(line 780,col 34)",
            "(line 781,col 5)-(line 781,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testSetter()",
        "snippet": "  public void testSetter() {\n    mode = LanguageMode.ECMASCRIPT3;\n    parseError(\"var x = {set 1(x){}};\",\n        \"setters are not supported in Internet Explorer\");\n    parseError(\"var x = {set 'a'(x){}};\",\n        \"setters are not supported in Internet Explorer\");\n    parseError(\"var x = {set a(x){}};\",\n        \"setters are not supported in Internet Explorer\");\n    mode = LanguageMode.ECMASCRIPT5;\n    parse(\"var x = {set 1(x){}};\");\n    parse(\"var x = {set 'a'(x){}};\");\n    parse(\"var x = {set a(x){}};\");\n    parseError(\"var x = {set a(){}};\",\n        \"setters must have exactly one parameter\");\n  }\n",
        "begin_line": 784,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 785,col 5)-(line 785,col 36)",
            "(line 786,col 5)-(line 787,col 58)",
            "(line 788,col 5)-(line 789,col 58)",
            "(line 790,col 5)-(line 791,col 58)",
            "(line 792,col 5)-(line 792,col 36)",
            "(line 793,col 5)-(line 793,col 35)",
            "(line 794,col 5)-(line 794,col 37)",
            "(line 795,col 5)-(line 795,col 35)",
            "(line 796,col 5)-(line 797,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testLamestWarningEver()",
        "snippet": "  public void testLamestWarningEver() {\n    // This used to be a warning.\n    parse(\"var x = /** @type {undefined} */ (y);\");\n    parse(\"var x = /** @type {void} */ (y);\");\n  }\n",
        "begin_line": 800,
        "end_line": 804,
        "comment": "",
        "child_ranges": [
            "(line 802,col 5)-(line 802,col 51)",
            "(line 803,col 5)-(line 803,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnfinishedComment()",
        "snippet": "  public void testUnfinishedComment() {\n    parseError(\"/** this is a comment \", \"unterminated comment\");\n  }\n",
        "begin_line": 806,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 807,col 5)-(line 807,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testParseBlockDescription()",
        "snippet": "  public void testParseBlockDescription() {\n    Node n = parse(\"/** This is a variable. */ var x;\");\n    Node var = n.getFirstChild();\n    assertNotNull(var.getJSDocInfo());\n    assertEquals(\"This is a variable.\",\n        var.getJSDocInfo().getBlockDescription());\n  }\n",
        "begin_line": 810,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 811,col 5)-(line 811,col 56)",
            "(line 812,col 5)-(line 812,col 33)",
            "(line 813,col 5)-(line 813,col 38)",
            "(line 814,col 5)-(line 815,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testUnnamedFunctionStatement()",
        "snippet": "  public void testUnnamedFunctionStatement() {\n    // Statements\n    parseError(\"function() {};\", \"unnamed function statement\");\n    parseError(\"if (true) { function() {}; }\", \"unnamed function statement\");\n    parse(\"function f() {};\");\n    // Expressions\n    parse(\"(function f() {});\");\n    parse(\"(function () {});\");\n  }\n",
        "begin_line": 818,
        "end_line": 826,
        "comment": "",
        "child_ranges": [
            "(line 820,col 5)-(line 820,col 63)",
            "(line 821,col 5)-(line 821,col 77)",
            "(line 822,col 5)-(line 822,col 30)",
            "(line 824,col 5)-(line 824,col 32)",
            "(line 825,col 5)-(line 825,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testReservedKeywords()",
        "snippet": "  public void testReservedKeywords() {\n    boolean isIdeMode = false;\n\n    mode = LanguageMode.ECMASCRIPT3;\n\n    parseError(\"var boolean;\", \"missing variable name\");\n    parseError(\"function boolean() {};\",\n        \"missing ( before function parameters.\");\n    parseError(\"boolean = 1;\", \"identifier is a reserved word\");\n    parseError(\"class = 1;\", \"identifier is a reserved word\");\n    parseError(\"public = 2;\", \"identifier is a reserved word\");\n\n    mode = LanguageMode.ECMASCRIPT5;\n\n    parse(\"var boolean;\");\n    parse(\"function boolean() {};\");\n    parse(\"boolean = 1;\");\n    parseError(\"class = 1;\", \"identifier is a reserved word\");\n    parse(\"public = 2;\");\n\n    mode = LanguageMode.ECMASCRIPT5_STRICT;\n\n    parse(\"var boolean;\");\n    parse(\"function boolean() {};\");\n    parse(\"boolean = 1;\");\n    parseError(\"class = 1;\", \"identifier is a reserved word\");\n    parseError(\"public = 2;\", \"identifier is a reserved word\");\n  }\n",
        "begin_line": 828,
        "end_line": 855,
        "comment": "",
        "child_ranges": [
            "(line 829,col 5)-(line 829,col 30)",
            "(line 831,col 5)-(line 831,col 36)",
            "(line 833,col 5)-(line 833,col 56)",
            "(line 834,col 5)-(line 835,col 49)",
            "(line 836,col 5)-(line 836,col 64)",
            "(line 837,col 5)-(line 837,col 62)",
            "(line 838,col 5)-(line 838,col 63)",
            "(line 840,col 5)-(line 840,col 36)",
            "(line 842,col 5)-(line 842,col 26)",
            "(line 843,col 5)-(line 843,col 36)",
            "(line 844,col 5)-(line 844,col 26)",
            "(line 845,col 5)-(line 845,col 62)",
            "(line 846,col 5)-(line 846,col 25)",
            "(line 848,col 5)-(line 848,col 43)",
            "(line 850,col 5)-(line 850,col 26)",
            "(line 851,col 5)-(line 851,col 36)",
            "(line 852,col 5)-(line 852,col 26)",
            "(line 853,col 5)-(line 853,col 62)",
            "(line 854,col 5)-(line 854,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testKeywordsAsProperties()",
        "snippet": "  public void testKeywordsAsProperties() {\n    boolean isIdeMode = false;\n\n    mode = LanguageMode.ECMASCRIPT3;\n\n    parseError(\"var x = {function: 1};\", \"invalid property id\");\n    parseError(\"x.function;\", \"missing name after . operator\");\n    parseError(\"var x = {get x(){} };\",\n        \"getters are not supported in Internet Explorer\");\n    parseError(\"var x = {get function(){} };\", \"invalid property id\");\n    parseError(\"var x = {get 'function'(){} };\",\n        \"getters are not supported in Internet Explorer\");\n    parseError(\"var x = {get 1(){} };\",\n        \"getters are not supported in Internet Explorer\");\n    parseError(\"var x = {set function(a){} };\", \"invalid property id\");\n    parseError(\"var x = {set 'function'(a){} };\",\n        \"setters are not supported in Internet Explorer\");\n    parseError(\"var x = {set 1(a){} };\",\n        \"setters are not supported in Internet Explorer\");\n    parseError(\"var x = {class: 1};\", \"invalid property id\");\n    parseError(\"x.class;\", \"missing name after . operator\");\n    parse(\"var x = {let: 1};\");\n    parse(\"x.let;\");\n    parse(\"var x = {yield: 1};\");\n    parse(\"x.yield;\");\n\n    mode = LanguageMode.ECMASCRIPT5;\n\n    parse(\"var x = {function: 1};\");\n    parse(\"x.function;\");\n    parse(\"var x = {get function(){} };\");\n    parse(\"var x = {get 'function'(){} };\");\n    parse(\"var x = {get 1(){} };\");\n    parse(\"var x = {set function(a){} };\");\n    parse(\"var x = {set 'function'(a){} };\");\n    parse(\"var x = {set 1(a){} };\");\n    parse(\"var x = {class: 1};\");\n    parse(\"x.class;\");\n    parse(\"var x = {let: 1};\");\n    parse(\"x.let;\");\n    parse(\"var x = {yield: 1};\");\n    parse(\"x.yield;\");\n\n    mode = LanguageMode.ECMASCRIPT5_STRICT;\n\n    parse(\"var x = {function: 1};\");\n    parse(\"x.function;\");\n    parse(\"var x = {get function(){} };\");\n    parse(\"var x = {get 'function'(){} };\");\n    parse(\"var x = {get 1(){} };\");\n    parse(\"var x = {set function(a){} };\");\n    parse(\"var x = {set 'function'(a){} };\");\n    parse(\"var x = {set 1(a){} };\");\n    parse(\"var x = {class: 1};\");\n    parse(\"x.class;\");\n    parse(\"var x = {let: 1};\");\n    parse(\"x.let;\");\n    parse(\"var x = {yield: 1};\");\n    parse(\"x.yield;\");\n  }\n",
        "begin_line": 857,
        "end_line": 916,
        "comment": "",
        "child_ranges": [
            "(line 858,col 5)-(line 858,col 30)",
            "(line 860,col 5)-(line 860,col 36)",
            "(line 862,col 5)-(line 862,col 64)",
            "(line 863,col 5)-(line 863,col 63)",
            "(line 864,col 5)-(line 865,col 58)",
            "(line 866,col 5)-(line 866,col 70)",
            "(line 867,col 5)-(line 868,col 58)",
            "(line 869,col 5)-(line 870,col 58)",
            "(line 871,col 5)-(line 871,col 71)",
            "(line 872,col 5)-(line 873,col 58)",
            "(line 874,col 5)-(line 875,col 58)",
            "(line 876,col 5)-(line 876,col 61)",
            "(line 877,col 5)-(line 877,col 60)",
            "(line 878,col 5)-(line 878,col 31)",
            "(line 879,col 5)-(line 879,col 20)",
            "(line 880,col 5)-(line 880,col 33)",
            "(line 881,col 5)-(line 881,col 22)",
            "(line 883,col 5)-(line 883,col 36)",
            "(line 885,col 5)-(line 885,col 36)",
            "(line 886,col 5)-(line 886,col 25)",
            "(line 887,col 5)-(line 887,col 42)",
            "(line 888,col 5)-(line 888,col 44)",
            "(line 889,col 5)-(line 889,col 35)",
            "(line 890,col 5)-(line 890,col 43)",
            "(line 891,col 5)-(line 891,col 45)",
            "(line 892,col 5)-(line 892,col 36)",
            "(line 893,col 5)-(line 893,col 33)",
            "(line 894,col 5)-(line 894,col 22)",
            "(line 895,col 5)-(line 895,col 31)",
            "(line 896,col 5)-(line 896,col 20)",
            "(line 897,col 5)-(line 897,col 33)",
            "(line 898,col 5)-(line 898,col 22)",
            "(line 900,col 5)-(line 900,col 43)",
            "(line 902,col 5)-(line 902,col 36)",
            "(line 903,col 5)-(line 903,col 25)",
            "(line 904,col 5)-(line 904,col 42)",
            "(line 905,col 5)-(line 905,col 44)",
            "(line 906,col 5)-(line 906,col 35)",
            "(line 907,col 5)-(line 907,col 43)",
            "(line 908,col 5)-(line 908,col 45)",
            "(line 909,col 5)-(line 909,col 36)",
            "(line 910,col 5)-(line 910,col 33)",
            "(line 911,col 5)-(line 911,col 22)",
            "(line 912,col 5)-(line 912,col 31)",
            "(line 913,col 5)-(line 913,col 20)",
            "(line 914,col 5)-(line 914,col 33)",
            "(line 915,col 5)-(line 915,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGetPropFunctionName()",
        "snippet": "  public void testGetPropFunctionName() {\n    parseError(\"function a.b() {}\",\n        \"missing ( before function parameters.\");\n    parseError(\"var x = function a.b() {}\",\n        \"missing ( before function parameters.\");\n  }\n",
        "begin_line": 918,
        "end_line": 923,
        "comment": "",
        "child_ranges": [
            "(line 919,col 5)-(line 920,col 49)",
            "(line 921,col 5)-(line 922,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testGetPropFunctionNameIdeMode()",
        "snippet": "  public void testGetPropFunctionNameIdeMode() {\n    // In IDE mode, we try to fix up the tree, but sometimes\n    // this leads to even more errors.\n    isIdeMode = true;\n    parseError(\"function a.b() {}\",\n        \"missing ( before function parameters.\",\n        \"missing formal parameter\",\n        \"missing ) after formal parameters\",\n        \"missing { before function body\",\n        \"syntax error\",\n        \"missing ; before statement\",\n        \"Unsupported syntax: ERROR\",\n        \"Unsupported syntax: ERROR\");\n    parseError(\"var x = function a.b() {}\",\n        \"missing ( before function parameters.\",\n        \"missing formal parameter\",\n        \"missing ) after formal parameters\",\n        \"missing { before function body\",\n        \"syntax error\",\n        \"missing ; before statement\",\n        \"missing ; before statement\",\n        \"Unsupported syntax: ERROR\",\n        \"Unsupported syntax: ERROR\");\n  }\n",
        "begin_line": 925,
        "end_line": 948,
        "comment": "",
        "child_ranges": [
            "(line 928,col 5)-(line 928,col 21)",
            "(line 929,col 5)-(line 937,col 37)",
            "(line 938,col 5)-(line 947,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testIdeModePartialTree()",
        "snippet": "  public void testIdeModePartialTree() {\n    Node partialTree = parseError(\"function Foo() {} f.\",\n        \"missing name after . operator\");\n    assertNull(partialTree);\n\n    isIdeMode = true;\n    partialTree = parseError(\"function Foo() {} f.\",\n        \"missing name after . operator\");\n    assertNotNull(partialTree);\n  }\n",
        "begin_line": 950,
        "end_line": 959,
        "comment": "",
        "child_ranges": [
            "(line 951,col 5)-(line 952,col 41)",
            "(line 953,col 5)-(line 953,col 28)",
            "(line 955,col 5)-(line 955,col 21)",
            "(line 956,col 5)-(line 957,col 41)",
            "(line 958,col 5)-(line 958,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.testForEach()",
        "snippet": "  public void testForEach() {\n    parseError(\n        \"function f(stamp, status) {\\n\" +\n        \"  for each ( var curTiming in this.timeLog.timings ) {\\n\" +\n        \"    if ( curTiming.callId == stamp ) {\\n\" +\n        \"      curTiming.flag = status;\\n\" +\n        \"      break;\\n\" +\n        \"    }\\n\" +\n        \"  }\\n\" +\n        \"};\",\n        \"unsupported language extension: for each\");\n  }\n",
        "begin_line": 961,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 962,col 5)-(line 971,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.parseError(java.lang.String, java.lang.String...)",
        "snippet": "  private Node parseError(String string, String... errors) {\n    TestErrorReporter testErrorReporter = new TestErrorReporter(errors, null);\n    Node script = null;\n    try {\n      StaticSourceFile file = new SimpleSourceFile(\"input\", false);\n      script = ParserRunner.parse(\n          file, string, ParserRunner.createConfig(isIdeMode, mode, false),\n          testErrorReporter, Logger.getAnonymousLogger());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // verifying that all warnings were seen\n    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n    assertTrue(testErrorReporter.hasEncounteredAllWarnings());\n\n    return script;\n  }\n",
        "begin_line": 978,
        "end_line": 995,
        "comment": "\n   * Verify that the given code has the given parse errors.\n   * @return If in IDE mode, returns a partial tree.\n   ",
        "child_ranges": [
            "(line 979,col 5)-(line 979,col 78)",
            "(line 980,col 5)-(line 980,col 23)",
            "(line 981,col 5)-(line 988,col 5)",
            "(line 991,col 5)-(line 991,col 60)",
            "(line 992,col 5)-(line 992,col 62)",
            "(line 994,col 5)-(line 994,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.parse(java.lang.String, java.lang.String...)",
        "snippet": "  private Node parse(String string, String... warnings) {\n    TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n    Node script = null;\n    try {\n      StaticSourceFile file = new SimpleSourceFile(\"input\", false);\n      script = ParserRunner.parse(\n          file, string, ParserRunner.createConfig(true, mode, false),\n          testErrorReporter, Logger.getAnonymousLogger());\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n\n    // verifying that all warnings were seen\n    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n    assertTrue(testErrorReporter.hasEncounteredAllWarnings());\n\n    return script;\n  }\n",
        "begin_line": 997,
        "end_line": 1014,
        "comment": "",
        "child_ranges": [
            "(line 998,col 5)-(line 998,col 80)",
            "(line 999,col 5)-(line 999,col 23)",
            "(line 1000,col 5)-(line 1007,col 5)",
            "(line 1010,col 5)-(line 1010,col 60)",
            "(line 1011,col 5)-(line 1011,col 62)",
            "(line 1013,col 5)-(line 1013,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserTest.ParserResult.ParserResult(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "    private ParserResult(String code, Node node) {\n      this.code = code;\n      this.node = node;\n    }\n",
        "begin_line": 1020,
        "end_line": 1023,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 7)-(line 1021,col 23)",
            "(line 1022,col 7)-(line 1022,col 23)"
        ]
    }
]