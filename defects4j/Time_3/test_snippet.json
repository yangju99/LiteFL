[
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestMutableDateTime_Adds.class);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 61)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.TestMutableDateTime_Adds(java.lang.String)",
        "snippet": "    public TestMutableDateTime_Adds(String name) {\n        super(name);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n    }\n",
        "begin_line": 78,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 59)",
            "(line 80,col 9)-(line 80,col 57)",
            "(line 81,col 9)-(line 81,col 49)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 83,col 9)-(line 83,col 40)",
            "(line 84,col 9)-(line 84,col 67)",
            "(line 85,col 9)-(line 85,col 37)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n    }\n",
        "begin_line": 88,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 47)",
            "(line 90,col 9)-(line 90,col 54)",
            "(line 91,col 9)-(line 91,col 46)",
            "(line 92,col 9)-(line 92,col 42)",
            "(line 93,col 9)-(line 93,col 36)",
            "(line 94,col 9)-(line 94,col 32)",
            "(line 95,col 9)-(line 95,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testTest()",
        "snippet": "    public void testTest() {\n        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n    }\n",
        "begin_line": 99,
        "end_line": 103,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 88)",
            "(line 101,col 9)-(line 101,col 85)",
            "(line 102,col 9)-(line 102,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_long1()",
        "snippet": "    public void testAdd_long1() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add(123456L);\n        assertEquals(TEST_TIME1 + 123456L, test.getMillis());\n        assertEquals(ISOChronology.getInstance(), test.getChronology());\n    }\n",
        "begin_line": 106,
        "end_line": 111,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 63)",
            "(line 108,col 9)-(line 108,col 26)",
            "(line 109,col 9)-(line 109,col 61)",
            "(line 110,col 9)-(line 110,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RD1()",
        "snippet": "    public void testAdd_RD1() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add(new Duration(123456L));\n        assertEquals(TEST_TIME1 + 123456L, test.getMillis());\n    }\n",
        "begin_line": 114,
        "end_line": 118,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 115,col 9)-(line 115,col 63)",
            "(line 116,col 9)-(line 116,col 40)",
            "(line 117,col 9)-(line 117,col 61)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RD2()",
        "snippet": "    public void testAdd_RD2() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add((ReadableDuration) null);\n        assertEquals(TEST_TIME1, test.getMillis());\n    }\n",
        "begin_line": 120,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 63)",
            "(line 122,col 9)-(line 122,col 42)",
            "(line 123,col 9)-(line 123,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RD_int1()",
        "snippet": "    public void testAdd_RD_int1() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add(new Duration(123456L), -2);\n        assertEquals(TEST_TIME1 - (2L * 123456L), test.getMillis());\n    }\n",
        "begin_line": 127,
        "end_line": 131,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 63)",
            "(line 129,col 9)-(line 129,col 44)",
            "(line 130,col 9)-(line 130,col 68)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RD_int2()",
        "snippet": "    public void testAdd_RD_int2() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add((ReadableDuration) null, 1);\n        assertEquals(TEST_TIME1, test.getMillis());\n    }\n",
        "begin_line": 133,
        "end_line": 137,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 63)",
            "(line 135,col 9)-(line 135,col 45)",
            "(line 136,col 9)-(line 136,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RP1()",
        "snippet": "    public void testAdd_RP1() {\n        Period d = new Period(1, 1, 0, 1, 1, 1, 1, 1);\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n        test.add(d);\n        assertEquals(\"2003-07-10T06:07:08.009+01:00\", test.toString());\n    }\n",
        "begin_line": 140,
        "end_line": 146,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 141,col 9)-(line 141,col 54)",
            "(line 142,col 9)-(line 142,col 75)",
            "(line 143,col 9)-(line 143,col 71)",
            "(line 144,col 9)-(line 144,col 20)",
            "(line 145,col 9)-(line 145,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RP2()",
        "snippet": "    public void testAdd_RP2() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add((ReadablePeriod) null);\n        assertEquals(TEST_TIME1, test.getMillis());\n    }\n",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 149,col 9)-(line 149,col 63)",
            "(line 150,col 9)-(line 150,col 40)",
            "(line 151,col 9)-(line 151,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RP_int1()",
        "snippet": "    public void testAdd_RP_int1() {\n        Period d = new Period(0, 0, 0, 0, 0, 0, 1, 2);\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add(d, -2);\n        assertEquals(TEST_TIME1 - (2L * 1002L), test.getMillis());\n    }\n",
        "begin_line": 155,
        "end_line": 160,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 54)",
            "(line 157,col 9)-(line 157,col 63)",
            "(line 158,col 9)-(line 158,col 24)",
            "(line 159,col 9)-(line 159,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_RP_int2()",
        "snippet": "    public void testAdd_RP_int2() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add((ReadablePeriod) null, 1);\n        assertEquals(TEST_TIME1, test.getMillis());\n    }\n",
        "begin_line": 162,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 63)",
            "(line 164,col 9)-(line 164,col 43)",
            "(line 165,col 9)-(line 165,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int1()",
        "snippet": "    public void testAdd_DurationFieldType_int1() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        test.add(DurationFieldType.years(), 8);\n        assertEquals(2010, test.getYear());\n    }\n",
        "begin_line": 169,
        "end_line": 173,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 63)",
            "(line 171,col 9)-(line 171,col 47)",
            "(line 172,col 9)-(line 172,col 43)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAdd_DurationFieldType_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.add(DurationFieldType.years(), 0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 175,
        "end_line": 180,
        "comment": "",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 115)",
            "(line 177,col 9)-(line 177,col 71)",
            "(line 178,col 9)-(line 178,col 47)",
            "(line 179,col 9)-(line 179,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAdd_DurationFieldType_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.add(DurationFieldType.years(), 0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 182,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 183,col 9)-(line 183,col 115)",
            "(line 184,col 9)-(line 184,col 25)",
            "(line 185,col 9)-(line 185,col 71)",
            "(line 186,col 9)-(line 186,col 47)",
            "(line 187,col 9)-(line 187,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int2()",
        "snippet": "    public void testAdd_DurationFieldType_int2() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        try {\n            test.add((DurationFieldType) null, 0);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        assertEquals(TEST_TIME1, test.getMillis());\n    }\n",
        "begin_line": 190,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 191,col 9)-(line 191,col 63)",
            "(line 192,col 9)-(line 195,col 48)",
            "(line 196,col 9)-(line 196,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAdd_DurationFieldType_int3()",
        "snippet": "    public void testAdd_DurationFieldType_int3() {\n        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n        try {\n            test.add((DurationFieldType) null, 6);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        assertEquals(TEST_TIME1, test.getMillis());\n    }\n",
        "begin_line": 199,
        "end_line": 206,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 63)",
            "(line 201,col 9)-(line 204,col 48)",
            "(line 205,col 9)-(line 205,col 51)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddYears_int1()",
        "snippet": "    public void testAddYears_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addYears(8);\n        assertEquals(\"2010-06-09T05:06:07.008+01:00\", test.toString());\n    }\n",
        "begin_line": 209,
        "end_line": 213,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 210,col 9)-(line 210,col 75)",
            "(line 211,col 9)-(line 211,col 25)",
            "(line 212,col 9)-(line 212,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddYears_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addYears(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 215,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 115)",
            "(line 217,col 9)-(line 217,col 71)",
            "(line 218,col 9)-(line 218,col 25)",
            "(line 219,col 9)-(line 219,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddYears_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddYears_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addYears(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 222,
        "end_line": 228,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 115)",
            "(line 224,col 9)-(line 224,col 25)",
            "(line 225,col 9)-(line 225,col 71)",
            "(line 226,col 9)-(line 226,col 25)",
            "(line 227,col 9)-(line 227,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMonths_int1()",
        "snippet": "    public void testAddMonths_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addMonths(6);\n        assertEquals(\"2002-12-09T05:06:07.008Z\", test.toString());\n    }\n",
        "begin_line": 231,
        "end_line": 235,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 232,col 9)-(line 232,col 75)",
            "(line 233,col 9)-(line 233,col 26)",
            "(line 234,col 9)-(line 234,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddMonths_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addMonths(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 115)",
            "(line 239,col 9)-(line 239,col 71)",
            "(line 240,col 9)-(line 240,col 26)",
            "(line 241,col 9)-(line 241,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMonths_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddMonths_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addMonths(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 244,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 115)",
            "(line 246,col 9)-(line 246,col 25)",
            "(line 247,col 9)-(line 247,col 71)",
            "(line 248,col 9)-(line 248,col 26)",
            "(line 249,col 9)-(line 249,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddDays_int1()",
        "snippet": "    public void testAddDays_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addDays(17);\n        assertEquals(\"2002-06-26T05:06:07.008+01:00\", test.toString());\n    }\n",
        "begin_line": 253,
        "end_line": 257,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 75)",
            "(line 255,col 9)-(line 255,col 25)",
            "(line 256,col 9)-(line 256,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddDays_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addDays(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 259,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 260,col 9)-(line 260,col 115)",
            "(line 261,col 9)-(line 261,col 71)",
            "(line 262,col 9)-(line 262,col 24)",
            "(line 263,col 9)-(line 263,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddDays_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddDays_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addDays(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 266,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 115)",
            "(line 268,col 9)-(line 268,col 25)",
            "(line 269,col 9)-(line 269,col 71)",
            "(line 270,col 9)-(line 270,col 24)",
            "(line 271,col 9)-(line 271,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddWeekyears_int1()",
        "snippet": "    public void testAddWeekyears_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addWeekyears(-1);\n        assertEquals(\"2001-06-10T05:06:07.008+01:00\", test.toString());\n    }\n",
        "begin_line": 275,
        "end_line": 279,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 75)",
            "(line 277,col 9)-(line 277,col 30)",
            "(line 278,col 9)-(line 278,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int1()",
        "snippet": "    public void testAddWeeks_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addWeeks(-21);\n        assertEquals(\"2002-01-13T05:06:07.008Z\", test.toString());\n    }\n",
        "begin_line": 282,
        "end_line": 286,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 75)",
            "(line 284,col 9)-(line 284,col 27)",
            "(line 285,col 9)-(line 285,col 66)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddWeeks_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addWeeks(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 288,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 289,col 9)-(line 289,col 115)",
            "(line 290,col 9)-(line 290,col 71)",
            "(line 291,col 9)-(line 291,col 25)",
            "(line 292,col 9)-(line 292,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddWeeks_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddWeeks_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addWeeks(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 295,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 296,col 9)-(line 296,col 115)",
            "(line 297,col 9)-(line 297,col 25)",
            "(line 298,col 9)-(line 298,col 71)",
            "(line 299,col 9)-(line 299,col 25)",
            "(line 300,col 9)-(line 300,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddHours_int1()",
        "snippet": "    public void testAddHours_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addHours(13);\n        assertEquals(\"2002-06-09T18:06:07.008+01:00\", test.toString());\n    }\n",
        "begin_line": 304,
        "end_line": 308,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 75)",
            "(line 306,col 9)-(line 306,col 26)",
            "(line 307,col 9)-(line 307,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddHours_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddHours_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addHours(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 310,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 115)",
            "(line 312,col 9)-(line 312,col 71)",
            "(line 313,col 9)-(line 313,col 25)",
            "(line 314,col 9)-(line 314,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddHours_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddHours_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addHours(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 317,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 115)",
            "(line 319,col 9)-(line 319,col 25)",
            "(line 320,col 9)-(line 320,col 71)",
            "(line 321,col 9)-(line 321,col 25)",
            "(line 322,col 9)-(line 322,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMinutes_int1()",
        "snippet": "    public void testAddMinutes_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addMinutes(13);\n        assertEquals(\"2002-06-09T05:19:07.008+01:00\", test.toString());\n    }\n",
        "begin_line": 326,
        "end_line": 330,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 327,col 9)-(line 327,col 75)",
            "(line 328,col 9)-(line 328,col 28)",
            "(line 329,col 9)-(line 329,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMinutes_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddMinutes_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addMinutes(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 115)",
            "(line 334,col 9)-(line 334,col 71)",
            "(line 335,col 9)-(line 335,col 27)",
            "(line 336,col 9)-(line 336,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMinutes_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddMinutes_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addMinutes(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 339,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 340,col 9)-(line 340,col 115)",
            "(line 341,col 9)-(line 341,col 25)",
            "(line 342,col 9)-(line 342,col 71)",
            "(line 343,col 9)-(line 343,col 27)",
            "(line 344,col 9)-(line 344,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddSeconds_int1()",
        "snippet": "    public void testAddSeconds_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addSeconds(13);\n        assertEquals(\"2002-06-09T05:06:20.008+01:00\", test.toString());\n    }\n",
        "begin_line": 348,
        "end_line": 352,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 349,col 9)-(line 349,col 75)",
            "(line 350,col 9)-(line 350,col 28)",
            "(line 351,col 9)-(line 351,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddSeconds_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddSeconds_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addSeconds(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 354,
        "end_line": 359,
        "comment": "",
        "child_ranges": [
            "(line 355,col 9)-(line 355,col 115)",
            "(line 356,col 9)-(line 356,col 71)",
            "(line 357,col 9)-(line 357,col 27)",
            "(line 358,col 9)-(line 358,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddSeconds_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddSeconds_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addSeconds(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 361,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 362,col 9)-(line 362,col 115)",
            "(line 363,col 9)-(line 363,col 25)",
            "(line 364,col 9)-(line 364,col 71)",
            "(line 365,col 9)-(line 365,col 27)",
            "(line 366,col 9)-(line 366,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMillis_int1()",
        "snippet": "    public void testAddMillis_int1() {\n        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n        test.addMillis(13);\n        assertEquals(\"2002-06-09T05:06:07.021+01:00\", test.toString());\n    }\n",
        "begin_line": 370,
        "end_line": 374,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 371,col 9)-(line 371,col 75)",
            "(line 372,col 9)-(line 372,col 27)",
            "(line 373,col 9)-(line 373,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMillis_int_dstOverlapSummer_addZero()",
        "snippet": "    public void testAddMillis_int_dstOverlapSummer_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n        test.addMillis(0);\n        assertEquals(\"2011-10-30T02:30:00.000+02:00\", test.toString());\n    }\n",
        "begin_line": 376,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 377,col 9)-(line 377,col 115)",
            "(line 378,col 9)-(line 378,col 71)",
            "(line 379,col 9)-(line 379,col 26)",
            "(line 380,col 9)-(line 380,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestMutableDateTime_Adds",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestMutableDateTime_Adds.java",
        "signature": "org.joda.time.TestMutableDateTime_Adds.testAddMillis_int_dstOverlapWinter_addZero()",
        "snippet": "    public void testAddMillis_int_dstOverlapWinter_addZero() {\n        MutableDateTime test = new MutableDateTime(2011, 10, 30, 2, 30, 0, 0, DateTimeZone.forID(\"Europe/Berlin\"));\n        test.addHours(1);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n        test.addMillis(0);\n        assertEquals(\"2011-10-30T02:30:00.000+01:00\", test.toString());\n    }\n",
        "begin_line": 383,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 384,col 9)-(line 384,col 115)",
            "(line 385,col 9)-(line 385,col 25)",
            "(line 386,col 9)-(line 386,col 71)",
            "(line 387,col 9)-(line 387,col 26)",
            "(line 388,col 9)-(line 388,col 71)"
        ]
    }
]