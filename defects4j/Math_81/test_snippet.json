[
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.EigenDecompositionImplTest(java.lang.String)",
        "snippet": "    public EigenDecompositionImplTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(EigenDecompositionImplTest.class);\n        suite.setName(\"EigenDecompositionImpl Tests\");\n        return suite;\n    }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 74)",
            "(line 46,col 9)-(line 46,col 54)",
            "(line 47,col 9)-(line 47,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension1()",
        "snippet": "    public void testDimension1() {\n        RealMatrix matrix =\n            MatrixUtils.createRealMatrix(new double[][] { { 1.5 } });\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        assertEquals(1.5, ed.getRealEigenvalue(0), 1.0e-15);\n    }\n",
        "begin_line": 50,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 51,col 9)-(line 52,col 69)",
            "(line 53,col 9)-(line 53,col 87)",
            "(line 54,col 9)-(line 54,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension2()",
        "snippet": "    public void testDimension2() {\n        RealMatrix matrix =\n            MatrixUtils.createRealMatrix(new double[][] {\n                    { 59.0, 12.0 },\n                    { 12.0, 66.0 }\n            });\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        assertEquals(75.0, ed.getRealEigenvalue(0), 1.0e-15);\n        assertEquals(50.0, ed.getRealEigenvalue(1), 1.0e-15);\n    }\n",
        "begin_line": 57,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 58,col 9)-(line 62,col 15)",
            "(line 63,col 9)-(line 63,col 87)",
            "(line 64,col 9)-(line 64,col 61)",
            "(line 65,col 9)-(line 65,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension3()",
        "snippet": "    public void testDimension3() {\n        RealMatrix matrix =\n            MatrixUtils.createRealMatrix(new double[][] {\n                                   {  39632.0, -4824.0, -16560.0 },\n                                   {  -4824.0,  8693.0,   7920.0 },\n                                   { -16560.0,  7920.0,  17300.0 }\n                               });\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        assertEquals(50000.0, ed.getRealEigenvalue(0), 3.0e-11);\n        assertEquals(12500.0, ed.getRealEigenvalue(1), 3.0e-11);\n        assertEquals( 3125.0, ed.getRealEigenvalue(2), 3.0e-11);\n    }\n",
        "begin_line": 68,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 69,col 9)-(line 74,col 34)",
            "(line 75,col 9)-(line 75,col 87)",
            "(line 76,col 9)-(line 76,col 64)",
            "(line 77,col 9)-(line 77,col 64)",
            "(line 78,col 9)-(line 78,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithSplit()",
        "snippet": "    public void testDimension4WithSplit() {\n        RealMatrix matrix =\n            MatrixUtils.createRealMatrix(new double[][] {\n                                   {  0.784, -0.288,  0.000,  0.000 },\n                                   { -0.288,  0.616,  0.000,  0.000 },\n                                   {  0.000,  0.000,  0.164, -0.048 },\n                                   {  0.000,  0.000, -0.048,  0.136 }\n                               });\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);\n        assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);\n        assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);\n        assertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15);\n    }\n",
        "begin_line": 81,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 82,col 9)-(line 88,col 34)",
            "(line 89,col 9)-(line 89,col 87)",
            "(line 90,col 9)-(line 90,col 60)",
            "(line 91,col 9)-(line 91,col 60)",
            "(line 92,col 9)-(line 92,col 60)",
            "(line 93,col 9)-(line 93,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDimension4WithoutSplit()",
        "snippet": "    public void testDimension4WithoutSplit() {\n        RealMatrix matrix =\n            MatrixUtils.createRealMatrix(new double[][] {\n                                   {  0.5608, -0.2016,  0.1152, -0.2976 },\n                                   { -0.2016,  0.4432, -0.2304,  0.1152 },\n                                   {  0.1152, -0.2304,  0.3088, -0.1344 },\n                                   { -0.2976,  0.1152, -0.1344,  0.3872 }\n                               });\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        assertEquals(1.0, ed.getRealEigenvalue(0), 1.0e-15);\n        assertEquals(0.4, ed.getRealEigenvalue(1), 1.0e-15);\n        assertEquals(0.2, ed.getRealEigenvalue(2), 1.0e-15);\n        assertEquals(0.1, ed.getRealEigenvalue(3), 1.0e-15);\n    }\n",
        "begin_line": 96,
        "end_line": 109,
        "comment": "",
        "child_ranges": [
            "(line 97,col 9)-(line 103,col 34)",
            "(line 104,col 9)-(line 104,col 87)",
            "(line 105,col 9)-(line 105,col 60)",
            "(line 106,col 9)-(line 106,col 60)",
            "(line 107,col 9)-(line 107,col 60)",
            "(line 108,col 9)-(line 108,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testMath308()",
        "snippet": "    public void testMath308() {\n\n        double[] mainTridiagonal = {\n            22.330154644539597, 46.65485522478641, 17.393672330044705, 54.46687435351116, 80.17800767709437\n        };\n        double[] secondaryTridiagonal = {\n            13.04450406501361, -5.977590941539671, 2.9040909856707517, 7.1570352792841225\n        };\n\n        // the reference values have been computed using routine DSTEMR\n        // from the fortran library LAPACK version 3.2.1\n        double[] refEigenValues = {\n            82.044413207204002, 53.456697699894512, 52.536278520113882, 18.847969733754262, 14.138204224043099\n        };\n        RealVector[] refEigenVectors = {\n            new ArrayRealVector(new double[] { -0.000462690386766, -0.002118073109055,  0.011530080757413,  0.252322434584915,  0.967572088232592 }),\n            new ArrayRealVector(new double[] {  0.314647769490148,  0.750806415553905, -0.167700312025760, -0.537092972407375,  0.143854968127780 }),\n            new ArrayRealVector(new double[] {  0.222368839324646,  0.514921891363332, -0.021377019336614,  0.801196801016305, -0.207446991247740 }),\n            new ArrayRealVector(new double[] {  0.713933751051495, -0.190582113553930,  0.671410443368332, -0.056056055955050,  0.006541576993581 }),\n            new ArrayRealVector(new double[] {  0.584677060845929, -0.367177264979103, -0.721453187784497,  0.052971054621812, -0.005740715188257 })\n        };\n\n        EigenDecomposition decomposition =\n            new EigenDecompositionImpl(mainTridiagonal, secondaryTridiagonal, MathUtils.SAFE_MIN);\n\n        double[] eigenValues = decomposition.getRealEigenvalues();\n        for (int i = 0; i < refEigenValues.length; ++i) {\n            assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);\n            assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);\n        }\n\n    }\n",
        "begin_line": 112,
        "end_line": 143,
        "comment": " the following test triggered an ArrayIndexOutOfBoundsException in commons-math 2.0",
        "child_ranges": [
            "(line 114,col 9)-(line 116,col 10)",
            "(line 117,col 9)-(line 119,col 10)",
            "(line 123,col 9)-(line 125,col 10)",
            "(line 126,col 9)-(line 132,col 10)",
            "(line 134,col 9)-(line 135,col 98)",
            "(line 137,col 9)-(line 137,col 66)",
            "(line 138,col 9)-(line 141,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testTridiagonal()",
        "snippet": "    public void testTridiagonal() {\n        Random r = new Random(4366663527842l);\n        double[] ref = new double[30];\n        for (int i = 0; i < ref.length; ++i) {\n            if (i < 5) {\n                ref[i] = 2 * r.nextDouble() - 1;\n            } else {\n                ref[i] = 0.0001 * r.nextDouble() + 6;\n            }\n        }\n        Arrays.sort(ref);\n        TriDiagonalTransformer t =\n            new TriDiagonalTransformer(createTestMatrix(r, ref));\n        EigenDecomposition ed =\n            new EigenDecompositionImpl(t.getMainDiagonalRef(),\n                                       t.getSecondaryDiagonalRef(),\n                                       MathUtils.SAFE_MIN);\n        double[] eigenValues = ed.getRealEigenvalues();\n        assertEquals(ref.length, eigenValues.length);\n        for (int i = 0; i < ref.length; ++i) {\n            assertEquals(ref[ref.length - i - 1], eigenValues[i], 2.0e-14);\n        }\n\n    }\n",
        "begin_line": 146,
        "end_line": 169,
        "comment": " test a matrix already in tridiagonal form. ",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 46)",
            "(line 148,col 9)-(line 148,col 38)",
            "(line 149,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 25)",
            "(line 157,col 9)-(line 158,col 65)",
            "(line 159,col 9)-(line 162,col 59)",
            "(line 163,col 9)-(line 163,col 55)",
            "(line 164,col 9)-(line 164,col 53)",
            "(line 165,col 9)-(line 167,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDimensions()",
        "snippet": "    public void testDimensions() {\n        final int m = matrix.getRowDimension();\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        assertEquals(m, ed.getV().getRowDimension());\n        assertEquals(m, ed.getV().getColumnDimension());\n        assertEquals(m, ed.getD().getColumnDimension());\n        assertEquals(m, ed.getD().getColumnDimension());\n        assertEquals(m, ed.getVT().getRowDimension());\n        assertEquals(m, ed.getVT().getColumnDimension());\n    }\n",
        "begin_line": 172,
        "end_line": 181,
        "comment": " test dimensions ",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 47)",
            "(line 174,col 9)-(line 174,col 87)",
            "(line 175,col 9)-(line 175,col 53)",
            "(line 176,col 9)-(line 176,col 56)",
            "(line 177,col 9)-(line 177,col 56)",
            "(line 178,col 9)-(line 178,col 56)",
            "(line 179,col 9)-(line 179,col 54)",
            "(line 180,col 9)-(line 180,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvalues()",
        "snippet": "    public void testEigenvalues() {\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        double[] eigenValues = ed.getRealEigenvalues();\n        assertEquals(refValues.length, eigenValues.length);\n        for (int i = 0; i < refValues.length; ++i) {\n            assertEquals(refValues[i], eigenValues[i], 3.0e-15);\n        }\n    }\n",
        "begin_line": 184,
        "end_line": 191,
        "comment": " test eigenvalues ",
        "child_ranges": [
            "(line 185,col 9)-(line 185,col 87)",
            "(line 186,col 9)-(line 186,col 55)",
            "(line 187,col 9)-(line 187,col 59)",
            "(line 188,col 9)-(line 190,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testBigMatrix()",
        "snippet": "    public void testBigMatrix() {\n        Random r = new Random(17748333525117l);\n        double[] bigValues = new double[200];\n        for (int i = 0; i < bigValues.length; ++i) {\n            bigValues[i] = 2 * r.nextDouble() - 1;\n        }\n        Arrays.sort(bigValues);\n        EigenDecomposition ed =\n            new EigenDecompositionImpl(createTestMatrix(r, bigValues), MathUtils.SAFE_MIN);\n        double[] eigenValues = ed.getRealEigenvalues();\n        assertEquals(bigValues.length, eigenValues.length);\n        for (int i = 0; i < bigValues.length; ++i) {\n            assertEquals(bigValues[bigValues.length - i - 1], eigenValues[i], 2.0e-14);\n        }\n    }\n",
        "begin_line": 194,
        "end_line": 208,
        "comment": " test eigenvalues for a big matrix. ",
        "child_ranges": [
            "(line 195,col 9)-(line 195,col 47)",
            "(line 196,col 9)-(line 196,col 45)",
            "(line 197,col 9)-(line 199,col 9)",
            "(line 200,col 9)-(line 200,col 31)",
            "(line 201,col 9)-(line 202,col 91)",
            "(line 203,col 9)-(line 203,col 55)",
            "(line 204,col 9)-(line 204,col 59)",
            "(line 205,col 9)-(line 207,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testEigenvectors()",
        "snippet": "    public void testEigenvectors() {\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        for (int i = 0; i < matrix.getRowDimension(); ++i) {\n            double lambda = ed.getRealEigenvalue(i);\n            RealVector v  = ed.getEigenvector(i);\n            RealVector mV = matrix.operate(v);\n            assertEquals(0, mV.subtract(v.mapMultiplyToSelf(lambda)).getNorm(), 1.0e-13);\n        }\n    }\n",
        "begin_line": 211,
        "end_line": 219,
        "comment": " test eigenvectors ",
        "child_ranges": [
            "(line 212,col 9)-(line 212,col 87)",
            "(line 213,col 9)-(line 218,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testAEqualVDVt()",
        "snippet": "    public void testAEqualVDVt() {\n        EigenDecomposition ed = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN);\n        RealMatrix v  = ed.getV();\n        RealMatrix d  = ed.getD();\n        RealMatrix vT = ed.getVT();\n        double norm = v.multiply(d).multiply(vT).subtract(matrix).getNorm();\n        assertEquals(0, norm, 6.0e-13);\n    }\n",
        "begin_line": 222,
        "end_line": 229,
        "comment": " test A = VDVt ",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 87)",
            "(line 224,col 9)-(line 224,col 34)",
            "(line 225,col 9)-(line 225,col 34)",
            "(line 226,col 9)-(line 226,col 35)",
            "(line 227,col 9)-(line 227,col 76)",
            "(line 228,col 9)-(line 228,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testVOrthogonal()",
        "snippet": "    public void testVOrthogonal() {\n        RealMatrix v = new EigenDecompositionImpl(matrix, MathUtils.SAFE_MIN).getV();\n        RealMatrix vTv = v.transpose().multiply(v);\n        RealMatrix id  = MatrixUtils.createRealIdentityMatrix(vTv.getRowDimension());\n        assertEquals(0, vTv.subtract(id).getNorm(), 2.0e-13);\n    }\n",
        "begin_line": 232,
        "end_line": 237,
        "comment": " test that V is orthogonal ",
        "child_ranges": [
            "(line 233,col 9)-(line 233,col 85)",
            "(line 234,col 9)-(line 234,col 51)",
            "(line 235,col 9)-(line 235,col 85)",
            "(line 236,col 9)-(line 236,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDiagonal()",
        "snippet": "    public void testDiagonal() {\n        double[] diagonal = new double[] { -3.0, -2.0, 2.0, 5.0 };\n        RealMatrix m = createDiagonalMatrix(diagonal, diagonal.length, diagonal.length);\n        EigenDecomposition ed = new EigenDecompositionImpl(m, MathUtils.SAFE_MIN);\n        assertEquals(diagonal[0], ed.getRealEigenvalue(3), 2.0e-15);\n        assertEquals(diagonal[1], ed.getRealEigenvalue(2), 2.0e-15);\n        assertEquals(diagonal[2], ed.getRealEigenvalue(1), 2.0e-15);\n        assertEquals(diagonal[3], ed.getRealEigenvalue(0), 2.0e-15);\n    }\n",
        "begin_line": 240,
        "end_line": 248,
        "comment": " test diagonal matrix ",
        "child_ranges": [
            "(line 241,col 9)-(line 241,col 66)",
            "(line 242,col 9)-(line 242,col 88)",
            "(line 243,col 9)-(line 243,col 82)",
            "(line 244,col 9)-(line 244,col 68)",
            "(line 245,col 9)-(line 245,col 68)",
            "(line 246,col 9)-(line 246,col 68)",
            "(line 247,col 9)-(line 247,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testRepeatedEigenvalue()",
        "snippet": "    public void testRepeatedEigenvalue() {\n        RealMatrix repeated = MatrixUtils.createRealMatrix(new double[][] {\n                {3,  2,  4},\n                {2,  0,  2},\n                {4,  2,  3}\n        });\n        EigenDecomposition ed = new EigenDecompositionImpl(repeated, MathUtils.SAFE_MIN);\n        checkEigenValues((new double[] {8, -1, -1}), ed, 1E-12);\n        checkEigenVector((new double[] {2, 1, 2}), ed, 1E-12);\n    }\n",
        "begin_line": 253,
        "end_line": 262,
        "comment": "\n     * Matrix with eigenvalues {8, -1, -1}\n     ",
        "child_ranges": [
            "(line 254,col 9)-(line 258,col 11)",
            "(line 259,col 9)-(line 259,col 89)",
            "(line 260,col 9)-(line 260,col 64)",
            "(line 261,col 9)-(line 261,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testDistinctEigenvalues()",
        "snippet": "    public void testDistinctEigenvalues() {\n        RealMatrix distinct = MatrixUtils.createRealMatrix(new double[][] {\n                {3, 1, -4},\n                {1, 3, -4},\n                {-4, -4, 8}\n        });\n        EigenDecomposition ed = new EigenDecompositionImpl(distinct, MathUtils.SAFE_MIN);\n        checkEigenValues((new double[] {2, 0, 12}), ed, 1E-12);\n        checkEigenVector((new double[] {1, -1, 0}), ed, 1E-12);\n        checkEigenVector((new double[] {1, 1, 1}), ed, 1E-12);\n        checkEigenVector((new double[] {-1, -1, 2}), ed, 1E-12);\n    }\n",
        "begin_line": 267,
        "end_line": 278,
        "comment": "\n     * Matrix with eigenvalues {2, 0, 12}\n     ",
        "child_ranges": [
            "(line 268,col 9)-(line 272,col 11)",
            "(line 273,col 9)-(line 273,col 89)",
            "(line 274,col 9)-(line 274,col 63)",
            "(line 275,col 9)-(line 275,col 63)",
            "(line 276,col 9)-(line 276,col 62)",
            "(line 277,col 9)-(line 277,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.testZeroDivide()",
        "snippet": "    public void testZeroDivide() {\n        RealMatrix indefinite = MatrixUtils.createRealMatrix(new double [][] {\n                { 0.0, 1.0, -1.0 }, \n                { 1.0, 1.0, 0.0 }, \n                { -1.0,0.0, 1.0 }        \n        });\n        EigenDecomposition ed = new EigenDecompositionImpl(indefinite, MathUtils.SAFE_MIN);\n        checkEigenValues((new double[] {2, 1, -1}), ed, 1E-12);\n        double isqrt3 = 1/Math.sqrt(3.0);\n        checkEigenVector((new double[] {isqrt3,isqrt3,-isqrt3}), ed, 1E-12);\n        double isqrt2 = 1/Math.sqrt(2.0);\n        checkEigenVector((new double[] {0.0,-isqrt2,-isqrt2}), ed, 1E-12);\n        double isqrt6 = 1/Math.sqrt(6.0);\n        checkEigenVector((new double[] {2*isqrt6,-isqrt6,isqrt6}), ed, 1E-12);\n    }\n",
        "begin_line": 283,
        "end_line": 297,
        "comment": "\n     * Verifies operation on indefinite matrix\n     ",
        "child_ranges": [
            "(line 284,col 9)-(line 288,col 11)",
            "(line 289,col 9)-(line 289,col 91)",
            "(line 290,col 9)-(line 290,col 63)",
            "(line 291,col 9)-(line 291,col 41)",
            "(line 292,col 9)-(line 292,col 76)",
            "(line 293,col 9)-(line 293,col 41)",
            "(line 294,col 9)-(line 294,col 74)",
            "(line 295,col 9)-(line 295,col 41)",
            "(line 296,col 9)-(line 296,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.checkEigenValues(double[], org.apache.commons.math.linear.EigenDecomposition, double)",
        "snippet": "    protected void checkEigenValues(double[] targetValues,\n            EigenDecomposition ed, double tolerance) {\n        double[] observed = ed.getRealEigenvalues();\n        for (int i = 0; i < observed.length; i++) {\n            assertTrue(isIncludedValue(observed[i], targetValues, tolerance));\n            assertTrue(isIncludedValue(targetValues[i], observed, tolerance));\n        }\n    }\n",
        "begin_line": 303,
        "end_line": 310,
        "comment": "\n     * Verifies that the given EigenDecomposition has eigenvalues equivalent to\n     * the targetValues, ignoring the order of the values and allowing\n     * values to differ by tolerance.\n     ",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 52)",
            "(line 306,col 9)-(line 309,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedValue(double, double[], double)",
        "snippet": "    private boolean isIncludedValue(double value, double[] searchArray,\n            double tolerance) {\n       boolean found = false;\n       int i = 0;\n       while (!found && i < searchArray.length) {\n           if (Math.abs(value - searchArray[i]) < tolerance) {\n               found = true;\n           }\n           i++;\n       }\n       return found;\n    }\n",
        "begin_line": 317,
        "end_line": 328,
        "comment": "\n     * Returns true iff there is an entry within tolerance of value in\n     * searchArray.\n     ",
        "child_ranges": [
            "(line 319,col 8)-(line 319,col 29)",
            "(line 320,col 8)-(line 320,col 17)",
            "(line 321,col 8)-(line 326,col 8)",
            "(line 327,col 8)-(line 327,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.checkEigenVector(double[], org.apache.commons.math.linear.EigenDecomposition, double)",
        "snippet": "    protected void checkEigenVector(double[] eigenVector,\n            EigenDecomposition ed, double tolerance) {\n        assertTrue(isIncludedColumn(eigenVector, ed.getV(), tolerance));\n    }\n",
        "begin_line": 335,
        "end_line": 338,
        "comment": "\n     * Returns true iff eigenVector is a scalar multiple of one of the columns\n     * of ed.getV().  Does not try linear combinations - i.e., should only be\n     * used to find vectors in one-dimensional eigenspaces.\n     ",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.isIncludedColumn(double[], org.apache.commons.math.linear.RealMatrix, double)",
        "snippet": "    private boolean isIncludedColumn(double[] column, RealMatrix searchMatrix,\n            double tolerance) {\n        boolean found = false;\n        int i = 0;\n        while (!found && i < searchMatrix.getColumnDimension()) {\n            double multiplier = 1.0;\n            boolean matching = true;\n            int j = 0;\n            while (matching && j < searchMatrix.getRowDimension()) {\n                double colEntry = searchMatrix.getEntry(j, i);\n                // Use the first entry where both are non-zero as scalar\n                if (Math.abs(multiplier - 1.0) <= Math.ulp(1.0) && Math.abs(colEntry) > 1E-14\n                        && Math.abs(column[j]) > 1e-14) {\n                    multiplier = colEntry / column[j];\n                }\n                if (Math.abs(column[j] * multiplier - colEntry) > tolerance) {\n                    matching = false;\n                }\n                j++;\n            }\n            found = matching;\n            i++;\n        }\n        return found;\n    }\n",
        "begin_line": 344,
        "end_line": 368,
        "comment": "\n     * Returns true iff there is a column that is a scalar multiple of column\n     * in searchMatrix (modulo tolerance)\n     ",
        "child_ranges": [
            "(line 346,col 9)-(line 346,col 30)",
            "(line 347,col 9)-(line 347,col 18)",
            "(line 348,col 9)-(line 366,col 9)",
            "(line 367,col 9)-(line 367,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.setUp()",
        "snippet": "    @Override\n    public void setUp() {\n        refValues = new double[] {\n                2.003, 2.002, 2.001, 1.001, 1.000, 0.001\n        };\n        matrix = createTestMatrix(new Random(35992629946426l), refValues);\n    }\n",
        "begin_line": 370,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 372,col 9)-(line 374,col 10)",
            "(line 375,col 9)-(line 375,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.tearDown()",
        "snippet": "    @Override\n    public void tearDown() {\n        refValues = null;\n        matrix    = null;\n    }\n",
        "begin_line": 378,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 380,col 9)-(line 380,col 25)",
            "(line 381,col 9)-(line 381,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.createTestMatrix(java.util.Random, double[])",
        "snippet": "    static RealMatrix createTestMatrix(final Random r, final double[] eigenValues) {\n        final int n = eigenValues.length;\n        final RealMatrix v = createOrthogonalMatrix(r, n);\n        final RealMatrix d = createDiagonalMatrix(eigenValues, n, n);\n        return v.multiply(d).multiply(v.transpose());\n    }\n",
        "begin_line": 384,
        "end_line": 389,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 41)",
            "(line 386,col 9)-(line 386,col 58)",
            "(line 387,col 9)-(line 387,col 69)",
            "(line 388,col 9)-(line 388,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.createOrthogonalMatrix(java.util.Random, int)",
        "snippet": "    public static RealMatrix createOrthogonalMatrix(final Random r, final int size) {\n\n        final double[][] data = new double[size][size];\n\n        for (int i = 0; i < size; ++i) {\n            final double[] dataI = data[i];\n            double norm2 = 0;\n            do {\n\n                // generate randomly row I\n                for (int j = 0; j < size; ++j) {\n                    dataI[j] = 2 * r.nextDouble() - 1;\n                }\n\n                // project the row in the subspace orthogonal to previous rows\n                for (int k = 0; k < i; ++k) {\n                    final double[] dataK = data[k];\n                    double dotProduct = 0;\n                    for (int j = 0; j < size; ++j) {\n                        dotProduct += dataI[j] * dataK[j];\n                    }\n                    for (int j = 0; j < size; ++j) {\n                        dataI[j] -= dotProduct * dataK[j];\n                    }\n                }\n\n                // normalize the row\n                norm2 = 0;\n                for (final double dataIJ : dataI) {\n                    norm2 += dataIJ * dataIJ;\n                }\n                final double inv = 1.0 / Math.sqrt(norm2);\n                for (int j = 0; j < size; ++j) {\n                    dataI[j] *= inv;\n                }\n\n            } while (norm2 * size < 0.01);\n        }\n\n        return MatrixUtils.createRealMatrix(data);\n\n    }\n",
        "begin_line": 391,
        "end_line": 432,
        "comment": "",
        "child_ranges": [
            "(line 393,col 9)-(line 393,col 55)",
            "(line 395,col 9)-(line 428,col 9)",
            "(line 430,col 9)-(line 430,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.linear.EigenDecompositionImplTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/linear/EigenDecompositionImplTest.java",
        "signature": "org.apache.commons.math.linear.EigenDecompositionImplTest.createDiagonalMatrix(double[], int, int)",
        "snippet": "    public static RealMatrix createDiagonalMatrix(final double[] diagonal,\n                                                  final int rows, final int columns) {\n        final double[][] dData = new double[rows][columns];\n        for (int i = 0; i < Math.min(rows, columns); ++i) {\n            dData[i][i] = diagonal[i];\n        }\n        return MatrixUtils.createRealMatrix(dData);\n    }\n",
        "begin_line": 434,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 436,col 9)-(line 436,col 59)",
            "(line 437,col 9)-(line 439,col 9)",
            "(line 440,col 9)-(line 440,col 51)"
        ]
    }
]