[
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.CheckAccessControlsTest()",
        "snippet": "  public CheckAccessControlsTest() {\n    parseTypeInfo = true;\n    enableTypeCheck(CheckLevel.WARNING);\n  }\n",
        "begin_line": 42,
        "end_line": 45,
        "comment": "",
        "child_ranges": [
            "(line 43,col 5)-(line 43,col 25)",
            "(line 44,col 5)-(line 44,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(final Compiler compiler) {\n    return new CheckAccessControls(compiler);\n  }\n",
        "begin_line": 47,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 49,col 5)-(line 49,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.getOptions()",
        "snippet": "  @Override\n  protected CompilerOptions getOptions() {\n    CompilerOptions options = super.getOptions();\n    options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.ERROR);\n    options.setWarningLevel(DiagnosticGroups.CONSTANT_PROPERTY,\n        CheckLevel.ERROR);\n    return options;\n  }\n",
        "begin_line": 52,
        "end_line": 59,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 49)",
            "(line 55,col 5)-(line 55,col 80)",
            "(line 56,col 5)-(line 57,col 26)",
            "(line 58,col 5)-(line 58,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testDep(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void testDep(String js, String reason,\n                       DiagnosticType error,\n                       DiagnosticType errorWithMessage) {\n\n    // Test without a reason.\n    test(String.format(js, \"\"), null, error);\n\n    // Test with a reason.\n    test(String.format(js, reason), null, errorWithMessage, null, reason);\n  }\n",
        "begin_line": 74,
        "end_line": 83,
        "comment": "\n   * Tests that the given Javascript code has a @deprecated marker\n   * somewhere in it which raises an error. Also tests that the\n   * deprecated marker works with a message. The Javascript should\n   * have a JsDoc of the form \"@deprecated %s\\n\".\n   *\n   * @param js The Javascript code to parse and test.\n   * @param reason A simple deprecation reason string, used for testing\n   *    the addition of a deprecation reason to the @deprecated tag.\n   * @param error The deprecation error expected when no reason is given.\n   * @param errorWithMessage The deprecation error expected when a reason\n   *    message is given.\n   ",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 45)",
            "(line 82,col 5)-(line 82,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testDeprecatedFunction()",
        "snippet": "  public void testDeprecatedFunction() {\n    testDep(\"/** @deprecated %s */ function f() {} function g() { f(); }\",\n            \"Some Reason\",\n            DEPRECATED_NAME, DEPRECATED_NAME_REASON);\n  }\n",
        "begin_line": 85,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 88,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningOnDeprecatedConstVariable()",
        "snippet": "  public void testWarningOnDeprecatedConstVariable() {\n    testDep(\"/** @deprecated %s */ var f = 4; function g() { alert(f); }\",\n            \"Another reason\",\n            DEPRECATED_NAME, DEPRECATED_NAME_REASON);\n  }\n",
        "begin_line": 91,
        "end_line": 95,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 94,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testThatNumbersArentDeprecated()",
        "snippet": "  public void testThatNumbersArentDeprecated() {\n    testSame(\"/** @deprecated */ var f = 4; var h = 3; \" +\n             \"function g() { alert(h); }\");\n  }\n",
        "begin_line": 97,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 98,col 5)-(line 99,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testDeprecatedFunctionVariable()",
        "snippet": "  public void testDeprecatedFunctionVariable() {\n    testDep(\"/** @deprecated %s */ var f = function() {}; \" +\n            \"function g() { f(); }\", \"I like g...\",\n            DEPRECATED_NAME, DEPRECATED_NAME_REASON);\n  }\n",
        "begin_line": 102,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 105,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningInGlobalScope()",
        "snippet": "  public void testNoWarningInGlobalScope() {\n    testSame(\"var goog = {}; goog.makeSingleton = function(x) {};\" +\n        \"/** @deprecated */ function f() {} goog.makeSingleton(f);\");\n  }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 110,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningInGlobalScopeForCall()",
        "snippet": "  public void testNoWarningInGlobalScopeForCall() {\n    testDep(\"/** @deprecated %s */ function f() {} f();\",\n            \"Some global scope\", DEPRECATED_NAME, DEPRECATED_NAME_REASON);\n  }\n",
        "begin_line": 113,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 115,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningInDeprecatedFunction()",
        "snippet": "  public void testNoWarningInDeprecatedFunction() {\n    testSame(\"/** @deprecated */ function f() {} \" +\n             \"/** @deprecated */ function g() { f(); }\");\n  }\n",
        "begin_line": 118,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 120,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningInNormalClass()",
        "snippet": "  public void testWarningInNormalClass() {\n    testDep(\"/** @deprecated %s */ function f() {}\" +\n            \"/** @constructor */  var Foo = function() {}; \" +\n            \"Foo.prototype.bar = function() { f(); }\",\n            \"FooBar\", DEPRECATED_NAME, DEPRECATED_NAME_REASON);\n  }\n",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 127,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForProperty1()",
        "snippet": "  public void testWarningForProperty1() {\n    testDep(\"/** @constructor */ function Foo() {}\" +\n            \"/** @deprecated %s */ Foo.prototype.bar = 3;\" +\n            \"Foo.prototype.baz = function() { alert((new Foo()).bar); };\",\n            \"A property is bad\",\n            DEPRECATED_PROP, DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 130,
        "end_line": 136,
        "comment": "",
        "child_ranges": [
            "(line 131,col 5)-(line 135,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForProperty2()",
        "snippet": "  public void testWarningForProperty2() {\n    testDep(\"/** @constructor */ function Foo() {}\" +\n            \"/** @deprecated %s */ Foo.prototype.bar = 3;\" +\n            \"Foo.prototype.baz = function() { alert(this.bar); };\",\n            \"Zee prop, it is deprecated!\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 138,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 139,col 5)-(line 144,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForDeprecatedClass()",
        "snippet": "  public void testWarningForDeprecatedClass() {\n    testDep(\"/** @constructor \\n* @deprecated %s */ function Foo() {} \" +\n            \"function f() { new Foo(); }\",\n            \"Use the class 'Bar'\",\n            DEPRECATED_CLASS,\n            DEPRECATED_CLASS_REASON);\n  }\n",
        "begin_line": 147,
        "end_line": 153,
        "comment": "",
        "child_ranges": [
            "(line 148,col 5)-(line 152,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningForDeprecatedClassInstance()",
        "snippet": "  public void testNoWarningForDeprecatedClassInstance() {\n    testSame(\"/** @constructor \\n * @deprecated */ function Foo() {} \" +\n             \"/** @param {Foo} x */ function f(x) { return x; }\");\n  }\n",
        "begin_line": 155,
        "end_line": 158,
        "comment": "",
        "child_ranges": [
            "(line 156,col 5)-(line 157,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForDeprecatedSuperClass()",
        "snippet": "  public void testWarningForDeprecatedSuperClass() {\n    testDep(\"/** @constructor \\n * @deprecated %s */ function Foo() {} \" +\n            \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n            \"function f() { new SubFoo(); }\",\n            \"Superclass to the rescue!\",\n            DEPRECATED_CLASS,\n            DEPRECATED_CLASS_REASON);\n  }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 161,col 5)-(line 166,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForDeprecatedSuperClass2()",
        "snippet": "  public void testWarningForDeprecatedSuperClass2() {\n    testDep(\"/** @constructor \\n * @deprecated %s */ function Foo() {} \" +\n            \"var namespace = {}; \" +\n            \"/** @constructor \\n * @extends {Foo} */ \" +\n            \"namespace.SubFoo = function() {}; \" +\n            \"function f() { new namespace.SubFoo(); }\",\n            \"Its only weakness is Kryptoclass\",\n            DEPRECATED_CLASS,\n            DEPRECATED_CLASS_REASON);\n  }\n",
        "begin_line": 169,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 170,col 5)-(line 177,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForPrototypeProperty()",
        "snippet": "  public void testWarningForPrototypeProperty() {\n    testDep(\"/** @constructor */ function Foo() {}\" +\n            \"/** @deprecated %s */ Foo.prototype.bar = 3;\" +\n            \"Foo.prototype.baz = function() { alert(Foo.prototype.bar); };\",\n            \"It is now in production, use that model...\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 180,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 181,col 5)-(line 186,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningForNumbers()",
        "snippet": "  public void testNoWarningForNumbers() {\n    testSame(\"/** @constructor */ function Foo() {}\" +\n             \"/** @deprecated */ Foo.prototype.bar = 3;\" +\n             \"Foo.prototype.baz = function() { alert(3); };\");\n  }\n",
        "begin_line": 189,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 192,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForMethod1()",
        "snippet": "  public void testWarningForMethod1() {\n    testDep(\"/** @constructor */ function Foo() {}\" +\n            \"/** @deprecated %s */ Foo.prototype.bar = function() {};\" +\n            \"Foo.prototype.baz = function() { this.bar(); };\",\n            \"There is a madness to this method\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 195,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 201,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForMethod2()",
        "snippet": "  public void testWarningForMethod2() {\n    testDep(\"/** @constructor */ function Foo() {} \" +\n            \"/** @deprecated %s */ Foo.prototype.bar; \" +\n            \"Foo.prototype.baz = function() { this.bar(); };\",\n            \"Stop the ringing!\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 204,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 210,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningInDeprecatedClass()",
        "snippet": "  public void testNoWarningInDeprecatedClass() {\n    testSame(\"/** @deprecated */ function f() {} \" +\n             \"/** @constructor \\n * @deprecated */ \" +\n             \"var Foo = function() {}; \" +\n             \"Foo.prototype.bar = function() { f(); }\");\n  }\n",
        "begin_line": 213,
        "end_line": 218,
        "comment": "",
        "child_ranges": [
            "(line 214,col 5)-(line 217,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningInDeprecatedClass2()",
        "snippet": "  public void testNoWarningInDeprecatedClass2() {\n    testSame(\"/** @deprecated */ function f() {} \" +\n             \"/** @constructor \\n * @deprecated */ \" +\n             \"var Foo = function() {}; \" +\n             \"Foo.bar = function() { f(); }\");\n  }\n",
        "begin_line": 220,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 221,col 5)-(line 224,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningInDeprecatedStaticMethod()",
        "snippet": "  public void testNoWarningInDeprecatedStaticMethod() {\n    testSame(\"/** @deprecated */ function f() {} \" +\n             \"/** @constructor */ \" +\n             \"var Foo = function() {}; \" +\n             \"/** @deprecated */ Foo.bar = function() { f(); }\");\n  }\n",
        "begin_line": 227,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 231,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningInStaticMethod()",
        "snippet": "  public void testWarningInStaticMethod() {\n    testDep(\"/** @deprecated %s */ function f() {} \" +\n            \"/** @constructor */ \" +\n            \"var Foo = function() {}; \" +\n            \"Foo.bar = function() { f(); }\",\n            \"crazy!\",\n            DEPRECATED_NAME,\n            DEPRECATED_NAME_REASON);\n  }\n",
        "begin_line": 234,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 241,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testDeprecatedObjLitKey()",
        "snippet": "  public void testDeprecatedObjLitKey() {\n    testDep(\"var f = {}; /** @deprecated %s */ f.foo = 3; \" +\n            \"function g() { return f.foo; }\",\n            \"It is literally not used anymore\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 244,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 245,col 5)-(line 249,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForSubclassMethod()",
        "snippet": "  public void testWarningForSubclassMethod() {\n    testDep(\"/** @constructor */ function Foo() {}\" +\n            \"Foo.prototype.bar = function() {};\" +\n            \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n            \"/** @deprecated %s */ SubFoo.prototype.bar = function() {};\" +\n            \"function f() { (new SubFoo()).bar(); };\",\n            \"I have a parent class!\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 252,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 253,col 5)-(line 260,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForSuperClassWithDeprecatedSubclassMethod()",
        "snippet": "  public void testWarningForSuperClassWithDeprecatedSubclassMethod() {\n    testSame(\"/** @constructor */ function Foo() {}\" +\n             \"Foo.prototype.bar = function() {};\" +\n             \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n             \"/** @deprecated \\n * @override */ SubFoo.prototype.bar = \" +\n             \"function() {};\" +\n             \"function f() { (new Foo()).bar(); };\");\n  }\n",
        "begin_line": 263,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 269,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForSuperclassMethod()",
        "snippet": "  public void testWarningForSuperclassMethod() {\n    testDep(\"/** @constructor */ function Foo() {}\" +\n            \"/** @deprecated %s */ Foo.prototype.bar = function() {};\" +\n            \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n            \"SubFoo.prototype.bar = function() {};\" +\n            \"function f() { (new SubFoo()).bar(); };\",\n            \"I have a child class!\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 272,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 273,col 5)-(line 280,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForSuperclassMethod2()",
        "snippet": "  public void testWarningForSuperclassMethod2() {\n    testDep(\"/** @constructor */ function Foo() {}\" +\n            \"/** @deprecated %s \\n* @protected */\" +\n            \"Foo.prototype.bar = function() {};\" +\n            \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n            \"/** @protected */SubFoo.prototype.bar = function() {};\" +\n            \"function f() { (new SubFoo()).bar(); };\",\n            \"I have another child class...\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 283,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 284,col 5)-(line 292,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForBind()",
        "snippet": "  public void testWarningForBind() {\n    testDep(\"/** @deprecated %s */ Function.prototype.bind = function() {};\" +\n            \"(function() {}).bind();\",\n            \"I'm bound to this method...\",\n            DEPRECATED_PROP,\n            DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 295,
        "end_line": 301,
        "comment": "",
        "child_ranges": [
            "(line 296,col 5)-(line 300,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testWarningForDeprecatedClassInGlobalScope()",
        "snippet": "  public void testWarningForDeprecatedClassInGlobalScope() {\n    testDep(\"/** @constructor \\n * @deprecated %s */ var Foo = function() {};\" +\n            \"new Foo();\",\n            \"I'm a very worldly object!\",\n            DEPRECATED_CLASS,\n            DEPRECATED_CLASS_REASON);\n  }\n",
        "begin_line": 303,
        "end_line": 309,
        "comment": "",
        "child_ranges": [
            "(line 304,col 5)-(line 308,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningForPrototypeCopying()",
        "snippet": "  public void testNoWarningForPrototypeCopying() {\n    testSame(\"/** @constructor */ var Foo = function() {};\" +\n             \"Foo.prototype.bar = function() {};\" +\n             \"/** @deprecated */ Foo.prototype.baz = Foo.prototype.bar;\" +\n             \"(new Foo()).bar();\");\n  }\n",
        "begin_line": 311,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 312,col 5)-(line 315,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoWarningOnDeprecatedPrototype()",
        "snippet": "  public void testNoWarningOnDeprecatedPrototype() {\n    // This used to cause an NPE.\n    testSame(\"/** @constructor */ var Foo = function() {};\" +\n        \"/** @deprecated */ Foo.prototype = {};\" +\n        \"Foo.prototype.bar = function() {};\");\n  }\n",
        "begin_line": 318,
        "end_line": 323,
        "comment": "",
        "child_ranges": [
            "(line 320,col 5)-(line 322,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testPrivateAccessForNames()",
        "snippet": "  public void testPrivateAccessForNames() {\n    testSame(\"/** @private */ function foo_() {}; foo_();\");\n    test(new String[] {\n      \"/** @private */ function foo_() {};\",\n      \"foo_();\"\n    }, null, BAD_PRIVATE_GLOBAL_ACCESS);\n  }\n",
        "begin_line": 325,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 326,col 5)-(line 326,col 60)",
            "(line 327,col 5)-(line 330,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testPrivateAccessForProperties1()",
        "snippet": "  public void testPrivateAccessForProperties1() {\n    testSame(\"/** @constructor */ function Foo() {}\" +\n        \"/** @private */ Foo.prototype.bar_ = function() {};\" +\n        \"Foo.prototype.baz = function() { this.bar_(); }; (new Foo).bar_();\");\n  }\n",
        "begin_line": 333,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 336,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testPrivateAccessForProperties2()",
        "snippet": "  public void testPrivateAccessForProperties2() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"/** @private */ Foo.prototype.bar_ = function() {};\" +\n      \"Foo.prototype.baz = function() { this.bar_(); }; (new Foo).bar_();\"\n    });\n  }\n",
        "begin_line": 339,
        "end_line": 345,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 344,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testPrivateAccessForProperties3()",
        "snippet": "  public void testPrivateAccessForProperties3() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {}\" +\n      \"/** @private */ Foo.prototype.bar_ = function() {}; (new Foo).bar_();\",\n      \"Foo.prototype.baz = function() { this.bar_(); };\"\n    });\n  }\n",
        "begin_line": 347,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 348,col 5)-(line 352,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties1()",
        "snippet": "  public void testNoPrivateAccessForProperties1() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} (new Foo).bar_();\",\n      \"/** @private */ Foo.prototype.bar_ = function() {};\" +\n      \"Foo.prototype.baz = function() { this.bar_(); };\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 355,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 356,col 5)-(line 360,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties2()",
        "snippet": "  public void testNoPrivateAccessForProperties2() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @private */ Foo.prototype.bar_ = function() {};\" +\n      \"Foo.prototype.baz = function() { this.bar_(); };\",\n      \"(new Foo).bar_();\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 363,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 369,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties3()",
        "snippet": "  public void testNoPrivateAccessForProperties3() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @private */ Foo.prototype.bar_ = function() {};\",\n      \"/** @constructor */ function OtherFoo() { (new Foo).bar_(); }\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 373,col 5)-(line 377,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties4()",
        "snippet": "  public void testNoPrivateAccessForProperties4() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @private */ Foo.prototype.bar_ = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() { this.bar_(); }\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 380,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 381,col 5)-(line 386,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties5()",
        "snippet": "  public void testNoPrivateAccessForProperties5() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @private */ Foo.prototype.bar_ = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {};\" +\n      \"SubFoo.prototype.baz = function() { this.bar_(); }\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 389,
        "end_line": 397,
        "comment": "",
        "child_ranges": [
            "(line 390,col 5)-(line 396,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties6()",
        "snippet": "  public void testNoPrivateAccessForProperties6() {\n    // Overriding a private property with a non-private property\n    // in a different file causes problems.\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @private */ Foo.prototype.bar_ = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {};\" +\n      \"SubFoo.prototype.bar_ = function() {};\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 399,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 402,col 5)-(line 408,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties7()",
        "snippet": "  public void testNoPrivateAccessForProperties7() {\n    // It's ok to override a private property with a non-private property\n    // in the same file, but you'll get yelled at when you try to use it.\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @private */ Foo.prototype.bar_ = function() {};\" +\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {};\" +\n      \"SubFoo.prototype.bar_ = function() {};\",\n      \"SubFoo.prototype.baz = function() { this.bar_(); }\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 411,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 414,col 5)-(line 421,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoPrivateAccessForProperties8()",
        "snippet": "  public void testNoPrivateAccessForProperties8() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() { /** @private */ this.bar_ = 3; }\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() { /** @private */ this.bar_ = 3; };\"\n    }, null, PRIVATE_OVERRIDE);\n  }\n",
        "begin_line": 424,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 429,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testProtectedAccessForProperties1()",
        "snippet": "  public void testProtectedAccessForProperties1() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {}\" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\" +\n      \"(new Foo).bar();\",\n      \"Foo.prototype.baz = function() { this.bar(); };\"\n    });\n  }\n",
        "begin_line": 432,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 433,col 5)-(line 438,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testProtectedAccessForProperties2()",
        "snippet": "  public void testProtectedAccessForProperties2() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {}\" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\" +\n      \"(new Foo).bar();\",\n      \"/** @constructor \\n * @extends {Foo} */\" +\n      \"function SubFoo() { this.bar(); }\"\n    });\n  }\n",
        "begin_line": 441,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 448,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testProtectedAccessForProperties3()",
        "snippet": "  public void testProtectedAccessForProperties3() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {}\" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\" +\n      \"(new Foo).bar();\",\n      \"/** @constructor \\n * @extends {Foo} */\" +\n      \"function SubFoo() { }\" +\n      \"SubFoo.baz = function() { (new Foo).bar(); }\"\n    });\n  }\n",
        "begin_line": 451,
        "end_line": 460,
        "comment": "",
        "child_ranges": [
            "(line 452,col 5)-(line 459,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testProtectedAccessForProperties4()",
        "snippet": "  public void testProtectedAccessForProperties4() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {}\" +\n      \"/** @protected */ Foo.bar = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */\" +\n      \"function SubFoo() { Foo.bar(); }\"\n    });\n  }\n",
        "begin_line": 462,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 463,col 5)-(line 468,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testProtectedAccessForProperties5()",
        "snippet": "  public void testProtectedAccessForProperties5() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {}\" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\" +\n      \"(new Foo).bar();\",\n      \"/** @constructor \\n * @extends {Foo} */\" +\n      \"var SubFoo = function() { this.bar(); }\"\n    });\n  }\n",
        "begin_line": 471,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 472,col 5)-(line 478,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testProtectedAccessForProperties6()",
        "snippet": "  public void testProtectedAccessForProperties6() {\n    testSame(new String[] {\n      \"var goog = {};\" +\n      \"/** @constructor */ goog.Foo = function() {};\" +\n      \"/** @protected */ goog.Foo.prototype.bar = function() {};\",\n      \"/** @constructor \\n * @extends {goog.Foo} */\" +\n      \"goog.SubFoo = function() { this.bar(); };\"\n    });\n  }\n",
        "begin_line": 481,
        "end_line": 489,
        "comment": "",
        "child_ranges": [
            "(line 482,col 5)-(line 488,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoProtectedAccessForProperties1()",
        "snippet": "  public void testNoProtectedAccessForProperties1() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\",\n      \"(new Foo).bar();\"\n    }, null, BAD_PROTECTED_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 491,
        "end_line": 497,
        "comment": "",
        "child_ranges": [
            "(line 492,col 5)-(line 496,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoProtectedAccessForProperties2()",
        "snippet": "  public void testNoProtectedAccessForProperties2() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\",\n      \"/** @constructor */ function OtherFoo() { (new Foo).bar(); }\"\n    }, null, BAD_PROTECTED_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 499,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 500,col 5)-(line 504,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoProtectedAccessForProperties3()",
        "snippet": "  public void testNoProtectedAccessForProperties3() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {}\" +\n      \"/** @protected */ SubFoo.prototype.bar = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubberFoo() { (new SubFoo).bar(); }\"\n    }, null, BAD_PROTECTED_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 507,
        "end_line": 516,
        "comment": "",
        "child_ranges": [
            "(line 508,col 5)-(line 515,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoProtectedAccessForProperties4()",
        "snippet": "  public void testNoProtectedAccessForProperties4() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() { (new SubFoo).bar(); } \",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {}\" +\n      \"/** @protected */ SubFoo.prototype.bar = function() {};\",\n    }, null, BAD_PROTECTED_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 518,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 519,col 5)-(line 524,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoProtectedAccessForProperties5()",
        "snippet": "  public void testNoProtectedAccessForProperties5() {\n    test(new String[] {\n      \"var goog = {};\" +\n      \"/** @constructor */ goog.Foo = function() {};\" +\n      \"/** @protected */ goog.Foo.prototype.bar = function() {};\",\n      \"/** @constructor */\" +\n      \"goog.NotASubFoo = function() { (new goog.Foo).bar(); };\"\n    }, null, BAD_PROTECTED_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 527,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 528,col 5)-(line 534,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoExceptionsWithBadConstructors1()",
        "snippet": "  public void testNoExceptionsWithBadConstructors1() {\n    testSame(new String[] {\n      \"function Foo() { (new SubFoo).bar(); } \" +\n      \"/** @constructor */ function SubFoo() {}\" +\n      \"/** @protected */ SubFoo.prototype.bar = function() {};\"\n    });\n  }\n",
        "begin_line": 537,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 538,col 5)-(line 542,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNoExceptionsWithBadConstructors2()",
        "snippet": "  public void testNoExceptionsWithBadConstructors2() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() {} \" +\n      \"Foo.prototype.bar = function() {};\" +\n      \"/** @constructor */\" +\n      \"function SubFoo() {}\" +\n      \"/** @protected */ \" +\n      \"SubFoo.prototype.bar = function() { (new Foo).bar(); };\"\n    });\n  }\n",
        "begin_line": 545,
        "end_line": 554,
        "comment": "",
        "child_ranges": [
            "(line 546,col 5)-(line 553,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testGoodOverrideOfProtectedProperty()",
        "snippet": "  public void testGoodOverrideOfProtectedProperty() {\n    testSame(new String[] {\n      \"/** @constructor */ function Foo() { } \" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {}\" +\n      \"/** @inheritDoc */ SubFoo.prototype.bar = function() {};\",\n    });\n  }\n",
        "begin_line": 556,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 557,col 5)-(line 563,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testBadOverrideOfProtectedProperty()",
        "snippet": "  public void testBadOverrideOfProtectedProperty() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() { } \" +\n      \"/** @protected */ Foo.prototype.bar = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {}\" +\n      \"/** @private */ SubFoo.prototype.bar = function() {};\",\n    }, null, VISIBILITY_MISMATCH);\n  }\n",
        "begin_line": 566,
        "end_line": 574,
        "comment": "",
        "child_ranges": [
            "(line 567,col 5)-(line 573,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testBadOverrideOfPrivateProperty()",
        "snippet": "  public void testBadOverrideOfPrivateProperty() {\n    test(new String[] {\n      \"/** @constructor */ function Foo() { } \" +\n      \"/** @private */ Foo.prototype.bar = function() {};\",\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {}\" +\n      \"/** @protected */ SubFoo.prototype.bar = function() {};\",\n    }, null, PRIVATE_OVERRIDE);\n  }\n",
        "begin_line": 576,
        "end_line": 584,
        "comment": "",
        "child_ranges": [
            "(line 577,col 5)-(line 583,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testAccessOfStaticMethodOnPrivateConstructor()",
        "snippet": "  public void testAccessOfStaticMethodOnPrivateConstructor() {\n    testSame(new String[] {\n      \"/** @constructor \\n * @private */ function Foo() { } \" +\n      \"Foo.create = function() { return new Foo(); };\",\n      \"Foo.create()\",\n    });\n  }\n",
        "begin_line": 586,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 587,col 5)-(line 591,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testAccessOfStaticMethodOnPrivateQualifiedConstructor()",
        "snippet": "  public void testAccessOfStaticMethodOnPrivateQualifiedConstructor() {\n    testSame(new String[] {\n      \"var goog = {};\" +\n      \"/** @constructor \\n * @private */ goog.Foo = function() { }; \" +\n      \"goog.Foo.create = function() { return new goog.Foo(); };\",\n      \"goog.Foo.create()\",\n    });\n  }\n",
        "begin_line": 594,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 600,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testInstanceofOfPrivateConstructor()",
        "snippet": "  public void testInstanceofOfPrivateConstructor() {\n    testSame(new String[] {\n      \"var goog = {};\" +\n      \"/** @constructor \\n * @private */ goog.Foo = function() { }; \" +\n      \"goog.Foo.create = function() { return new goog.Foo(); };\",\n      \"goog instanceof goog.Foo\",\n    });\n  }\n",
        "begin_line": 603,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 609,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testOkAssignmentOfDeprecatedProperty()",
        "snippet": "  public void testOkAssignmentOfDeprecatedProperty() {\n    testSame(\n        \"/** @constructor */ function Foo() {\" +\n        \" /** @deprecated */ this.bar = 3;\" +\n        \"}\");\n  }\n",
        "begin_line": 612,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 613,col 5)-(line 616,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testBadReadOfDeprecatedProperty()",
        "snippet": "  public void testBadReadOfDeprecatedProperty() {\n    testDep(\n        \"/** @constructor */ function Foo() {\" +\n        \" /** @deprecated %s */ this.bar = 3;\" +\n        \"  this.baz = this.bar;\" +\n        \"}\",\n        \"GRR\",\n        DEPRECATED_PROP,\n        DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 619,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 620,col 5)-(line 627,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testAutoboxedDeprecatedProperty()",
        "snippet": "  public void testAutoboxedDeprecatedProperty() {\n    testDep(\n        \"/** @constructor */ function String() {}\" +\n        \"/** @deprecated %s */ String.prototype.length;\" +\n        \"function f() { return 'x'.length; }\",\n        \"GRR\",\n        DEPRECATED_PROP,\n        DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 630,
        "end_line": 638,
        "comment": "",
        "child_ranges": [
            "(line 631,col 5)-(line 637,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testAutoboxedPrivateProperty()",
        "snippet": "  public void testAutoboxedPrivateProperty() {\n    test(new String[] {\n        \"/** @constructor */ function String() {}\" +\n        \"/** @private */ String.prototype.length;\",\n        \"function f() { return 'x'.length; }\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 640,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 641,col 5)-(line 645,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNullableDeprecatedProperty()",
        "snippet": "  public void testNullableDeprecatedProperty() {\n    testDep(\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @deprecated %s */ Foo.prototype.length;\" +\n        \"/** @param {?Foo} x */ function f(x) { return x.length; }\",\n        \"GRR\",\n        DEPRECATED_PROP,\n        DEPRECATED_PROP_REASON);\n  }\n",
        "begin_line": 648,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 655,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testNullablePrivateProperty()",
        "snippet": "  public void testNullablePrivateProperty() {\n    test(new String[] {\n        \"/** @constructor */ function Foo() {}\" +\n        \"/** @private */ Foo.prototype.length;\",\n        \"/** @param {?Foo} x */ function f(x) { return x.length; }\"\n    }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n  }\n",
        "begin_line": 658,
        "end_line": 664,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 663,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty1()",
        "snippet": "  public void testConstantProperty1() {\n    test(\"/** @constructor */ function A() {\" +\n        \"/** @const */ this.bar = 3;}\" +\n        \"/** @constructor */ function B() {\" +\n        \"/** @const */ this.bar = 3;this.bar += 4;}\",\n        null, CONST_PROPERTY_REASSIGNED_VALUE);\n  }\n",
        "begin_line": 666,
        "end_line": 672,
        "comment": "",
        "child_ranges": [
            "(line 667,col 5)-(line 671,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty2()",
        "snippet": "  public void testConstantProperty2() {\n    test(\"/** @constructor */ function Foo() {}\" +\n        \"/** @const */ Foo.prototype.prop = 2;\" +\n        \"var foo = new Foo();\" +\n        \"foo.prop = 3;\",\n        null , CONST_PROPERTY_REASSIGNED_VALUE);\n  }\n",
        "begin_line": 674,
        "end_line": 680,
        "comment": "",
        "child_ranges": [
            "(line 675,col 5)-(line 679,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty3()",
        "snippet": "  public void testConstantProperty3() {\n    testSame(\"var o = { /** @const */ x: 1 };\" +\n        \"o.x = 2;\");\n  }\n",
        "begin_line": 682,
        "end_line": 685,
        "comment": "",
        "child_ranges": [
            "(line 683,col 5)-(line 684,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty4()",
        "snippet": "  public void testConstantProperty4() {\n    test(\"/** @constructor */ function cat(name) {}\" +\n        \"/** @const */ cat.test = 1;\" +\n        \"cat.test *= 2;\",\n        null, CONST_PROPERTY_REASSIGNED_VALUE);\n  }\n",
        "begin_line": 687,
        "end_line": 692,
        "comment": "",
        "child_ranges": [
            "(line 688,col 5)-(line 691,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty5()",
        "snippet": "  public void testConstantProperty5() {\n    test(\"/** @constructor */ function Foo() { this.prop = 1;}\" +\n        \"/** @const */ Foo.prototype.prop;\" +\n        \"Foo.prototype.prop = 2\",\n        null , CONST_PROPERTY_REASSIGNED_VALUE);\n  }\n",
        "begin_line": 694,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 695,col 5)-(line 698,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty6()",
        "snippet": "  public void testConstantProperty6() {\n    test(\"/** @constructor */ function Foo() { this.prop = 1;}\" +\n        \"/** @const */ Foo.prototype.prop = 2;\",\n        null , CONST_PROPERTY_REASSIGNED_VALUE);\n  }\n",
        "begin_line": 701,
        "end_line": 705,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 704,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty7()",
        "snippet": "  public void testConstantProperty7() {\n    testSame(\"/** @constructor */ function Foo() {} \" +\n      \"Foo.prototype.bar_ = function() {};\" +\n      \"/** @constructor \\n * @extends {Foo} */ \" +\n      \"function SubFoo() {};\" +\n      \"/** @const */ /** @override */ SubFoo.prototype.bar_ = function() {};\" +\n      \"SubFoo.prototype.baz = function() { this.bar_(); }\");\n  }\n",
        "begin_line": 707,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 708,col 5)-(line 713,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty8()",
        "snippet": "  public void testConstantProperty8() {\n    testSame(\"var o = { /** @const */ x: 1 };\" +\n        \"var y = o.x;\");\n  }\n",
        "begin_line": 716,
        "end_line": 719,
        "comment": "",
        "child_ranges": [
            "(line 717,col 5)-(line 718,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty9()",
        "snippet": "  public void testConstantProperty9() {\n    testSame(\"/** @constructor */ function A() {\" +\n        \"/** @const */ this.bar = 3;}\" +\n        \"/** @constructor */ function B() {\" +\n        \"this.bar = 4;}\");\n  }\n",
        "begin_line": 721,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 722,col 5)-(line 725,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testConstantProperty10()",
        "snippet": "  public void testConstantProperty10() {\n    testSame(\"/** @constructor */ function Foo() { this.prop = 1;}\" +\n        \"/** @const */ Foo.prototype.prop;\");\n  }\n",
        "begin_line": 728,
        "end_line": 731,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 730,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccessControlsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CheckAccessControlsTest.java",
        "signature": "com.google.javascript.jscomp.CheckAccessControlsTest.testSuppressConstantProperty()",
        "snippet": "  public void testSuppressConstantProperty() {\n    testSame(\"/** @constructor */ function A() {\" +\n        \"/** @const */ this.bar = 3;}\" +\n        \"/**\\n\" +\n        \" * @suppress {constantProperty}\\n\" +\n        \" * @constructor\\n\" +\n        \" */ function B() {\" +\n        \"/** @const */ this.bar = 3;this.bar += 4;}\");\n  }\n",
        "begin_line": 733,
        "end_line": 741,
        "comment": "",
        "child_ranges": [
            "(line 734,col 5)-(line 740,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 119,col 5)-(line 121,col 6)",
            "(line 122,col 5)-(line 122,col 39)",
            "(line 123,col 5)-(line 123,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 156,
        "end_line": 171,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 52)",
            "(line 159,col 5)-(line 161,col 5)",
            "(line 165,col 5)-(line 165,col 32)",
            "(line 167,col 5)-(line 168,col 65)",
            "(line 169,col 5)-(line 169,col 55)",
            "(line 170,col 5)-(line 170,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 181,
        "end_line": 185,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 29)",
            "(line 221,col 5)-(line 221,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 28)",
            "(line 260,col 5)-(line 260,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 288,
        "end_line": 296,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 290,col 5)-(line 292,col 40)",
            "(line 294,col 5)-(line 295,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 362,
        "end_line": 365,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 381,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 384,col 5)-(line 386,col 6)",
            "(line 387,col 5)-(line 387,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 424,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 41)",
            "(line 408,col 5)-(line 408,col 28)",
            "(line 410,col 5)-(line 410,col 43)",
            "(line 412,col 5)-(line 414,col 5)",
            "(line 417,col 5)-(line 417,col 39)",
            "(line 418,col 5)-(line 419,col 58)",
            "(line 421,col 5)-(line 421,col 71)",
            "(line 423,col 5)-(line 423,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 458,
        "end_line": 461,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 476,
        "end_line": 487,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 41)",
            "(line 479,col 5)-(line 479,col 28)",
            "(line 481,col 5)-(line 481,col 56)",
            "(line 482,col 5)-(line 484,col 5)",
            "(line 485,col 5)-(line 485,col 55)",
            "(line 486,col 5)-(line 486,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 507,
        "end_line": 510,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 529,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 41)",
            "(line 525,col 5)-(line 525,col 28)",
            "(line 527,col 5)-(line 527,col 56)",
            "(line 528,col 5)-(line 528,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 537,col 5)-(line 537,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 547,
        "end_line": 549,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 548,col 5)-(line 548,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 559,
        "end_line": 565,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 564,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 588,
        "end_line": 595,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 590,col 5)-(line 594,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 608,
        "end_line": 614,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 612,col 6)",
            "(line 613,col 5)-(line 613,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 621,
        "end_line": 623,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 622,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 632,
        "end_line": 634,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 633,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 644,
        "end_line": 647,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 646,col 5)-(line 646,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 664,
        "end_line": 677,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 665,col 5)-(line 676,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 690,
        "end_line": 693,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 692,col 5)-(line 692,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 710,
        "end_line": 916,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 713,col 5)-(line 713,col 51)",
            "(line 714,col 5)-(line 714,col 44)",
            "(line 716,col 5)-(line 716,col 39)",
            "(line 717,col 5)-(line 718,col 66)",
            "(line 720,col 5)-(line 722,col 5)",
            "(line 723,col 5)-(line 723,col 44)",
            "(line 724,col 5)-(line 724,col 40)",
            "(line 727,col 5)-(line 727,col 38)",
            "(line 728,col 5)-(line 728,col 54)",
            "(line 729,col 5)-(line 729,col 50)",
            "(line 731,col 5)-(line 731,col 45)",
            "(line 732,col 5)-(line 732,col 68)",
            "(line 733,col 5)-(line 733,col 34)",
            "(line 734,col 5)-(line 734,col 59)",
            "(line 735,col 5)-(line 735,col 35)",
            "(line 737,col 5)-(line 738,col 39)",
            "(line 740,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 915,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 918,
        "end_line": 922,
        "comment": "",
        "child_ranges": [
            "(line 920,col 5)-(line 920,col 57)",
            "(line 921,col 5)-(line 921,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 927,
        "end_line": 945,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 928,col 5)-(line 928,col 41)",
            "(line 929,col 5)-(line 929,col 62)",
            "(line 930,col 5)-(line 932,col 5)",
            "(line 933,col 5)-(line 933,col 55)",
            "(line 934,col 5)-(line 934,col 39)",
            "(line 935,col 5)-(line 936,col 66)",
            "(line 937,col 5)-(line 937,col 44)",
            "(line 938,col 5)-(line 938,col 42)",
            "(line 940,col 5)-(line 943,col 5)",
            "(line 944,col 5)-(line 944,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 947,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 47)",
            "(line 957,col 5)-(line 959,col 5)",
            "(line 960,col 5)-(line 960,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 967,
        "end_line": 973,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 47)",
            "(line 969,col 5)-(line 971,col 5)",
            "(line 972,col 5)-(line 972,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 980,
        "end_line": 987,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 981,col 5)-(line 981,col 48)",
            "(line 982,col 5)-(line 982,col 47)",
            "(line 983,col 5)-(line 985,col 5)",
            "(line 986,col 5)-(line 986,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 994,
        "end_line": 1000,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 995,col 5)-(line 995,col 47)",
            "(line 996,col 5)-(line 998,col 5)",
            "(line 999,col 5)-(line 999,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1006,
        "end_line": 1013,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1007,col 5)-(line 1007,col 53)",
            "(line 1008,col 5)-(line 1011,col 5)",
            "(line 1012,col 5)-(line 1012,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1016,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 7)-(line 1017,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1020,
        "end_line": 1021,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1023,
        "end_line": 1024,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1027,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1028,col 5)-(line 1028,col 39)",
            "(line 1029,col 5)-(line 1029,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1037,
        "end_line": 1049,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 52)",
            "(line 1039,col 5)-(line 1047,col 39)",
            "(line 1048,col 5)-(line 1048,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.CheckAccessControlsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-02e32908-9b1b-4a35-bec4-cccf18b836f4.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1041,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 13)-(line 1044,col 13)"
        ]
    }
]