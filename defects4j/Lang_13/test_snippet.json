[
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.SerializationUtilsTest(java.lang.String)",
        "snippet": "    public SerializationUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 47,
        "end_line": 49,
        "comment": "",
        "child_ranges": [
            "(line 48,col 9)-(line 48,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        iString = \"foo\";\n        iInteger = Integer.valueOf(7);\n        iMap = new HashMap<Object, Object>();\n        iMap.put(\"FOO\", iString);\n        iMap.put(\"BAR\", iInteger);\n    }\n",
        "begin_line": 51,
        "end_line": 60,
        "comment": "",
        "child_ranges": [
            "(line 53,col 9)-(line 53,col 22)",
            "(line 55,col 9)-(line 55,col 24)",
            "(line 56,col 9)-(line 56,col 38)",
            "(line 57,col 9)-(line 57,col 45)",
            "(line 58,col 9)-(line 58,col 33)",
            "(line 59,col 9)-(line 59,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new SerializationUtils());\n        Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));\n    }\n",
        "begin_line": 63,
        "end_line": 70,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 48)",
            "(line 65,col 9)-(line 65,col 83)",
            "(line 66,col 9)-(line 66,col 37)",
            "(line 67,col 9)-(line 67,col 70)",
            "(line 68,col 9)-(line 68,col 87)",
            "(line 69,col 9)-(line 69,col 87)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testException()",
        "snippet": "    public void testException() {\n        SerializationException serEx;\n        Exception ex = new Exception();\n        \n        serEx = new SerializationException();\n        assertSame(null, serEx.getMessage());\n        assertSame(null, serEx.getCause());\n        \n        serEx = new SerializationException(\"Message\");\n        assertSame(\"Message\", serEx.getMessage());\n        assertSame(null, serEx.getCause());\n        \n        serEx = new SerializationException(ex);\n        assertEquals(\"java.lang.Exception\", serEx.getMessage());\n        assertSame(ex, serEx.getCause());\n        \n        serEx = new SerializationException(\"Message\", ex);\n        assertSame(\"Message\", serEx.getMessage());\n        assertSame(ex, serEx.getCause());\n    }\n",
        "begin_line": 72,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 73,col 9)-(line 73,col 37)",
            "(line 74,col 9)-(line 74,col 39)",
            "(line 76,col 9)-(line 76,col 45)",
            "(line 77,col 9)-(line 77,col 45)",
            "(line 78,col 9)-(line 78,col 43)",
            "(line 80,col 9)-(line 80,col 54)",
            "(line 81,col 9)-(line 81,col 50)",
            "(line 82,col 9)-(line 82,col 43)",
            "(line 84,col 9)-(line 84,col 47)",
            "(line 85,col 9)-(line 85,col 64)",
            "(line 86,col 9)-(line 86,col 41)",
            "(line 88,col 9)-(line 88,col 58)",
            "(line 89,col 9)-(line 89,col 50)",
            "(line 90,col 9)-(line 90,col 41)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStream()",
        "snippet": "    public void testSerializeStream() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        SerializationUtils.serialize(iMap, streamTest);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        byte[] testBytes = streamTest.toByteArray();\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }\n",
        "begin_line": 94,
        "end_line": 110,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 95,col 9)-(line 95,col 71)",
            "(line 96,col 9)-(line 96,col 55)",
            "(line 98,col 9)-(line 98,col 71)",
            "(line 99,col 9)-(line 99,col 68)",
            "(line 100,col 9)-(line 100,col 30)",
            "(line 101,col 9)-(line 101,col 20)",
            "(line 102,col 9)-(line 102,col 20)",
            "(line 104,col 9)-(line 104,col 52)",
            "(line 105,col 9)-(line 105,col 52)",
            "(line 106,col 9)-(line 106,col 57)",
            "(line 107,col 9)-(line 109,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamUnserializable()",
        "snippet": "    public void testSerializeStreamUnserializable() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.serialize(iMap, streamTest);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 112,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 71)",
            "(line 114,col 9)-(line 119,col 9)",
            "(line 120,col 9)-(line 120,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullObj()",
        "snippet": "    public void testSerializeStreamNullObj() throws Exception {\n        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n        SerializationUtils.serialize(null, streamTest);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        byte[] testBytes = streamTest.toByteArray();\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }\n",
        "begin_line": 123,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 71)",
            "(line 125,col 9)-(line 125,col 55)",
            "(line 127,col 9)-(line 127,col 71)",
            "(line 128,col 9)-(line 128,col 68)",
            "(line 129,col 9)-(line 129,col 30)",
            "(line 130,col 9)-(line 130,col 20)",
            "(line 131,col 9)-(line 131,col 20)",
            "(line 133,col 9)-(line 133,col 52)",
            "(line 134,col 9)-(line 134,col 52)",
            "(line 135,col 9)-(line 135,col 57)",
            "(line 136,col 9)-(line 138,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamObjNull()",
        "snippet": "    public void testSerializeStreamObjNull() throws Exception {\n        try {\n            SerializationUtils.serialize(iMap, null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 141,
        "end_line": 148,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 146,col 9)",
            "(line 147,col 9)-(line 147,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeStreamNullNull()",
        "snippet": "    public void testSerializeStreamNullNull() throws Exception {\n        try {\n            SerializationUtils.serialize(null, null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 150,
        "end_line": 157,
        "comment": "",
        "child_ranges": [
            "(line 151,col 9)-(line 155,col 9)",
            "(line 156,col 9)-(line 156,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeIOException()",
        "snippet": "    public void testSerializeIOException() throws Exception {\n        // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\n        // in the finally block\n        OutputStream streamTest = new OutputStream() {\n            @Override\n            public void write(int arg0) throws IOException {\n                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n            }\n        };\n        try {\n            SerializationUtils.serialize(iMap, streamTest);\n        }\n        catch(SerializationException e) {\n            assertEquals(\"java.io.IOException: \" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());\n        }\n    }\n",
        "begin_line": 159,
        "end_line": 174,
        "comment": "",
        "child_ranges": [
            "(line 162,col 9)-(line 167,col 10)",
            "(line 168,col 9)-(line 173,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.Anonymous-ef6348b7-914c-4801-bf98-7aa349bdb66a.write(int)",
        "snippet": "            @Override\n            public void write(int arg0) throws IOException {\n                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n            }\n",
        "begin_line": 163,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 17)-(line 165,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStream()",
        "snippet": "    public void testDeserializeStream() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        Object test = SerializationUtils.deserialize(inTest);\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap<?, ?>);\n        assertTrue(test != iMap);\n        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }\n",
        "begin_line": 178,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 71)",
            "(line 180,col 9)-(line 180,col 68)",
            "(line 181,col 9)-(line 181,col 30)",
            "(line 182,col 9)-(line 182,col 20)",
            "(line 183,col 9)-(line 183,col 20)",
            "(line 185,col 9)-(line 185,col 89)",
            "(line 186,col 9)-(line 186,col 61)",
            "(line 187,col 9)-(line 187,col 28)",
            "(line 188,col 9)-(line 188,col 50)",
            "(line 189,col 9)-(line 189,col 33)",
            "(line 190,col 9)-(line 190,col 53)",
            "(line 191,col 9)-(line 191,col 50)",
            "(line 192,col 9)-(line 192,col 50)",
            "(line 193,col 9)-(line 193,col 51)",
            "(line 194,col 9)-(line 194,col 51)",
            "(line 195,col 9)-(line 195,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamOfNull()",
        "snippet": "    public void testDeserializeStreamOfNull() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        Object test = SerializationUtils.deserialize(inTest);\n        assertNull(test);\n    }\n",
        "begin_line": 198,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 71)",
            "(line 200,col 9)-(line 200,col 68)",
            "(line 201,col 9)-(line 201,col 30)",
            "(line 202,col 9)-(line 202,col 20)",
            "(line 203,col 9)-(line 203,col 20)",
            "(line 205,col 9)-(line 205,col 89)",
            "(line 206,col 9)-(line 206,col 61)",
            "(line 207,col 9)-(line 207,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamNull()",
        "snippet": "    public void testDeserializeStreamNull() throws Exception {\n        try {\n            SerializationUtils.deserialize((InputStream) null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 210,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 211,col 9)-(line 215,col 9)",
            "(line 216,col 9)-(line 216,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamBadStream()",
        "snippet": "    public void testDeserializeStreamBadStream() throws Exception {\n        try {\n            SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 219,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 220,col 9)-(line 224,col 9)",
            "(line 225,col 9)-(line 225,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeStreamClassNotFound()",
        "snippet": "    public void testDeserializeStreamClassNotFound() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(new ClassNotFoundSerialization());\n        oos.flush();\n        oos.close();\n\n        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n        try {\n            @SuppressWarnings(\"unused\")\n            Object test = SerializationUtils.deserialize(inTest);\n        } catch(SerializationException se) {\n            assertEquals(\"java.lang.ClassNotFoundException: \" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());\n        }\n    }\n",
        "begin_line": 228,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 229,col 9)-(line 229,col 71)",
            "(line 230,col 9)-(line 230,col 68)",
            "(line 231,col 9)-(line 231,col 58)",
            "(line 232,col 9)-(line 232,col 20)",
            "(line 233,col 9)-(line 233,col 20)",
            "(line 235,col 9)-(line 235,col 89)",
            "(line 236,col 9)-(line 241,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytes()",
        "snippet": "    public void testSerializeBytes() throws Exception {\n        byte[] testBytes = SerializationUtils.serialize(iMap);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }\n",
        "begin_line": 246,
        "end_line": 260,
        "comment": "",
        "child_ranges": [
            "(line 247,col 9)-(line 247,col 62)",
            "(line 249,col 9)-(line 249,col 71)",
            "(line 250,col 9)-(line 250,col 68)",
            "(line 251,col 9)-(line 251,col 30)",
            "(line 252,col 9)-(line 252,col 20)",
            "(line 253,col 9)-(line 253,col 20)",
            "(line 255,col 9)-(line 255,col 52)",
            "(line 256,col 9)-(line 256,col 57)",
            "(line 257,col 9)-(line 259,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesUnserializable()",
        "snippet": "    public void testSerializeBytesUnserializable() throws Exception {\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.serialize(iMap);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 262,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 263,col 9)-(line 268,col 9)",
            "(line 269,col 9)-(line 269,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testSerializeBytesNull()",
        "snippet": "    public void testSerializeBytesNull() throws Exception {\n        byte[] testBytes = SerializationUtils.serialize(null);\n\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        byte[] realBytes = streamReal.toByteArray();\n        assertEquals(testBytes.length, realBytes.length);\n        for (int i = 0; i < realBytes.length; i++) {\n            assertEquals(realBytes[i], testBytes[i]);\n        }\n    }\n",
        "begin_line": 272,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 273,col 9)-(line 273,col 62)",
            "(line 275,col 9)-(line 275,col 71)",
            "(line 276,col 9)-(line 276,col 68)",
            "(line 277,col 9)-(line 277,col 30)",
            "(line 278,col 9)-(line 278,col 20)",
            "(line 279,col 9)-(line 279,col 20)",
            "(line 281,col 9)-(line 281,col 52)",
            "(line 282,col 9)-(line 282,col 57)",
            "(line 283,col 9)-(line 285,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytes()",
        "snippet": "    public void testDeserializeBytes() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(iMap);\n        oos.flush();\n        oos.close();\n\n        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap<?, ?>);\n        assertTrue(test != iMap);\n        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }\n",
        "begin_line": 290,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 291,col 9)-(line 291,col 71)",
            "(line 292,col 9)-(line 292,col 68)",
            "(line 293,col 9)-(line 293,col 30)",
            "(line 294,col 9)-(line 294,col 20)",
            "(line 295,col 9)-(line 295,col 20)",
            "(line 297,col 9)-(line 297,col 79)",
            "(line 298,col 9)-(line 298,col 28)",
            "(line 299,col 9)-(line 299,col 50)",
            "(line 300,col 9)-(line 300,col 33)",
            "(line 301,col 9)-(line 301,col 53)",
            "(line 302,col 9)-(line 302,col 50)",
            "(line 303,col 9)-(line 303,col 50)",
            "(line 304,col 9)-(line 304,col 51)",
            "(line 305,col 9)-(line 305,col 51)",
            "(line 306,col 9)-(line 306,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesOfNull()",
        "snippet": "    public void testDeserializeBytesOfNull() throws Exception {\n        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n        oos.writeObject(null);\n        oos.flush();\n        oos.close();\n\n        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n        assertNull(test);\n    }\n",
        "begin_line": 309,
        "end_line": 318,
        "comment": "",
        "child_ranges": [
            "(line 310,col 9)-(line 310,col 71)",
            "(line 311,col 9)-(line 311,col 68)",
            "(line 312,col 9)-(line 312,col 30)",
            "(line 313,col 9)-(line 313,col 20)",
            "(line 314,col 9)-(line 314,col 20)",
            "(line 316,col 9)-(line 316,col 79)",
            "(line 317,col 9)-(line 317,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesNull()",
        "snippet": "    public void testDeserializeBytesNull() throws Exception {\n        try {\n            SerializationUtils.deserialize((byte[]) null);\n        } catch (IllegalArgumentException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 320,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 325,col 9)",
            "(line 326,col 9)-(line 326,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testDeserializeBytesBadStream()",
        "snippet": "    public void testDeserializeBytesBadStream() throws Exception {\n        try {\n            SerializationUtils.deserialize(new byte[0]);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 329,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 330,col 9)-(line 334,col 9)",
            "(line 335,col 9)-(line 335,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testClone()",
        "snippet": "    public void testClone() throws Exception {\n        Object test = SerializationUtils.clone(iMap);\n        assertNotNull(test);\n        assertTrue(test instanceof HashMap<?,?>);\n        assertTrue(test != iMap);\n        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n        assertEquals(iString, testMap.get(\"FOO\"));\n        assertTrue(iString != testMap.get(\"FOO\"));\n        assertEquals(iInteger, testMap.get(\"BAR\"));\n        assertTrue(iInteger != testMap.get(\"BAR\"));\n        assertEquals(iMap, testMap);\n    }\n",
        "begin_line": 340,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 53)",
            "(line 342,col 9)-(line 342,col 28)",
            "(line 343,col 9)-(line 343,col 49)",
            "(line 344,col 9)-(line 344,col 33)",
            "(line 345,col 9)-(line 345,col 53)",
            "(line 346,col 9)-(line 346,col 50)",
            "(line 347,col 9)-(line 347,col 50)",
            "(line 348,col 9)-(line 348,col 51)",
            "(line 349,col 9)-(line 349,col 51)",
            "(line 350,col 9)-(line 350,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testCloneNull()",
        "snippet": "    public void testCloneNull() throws Exception {\n        Object test = SerializationUtils.clone(null);\n        assertNull(test);\n    }\n",
        "begin_line": 353,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 53)",
            "(line 355,col 9)-(line 355,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testCloneUnserializable()",
        "snippet": "    public void testCloneUnserializable() throws Exception {\n        try {\n            iMap.put(new Object(), new Object());\n            SerializationUtils.clone(iMap);\n        } catch (SerializationException ex) {\n            return;\n        }\n        fail();\n    }\n",
        "begin_line": 358,
        "end_line": 366,
        "comment": "",
        "child_ranges": [
            "(line 359,col 9)-(line 364,col 9)",
            "(line 365,col 9)-(line 365,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.SerializationUtilsTest.testPrimitiveTypeClassSerialization()",
        "snippet": "    public void testPrimitiveTypeClassSerialization() {\n        Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class,\n                boolean.class, char.class, void.class };\n\n        for (Class<?> primitiveType : primitiveTypes) {\n            Class<?> clone = SerializationUtils.clone(primitiveType);\n            assertEquals(primitiveType, clone);\n        }\n    }\n",
        "begin_line": 368,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 369,col 9)-(line 370,col 56)",
            "(line 372,col 9)-(line 375,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.SerializationUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java",
        "signature": "org.apache.commons.lang3.ClassNotFoundSerialization.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream in) throws ClassNotFoundException    {\n        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);\n    }\n",
        "begin_line": 384,
        "end_line": 386,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 89)"
        ]
    }
]