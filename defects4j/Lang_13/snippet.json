[
    {
        "name": "SerializationUtils.resolveClass#262",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "class_name": "org.apache.commons.lang3.SerializationUtils",
        "signature": "org.apache.commons.lang3.SerializationUtils.ClassLoaderAwareObjectInputStream.resolveClass(java.io.ObjectStreamClass)",
        "snippet": "        @Override\n        protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n            String name = desc.getName();\n            try {\n                return Class.forName(name, false, classLoader);\n            } catch (ClassNotFoundException ex) {\n                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n            }\n        }\n",
        "begin_line": 262,
        "end_line": 270,
        "comment": "\n         * Overriden version that uses the parametrized <code>ClassLoader</code> or the <code>ClassLoader</code>\n         * of the current <code>Thread</code> to resolve the class.\n         * @param desc An instance of class <code>ObjectStreamClass</code>.\n         * @return A <code>Class</code> object corresponding to <code>desc</code>.\n         * @throws IOException Any of the usual Input/Output exceptions.\n         * @throws ClassNotFoundException If class of a serialized object cannot be found.\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationUtils.clone#78",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "class_name": "org.apache.commons.lang3.SerializationUtils",
        "signature": "org.apache.commons.lang3.SerializationUtils.clone(T)",
        "snippet": "    public static <T extends Serializable> T clone(T object) {\n        if (object == null) {\n            return null;\n        }\n        byte[] objectData = serialize(object);\n        ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n\n        ClassLoaderAwareObjectInputStream in = null;\n        try {\n            // stream closed in the finally\n            in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader());\n            /*\n             * when we serialize and deserialize an object,\n             * it is reasonable to assume the deserialized object\n             * is of the same type as the original serialized object\n             */\n            @SuppressWarnings(\"unchecked\") // see above\n            T readObject = (T) in.readObject();\n            return readObject;\n\n        } catch (ClassNotFoundException ex) {\n            throw new SerializationException(\"ClassNotFoundException while reading cloned object data\", ex);\n        } catch (IOException ex) {\n            throw new SerializationException(\"IOException while reading cloned object data\", ex);\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException ex) {\n                throw new SerializationException(\"IOException on closing cloned object data InputStream.\", ex);\n            }\n        }\n    }\n",
        "begin_line": 78,
        "end_line": 111,
        "comment": "\n     * <p>Deep clone an {@code Object} using serialization.</p>\n     *\n     * <p>This is many times slower than writing clone methods by hand\n     * on all objects in your object graph. However, for complex object\n     * graphs, or for those that don't support deep cloning this can\n     * be a simple alternative implementation. Of course all the objects\n     * must be {@code Serializable}.</p>\n     *\n     * @param <T> the type of the object involved\n     * @param object  the {@code Serializable} object to clone\n     * @return the cloned object\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationException.SerializationException#74",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SerializationException.java",
        "class_name": "org.apache.commons.lang3.SerializationException",
        "signature": "org.apache.commons.lang3.SerializationException.SerializationException(java.lang.String, java.lang.Throwable)",
        "snippet": "    public SerializationException(String msg, Throwable cause) {\n        super(msg, cause);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * <p>Constructs a new {@code SerializationException} with specified\n     * detail message and nested {@code Throwable}.</p>\n     *\n     * @param msg    The error message.\n     * @param cause  The {@code Exception} or {@code Error}\n     *  that caused this exception to be thrown.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationUtils.ClassLoaderAwareObjectInputStream#248",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "class_name": "org.apache.commons.lang3.SerializationUtils",
        "signature": "org.apache.commons.lang3.SerializationUtils.ClassLoaderAwareObjectInputStream.ClassLoaderAwareObjectInputStream(java.io.InputStream, java.lang.ClassLoader)",
        "snippet": "        public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n            super(in);\n            this.classLoader = classLoader;\n\n        }\n",
        "begin_line": 248,
        "end_line": 252,
        "comment": "\n         * Constructor.\n         * @param in The <code>InputStream</code>.\n         * @param classLoader classloader to use\n         * @throws IOException if an I/O error occurs while reading stream header.\n         * @see java.io.ObjectInputStream\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationUtils.serialize#161",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "class_name": "org.apache.commons.lang3.SerializationUtils",
        "signature": "org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable)",
        "snippet": "    public static byte[] serialize(Serializable obj) {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream(512);\n        serialize(obj, baos);\n        return baos.toByteArray();\n    }\n",
        "begin_line": 161,
        "end_line": 165,
        "comment": "\n     * <p>Serializes an {@code Object} to a byte array for\n     * storage/serialization.</p>\n     *\n     * @param obj  the object to serialize to bytes\n     * @return a byte[] with the converted Serializable\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2582
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerializationUtils.serialize#130",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
        "class_name": "org.apache.commons.lang3.SerializationUtils",
        "signature": "org.apache.commons.lang3.SerializationUtils.serialize(java.io.Serializable, java.io.OutputStream)",
        "snippet": "    public static void serialize(Serializable obj, OutputStream outputStream) {\n        if (outputStream == null) {\n            throw new IllegalArgumentException(\"The OutputStream must not be null\");\n        }\n        ObjectOutputStream out = null;\n        try {\n            // stream closed in the finally\n            out = new ObjectOutputStream(outputStream);\n            out.writeObject(obj);\n\n        } catch (IOException ex) {\n            throw new SerializationException(ex);\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException ex) { // NOPMD\n                // ignore close exception\n            }\n        }\n    }\n",
        "begin_line": 130,
        "end_line": 151,
        "comment": "\n     * <p>Serializes an {@code Object} to the specified stream.</p>\n     *\n     * <p>The stream will be closed once the object is written.\n     * This avoids the need for a finally clause, and maybe also exception\n     * handling, in the application code.</p>\n     *\n     * <p>The stream passed in is not buffered internally within this method.\n     * This is the responsibility of your application if desired.</p>\n     *\n     * @param obj  the object to serialize to bytes, may be null\n     * @param outputStream  the stream to write to, must not be null\n     * @throws IllegalArgumentException if {@code outputStream} is {@code null}\n     * @throws SerializationException (runtime) if the serialization fails\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    }
]