[
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.dummyMethod(java.util.List, java.util.List<java.lang.Object>, java.util.List<?>, java.util.List<? super java.lang.Object>, java.util.List<java.lang.String>, java.util.List<? extends java.lang.String>, java.util.List<? super java.lang.String>, java.util.List[], java.util.List<java.lang.Object>[], java.util.List<?>[], java.util.List<? super java.lang.Object>[], java.util.List<java.lang.String>[], java.util.List<? extends java.lang.String>[], java.util.List<? super java.lang.String>[])",
        "snippet": "    public void dummyMethod(List list0, List<Object> list1, List<?> list2,\n            List<? super Object> list3, List<String> list4, List<? extends String> list5,\n            List<? super String> list6, List[] list7, List<Object>[] list8, List<?>[] list9,\n            List<? super Object>[] list10, List<String>[] list11, List<? extends String>[] list12,\n            List<? super String>[] list13) {\n    }\n",
        "begin_line": 99,
        "end_line": 104,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsAssignable()",
        "snippet": "    @SuppressWarnings(\"boxing\") // deliberately used here\n    @Test\n    public void testIsAssignable() throws SecurityException, NoSuchMethodException,\n            NoSuchFieldException {\n        List list0 = null;\n        List<Object> list1 = null;\n        List<?> list2 = null;\n        List<? super Object> list3 = null;\n        List<String> list4 = null;\n        List<? extends String> list5 = null;\n        List<? super String> list6 = null;\n        List[] list7 = null;\n        List<Object>[] list8 = null;\n        List<?>[] list9 = null;\n        List<? super Object>[] list10 = null;\n        List<String>[] list11 = null;\n        List<? extends String>[] list12 = null;\n        List<? super String>[] list13;\n        Class<?> clazz = getClass();\n        Method method = clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n        Type[] types = method.getGenericParameterTypes();\n//        list0 = list0;\n        delegateBooleanAssertion(types, 0, 0, true);\n        list1 = list0;\n        delegateBooleanAssertion(types, 0, 1, true);\n        list0 = list1;\n        delegateBooleanAssertion(types, 1, 0, true);\n        list2 = list0;\n        delegateBooleanAssertion(types, 0, 2, true);\n        list0 = list2;\n        delegateBooleanAssertion(types, 2, 0, true);\n        list3 = list0;\n        delegateBooleanAssertion(types, 0, 3, true);\n        list0 = list3;\n        delegateBooleanAssertion(types, 3, 0, true);\n        list4 = list0;\n        delegateBooleanAssertion(types, 0, 4, true);\n        list0 = list4;\n        delegateBooleanAssertion(types, 4, 0, true);\n        list5 = list0;\n        delegateBooleanAssertion(types, 0, 5, true);\n        list0 = list5;\n        delegateBooleanAssertion(types, 5, 0, true);\n        list6 = list0;\n        delegateBooleanAssertion(types, 0, 6, true);\n        list0 = list6;\n        delegateBooleanAssertion(types, 6, 0, true);\n//        list1 = list1;\n        delegateBooleanAssertion(types, 1, 1, true);\n        list2 = list1;\n        delegateBooleanAssertion(types, 1, 2, true);\n        list1 = (List<Object>) list2;\n        delegateBooleanAssertion(types, 2, 1, false);\n        list3 = list1;\n        delegateBooleanAssertion(types, 1, 3, true);\n        list1 = (List<Object>) list3;\n        delegateBooleanAssertion(types, 3, 1, false);\n        // list4 = list1;\n        delegateBooleanAssertion(types, 1, 4, false);\n        // list1 = list4;\n        delegateBooleanAssertion(types, 4, 1, false);\n        // list5 = list1;\n        delegateBooleanAssertion(types, 1, 5, false);\n        // list1 = list5;\n        delegateBooleanAssertion(types, 5, 1, false);\n        list6 = list1;\n        delegateBooleanAssertion(types, 1, 6, true);\n        list1 = (List<Object>) list6;\n        delegateBooleanAssertion(types, 6, 1, false);\n//        list2 = list2;\n        delegateBooleanAssertion(types, 2, 2, true);\n        list2 = list3;\n        delegateBooleanAssertion(types, 2, 3, false);\n        list2 = list4;\n        delegateBooleanAssertion(types, 3, 2, true);\n        list3 = (List<? super Object>) list2;\n        delegateBooleanAssertion(types, 2, 4, false);\n        list2 = list5;\n        delegateBooleanAssertion(types, 4, 2, true);\n        list4 = (List<String>) list2;\n        delegateBooleanAssertion(types, 2, 5, false);\n        list2 = list6;\n        delegateBooleanAssertion(types, 5, 2, true);\n        list5 = (List<? extends String>) list2;\n        delegateBooleanAssertion(types, 2, 6, false);\n//        list3 = list3;\n        delegateBooleanAssertion(types, 6, 2, true);\n        list6 = (List<? super String>) list2;\n        delegateBooleanAssertion(types, 3, 3, true);\n        // list4 = list3;\n        delegateBooleanAssertion(types, 3, 4, false);\n        // list3 = list4;\n        delegateBooleanAssertion(types, 4, 3, false);\n        // list5 = list3;\n        delegateBooleanAssertion(types, 3, 5, false);\n        // list3 = list5;\n        delegateBooleanAssertion(types, 5, 3, false);\n        list6 = list3;\n        delegateBooleanAssertion(types, 3, 6, true);\n        list3 = (List<? super Object>) list6;\n        delegateBooleanAssertion(types, 6, 3, false);\n//        list4 = list4;\n        delegateBooleanAssertion(types, 4, 4, true);\n        list5 = list4;\n        delegateBooleanAssertion(types, 4, 5, true);\n        list4 = (List<String>) list5;\n        delegateBooleanAssertion(types, 5, 4, false);\n        list6 = list4;\n        delegateBooleanAssertion(types, 4, 6, true);\n        list4 = (List<String>) list6;\n        delegateBooleanAssertion(types, 6, 4, false);\n//        list5 = list5;\n        delegateBooleanAssertion(types, 5, 5, true);\n        list6 = (List<? super String>) list5;\n        delegateBooleanAssertion(types, 5, 6, false);\n        list5 = (List<? extends String>) list6;\n        delegateBooleanAssertion(types, 6, 5, false);\n//        list6 = list6;\n        delegateBooleanAssertion(types, 6, 6, true);\n\n//        list7 = list7;\n        delegateBooleanAssertion(types, 7, 7, true);\n        list8 = list7;\n        delegateBooleanAssertion(types, 7, 8, true);\n        list7 = list8;\n        delegateBooleanAssertion(types, 8, 7, true);\n        list9 = list7;\n        delegateBooleanAssertion(types, 7, 9, true);\n        list7 = list9;\n        delegateBooleanAssertion(types, 9, 7, true);\n        list10 = list7;\n        delegateBooleanAssertion(types, 7, 10, true);\n        list7 = list10;\n        delegateBooleanAssertion(types, 10, 7, true);\n        list11 = list7;\n        delegateBooleanAssertion(types, 7, 11, true);\n        list7 = list11;\n        delegateBooleanAssertion(types, 11, 7, true);\n        list12 = list7;\n        delegateBooleanAssertion(types, 7, 12, true);\n        list7 = list12;\n        delegateBooleanAssertion(types, 12, 7, true);\n        list13 = list7;\n        delegateBooleanAssertion(types, 7, 13, true);\n        list7 = list13;\n        delegateBooleanAssertion(types, 13, 7, true);\n//        list8 = list8;\n        delegateBooleanAssertion(types, 8, 8, true);\n        list9 = list8;\n        delegateBooleanAssertion(types, 8, 9, true);\n        list8 = (List<Object>[]) list9;\n        delegateBooleanAssertion(types, 9, 8, false);\n        list10 = list8;\n        delegateBooleanAssertion(types, 8, 10, true);\n        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\n        delegateBooleanAssertion(types, 10, 8, false);\n        // list11 = list8;\n        delegateBooleanAssertion(types, 8, 11, false);\n        // list8 = list11;\n        delegateBooleanAssertion(types, 11, 8, false);\n        // list12 = list8;\n        delegateBooleanAssertion(types, 8, 12, false);\n        // list8 = list12;\n        delegateBooleanAssertion(types, 12, 8, false);\n        list13 = list8;\n        delegateBooleanAssertion(types, 8, 13, true);\n        list8 = (List<Object>[]) list13;\n        delegateBooleanAssertion(types, 13, 8, false);\n//        list9 = list9;\n        delegateBooleanAssertion(types, 9, 9, true);\n        list10 = (List<? super Object>[]) list9;\n        delegateBooleanAssertion(types, 9, 10, false);\n        list9 = list10;\n        delegateBooleanAssertion(types, 10, 9, true);\n        list11 = (List<String>[]) list9;\n        delegateBooleanAssertion(types, 9, 11, false);\n        list9 = list11;\n        delegateBooleanAssertion(types, 11, 9, true);\n        list12 = (List<? extends String>[]) list9;\n        delegateBooleanAssertion(types, 9, 12, false);\n        list9 = list12;\n        delegateBooleanAssertion(types, 12, 9, true);\n        list13 = (List<? super String>[]) list9;\n        delegateBooleanAssertion(types, 9, 13, false);\n        list9 = list13;\n        delegateBooleanAssertion(types, 13, 9, true);\n//        list10 = list10;\n        delegateBooleanAssertion(types, 10, 10, true);\n        // list11 = list10;\n        delegateBooleanAssertion(types, 10, 11, false);\n        // list10 = list11;\n        delegateBooleanAssertion(types, 11, 10, false);\n        // list12 = list10;\n        delegateBooleanAssertion(types, 10, 12, false);\n        // list10 = list12;\n        delegateBooleanAssertion(types, 12, 10, false);\n        list13 = list10;\n        delegateBooleanAssertion(types, 10, 13, true);\n        list10 = (List<? super Object>[]) list13;\n        delegateBooleanAssertion(types, 13, 10, false);\n//        list11 = list11;\n        delegateBooleanAssertion(types, 11, 11, true);\n        list12 = list11;\n        delegateBooleanAssertion(types, 11, 12, true);\n        list11 = (List<String>[]) list12;\n        delegateBooleanAssertion(types, 12, 11, false);\n        list13 = list11;\n        delegateBooleanAssertion(types, 11, 13, true);\n        list11 = (List<String>[]) list13;\n        delegateBooleanAssertion(types, 13, 11, false);\n//        list12 = list12;\n        delegateBooleanAssertion(types, 12, 12, true);\n        list13 = (List<? super String>[]) list12;\n        delegateBooleanAssertion(types, 12, 13, false);\n        list12 = (List<? extends String>[]) list13;\n        delegateBooleanAssertion(types, 13, 12, false);\n//        list13 = list13;\n        delegateBooleanAssertion(types, 13, 13, true);\n        Type disType = getClass().getField(\"dis\").getGenericType();\n        // Reporter.log( ( ( ParameterizedType ) disType\n        // ).getOwnerType().getClass().toString() );\n        Type datType = getClass().getField(\"dat\").getGenericType();\n        Type daType = getClass().getField(\"da\").getGenericType();\n        Type uhderType = getClass().getField(\"uhder\").getGenericType();\n        Type dingType = getClass().getField(\"ding\").getGenericType();\n        Type testerType = getClass().getField(\"tester\").getGenericType();\n        Type tester2Type = getClass().getField(\"tester2\").getGenericType();\n        Type dat2Type = getClass().getField(\"dat2\").getGenericType();\n        Type dat3Type = getClass().getField(\"dat3\").getGenericType();\n        dis = dat;\n        Assert.assertTrue(TypeUtils.isAssignable(datType, disType));\n        // dis = da;\n        Assert.assertFalse(TypeUtils.isAssignable(daType, disType));\n        dis = uhder;\n        Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));\n        dis = ding;\n        Assert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),\n                TypeUtils.isAssignable(dingType, disType));\n        dis = tester;\n        Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));\n        // dis = tester2;\n        Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));\n        // dat = dat2;\n        Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));\n        // dat2 = dat;\n        Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));\n        // dat = dat3;\n        Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));\n        char ch = 0;\n        boolean bo = false;\n        byte by = 0;\n        short sh = 0;\n        int in = 0;\n        long lo = 0;\n        float fl = 0;\n        double du = 0;\n        du = ch;\n        Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));\n        du = by;\n        Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));\n        du = sh;\n        Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));\n        du = in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));\n        du = lo;\n        Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));\n        du = fl;\n        Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));\n        lo = in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));\n        lo = Integer.valueOf(0);\n        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n        // Long lngW = 1;\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));\n        // lngW = Integer.valueOf( 0 );\n        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\n        in = Integer.valueOf(0);\n        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\n        Integer inte = in;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));\n        Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\n        intComparable = 1;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));\n        Serializable ser = 1;\n        Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));\n        Type longComparableType = getClass().getField(\"longComparable\").getGenericType();\n        // longComparable = 1;\n        Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\n        // longComparable = Integer.valueOf( 0 );\n        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\n        // int[] ia;\n        // long[] la = ia;\n        Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));\n        Integer[] ia = null;\n        Type caType = getClass().getField(\"intWildcardComparable\").getGenericType();\n        intWildcardComparable = ia;\n        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));\n        // int[] ina = ia;\n        Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));\n        int[] ina = null;\n        Object[] oa;\n        // oa = ina;\n        Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));\n        oa = new Integer[0];\n        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));\n        Type bClassType = AClass.class.getField(\"bClass\").getGenericType();\n        Type cClassType = AClass.class.getField(\"cClass\").getGenericType();\n        Type dClassType = AClass.class.getField(\"dClass\").getGenericType();\n        Type eClassType = AClass.class.getField(\"eClass\").getGenericType();\n        Type fClassType = AClass.class.getField(\"fClass\").getGenericType();\n        AClass aClass = new AClass(new AAClass<String>());\n        aClass.bClass = aClass.cClass;\n        Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));\n        aClass.bClass = aClass.dClass;\n        Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));\n        aClass.bClass = aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));\n        aClass.bClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));\n        aClass.cClass = aClass.dClass;\n        Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));\n        aClass.cClass = aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));\n        aClass.cClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));\n        aClass.dClass = aClass.eClass;\n        Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));\n        aClass.dClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));\n        aClass.eClass = aClass.fClass;\n        Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));\n    }\n",
        "begin_line": 106,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 26)",
            "(line 111,col 9)-(line 111,col 34)",
            "(line 112,col 9)-(line 112,col 29)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 115,col 9)-(line 115,col 44)",
            "(line 116,col 9)-(line 116,col 42)",
            "(line 117,col 9)-(line 117,col 28)",
            "(line 118,col 9)-(line 118,col 36)",
            "(line 119,col 9)-(line 119,col 31)",
            "(line 120,col 9)-(line 120,col 45)",
            "(line 121,col 9)-(line 121,col 37)",
            "(line 122,col 9)-(line 122,col 47)",
            "(line 123,col 9)-(line 123,col 38)",
            "(line 124,col 9)-(line 124,col 36)",
            "(line 125,col 9)-(line 127,col 86)",
            "(line 128,col 9)-(line 128,col 57)",
            "(line 130,col 9)-(line 130,col 52)",
            "(line 131,col 9)-(line 131,col 22)",
            "(line 132,col 9)-(line 132,col 52)",
            "(line 133,col 9)-(line 133,col 22)",
            "(line 134,col 9)-(line 134,col 52)",
            "(line 135,col 9)-(line 135,col 22)",
            "(line 136,col 9)-(line 136,col 52)",
            "(line 137,col 9)-(line 137,col 22)",
            "(line 138,col 9)-(line 138,col 52)",
            "(line 139,col 9)-(line 139,col 22)",
            "(line 140,col 9)-(line 140,col 52)",
            "(line 141,col 9)-(line 141,col 22)",
            "(line 142,col 9)-(line 142,col 52)",
            "(line 143,col 9)-(line 143,col 22)",
            "(line 144,col 9)-(line 144,col 52)",
            "(line 145,col 9)-(line 145,col 22)",
            "(line 146,col 9)-(line 146,col 52)",
            "(line 147,col 9)-(line 147,col 22)",
            "(line 148,col 9)-(line 148,col 52)",
            "(line 149,col 9)-(line 149,col 22)",
            "(line 150,col 9)-(line 150,col 52)",
            "(line 151,col 9)-(line 151,col 22)",
            "(line 152,col 9)-(line 152,col 52)",
            "(line 153,col 9)-(line 153,col 22)",
            "(line 154,col 9)-(line 154,col 52)",
            "(line 156,col 9)-(line 156,col 52)",
            "(line 157,col 9)-(line 157,col 22)",
            "(line 158,col 9)-(line 158,col 52)",
            "(line 159,col 9)-(line 159,col 37)",
            "(line 160,col 9)-(line 160,col 53)",
            "(line 161,col 9)-(line 161,col 22)",
            "(line 162,col 9)-(line 162,col 52)",
            "(line 163,col 9)-(line 163,col 37)",
            "(line 164,col 9)-(line 164,col 53)",
            "(line 166,col 9)-(line 166,col 53)",
            "(line 168,col 9)-(line 168,col 53)",
            "(line 170,col 9)-(line 170,col 53)",
            "(line 172,col 9)-(line 172,col 53)",
            "(line 173,col 9)-(line 173,col 22)",
            "(line 174,col 9)-(line 174,col 52)",
            "(line 175,col 9)-(line 175,col 37)",
            "(line 176,col 9)-(line 176,col 53)",
            "(line 178,col 9)-(line 178,col 52)",
            "(line 179,col 9)-(line 179,col 22)",
            "(line 180,col 9)-(line 180,col 53)",
            "(line 181,col 9)-(line 181,col 22)",
            "(line 182,col 9)-(line 182,col 52)",
            "(line 183,col 9)-(line 183,col 45)",
            "(line 184,col 9)-(line 184,col 53)",
            "(line 185,col 9)-(line 185,col 22)",
            "(line 186,col 9)-(line 186,col 52)",
            "(line 187,col 9)-(line 187,col 37)",
            "(line 188,col 9)-(line 188,col 53)",
            "(line 189,col 9)-(line 189,col 22)",
            "(line 190,col 9)-(line 190,col 52)",
            "(line 191,col 9)-(line 191,col 47)",
            "(line 192,col 9)-(line 192,col 53)",
            "(line 194,col 9)-(line 194,col 52)",
            "(line 195,col 9)-(line 195,col 45)",
            "(line 196,col 9)-(line 196,col 52)",
            "(line 198,col 9)-(line 198,col 53)",
            "(line 200,col 9)-(line 200,col 53)",
            "(line 202,col 9)-(line 202,col 53)",
            "(line 204,col 9)-(line 204,col 53)",
            "(line 205,col 9)-(line 205,col 22)",
            "(line 206,col 9)-(line 206,col 52)",
            "(line 207,col 9)-(line 207,col 45)",
            "(line 208,col 9)-(line 208,col 53)",
            "(line 210,col 9)-(line 210,col 52)",
            "(line 211,col 9)-(line 211,col 22)",
            "(line 212,col 9)-(line 212,col 52)",
            "(line 213,col 9)-(line 213,col 37)",
            "(line 214,col 9)-(line 214,col 53)",
            "(line 215,col 9)-(line 215,col 22)",
            "(line 216,col 9)-(line 216,col 52)",
            "(line 217,col 9)-(line 217,col 37)",
            "(line 218,col 9)-(line 218,col 53)",
            "(line 220,col 9)-(line 220,col 52)",
            "(line 221,col 9)-(line 221,col 45)",
            "(line 222,col 9)-(line 222,col 53)",
            "(line 223,col 9)-(line 223,col 47)",
            "(line 224,col 9)-(line 224,col 53)",
            "(line 226,col 9)-(line 226,col 52)",
            "(line 229,col 9)-(line 229,col 52)",
            "(line 230,col 9)-(line 230,col 22)",
            "(line 231,col 9)-(line 231,col 52)",
            "(line 232,col 9)-(line 232,col 22)",
            "(line 233,col 9)-(line 233,col 52)",
            "(line 234,col 9)-(line 234,col 22)",
            "(line 235,col 9)-(line 235,col 52)",
            "(line 236,col 9)-(line 236,col 22)",
            "(line 237,col 9)-(line 237,col 52)",
            "(line 238,col 9)-(line 238,col 23)",
            "(line 239,col 9)-(line 239,col 53)",
            "(line 240,col 9)-(line 240,col 23)",
            "(line 241,col 9)-(line 241,col 53)",
            "(line 242,col 9)-(line 242,col 23)",
            "(line 243,col 9)-(line 243,col 53)",
            "(line 244,col 9)-(line 244,col 23)",
            "(line 245,col 9)-(line 245,col 53)",
            "(line 246,col 9)-(line 246,col 23)",
            "(line 247,col 9)-(line 247,col 53)",
            "(line 248,col 9)-(line 248,col 23)",
            "(line 249,col 9)-(line 249,col 53)",
            "(line 250,col 9)-(line 250,col 23)",
            "(line 251,col 9)-(line 251,col 53)",
            "(line 252,col 9)-(line 252,col 23)",
            "(line 253,col 9)-(line 253,col 53)",
            "(line 255,col 9)-(line 255,col 52)",
            "(line 256,col 9)-(line 256,col 22)",
            "(line 257,col 9)-(line 257,col 52)",
            "(line 258,col 9)-(line 258,col 39)",
            "(line 259,col 9)-(line 259,col 53)",
            "(line 260,col 9)-(line 260,col 23)",
            "(line 261,col 9)-(line 261,col 53)",
            "(line 262,col 9)-(line 262,col 40)",
            "(line 263,col 9)-(line 263,col 54)",
            "(line 265,col 9)-(line 265,col 54)",
            "(line 267,col 9)-(line 267,col 54)",
            "(line 269,col 9)-(line 269,col 54)",
            "(line 271,col 9)-(line 271,col 54)",
            "(line 272,col 9)-(line 272,col 23)",
            "(line 273,col 9)-(line 273,col 53)",
            "(line 274,col 9)-(line 274,col 40)",
            "(line 275,col 9)-(line 275,col 54)",
            "(line 277,col 9)-(line 277,col 52)",
            "(line 278,col 9)-(line 278,col 48)",
            "(line 279,col 9)-(line 279,col 54)",
            "(line 280,col 9)-(line 280,col 23)",
            "(line 281,col 9)-(line 281,col 53)",
            "(line 282,col 9)-(line 282,col 40)",
            "(line 283,col 9)-(line 283,col 54)",
            "(line 284,col 9)-(line 284,col 23)",
            "(line 285,col 9)-(line 285,col 53)",
            "(line 286,col 9)-(line 286,col 50)",
            "(line 287,col 9)-(line 287,col 54)",
            "(line 288,col 9)-(line 288,col 23)",
            "(line 289,col 9)-(line 289,col 53)",
            "(line 290,col 9)-(line 290,col 48)",
            "(line 291,col 9)-(line 291,col 54)",
            "(line 292,col 9)-(line 292,col 23)",
            "(line 293,col 9)-(line 293,col 53)",
            "(line 295,col 9)-(line 295,col 54)",
            "(line 297,col 9)-(line 297,col 55)",
            "(line 299,col 9)-(line 299,col 55)",
            "(line 301,col 9)-(line 301,col 55)",
            "(line 303,col 9)-(line 303,col 55)",
            "(line 304,col 9)-(line 304,col 24)",
            "(line 305,col 9)-(line 305,col 54)",
            "(line 306,col 9)-(line 306,col 49)",
            "(line 307,col 9)-(line 307,col 55)",
            "(line 309,col 9)-(line 309,col 54)",
            "(line 310,col 9)-(line 310,col 24)",
            "(line 311,col 9)-(line 311,col 54)",
            "(line 312,col 9)-(line 312,col 41)",
            "(line 313,col 9)-(line 313,col 55)",
            "(line 314,col 9)-(line 314,col 24)",
            "(line 315,col 9)-(line 315,col 54)",
            "(line 316,col 9)-(line 316,col 41)",
            "(line 317,col 9)-(line 317,col 55)",
            "(line 319,col 9)-(line 319,col 54)",
            "(line 320,col 9)-(line 320,col 49)",
            "(line 321,col 9)-(line 321,col 55)",
            "(line 322,col 9)-(line 322,col 51)",
            "(line 323,col 9)-(line 323,col 55)",
            "(line 325,col 9)-(line 325,col 54)",
            "(line 326,col 9)-(line 326,col 67)",
            "(line 329,col 9)-(line 329,col 67)",
            "(line 330,col 9)-(line 330,col 65)",
            "(line 331,col 9)-(line 331,col 71)",
            "(line 332,col 9)-(line 332,col 69)",
            "(line 333,col 9)-(line 333,col 73)",
            "(line 334,col 9)-(line 334,col 75)",
            "(line 335,col 9)-(line 335,col 69)",
            "(line 336,col 9)-(line 336,col 69)",
            "(line 337,col 9)-(line 337,col 18)",
            "(line 338,col 9)-(line 338,col 68)",
            "(line 340,col 9)-(line 340,col 68)",
            "(line 341,col 9)-(line 341,col 20)",
            "(line 342,col 9)-(line 342,col 70)",
            "(line 343,col 9)-(line 343,col 19)",
            "(line 344,col 9)-(line 345,col 59)",
            "(line 346,col 9)-(line 346,col 21)",
            "(line 347,col 9)-(line 347,col 71)",
            "(line 349,col 9)-(line 349,col 73)",
            "(line 351,col 9)-(line 351,col 70)",
            "(line 353,col 9)-(line 353,col 70)",
            "(line 355,col 9)-(line 355,col 70)",
            "(line 356,col 9)-(line 356,col 20)",
            "(line 357,col 9)-(line 357,col 27)",
            "(line 358,col 9)-(line 358,col 20)",
            "(line 359,col 9)-(line 359,col 21)",
            "(line 360,col 9)-(line 360,col 19)",
            "(line 361,col 9)-(line 361,col 20)",
            "(line 362,col 9)-(line 362,col 21)",
            "(line 363,col 9)-(line 363,col 22)",
            "(line 364,col 9)-(line 364,col 16)",
            "(line 365,col 9)-(line 365,col 76)",
            "(line 366,col 9)-(line 366,col 16)",
            "(line 367,col 9)-(line 367,col 76)",
            "(line 368,col 9)-(line 368,col 16)",
            "(line 369,col 9)-(line 369,col 77)",
            "(line 370,col 9)-(line 370,col 16)",
            "(line 371,col 9)-(line 371,col 75)",
            "(line 372,col 9)-(line 372,col 16)",
            "(line 373,col 9)-(line 373,col 76)",
            "(line 374,col 9)-(line 374,col 16)",
            "(line 375,col 9)-(line 375,col 77)",
            "(line 376,col 9)-(line 376,col 16)",
            "(line 377,col 9)-(line 377,col 73)",
            "(line 378,col 9)-(line 378,col 32)",
            "(line 379,col 9)-(line 379,col 77)",
            "(line 381,col 9)-(line 381,col 74)",
            "(line 383,col 9)-(line 383,col 78)",
            "(line 384,col 9)-(line 384,col 32)",
            "(line 385,col 9)-(line 385,col 76)",
            "(line 386,col 9)-(line 386,col 26)",
            "(line 387,col 9)-(line 387,col 76)",
            "(line 388,col 9)-(line 388,col 75)",
            "(line 389,col 9)-(line 389,col 75)",
            "(line 390,col 9)-(line 390,col 87)",
            "(line 391,col 9)-(line 391,col 26)",
            "(line 392,col 9)-(line 392,col 80)",
            "(line 393,col 9)-(line 393,col 79)",
            "(line 394,col 9)-(line 394,col 29)",
            "(line 395,col 9)-(line 395,col 81)",
            "(line 396,col 9)-(line 396,col 89)",
            "(line 398,col 9)-(line 398,col 82)",
            "(line 400,col 9)-(line 400,col 86)",
            "(line 403,col 9)-(line 403,col 78)",
            "(line 404,col 9)-(line 404,col 28)",
            "(line 405,col 9)-(line 405,col 84)",
            "(line 406,col 9)-(line 406,col 35)",
            "(line 407,col 9)-(line 407,col 75)",
            "(line 409,col 9)-(line 409,col 81)",
            "(line 410,col 9)-(line 410,col 25)",
            "(line 411,col 9)-(line 411,col 20)",
            "(line 413,col 9)-(line 413,col 80)",
            "(line 414,col 9)-(line 414,col 28)",
            "(line 415,col 9)-(line 415,col 83)",
            "(line 416,col 9)-(line 416,col 75)",
            "(line 417,col 9)-(line 417,col 75)",
            "(line 418,col 9)-(line 418,col 75)",
            "(line 419,col 9)-(line 419,col 75)",
            "(line 420,col 9)-(line 420,col 75)",
            "(line 421,col 9)-(line 421,col 58)",
            "(line 422,col 9)-(line 422,col 38)",
            "(line 423,col 9)-(line 423,col 74)",
            "(line 424,col 9)-(line 424,col 38)",
            "(line 425,col 9)-(line 425,col 74)",
            "(line 426,col 9)-(line 426,col 38)",
            "(line 427,col 9)-(line 427,col 74)",
            "(line 428,col 9)-(line 428,col 38)",
            "(line 429,col 9)-(line 429,col 74)",
            "(line 430,col 9)-(line 430,col 38)",
            "(line 431,col 9)-(line 431,col 74)",
            "(line 432,col 9)-(line 432,col 38)",
            "(line 433,col 9)-(line 433,col 74)",
            "(line 434,col 9)-(line 434,col 38)",
            "(line 435,col 9)-(line 435,col 74)",
            "(line 436,col 9)-(line 436,col 38)",
            "(line 437,col 9)-(line 437,col 74)",
            "(line 438,col 9)-(line 438,col 38)",
            "(line 439,col 9)-(line 439,col 74)",
            "(line 440,col 9)-(line 440,col 38)",
            "(line 441,col 9)-(line 441,col 74)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.delegateBooleanAssertion(java.lang.reflect.Type[], int, int, boolean)",
        "snippet": "    public void delegateBooleanAssertion(Type[] types, int i2, int i1, boolean expected) {\n        Type type1 = types[i1];\n        Type type2 = types[i2];\n        boolean isAssignable = TypeUtils.isAssignable(type2, type1);\n\n        if (expected) {\n            Assert.assertTrue(\"[\" + i1 + \", \" + i2 + \"]: From \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + \" to \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);\n        } else {\n            Assert.assertFalse(\"[\" + i1 + \", \" + i2 + \"]: From \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + \" to \"\n                    + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);\n        }\n    }\n",
        "begin_line": 444,
        "end_line": 458,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 31)",
            "(line 446,col 9)-(line 446,col 31)",
            "(line 447,col 9)-(line 447,col 68)",
            "(line 449,col 9)-(line 457,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsInstance()",
        "snippet": "    @SuppressWarnings(\"boxing\") // boxing is deliberate here\n    @Test\n    public void testIsInstance() throws SecurityException, NoSuchFieldException {\n        Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\n        Type uriComparableType = getClass().getField(\"uriComparable\").getGenericType();\n        intComparable = 1;\n        Assert.assertTrue(TypeUtils.isInstance(1, intComparableType));\n        // uriComparable = 1;\n        Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType));\n    }\n",
        "begin_line": 460,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 87)",
            "(line 464,col 9)-(line 464,col 87)",
            "(line 465,col 9)-(line 465,col 26)",
            "(line 466,col 9)-(line 466,col 70)",
            "(line 468,col 9)-(line 468,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetTypeArguments()",
        "snippet": "    @Test\n    public void testGetTypeArguments() {\n        Map<TypeVariable<?>, Type> typeVarAssigns;\n        TypeVariable<?> treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));\n\n        Collection<Integer> col = Arrays.asList(new Integer[0]);\n        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        Assert.assertTrue(typeVarAssigns.size() == 2);\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\n        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n        Assert.assertEquals(2, typeVarAssigns.size());\n        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));\n        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));\n    }\n",
        "begin_line": 471,
        "end_line": 508,
        "comment": "",
        "child_ranges": [
            "(line 473,col 9)-(line 473,col 50)",
            "(line 474,col 9)-(line 474,col 39)",
            "(line 475,col 9)-(line 475,col 21)",
            "(line 477,col 9)-(line 477,col 85)",
            "(line 478,col 9)-(line 478,col 65)",
            "(line 479,col 9)-(line 480,col 60)",
            "(line 481,col 9)-(line 481,col 53)",
            "(line 482,col 9)-(line 483,col 52)",
            "(line 485,col 9)-(line 485,col 81)",
            "(line 486,col 9)-(line 486,col 65)",
            "(line 487,col 9)-(line 488,col 60)",
            "(line 489,col 9)-(line 489,col 53)",
            "(line 490,col 9)-(line 491,col 52)",
            "(line 493,col 9)-(line 493,col 64)",
            "(line 494,col 9)-(line 494,col 82)",
            "(line 495,col 9)-(line 495,col 65)",
            "(line 496,col 9)-(line 497,col 60)",
            "(line 499,col 9)-(line 499,col 100)",
            "(line 500,col 9)-(line 500,col 54)",
            "(line 501,col 9)-(line 501,col 100)",
            "(line 502,col 9)-(line 502,col 108)",
            "(line 504,col 9)-(line 504,col 77)",
            "(line 505,col 9)-(line 505,col 54)",
            "(line 506,col 9)-(line 506,col 97)",
            "(line 507,col 9)-(line 507,col 119)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testTypesSatisfyVariables()",
        "snippet": "    @Test\n    public void testTypesSatisfyVariables() throws SecurityException, NoSuchFieldException,\n            NoSuchMethodException {\n        Map<TypeVariable<?>, Type> typeVarAssigns = new HashMap<TypeVariable<?>, Type>();\n        Integer max = TypeUtilsTest.stub();\n        typeVarAssigns.put(getClass().getMethod(\"stub\").getTypeParameters()[0], Integer.class);\n        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n        typeVarAssigns.clear();\n        typeVarAssigns.put(getClass().getMethod(\"stub2\").getTypeParameters()[0], Integer.class);\n        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n        typeVarAssigns.clear();\n        typeVarAssigns.put(getClass().getMethod(\"stub3\").getTypeParameters()[0], Integer.class);\n        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n    }\n",
        "begin_line": 510,
        "end_line": 523,
        "comment": "",
        "child_ranges": [
            "(line 513,col 9)-(line 513,col 89)",
            "(line 514,col 9)-(line 514,col 43)",
            "(line 515,col 9)-(line 515,col 95)",
            "(line 516,col 9)-(line 516,col 75)",
            "(line 517,col 9)-(line 517,col 31)",
            "(line 518,col 9)-(line 518,col 96)",
            "(line 519,col 9)-(line 519,col 75)",
            "(line 520,col 9)-(line 520,col 31)",
            "(line 521,col 9)-(line 521,col 96)",
            "(line 522,col 9)-(line 522,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testDetermineTypeVariableAssignments()",
        "snippet": "    @Test\n    public void testDetermineTypeVariableAssignments() throws SecurityException,\n            NoSuchFieldException, NoSuchMethodException {\n        ParameterizedType iterableType = (ParameterizedType) getClass().getField(\"iterable\")\n                .getGenericType();\n        Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class,\n                iterableType);\n        TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0];\n        Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));\n        Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns\n                .get(treeSetTypeVar));\n    }\n",
        "begin_line": 525,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 528,col 9)-(line 529,col 34)",
            "(line 530,col 9)-(line 531,col 30)",
            "(line 532,col 9)-(line 532,col 78)",
            "(line 533,col 9)-(line 533,col 70)",
            "(line 534,col 9)-(line 535,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetRawType()",
        "snippet": "    @Test\n    public void testGetRawType() throws SecurityException, NoSuchFieldException {\n        Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField(\"stringParent\")\n                .getGenericType();\n        Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField(\"integerParent\")\n                .getGenericType();\n        Type foosFieldType = GenericTypeHolder.class.getDeclaredField(\"foos\").getGenericType();\n        Type genericParentT = GenericParent.class.getTypeParameters()[0];\n        Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));\n        Assert\n                .assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType,\n                        null));\n        Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));\n        Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,\n                StringParameterizedChild.class));\n        Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,\n                stringParentFieldType));\n        Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0],\n                foosFieldType));\n        Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0],\n                foosFieldType));\n        Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));\n        Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class\n                .getDeclaredField(\"barParents\").getGenericType(), null));\n    }\n",
        "begin_line": 538,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 540,col 9)-(line 541,col 34)",
            "(line 542,col 9)-(line 543,col 34)",
            "(line 544,col 9)-(line 544,col 95)",
            "(line 545,col 9)-(line 545,col 73)",
            "(line 546,col 9)-(line 546,col 100)",
            "(line 547,col 9)-(line 549,col 31)",
            "(line 550,col 9)-(line 550,col 83)",
            "(line 551,col 9)-(line 552,col 49)",
            "(line 553,col 9)-(line 554,col 40)",
            "(line 555,col 9)-(line 556,col 32)",
            "(line 557,col 9)-(line 558,col 32)",
            "(line 559,col 9)-(line 559,col 85)",
            "(line 560,col 9)-(line 561,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayTypeClasses()",
        "snippet": "    @Test\n    public void testIsArrayTypeClasses() {\n        Assert.assertTrue(TypeUtils.isArrayType(boolean[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(byte[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(short[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(int[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(char[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(long[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(float[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(double[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(Object[].class));\n        Assert.assertTrue(TypeUtils.isArrayType(String[].class));\n\n        Assert.assertFalse(TypeUtils.isArrayType(boolean.class));\n        Assert.assertFalse(TypeUtils.isArrayType(byte.class));\n        Assert.assertFalse(TypeUtils.isArrayType(short.class));\n        Assert.assertFalse(TypeUtils.isArrayType(int.class));\n        Assert.assertFalse(TypeUtils.isArrayType(char.class));\n        Assert.assertFalse(TypeUtils.isArrayType(long.class));\n        Assert.assertFalse(TypeUtils.isArrayType(float.class));\n        Assert.assertFalse(TypeUtils.isArrayType(double.class));\n        Assert.assertFalse(TypeUtils.isArrayType(Object.class));\n        Assert.assertFalse(TypeUtils.isArrayType(String.class));\n    }\n",
        "begin_line": 564,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 566,col 9)-(line 566,col 66)",
            "(line 567,col 9)-(line 567,col 63)",
            "(line 568,col 9)-(line 568,col 64)",
            "(line 569,col 9)-(line 569,col 62)",
            "(line 570,col 9)-(line 570,col 63)",
            "(line 571,col 9)-(line 571,col 63)",
            "(line 572,col 9)-(line 572,col 64)",
            "(line 573,col 9)-(line 573,col 65)",
            "(line 574,col 9)-(line 574,col 65)",
            "(line 575,col 9)-(line 575,col 65)",
            "(line 577,col 9)-(line 577,col 65)",
            "(line 578,col 9)-(line 578,col 62)",
            "(line 579,col 9)-(line 579,col 63)",
            "(line 580,col 9)-(line 580,col 61)",
            "(line 581,col 9)-(line 581,col 62)",
            "(line 582,col 9)-(line 582,col 62)",
            "(line 583,col 9)-(line 583,col 63)",
            "(line 584,col 9)-(line 584,col 64)",
            "(line 585,col 9)-(line 585,col 64)",
            "(line 586,col 9)-(line 586,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayGenericTypes()",
        "snippet": "    @Test\n    public void testIsArrayGenericTypes() throws Exception {\n        Method method = getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n\n        Type[] types = method.getGenericParameterTypes();\n\n        Assert.assertFalse(TypeUtils.isArrayType(types[0]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[1]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[2]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[3]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[4]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[5]));\n        Assert.assertFalse(TypeUtils.isArrayType(types[6]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[7]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[8]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[9]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[10]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[11]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[12]));\n        Assert.assertTrue(TypeUtils.isArrayType(types[13]));\n    }\n",
        "begin_line": 589,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 593,col 86)",
            "(line 595,col 9)-(line 595,col 57)",
            "(line 597,col 9)-(line 597,col 60)",
            "(line 598,col 9)-(line 598,col 60)",
            "(line 599,col 9)-(line 599,col 60)",
            "(line 600,col 9)-(line 600,col 60)",
            "(line 601,col 9)-(line 601,col 60)",
            "(line 602,col 9)-(line 602,col 60)",
            "(line 603,col 9)-(line 603,col 60)",
            "(line 604,col 9)-(line 604,col 59)",
            "(line 605,col 9)-(line 605,col 59)",
            "(line 606,col 9)-(line 606,col 59)",
            "(line 607,col 9)-(line 607,col 60)",
            "(line 608,col 9)-(line 608,col 60)",
            "(line 609,col 9)-(line 609,col 60)",
            "(line 610,col 9)-(line 610,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetPrimitiveArrayComponentType()",
        "snippet": "    @Test\n    public void testGetPrimitiveArrayComponentType() throws Exception {\n        Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class));\n        Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class));\n        Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class));\n        Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class));\n        Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class));\n        Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class));\n        Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class));\n        Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class));\n\n        Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(byte.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(short.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(int.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(char.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(long.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(float.class));\n        Assert.assertNull(TypeUtils.getArrayComponentType(double.class));\n    }\n",
        "begin_line": 613,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 615,col 9)-(line 615,col 93)",
            "(line 616,col 9)-(line 616,col 87)",
            "(line 617,col 9)-(line 617,col 89)",
            "(line 618,col 9)-(line 618,col 85)",
            "(line 619,col 9)-(line 619,col 87)",
            "(line 620,col 9)-(line 620,col 87)",
            "(line 621,col 9)-(line 621,col 89)",
            "(line 622,col 9)-(line 622,col 91)",
            "(line 624,col 9)-(line 624,col 74)",
            "(line 625,col 9)-(line 625,col 71)",
            "(line 626,col 9)-(line 626,col 72)",
            "(line 627,col 9)-(line 627,col 70)",
            "(line 628,col 9)-(line 628,col 71)",
            "(line 629,col 9)-(line 629,col 71)",
            "(line 630,col 9)-(line 630,col 72)",
            "(line 631,col 9)-(line 631,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.testGetArrayComponentType()",
        "snippet": "    @Test\n    public void testGetArrayComponentType() throws Exception {\n        Method method = getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n\n        Type[] types = method.getGenericParameterTypes();\n\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[0]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[1]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[2]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[3]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[4]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[5]));\n        Assert.assertNull(TypeUtils.getArrayComponentType(types[6]));\n        Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7]));\n        Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8]));\n        Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9]));\n        Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10]));\n        Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11]));\n        Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12]));\n        Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13]));\n    }\n",
        "begin_line": 634,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 636,col 9)-(line 638,col 86)",
            "(line 640,col 9)-(line 640,col 57)",
            "(line 642,col 9)-(line 642,col 69)",
            "(line 643,col 9)-(line 643,col 69)",
            "(line 644,col 9)-(line 644,col 69)",
            "(line 645,col 9)-(line 645,col 69)",
            "(line 646,col 9)-(line 646,col 69)",
            "(line 647,col 9)-(line 647,col 69)",
            "(line 648,col 9)-(line 648,col 69)",
            "(line 649,col 9)-(line 649,col 81)",
            "(line 650,col 9)-(line 650,col 81)",
            "(line 651,col 9)-(line 651,col 81)",
            "(line 652,col 9)-(line 652,col 82)",
            "(line 653,col 9)-(line 653,col 82)",
            "(line 654,col 9)-(line 654,col 82)",
            "(line 655,col 9)-(line 655,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub()",
        "snippet": "    public static <G extends Comparable<G>> G stub() {\n        return null;\n    }\n",
        "begin_line": 660,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 661,col 9)-(line 661,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub2()",
        "snippet": "    public static <G extends Comparable<? super G>> G stub2() {\n        return null;\n    }\n",
        "begin_line": 664,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 665,col 9)-(line 665,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.TypeUtilsTest.stub3()",
        "snippet": "    public static <T extends Comparable<? extends T>> T stub3() {\n        return null;\n    }\n",
        "begin_line": 668,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 669,col 9)-(line 669,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.reflect.TypeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "signature": "org.apache.commons.lang3.reflect.AClass.AClass(org.apache.commons.lang3.reflect.AAClass<java.lang.String>)",
        "snippet": "    public AClass(AAClass<String> enclosingInstance) {\n        enclosingInstance.super();\n    }\n",
        "begin_line": 688,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 689,col 9)-(line 689,col 34)"
        ]
    }
]