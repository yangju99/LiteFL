[
    {
        "name": "TypeUtils.getTypeArguments#597",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.ParameterizedType, java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static Map<TypeVariable<?>, Type> getTypeArguments(\n            ParameterizedType parameterizedType, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n        Class<?> cls = getRawType(parameterizedType);\n\n        // make sure they're assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        Type ownerType = parameterizedType.getOwnerType();\n        Map<TypeVariable<?>, Type> typeVarAssigns;\n\n        if (ownerType instanceof ParameterizedType) {\n            // get the owner type arguments first\n            ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;\n            typeVarAssigns = getTypeArguments(parameterizedOwnerType,\n                    getRawType(parameterizedOwnerType), subtypeVarAssigns);\n        } else {\n            // no owner, prep the type variable assignments map\n            typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                    : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n        }\n\n        // get the subject parameterized type's arguments\n        Type[] typeArgs = parameterizedType.getActualTypeArguments();\n        // and get the corresponding type variables from the raw class\n        TypeVariable<?>[] typeParams = cls.getTypeParameters();\n\n        // map the arguments to their respective type variables\n        for (int i = 0; i < typeParams.length; i++) {\n            Type typeArg = typeArgs[i];\n            typeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\n                    .get(typeArg) : typeArg);\n        }\n\n        if (toClass.equals(cls)) {\n            // target class has been reached. Done.\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }\n",
        "begin_line": 597,
        "end_line": 640,
        "comment": "\n     * <p> Return a map of the type arguments of a parameterized type in the context of <code>toClass</code>. </p>\n     *\n     * @param parameterizedType the parameterized type\n     * @param toClass the class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeUtils.getTypeArguments#650",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.Class<?>, java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n        // make sure they're assignable\n        if (!isAssignable(cls, toClass)) {\n            return null;\n        }\n\n        // can't work with primitives\n        if (cls.isPrimitive()) {\n            // both classes are primitives?\n            if (toClass.isPrimitive()) {\n                // dealing with widening here. No type arguments to be\n                // harvested with these two types.\n                return new HashMap<TypeVariable<?>, Type>();\n            }\n\n            // work with wrapper the wrapper class instead of the primitive\n            cls = ClassUtils.primitiveToWrapper(cls);\n        }\n\n        // create a copy of the incoming map, or an empty one if it's null\n        HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n\n        // has target class been reached?\n        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n            return typeVarAssigns;\n        }\n\n        // walk the inheritance hierarchy until the target class is reached\n        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n    }\n",
        "begin_line": 650,
        "end_line": 681,
        "comment": "\n     * <p> Return a map of the type arguments of a class in the context of <code>toClass</code>. </p>\n     *\n     * @param cls the class in question\n     * @param toClass the context class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8165
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnicodeEscaper.UnicodeEscaper#51",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaper.UnicodeEscaper(int, int, boolean)",
        "snippet": "    private UnicodeEscaper(int below, int above, boolean between) {\n        this.below = below;\n        this.above = above;\n        this.between = between;\n    }\n",
        "begin_line": 51,
        "end_line": 55,
        "comment": "\n     * <p>Constructs a <code>UnicodeEscaper</code> for the specified range. This is\n     * the underlying method for the other constructors/builders. The <code>below</code>\n     * and <code>above</code> boundaries are inclusive when <code>between</code> is\n     * <code>true</code> and exclusive when it is <code>false</code>. </p>\n     *\n     * @param below int value representing the lowest codepoint boundary\n     * @param above int value representing the highest codepoint boundary\n     * @param between whether to escape between the boundaries or outside them\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnicodeEscaper.outsideOf#84",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java",
        "class_name": "org.apache.commons.lang3.text.translate.UnicodeEscaper",
        "signature": "org.apache.commons.lang3.text.translate.UnicodeEscaper.outsideOf(int, int)",
        "snippet": "    public static UnicodeEscaper outsideOf(int codepointLow, int codepointHigh) {\n        return new UnicodeEscaper(codepointLow, codepointHigh, false);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * <p>Constructs a <code>UnicodeEscaper</code> outside of the specified values (exclusive). </p>\n     *\n     * @param codepointLow below which to escape\n     * @param codepointHigh above which to escape\n     * @return the newly created {@code UnicodeEscaper} instance\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumericEntityUnescaper.NumericEntityUnescaper#56",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
        "class_name": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper",
        "signature": "org.apache.commons.lang3.text.translate.NumericEntityUnescaper.NumericEntityUnescaper(org.apache.commons.lang3.text.translate.NumericEntityUnescaper.OPTION...)",
        "snippet": "    public NumericEntityUnescaper(OPTION... options) {\n        if(options.length > 0) {\n            this.options = EnumSet.copyOf(Arrays.asList(options));\n        } else {\n            this.options = EnumSet.copyOf(Arrays.asList(new OPTION[] { OPTION.semiColonRequired }));\n        }\n    }\n",
        "begin_line": 56,
        "end_line": 62,
        "comment": "\n     * Create a UnicodeUnescaper.\n     *\n     * The constructor takes a list of options, only one type of which is currently \n     * available (whether to allow, error or ignore the semi-colon on the end of a \n     * numeric entity to being missing).\n     *\n     * For example, to support numeric entities without a ';':\n     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional)\n     * and to throw an IllegalArgumentException when they're missing:\n     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon)\n     *\n     * Note that the default behaviour is to ignore them. \n     *\n     * @param options to apply to this unescaper\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "LookupTranslator.LookupTranslator#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslator",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslator.LookupTranslator(java.lang.CharSequence[]...)",
        "snippet": "    public LookupTranslator(CharSequence[]... lookup) {\n        lookupMap = new HashMap<CharSequence, CharSequence>();\n        int _shortest = Integer.MAX_VALUE;\n        int _longest = 0;\n        if (lookup != null) {\n            for (CharSequence[] seq : lookup) {\n                this.lookupMap.put(seq[0], seq[1]);\n                int sz = seq[0].length();\n                if (sz < _shortest) {\n                    _shortest = sz;\n                }\n                if (sz > _longest) {\n                    _longest = sz;\n                }\n            }\n        }\n        shortest = _shortest;\n        longest = _longest;\n    }\n",
        "begin_line": 40,
        "end_line": 58,
        "comment": "\n     * Define the lookup table to be used in translation\n     *\n     * @param lookup CharSequence[][] table of size [*][2]\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "LookupTranslator.translate#63",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.LookupTranslator",
        "signature": "org.apache.commons.lang3.text.translate.LookupTranslator.translate(java.lang.CharSequence, int, java.io.Writer)",
        "snippet": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int max = longest;\n        if (index + longest > input.length()) {\n            max = input.length() - index;\n        }\n        // descend so as to get a greedy algorithm\n        for (int i = max; i >= shortest; i--) {\n            CharSequence subSeq = input.subSequence(index, index + i);\n            CharSequence result = lookupMap.get(subSeq);\n            if (result != null) {\n                out.write(result.toString());\n                return i;\n            }\n        }\n        return 0;\n    }\n",
        "begin_line": 63,
        "end_line": 79,
        "comment": "\n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator": "\n     * Translate a set of codepoints, represented by an int index into a CharSequence, \n     * into another set of codepoints. The number of codepoints consumed must be returned, \n     * and the only IOExceptions thrown must be from interacting with the Writer so that \n     * the top level API may reliable ignore StringWriter IOExceptions. \n     *\n     * @param input CharSequence that is being translated\n     * @param index int representing the current point of translation\n     * @param out Writer to translate the text to\n     * @return int count of codepoints consumed\n     * @throws IOException if and only if the Writer produces an IOException\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.ISO8859_1_ESCAPE#34",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_ESCAPE()",
        "snippet": "    public static String[][] ISO8859_1_ESCAPE() { return ISO8859_1_ESCAPE.clone(); }\n",
        "begin_line": 34,
        "end_line": 34,
        "comment": "\n     * Mapping to escape <a href=\"https://secure.wikimedia.org/wikipedia/en/wiki/ISO/IEC_8859-1\">ISO-8859-1</a>\n     * characters to their named HTML 3.x equivalents.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.ISO8859_1_UNESCAPE#138",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.ISO8859_1_UNESCAPE()",
        "snippet": "    public static String[][] ISO8859_1_UNESCAPE() { return ISO8859_1_UNESCAPE.clone(); }\n",
        "begin_line": 138,
        "end_line": 138,
        "comment": "\n     * Reverse of {@link #ISO8859_1_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.HTML40_EXTENDED_ESCAPE#147",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE()",
        "snippet": "    public static String[][] HTML40_EXTENDED_ESCAPE() { return HTML40_EXTENDED_ESCAPE.clone(); }\n",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\n     * Mapping to escape additional <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">character entity\n     * references</a>. Note that this must be used with {@link #ISO8859_1_ESCAPE()} to get the full list of\n     * HTML 4.0 character entities.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.HTML40_EXTENDED_UNESCAPE#349",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_UNESCAPE()",
        "snippet": "    public static String[][] HTML40_EXTENDED_UNESCAPE() { return HTML40_EXTENDED_UNESCAPE.clone(); }\n",
        "begin_line": 349,
        "end_line": 349,
        "comment": "\n     * Reverse of {@link #HTML40_EXTENDED_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.BASIC_ESCAPE#358",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.BASIC_ESCAPE()",
        "snippet": "    public static String[][] BASIC_ESCAPE() { return BASIC_ESCAPE.clone(); }\n",
        "begin_line": 358,
        "end_line": 358,
        "comment": "\n     * Mapping to escape the basic XML and HTML character entities.\n     *\n     * Namely: {@code \" & < >}\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.BASIC_UNESCAPE#370",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.BASIC_UNESCAPE()",
        "snippet": "    public static String[][] BASIC_UNESCAPE() { return BASIC_UNESCAPE.clone(); }\n",
        "begin_line": 370,
        "end_line": 370,
        "comment": "\n     * Reverse of {@link #BASIC_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.APOS_ESCAPE#377",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.APOS_ESCAPE()",
        "snippet": "    public static String[][] APOS_ESCAPE() { return APOS_ESCAPE.clone(); }\n",
        "begin_line": 377,
        "end_line": 377,
        "comment": "\n     * Mapping to escape the apostrophe character to its XML character entity.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.APOS_UNESCAPE#386",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.APOS_UNESCAPE()",
        "snippet": "    public static String[][] APOS_UNESCAPE() { return APOS_UNESCAPE.clone(); }\n",
        "begin_line": 386,
        "end_line": 386,
        "comment": "\n     * Reverse of {@link #APOS_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.JAVA_CTRL_CHARS_ESCAPE#395",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_ESCAPE()",
        "snippet": "    public static String[][] JAVA_CTRL_CHARS_ESCAPE() { return JAVA_CTRL_CHARS_ESCAPE.clone(); }\n",
        "begin_line": 395,
        "end_line": 395,
        "comment": "\n     * Mapping to escape the Java control characters.\n     *\n     * Namely: {@code \\b \\n \\t \\f \\r}\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.JAVA_CTRL_CHARS_UNESCAPE#408",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.JAVA_CTRL_CHARS_UNESCAPE()",
        "snippet": "    public static String[][] JAVA_CTRL_CHARS_UNESCAPE() { return JAVA_CTRL_CHARS_UNESCAPE.clone(); }\n",
        "begin_line": 408,
        "end_line": 408,
        "comment": "\n     * Reverse of {@link #JAVA_CTRL_CHARS_ESCAPE()} for unescaping purposes.\n     * @return the mapping table\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "EntityArrays.invert#416",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/EntityArrays.java",
        "class_name": "org.apache.commons.lang3.text.translate.EntityArrays",
        "signature": "org.apache.commons.lang3.text.translate.EntityArrays.invert(java.lang.String[][])",
        "snippet": "    public static String[][] invert(String[][] array) {\n        String[][] newarray = new String[array.length][2];\n        for(int i = 0; i<array.length; i++) {\n            newarray[i][0] = array[i][1];\n            newarray[i][1] = array[i][0];\n        }\n        return newarray;\n    }\n",
        "begin_line": 416,
        "end_line": 423,
        "comment": "\n     * Used to invert an escape array into an unescape array\n     * @param array String[][] to be inverted\n     * @return String[][] inverted array\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.translate#53",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence)",
        "snippet": "    public final String translate(CharSequence input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length() * 2);\n            translate(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // this should never ever happen while writing to a StringWriter\n            throw new RuntimeException(ioe);\n        }\n    }\n",
        "begin_line": 53,
        "end_line": 65,
        "comment": "\n     * Helper for non-Writer usage. \n     * @param input CharSequence to be translated\n     * @return String output of translation\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.translate#75",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.translate(java.lang.CharSequence, java.io.Writer)",
        "snippet": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos+= c.length;\n                continue;\n            }\n//          // contract with translators is that they have to understand codepoints \n//          // and they just took care of a surrogate pair\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }\n",
        "begin_line": 75,
        "end_line": 98,
        "comment": "\n     * Translate an input onto a Writer. This is intentionally final as its algorithm is \n     * tightly coupled with the abstract method of this class. \n     *\n     * @param input CharSequence that is being translated\n     * @param out Writer to translate the text to\n     * @throws IOException if and only if the Writer produces an IOException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "CharSequenceTranslator.with#107",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.CharSequenceTranslator",
        "signature": "org.apache.commons.lang3.text.translate.CharSequenceTranslator.with(org.apache.commons.lang3.text.translate.CharSequenceTranslator...)",
        "snippet": "    public final CharSequenceTranslator with(CharSequenceTranslator... translators) {\n        CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];\n        newArray[0] = this;\n        System.arraycopy(translators, 0, newArray, 1, translators.length);\n        return new AggregateTranslator(newArray);\n    }\n",
        "begin_line": 107,
        "end_line": 112,
        "comment": "\n     * Helper method to create a merger of this translator with another set of \n     * translators. Useful in customizing the standard functionality.\n     *\n     * @param translators CharSequenceTranslator array of translators to merge with this one\n     * @return CharSequenceTranslator merging this translator with the others\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AggregateTranslator.AggregateTranslator#40",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/AggregateTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.AggregateTranslator",
        "signature": "org.apache.commons.lang3.text.translate.AggregateTranslator.AggregateTranslator(org.apache.commons.lang3.text.translate.CharSequenceTranslator...)",
        "snippet": "    public AggregateTranslator(CharSequenceTranslator... translators) {\n        this.translators = ArrayUtils.clone(translators);\n    }\n",
        "begin_line": 40,
        "end_line": 42,
        "comment": "\n     * Specify the translators to be used at creation time. \n     *\n     * @param translators CharSequenceTranslator array to aggregate\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "AggregateTranslator.translate#49",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/text/translate/AggregateTranslator.java",
        "class_name": "org.apache.commons.lang3.text.translate.AggregateTranslator",
        "signature": "org.apache.commons.lang3.text.translate.AggregateTranslator.translate(java.lang.CharSequence, int, java.io.Writer)",
        "snippet": "    @Override\n    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        for (CharSequenceTranslator translator : translators) {\n            int consumed = translator.translate(input, index, out);\n            if(consumed != 0) {\n                return consumed;\n            }\n        }\n        return 0;\n    }\n",
        "begin_line": 49,
        "end_line": 58,
        "comment": "\n     * The first translator to consume codepoints from the input is the 'winner'. \n     * Execution stops with the number of consumed codepoints being returned. \n     * {@inheritDoc}\n     ",
        "resolved_comments": {
            "org.apache.commons.lang3.text.translate.CharSequenceTranslator": "\n     * Translate a set of codepoints, represented by an int index into a CharSequence, \n     * into another set of codepoints. The number of codepoints consumed must be returned, \n     * and the only IOExceptions thrown must be from interacting with the Writer so that \n     * the top level API may reliable ignore StringWriter IOExceptions. \n     *\n     * @param input CharSequence that is being translated\n     * @param index int representing the current point of translation\n     * @param out Writer to translate the text to\n     * @return int count of codepoints consumed\n     * @throws IOException if and only if the Writer produces an IOException\n     "
        },
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.isAssignable#77",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static boolean isAssignable(Type type, Type toType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (toType == null || toType instanceof Class<?>) {\n            return isAssignable(type, (Class<?>) toType);\n        }\n\n        if (toType instanceof ParameterizedType) {\n            return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);\n        }\n\n        if (toType instanceof GenericArrayType) {\n            return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);\n        }\n\n        if (toType instanceof WildcardType) {\n            return isAssignable(type, (WildcardType) toType, typeVarAssigns);\n        }\n\n        // *\n        if (toType instanceof TypeVariable<?>) {\n            return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns);\n        }\n        // */\n\n        throw new IllegalStateException(\"found an unhandled type: \" + toType);\n    }\n",
        "begin_line": 77,
        "end_line": 102,
        "comment": "\n     * <p> Checks if the subject type may be implicitly cast to the target type\n     * following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toType the target type\n     * @param typeVarAssigns optional map of type variable assignments\n     * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeUtils.isAssignable#112",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.Class<?>)",
        "snippet": "    private static boolean isAssignable(Type type, Class<?> toClass) {\n        if (type == null) {\n            // consistency with ClassUtils.isAssignable() behavior\n            return toClass == null || !toClass.isPrimitive();\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toClass == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toClass.equals(type)) {\n            return true;\n        }\n\n        if (type instanceof Class<?>) {\n            // just comparing two classes\n            return ClassUtils.isAssignable((Class<?>) type, toClass);\n        }\n\n        if (type instanceof ParameterizedType) {\n            // only have to compare the raw type to the class\n            return isAssignable(getRawType((ParameterizedType) type), toClass);\n        }\n\n        // *\n        if (type instanceof TypeVariable<?>) {\n            // if any of the bounds are assignable to the class, then the\n            // type is assignable to the class.\n            for (Type bound : ((TypeVariable<?>) type).getBounds()) {\n                if (isAssignable(bound, toClass)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        // the only classes to which a generic array type can be assigned\n        // are class Object and array classes\n        if (type instanceof GenericArrayType) {\n            return toClass.equals(Object.class)\n                    || toClass.isArray()\n                    && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass\n                            .getComponentType());\n        }\n\n        // wildcard types are not assignable to a class (though one would think\n        // \"? super Object\" would be assignable to Object)\n        if (type instanceof WildcardType) {\n            return false;\n        }\n\n        throw new IllegalStateException(\"found an unhandled type: \" + type);\n    }\n",
        "begin_line": 112,
        "end_line": 168,
        "comment": "\n     * <p> Checks if the subject type may be implicitly cast to the target class\n     * following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toClass the target class\n     * @return true if <code>type</code> is assignable to <code>toClass</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeUtils.isAssignable#179",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.ParameterizedType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type == null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toParameterizedType == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toParameterizedType.equals(type)) {\n            return true;\n        }\n\n        // get the target type's raw type\n        Class<?> toClass = getRawType(toParameterizedType);\n        // get the subject type's type arguments including owner type arguments\n        // and supertype arguments up to and including the target class.\n        Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\n\n        // null means the two types are not compatible\n        if (fromTypeVarAssigns == null) {\n            return false;\n        }\n\n        // compatible types, but there's no type arguments. this is equivalent\n        // to comparing Map< ?, ? > to Map, and raw types are always assignable\n        // to parameterized types.\n        if (fromTypeVarAssigns.isEmpty()) {\n            return true;\n        }\n\n        // get the target type's type arguments including owner type arguments\n        Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n                toClass, typeVarAssigns);\n\n        // now to check each type argument\n        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n            Type toTypeArg = entry.getValue();\n            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n\n            // parameters must either be absent from the subject type, within\n            // the bounds of the wildcard type, or be an exact match to the\n            // parameters of the target type.\n            if (fromTypeArg != null\n                    && !toTypeArg.equals(fromTypeArg)\n                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n                            typeVarAssigns))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n",
        "begin_line": 179,
        "end_line": 235,
        "comment": "\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * parameterized type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toParameterizedType the target parameterized type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to <code>toType</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.isAssignable#260",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.GenericArrayType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type == null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toGenericArrayType == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toGenericArrayType.equals(type)) {\n            return true;\n        }\n\n        Type toComponentType = toGenericArrayType.getGenericComponentType();\n\n        if (type instanceof Class<?>) {\n            Class<?> cls = (Class<?>) type;\n\n            // compare the component types\n            return cls.isArray()\n                    && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\n        }\n\n        if (type instanceof GenericArrayType) {\n            // compare the component types\n            return isAssignable(((GenericArrayType) type).getGenericComponentType(),\n                    toComponentType, typeVarAssigns);\n        }\n\n        if (type instanceof WildcardType) {\n            // so long as one of the upper bounds is assignable, it's good\n            for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\n                if (isAssignable(bound, toGenericArrayType)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        if (type instanceof TypeVariable<?>) {\n            // probably should remove the following logic and just return false.\n            // type variables cannot specify arrays as bounds.\n            for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\n                if (isAssignable(bound, toGenericArrayType)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        if (type instanceof ParameterizedType) {\n            // the raw type of a parameterized type is never an array or\n            // generic array, otherwise the declaration would look like this:\n            // Collection[]< ? extends String > collection;\n            return false;\n        }\n\n        throw new IllegalStateException(\"found an unhandled type: \" + type);\n    }\n",
        "begin_line": 260,
        "end_line": 324,
        "comment": "\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * generic array type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toGenericArrayType the target generic array type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to\n     * <code>toGenericArrayType</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.isAssignable#336",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.WildcardType, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static boolean isAssignable(Type type, WildcardType toWildcardType,\n            Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type == null) {\n            return true;\n        }\n\n        // only a null type can be assigned to null type which\n        // would have cause the previous to return true\n        if (toWildcardType == null) {\n            return false;\n        }\n\n        // all types are assignable to themselves\n        if (toWildcardType.equals(type)) {\n            return true;\n        }\n\n        Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType);\n        Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType);\n\n        if (type instanceof WildcardType) {\n            WildcardType wildcardType = (WildcardType) type;\n            Type[] upperBounds = getImplicitUpperBounds(wildcardType);\n            Type[] lowerBounds = getImplicitLowerBounds(wildcardType);\n\n            for (Type toBound : toUpperBounds) {\n                // if there are assignments for unresolved type variables,\n                // now's the time to substitute them.\n                toBound = substituteTypeVariables(toBound, typeVarAssigns);\n\n                // each upper bound of the subject type has to be assignable to\n                // each\n                // upper bound of the target type\n                for (Type bound : upperBounds) {\n                    if (!isAssignable(bound, toBound, typeVarAssigns)) {\n                        return false;\n                    }\n                }\n            }\n\n            for (Type toBound : toLowerBounds) {\n                // if there are assignments for unresolved type variables,\n                // now's the time to substitute them.\n                toBound = substituteTypeVariables(toBound, typeVarAssigns);\n\n                // each lower bound of the target type has to be assignable to\n                // each\n                // lower bound of the subject type\n                for (Type bound : lowerBounds) {\n                    if (!isAssignable(toBound, bound, typeVarAssigns)) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        for (Type toBound : toUpperBounds) {\n            // if there are assignments for unresolved type variables,\n            // now's the time to substitute them.\n            if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\n                    typeVarAssigns)) {\n                return false;\n            }\n        }\n\n        for (Type toBound : toLowerBounds) {\n            // if there are assignments for unresolved type variables,\n            // now's the time to substitute them.\n            if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\n                    typeVarAssigns)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n",
        "begin_line": 336,
        "end_line": 413,
        "comment": "\n     * <p> Checks if the subject type may be implicitly cast to the target\n     * wildcard type following the Java generics rules. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toWildcardType the target wildcard type\n     * @param typeVarAssigns a map with type variables\n     * @return true if <code>type</code> is assignable to\n     * <code>toWildcardType</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "StringEscapeUtils.escapeHtml4#432",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/StringEscapeUtils.java",
        "class_name": "org.apache.commons.lang3.StringEscapeUtils",
        "signature": "org.apache.commons.lang3.StringEscapeUtils.escapeHtml4(java.lang.String)",
        "snippet": "    public static final String escapeHtml4(String input) {\n        return ESCAPE_HTML4.translate(input);\n    }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n     * <p>Escapes the characters in a {@code String} using HTML entities.</p>\n     *\n     * <p>\n     * For example:\n     * </p> \n     * <p><code>\"bread\" & \"butter\"</code></p>\n     * becomes:\n     * <p>\n     * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.\n     * </p>\n     *\n     * <p>Supports all known HTML 4.0 entities, including funky accents.\n     * Note that the commonly used apostrophe escape character (&amp;apos;)\n     * is not a legal entity and so is not supported). </p>\n     *\n     * @param input  the {@code String} to escape, may be null\n     * @return a new escaped {@code String}, {@code null} if null string input\n     * \n     * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n     * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n     * \n     * @since 3.0\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ClassUtils.isAssignable#619",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ClassUtils.java",
        "class_name": "org.apache.commons.lang3.ClassUtils",
        "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class<?>, java.lang.Class<?>, boolean)",
        "snippet": "    public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing) {\n        if (toClass == null) {\n            return false;\n        }\n        // have to check for null, as isAssignableFrom doesn't\n        if (cls == null) {\n            return !toClass.isPrimitive();\n        }\n        //autoboxing:\n        if (autoboxing) {\n            if (cls.isPrimitive() && !toClass.isPrimitive()) {\n                cls = primitiveToWrapper(cls);\n                if (cls == null) {\n                    return false;\n                }\n            }\n            if (toClass.isPrimitive() && !cls.isPrimitive()) {\n                cls = wrapperToPrimitive(cls);\n                if (cls == null) {\n                    return false;\n                }\n            }\n        }\n        if (cls.equals(toClass)) {\n            return true;\n        }\n        if (cls.isPrimitive()) {\n            if (toClass.isPrimitive() == false) {\n                return false;\n            }\n            if (Integer.TYPE.equals(cls)) {\n                return Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Long.TYPE.equals(cls)) {\n                return Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Boolean.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Double.TYPE.equals(cls)) {\n                return false;\n            }\n            if (Float.TYPE.equals(cls)) {\n                return Double.TYPE.equals(toClass);\n            }\n            if (Character.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Short.TYPE.equals(cls)) {\n                return Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            if (Byte.TYPE.equals(cls)) {\n                return Short.TYPE.equals(toClass)\n                    || Integer.TYPE.equals(toClass)\n                    || Long.TYPE.equals(toClass)\n                    || Float.TYPE.equals(toClass)\n                    || Double.TYPE.equals(toClass);\n            }\n            // should never get here\n            return false;\n        }\n        return toClass.isAssignableFrom(cls);\n    }\n",
        "begin_line": 619,
        "end_line": 690,
        "comment": "\n     * <p>Checks if one {@code Class} can be assigned to a variable of\n     * another {@code Class}.</p>\n     *\n     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n     * this method takes into account widenings of primitive classes and\n     * {@code null}s.</p>\n     *\n     * <p>Primitive widenings allow an int to be assigned to a long, float or\n     * double. This method returns the correct result for these cases.</p>\n     *\n     * <p>{@code Null} may be assigned to any reference type. This method\n     * will return {@code true} if {@code null} is passed in and the\n     * toClass is non-primitive.</p>\n     *\n     * <p>Specifically, this method tests whether the type represented by the\n     * specified {@code Class} parameter can be converted to the type\n     * represented by this {@code Class} object via an identity conversion\n     * widening primitive or widening reference conversion. See\n     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n     *\n     * @param cls  the Class to check, may be null\n     * @param toClass  the Class to try to assign into, returns false if null\n     * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n     * @return {@code true} if assignment possible\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClassUtils.primitiveToWrapper#704",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ClassUtils.java",
        "class_name": "org.apache.commons.lang3.ClassUtils",
        "signature": "org.apache.commons.lang3.ClassUtils.primitiveToWrapper(java.lang.Class<?>)",
        "snippet": "    public static Class<?> primitiveToWrapper(Class<?> cls) {\n        Class<?> convertedClass = cls;\n        if (cls != null && cls.isPrimitive()) {\n            convertedClass = primitiveWrapperMap.get(cls);\n        }\n        return convertedClass;\n    }\n",
        "begin_line": 704,
        "end_line": 710,
        "comment": "\n     * <p>Converts the specified primitive Class object to its corresponding\n     * wrapper Class object.</p>\n     *\n     * <p>NOTE: From v2.2, this method handles {@code Void.TYPE},\n     * returning {@code Void.TYPE}.</p>\n     *\n     * @param cls  the class to convert, may be null\n     * @return the wrapper class for {@code cls} or {@code cls} if\n     * {@code cls} is not a primitive. {@code null} if null input.\n     * @since 2.1\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "ArrayUtils.clone#319",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ArrayUtils.java",
        "class_name": "org.apache.commons.lang3.ArrayUtils",
        "signature": "org.apache.commons.lang3.ArrayUtils.clone(T[])",
        "snippet": "    public static <T> T[] clone(T[] array) {\n        if (array == null) {\n            return null;\n        }\n        return array.clone();\n    }\n",
        "begin_line": 319,
        "end_line": 324,
        "comment": "\n     * <p>Shallow clones an array returning a typecast result and handling\n     * {@code null}.</p>\n     *\n     * <p>The objects in the array are not cloned, thus there is no special\n     * handling for multi-dimensional arrays.</p>\n     *\n     * <p>This method returns {@code null} for a {@code null} input array.</p>\n     *\n     * @param <T> the component type of the array\n     * @param array  the array to shallow clone, may be {@code null}\n     * @return the cloned array, {@code null} if {@code null} input\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.getTypeArguments#545",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class<?>, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\n            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n        if (type instanceof Class<?>) {\n            return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);\n        }\n\n        if (type instanceof ParameterizedType) {\n            return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);\n        }\n\n        if (type instanceof GenericArrayType) {\n            return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass\n                    .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);\n        }\n\n        // since wildcard types are not assignable to classes, should this just\n        // return null?\n        if (type instanceof WildcardType) {\n            for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\n                // find the first bound that is assignable to the target class\n                if (isAssignable(bound, toClass)) {\n                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\n                }\n            }\n\n            return null;\n        }\n\n        // *\n        if (type instanceof TypeVariable<?>) {\n            for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\n                // find the first bound that is assignable to the target class\n                if (isAssignable(bound, toClass)) {\n                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\n                }\n            }\n\n            return null;\n        }\n        // */\n\n        throw new IllegalStateException(\"found an unhandled type: \" + type);\n    }\n",
        "begin_line": 545,
        "end_line": 587,
        "comment": "\n     * <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>\n     *\n     * @param type the type in question\n     * @param toClass the class\n     * @param subtypeVarAssigns a map with type variables\n     * @return the map with type arguments\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6325
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeUtils.isAssignable#64",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type)",
        "snippet": "    public static boolean isAssignable(Type type, Type toType) {\n        return isAssignable(type, toType, null);\n    }\n",
        "begin_line": 64,
        "end_line": 66,
        "comment": "\n     * <p> Checks if the subject type may be implicitly cast to the target type\n     * following the Java generics rules. If both types are {@link Class}\n     * objects, the method returns the result of\n     * {@link ClassUtils#isAssignable(Class, Class)}. </p>\n     *\n     * @param type the subject type to be assigned to the target type\n     * @param toType the target type\n     * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeUtils.getClosestParentType#797",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getClosestParentType(java.lang.Class<?>, java.lang.Class<?>)",
        "snippet": "    private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {\n        // only look at the interfaces if the super class is also an interface\n        if (superClass.isInterface()) {\n            // get the generic interfaces of the subject class\n            Type[] interfaceTypes = cls.getGenericInterfaces();\n            // will hold the best generic interface match found\n            Type genericInterface = null;\n\n            // find the interface closest to the super class\n            for (Type midType : interfaceTypes) {\n                Class<?> midClass = null;\n\n                if (midType instanceof ParameterizedType) {\n                    midClass = getRawType((ParameterizedType) midType);\n                } else if (midType instanceof Class<?>) {\n                    midClass = (Class<?>) midType;\n                } else {\n                    throw new IllegalStateException(\"Unexpected generic\"\n                            + \" interface type found: \" + midType);\n                }\n\n                // check if this interface is further up the inheritance chain\n                // than the previously found match\n                if (isAssignable(midClass, superClass)\n                        && isAssignable(genericInterface, (Type) midClass)) {\n                    genericInterface = midType;\n                }\n            }\n\n            // found a match?\n            if (genericInterface != null) {\n                return genericInterface;\n            }\n        }\n\n        // none of the interfaces were descendants of the target class, so the\n        // super class has to be one, instead\n        return cls.getGenericSuperclass();\n    }\n",
        "begin_line": 797,
        "end_line": 835,
        "comment": "\n     * <p> Closest parent type? Closest to what? The closest parent type to the\n     * super class specified by <code>superClass</code>. </p>\n     *\n     * @param cls the class in question\n     * @param superClass the super class\n     * @return the closes parent type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeUtils.getRawType#985",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getRawType(java.lang.reflect.ParameterizedType)",
        "snippet": "    private static Class<?> getRawType(ParameterizedType parameterizedType) {\n        Type rawType = parameterizedType.getRawType();\n\n        // check if raw type is a Class object\n        // not currently necessary, but since the return type is Type instead of\n        // Class, there's enough reason to believe that future versions of Java\n        // may return other Type implementations. And type-safety checking is\n        // rarely a bad idea.\n        if (!(rawType instanceof Class<?>)) {\n            throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);\n        }\n\n        return (Class<?>) rawType;\n    }\n",
        "begin_line": 985,
        "end_line": 998,
        "comment": "\n     * <p> Transforms the passed in type to a {@code Class} object. Type-checking method of convenience. </p>\n     *\n     * @param parameterizedType the type to be converted\n     * @return the corresponding {@code Class} object\n     * @throws IllegalStateException if the conversion fails\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.getJavaVersionMatches#1264",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getJavaVersionMatches(java.lang.String)",
        "snippet": "    private static boolean getJavaVersionMatches(String versionPrefix) {\n        return isJavaVersionMatch(JAVA_SPECIFICATION_VERSION, versionPrefix);\n    }\n",
        "begin_line": 1264,
        "end_line": 1266,
        "comment": "\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     *\n     * @param versionPrefix the prefix for the java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.getOSMatches#1275",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatches(java.lang.String, java.lang.String)",
        "snippet": "    private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n        return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);\n    }\n",
        "begin_line": 1275,
        "end_line": 1277,
        "comment": "\n     * Decides if the operating system matches.\n     *\n     * @param osNamePrefix the prefix for the os name\n     * @param osVersionPrefix the prefix for the version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.getOSMatchesName#1285",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getOSMatchesName(java.lang.String)",
        "snippet": "    private static boolean getOSMatchesName(String osNamePrefix) {\n        return isOSNameMatch(OS_NAME, osNamePrefix);\n    }\n",
        "begin_line": 1285,
        "end_line": 1287,
        "comment": "\n     * Decides if the operating system matches.\n     *\n     * @param osNamePrefix the prefix for the os name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.getSystemProperty#1302",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.getSystemProperty(java.lang.String)",
        "snippet": "    private static String getSystemProperty(String property) {\n        try {\n            return System.getProperty(property);\n        } catch (SecurityException ex) {\n            // we are not allowed to look at this property\n            System.err.println(\"Caught a SecurityException reading the system property '\" + property\n                    + \"'; the SystemUtils property value will default to null.\");\n            return null;\n        }\n    }\n",
        "begin_line": 1302,
        "end_line": 1311,
        "comment": "\n     * <p>\n     * Gets a System property, defaulting to {@code null} if the property cannot be read.\n     * </p>\n     * <p>\n     * If a {@code SecurityException} is caught, the return value is {@code null} and a message is written to\n     * {@code System.err}.\n     * </p>\n     *\n     * @param property the system property name\n     * @return the system property value or {@code null} if a security problem occurs\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.isJavaVersionAtLeast#1370",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(org.apache.commons.lang3.JavaVersion)",
        "snippet": "    public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\n        return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n    }\n",
        "begin_line": 1370,
        "end_line": 1372,
        "comment": "\n     * <p>\n     * Is the Java version at least the requested version.\n     * </p>\n     * <p>\n     * Example input:\n     * </p>\n     * <ul>\n     * <li>{@code 1.2f} to test for Java 1.2</li>\n     * <li>{@code 1.31f} to test for Java 1.3.1</li>\n     * </ul>\n     *\n     * @param requiredVersion the required version, for example 1.31f\n     * @return {@code true} if the actual version is equal or greater than the required version\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.isJavaVersionMatch#1386",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isJavaVersionMatch(java.lang.String, java.lang.String)",
        "snippet": "    static boolean isJavaVersionMatch(String version, String versionPrefix) {\n        if (version == null) {\n            return false;\n        }\n        return version.startsWith(versionPrefix);\n    }\n",
        "begin_line": 1386,
        "end_line": 1391,
        "comment": "\n     * <p>\n     * Decides if the Java version matches.\n     * </p>\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     *\n     * @param version the actual Java version\n     * @param versionPrefix the prefix for the expected Java version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.isOSMatch#1405",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isOSMatch(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {\n        if (osName == null || osVersion == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);\n    }\n",
        "begin_line": 1405,
        "end_line": 1410,
        "comment": "\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     *\n     * @param osName the actual OS name\n     * @param osVersion the actual OS version\n     * @param osNamePrefix the prefix for the expected OS name\n     * @param osVersionPrefix the prefix for the expected OS version\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "SystemUtils.isOSNameMatch#1422",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
        "class_name": "org.apache.commons.lang3.SystemUtils",
        "signature": "org.apache.commons.lang3.SystemUtils.isOSNameMatch(java.lang.String, java.lang.String)",
        "snippet": "    static boolean isOSNameMatch(String osName, String osNamePrefix) {\n        if (osName == null) {\n            return false;\n        }\n        return osName.startsWith(osNamePrefix);\n    }\n",
        "begin_line": 1422,
        "end_line": 1427,
        "comment": "\n     * Decides if the operating system matches.\n     * <p>\n     * This method is package private instead of private to support unit test invocation.\n     * </p>\n     *\n     * @param osName the actual OS name\n     * @param osNamePrefix the prefix for the expected OS name\n     * @return true if matches, or false if not or can't determine\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "JavaVersion.JavaVersion#89",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
        "class_name": "org.apache.commons.lang3.JavaVersion",
        "signature": "org.apache.commons.lang3.JavaVersion.JavaVersion(float, java.lang.String)",
        "snippet": "    JavaVersion(final float value, final String name) {\n        this.value = value;\n        this.name = name;\n    }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\n     * Constructor.\n     *\n     * @param value  the float value\n     * @param name  the standard name, not null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "JavaVersion.atLeast#104",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
        "class_name": "org.apache.commons.lang3.JavaVersion",
        "signature": "org.apache.commons.lang3.JavaVersion.atLeast(org.apache.commons.lang3.JavaVersion)",
        "snippet": "    public boolean atLeast(JavaVersion requiredVersion) {\n        return this.value >= requiredVersion.value;\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * <p>Whether this version of Java is at least the version of Java passed in.</p>\n     *\n     * <p>For example:<br />\n     *  {@code myVersion.atLeast(JavaVersion.JAVA_1_4)}<p>\n     *\n     * @param requiredVersion  the version to check against, not null\n     * @return true if this version is equal to or greater than the specified version\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "JavaVersion.get#131",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
        "class_name": "org.apache.commons.lang3.JavaVersion",
        "signature": "org.apache.commons.lang3.JavaVersion.get(java.lang.String)",
        "snippet": "    static JavaVersion get(final String nom) {\n        if (\"0.9\".equals(nom)) {\n            return JAVA_0_9;\n        } else if (\"1.1\".equals(nom)) {\n            return JAVA_1_1;\n        } else if (\"1.2\".equals(nom)) {\n            return JAVA_1_2;\n        } else if (\"1.3\".equals(nom)) {\n            return JAVA_1_3;\n        } else if (\"1.4\".equals(nom)) {\n            return JAVA_1_4;\n        } else if (\"1.5\".equals(nom)) {\n            return JAVA_1_5;\n        } else if (\"1.6\".equals(nom)) {\n            return JAVA_1_6;\n        } else if (\"1.7\".equals(nom)) {\n            return JAVA_1_7;\n        } else if (\"1.8\".equals(nom)) {\n            return JAVA_1_8;\n        } else {\n            return null;\n        }\n    }\n",
        "begin_line": 131,
        "end_line": 153,
        "comment": "\n     * Transforms the given string with a Java version number to the\n     * corresponding constant of this enumeration class. This method is used\n     * internally.\n     *\n     * @param nom the Java version as string\n     * @return the corresponding enumeration constant or <b>null</b> if the\n     * version is unknown\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClassUtils.addAbbreviation#110",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ClassUtils.java",
        "class_name": "org.apache.commons.lang3.ClassUtils",
        "signature": "org.apache.commons.lang3.ClassUtils.addAbbreviation(java.lang.String, java.lang.String)",
        "snippet": "    private static void addAbbreviation(String primitive, String abbreviation) {\n        abbreviationMap.put(primitive, abbreviation);\n        reverseAbbreviationMap.put(abbreviation, primitive);\n    }\n",
        "begin_line": 110,
        "end_line": 113,
        "comment": "\n     * Add primitive type abbreviation to maps of abbreviations.\n     *\n     * @param primitive Canonical name of primitive type\n     * @param abbreviation Corresponding abbreviation of primitive type\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "ClassUtils.isAssignable#588",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/ClassUtils.java",
        "class_name": "org.apache.commons.lang3.ClassUtils",
        "signature": "org.apache.commons.lang3.ClassUtils.isAssignable(java.lang.Class<?>, java.lang.Class<?>)",
        "snippet": "    public static boolean isAssignable(Class<?> cls, Class<?> toClass) {\n        return isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\n    }\n",
        "begin_line": 588,
        "end_line": 590,
        "comment": "\n     * <p>Checks if one {@code Class} can be assigned to a variable of\n     * another {@code Class}.</p>\n     *\n     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n     * this method takes into account widenings of primitive classes and\n     * {@code null}s.</p>\n     *\n     * <p>Primitive widenings allow an int to be assigned to a long, float or\n     * double. This method returns the correct result for these cases.</p>\n     *\n     * <p>{@code Null} may be assigned to any reference type. This method\n     * will return {@code true} if {@code null} is passed in and the\n     * toClass is non-primitive.</p>\n     *\n     * <p>Specifically, this method tests whether the type represented by the\n     * specified {@code Class} parameter can be converted to the type\n     * represented by this {@code Class} object via an identity conversion\n     * widening primitive or widening reference conversion. See\n     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n     *\n     * <p><strong>Since Lang 3.0,</strong> this method will default behavior for\n     * calculating assignability between primitive and wrapper types <em>corresponding\n     * to the running Java version</em>; i.e. autoboxing will be the default\n     * behavior in VMs running Java versions >= 1.5.</p>\n     *\n     * @param cls  the Class to check, may be null\n     * @param toClass  the Class to try to assign into, returns false if null\n     * @return {@code true} if assignment possible\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5773
        },
        "num_failing_tests": 2
    },
    {
        "name": "TypeUtils.substituteTypeVariables#471",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.substituteTypeVariables(java.lang.reflect.Type, java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>)",
        "snippet": "    private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns) {\n        if (type instanceof TypeVariable<?> && typeVarAssigns != null) {\n            Type replacementType = typeVarAssigns.get(type);\n\n            if (replacementType == null) {\n                throw new IllegalArgumentException(\"missing assignment type for type variable \"\n                        + type);\n            }\n\n            return replacementType;\n        }\n\n        return type;\n    }\n",
        "begin_line": 471,
        "end_line": 484,
        "comment": "\n     * <p> </p>\n     *\n     * @param type the type to be replaced\n     * @param typeVarAssigns the map with type variables\n     * @return the replaced type\n     * @throws IllegalArgumentException if the type cannot be substituted\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.getTypeArguments#533",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(java.lang.reflect.Type, java.lang.Class<?>)",
        "snippet": "    public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass) {\n        return getTypeArguments(type, toClass, null);\n    }\n",
        "begin_line": 533,
        "end_line": 535,
        "comment": "\n     * <p> Gets the type arguments of a class/interface based on a subtype. For\n     * instance, this method will determine that both of the parameters for the\n     * interface {@link Map} are {@link Object} for the subtype\n     * {@link java.util.Properties Properties} even though the subtype does not\n     * directly implement the <code>Map</code> interface. <p> </p> This method\n     * returns <code>null</code> if <code>type</code> is not assignable to\n     * <code>toClass</code>. It returns an empty map if none of the classes or\n     * interfaces in its inheritance hierarchy specify any type arguments. </p>\n     * <p> A side-effect of this method is that it also retrieves the type\n     * arguments for the classes and interfaces that are part of the hierarchy\n     * between <code>type</code> and <code>toClass</code>. So with the above\n     * example, this method will also determine that the type arguments for\n     * {@link java.util.Hashtable Hashtable} are also both <code>Object</code>.\n     * In cases where the interface specified by <code>toClass</code> is\n     * (indirectly) implemented more than once (e.g. where <code>toClass</code>\n     * specifies the interface {@link java.lang.Iterable Iterable} and\n     * <code>type</code> specifies a parameterized type that implements both\n     * {@link java.util.Set Set} and {@link java.util.Collection Collection}),\n     * this method will look at the inheritance hierarchy of only one of the\n     * implementations/subclasses; the first interface encountered that isn't a\n     * subinterface to one of the others in the <code>type</code> to\n     * <code>toClass</code> hierarchy. </p>\n     *\n     * @param type the type from which to determine the type parameters of\n     * <code>toClass</code>\n     * @param toClass the class whose type parameters are to be determined based\n     * on the subtype <code>type</code>\n     * @return a map of the type assignments for the type variables in each type\n     * in the inheritance hierarchy from <code>type</code> to\n     * <code>toClass</code> inclusive.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.normalizeUpperBounds#875",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(java.lang.reflect.Type[])",
        "snippet": "    public static Type[] normalizeUpperBounds(Type[] bounds) {\n        // don't bother if there's only one (or none) type\n        if (bounds.length < 2) {\n            return bounds;\n        }\n\n        Set<Type> types = new HashSet<Type>(bounds.length);\n\n        for (Type type1 : bounds) {\n            boolean subtypeFound = false;\n\n            for (Type type2 : bounds) {\n                if (type1 != type2 && isAssignable(type2, type1, null)) {\n                    subtypeFound = true;\n                    break;\n                }\n            }\n\n            if (!subtypeFound) {\n                types.add(type1);\n            }\n        }\n\n        return types.toArray(new Type[types.size()]);\n    }\n",
        "begin_line": 875,
        "end_line": 899,
        "comment": "\n     * <p> This method strips out the redundant upper bound types in type\n     * variable types and wildcard types (or it would with wildcard types if\n     * multiple upper bounds were allowed). </p> <p> Example: with the variable\n     * type declaration:\n     *\n     * <pre> &lt;K extends java.util.Collection&lt;String&gt; &amp;\n     * java.util.List&lt;String&gt;&gt; </pre>\n     *\n     * since <code>List</code> is a subinterface of <code>Collection</code>,\n     * this method will return the bounds as if the declaration had been:\n     *\n     * <pre> &lt;K extends java.util.List&lt;String&gt;&gt; </pre>\n     *\n     * </p>\n     *\n     * @param bounds an array of types representing the upper bounds of either\n     * <code>WildcardType</code> or <code>TypeVariable</code>.\n     * @return an array containing the values from <code>bounds</code> minus the\n     * redundant types.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.getImplicitUpperBounds#926",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(java.lang.reflect.WildcardType)",
        "snippet": "    public static Type[] getImplicitUpperBounds(WildcardType wildcardType) {\n        Type[] bounds = wildcardType.getUpperBounds();\n\n        return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\n    }\n",
        "begin_line": 926,
        "end_line": 930,
        "comment": "\n     * <p> Returns an array containing the sole value of {@link Object} if\n     * {@link WildcardType#getUpperBounds()} returns an empty array. Otherwise,\n     * it returns the result of <code>WildcardType.getUpperBounds()</code>\n     * passed into {@link #normalizeUpperBounds}. </p>\n     *\n     * @param wildcardType the subject wildcard type\n     * @return a non-empty array containing the upper bounds of the wildcard\n     * type.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "TypeUtils.getImplicitLowerBounds#941",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
        "class_name": "org.apache.commons.lang3.reflect.TypeUtils",
        "signature": "org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(java.lang.reflect.WildcardType)",
        "snippet": "    public static Type[] getImplicitLowerBounds(WildcardType wildcardType) {\n        Type[] bounds = wildcardType.getLowerBounds();\n\n        return bounds.length == 0 ? new Type[] { null } : bounds;\n    }\n",
        "begin_line": 941,
        "end_line": 945,
        "comment": "\n     * <p> Returns an array containing a single value of <code>null</code> if\n     * {@link WildcardType#getLowerBounds()} returns an empty array. Otherwise,\n     * it returns the result of <code>WildcardType.getLowerBounds()</code>. </p>\n     *\n     * @param wildcardType the subject wildcard type\n     * @return a non-empty array containing the lower bounds of the wildcard\n     * type.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    }
]