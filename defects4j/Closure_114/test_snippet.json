[
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.NameAnalyzerTest()",
        "snippet": "  public NameAnalyzerTest() {\n    super(kExterns);\n  }\n",
        "begin_line": 34,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 35,col 5)-(line 35,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.setUp()",
        "snippet": "  @Override\n  protected void setUp() {\n    super.enableNormalize();\n    super.enableLineNumberCheck(true);\n  }\n",
        "begin_line": 38,
        "end_line": 42,
        "comment": "",
        "child_ranges": [
            "(line 40,col 5)-(line 40,col 28)",
            "(line 41,col 5)-(line 41,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // pass reaches steady state after 1 iteration.\n    return 1;\n  }\n",
        "begin_line": 44,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration1()",
        "snippet": "  public void testRemoveVarDeclaration1() {\n    test(\"var foo = 3;\", \"\");\n  }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration2()",
        "snippet": "  public void testRemoveVarDeclaration2() {\n    test(\"var foo = 3, bar = 4; externfoo = foo;\",\n         \"var foo = 3; externfoo = foo;\");\n  }\n",
        "begin_line": 54,
        "end_line": 57,
        "comment": "",
        "child_ranges": [
            "(line 55,col 5)-(line 56,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration3()",
        "snippet": "  public void testRemoveVarDeclaration3() {\n    test(\"var a = f(), b = 1, c = 2; b; c\", \"f();var b = 1, c = 2; b; c\");\n  }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "",
        "child_ranges": [
            "(line 60,col 5)-(line 60,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration4()",
        "snippet": "  public void testRemoveVarDeclaration4() {\n    test(\"var a = 0, b = f(), c = 2; a; c\", \"var a = 0;f();var c = 2; a; c\");\n  }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "",
        "child_ranges": [
            "(line 64,col 5)-(line 64,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration5()",
        "snippet": "  public void testRemoveVarDeclaration5() {\n    test(\"var a = 0, b = 1, c = f(); a; b\", \"var a = 0, b = 1; f(); a; b\");\n  }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 68,col 5)-(line 68,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration6()",
        "snippet": "  public void testRemoveVarDeclaration6() {\n    test(\"var a = 0, b = a = 1; a\", \"var a = 0; a = 1; a\");\n  }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration7()",
        "snippet": "  public void testRemoveVarDeclaration7() {\n    test(\"var a = 0, b = a = 1\", \"\");\n  }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 76,col 5)-(line 76,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveVarDeclaration8()",
        "snippet": "  public void testRemoveVarDeclaration8() {\n    test(\"var a;var b = 0, c = a = b = 1\", \"\");\n  }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveDeclaration1()",
        "snippet": "  public void testRemoveDeclaration1() {\n    test(\"var a;var b = 0, c = a = b = 1\", \"\");\n  }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveDeclaration2()",
        "snippet": "  public void testRemoveDeclaration2() {\n    test(\"var a,b,c; c = a = b = 1\", \"\");\n  }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "",
        "child_ranges": [
            "(line 89,col 5)-(line 89,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveDeclaration3()",
        "snippet": "  public void testRemoveDeclaration3() {\n    test(\"var a,b,c; c = a = b = {}; a.x = 1;\", \"\");\n  }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 93,col 5)-(line 93,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveDeclaration4()",
        "snippet": "  public void testRemoveDeclaration4() {\n    testSame(\"var a,b,c; c = a = b = {}; a.x = 1;alert(c.x);\");\n  }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveDeclaration5()",
        "snippet": "  public void testRemoveDeclaration5() {\n    test(\"var a,b,c; c = a = b = null; use(b)\", \"var b;b=null;use(b)\");\n  }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveDeclaration6()",
        "snippet": "  public void testRemoveDeclaration6() {\n    test(\"var a,b,c; c = a = b = 'str';use(b)\", \"var b;b='str';use(b)\");\n  }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 105,col 5)-(line 105,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveDeclaration7()",
        "snippet": "  public void testRemoveDeclaration7() {\n    test(\"var a,b,c; c = a = b = true;use(b)\", \"var b;b=true;use(b)\");\n  }\n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveFunction1()",
        "snippet": "  public void testRemoveFunction1() {\n    test(\"var foo = function(){};\", \"\");\n  }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 113,col 5)-(line 113,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveFunction2()",
        "snippet": "  public void testRemoveFunction2() {\n    test(\"var foo; foo = function(){};\", \"\");\n  }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveFunction3()",
        "snippet": "  public void testRemoveFunction3() {\n    test(\"var foo = {}; foo.bar = function() {};\", \"\");\n  }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "",
        "child_ranges": [
            "(line 121,col 5)-(line 121,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveFunction4()",
        "snippet": "  public void testRemoveFunction4() {\n    test(\"var a = {}; a.b = {}; a.b.c = function() {};\", \"\");\n  }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "",
        "child_ranges": [
            "(line 125,col 5)-(line 125,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testReferredToByWindow()",
        "snippet": "  public void testReferredToByWindow() {\n    testSame(\"var foo = {}; foo.bar = function() {}; window['fooz'] = foo.bar\");\n  }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 129,col 5)-(line 129,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExtern()",
        "snippet": "  public void testExtern() {\n    testSame(\"externfoo = 5\");\n  }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 133,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveNamedFunction()",
        "snippet": "  public void testRemoveNamedFunction() {\n    test(\"function foo(){}\", \"\");\n  }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction1()",
        "snippet": "  public void testRemoveRecursiveFunction1() {\n    test(\"function f(){f()}\", \"\");\n  }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction2()",
        "snippet": "  public void testRemoveRecursiveFunction2() {\n    test(\"var f = function (){f()}\", \"\");\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction2a()",
        "snippet": "  public void testRemoveRecursiveFunction2a() {\n    test(\"var f = function g(){g()}\", \"\");\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction3()",
        "snippet": "  public void testRemoveRecursiveFunction3() {\n    test(\"var f;f = function (){f()}\", \"\");\n  }\n",
        "begin_line": 152,
        "end_line": 154,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction4()",
        "snippet": "  public void testRemoveRecursiveFunction4() {\n    // don't removed if name definition doesn't exist.\n    testSame(\"f = function (){f()}\");\n  }\n",
        "begin_line": 156,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction5()",
        "snippet": "  public void testRemoveRecursiveFunction5() {\n    test(\"function g(){f()}function f(){g()}\", \"\");\n  }\n",
        "begin_line": 161,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction6()",
        "snippet": "  public void testRemoveRecursiveFunction6() {\n    test(\"var f=function(){g()};function g(){f()}\", \"\");\n  }\n",
        "begin_line": 165,
        "end_line": 167,
        "comment": "",
        "child_ranges": [
            "(line 166,col 5)-(line 166,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction7()",
        "snippet": "  public void testRemoveRecursiveFunction7() {\n    test(\"var g = function(){f()};var f = function(){g()}\", \"\");\n  }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "",
        "child_ranges": [
            "(line 170,col 5)-(line 170,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction8()",
        "snippet": "  public void testRemoveRecursiveFunction8() {\n    test(\"var o = {};o.f = function(){o.f()}\", \"\");\n  }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveRecursiveFunction9()",
        "snippet": "  public void testRemoveRecursiveFunction9() {\n    testSame(\"var o = {};o.f = function(){o.f()};o.f()\");\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification1()",
        "snippet": "  public void testSideEffectClassification1() {\n    test(\"foo();\", \"foo();\");\n  }\n",
        "begin_line": 181,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 182,col 5)-(line 182,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification2()",
        "snippet": "  public void testSideEffectClassification2() {\n    test(\"var a = foo();\", \"foo();\");\n  }\n",
        "begin_line": 185,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 186,col 5)-(line 186,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification3()",
        "snippet": "  public void testSideEffectClassification3() {\n    testSame(\"var a = foo();window['b']=a;\");\n  }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification4()",
        "snippet": "  public void testSideEffectClassification4() {\n    testSame(\"function sef(){} sef();\");\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification5()",
        "snippet": "  public void testSideEffectClassification5() {\n    testSame(\"function nsef(){} var a = nsef();window['b']=a;\");\n  }\n",
        "begin_line": 197,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 198,col 5)-(line 198,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification6()",
        "snippet": "  public void testSideEffectClassification6() {\n    test(\"function sef(){} sef();\", \"function sef(){} sef();\");\n  }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSideEffectClassification7()",
        "snippet": "  public void testSideEffectClassification7() {\n    testSame(\"function sef(){} var a = sef();window['b']=a;\");\n  }\n",
        "begin_line": 205,
        "end_line": 207,
        "comment": "",
        "child_ranges": [
            "(line 206,col 5)-(line 206,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation1()",
        "snippet": "  public void testNoSideEffectAnnotation1() {\n    test(\"function f(){} var a = f();\",\n         \"function f(){} f()\");\n  }\n",
        "begin_line": 209,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 210,col 5)-(line 211,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation2()",
        "snippet": "  public void testNoSideEffectAnnotation2() {\n    test(\"/**@nosideeffects*/function f(){}\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 214,
        "end_line": 217,
        "comment": "",
        "child_ranges": [
            "(line 215,col 5)-(line 216,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation3()",
        "snippet": "  public void testNoSideEffectAnnotation3() {\n    test(\"var f = function(){}; var a = f();\",\n         \"var f = function(){}; f();\");\n  }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "",
        "child_ranges": [
            "(line 220,col 5)-(line 221,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation4()",
        "snippet": "  public void testNoSideEffectAnnotation4() {\n    test(\"var f = /**@nosideeffects*/function(){};\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 224,
        "end_line": 227,
        "comment": "",
        "child_ranges": [
            "(line 225,col 5)-(line 226,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation5()",
        "snippet": "  public void testNoSideEffectAnnotation5() {\n    test(\"var f; f = function(){}; var a = f();\",\n         \"var f; f = function(){}; f();\");\n  }\n",
        "begin_line": 229,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 230,col 5)-(line 231,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation6()",
        "snippet": "  public void testNoSideEffectAnnotation6() {\n    test(\"var f; f = /**@nosideeffects*/function(){};\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 234,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 236,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation7()",
        "snippet": "  public void testNoSideEffectAnnotation7() {\n    test(\"var f;\" +\n         \"f = /**@nosideeffects*/function(){};\",\n         \"f = function(){};\" +\n         \"var a = f();\",\n         \"f = function(){}; f();\", null, null);\n  }\n",
        "begin_line": 239,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 244,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation8()",
        "snippet": "  public void testNoSideEffectAnnotation8() {\n    test(\"var f;\" +\n         \"f = function(){};\" +\n         \"f = /**@nosideeffects*/function(){};\",\n         \"var a = f();\",\n         \"f();\", null, null);\n  }\n",
        "begin_line": 247,
        "end_line": 253,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 252,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation9()",
        "snippet": "  public void testNoSideEffectAnnotation9() {\n    test(\"var f;\" +\n         \"f = /**@nosideeffects*/function(){};\" +\n         \"f = /**@nosideeffects*/function(){};\",\n         \"var a = f();\",\n         \"\", null, null);\n\n    test(\"var f; f = /**@nosideeffects*/function(){};\", \"var a = f();\",\n         \"\", null, null);\n  }\n",
        "begin_line": 255,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 256,col 5)-(line 260,col 25)",
            "(line 262,col 5)-(line 263,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation10()",
        "snippet": "  public void testNoSideEffectAnnotation10() {\n    test(\"var o = {}; o.f = function(){}; var a = o.f();\",\n         \"var o = {}; o.f = function(){}; o.f();\");\n  }\n",
        "begin_line": 266,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 268,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation11()",
        "snippet": "  public void testNoSideEffectAnnotation11() {\n    test(\"var o = {}; o.f = /**@nosideeffects*/function(){};\",\n         \"var a = o.f();\", \"\", null, null);\n  }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 273,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation12()",
        "snippet": "  public void testNoSideEffectAnnotation12() {\n    test(\"function c(){} var a = new c\",\n         \"function c(){} new c\");\n  }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 278,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation13()",
        "snippet": "  public void testNoSideEffectAnnotation13() {\n    test(\"/**@nosideeffects*/function c(){}\", \"var a = new c\",\n         \"\", null, null);\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 283,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation14()",
        "snippet": "  public void testNoSideEffectAnnotation14() {\n    String common = \"function c(){};\" +\n        \"c.prototype.f = /**@nosideeffects*/function(){};\";\n    test(common, \"var o = new c; var a = o.f()\", \"new c\", null, null);\n  }\n",
        "begin_line": 286,
        "end_line": 290,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 288,col 59)",
            "(line 289,col 5)-(line 289,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation15()",
        "snippet": "  public void testNoSideEffectAnnotation15() {\n    test(\"function c(){}; c.prototype.f = function(){}; var a = (new c).f()\",\n         \"function c(){}; c.prototype.f = function(){}; (new c).f()\");\n  }\n",
        "begin_line": 292,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 293,col 5)-(line 294,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoSideEffectAnnotation16()",
        "snippet": "  public void testNoSideEffectAnnotation16() {\n    test(\"/**@nosideeffects*/function c(){}\" +\n         \"c.prototype.f = /**@nosideeffects*/function(){};\",\n         \"var a = (new c).f()\",\n         \"\",\n         null, null);\n  }\n",
        "begin_line": 297,
        "end_line": 303,
        "comment": "",
        "child_ranges": [
            "(line 298,col 5)-(line 302,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFunctionPrototype()",
        "snippet": "  public void testFunctionPrototype() {\n    testSame(\"var a = 5; Function.prototype.foo = function() {return a;}\");\n  }\n",
        "begin_line": 305,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 306,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass1()",
        "snippet": "  public void testTopLevelClass1() {\n    test(\"var Point = function() {}; Point.prototype.foo = function() {}\", \"\");\n  }\n",
        "begin_line": 309,
        "end_line": 311,
        "comment": "",
        "child_ranges": [
            "(line 310,col 5)-(line 310,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass2()",
        "snippet": "  public void testTopLevelClass2() {\n    testSame(\"var Point = {}; Point.prototype.foo = function() {};\" +\n             \"externfoo = new Point()\");\n  }\n",
        "begin_line": 313,
        "end_line": 316,
        "comment": "",
        "child_ranges": [
            "(line 314,col 5)-(line 315,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass3()",
        "snippet": "  public void testTopLevelClass3() {\n    test(\"function Point() {this.me_ = Point}\", \"\");\n  }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass4()",
        "snippet": "  public void testTopLevelClass4() {\n    test(\"function f(){} function A(){} A.prototype = {x: function() {}}; f();\",\n         \"function f(){} f();\");\n  }\n",
        "begin_line": 322,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 323,col 5)-(line 324,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass5()",
        "snippet": "  public void testTopLevelClass5() {\n    testSame(\"function f(){} function A(){}\" +\n             \"A.prototype = {x: function() { f(); }}; new A();\");\n  }\n",
        "begin_line": 327,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 328,col 5)-(line 329,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass6()",
        "snippet": "  public void testTopLevelClass6() {\n    testSame(\"function f(){} function A(){}\" +\n             \"A.prototype = {x: function() { f(); }}; new A().x();\");\n  }\n",
        "begin_line": 332,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 334,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testTopLevelClass7()",
        "snippet": "  public void testTopLevelClass7() {\n    test(\"A.prototype.foo = function(){}; function A() {}\", \"\");\n  }\n",
        "begin_line": 337,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 338,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass1()",
        "snippet": "  public void testNamespacedClass1() {\n    test(\"var foo = {};foo.bar = {};foo.bar.prototype.baz = {}\", \"\");\n  }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 342,col 5)-(line 342,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass2()",
        "snippet": "  public void testNamespacedClass2() {\n    testSame(\"var foo = {};foo.bar = {};foo.bar.prototype.baz = {};\" +\n             \"window.z = new foo.bar()\");\n  }\n",
        "begin_line": 345,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 346,col 5)-(line 347,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass3()",
        "snippet": "  public void testNamespacedClass3() {\n    test(\"var a = {}; a.b = function() {}; a.b.prototype = {x: function() {}};\",\n         \"\");\n  }\n",
        "begin_line": 350,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 351,col 5)-(line 352,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass4()",
        "snippet": "  public void testNamespacedClass4() {\n    testSame(\"function f(){} var a = {}; a.b = function() {};\" +\n             \"a.b.prototype = {x: function() { f(); }}; new a.b();\");\n  }\n",
        "begin_line": 355,
        "end_line": 358,
        "comment": "",
        "child_ranges": [
            "(line 356,col 5)-(line 357,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNamespacedClass5()",
        "snippet": "  public void testNamespacedClass5() {\n    testSame(\"function f(){} var a = {}; a.b = function() {};\" +\n             \"a.b.prototype = {x: function() { f(); }}; new a.b().x();\");\n  }\n",
        "begin_line": 360,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 361,col 5)-(line 362,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToThisPrototype()",
        "snippet": "  public void testAssignmentToThisPrototype() {\n    testSame(\"Function.prototype.inherits = function(parentCtor) {\" +\n             \"  function tempCtor() {};\" +\n             \"  tempCtor.prototype = parentCtor.prototype;\" +\n             \"  this.superClass_ = parentCtor.prototype;\" +\n             \"  this.prototype = new tempCtor();\" +\n             \"  this.prototype.constructor = this;\" +\n             \"};\");\n  }\n",
        "begin_line": 365,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 366,col 5)-(line 372,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToCallResultPrototype()",
        "snippet": "  public void testAssignmentToCallResultPrototype() {\n    testSame(\"function f() { return function(){}; } f().prototype = {};\");\n  }\n",
        "begin_line": 375,
        "end_line": 377,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 376,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToExternPrototype()",
        "snippet": "  public void testAssignmentToExternPrototype() {\n    testSame(\"externfoo.prototype = {};\");\n  }\n",
        "begin_line": 379,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 380,col 5)-(line 380,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentToUnknownPrototype()",
        "snippet": "  public void testAssignmentToUnknownPrototype() {\n    testSame(\n        \"/** @suppress {duplicate} */ var window;\" +\n        \"window['a'].prototype = {};\");\n  }\n",
        "begin_line": 383,
        "end_line": 387,
        "comment": "",
        "child_ranges": [
            "(line 384,col 5)-(line 386,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testBug2099540()",
        "snippet": "  public void testBug2099540() {\n    testSame(\n        \"/** @suppress {duplicate} */ var document;\\n\" +\n        \"/** @suppress {duplicate} */ var window;\\n\" +\n        \"var klass;\\n\" +\n        \"window[klass].prototype = \" +\n            \"document.createElement(tagName)['__proto__'];\");\n  }\n",
        "begin_line": 389,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 390,col 5)-(line 395,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testOtherGlobal()",
        "snippet": "  public void testOtherGlobal() {\n    testSame(\"goog.global.foo = bar(); function bar(){}\");\n  }\n",
        "begin_line": 398,
        "end_line": 400,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 399,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternName1()",
        "snippet": "  public void testExternName1() {\n    testSame(\"top.z = bar(); function bar(){}\");\n  }\n",
        "begin_line": 402,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternName2()",
        "snippet": "  public void testExternName2() {\n    testSame(\"top['z'] = bar(); function bar(){}\");\n  }\n",
        "begin_line": 406,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits1()",
        "snippet": "  public void testInherits1() {\n    test(\"var a = {}; var b = {}; b.inherits(a)\", \"\");\n  }\n",
        "begin_line": 410,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits2()",
        "snippet": "  public void testInherits2() {\n    test(\"var a = {}; var b = {}; var goog = {}; goog.inherits(b, a)\", \"\");\n  }\n",
        "begin_line": 414,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 415,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits3()",
        "snippet": "  public void testInherits3() {\n    testSame(\"var a = {}; this.b = {}; b.inherits(a);\");\n  }\n",
        "begin_line": 418,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits4()",
        "snippet": "  public void testInherits4() {\n    testSame(\"var a = {}; this.b = {}; var goog = {}; goog.inherits(b, a);\");\n  }\n",
        "begin_line": 422,
        "end_line": 424,
        "comment": "",
        "child_ranges": [
            "(line 423,col 5)-(line 423,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits5()",
        "snippet": "  public void testInherits5() {\n    test(\"this.a = {}; var b = {}; b.inherits(a);\",\n         \"this.a = {}\");\n  }\n",
        "begin_line": 426,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 427,col 5)-(line 428,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits6()",
        "snippet": "  public void testInherits6() {\n    test(\"this.a = {}; var b = {}; var goog = {}; goog.inherits(b, a);\",\n         \"this.a = {}\");\n  }\n",
        "begin_line": 431,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 432,col 5)-(line 433,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits7()",
        "snippet": "  public void testInherits7() {\n    testSame(\"var a = {}; this.b = {}; var goog = {};\" +\n        \" goog.inherits = function() {}; goog.inherits(b, a);\");\n  }\n",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 437,col 5)-(line 438,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testInherits8()",
        "snippet": "  public void testInherits8() {\n    // Make sure that exceptions aren't thrown if inherits() is used as\n    // an R-value\n    test(\"this.a = {}; var b = {}; var c = b.inherits(a);\", \"this.a = {};\");\n  }\n",
        "begin_line": 441,
        "end_line": 445,
        "comment": "",
        "child_ranges": [
            "(line 444,col 5)-(line 444,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin1()",
        "snippet": "  public void testMixin1() {\n    testSame(\"var goog = {}; goog.mixin = function() {};\" +\n             \"Function.prototype.mixin = function(base) {\" +\n             \"  goog.mixin(this.prototype, base); \" +\n             \"};\");\n  }\n",
        "begin_line": 447,
        "end_line": 452,
        "comment": "",
        "child_ranges": [
            "(line 448,col 5)-(line 451,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin2()",
        "snippet": "  public void testMixin2() {\n    testSame(\"var a = {}; this.b = {}; var goog = {};\" +\n        \" goog.mixin = function() {}; goog.mixin(b.prototype, a.prototype);\");\n  }\n",
        "begin_line": 454,
        "end_line": 457,
        "comment": "",
        "child_ranges": [
            "(line 455,col 5)-(line 456,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin3()",
        "snippet": "  public void testMixin3() {\n    test(\"this.a = {}; var b = {}; var goog = {};\" +\n         \" goog.mixin = function() {}; goog.mixin(b.prototype, a.prototype);\",\n         \"this.a = {};\");\n  }\n",
        "begin_line": 459,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 460,col 5)-(line 462,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin4()",
        "snippet": "  public void testMixin4() {\n    testSame(\"this.a = {}; var b = {}; var goog = {};\" +\n             \"goog.mixin = function() {};\" +\n             \"goog.mixin(b.prototype, a.prototype);\" +\n             \"new b()\");\n  }\n",
        "begin_line": 465,
        "end_line": 470,
        "comment": "",
        "child_ranges": [
            "(line 466,col 5)-(line 469,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin5()",
        "snippet": "  public void testMixin5() {\n    test(\"this.a = {}; var b = {}; var c = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"goog.mixin(c.prototype, a.prototype);\" +\n         \"new b()\",\n         \"this.a = {}; var b = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"new b()\");\n  }\n",
        "begin_line": 472,
        "end_line": 482,
        "comment": "",
        "child_ranges": [
            "(line 473,col 5)-(line 481,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin6()",
        "snippet": "  public void testMixin6() {\n    testSame(\"this.a = {}; var b = {}; var c = {}; var goog = {};\" +\n             \"goog.mixin = function() {};\" +\n             \"goog.mixin(c.prototype, a.prototype) + \" +\n             \"goog.mixin(b.prototype, a.prototype);\" +\n             \"new b()\");\n  }\n",
        "begin_line": 484,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 485,col 5)-(line 489,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testMixin7()",
        "snippet": "  public void testMixin7() {\n    test(\"this.a = {}; var b = {}; var c = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"var d = goog.mixin(c.prototype, a.prototype) + \" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"new b()\",\n         \"this.a = {}; var b = {}; var goog = {};\" +\n         \"goog.mixin = function() {};\" +\n         \"goog.mixin(b.prototype, a.prototype);\" +\n         \"new b()\");\n  }\n",
        "begin_line": 492,
        "end_line": 502,
        "comment": "",
        "child_ranges": [
            "(line 493,col 5)-(line 501,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConstants1()",
        "snippet": "  public void testConstants1() {\n    testSame(\"var bar = function(){}; var EXP_FOO = true; if (EXP_FOO) bar();\");\n  }\n",
        "begin_line": 504,
        "end_line": 506,
        "comment": "",
        "child_ranges": [
            "(line 505,col 5)-(line 505,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConstants2()",
        "snippet": "  public void testConstants2() {\n    test(\"var bar = function(){}; var EXP_FOO = true; var EXP_BAR = true;\" +\n         \"if (EXP_FOO) bar();\",\n         \"var bar = function(){}; var EXP_FOO = true; if (EXP_FOO) bar();\");\n  }\n",
        "begin_line": 508,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 509,col 5)-(line 511,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExpressions1()",
        "snippet": "  public void testExpressions1() {\n    test(\"var foo={}; foo.A='A'; foo.AB=foo.A+'B'; foo.ABC=foo.AB+'C'\",\n         \"\");\n  }\n",
        "begin_line": 514,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 516,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExpressions2()",
        "snippet": "  public void testExpressions2() {\n    testSame(\"var foo={}; foo.A='A'; foo.AB=foo.A+'B'; this.ABC=foo.AB+'C'\");\n  }\n",
        "begin_line": 519,
        "end_line": 521,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 520,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExpressions3()",
        "snippet": "  public void testExpressions3() {\n    testSame(\"var foo = 2; window.bar(foo + 3)\");\n  }\n",
        "begin_line": 523,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetCreatingReference()",
        "snippet": "  public void testSetCreatingReference() {\n    testSame(\"var foo; var bar = function(){foo=6;}; bar();\");\n  }\n",
        "begin_line": 527,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 528,col 5)-(line 528,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous1()",
        "snippet": "  public void testAnonymous1() {\n    testSame(\"function foo() {}; function bar() {}; foo(function() {bar()})\");\n  }\n",
        "begin_line": 531,
        "end_line": 533,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 532,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous2()",
        "snippet": "  public void testAnonymous2() {\n    test(\"var foo;(function(){foo=6;})()\", \"(function(){})()\");\n  }\n",
        "begin_line": 535,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 536,col 5)-(line 536,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous3()",
        "snippet": "  public void testAnonymous3() {\n    testSame(\"var foo; (function(){ if(!foo)foo=6; })()\");\n  }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 540,col 5)-(line 540,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous4()",
        "snippet": "  public void testAnonymous4() {\n    testSame(\"var foo; (function(){ foo=6; })(); externfoo=foo;\");\n  }\n",
        "begin_line": 543,
        "end_line": 545,
        "comment": "",
        "child_ranges": [
            "(line 544,col 5)-(line 544,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous5()",
        "snippet": "  public void testAnonymous5() {\n    testSame(\"var foo;\" +\n             \"(function(){ foo=function(){ bar() }; function bar(){} })();\" +\n             \"foo();\");\n  }\n",
        "begin_line": 547,
        "end_line": 551,
        "comment": "",
        "child_ranges": [
            "(line 548,col 5)-(line 550,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous6()",
        "snippet": "  public void testAnonymous6() {\n    testSame(\"function foo(){}\" +\n             \"function bar(){}\" +\n             \"foo(function(){externfoo = bar});\");\n  }\n",
        "begin_line": 553,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 554,col 5)-(line 556,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous7()",
        "snippet": "  public void testAnonymous7() {\n    testSame(\"var foo;\" +\n             \"(function (){ function bar(){ externfoo = foo; } bar(); })();\");\n  }\n",
        "begin_line": 559,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 561,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous8()",
        "snippet": "  public void testAnonymous8() {\n    testSame(\"var foo;\" +\n             \"(function (){ var g=function(){ externfoo = foo; }; g(); })();\");\n  }\n",
        "begin_line": 564,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 565,col 5)-(line 566,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAnonymous9()",
        "snippet": "  public void testAnonymous9() {\n    testSame(\"function foo(){}\" +\n             \"function bar(){}\" +\n             \"foo(function(){ function baz(){ externfoo = bar; } baz(); });\");\n  }\n",
        "begin_line": 569,
        "end_line": 573,
        "comment": "",
        "child_ranges": [
            "(line 570,col 5)-(line 572,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFunctions1()",
        "snippet": "  public void testFunctions1() {\n    testSame(\"var foo = null; function baz() {}\" +\n             \"function bar() {foo=baz();} bar();\");\n  }\n",
        "begin_line": 575,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 576,col 5)-(line 577,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFunctions2()",
        "snippet": "  public void testFunctions2() {\n    testSame(\"var foo; foo = function() {var a = bar()};\" +\n             \"var bar = function(){}; foo();\");\n  }\n",
        "begin_line": 580,
        "end_line": 583,
        "comment": "",
        "child_ranges": [
            "(line 581,col 5)-(line 582,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElem1()",
        "snippet": "  public void testGetElem1() {\n    testSame(\"var foo = {}; foo.bar = {}; foo.bar.baz = {a: 5, b: 10};\" +\n             \"var fn = function() {window[foo.bar.baz.a] = 5;}; fn()\");\n  }\n",
        "begin_line": 585,
        "end_line": 588,
        "comment": "",
        "child_ranges": [
            "(line 586,col 5)-(line 587,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElem2()",
        "snippet": "  public void testGetElem2() {\n    testSame(\"var foo = {}; foo.bar = {}; foo.bar.baz = {a: 5, b: 10};\" +\n             \"var fn = function() {this[foo.bar.baz.a] = 5;}; fn()\");\n  }\n",
        "begin_line": 590,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 591,col 5)-(line 592,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElem3()",
        "snippet": "  public void testGetElem3() {\n    testSame(\"var foo = {'i': 0, 'j': 1}; foo['k'] = 2; top.foo = foo;\");\n  }\n",
        "begin_line": 595,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 596,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf1()",
        "snippet": "  public void testIf1() {\n    test(\"var foo = {};if(e)foo.bar=function(){};\", \"if(e);\");\n  }\n",
        "begin_line": 599,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 600,col 5)-(line 600,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf2()",
        "snippet": "  public void testIf2() {\n    test(\"var e = false;var foo = {};if(e)foo.bar=function(){};\",\n         \"var e = false;if(e);\");\n  }\n",
        "begin_line": 603,
        "end_line": 606,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 605,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf3()",
        "snippet": "  public void testIf3() {\n    test(\"var e = false;var foo = {};if(e + 1)foo.bar=function(){};\",\n         \"var e = false;if(e + 1);\");\n  }\n",
        "begin_line": 608,
        "end_line": 611,
        "comment": "",
        "child_ranges": [
            "(line 609,col 5)-(line 610,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf4()",
        "snippet": "  public void testIf4() {\n    test(\"var e = false, f;var foo = {};if(f=e)foo.bar=function(){};\",\n         \"var e = false;if(e);\");\n  }\n",
        "begin_line": 613,
        "end_line": 616,
        "comment": "",
        "child_ranges": [
            "(line 614,col 5)-(line 615,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf4a()",
        "snippet": "  public void testIf4a() {\n    // TODO(johnlenz): fix this.\n    testSame(\"var e = [], f;if(f=e);f[0] = 1;\");\n  }\n",
        "begin_line": 618,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 620,col 5)-(line 620,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf4b()",
        "snippet": "  public void testIf4b() {\n    // TODO(johnlenz): fix this.\n    test(\"var e = [], f;if(e=f);f[0] = 1;\",\n         \"var f;if(f);f[0] = 1;\");\n  }\n",
        "begin_line": 623,
        "end_line": 627,
        "comment": "",
        "child_ranges": [
            "(line 625,col 5)-(line 626,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf4c()",
        "snippet": "  public void testIf4c() {\n    test(\"var e = [], f;if(f=e);e[0] = 1;\",\n         \"var e = [];if(e);e[0] = 1;\");\n  }\n",
        "begin_line": 629,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 630,col 5)-(line 631,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIf5()",
        "snippet": "  public void testIf5() {\n    test(\"var e = false, f;var foo = {};if(f = e + 1)foo.bar=function(){};\",\n         \"var e = false;if(e + 1);\");\n  }\n",
        "begin_line": 634,
        "end_line": 637,
        "comment": "",
        "child_ranges": [
            "(line 635,col 5)-(line 636,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIfElse()",
        "snippet": "  public void testIfElse() {\n    test(\"var foo = {};if(e)foo.bar=function(){};else foo.bar=function(){};\",\n         \"if(e);else;\");\n  }\n",
        "begin_line": 639,
        "end_line": 642,
        "comment": "",
        "child_ranges": [
            "(line 640,col 5)-(line 641,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testWhile()",
        "snippet": "  public void testWhile() {\n    test(\"var foo = {};while(e)foo.bar=function(){};\", \"while(e);\");\n  }\n",
        "begin_line": 644,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 645,col 5)-(line 645,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testFor()",
        "snippet": "  public void testFor() {\n    test(\"var foo = {};for(e in x)foo.bar=function(){};\", \"for(e in x);\");\n  }\n",
        "begin_line": 648,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 649,col 5)-(line 649,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDo()",
        "snippet": "  public void testDo() {\n    test(\"var cond = false;do {var a = 1} while (cond)\",\n         \"var cond = false;do {} while (cond)\");\n  }\n",
        "begin_line": 652,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 653,col 5)-(line 654,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct1()",
        "snippet": "  public void testSetterInForStruct1() {\n    test(\"var j = 0; for (var i = 1; i = 0; j++);\",\n         \"var j = 0; for (; 0; j++);\");\n  }\n",
        "begin_line": 657,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 658,col 5)-(line 659,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct2()",
        "snippet": "  public void testSetterInForStruct2() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; Class.prototype.property_ = 0; i++);\",\n         \"for (var i = 1; 0; i++);\");\n  }\n",
        "begin_line": 662,
        "end_line": 666,
        "comment": "",
        "child_ranges": [
            "(line 663,col 5)-(line 665,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct3()",
        "snippet": "  public void testSetterInForStruct3() {\n    test(\"var j = 0; for (var i = 1 + f() + g() + h(); i = 0; j++);\",\n         \"var j = 0; f(); g(); h(); for (; 0; j++);\");\n  }\n",
        "begin_line": 668,
        "end_line": 671,
        "comment": "",
        "child_ranges": [
            "(line 669,col 5)-(line 670,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct4()",
        "snippet": "  public void testSetterInForStruct4() {\n    test(\"var i = 0;var j = 0; for (i = 1 + f() + g() + h(); i = 0; j++);\",\n         \"var j = 0; f(); g(); h(); for (; 0; j++);\");\n  }\n",
        "begin_line": 673,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 674,col 5)-(line 675,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct5()",
        "snippet": "  public void testSetterInForStruct5() {\n    test(\"var i = 0, j = 0; for (i = f(), j = g(); 0;);\",\n         \"for (f(), g(); 0;);\");\n  }\n",
        "begin_line": 678,
        "end_line": 681,
        "comment": "",
        "child_ranges": [
            "(line 679,col 5)-(line 680,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct6()",
        "snippet": "  public void testSetterInForStruct6() {\n    test(\"var i = 0, j = 0, k = 0; for (i = f(), j = g(), k = h(); i = 0;);\",\n         \"for (f(), g(), h(); 0;);\");\n  }\n",
        "begin_line": 683,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 684,col 5)-(line 685,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct7()",
        "snippet": "  public void testSetterInForStruct7() {\n    test(\"var i = 0, j = 0, k = 0; for (i = 1, j = 2, k = 3; i = 0;);\",\n         \"for (1, 2, 3; 0;);\");\n  }\n",
        "begin_line": 688,
        "end_line": 691,
        "comment": "",
        "child_ranges": [
            "(line 689,col 5)-(line 690,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct8()",
        "snippet": "  public void testSetterInForStruct8() {\n    test(\"var i = 0, j = 0, k = 0; for (i = 1, j = i, k = 2; i = 0;);\",\n         \"var i = 0; for(i = 1, i , 2; i = 0;);\");\n  }\n",
        "begin_line": 693,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 694,col 5)-(line 695,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct9()",
        "snippet": "  public void testSetterInForStruct9() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; Class.property_ = 0; i++);\",\n         \"for (var i = 1; 0; i++);\");\n  }\n",
        "begin_line": 698,
        "end_line": 702,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 701,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct10()",
        "snippet": "  public void testSetterInForStruct10() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; Class.property_ = 0; i = 2);\",\n         \"for (; 0;);\");\n  }\n",
        "begin_line": 704,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 705,col 5)-(line 707,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct11()",
        "snippet": "  public void testSetterInForStruct11() {\n    test(\"var Class = function() {}; \" +\n         \"for (;Class.property_ = 0;);\",\n         \"for (;0;);\");\n  }\n",
        "begin_line": 710,
        "end_line": 714,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 713,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct12()",
        "snippet": "  public void testSetterInForStruct12() {\n    test(\"var a = 1; var Class = function() {}; \" +\n         \"for (;Class.property_ = a;);\",\n         \"var a = 1; for (; a;);\");\n  }\n",
        "begin_line": 716,
        "end_line": 720,
        "comment": "",
        "child_ranges": [
            "(line 717,col 5)-(line 719,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct13()",
        "snippet": "  public void testSetterInForStruct13() {\n    test(\"var a = 1; var Class = function() {}; \" +\n         \"for (Class.property_ = a; 0 ;);\",\n         \"for (; 0;);\");\n  }\n",
        "begin_line": 722,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 723,col 5)-(line 725,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct14()",
        "snippet": "  public void testSetterInForStruct14() {\n    test(\"var a = 1; var Class = function() {}; \" +\n         \"for (; 0; Class.property_ = a);\",\n         \"for (; 0;);\");\n  }\n",
        "begin_line": 728,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 731,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct15()",
        "snippet": "  public void testSetterInForStruct15() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; 0; Class.prototype.property_ = 0);\",\n         \"for (; 0; 0);\");\n  }\n",
        "begin_line": 734,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 737,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForStruct16()",
        "snippet": "  public void testSetterInForStruct16() {\n    test(\"var Class = function() {}; \" +\n         \"for (var i = 1; i = 0; Class.prototype.property_ = 0);\",\n         \"for (; 0; 0);\");\n  }\n",
        "begin_line": 740,
        "end_line": 744,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 743,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn1()",
        "snippet": "  public void testSetterInForIn1() {\n    test(\"var foo = {}; var bar; for(e in bar = foo.a);\",\n         \"var foo = {}; for(e in foo.a);\");\n  }\n",
        "begin_line": 746,
        "end_line": 749,
        "comment": "",
        "child_ranges": [
            "(line 747,col 5)-(line 748,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn2()",
        "snippet": "  public void testSetterInForIn2() {\n    testSame(\"var foo = {}; var bar; for(e in bar = foo.a); bar\");\n  }\n",
        "begin_line": 751,
        "end_line": 753,
        "comment": "",
        "child_ranges": [
            "(line 752,col 5)-(line 752,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn3()",
        "snippet": "  public void testSetterInForIn3() {\n    testSame(\"var foo = {}; var bar; for(e in bar = foo.a); bar.b = 3\");\n  }\n",
        "begin_line": 755,
        "end_line": 757,
        "comment": "",
        "child_ranges": [
            "(line 756,col 5)-(line 756,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn4()",
        "snippet": "  public void testSetterInForIn4() {\n    testSame(\"var foo = {}; var bar; for (e in bar = foo.a); bar.b = 3; foo.a\");\n  }\n",
        "begin_line": 759,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 760,col 5)-(line 760,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn5()",
        "snippet": "  public void testSetterInForIn5() {\n    // TODO(user) Fix issue similar to b/2316773: bar should be preserved\n    // but isn't due to missing references between e and foo.a\n    test(\"var foo = {}; var bar; for (e in foo.a) { bar = e } bar.b = 3; foo.a\",\n         \"var foo={};for(e in foo.a);foo.a\");\n  }\n",
        "begin_line": 763,
        "end_line": 768,
        "comment": "",
        "child_ranges": [
            "(line 766,col 5)-(line 767,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInForIn6()",
        "snippet": "  public void testSetterInForIn6() {\n    testSame(\"var foo = {};for(e in foo);\");\n  }\n",
        "begin_line": 770,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 771,col 5)-(line 771,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInIfPredicate()",
        "snippet": "  public void testSetterInIfPredicate() {\n    // TODO(user) Make NameAnalyzer smarter so it can remove \"Class\".\n    testSame(\"var a = 1;\" +\n             \"var Class = function() {}; \" +\n             \"if (Class.property_ = a);\");\n  }\n",
        "begin_line": 774,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 776,col 5)-(line 778,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInWhilePredicate()",
        "snippet": "  public void testSetterInWhilePredicate() {\n    test(\"var a = 1;\" +\n         \"var Class = function() {}; \" +\n         \"while (Class.property_ = a);\",\n         \"var a = 1; for (;a;) {}\");\n  }\n",
        "begin_line": 781,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 782,col 5)-(line 785,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInDoWhilePredicate()",
        "snippet": "  public void testSetterInDoWhilePredicate() {\n    // TODO(user) Make NameAnalyzer smarter so it can remove \"Class\".\n    testSame(\"var a = 1;\" +\n             \"var Class = function() {}; \" +\n             \"do {} while(Class.property_ = a);\");\n  }\n",
        "begin_line": 788,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 790,col 5)-(line 792,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSetterInSwitchInput()",
        "snippet": "  public void testSetterInSwitchInput() {\n    // TODO(user) Make NameAnalyzer smarter so it can remove \"Class\".\n    testSame(\"var a = 1;\" +\n             \"var Class = function() {}; \" +\n             \"switch (Class.property_ = a) {\" +\n             \"  default:\" +\n             \"}\");\n  }\n",
        "begin_line": 795,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 797,col 5)-(line 801,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexAssigns()",
        "snippet": "  public void testComplexAssigns() {\n    // Complex assigns are not removed by the current pass.\n    testSame(\"var x = 0; x += 3; x *= 5;\");\n  }\n",
        "begin_line": 804,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 806,col 5)-(line 806,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssigns1()",
        "snippet": "  public void testNestedAssigns1() {\n    test(\"var x = 0; var y = x = 3; window.alert(y);\",\n         \"var y = 3; window.alert(y);\");\n  }\n",
        "begin_line": 809,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 810,col 5)-(line 811,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssigns2()",
        "snippet": "  public void testNestedAssigns2() {\n    testSame(\"var x = 0; var y = x = {}; x.b = 3; window.alert(y);\");\n  }\n",
        "begin_line": 814,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 815,col 5)-(line 815,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns1()",
        "snippet": "  public void testComplexNestedAssigns1() {\n    // TODO(nicksantos): Make NameAnalyzer smarter, so that we can eliminate y.\n    testSame(\"var x = 0; var y = 2; y += x = 3; window.alert(x);\");\n  }\n",
        "begin_line": 818,
        "end_line": 821,
        "comment": "",
        "child_ranges": [
            "(line 820,col 5)-(line 820,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns2()",
        "snippet": "  public void testComplexNestedAssigns2() {\n    test(\"var x = 0; var y = 2; y += x = 3; window.alert(y);\",\n         \"var y = 2; y += 3; window.alert(y);\");\n  }\n",
        "begin_line": 823,
        "end_line": 826,
        "comment": "",
        "child_ranges": [
            "(line 824,col 5)-(line 825,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns3()",
        "snippet": "  public void testComplexNestedAssigns3() {\n    test(\"var x = 0; var y = x += 3; window.alert(x);\",\n         \"var x = 0; x += 3; window.alert(x);\");\n  }\n",
        "begin_line": 828,
        "end_line": 831,
        "comment": "",
        "child_ranges": [
            "(line 829,col 5)-(line 830,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testComplexNestedAssigns4()",
        "snippet": "  public void testComplexNestedAssigns4() {\n    testSame(\"var x = 0; var y = x += 3; window.alert(y);\");\n  }\n",
        "begin_line": 833,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 834,col 5)-(line 834,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope1()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope1() {\n    testSame(\"goog.mixin = function() {}; \" +\n             \"(function() { var x = {}; var y = {}; goog.mixin(x, y); })();\");\n  }\n",
        "begin_line": 837,
        "end_line": 840,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 839,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope2()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope2() {\n    testSame(\"goog.mixin = function() {}; \" +\n             \"var x = {}; var y = {}; (function() { goog.mixin(x, y); })();\");\n  }\n",
        "begin_line": 842,
        "end_line": 845,
        "comment": "",
        "child_ranges": [
            "(line 843,col 5)-(line 844,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope3()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope3() {\n    testSame(\"goog.mixin = function() {}; \" +\n             \"var x = {}; var y = {}; (function() { goog.mixin(x, y); })(); \" +\n             \"window.alert(x);\");\n  }\n",
        "begin_line": 847,
        "end_line": 851,
        "comment": "",
        "child_ranges": [
            "(line 848,col 5)-(line 850,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnintendedUseOfInheritsInLocalScope4()",
        "snippet": "  public void testUnintendedUseOfInheritsInLocalScope4() {\n    // Ensures that the \"goog$mixin\" variable doesn't get stripped out,\n    // even when it's only used in a local scope.\n    testSame(\"var goog$mixin = function() {}; \" +\n             \"(function() { var x = {}; var y = {}; goog$mixin(x, y); })();\");\n  }\n",
        "begin_line": 853,
        "end_line": 858,
        "comment": "",
        "child_ranges": [
            "(line 856,col 5)-(line 857,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope1()",
        "snippet": "  public void testPrototypePropertySetInLocalScope1() {\n    testSame(\"(function() { var x = function(){}; x.prototype.bar = 3; })();\");\n  }\n",
        "begin_line": 860,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 861,col 5)-(line 861,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope2()",
        "snippet": "  public void testPrototypePropertySetInLocalScope2() {\n    testSame(\"var x = function(){}; (function() { x.prototype.bar = 3; })();\");\n  }\n",
        "begin_line": 864,
        "end_line": 866,
        "comment": "",
        "child_ranges": [
            "(line 865,col 5)-(line 865,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope3()",
        "snippet": "  public void testPrototypePropertySetInLocalScope3() {\n    test(\"var x = function(){ x.prototype.bar = 3; };\", \"\");\n  }\n",
        "begin_line": 868,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 869,col 5)-(line 869,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope4()",
        "snippet": "  public void testPrototypePropertySetInLocalScope4() {\n    test(\"var x = {}; x.foo = function(){ x.foo.prototype.bar = 3; };\", \"\");\n  }\n",
        "begin_line": 872,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 873,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope5()",
        "snippet": "  public void testPrototypePropertySetInLocalScope5() {\n    test(\"var x = {}; x.prototype.foo = 3;\", \"\");\n  }\n",
        "begin_line": 876,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 877,col 5)-(line 877,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope6()",
        "snippet": "  public void testPrototypePropertySetInLocalScope6() {\n    testSame(\"var x = {}; x.prototype.foo = 3; bar(x.prototype.foo)\");\n  }\n",
        "begin_line": 880,
        "end_line": 882,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 881,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPrototypePropertySetInLocalScope7()",
        "snippet": "  public void testPrototypePropertySetInLocalScope7() {\n    testSame(\"var x = {}; x.foo = 3; bar(x.foo)\");\n  }\n",
        "begin_line": 884,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 885,col 5)-(line 885,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference1()",
        "snippet": "  public void testRValueReference1() {\n    testSame(\"var a = 1; a\");\n  }\n",
        "begin_line": 888,
        "end_line": 890,
        "comment": "",
        "child_ranges": [
            "(line 889,col 5)-(line 889,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference2()",
        "snippet": "  public void testRValueReference2() {\n    testSame(\"var a = 1; 1+a\");\n  }\n",
        "begin_line": 892,
        "end_line": 894,
        "comment": "",
        "child_ranges": [
            "(line 893,col 5)-(line 893,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference3()",
        "snippet": "  public void testRValueReference3() {\n    testSame(\"var x = {}; x.prototype.foo = 3; var a = x.prototype.foo; 1+a\");\n  }\n",
        "begin_line": 896,
        "end_line": 898,
        "comment": "",
        "child_ranges": [
            "(line 897,col 5)-(line 897,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference4()",
        "snippet": "  public void testRValueReference4() {\n    testSame(\"var x = {}; x.prototype.foo = 3; x.prototype.foo\");\n  }\n",
        "begin_line": 900,
        "end_line": 902,
        "comment": "",
        "child_ranges": [
            "(line 901,col 5)-(line 901,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference5()",
        "snippet": "  public void testRValueReference5() {\n    testSame(\"var x = {}; x.prototype.foo = 3; 1+x.prototype.foo\");\n  }\n",
        "begin_line": 904,
        "end_line": 906,
        "comment": "",
        "child_ranges": [
            "(line 905,col 5)-(line 905,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRValueReference6()",
        "snippet": "  public void testRValueReference6() {\n    testSame(\"var x = {}; var idx = 2; x[idx]\");\n  }\n",
        "begin_line": 908,
        "end_line": 910,
        "comment": "",
        "child_ranges": [
            "(line 909,col 5)-(line 909,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testUnhandledTopNode()",
        "snippet": "  public void testUnhandledTopNode() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n             \"function Bar() {}; Bar.prototype.isFoo = function() {};\" +\n             \"var foo = new Foo(); var bar = new Bar();\" +\n             // The boolean AND here is currently unhandled by this pass, but\n             // it should not cause it to blow up.\n             \"var cond = foo.isBar() && bar.isFoo();\" +\n             \"if (cond) {window.alert('hello');}\");\n  }\n",
        "begin_line": 912,
        "end_line": 920,
        "comment": "",
        "child_ranges": [
            "(line 913,col 5)-(line 919,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPropertyDefinedInGlobalScope()",
        "snippet": "  public void testPropertyDefinedInGlobalScope() {\n    testSame(\"function Foo() {}; var x = new Foo(); x.cssClass = 'bar';\" +\n             \"window.alert(x);\");\n  }\n",
        "begin_line": 922,
        "end_line": 925,
        "comment": "",
        "child_ranges": [
            "(line 923,col 5)-(line 924,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConditionallyDefinedFunction1()",
        "snippet": "  public void testConditionallyDefinedFunction1() {\n    testSame(\"var g; externfoo.x || (externfoo.x = function() { g; })\");\n  }\n",
        "begin_line": 927,
        "end_line": 929,
        "comment": "",
        "child_ranges": [
            "(line 928,col 5)-(line 928,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConditionallyDefinedFunction2()",
        "snippet": "  public void testConditionallyDefinedFunction2() {\n    testSame(\"var g; 1 || (externfoo.x = function() { g; })\");\n  }\n",
        "begin_line": 931,
        "end_line": 933,
        "comment": "",
        "child_ranges": [
            "(line 932,col 5)-(line 932,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testConditionallyDefinedFunction3()",
        "snippet": "  public void testConditionallyDefinedFunction3() {\n      testSame(\"var a = {};\" +\n           \"rand() % 2 || (a.f = function() { externfoo = 1; } || alert());\");\n  }\n",
        "begin_line": 935,
        "end_line": 938,
        "comment": "",
        "child_ranges": [
            "(line 936,col 7)-(line 937,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testGetElemOnThis()",
        "snippet": "  public void testGetElemOnThis() {\n    testSame(\"var a = 3; this['foo'] = a;\");\n    testSame(\"this['foo'] = 3;\");\n  }\n",
        "begin_line": 940,
        "end_line": 943,
        "comment": "",
        "child_ranges": [
            "(line 941,col 5)-(line 941,col 44)",
            "(line 942,col 5)-(line 942,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveInstanceOfOnly()",
        "snippet": "  public void testRemoveInstanceOfOnly() {\n    test(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n         \"var x; if (x instanceof Foo) { window.alert(x); }\",\n         \";var x; if (false) { window.alert(x); }\");\n  }\n",
        "begin_line": 945,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 946,col 5)-(line 948,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLocalScopedInstanceOfOnly()",
        "snippet": "  public void testRemoveLocalScopedInstanceOfOnly() {\n    test(\"function Foo() {}; function Bar(x) { this.z = x instanceof Foo; };\" +\n        \"externfoo.x = new Bar({});\",\n        \";function Bar(x) { this.z = false }; externfoo.x = new Bar({});\");\n  }\n",
        "begin_line": 951,
        "end_line": 955,
        "comment": "",
        "child_ranges": [
            "(line 952,col 5)-(line 954,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveInstanceOfWithReferencedMethod()",
        "snippet": "  public void testRemoveInstanceOfWithReferencedMethod() {\n    test(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n        \"var x; if (x instanceof Foo) { window.alert(x.isBar()); }\",\n        \";var x; if (false) { window.alert(x.isBar()); }\");\n  }\n",
        "begin_line": 957,
        "end_line": 961,
        "comment": "",
        "child_ranges": [
            "(line 958,col 5)-(line 960,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeReferencedInstanceOf()",
        "snippet": "  public void testDoNotChangeReferencedInstanceOf() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n             \"var x = new Foo(); if (x instanceof Foo) { window.alert(x); }\");\n  }\n",
        "begin_line": 963,
        "end_line": 966,
        "comment": "",
        "child_ranges": [
            "(line 964,col 5)-(line 965,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeReferencedLocalScopedInstanceOf()",
        "snippet": "  public void testDoNotChangeReferencedLocalScopedInstanceOf() {\n    testSame(\"function Foo() {}; externfoo.x = new Foo();\" +\n        \"function Bar() { if (x instanceof Foo) { window.alert(x); } };\" +\n        \"externfoo.y = new Bar();\");\n  }\n",
        "begin_line": 968,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 969,col 5)-(line 971,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeLocalScopeReferencedInstanceOf()",
        "snippet": "  public void testDoNotChangeLocalScopeReferencedInstanceOf() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n        \"function Bar() { this.z = new Foo(); }; externfoo.x = new Bar();\" +\n        \"if (x instanceof Foo) { window.alert(x); }\");\n  }\n",
        "begin_line": 974,
        "end_line": 978,
        "comment": "",
        "child_ranges": [
            "(line 975,col 5)-(line 977,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeLocalScopeReferencedLocalScopedInstanceOf()",
        "snippet": "  public void testDoNotChangeLocalScopeReferencedLocalScopedInstanceOf() {\n    testSame(\"function Foo() {}; Foo.prototype.isBar = function() {};\" +\n        \"function Bar() { this.z = new Foo(); };\" +\n        \"Bar.prototype.func = function(x) {\" +\n          \"if (x instanceof Foo) { window.alert(x); }\" +\n        \"}; new Bar().func();\");\n  }\n",
        "begin_line": 980,
        "end_line": 986,
        "comment": "",
        "child_ranges": [
            "(line 981,col 5)-(line 985,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeLocalScopeReferencedLocalScopedInstanceOf2()",
        "snippet": "  public void testDoNotChangeLocalScopeReferencedLocalScopedInstanceOf2() {\n    test(\n        \"function Foo() {}\" +\n        \"var createAxis = function(f) { return window.passThru(f); };\" +\n        \"var axis = createAxis(function(test) {\" +\n        \"  return test instanceof Foo;\" +\n        \"});\",\n        \"var createAxis = function(f) { return window.passThru(f); };\" +\n        \"createAxis(function(test) {\" +\n        \"  return false;\" +\n        \"});\");\n  }\n",
        "begin_line": 988,
        "end_line": 999,
        "comment": "",
        "child_ranges": [
            "(line 989,col 5)-(line 998,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testDoNotChangeInstanceOfGetElem()",
        "snippet": "  public void testDoNotChangeInstanceOfGetElem() {\n    testSame(\"var goog = {};\" +\n        \"function f(obj, name) {\" +\n        \"  if (obj instanceof goog[name]) {\" +\n        \"    return name;\" +\n        \"  }\" +\n        \"}\" +\n        \"window['f'] = f;\");\n  }\n",
        "begin_line": 1001,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 1002,col 5)-(line 1008,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testWeirdnessOnLeftSideOfPrototype()",
        "snippet": "  public void testWeirdnessOnLeftSideOfPrototype() {\n    // This checks a bug where 'x' was removed, but the function referencing\n    // it was not, causing problems.\n    testSame(\"var x = 3; \" +\n        \"(function() { this.bar = 3; }).z = function() {\" +\n        \"  return x;\" +\n        \"};\");\n  }\n",
        "begin_line": 1011,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1014,col 5)-(line 1017,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit1()",
        "snippet": "  public void testShortCircuit1() {\n    test(\"var a = b() || 1\", \"b()\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1022,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1021,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit2()",
        "snippet": "  public void testShortCircuit2() {\n    test(\"var a = 1 || c()\", \"1 || c()\");\n  }\n",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit3()",
        "snippet": "  public void testShortCircuit3() {\n    test(\"var a = b() || c()\", \"b() || c()\");\n  }\n",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1029,col 5)-(line 1029,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit4()",
        "snippet": "  public void testShortCircuit4() {\n    test(\"var a = b() || 3 || c()\", \"b() || 3 || c()\");\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit5()",
        "snippet": "  public void testShortCircuit5() {\n    test(\"var a = b() && 1\", \"b()\");\n  }\n",
        "begin_line": 1036,
        "end_line": 1038,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit6()",
        "snippet": "  public void testShortCircuit6() {\n    test(\"var a = 1 && c()\", \"1 && c()\");\n  }\n",
        "begin_line": 1040,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1041,col 5)-(line 1041,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit7()",
        "snippet": "  public void testShortCircuit7() {\n    test(\"var a = b() && c()\", \"b() && c()\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testShortCircuit8()",
        "snippet": "  public void testShortCircuit8() {\n    test(\"var a = b() && 3 && c()\", \"b() && 3 && c()\");\n  }\n",
        "begin_line": 1048,
        "end_line": 1050,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1049,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference1()",
        "snippet": "  public void testRhsReference1() {\n    testSame(\"var a = 1; a\");\n  }\n",
        "begin_line": 1052,
        "end_line": 1054,
        "comment": "",
        "child_ranges": [
            "(line 1053,col 5)-(line 1053,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference2()",
        "snippet": "  public void testRhsReference2() {\n    testSame(\"var a = 1; a || b()\");\n  }\n",
        "begin_line": 1056,
        "end_line": 1058,
        "comment": "",
        "child_ranges": [
            "(line 1057,col 5)-(line 1057,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference3()",
        "snippet": "  public void testRhsReference3() {\n    testSame(\"var a = 1; 1 || a\");\n  }\n",
        "begin_line": 1060,
        "end_line": 1062,
        "comment": "",
        "child_ranges": [
            "(line 1061,col 5)-(line 1061,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference4()",
        "snippet": "  public void testRhsReference4() {\n    test(\"var a = 1; var b = a || foo()\", \"var a = 1; a || foo()\");\n  }\n",
        "begin_line": 1064,
        "end_line": 1066,
        "comment": "",
        "child_ranges": [
            "(line 1065,col 5)-(line 1065,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsReference5()",
        "snippet": "  public void testRhsReference5() {\n    test(\"var a = 1, b = 5; a; foo(b)\", \"var a = 1, b = 5; a; foo(b)\");\n  }\n",
        "begin_line": 1068,
        "end_line": 1070,
        "comment": "",
        "child_ranges": [
            "(line 1069,col 5)-(line 1069,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign1()",
        "snippet": "  public void testRhsAssign1() {\n    test(\"var foo, bar; foo || (bar = 1)\",\n         \"var foo; foo || 1\");\n  }\n",
        "begin_line": 1072,
        "end_line": 1075,
        "comment": "",
        "child_ranges": [
            "(line 1073,col 5)-(line 1074,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign2()",
        "snippet": "  public void testRhsAssign2() {\n    test(\"var foo, bar, baz; foo || (baz = bar = 1)\",\n         \"var foo; foo || 1\");\n  }\n",
        "begin_line": 1077,
        "end_line": 1080,
        "comment": "",
        "child_ranges": [
            "(line 1078,col 5)-(line 1079,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign3()",
        "snippet": "  public void testRhsAssign3() {\n    testSame(\"var foo = null; foo || (foo = 1)\");\n  }\n",
        "begin_line": 1082,
        "end_line": 1084,
        "comment": "",
        "child_ranges": [
            "(line 1083,col 5)-(line 1083,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign4()",
        "snippet": "  public void testRhsAssign4() {\n    test(\"var foo = null; foo = (foo || 1)\", \"\");\n  }\n",
        "begin_line": 1086,
        "end_line": 1088,
        "comment": "",
        "child_ranges": [
            "(line 1087,col 5)-(line 1087,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign5()",
        "snippet": "  public void testRhsAssign5() {\n    test(\"var a = 3, foo, bar; foo || (bar = a)\", \"var a = 3, foo; foo || a\");\n  }\n",
        "begin_line": 1090,
        "end_line": 1092,
        "comment": "",
        "child_ranges": [
            "(line 1091,col 5)-(line 1091,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign6()",
        "snippet": "  public void testRhsAssign6() {\n    test(\"function Foo(){} var foo = null;\" +\n         \"var f = function () {foo || (foo = new Foo()); return foo}\",\n         \"\");\n  }\n",
        "begin_line": 1094,
        "end_line": 1098,
        "comment": "",
        "child_ranges": [
            "(line 1095,col 5)-(line 1097,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign7()",
        "snippet": "  public void testRhsAssign7() {\n    testSame(\"function Foo(){} var foo = null;\" +\n             \"var f = function () {foo || (foo = new Foo())}; f()\");\n  }\n",
        "begin_line": 1100,
        "end_line": 1103,
        "comment": "",
        "child_ranges": [
            "(line 1101,col 5)-(line 1102,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign8()",
        "snippet": "  public void testRhsAssign8() {\n    testSame(\"function Foo(){} var foo = null;\" +\n             \"var f = function () {(foo = new Foo()) || g()}; f()\");\n  }\n",
        "begin_line": 1105,
        "end_line": 1108,
        "comment": "",
        "child_ranges": [
            "(line 1106,col 5)-(line 1107,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRhsAssign9()",
        "snippet": "  public void testRhsAssign9() {\n    test(\"function Foo(){} var foo = null;\" +\n         \"var f = function () {1 + (foo = new Foo()); return foo}\",\n         \"\");\n  }\n",
        "begin_line": 1110,
        "end_line": 1114,
        "comment": "",
        "child_ranges": [
            "(line 1111,col 5)-(line 1113,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithOr1()",
        "snippet": "  public void testAssignWithOr1() {\n    testSame(\"var foo = null;\" +\n        \"var f = window.a || function () {return foo}; f()\");\n  }\n",
        "begin_line": 1116,
        "end_line": 1119,
        "comment": "",
        "child_ranges": [
            "(line 1117,col 5)-(line 1118,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithOr2()",
        "snippet": "  public void testAssignWithOr2() {\n    test(\"var foo = null;\" +\n        \"var f = window.a || function () {return foo};\",\n        \"var foo = null\"); // why is this left?\n  }\n",
        "begin_line": 1121,
        "end_line": 1125,
        "comment": "",
        "child_ranges": [
            "(line 1122,col 5)-(line 1124,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithAnd1()",
        "snippet": "  public void testAssignWithAnd1() {\n    testSame(\"var foo = null;\" +\n        \"var f = window.a && function () {return foo}; f()\");\n  }\n",
        "begin_line": 1127,
        "end_line": 1130,
        "comment": "",
        "child_ranges": [
            "(line 1128,col 5)-(line 1129,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithAnd2()",
        "snippet": "  public void testAssignWithAnd2() {\n    test(\"var foo = null;\" +\n        \"var f = window.a && function () {return foo};\",\n        \"var foo = null;\");  // why is this left?\n  }\n",
        "begin_line": 1132,
        "end_line": 1136,
        "comment": "",
        "child_ranges": [
            "(line 1133,col 5)-(line 1135,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook1()",
        "snippet": "  public void testAssignWithHook1() {\n    testSame(\"function Foo(){} var foo = null;\" +\n        \"var f = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo}; f()\");\n  }\n",
        "begin_line": 1138,
        "end_line": 1142,
        "comment": "",
        "child_ranges": [
            "(line 1139,col 5)-(line 1141,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook2()",
        "snippet": "  public void testAssignWithHook2() {\n    test(\"function Foo(){} var foo = null;\" +\n        \"var f = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo};\",\n        \"\");\n  }\n",
        "begin_line": 1144,
        "end_line": 1149,
        "comment": "",
        "child_ranges": [
            "(line 1145,col 5)-(line 1148,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook2a()",
        "snippet": "  public void testAssignWithHook2a() {\n    test(\"function Foo(){} var foo = null;\" +\n        \"var f; f = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo};\",\n        \"\");\n  }\n",
        "begin_line": 1151,
        "end_line": 1156,
        "comment": "",
        "child_ranges": [
            "(line 1152,col 5)-(line 1155,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook3()",
        "snippet": "  public void testAssignWithHook3() {\n    testSame(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo}; f.b()\");\n  }\n",
        "begin_line": 1158,
        "end_line": 1162,
        "comment": "",
        "child_ranges": [
            "(line 1159,col 5)-(line 1161,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook4()",
        "snippet": "  public void testAssignWithHook4() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? \" +\n        \"    function () {return new Foo()} : function () {return foo};\",\n        \"\");\n  }\n",
        "begin_line": 1164,
        "end_line": 1169,
        "comment": "",
        "child_ranges": [
            "(line 1165,col 5)-(line 1168,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook5()",
        "snippet": "  public void testAssignWithHook5() {\n    testSame(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? function () {return new Foo()} :\" +\n        \"    window.b ? function () {return foo} :\" +\n        \"    function() { return Foo }; f.b()\");\n  }\n",
        "begin_line": 1171,
        "end_line": 1176,
        "comment": "",
        "child_ranges": [
            "(line 1172,col 5)-(line 1175,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook6()",
        "snippet": "  public void testAssignWithHook6() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? function () {return new Foo()} :\" +\n        \"    window.b ? function () {return foo} :\" +\n        \"    function() { return Foo };\",\n        \"\");\n  }\n",
        "begin_line": 1178,
        "end_line": 1184,
        "comment": "",
        "child_ranges": [
            "(line 1179,col 5)-(line 1183,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook7()",
        "snippet": "  public void testAssignWithHook7() {\n    testSame(\"function Foo(){} var foo = null;\" +\n        \"var f = window.a ? new Foo() : foo;\" +\n        \"f()\");\n  }\n",
        "begin_line": 1186,
        "end_line": 1190,
        "comment": "",
        "child_ranges": [
            "(line 1187,col 5)-(line 1189,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook8()",
        "snippet": "  public void testAssignWithHook8() {\n    test(\"function Foo(){} var foo = null;\" +\n        \"var f = window.a ? new Foo() : foo;\",\n        \"function Foo(){}\" +\n        \"window.a && new Foo()\");\n  }\n",
        "begin_line": 1192,
        "end_line": 1197,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1196,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithHook9()",
        "snippet": "  public void testAssignWithHook9() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a ? new Foo() : foo;\",\n        \"function Foo(){} window.a && new Foo()\");\n  }\n",
        "begin_line": 1199,
        "end_line": 1203,
        "comment": "",
        "child_ranges": [
            "(line 1200,col 5)-(line 1202,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssign1()",
        "snippet": "  public void testAssign1() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window.a;\",\n        \"\");\n  }\n",
        "begin_line": 1205,
        "end_line": 1209,
        "comment": "",
        "child_ranges": [
            "(line 1206,col 5)-(line 1208,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssign2()",
        "snippet": "  public void testAssign2() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = window;\",\n        \"\");\n  }\n",
        "begin_line": 1211,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1212,col 5)-(line 1214,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssign3()",
        "snippet": "  public void testAssign3() {\n    test(\"var f = {};\" +\n        \"f.b = window;\",\n        \"\");\n  }\n",
        "begin_line": 1217,
        "end_line": 1221,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1220,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssign4()",
        "snippet": "  public void testAssign4() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = new Foo();\",\n        \"function Foo(){} new Foo()\");\n  }\n",
        "begin_line": 1223,
        "end_line": 1227,
        "comment": "",
        "child_ranges": [
            "(line 1224,col 5)-(line 1226,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssign5()",
        "snippet": "  public void testAssign5() {\n    test(\"function Foo(){} var foo = null; var f = {};\" +\n        \"f.b = foo;\",\n        \"\");\n  }\n",
        "begin_line": 1229,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1230,col 5)-(line 1232,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithCall()",
        "snippet": "  public void testAssignWithCall() {\n    test(\"var fun, x; (fun = function(){ x; })();\",\n        \"var x; (function(){ x; })();\");\n  }\n",
        "begin_line": 1235,
        "end_line": 1238,
        "comment": "",
        "child_ranges": [
            "(line 1236,col 5)-(line 1237,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignWithCall2()",
        "snippet": "  public void testAssignWithCall2() {\n    test(\"var fun, x; (123, fun = function(){ x; })();\",\n        \"(123, function(){ x; })();\");\n  }\n",
        "begin_line": 1242,
        "end_line": 1245,
        "comment": " and later a sanity check fails.",
        "child_ranges": [
            "(line 1243,col 5)-(line 1244,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign1()",
        "snippet": "  public void testNestedAssign1() {\n    test(\"var a, b = a = 1, c = 2\", \"\");\n  }\n",
        "begin_line": 1247,
        "end_line": 1249,
        "comment": "",
        "child_ranges": [
            "(line 1248,col 5)-(line 1248,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign2()",
        "snippet": "  public void testNestedAssign2() {\n    test(\"var a, b = a = 1; foo(b)\",\n         \"var b = 1; foo(b)\");\n  }\n",
        "begin_line": 1251,
        "end_line": 1254,
        "comment": "",
        "child_ranges": [
            "(line 1252,col 5)-(line 1253,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign3()",
        "snippet": "  public void testNestedAssign3() {\n    test(\"var a, b = a = 1; a = b = 2; foo(b)\",\n         \"var b = 1; b = 2; foo(b)\");\n  }\n",
        "begin_line": 1256,
        "end_line": 1259,
        "comment": "",
        "child_ranges": [
            "(line 1257,col 5)-(line 1258,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign4()",
        "snippet": "  public void testNestedAssign4() {\n    test(\"var a, b = a = 1; b = a = 2; foo(b)\",\n         \"var b = 1; b = 2; foo(b)\");\n  }\n",
        "begin_line": 1261,
        "end_line": 1264,
        "comment": "",
        "child_ranges": [
            "(line 1262,col 5)-(line 1263,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign5()",
        "snippet": "  public void testNestedAssign5() {\n    test(\"var a, b = a = 1; b = a = 2\", \"\");\n  }\n",
        "begin_line": 1266,
        "end_line": 1268,
        "comment": "",
        "child_ranges": [
            "(line 1267,col 5)-(line 1267,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign15()",
        "snippet": "  public void testNestedAssign15() {\n    test(\"var a, b, c; c = b = a = 2\", \"\");\n  }\n",
        "begin_line": 1270,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1271,col 5)-(line 1271,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign6()",
        "snippet": "  public void testNestedAssign6() {\n    testSame(\"var a, b, c; a = b = c = 1; foo(a, b, c)\");\n  }\n",
        "begin_line": 1274,
        "end_line": 1276,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 5)-(line 1275,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign7()",
        "snippet": "  public void testNestedAssign7() {\n    testSame(\"var a = 0; a = i[j] = 1; b(a, i[j])\");\n  }\n",
        "begin_line": 1278,
        "end_line": 1280,
        "comment": "",
        "child_ranges": [
            "(line 1279,col 5)-(line 1279,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNestedAssign8()",
        "snippet": "  public void testNestedAssign8() {\n    testSame(\"function f(){\" +\n             \"this.lockedToken_ = this.lastToken_ = \" +\n             \"SETPROP_value(this.hiddenInput_, a)}f()\");\n  }\n",
        "begin_line": 1282,
        "end_line": 1286,
        "comment": "",
        "child_ranges": [
            "(line 1283,col 5)-(line 1285,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain1()",
        "snippet": "  public void testRefChain1() {\n    test(\"var a = 1; var b = a; var c = b; var d = c\", \"\");\n  }\n",
        "begin_line": 1288,
        "end_line": 1290,
        "comment": "",
        "child_ranges": [
            "(line 1289,col 5)-(line 1289,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain2()",
        "snippet": "  public void testRefChain2() {\n    test(\"var a = 1; var b = a; var c = b; var d = c || f()\",\n         \"var a = 1; var b = a; var c = b; c || f()\");\n  }\n",
        "begin_line": 1292,
        "end_line": 1295,
        "comment": "",
        "child_ranges": [
            "(line 1293,col 5)-(line 1294,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain3()",
        "snippet": "  public void testRefChain3() {\n    test(\"var a = 1; var b = a; var c = b; var d = c + f()\", \"f()\");\n  }\n",
        "begin_line": 1297,
        "end_line": 1299,
        "comment": "",
        "child_ranges": [
            "(line 1298,col 5)-(line 1298,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain4()",
        "snippet": "  public void testRefChain4() {\n    test(\"var a = 1; var b = a; var c = b; var d = f() || c\",\n         \"f()\");\n  }\n",
        "begin_line": 1301,
        "end_line": 1304,
        "comment": "",
        "child_ranges": [
            "(line 1302,col 5)-(line 1303,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain5()",
        "snippet": "  public void testRefChain5() {\n    test(\"var a = 1; var b = a; var c = b; var d = f() ? g() : c\",\n         \"f() && g()\");\n  }\n",
        "begin_line": 1306,
        "end_line": 1309,
        "comment": "",
        "child_ranges": [
            "(line 1307,col 5)-(line 1308,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain6()",
        "snippet": "  public void testRefChain6() {\n    test(\"var a = 1; var b = a; var c = b; var d = c ? f() : g()\",\n         \"var a = 1; var b = a; var c = b; c ? f() : g()\");\n  }\n",
        "begin_line": 1311,
        "end_line": 1314,
        "comment": "",
        "child_ranges": [
            "(line 1312,col 5)-(line 1313,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain7()",
        "snippet": "  public void testRefChain7() {\n    test(\"var a = 1; var b = a; var c = b; var d = (b + f()) ? g() : c\",\n         \"var a = 1; var b = a; (b+f()) && g()\");\n  }\n",
        "begin_line": 1316,
        "end_line": 1319,
        "comment": "",
        "child_ranges": [
            "(line 1317,col 5)-(line 1318,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain8()",
        "snippet": "  public void testRefChain8() {\n    test(\"var a = 1; var b = a; var c = b; var d = f()[b] ? g() : 0\",\n         \"var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1321,
        "end_line": 1324,
        "comment": "",
        "child_ranges": [
            "(line 1322,col 5)-(line 1323,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain9()",
        "snippet": "  public void testRefChain9() {\n    test(\"var a = 1; var b = a; var c = 5; var d = f()[b+c] ? g() : 0\",\n         \"var a = 1; var b = a; var c = 5; f()[b+c] && g()\");\n  }\n",
        "begin_line": 1326,
        "end_line": 1329,
        "comment": "",
        "child_ranges": [
            "(line 1327,col 5)-(line 1328,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain10()",
        "snippet": "  public void testRefChain10() {\n    test(\"var a = 1; var b = a; var c = b; var d = f()[b] ? g() : 0\",\n         \"var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1331,
        "end_line": 1334,
        "comment": "",
        "child_ranges": [
            "(line 1332,col 5)-(line 1333,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain11()",
        "snippet": "  public void testRefChain11() {\n    test(\"var a = 1; var b = a; var d = f()[b] ? g() : 0\",\n         \"var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1336,
        "end_line": 1339,
        "comment": "",
        "child_ranges": [
            "(line 1337,col 5)-(line 1338,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain12()",
        "snippet": "  public void testRefChain12() {\n    testSame(\"var a = 1; var b = a; f()[b] ? g() : 0\");\n  }\n",
        "begin_line": 1341,
        "end_line": 1343,
        "comment": "",
        "child_ranges": [
            "(line 1342,col 5)-(line 1342,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain13()",
        "snippet": "  public void testRefChain13() {\n    test(\"function f(){}var a = 1; var b = a; var d = f()[b] ? g() : 0\",\n         \"function f(){}var a = 1; var b = a; f()[b] && g()\");\n  }\n",
        "begin_line": 1346,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1347,col 5)-(line 1348,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain14()",
        "snippet": "  public void testRefChain14() {\n    testSame(\"function f(){}var a = 1; var b = a; f()[b] ? g() : 0\");\n  }\n",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1352,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain15()",
        "snippet": "  public void testRefChain15() {\n    test(\"function f(){}var a = 1, b = a; var c = f(); var d = c[b] ? g() : 0\",\n         \"function f(){}var a = 1, b = a; var c = f(); c[b] && g()\");\n  }\n",
        "begin_line": 1355,
        "end_line": 1358,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 5)-(line 1357,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain16()",
        "snippet": "  public void testRefChain16() {\n    testSame(\"function f(){}var a = 1; var b = a; var c = f(); c[b] ? g() : 0\");\n  }\n",
        "begin_line": 1360,
        "end_line": 1362,
        "comment": "",
        "child_ranges": [
            "(line 1361,col 5)-(line 1361,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain17()",
        "snippet": "  public void testRefChain17() {\n    test(\"function f(){}var a = 1; var b = a; var c = f(); var d = c[b]\",\n         \"function f(){} f()\");\n  }\n",
        "begin_line": 1364,
        "end_line": 1367,
        "comment": "",
        "child_ranges": [
            "(line 1365,col 5)-(line 1366,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain18()",
        "snippet": "  public void testRefChain18() {\n    testSame(\"var a = 1; f()[a] && g()\");\n  }\n",
        "begin_line": 1369,
        "end_line": 1371,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1370,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain19()",
        "snippet": "  public void testRefChain19() {\n    test(\"var a = 1; var b = [a]; var c = b; b[f()] ? g() : 0\",\n         \"var a=1; var b=[a]; b[f()] ? g() : 0\");\n  }\n",
        "begin_line": 1374,
        "end_line": 1377,
        "comment": "",
        "child_ranges": [
            "(line 1375,col 5)-(line 1376,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain20()",
        "snippet": "  public void testRefChain20() {\n    test(\"var a = 1; var b = [a]; var c = b; var d = b[f()] ? g() : 0\",\n         \"var a=1; var b=[a]; b[f()]&&g()\");\n  }\n",
        "begin_line": 1379,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1380,col 5)-(line 1381,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain21()",
        "snippet": "  public void testRefChain21() {\n    testSame(\"var a = 1; var b = 2; var c = a + b; f(c)\");\n  }\n",
        "begin_line": 1384,
        "end_line": 1386,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 5)-(line 1385,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain22()",
        "snippet": "  public void testRefChain22() {\n    test(\"var a = 2; var b = a = 4; f(a)\", \"var a = 2; a = 4; f(a)\");\n  }\n",
        "begin_line": 1388,
        "end_line": 1390,
        "comment": "",
        "child_ranges": [
            "(line 1389,col 5)-(line 1389,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRefChain23()",
        "snippet": "  public void testRefChain23() {\n    test(\"var a = {}; var b = a[1] || f()\", \"var a = {}; a[1] || f()\");\n  }\n",
        "begin_line": 1392,
        "end_line": 1394,
        "comment": "",
        "child_ranges": [
            "(line 1393,col 5)-(line 1393,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs()",
        "snippet": "  public void testAssignmentWithComplexLhs() {\n    testSame(\"function f() { return this; }\" +\n             \"var o = {'key': 'val'};\" +\n             \"f().x_ = o['key'];\");\n  }\n",
        "begin_line": 1401,
        "end_line": 1405,
        "comment": "\n   * Expressions that cannot be attributed to any enclosing dependency\n   * scope should be treated as global references.\n   * @bug 1739062\n   ",
        "child_ranges": [
            "(line 1402,col 5)-(line 1404,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs2()",
        "snippet": "  public void testAssignmentWithComplexLhs2() {\n    testSame(\"function f() { return this; }\" +\n             \"var o = {'key': 'val'};\" +\n             \"f().foo = function() {\" +\n             \"  o\" +\n             \"};\");\n  }\n",
        "begin_line": 1407,
        "end_line": 1413,
        "comment": "",
        "child_ranges": [
            "(line 1408,col 5)-(line 1412,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs3()",
        "snippet": "  public void testAssignmentWithComplexLhs3() {\n    String source =\n        \"var o = {'key': 'val'};\" +\n        \"function init_() {\" +\n        \"  this.x = o['key']\" +\n        \"}\";\n\n    test(source, \"\");\n    testSame(source + \";init_()\");\n  }\n",
        "begin_line": 1415,
        "end_line": 1424,
        "comment": "",
        "child_ranges": [
            "(line 1416,col 5)-(line 1420,col 12)",
            "(line 1422,col 5)-(line 1422,col 21)",
            "(line 1423,col 5)-(line 1423,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAssignmentWithComplexLhs4()",
        "snippet": "  public void testAssignmentWithComplexLhs4() {\n    testSame(\"function f() { return this; }\" +\n             \"var o = {'key': 'val'};\" +\n             \"f().foo = function() {\" +\n             \"  this.x = o['key']\" +\n             \"};\");\n  }\n",
        "begin_line": 1426,
        "end_line": 1432,
        "comment": "",
        "child_ranges": [
            "(line 1427,col 5)-(line 1431,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope1()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope1() {\n    testSame(\"function f(arg){}\" +\n             \"\" +\n             \"(function(){\" +\n             \"  var O = {};\" +\n             \"  O.prototype = 'foo';\" +\n             \"  f(O);\" +\n             \"})()\");\n  }\n",
        "begin_line": 1439,
        "end_line": 1447,
        "comment": "\n   * Do not \"prototype\" property of variables that are not being\n   * tracked (because they are local).\n   * @bug 1809442\n   ",
        "child_ranges": [
            "(line 1440,col 5)-(line 1446,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope2()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope2() {\n    testSame(\"function f(arg){}\" +\n             \"(function h(){\" +\n             \"  var L = {};\" +\n             \"  L.prototype = 'foo';\" +\n             \"  f(L);\" +\n             \"})()\");\n  }\n",
        "begin_line": 1449,
        "end_line": 1456,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 5)-(line 1455,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope4()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope4() {\n    testSame(\"function f(arg){}\" +\n             \"function g(){\" +\n             \"  var N = {};\" +\n             \"  N.prototype = 'foo';\" +\n             \"  f(N);\" +\n             \"}\" +\n             \"g()\");\n  }\n",
        "begin_line": 1458,
        "end_line": 1466,
        "comment": "",
        "child_ranges": [
            "(line 1459,col 5)-(line 1465,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemovePrototypeDefinitionsOutsideGlobalScope5()",
        "snippet": "  public void testNoRemovePrototypeDefinitionsOutsideGlobalScope5() {\n    // function body not removed due to @bug 1898561\n    testSame(\"function g(){ var R = {}; R.prototype = 'foo' } g()\");\n  }\n",
        "begin_line": 1468,
        "end_line": 1471,
        "comment": "",
        "child_ranges": [
            "(line 1470,col 5)-(line 1470,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemovePrototypeDefinitionsInGlobalScope1()",
        "snippet": "  public void testRemovePrototypeDefinitionsInGlobalScope1() {\n    testSame(\"function f(arg){}\" +\n             \"var M = {};\" +\n             \"M.prototype = 'foo';\" +\n             \"f(M);\");\n  }\n",
        "begin_line": 1473,
        "end_line": 1478,
        "comment": "",
        "child_ranges": [
            "(line 1474,col 5)-(line 1477,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemovePrototypeDefinitionsInGlobalScope2()",
        "snippet": "  public void testRemovePrototypeDefinitionsInGlobalScope2() {\n    test(\"var Q = {}; Q.prototype = 'foo'\", \"\");\n  }\n",
        "begin_line": 1480,
        "end_line": 1482,
        "comment": "",
        "child_ranges": [
            "(line 1481,col 5)-(line 1481,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment()",
        "snippet": "  public void testRemoveLabeledStatment() {\n    test(\"LBL: var x = 1;\", \"LBL: {}\");\n  }\n",
        "begin_line": 1484,
        "end_line": 1486,
        "comment": "",
        "child_ranges": [
            "(line 1485,col 5)-(line 1485,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment2()",
        "snippet": "  public void testRemoveLabeledStatment2() {\n    test(\"var x; LBL: x = f() + g()\", \"LBL: { f() ; g()}\");\n  }\n",
        "begin_line": 1488,
        "end_line": 1490,
        "comment": "",
        "child_ranges": [
            "(line 1489,col 5)-(line 1489,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment3()",
        "snippet": "  public void testRemoveLabeledStatment3() {\n    test(\"var x; LBL: x = 1;\", \"LBL: {}\");\n  }\n",
        "begin_line": 1492,
        "end_line": 1494,
        "comment": "",
        "child_ranges": [
            "(line 1493,col 5)-(line 1493,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveLabeledStatment4()",
        "snippet": "  public void testRemoveLabeledStatment4() {\n    test(\"var a; LBL: a = f()\", \"LBL: f()\");\n  }\n",
        "begin_line": 1496,
        "end_line": 1498,
        "comment": "",
        "child_ranges": [
            "(line 1497,col 5)-(line 1497,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias1()",
        "snippet": "  public void testPreservePropertyMutationsToAlias1() {\n    // Test for issue b/2316773 - property get case\n    // Since a is referenced, property mutations via a's alias b must\n    // be preserved.\n    testSame(\"var a = {}; var b = a; b.x = 1; a\");\n  }\n",
        "begin_line": 1500,
        "end_line": 1505,
        "comment": "",
        "child_ranges": [
            "(line 1504,col 5)-(line 1504,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias2()",
        "snippet": "  public void testPreservePropertyMutationsToAlias2() {\n    // Test for issue b/2316773 - property get case, don't keep 'c'\n    test(\"var a = {}; var b = a; var c = a; b.x = 1; a\",\n         \"var a = {}; var b = a; b.x = 1; a\");\n  }\n",
        "begin_line": 1507,
        "end_line": 1511,
        "comment": "",
        "child_ranges": [
            "(line 1509,col 5)-(line 1510,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias3()",
        "snippet": "  public void testPreservePropertyMutationsToAlias3() {\n    // Test for issue b/2316773 - property get case, chain\n    testSame(\"var a = {}; var b = a; var c = b; c.x = 1; a\");\n  }\n",
        "begin_line": 1513,
        "end_line": 1516,
        "comment": "",
        "child_ranges": [
            "(line 1515,col 5)-(line 1515,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias4()",
        "snippet": " public void testPreservePropertyMutationsToAlias4() {\n    // Test for issue b/2316773 - element get case\n    testSame(\"var a = {}; var b = a; b['x'] = 1; a\");\n  }\n",
        "begin_line": 1518,
        "end_line": 1521,
        "comment": "",
        "child_ranges": [
            "(line 1520,col 5)-(line 1520,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias5()",
        "snippet": "  public void testPreservePropertyMutationsToAlias5() {\n    // From issue b/2316773 description\n    testSame(\"function testCall(o){}\" +\n             \"var DATA = {'prop': 'foo','attr': {}};\" +\n             \"var SUBDATA = DATA['attr'];\" +\n             \"SUBDATA['subprop'] = 'bar';\" +\n             \"testCall(DATA);\");\n  }\n",
        "begin_line": 1523,
        "end_line": 1530,
        "comment": "",
        "child_ranges": [
            "(line 1525,col 5)-(line 1529,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias6()",
        "snippet": "  public void testPreservePropertyMutationsToAlias6() {\n    // Longer GETELEM chain\n    testSame(\"function testCall(o){}\" +\n             \"var DATA = {'prop': 'foo','attr': {}};\" +\n             \"var SUBDATA = DATA['attr'];\" +\n             \"var SUBSUBDATA = SUBDATA['subprop'];\" +\n             \"SUBSUBDATA['subsubprop'] = 'bar';\" +\n             \"testCall(DATA);\");\n  }\n",
        "begin_line": 1532,
        "end_line": 1540,
        "comment": "",
        "child_ranges": [
            "(line 1534,col 5)-(line 1539,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias7()",
        "snippet": "  public void testPreservePropertyMutationsToAlias7() {\n    // Make sure that the base class does not depend on the derived class.\n    test(\"var a = {}; var b = {}; b.x = 0;\" +\n         \"var goog = {}; goog.inherits(b, a); a\",\n         \"var a = {}; a\");\n  }\n",
        "begin_line": 1542,
        "end_line": 1547,
        "comment": "",
        "child_ranges": [
            "(line 1544,col 5)-(line 1546,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias8()",
        "snippet": "  public void testPreservePropertyMutationsToAlias8() {\n    // Make sure that the derived classes don't end up depending on each other.\n    test(\"var a = {};\" +\n         \"var b = {}; b.x = 0;\" +\n         \"var c = {}; c.y = 0;\" +\n         \"var goog = {}; goog.inherits(b, a); goog.inherits(c, a); c\",\n         \"var a = {}; var c = {}; c.y = 0;\" +\n         \"var goog = {}; goog.inherits(c, a); c\");\n  }\n",
        "begin_line": 1549,
        "end_line": 1557,
        "comment": "",
        "child_ranges": [
            "(line 1551,col 5)-(line 1556,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testPreservePropertyMutationsToAlias9()",
        "snippet": "  public void testPreservePropertyMutationsToAlias9() {\n    testSame(\"var a = {b: {}};\" +\n         \"var c = a.b; c.d = 3;\" +\n         \"a.d = 3; a.d;\");\n  }\n",
        "begin_line": 1559,
        "end_line": 1563,
        "comment": "",
        "child_ranges": [
            "(line 1560,col 5)-(line 1562,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemoveAlias()",
        "snippet": "  public void testRemoveAlias() {\n    test(\"var a = {b: {}};\" +\n         \"var c = a.b;\" +\n         \"a.d = 3; a.d;\",\n         \"var a = {b: {}}; a.d = 3; a.d;\");\n  }\n",
        "begin_line": 1565,
        "end_line": 1570,
        "comment": "",
        "child_ranges": [
            "(line 1566,col 5)-(line 1569,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSingletonGetter1()",
        "snippet": "  public void testSingletonGetter1() {\n    test(\"function Foo() {} goog.addSingletonGetter(Foo);\", \"\");\n  }\n",
        "begin_line": 1572,
        "end_line": 1574,
        "comment": "",
        "child_ranges": [
            "(line 1573,col 5)-(line 1573,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSingletonGetter2()",
        "snippet": "  public void testSingletonGetter2() {\n    test(\"function Foo() {} goog$addSingletonGetter(Foo);\", \"\");\n  }\n",
        "begin_line": 1576,
        "end_line": 1578,
        "comment": "",
        "child_ranges": [
            "(line 1577,col 5)-(line 1577,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testSingletonGetter3()",
        "snippet": "  public void testSingletonGetter3() {\n    // addSingletonGetter adds a getInstance method to a class.\n    testSame(\"function Foo() {} goog$addSingletonGetter(Foo);\" +\n        \"this.x = Foo.getInstance();\");\n  }\n",
        "begin_line": 1580,
        "end_line": 1584,
        "comment": "",
        "child_ranges": [
            "(line 1582,col 5)-(line 1583,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias1()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias1() {\n     testSame(\n         \"var self_ = window.gbar;\\n\" +\n         \"self_.qs = function() {};\");\n  }\n",
        "begin_line": 1588,
        "end_line": 1592,
        "comment": "",
        "child_ranges": [
            "(line 1589,col 6)-(line 1591,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias2()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias2() {\n    testSame(\n        \"var self_ = window;\\n\" +\n        \"self_.qs = function() {};\");\n  }\n",
        "begin_line": 1594,
        "end_line": 1598,
        "comment": "",
        "child_ranges": [
            "(line 1595,col 5)-(line 1597,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias3()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias3() {\n    testSame(\n        \"var self_ = window;\\n\" +\n        \"self_['qs'] = function() {};\");\n  }\n",
        "begin_line": 1600,
        "end_line": 1604,
        "comment": "",
        "child_ranges": [
            "(line 1601,col 5)-(line 1603,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias4()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias4() {\n    // TODO(johnlenz): fix this. \"self_\" should remain.\n    test(\n        \"var self_ = window['gbar'] || {};\\n\" +\n        \"self_.qs = function() {};\",\n        \"\");\n }\n",
        "begin_line": 1606,
        "end_line": 1612,
        "comment": "",
        "child_ranges": [
            "(line 1608,col 5)-(line 1611,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias4a()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias4a() {\n    // TODO(johnlenz): fix this. \"self_\" should remain.\n    test(\n        \"var self_; self_ = window.gbar || {};\\n\" +\n        \"self_.qs = function() {};\",\n        \"\");\n }\n",
        "begin_line": 1614,
        "end_line": 1620,
        "comment": "",
        "child_ranges": [
            "(line 1616,col 5)-(line 1619,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias5()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias5() {\n    // TODO(johnlenz): fix this. \"self_\" should remain.\n    test(\n        \"var self_ = window || {};\\n\" +\n        \"self_['qs'] = function() {};\",\n        \"\");\n  }\n",
        "begin_line": 1622,
        "end_line": 1628,
        "comment": "",
        "child_ranges": [
            "(line 1624,col 5)-(line 1627,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias5a()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias5a() {\n    // TODO(johnlenz): fix this.\n    test(\n        \"var self_; self_ = window || {};\\n\" +\n        \"self_['qs'] = function() {};\",\n        \"\");\n  }\n",
        "begin_line": 1630,
        "end_line": 1636,
        "comment": "",
        "child_ranges": [
            "(line 1632,col 5)-(line 1635,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias6()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias6() {\n    testSame(\n        \"var self_ = (window.gbar = window.gbar || {});\\n\" +\n        \"self_.qs = function() {};\");\n  }\n",
        "begin_line": 1638,
        "end_line": 1642,
        "comment": "",
        "child_ranges": [
            "(line 1639,col 5)-(line 1641,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias6a()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias6a() {\n    testSame(\n        \"var self_; self_ = (window.gbar = window.gbar || {});\\n\" +\n        \"self_.qs = function() {};\");\n  }\n",
        "begin_line": 1644,
        "end_line": 1648,
        "comment": "",
        "child_ranges": [
            "(line 1645,col 5)-(line 1647,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias7()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias7() {\n    testSame(\n        \"var self_ = (window = window || {});\\n\" +\n        \"self_['qs'] = function() {};\");\n  }\n",
        "begin_line": 1650,
        "end_line": 1654,
        "comment": "",
        "child_ranges": [
            "(line 1651,col 5)-(line 1653,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveWindowPropertyAlias7a()",
        "snippet": "  public void testNoRemoveWindowPropertyAlias7a() {\n    testSame(\n        \"var self_; self_ = (window = window || {});\\n\" +\n        \"self_['qs'] = function() {};\");\n  }\n",
        "begin_line": 1656,
        "end_line": 1660,
        "comment": "",
        "child_ranges": [
            "(line 1657,col 5)-(line 1659,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias0()",
        "snippet": "  public void testNoRemoveAlias0() {\n    testSame(\n        \"var x = {}; function f() { return x; }; \" +\n        \"f().style.display = 'block';\" +\n        \"alert(x.style)\");\n  }\n",
        "begin_line": 1662,
        "end_line": 1667,
        "comment": "",
        "child_ranges": [
            "(line 1663,col 5)-(line 1666,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias1()",
        "snippet": "  public void testNoRemoveAlias1() {\n    testSame(\n        \"var x = {}; function f() { return x; };\" +\n        \"var map = f();\\n\" +\n        \"map.style.display = 'block';\" +\n        \"alert(x.style)\");\n  }\n",
        "begin_line": 1669,
        "end_line": 1675,
        "comment": "",
        "child_ranges": [
            "(line 1670,col 5)-(line 1674,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias2()",
        "snippet": "  public void testNoRemoveAlias2() {\n    testSame(\n        \"var x = {};\" +\n        \"var map = (function () { return x; })();\\n\" +\n        \"map.style = 'block';\" +\n        \"alert(x.style)\");\n  }\n",
        "begin_line": 1677,
        "end_line": 1683,
        "comment": "",
        "child_ranges": [
            "(line 1678,col 5)-(line 1682,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAlias3()",
        "snippet": "  public void testNoRemoveAlias3() {\n    testSame(\n        \"var x = {}; function f() { return x; };\" +\n        \"var map = {}\\n\" +\n        \"map[1] = f();\\n\" +\n        \"map[1].style.display = 'block';\");\n  }\n",
        "begin_line": 1685,
        "end_line": 1691,
        "comment": "",
        "child_ranges": [
            "(line 1686,col 5)-(line 1690,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAliasOfExternal0()",
        "snippet": "  public void testNoRemoveAliasOfExternal0() {\n    testSame(\n        \"document.getElementById('foo').style.display = 'block';\");\n  }\n",
        "begin_line": 1693,
        "end_line": 1696,
        "comment": "",
        "child_ranges": [
            "(line 1694,col 5)-(line 1695,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAliasOfExternal1()",
        "snippet": "  public void testNoRemoveAliasOfExternal1() {\n    testSame(\n        \"var map = document.getElementById('foo');\\n\" +\n        \"map.style.display = 'block';\");\n  }\n",
        "begin_line": 1698,
        "end_line": 1702,
        "comment": "",
        "child_ranges": [
            "(line 1699,col 5)-(line 1701,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveAliasOfExternal2()",
        "snippet": "  public void testNoRemoveAliasOfExternal2() {\n    testSame(\n        \"var map = {}\\n\" +\n        \"map[1] = document.getElementById('foo');\\n\" +\n        \"map[1].style.display = 'block';\");\n  }\n",
        "begin_line": 1704,
        "end_line": 1709,
        "comment": "",
        "child_ranges": [
            "(line 1705,col 5)-(line 1708,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveThrowReference1()",
        "snippet": "  public void testNoRemoveThrowReference1() {\n    testSame(\n      \"var e = {}\\n\" +\n      \"throw e;\");\n  }\n",
        "begin_line": 1711,
        "end_line": 1715,
        "comment": "",
        "child_ranges": [
            "(line 1712,col 5)-(line 1714,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testNoRemoveThrowReference2()",
        "snippet": "  public void testNoRemoveThrowReference2() {\n    testSame(\n      \"function e() {}\\n\" +\n      \"throw new e();\");\n  }\n",
        "begin_line": 1717,
        "end_line": 1721,
        "comment": "",
        "child_ranges": [
            "(line 1718,col 5)-(line 1720,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit1()",
        "snippet": "  public void testClassDefinedInObjectLit1() {\n    test(\n      \"var data = {Foo: function() {}};\" +\n      \"data.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1723,
        "end_line": 1728,
        "comment": "",
        "child_ranges": [
            "(line 1724,col 5)-(line 1727,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit2()",
        "snippet": "  public void testClassDefinedInObjectLit2() {\n    test(\n      \"var data = {}; data.bar = {Foo: function() {}};\" +\n      \"data.bar.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1730,
        "end_line": 1735,
        "comment": "",
        "child_ranges": [
            "(line 1731,col 5)-(line 1734,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit3()",
        "snippet": "  public void testClassDefinedInObjectLit3() {\n    test(\n      \"var data = {bar: {Foo: function() {}}};\" +\n      \"data.bar.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1737,
        "end_line": 1742,
        "comment": "",
        "child_ranges": [
            "(line 1738,col 5)-(line 1741,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testClassDefinedInObjectLit4()",
        "snippet": "  public void testClassDefinedInObjectLit4() {\n    test(\n      \"var data = {};\" +\n      \"data.baz = {bar: {Foo: function() {}}};\" +\n      \"data.baz.bar.Foo.prototype.toString = function() {};\",\n      \"\");\n  }\n",
        "begin_line": 1744,
        "end_line": 1750,
        "comment": "",
        "child_ranges": [
            "(line 1745,col 5)-(line 1749,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testVarReferencedInClassDefinedInObjectLit1()",
        "snippet": "  public void testVarReferencedInClassDefinedInObjectLit1() {\n    testSame(\n      \"var ref = 3;\" +\n      \"var data = {Foo: function() { this.x = ref; }};\" +\n      \"window.Foo = data.Foo;\");\n  }\n",
        "begin_line": 1752,
        "end_line": 1757,
        "comment": "",
        "child_ranges": [
            "(line 1753,col 5)-(line 1756,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testVarReferencedInClassDefinedInObjectLit2()",
        "snippet": "  public void testVarReferencedInClassDefinedInObjectLit2() {\n    testSame(\n      \"var ref = 3;\" +\n      \"var data = {Foo: function() { this.x = ref; },\" +\n      \"            Bar: function() {}};\" +\n      \"window.Bar = data.Bar;\");\n  }\n",
        "begin_line": 1759,
        "end_line": 1765,
        "comment": "",
        "child_ranges": [
            "(line 1760,col 5)-(line 1764,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testArrayExt()",
        "snippet": "  public void testArrayExt() {\n    testSame(\n      \"Array.prototype.foo = function() { return 1 };\" +\n      \"var y = [];\" +\n      \"switch (y.foo()) {\" +\n      \"}\");\n  }\n",
        "begin_line": 1767,
        "end_line": 1773,
        "comment": "",
        "child_ranges": [
            "(line 1768,col 5)-(line 1772,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testArrayAliasExt()",
        "snippet": "  public void testArrayAliasExt() {\n    testSame(\n      \"Array$X = Array;\" +\n      \"Array$X.prototype.foo = function() { return 1 };\" +\n      \"function Array$X() {}\" +\n      \"var y = [];\" +\n      \"switch (y.foo()) {\" +\n      \"}\");\n  }\n",
        "begin_line": 1775,
        "end_line": 1783,
        "comment": "",
        "child_ranges": [
            "(line 1776,col 5)-(line 1782,col 11)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternalAliasInstanceof1()",
        "snippet": "  public void testExternalAliasInstanceof1() {\n    test(\n      \"Array$X = Array;\" +\n      \"function Array$X() {}\" +\n      \"var y = [];\" +\n      \"if (y instanceof Array) {}\",\n      \"var y = [];\" +\n      \"if (y instanceof Array) {}\"\n      );\n  }\n",
        "begin_line": 1785,
        "end_line": 1794,
        "comment": "",
        "child_ranges": [
            "(line 1786,col 5)-(line 1793,col 8)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternalAliasInstanceof2()",
        "snippet": "  public void testExternalAliasInstanceof2() {\n    testSame(\n      \"Array$X = Array;\" +\n      \"function Array$X() {}\" +\n      \"var y = [];\" +\n      \"if (y instanceof Array$X) {}\");\n  }\n",
        "begin_line": 1796,
        "end_line": 1802,
        "comment": "",
        "child_ranges": [
            "(line 1797,col 5)-(line 1801,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testExternalAliasInstanceof3()",
        "snippet": "  public void testExternalAliasInstanceof3() {\n    testSame(\n      \"var b = Array;\" +\n      \"var y = [];\" +\n      \"if (y instanceof b) {}\");\n  }\n",
        "begin_line": 1804,
        "end_line": 1809,
        "comment": "",
        "child_ranges": [
            "(line 1805,col 5)-(line 1808,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAliasInstanceof4()",
        "snippet": "  public void testAliasInstanceof4() {\n    testSame(\n      \"function Foo() {};\" +\n      \"var b = Foo;\" +\n      \"var y = new Foo();\" +\n      \"if (y instanceof b) {}\");\n  }\n",
        "begin_line": 1811,
        "end_line": 1817,
        "comment": "",
        "child_ranges": [
            "(line 1812,col 5)-(line 1816,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testAliasInstanceof5()",
        "snippet": "  public void testAliasInstanceof5() {\n    // TODO(johnlenz): fix this. \"b\" should remain.\n    test(\n      \"function Foo() {}\" +\n      \"function Bar() {}\" +\n      \"var b = x ? Foo : Bar;\" +\n      \"var y = new Foo();\" +\n      \"if (y instanceof b) {}\",\n      \"function Foo() {}\" +\n      \"var y = new Foo;\" +\n      \"if (false){}\");\n  }\n",
        "begin_line": 1819,
        "end_line": 1830,
        "comment": "",
        "child_ranges": [
            "(line 1821,col 5)-(line 1829,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testBrokenNamespaceWithPrototypeAssignment()",
        "snippet": "  public void testBrokenNamespaceWithPrototypeAssignment() {\n    test(\"var x = {}; x.a.prototype = 1\", \"\");\n  }\n",
        "begin_line": 1834,
        "end_line": 1836,
        "comment": " fail sanity var check.",
        "child_ranges": [
            "(line 1835,col 5)-(line 1835,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testRemovePrototypeAliases()",
        "snippet": "  public void testRemovePrototypeAliases() {\n    test(\n        \"function g() {}\" +\n        \"function F() {} F.prototype.bar = g;\" +\n        \"window.g = g;\",\n        \"function g() {}\" +\n        \"window.g = g;\");\n  }\n",
        "begin_line": 1838,
        "end_line": 1845,
        "comment": "",
        "child_ranges": [
            "(line 1839,col 5)-(line 1844,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    test(\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1847,
        "end_line": 1861,
        "comment": "",
        "child_ranges": [
            "(line 1848,col 5)-(line 1860,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue838a()",
        "snippet": "  public void testIssue838a() {\n    testSame(\"var z = window['z'] || (window['z'] = {});\\n\" +\n         \"z['hello'] = 'Hello';\\n\" +\n         \"z['world'] = 'World';\");\n  }\n",
        "begin_line": 1863,
        "end_line": 1867,
        "comment": "",
        "child_ranges": [
            "(line 1864,col 5)-(line 1866,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue838b()",
        "snippet": "  public void testIssue838b() {\n    testSame(\n         \"var z;\" +\n         \"window['z'] = z || (z = {});\\n\" +\n         \"z['hello'] = 'Hello';\\n\" +\n         \"z['world'] = 'World';\");\n  }\n",
        "begin_line": 1869,
        "end_line": 1875,
        "comment": "",
        "child_ranges": [
            "(line 1870,col 5)-(line 1874,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue874a()",
        "snippet": "  public void testIssue874a() {\n    testSame(\n        \"var a = a || {};\\n\" +\n        \"var b = a;\\n\" +\n        \"b.View = b.View || {}\\n\" +\n        \"var c = b.View;\\n\" +\n        \"c.Editor = function f(d, e) {\\n\" +\n        \"  return d + e\\n\" +\n        \"};\\n\" +\n        \"window.ImageEditor.View.Editor = a.View.Editor;\");\n  }\n",
        "begin_line": 1878,
        "end_line": 1888,
        "comment": "",
        "child_ranges": [
            "(line 1879,col 5)-(line 1887,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue874b()",
        "snippet": "  public void testIssue874b() {\n    testSame(\n        \"var b;\\n\" +\n        \"var c = b = {};\\n\" +\n        \"c.Editor = function f(d, e) {\\n\" +\n        \"  return d + e\\n\" +\n        \"};\\n\" +\n        \"window['Editor'] = b.Editor;\");\n  }\n",
        "begin_line": 1890,
        "end_line": 1898,
        "comment": "",
        "child_ranges": [
            "(line 1891,col 5)-(line 1897,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue874c()",
        "snippet": "  public void testIssue874c() {\n    testSame(\n        \"var b, c;\\n\" +\n        \"c = b = {};\\n\" +\n        \"c.Editor = function f(d, e) {\\n\" +\n        \"  return d + e\\n\" +\n        \"};\\n\" +\n        \"window['Editor'] = b.Editor;\");\n  }\n",
        "begin_line": 1900,
        "end_line": 1908,
        "comment": "",
        "child_ranges": [
            "(line 1901,col 5)-(line 1907,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue874d()",
        "snippet": "  public void testIssue874d() {\n    testSame(\n        \"var b = {}, c;\\n\" +\n        \"c = b;\\n\" +\n        \"c.Editor = function f(d, e) {\\n\" +\n        \"  return d + e\\n\" +\n        \"};\\n\" +\n        \"window['Editor'] = b.Editor;\");\n  }\n",
        "begin_line": 1910,
        "end_line": 1918,
        "comment": "",
        "child_ranges": [
            "(line 1911,col 5)-(line 1917,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testIssue874e()",
        "snippet": "  public void testIssue874e() {\n    testSame(\n        \"var a;\\n\" +\n        \"var b = a || (a = {});\\n\" +\n        \"var c = b.View || (b.View = {});\\n\" +\n        \"c.Editor = function f(d, e) {\\n\" +\n        \"  return d + e\\n\" +\n        \"};\\n\" +\n        \"window.ImageEditor.View.Editor = a.View.Editor;\");\n  }\n",
        "begin_line": 1920,
        "end_line": 1929,
        "comment": "",
        "child_ranges": [
            "(line 1921,col 5)-(line 1928,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.testBug6575051()",
        "snippet": "  public void testBug6575051() {\n    testSame(\n        \"var hackhack = window['__o_o_o__'] = window['__o_o_o__'] || {};\\n\" +\n        \"window['__o_o_o__']['va'] = 1;\\n\" +\n        \"hackhack['Vb'] = 1;\");\n  }\n",
        "begin_line": 1931,
        "end_line": 1936,
        "comment": "",
        "child_ranges": [
            "(line 1932,col 5)-(line 1935,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  protected CompilerPass getProcessor(Compiler compiler) {\n    return new MarkNoSideEffectCallsAndNameAnalyzerRunner(compiler);\n  }\n",
        "begin_line": 1938,
        "end_line": 1941,
        "comment": "",
        "child_ranges": [
            "(line 1940,col 5)-(line 1940,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.MarkNoSideEffectCallsAndNameAnalyzerRunner.MarkNoSideEffectCallsAndNameAnalyzerRunner(com.google.javascript.jscomp.Compiler)",
        "snippet": "    MarkNoSideEffectCallsAndNameAnalyzerRunner(Compiler compiler) {\n      this.markNoSideEffectCalls = new MarkNoSideEffectCalls(compiler);\n      this.analyzer = new NameAnalyzer(compiler, true);\n    }\n",
        "begin_line": 1947,
        "end_line": 1950,
        "comment": "",
        "child_ranges": [
            "(line 1948,col 7)-(line 1948,col 71)",
            "(line 1949,col 7)-(line 1949,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NameAnalyzerTest.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzerTest.MarkNoSideEffectCallsAndNameAnalyzerRunner.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "    @Override\n    public void process(Node externs, Node root) {\n      markNoSideEffectCalls.process(externs, root);\n      analyzer.process(externs, root);\n    }\n",
        "begin_line": 1952,
        "end_line": 1956,
        "comment": "",
        "child_ranges": [
            "(line 1954,col 7)-(line 1954,col 51)",
            "(line 1955,col 7)-(line 1955,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 137,
        "end_line": 142,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 139,col 49)",
            "(line 140,col 5)-(line 140,col 39)",
            "(line 141,col 5)-(line 141,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 155,
        "end_line": 157,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 156,col 5)-(line 156,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.tearDown()",
        "snippet": "  @Override protected void tearDown() throws Exception {\n    super.tearDown();\n    expectParseWarningsThisTest = false;\n  }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 160,col 5)-(line 160,col 21)",
            "(line 161,col 5)-(line 161,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    return getOptions(new CompilerOptions());\n  }\n",
        "begin_line": 177,
        "end_line": 179,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 178,col 5)-(line 178,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions(com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  protected CompilerOptions getOptions(CompilerOptions options) {\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setWarningLevel(\n        DiagnosticGroups.INVALID_CASTS, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 185,
        "end_line": 200,
        "comment": "\n   * Gets the compiler options to use for this test. Use getProcessor to\n   * determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 186,col 5)-(line 188,col 5)",
            "(line 192,col 5)-(line 192,col 32)",
            "(line 194,col 5)-(line 195,col 65)",
            "(line 196,col 5)-(line 197,col 60)",
            "(line 198,col 5)-(line 198,col 55)",
            "(line 199,col 5)-(line 199,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 202,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 203,col 5)-(line 203,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setFilename(java.lang.String)",
        "snippet": "  public void setFilename(String filename) {\n    this.filename = filename;\n  }\n",
        "begin_line": 206,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 214,
        "end_line": 218,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 233,
        "end_line": 235,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 252,
        "end_line": 255,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 253,col 5)-(line 253,col 29)",
            "(line 254,col 5)-(line 254,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 261,col 5)-(line 261,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 269,
        "end_line": 271,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 270,col 5)-(line 270,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableClosurePass()",
        "snippet": "  void enableClosurePass() {\n    closurePassEnabled = true;\n  }\n",
        "begin_line": 277,
        "end_line": 279,
        "comment": " TODO(nicksantos): Fix other passes to use this when appropriate.",
        "child_ranges": [
            "(line 278,col 5)-(line 278,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 287,
        "end_line": 289,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 299,
        "end_line": 302,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected JS result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 300,col 5)-(line 300,col 28)",
            "(line 301,col 5)-(line 301,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 309,col 5)-(line 309,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": " TODO(nicksantos): This pass doesn't get run anymore. It should be removed.",
        "child_ranges": [
            "(line 319,col 5)-(line 319,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableComputeSideEffects()",
        "snippet": "  void enableComputeSideEffects() {\n    computeSideEffects  = true;\n  }\n",
        "begin_line": 327,
        "end_line": 329,
        "comment": "\n   * Run the PureFunctionIdentifier pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 334,
        "end_line": 336,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectParseWarningsThisTest()",
        "snippet": "  protected void setExpectParseWarningsThisTest() {\n    expectParseWarningsThisTest = true;\n  }\n",
        "begin_line": 339,
        "end_line": 341,
        "comment": " Whether we should ignore parse warnings for the current test method. ",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(), level);\n  }\n",
        "begin_line": 344,
        "end_line": 351,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 346,col 5)-(line 348,col 40)",
            "(line 350,col 5)-(line 350,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 359,
        "end_line": 361,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 360,col 5)-(line 360,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 371,
        "end_line": 373,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 372,col 5)-(line 372,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 386,
        "end_line": 389,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 388,col 5)-(line 388,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 401,
        "end_line": 404,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 403,col 5)-(line 403,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 417,
        "end_line": 420,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 419,col 5)-(line 419,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 436,
        "end_line": 442,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 439,col 5)-(line 440,col 49)",
            "(line 441,col 5)-(line 441,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.util.List<com.google.javascript.jscomp.SourceFile>, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(List<SourceFile> externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, ImmutableList.of(\n        SourceFile.fromCode(filename, js)), options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, maybeCreateArray(expected), error, warning, description);\n  }\n",
        "begin_line": 458,
        "end_line": 478,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 461,col 5)-(line 461,col 41)",
            "(line 462,col 5)-(line 462,col 28)",
            "(line 464,col 5)-(line 464,col 43)",
            "(line 466,col 5)-(line 468,col 5)",
            "(line 471,col 5)-(line 471,col 39)",
            "(line 472,col 5)-(line 473,col 53)",
            "(line 475,col 5)-(line 475,col 71)",
            "(line 477,col 5)-(line 477,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.maybeCreateArray(java.lang.String)",
        "snippet": "  private String[] maybeCreateArray(String expected) {\n    if (expected != null) {\n      return new String[] { expected };\n    }\n    return null;\n  }\n",
        "begin_line": 480,
        "end_line": 485,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 483,col 5)",
            "(line 484,col 5)-(line 484,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 505,
        "end_line": 507,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 521,col 5)-(line 521,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < js.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, js[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 537,
        "end_line": 548,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 539,col 5)-(line 539,col 41)",
            "(line 540,col 5)-(line 540,col 28)",
            "(line 542,col 5)-(line 542,col 51)",
            "(line 543,col 5)-(line 545,col 5)",
            "(line 546,col 5)-(line 546,col 55)",
            "(line 547,col 5)-(line 547,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 556,
        "end_line": 558,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 557,col 5)-(line 557,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 568,
        "end_line": 571,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 570,col 5)-(line 570,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.initModules(\n        externsInputs, Lists.newArrayList(modules), getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 583,
        "end_line": 591,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 585,col 5)-(line 585,col 41)",
            "(line 586,col 5)-(line 586,col 28)",
            "(line 588,col 5)-(line 589,col 66)",
            "(line 590,col 5)-(line 590,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 609,
        "end_line": 611,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 610,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 621,
        "end_line": 627,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 626,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 637,
        "end_line": 639,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 638,col 5)-(line 638,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 652,col 5)-(line 656,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    List<SourceFile> externsInputs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", externs));\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 670,
        "end_line": 675,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 672,col 5)-(line 673,col 49)",
            "(line 674,col 5)-(line 674,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 683,col 5)-(line 683,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 694,col 5)-(line 694,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 705,
        "end_line": 708,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 707,col 5)-(line 707,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 715,
        "end_line": 717,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 716,col 5)-(line 716,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 725,
        "end_line": 738,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 726,col 5)-(line 737,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 751,
        "end_line": 754,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    if (!expectParseWarningsThisTest) {\n      assertTrue(\"Unexpected parse warnings(s): \" +\n          Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          compiler.getWarnings().length == 0);\n    }\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n    Map<Node, Node> mtoc = NodeUtil.mapMainToClone(mainRoot, mainRootClone);\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run process closure primitives once, if asked.\n        if (closurePassEnabled && i == 0) {\n          recentChange.reset();\n          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR)\n              .process(null, mainRoot);\n          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        }\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (!runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (computeSideEffects && i == 0) {\n          PureFunctionIdentifier.Driver mark =\n              new PureFunctionIdentifier.Driver(compiler, null, false);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        if (runTypeCheckAfterProcessing && typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = null;\n      if (expected != null) {\n        expectedRoot = parseExpectedJs(expected);\n        expectedRoot.detachFromParent();\n      }\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      // If we ran normalize on the AST, we must also run normalize on the\n      // clone before checking for changes.\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be changed by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called.\"\n            + \"\\nOriginal: \" + mainRootClone.toStringTree()\n            + \"\\nNew: \" + mainRoot.toStringTree(), hasCodeChanged);\n      }\n\n      // Check correctness of the changed-scopes-only traversal\n      NodeUtil.verifyScopeChanges(mtoc, mainRoot, false, compiler);\n\n      if (expected != null) {\n        if (compareAsTree) {\n          String explanation = expectedRoot.checkTreeEquals(mainRoot);\n          assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n              \"\\nResult: \" + compiler.toSource(mainRoot) +\n              \"\\n\" + explanation, explanation);\n        } else if (expected != null) {\n          assertEquals(\n              Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n        }\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone =\n          normalizeCheckRootClone.getFirstChild();\n      Node normalizeCheckMainRootClone = normalizeCheckRootClone.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (Closure primitive rewrites, etc) runs before the Normalize pass,\n      // so this can't be force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 770,
        "end_line": 1013,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 773,col 5)-(line 773,col 51)",
            "(line 774,col 5)-(line 774,col 44)",
            "(line 776,col 5)-(line 776,col 39)",
            "(line 777,col 5)-(line 778,col 66)",
            "(line 779,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 787,col 5)",
            "(line 788,col 5)-(line 788,col 44)",
            "(line 789,col 5)-(line 789,col 40)",
            "(line 792,col 5)-(line 792,col 38)",
            "(line 793,col 5)-(line 793,col 54)",
            "(line 794,col 5)-(line 794,col 50)",
            "(line 795,col 5)-(line 795,col 76)",
            "(line 797,col 5)-(line 797,col 45)",
            "(line 798,col 5)-(line 798,col 68)",
            "(line 799,col 5)-(line 799,col 34)",
            "(line 800,col 5)-(line 800,col 59)",
            "(line 801,col 5)-(line 801,col 35)",
            "(line 803,col 5)-(line 804,col 39)",
            "(line 806,col 5)-(line 868,col 5)",
            "(line 870,col 5)-(line 1012,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 1015,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 57)",
            "(line 1018,col 5)-(line 1018,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < expected.length; i++) {\n      inputs.add(SourceFile.fromCode(\"expected\" + i, expected[i]));\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 1024,
        "end_line": 1042,
        "comment": "\n   * Parses expected JS inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 41)",
            "(line 1026,col 5)-(line 1026,col 51)",
            "(line 1027,col 5)-(line 1029,col 5)",
            "(line 1030,col 5)-(line 1030,col 55)",
            "(line 1031,col 5)-(line 1031,col 39)",
            "(line 1032,col 5)-(line 1033,col 66)",
            "(line 1034,col 5)-(line 1034,col 44)",
            "(line 1035,col 5)-(line 1035,col 42)",
            "(line 1037,col 5)-(line 1040,col 5)",
            "(line 1041,col 5)-(line 1041,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String input, String expectedExtern) {\n    testExternChanges(\"\", input, expectedExtern);\n  }\n",
        "begin_line": 1044,
        "end_line": 1047,
        "comment": "",
        "child_ranges": [
            "(line 1046,col 5)-(line 1046,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testExternChanges(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  protected void testExternChanges(\n      String extern, String input, String expectedExtern) {\n    Compiler compiler = createCompiler();\n    CompilerOptions options = getOptions();\n    compiler.init(\n        ImmutableList.of(SourceFile.fromCode(\"extern\", extern)),\n        ImmutableList.of(SourceFile.fromCode(\"input\", input)),\n        options);\n    compiler.parseInputs();\n    assertFalse(compiler.hasErrors());\n\n    Node externsAndJs = compiler.getRoot();\n    Node root = externsAndJs.getLastChild();\n\n    Node externs = externsAndJs.getFirstChild();\n\n    Node expected = compiler.parseTestCode(expectedExtern);\n    assertFalse(compiler.hasErrors());\n\n    (getProcessor(compiler)).process(externs, root);\n\n    String externsCode = compiler.toSource(externs);\n    String expectedCode = compiler.toSource(expected);\n\n    assertEquals(expectedCode, externsCode);\n  }\n",
        "begin_line": 1049,
        "end_line": 1074,
        "comment": "",
        "child_ranges": [
            "(line 1051,col 5)-(line 1051,col 41)",
            "(line 1052,col 5)-(line 1052,col 43)",
            "(line 1053,col 5)-(line 1056,col 17)",
            "(line 1057,col 5)-(line 1057,col 27)",
            "(line 1058,col 5)-(line 1058,col 38)",
            "(line 1060,col 5)-(line 1060,col 43)",
            "(line 1061,col 5)-(line 1061,col 44)",
            "(line 1063,col 5)-(line 1063,col 48)",
            "(line 1065,col 5)-(line 1065,col 59)",
            "(line 1066,col 5)-(line 1066,col 38)",
            "(line 1068,col 5)-(line 1068,col 52)",
            "(line 1070,col 5)-(line 1070,col 52)",
            "(line 1071,col 5)-(line 1071,col 54)",
            "(line 1073,col 5)-(line 1073,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 5)-(line 1077,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1084,
        "end_line": 1090,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 1085,col 5)-(line 1085,col 47)",
            "(line 1086,col 5)-(line 1088,col 5)",
            "(line 1089,col 5)-(line 1089,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1096,
        "end_line": 1102,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 1097,col 5)-(line 1097,col 47)",
            "(line 1098,col 5)-(line 1100,col 5)",
            "(line 1101,col 5)-(line 1101,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1109,
        "end_line": 1116,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 1110,col 5)-(line 1110,col 48)",
            "(line 1111,col 5)-(line 1111,col 47)",
            "(line 1112,col 5)-(line 1114,col 5)",
            "(line 1115,col 5)-(line 1115,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 1123,
        "end_line": 1129,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 47)",
            "(line 1125,col 5)-(line 1127,col 5)",
            "(line 1128,col 5)-(line 1128,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(SourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1135,
        "end_line": 1142,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1136,col 5)-(line 1136,col 53)",
            "(line 1137,col 5)-(line 1140,col 5)",
            "(line 1141,col 5)-(line 1141,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1145,
        "end_line": 1147,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 7)-(line 1146,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1149,
        "end_line": 1150,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1152,
        "end_line": 1153,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1156,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1157,col 5)-(line 1157,col 39)",
            "(line 1158,col 5)-(line 1158,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1161,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 5)-(line 1162,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1166,
        "end_line": 1178,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1167,col 5)-(line 1167,col 52)",
            "(line 1168,col 5)-(line 1176,col 39)",
            "(line 1177,col 5)-(line 1177,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.NameAnalyzerTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-a6d53823-ec86-4610-97f4-07eb5b25aa0a.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1170,
        "end_line": 1174,
        "comment": "",
        "child_ranges": [
            "(line 1171,col 13)-(line 1173,col 13)"
        ]
    }
]