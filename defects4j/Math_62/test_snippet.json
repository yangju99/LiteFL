[
    {
        "class_name": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testSinMin()",
        "snippet": "    @Test\n    public void testSinMin() throws MathException {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-10, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(44428400075l);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 10, g);\n        optimizer.optimize(f, GoalType.MINIMIZE, -100.0, 100.0);\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 1; i < optima.length; ++i) {\n            double d = (optima[i].getPoint() - optima[i-1].getPoint()) / (2 * FastMath.PI);\n            assertTrue (FastMath.abs(d - FastMath.rint(d)) < 1.0e-8);\n            assertEquals(-1.0, f.value(optima[i].getPoint()), 1.0e-10);\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1.0e-10);\n        }\n        assertTrue(optimizer.getEvaluations() > 200);\n        assertTrue(optimizer.getEvaluations() < 300);\n    }\n",
        "begin_line": 36,
        "end_line": 55,
        "comment": "",
        "child_ranges": [
            "(line 38,col 9)-(line 38,col 53)",
            "(line 39,col 9)-(line 39,col 78)",
            "(line 40,col 9)-(line 40,col 42)",
            "(line 41,col 9)-(line 41,col 56)",
            "(line 42,col 9)-(line 42,col 32)",
            "(line 43,col 9)-(line 44,col 69)",
            "(line 45,col 9)-(line 45,col 64)",
            "(line 46,col 9)-(line 46,col 70)",
            "(line 47,col 9)-(line 52,col 9)",
            "(line 53,col 9)-(line 53,col 53)",
            "(line 54,col 9)-(line 54,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java",
        "signature": "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest.testQuinticMin()",
        "snippet": "    @Test\n    public void testQuinticMin() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);\n        assertTrue(optimizer.getEvaluations() <= 100);\n    }\n",
        "begin_line": 57,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 61,col 9)-(line 61,col 57)",
            "(line 62,col 9)-(line 62,col 77)",
            "(line 63,col 9)-(line 63,col 42)",
            "(line 64,col 9)-(line 64,col 56)",
            "(line 65,col 9)-(line 65,col 31)",
            "(line 66,col 9)-(line 67,col 68)",
            "(line 69,col 9)-(line 70,col 67)",
            "(line 71,col 9)-(line 71,col 62)",
            "(line 72,col 9)-(line 72,col 62)",
            "(line 74,col 9)-(line 74,col 70)",
            "(line 75,col 9)-(line 77,col 9)",
            "(line 78,col 9)-(line 78,col 53)",
            "(line 79,col 9)-(line 79,col 54)"
        ]
    }
]