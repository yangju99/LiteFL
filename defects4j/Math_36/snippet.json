[
    {
        "name": "BigFraction.floatValue#730",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "signature": "org.apache.commons.math.fraction.BigFraction.floatValue()",
        "snippet": "    @Override\n    public float floatValue() {\n        float result = numerator.floatValue() / denominator.floatValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }\n",
        "begin_line": 730,
        "end_line": 736,
        "comment": "\n     * <p>\n     * Gets the fraction as a <tt>float</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>float</tt>.\n     * @see java.lang.Number#floatValue()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.checkNotNull#241",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "class_name": "org.apache.commons.math.util.MathUtils",
        "signature": "org.apache.commons.math.util.MathUtils.checkNotNull(java.lang.Object, org.apache.commons.math.exception.util.Localizable, java.lang.Object...)",
        "snippet": "    public static void checkNotNull(Object o,\n                                    Localizable pattern,\n                                    Object ... args) {\n        if (o == null) {\n            throw new NullArgumentException(pattern, args);\n        }\n    }\n",
        "begin_line": 241,
        "end_line": 247,
        "comment": "\n     * Checks that an object is not null.\n     *\n     * @param o Object to be checked.\n     * @param pattern Message pattern.\n     * @param args Arguments to replace the placeholders in {@code pattern}.\n     * @throws NullArgumentException if {@code o} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 2
    },
    {
        "name": "BigFraction.BigFraction#119",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "signature": "org.apache.commons.math.fraction.BigFraction.BigFraction(java.math.BigInteger, java.math.BigInteger)",
        "snippet": "    public BigFraction(BigInteger num, BigInteger den) {\n        MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);\n        MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);\n        if (BigInteger.ZERO.equals(den)) {\n            throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);\n        }\n        if (BigInteger.ZERO.equals(num)) {\n            numerator   = BigInteger.ZERO;\n            denominator = BigInteger.ONE;\n        } else {\n\n            // reduce numerator and denominator by greatest common denominator\n            final BigInteger gcd = num.gcd(den);\n            if (BigInteger.ONE.compareTo(gcd) < 0) {\n                num = num.divide(gcd);\n                den = den.divide(gcd);\n            }\n\n            // move sign to numerator\n            if (BigInteger.ZERO.compareTo(den) > 0) {\n                num = num.negate();\n                den = den.negate();\n            }\n\n            // store the values in the final fields\n            numerator   = num;\n            denominator = den;\n\n        }\n    }\n",
        "begin_line": 119,
        "end_line": 148,
        "comment": "\n     * Create a {@link BigFraction} given the numerator and denominator as\n     * {@code BigInteger}. The {@link BigFraction} is reduced to lowest terms.\n     *\n     * @param num the numerator, must not be {@code null}.\n     * @param den the denominator, must not be {@code null}.\n     * @throws ZeroException if the denominator is zero.\n     * @throws NullArgumentException if either of the arguments is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 2
    },
    {
        "name": "BigFraction.BigFraction#365",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "signature": "org.apache.commons.math.fraction.BigFraction.BigFraction(int)",
        "snippet": "    public BigFraction(final int num) {\n        this(BigInteger.valueOf(num), BigInteger.ONE);\n    }\n",
        "begin_line": 365,
        "end_line": 367,
        "comment": "\n     * <p>\n     * Create a {@link BigFraction} equivalent to the passed <tt>int</tt>, ie\n     * \"num / 1\".\n     * </p>\n     *\n     * @param num\n     *            the numerator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 2
    },
    {
        "name": "BigFraction.BigFraction#380",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "signature": "org.apache.commons.math.fraction.BigFraction.BigFraction(int, int)",
        "snippet": "    public BigFraction(final int num, final int den) {\n        this(BigInteger.valueOf(num), BigInteger.valueOf(den));\n    }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "\n     * <p>\n     * Create a {@link BigFraction} given the numerator and denominator as simple\n     * <tt>int</tt>. The {@link BigFraction} is reduced to lowest terms.\n     * </p>\n     *\n     * @param num\n     *            the numerator.\n     * @param den\n     *            the denominator.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1622
        },
        "num_failing_tests": 2
    },
    {
        "name": "LocalizedFormats.LocalizedFormats#370",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/exception/util/LocalizedFormats.java",
        "class_name": "org.apache.commons.math.exception.util.LocalizedFormats",
        "signature": "org.apache.commons.math.exception.util.LocalizedFormats.LocalizedFormats(java.lang.String)",
        "snippet": "    private LocalizedFormats(final String sourceFormat) {\n        this.sourceFormat = sourceFormat;\n    }\n",
        "begin_line": 370,
        "end_line": 372,
        "comment": " Simple constructor.\n     * @param sourceFormat source English format to use when no\n     * localized version is available\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1516
        },
        "num_failing_tests": 2
    },
    {
        "name": "BigFraction.doubleValue#683",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/fraction/BigFraction.java",
        "class_name": "org.apache.commons.math.fraction.BigFraction",
        "signature": "org.apache.commons.math.fraction.BigFraction.doubleValue()",
        "snippet": "    @Override\n    public double doubleValue() {\n        double result = numerator.doubleValue() / denominator.doubleValue();\n            // Numerator and/or denominator must be out of range:\n            // Calculate how far to shift them to put them in range.\n        return result;\n    }\n",
        "begin_line": 683,
        "end_line": 689,
        "comment": "\n     * <p>\n     * Gets the fraction as a <tt>double</tt>. This calculates the fraction as\n     * the numerator divided by denominator.\n     * </p>\n     *\n     * @return the fraction as a <tt>double</tt>\n     * @see java.lang.Number#doubleValue()\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1132
        },
        "num_failing_tests": 1
    }
]