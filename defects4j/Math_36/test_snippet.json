[
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.assertFraction(int, int, org.apache.commons.math.fraction.BigFraction)",
        "snippet": "    private void assertFraction(int expectedNumerator, int expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsInt());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsInt());\n    }\n",
        "begin_line": 33,
        "end_line": 36,
        "comment": "",
        "child_ranges": [
            "(line 34,col 9)-(line 34,col 75)",
            "(line 35,col 9)-(line 35,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.assertFraction(long, long, org.apache.commons.math.fraction.BigFraction)",
        "snippet": "    private void assertFraction(long expectedNumerator, long expectedDenominator, BigFraction actual) {\n        Assert.assertEquals(expectedNumerator, actual.getNumeratorAsLong());\n        Assert.assertEquals(expectedDenominator, actual.getDenominatorAsLong());\n    }\n",
        "begin_line": 38,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 76)",
            "(line 40,col 9)-(line 40,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() throws Exception {\n        assertFraction(0, 1, new BigFraction(0, 1));\n        assertFraction(0, 1, new BigFraction(0l, 2l));\n        assertFraction(0, 1, new BigFraction(0, -1));\n        assertFraction(1, 2, new BigFraction(1, 2));\n        assertFraction(1, 2, new BigFraction(2, 4));\n        assertFraction(-1, 2, new BigFraction(-1, 2));\n        assertFraction(-1, 2, new BigFraction(1, -2));\n        assertFraction(-1, 2, new BigFraction(-2, 4));\n        assertFraction(-1, 2, new BigFraction(2, -4));\n        assertFraction(11, 1, new BigFraction(11));\n        assertFraction(11, 1, new BigFraction(11l));\n        assertFraction(11, 1, new BigFraction(new BigInteger(\"11\")));\n\n        assertFraction(0, 1, new BigFraction(0.00000000000001, 1.0e-5, 100));\n        assertFraction(2, 5, new BigFraction(0.40000000000001, 1.0e-5, 100));\n        assertFraction(15, 1, new BigFraction(15.0000000000001, 1.0e-5, 100));\n\n        Assert.assertEquals(0.00000000000001, new BigFraction(0.00000000000001).doubleValue(), 0.0);\n        Assert.assertEquals(0.40000000000001, new BigFraction(0.40000000000001).doubleValue(), 0.0);\n        Assert.assertEquals(15.0000000000001, new BigFraction(15.0000000000001).doubleValue(), 0.0);\n        assertFraction(3602879701896487l, 9007199254740992l, new BigFraction(0.40000000000001));\n        assertFraction(1055531162664967l, 70368744177664l, new BigFraction(15.0000000000001));\n        try {\n            new BigFraction(null, BigInteger.ONE);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException npe) {\n            // expected\n        }\n        try {\n            new BigFraction(BigInteger.ONE, null);\n            Assert.fail(\"Expecting NullArgumentException\");\n        } catch (NullArgumentException npe) {\n            // expected\n        }\n        try {\n            new BigFraction(BigInteger.ONE, BigInteger.ZERO);\n            Assert.fail(\"Expecting ZeroException\");\n        } catch (ZeroException npe) {\n            // expected\n        }\n        try {\n            new BigFraction(2.0 * Integer.MAX_VALUE, 1.0e-5, 100000);\n            Assert.fail(\"Expecting FractionConversionException\");\n        } catch (FractionConversionException fce) {\n            // expected\n        }\n    }\n",
        "begin_line": 43,
        "end_line": 91,
        "comment": "",
        "child_ranges": [
            "(line 45,col 9)-(line 45,col 52)",
            "(line 46,col 9)-(line 46,col 54)",
            "(line 47,col 9)-(line 47,col 53)",
            "(line 48,col 9)-(line 48,col 52)",
            "(line 49,col 9)-(line 49,col 52)",
            "(line 50,col 9)-(line 50,col 54)",
            "(line 51,col 9)-(line 51,col 54)",
            "(line 52,col 9)-(line 52,col 54)",
            "(line 53,col 9)-(line 53,col 54)",
            "(line 54,col 9)-(line 54,col 51)",
            "(line 55,col 9)-(line 55,col 52)",
            "(line 56,col 9)-(line 56,col 69)",
            "(line 58,col 9)-(line 58,col 77)",
            "(line 59,col 9)-(line 59,col 77)",
            "(line 60,col 9)-(line 60,col 78)",
            "(line 62,col 9)-(line 62,col 100)",
            "(line 63,col 9)-(line 63,col 100)",
            "(line 64,col 9)-(line 64,col 100)",
            "(line 65,col 9)-(line 65,col 96)",
            "(line 66,col 9)-(line 66,col 94)",
            "(line 67,col 9)-(line 72,col 9)",
            "(line 73,col 9)-(line 78,col 9)",
            "(line 79,col 9)-(line 84,col 9)",
            "(line 85,col 9)-(line 90,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testGoldenRatio()",
        "snippet": "    @Test(expected=ConvergenceException.class)\n    public void testGoldenRatio() {\n        // the golden ratio is notoriously a difficult number for continuous fraction\n        new BigFraction((1 + FastMath.sqrt(5)) / 2, 1.0e-12, 25);\n    }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testDoubleConstructor()",
        "snippet": "    @Test\n    public void testDoubleConstructor() throws ConvergenceException {\n        assertFraction(1, 2, new BigFraction((double) 1 / (double) 2, 1.0e-5, 100));\n        assertFraction(1, 3, new BigFraction((double) 1 / (double) 3, 1.0e-5, 100));\n        assertFraction(2, 3, new BigFraction((double) 2 / (double) 3, 1.0e-5, 100));\n        assertFraction(1, 4, new BigFraction((double) 1 / (double) 4, 1.0e-5, 100));\n        assertFraction(3, 4, new BigFraction((double) 3 / (double) 4, 1.0e-5, 100));\n        assertFraction(1, 5, new BigFraction((double) 1 / (double) 5, 1.0e-5, 100));\n        assertFraction(2, 5, new BigFraction((double) 2 / (double) 5, 1.0e-5, 100));\n        assertFraction(3, 5, new BigFraction((double) 3 / (double) 5, 1.0e-5, 100));\n        assertFraction(4, 5, new BigFraction((double) 4 / (double) 5, 1.0e-5, 100));\n        assertFraction(1, 6, new BigFraction((double) 1 / (double) 6, 1.0e-5, 100));\n        assertFraction(5, 6, new BigFraction((double) 5 / (double) 6, 1.0e-5, 100));\n        assertFraction(1, 7, new BigFraction((double) 1 / (double) 7, 1.0e-5, 100));\n        assertFraction(2, 7, new BigFraction((double) 2 / (double) 7, 1.0e-5, 100));\n        assertFraction(3, 7, new BigFraction((double) 3 / (double) 7, 1.0e-5, 100));\n        assertFraction(4, 7, new BigFraction((double) 4 / (double) 7, 1.0e-5, 100));\n        assertFraction(5, 7, new BigFraction((double) 5 / (double) 7, 1.0e-5, 100));\n        assertFraction(6, 7, new BigFraction((double) 6 / (double) 7, 1.0e-5, 100));\n        assertFraction(1, 8, new BigFraction((double) 1 / (double) 8, 1.0e-5, 100));\n        assertFraction(3, 8, new BigFraction((double) 3 / (double) 8, 1.0e-5, 100));\n        assertFraction(5, 8, new BigFraction((double) 5 / (double) 8, 1.0e-5, 100));\n        assertFraction(7, 8, new BigFraction((double) 7 / (double) 8, 1.0e-5, 100));\n        assertFraction(1, 9, new BigFraction((double) 1 / (double) 9, 1.0e-5, 100));\n        assertFraction(2, 9, new BigFraction((double) 2 / (double) 9, 1.0e-5, 100));\n        assertFraction(4, 9, new BigFraction((double) 4 / (double) 9, 1.0e-5, 100));\n        assertFraction(5, 9, new BigFraction((double) 5 / (double) 9, 1.0e-5, 100));\n        assertFraction(7, 9, new BigFraction((double) 7 / (double) 9, 1.0e-5, 100));\n        assertFraction(8, 9, new BigFraction((double) 8 / (double) 9, 1.0e-5, 100));\n        assertFraction(1, 10, new BigFraction((double) 1 / (double) 10, 1.0e-5, 100));\n        assertFraction(3, 10, new BigFraction((double) 3 / (double) 10, 1.0e-5, 100));\n        assertFraction(7, 10, new BigFraction((double) 7 / (double) 10, 1.0e-5, 100));\n        assertFraction(9, 10, new BigFraction((double) 9 / (double) 10, 1.0e-5, 100));\n        assertFraction(1, 11, new BigFraction((double) 1 / (double) 11, 1.0e-5, 100));\n        assertFraction(2, 11, new BigFraction((double) 2 / (double) 11, 1.0e-5, 100));\n        assertFraction(3, 11, new BigFraction((double) 3 / (double) 11, 1.0e-5, 100));\n        assertFraction(4, 11, new BigFraction((double) 4 / (double) 11, 1.0e-5, 100));\n        assertFraction(5, 11, new BigFraction((double) 5 / (double) 11, 1.0e-5, 100));\n        assertFraction(6, 11, new BigFraction((double) 6 / (double) 11, 1.0e-5, 100));\n        assertFraction(7, 11, new BigFraction((double) 7 / (double) 11, 1.0e-5, 100));\n        assertFraction(8, 11, new BigFraction((double) 8 / (double) 11, 1.0e-5, 100));\n        assertFraction(9, 11, new BigFraction((double) 9 / (double) 11, 1.0e-5, 100));\n        assertFraction(10, 11, new BigFraction((double) 10 / (double) 11, 1.0e-5, 100));\n    }\n",
        "begin_line": 100,
        "end_line": 143,
        "comment": " MATH-179",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 84)",
            "(line 103,col 9)-(line 103,col 84)",
            "(line 104,col 9)-(line 104,col 84)",
            "(line 105,col 9)-(line 105,col 84)",
            "(line 106,col 9)-(line 106,col 84)",
            "(line 107,col 9)-(line 107,col 84)",
            "(line 108,col 9)-(line 108,col 84)",
            "(line 109,col 9)-(line 109,col 84)",
            "(line 110,col 9)-(line 110,col 84)",
            "(line 111,col 9)-(line 111,col 84)",
            "(line 112,col 9)-(line 112,col 84)",
            "(line 113,col 9)-(line 113,col 84)",
            "(line 114,col 9)-(line 114,col 84)",
            "(line 115,col 9)-(line 115,col 84)",
            "(line 116,col 9)-(line 116,col 84)",
            "(line 117,col 9)-(line 117,col 84)",
            "(line 118,col 9)-(line 118,col 84)",
            "(line 119,col 9)-(line 119,col 84)",
            "(line 120,col 9)-(line 120,col 84)",
            "(line 121,col 9)-(line 121,col 84)",
            "(line 122,col 9)-(line 122,col 84)",
            "(line 123,col 9)-(line 123,col 84)",
            "(line 124,col 9)-(line 124,col 84)",
            "(line 125,col 9)-(line 125,col 84)",
            "(line 126,col 9)-(line 126,col 84)",
            "(line 127,col 9)-(line 127,col 84)",
            "(line 128,col 9)-(line 128,col 84)",
            "(line 129,col 9)-(line 129,col 86)",
            "(line 130,col 9)-(line 130,col 86)",
            "(line 131,col 9)-(line 131,col 86)",
            "(line 132,col 9)-(line 132,col 86)",
            "(line 133,col 9)-(line 133,col 86)",
            "(line 134,col 9)-(line 134,col 86)",
            "(line 135,col 9)-(line 135,col 86)",
            "(line 136,col 9)-(line 136,col 86)",
            "(line 137,col 9)-(line 137,col 86)",
            "(line 138,col 9)-(line 138,col 86)",
            "(line 139,col 9)-(line 139,col 86)",
            "(line 140,col 9)-(line 140,col 86)",
            "(line 141,col 9)-(line 141,col 86)",
            "(line 142,col 9)-(line 142,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testDigitLimitConstructor()",
        "snippet": "    @Test\n    public void testDigitLimitConstructor() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 9));\n        assertFraction(2, 5, new BigFraction(0.4, 99));\n        assertFraction(2, 5, new BigFraction(0.4, 999));\n\n        assertFraction(3, 5, new BigFraction(0.6152, 9));\n        assertFraction(8, 13, new BigFraction(0.6152, 99));\n        assertFraction(510, 829, new BigFraction(0.6152, 999));\n        assertFraction(769, 1250, new BigFraction(0.6152, 9999));\n    }\n",
        "begin_line": 146,
        "end_line": 156,
        "comment": " MATH-181",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 54)",
            "(line 149,col 9)-(line 149,col 55)",
            "(line 150,col 9)-(line 150,col 56)",
            "(line 152,col 9)-(line 152,col 57)",
            "(line 153,col 9)-(line 153,col 59)",
            "(line 154,col 9)-(line 154,col 63)",
            "(line 155,col 9)-(line 155,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testEpsilonLimitConstructor()",
        "snippet": "    @Test\n    public void testEpsilonLimitConstructor() throws ConvergenceException {\n        assertFraction(2, 5, new BigFraction(0.4, 1.0e-5, 100));\n\n        assertFraction(3, 5, new BigFraction(0.6152, 0.02, 100));\n        assertFraction(8, 13, new BigFraction(0.6152, 1.0e-3, 100));\n        assertFraction(251, 408, new BigFraction(0.6152, 1.0e-4, 100));\n        assertFraction(251, 408, new BigFraction(0.6152, 1.0e-5, 100));\n        assertFraction(510, 829, new BigFraction(0.6152, 1.0e-6, 100));\n        assertFraction(769, 1250, new BigFraction(0.6152, 1.0e-7, 100));\n    }\n",
        "begin_line": 158,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)",
            "(line 162,col 9)-(line 162,col 65)",
            "(line 163,col 9)-(line 163,col 68)",
            "(line 164,col 9)-(line 164,col 71)",
            "(line 165,col 9)-(line 165,col 71)",
            "(line 166,col 9)-(line 166,col 71)",
            "(line 167,col 9)-(line 167,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testCompareTo()",
        "snippet": "    @Test\n    public void testCompareTo() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(1, 3);\n        BigFraction third = new BigFraction(1, 2);\n\n        Assert.assertEquals(0, first.compareTo(first));\n        Assert.assertEquals(0, first.compareTo(third));\n        Assert.assertEquals(1, first.compareTo(second));\n        Assert.assertEquals(-1, second.compareTo(first));\n\n        // these two values are different approximations of PI\n        // the first  one is approximately PI - 3.07e-18\n        // the second one is approximately PI + 1.936e-17\n        BigFraction pi1 = new BigFraction(1068966896, 340262731);\n        BigFraction pi2 = new BigFraction( 411557987, 131002976);\n        Assert.assertEquals(-1, pi1.compareTo(pi2));\n        Assert.assertEquals( 1, pi2.compareTo(pi1));\n        Assert.assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);\n\n    }\n",
        "begin_line": 170,
        "end_line": 190,
        "comment": "",
        "child_ranges": [
            "(line 172,col 9)-(line 172,col 50)",
            "(line 173,col 9)-(line 173,col 51)",
            "(line 174,col 9)-(line 174,col 50)",
            "(line 176,col 9)-(line 176,col 55)",
            "(line 177,col 9)-(line 177,col 55)",
            "(line 178,col 9)-(line 178,col 56)",
            "(line 179,col 9)-(line 179,col 57)",
            "(line 184,col 9)-(line 184,col 65)",
            "(line 185,col 9)-(line 185,col 65)",
            "(line 186,col 9)-(line 186,col 52)",
            "(line 187,col 9)-(line 187,col 52)",
            "(line 188,col 9)-(line 188,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testDoubleValue()",
        "snippet": "    @Test\n    public void testDoubleValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(1, 3);\n\n        Assert.assertEquals(0.5, first.doubleValue(), 0.0);\n        Assert.assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);\n    }\n",
        "begin_line": 192,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 194,col 9)-(line 194,col 50)",
            "(line 195,col 9)-(line 195,col 51)",
            "(line 197,col 9)-(line 197,col 59)",
            "(line 198,col 9)-(line 198,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testDoubleValueForLargeNumeratorAndDenominator()",
        "snippet": "    @Test\n    public void testDoubleValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.doubleValue(), 1e-15);\n    }\n",
        "begin_line": 202,
        "end_line": 211,
        "comment": " MATH-744",
        "child_ranges": [
            "(line 204,col 9)-(line 204,col 58)",
            "(line 205,col 9)-(line 205,col 58)",
            "(line 206,col 9)-(line 206,col 51)",
            "(line 207,col 9)-(line 208,col 72)",
            "(line 210,col 9)-(line 210,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testFloatValueForLargeNumeratorAndDenominator()",
        "snippet": "    @Test\n    public void testFloatValueForLargeNumeratorAndDenominator() {\n        final BigInteger pow400 = BigInteger.TEN.pow(400);\n        final BigInteger pow401 = BigInteger.TEN.pow(401);\n        final BigInteger two = new BigInteger(\"2\");\n        final BigFraction large = new BigFraction(pow401.add(BigInteger.ONE),\n                                                  pow400.multiply(two));\n\n        Assert.assertEquals(5, large.floatValue(), 1e-15);\n    }\n",
        "begin_line": 214,
        "end_line": 223,
        "comment": " MATH-744",
        "child_ranges": [
            "(line 216,col 9)-(line 216,col 58)",
            "(line 217,col 9)-(line 217,col 58)",
            "(line 218,col 9)-(line 218,col 51)",
            "(line 219,col 9)-(line 220,col 72)",
            "(line 222,col 9)-(line 222,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testFloatValue()",
        "snippet": "    @Test\n    public void testFloatValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(1, 3);\n\n        Assert.assertEquals(0.5f, first.floatValue(), 0.0f);\n        Assert.assertEquals((float) (1.0 / 3.0), second.floatValue(), 0.0f);\n    }\n",
        "begin_line": 225,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 227,col 50)",
            "(line 228,col 9)-(line 228,col 51)",
            "(line 230,col 9)-(line 230,col 60)",
            "(line 231,col 9)-(line 231,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testIntValue()",
        "snippet": "    @Test\n    public void testIntValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(3, 2);\n\n        Assert.assertEquals(0, first.intValue());\n        Assert.assertEquals(1, second.intValue());\n    }\n",
        "begin_line": 234,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 236,col 9)-(line 236,col 50)",
            "(line 237,col 9)-(line 237,col 51)",
            "(line 239,col 9)-(line 239,col 49)",
            "(line 240,col 9)-(line 240,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testLongValue()",
        "snippet": "    @Test\n    public void testLongValue() {\n        BigFraction first = new BigFraction(1, 2);\n        BigFraction second = new BigFraction(3, 2);\n\n        Assert.assertEquals(0L, first.longValue());\n        Assert.assertEquals(1L, second.longValue());\n    }\n",
        "begin_line": 243,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 245,col 9)-(line 245,col 50)",
            "(line 246,col 9)-(line 246,col 51)",
            "(line 248,col 9)-(line 248,col 51)",
            "(line 249,col 9)-(line 249,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testConstructorDouble()",
        "snippet": "    @Test\n    public void testConstructorDouble() {\n        assertFraction(1, 2, new BigFraction(0.5));\n        assertFraction(6004799503160661l, 18014398509481984l, new BigFraction(1.0 / 3.0));\n        assertFraction(6124895493223875l, 36028797018963968l, new BigFraction(17.0 / 100.0));\n        assertFraction(1784551352345559l, 562949953421312l, new BigFraction(317.0 / 100.0));\n        assertFraction(-1, 2, new BigFraction(-0.5));\n        assertFraction(-6004799503160661l, 18014398509481984l, new BigFraction(-1.0 / 3.0));\n        assertFraction(-6124895493223875l, 36028797018963968l, new BigFraction(17.0 / -100.0));\n        assertFraction(-1784551352345559l, 562949953421312l, new BigFraction(-317.0 / 100.0));\n        for (double v : new double[] { Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY}) {\n            try {\n                new BigFraction(v);\n                Assert.fail(\"Expecting IllegalArgumentException\");\n            } catch (IllegalArgumentException iae) {\n                // expected\n            }\n        }\n        Assert.assertEquals(1l, new BigFraction(Double.MAX_VALUE).getDenominatorAsLong());\n        Assert.assertEquals(1l, new BigFraction(Double.longBitsToDouble(0x0010000000000000L)).getNumeratorAsLong());\n        Assert.assertEquals(1l, new BigFraction(Double.MIN_VALUE).getNumeratorAsLong());\n    }\n",
        "begin_line": 252,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 51)",
            "(line 255,col 9)-(line 255,col 90)",
            "(line 256,col 9)-(line 256,col 93)",
            "(line 257,col 9)-(line 257,col 92)",
            "(line 258,col 9)-(line 258,col 53)",
            "(line 259,col 9)-(line 259,col 92)",
            "(line 260,col 9)-(line 260,col 95)",
            "(line 261,col 9)-(line 261,col 94)",
            "(line 262,col 9)-(line 269,col 9)",
            "(line 270,col 9)-(line 270,col 90)",
            "(line 271,col 9)-(line 271,col 116)",
            "(line 272,col 9)-(line 272,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        BigFraction a = new BigFraction(10, 21);\n        BigFraction b = new BigFraction(-10, 21);\n        BigFraction c = new BigFraction(10, -21);\n\n        assertFraction(10, 21, a.abs());\n        assertFraction(10, 21, b.abs());\n        assertFraction(10, 21, c.abs());\n    }\n",
        "begin_line": 275,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 277,col 9)-(line 277,col 48)",
            "(line 278,col 9)-(line 278,col 49)",
            "(line 279,col 9)-(line 279,col 49)",
            "(line 281,col 9)-(line 281,col 40)",
            "(line 282,col 9)-(line 282,col 40)",
            "(line 283,col 9)-(line 283,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testReciprocal()",
        "snippet": "    @Test\n    public void testReciprocal() {\n        BigFraction f = null;\n\n        f = new BigFraction(50, 75);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumeratorAsInt());\n        Assert.assertEquals(2, f.getDenominatorAsInt());\n\n        f = new BigFraction(4, 3);\n        f = f.reciprocal();\n        Assert.assertEquals(3, f.getNumeratorAsInt());\n        Assert.assertEquals(4, f.getDenominatorAsInt());\n\n        f = new BigFraction(-15, 47);\n        f = f.reciprocal();\n        Assert.assertEquals(-47, f.getNumeratorAsInt());\n        Assert.assertEquals(15, f.getDenominatorAsInt());\n\n        f = new BigFraction(0, 3);\n        try {\n            f = f.reciprocal();\n            Assert.fail(\"expecting ZeroException\");\n        } catch (ZeroException ex) {\n        }\n\n        // large values\n        f = new BigFraction(Integer.MAX_VALUE, 1);\n        f = f.reciprocal();\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n    }\n",
        "begin_line": 286,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 288,col 9)-(line 288,col 29)",
            "(line 290,col 9)-(line 290,col 36)",
            "(line 291,col 9)-(line 291,col 27)",
            "(line 292,col 9)-(line 292,col 54)",
            "(line 293,col 9)-(line 293,col 56)",
            "(line 295,col 9)-(line 295,col 34)",
            "(line 296,col 9)-(line 296,col 27)",
            "(line 297,col 9)-(line 297,col 54)",
            "(line 298,col 9)-(line 298,col 56)",
            "(line 300,col 9)-(line 300,col 37)",
            "(line 301,col 9)-(line 301,col 27)",
            "(line 302,col 9)-(line 302,col 56)",
            "(line 303,col 9)-(line 303,col 57)",
            "(line 305,col 9)-(line 305,col 34)",
            "(line 306,col 9)-(line 310,col 9)",
            "(line 313,col 9)-(line 313,col 50)",
            "(line 314,col 9)-(line 314,col 27)",
            "(line 315,col 9)-(line 315,col 54)",
            "(line 316,col 9)-(line 316,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        BigFraction f = null;\n\n        f = new BigFraction(50, 75);\n        f = f.negate();\n        Assert.assertEquals(-2, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        f = new BigFraction(-50, 75);\n        f = f.negate();\n        Assert.assertEquals(2, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        // large values\n        f = new BigFraction(Integer.MAX_VALUE - 1, Integer.MAX_VALUE);\n        f = f.negate();\n        Assert.assertEquals(Integer.MIN_VALUE + 2, f.getNumeratorAsInt());\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n\n    }\n",
        "begin_line": 319,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 321,col 9)-(line 321,col 29)",
            "(line 323,col 9)-(line 323,col 36)",
            "(line 324,col 9)-(line 324,col 23)",
            "(line 325,col 9)-(line 325,col 55)",
            "(line 326,col 9)-(line 326,col 56)",
            "(line 328,col 9)-(line 328,col 37)",
            "(line 329,col 9)-(line 329,col 23)",
            "(line 330,col 9)-(line 330,col 54)",
            "(line 331,col 9)-(line 331,col 56)",
            "(line 334,col 9)-(line 334,col 70)",
            "(line 335,col 9)-(line 335,col 23)",
            "(line 336,col 9)-(line 336,col 74)",
            "(line 337,col 9)-(line 337,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(1, 1, a.add(a));\n        assertFraction(7, 6, a.add(b));\n        assertFraction(7, 6, b.add(a));\n        assertFraction(4, 3, b.add(b));\n\n        BigFraction f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        BigFraction f2 = BigFraction.ONE;\n        BigFraction f = f1.add(f2);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(-1, 13 * 13 * 2 * 2);\n        f2 = new BigFraction(-2, 13 * 17 * 2);\n        f = f1.add(f2);\n        Assert.assertEquals(13 * 13 * 17 * 2 * 2, f.getDenominatorAsInt());\n        Assert.assertEquals(-17 - 2 * 13 * 2, f.getNumeratorAsInt());\n\n        try {\n            f.add((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n        // if this fraction is added naively, it will overflow.\n        // check that it doesn't.\n        f1 = new BigFraction(1, 32768 * 3);\n        f2 = new BigFraction(1, 59049);\n        f = f1.add(f2);\n        Assert.assertEquals(52451, f.getNumeratorAsInt());\n        Assert.assertEquals(1934917632, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, 3);\n        f2 = new BigFraction(1, 3);\n        f = f1.add(f2);\n        Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        f = f1.add(BigInteger.ONE);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f.add(BigInteger.ZERO);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        f = f1.add(1);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f.add(0);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE - 1, 1);\n        f = f1.add(1l);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f.add(0l);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n    }\n",
        "begin_line": 341,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 46)",
            "(line 344,col 9)-(line 344,col 46)",
            "(line 346,col 9)-(line 346,col 39)",
            "(line 347,col 9)-(line 347,col 39)",
            "(line 348,col 9)-(line 348,col 39)",
            "(line 349,col 9)-(line 349,col 39)",
            "(line 351,col 9)-(line 351,col 67)",
            "(line 352,col 9)-(line 352,col 41)",
            "(line 353,col 9)-(line 353,col 35)",
            "(line 354,col 9)-(line 354,col 70)",
            "(line 355,col 9)-(line 355,col 56)",
            "(line 357,col 9)-(line 357,col 50)",
            "(line 358,col 9)-(line 358,col 46)",
            "(line 359,col 9)-(line 359,col 23)",
            "(line 360,col 9)-(line 360,col 75)",
            "(line 361,col 9)-(line 361,col 69)",
            "(line 363,col 9)-(line 367,col 9)",
            "(line 371,col 9)-(line 371,col 43)",
            "(line 372,col 9)-(line 372,col 39)",
            "(line 373,col 9)-(line 373,col 23)",
            "(line 374,col 9)-(line 374,col 58)",
            "(line 375,col 9)-(line 375,col 65)",
            "(line 377,col 9)-(line 377,col 51)",
            "(line 378,col 9)-(line 378,col 35)",
            "(line 379,col 9)-(line 379,col 23)",
            "(line 380,col 9)-(line 380,col 74)",
            "(line 381,col 9)-(line 381,col 56)",
            "(line 383,col 9)-(line 383,col 55)",
            "(line 384,col 9)-(line 384,col 35)",
            "(line 385,col 9)-(line 385,col 70)",
            "(line 386,col 9)-(line 386,col 56)",
            "(line 388,col 9)-(line 388,col 35)",
            "(line 389,col 9)-(line 389,col 70)",
            "(line 390,col 9)-(line 390,col 56)",
            "(line 392,col 9)-(line 392,col 55)",
            "(line 393,col 9)-(line 393,col 22)",
            "(line 394,col 9)-(line 394,col 70)",
            "(line 395,col 9)-(line 395,col 56)",
            "(line 397,col 9)-(line 397,col 21)",
            "(line 398,col 9)-(line 398,col 70)",
            "(line 399,col 9)-(line 399,col 56)",
            "(line 401,col 9)-(line 401,col 55)",
            "(line 402,col 9)-(line 402,col 23)",
            "(line 403,col 9)-(line 403,col 70)",
            "(line 404,col 9)-(line 404,col 56)",
            "(line 406,col 9)-(line 406,col 22)",
            "(line 407,col 9)-(line 407,col 70)",
            "(line 408,col 9)-(line 408,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(1, 1, a.divide(a));\n        assertFraction(3, 4, a.divide(b));\n        assertFraction(4, 3, b.divide(a));\n        assertFraction(1, 1, b.divide(b));\n\n        BigFraction f1 = new BigFraction(3, 5);\n        BigFraction f2 = BigFraction.ZERO;\n        try {\n            f1.divide(f2);\n            Assert.fail(\"expecting ArithmeticException\");\n        } catch (ZeroException ex) {\n        }\n\n        f1 = new BigFraction(0, 5);\n        f2 = new BigFraction(2, 7);\n        BigFraction f = f1.divide(f2);\n        Assert.assertSame(BigFraction.ZERO, f);\n\n        f1 = new BigFraction(2, 7);\n        f2 = BigFraction.ONE;\n        f = f1.divide(f2);\n        Assert.assertEquals(2, f.getNumeratorAsInt());\n        Assert.assertEquals(7, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f1);\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f2 = new BigFraction(1, Integer.MAX_VALUE);\n        f = f1.divide(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        try {\n            f.divide((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.divide(BigInteger.valueOf(Integer.MIN_VALUE));\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.divide(Integer.MIN_VALUE);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        f = f1.divide((long) Integer.MIN_VALUE);\n        Assert.assertEquals(Integer.MAX_VALUE, f.getDenominatorAsInt());\n        Assert.assertEquals(1, f.getNumeratorAsInt());\n\n    }\n",
        "begin_line": 412,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 414,col 46)",
            "(line 415,col 9)-(line 415,col 46)",
            "(line 417,col 9)-(line 417,col 42)",
            "(line 418,col 9)-(line 418,col 42)",
            "(line 419,col 9)-(line 419,col 42)",
            "(line 420,col 9)-(line 420,col 42)",
            "(line 422,col 9)-(line 422,col 47)",
            "(line 423,col 9)-(line 423,col 42)",
            "(line 424,col 9)-(line 428,col 9)",
            "(line 430,col 9)-(line 430,col 35)",
            "(line 431,col 9)-(line 431,col 35)",
            "(line 432,col 9)-(line 432,col 38)",
            "(line 433,col 9)-(line 433,col 47)",
            "(line 435,col 9)-(line 435,col 35)",
            "(line 436,col 9)-(line 436,col 29)",
            "(line 437,col 9)-(line 437,col 26)",
            "(line 438,col 9)-(line 438,col 54)",
            "(line 439,col 9)-(line 439,col 56)",
            "(line 441,col 9)-(line 441,col 51)",
            "(line 442,col 9)-(line 442,col 26)",
            "(line 443,col 9)-(line 443,col 54)",
            "(line 444,col 9)-(line 444,col 56)",
            "(line 446,col 9)-(line 446,col 67)",
            "(line 447,col 9)-(line 447,col 51)",
            "(line 448,col 9)-(line 448,col 26)",
            "(line 449,col 9)-(line 449,col 70)",
            "(line 450,col 9)-(line 450,col 56)",
            "(line 452,col 9)-(line 456,col 9)",
            "(line 458,col 9)-(line 458,col 67)",
            "(line 459,col 9)-(line 459,col 61)",
            "(line 460,col 9)-(line 460,col 72)",
            "(line 461,col 9)-(line 461,col 54)",
            "(line 463,col 9)-(line 463,col 67)",
            "(line 464,col 9)-(line 464,col 41)",
            "(line 465,col 9)-(line 465,col 72)",
            "(line 466,col 9)-(line 466,col 54)",
            "(line 468,col 9)-(line 468,col 67)",
            "(line 469,col 9)-(line 469,col 48)",
            "(line 470,col 9)-(line 470,col 72)",
            "(line 471,col 9)-(line 471,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(1, 4, a.multiply(a));\n        assertFraction(1, 3, a.multiply(b));\n        assertFraction(1, 3, b.multiply(a));\n        assertFraction(4, 9, b.multiply(b));\n\n        BigFraction f1 = new BigFraction(Integer.MAX_VALUE, 1);\n        BigFraction f2 = new BigFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n        BigFraction f = f1.multiply(f2);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f2.multiply(Integer.MAX_VALUE);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        f = f2.multiply((long) Integer.MAX_VALUE);\n        Assert.assertEquals(Integer.MIN_VALUE, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n        try {\n            f.multiply((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n    }\n",
        "begin_line": 475,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 477,col 9)-(line 477,col 46)",
            "(line 478,col 9)-(line 478,col 46)",
            "(line 480,col 9)-(line 480,col 44)",
            "(line 481,col 9)-(line 481,col 44)",
            "(line 482,col 9)-(line 482,col 44)",
            "(line 483,col 9)-(line 483,col 44)",
            "(line 485,col 9)-(line 485,col 63)",
            "(line 486,col 9)-(line 486,col 79)",
            "(line 487,col 9)-(line 487,col 40)",
            "(line 488,col 9)-(line 488,col 70)",
            "(line 489,col 9)-(line 489,col 56)",
            "(line 491,col 9)-(line 491,col 43)",
            "(line 492,col 9)-(line 492,col 70)",
            "(line 493,col 9)-(line 493,col 56)",
            "(line 495,col 9)-(line 495,col 50)",
            "(line 496,col 9)-(line 496,col 70)",
            "(line 497,col 9)-(line 497,col 56)",
            "(line 499,col 9)-(line 503,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        BigFraction a = new BigFraction(1, 2);\n        BigFraction b = new BigFraction(2, 3);\n\n        assertFraction(0, 1, a.subtract(a));\n        assertFraction(-1, 6, a.subtract(b));\n        assertFraction(1, 6, b.subtract(a));\n        assertFraction(0, 1, b.subtract(b));\n\n        BigFraction f = new BigFraction(1, 1);\n        try {\n            f.subtract((BigFraction) null);\n            Assert.fail(\"expecting NullArgumentException\");\n        } catch (NullArgumentException ex) {\n        }\n\n        // if this fraction is subtracted naively, it will overflow.\n        // check that it doesn't.\n        BigFraction f1 = new BigFraction(1, 32768 * 3);\n        BigFraction f2 = new BigFraction(1, 59049);\n        f = f1.subtract(f2);\n        Assert.assertEquals(-13085, f.getNumeratorAsInt());\n        Assert.assertEquals(1934917632, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MIN_VALUE, 3);\n        f2 = new BigFraction(1, 3).negate();\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MIN_VALUE + 1, f.getNumeratorAsInt());\n        Assert.assertEquals(3, f.getDenominatorAsInt());\n\n        f1 = new BigFraction(Integer.MAX_VALUE, 1);\n        f2 = BigFraction.ONE;\n        f = f1.subtract(f2);\n        Assert.assertEquals(Integer.MAX_VALUE - 1, f.getNumeratorAsInt());\n        Assert.assertEquals(1, f.getDenominatorAsInt());\n\n    }\n",
        "begin_line": 507,
        "end_line": 544,
        "comment": "",
        "child_ranges": [
            "(line 509,col 9)-(line 509,col 46)",
            "(line 510,col 9)-(line 510,col 46)",
            "(line 512,col 9)-(line 512,col 44)",
            "(line 513,col 9)-(line 513,col 45)",
            "(line 514,col 9)-(line 514,col 44)",
            "(line 515,col 9)-(line 515,col 44)",
            "(line 517,col 9)-(line 517,col 46)",
            "(line 518,col 9)-(line 522,col 9)",
            "(line 526,col 9)-(line 526,col 55)",
            "(line 527,col 9)-(line 527,col 51)",
            "(line 528,col 9)-(line 528,col 28)",
            "(line 529,col 9)-(line 529,col 59)",
            "(line 530,col 9)-(line 530,col 65)",
            "(line 532,col 9)-(line 532,col 51)",
            "(line 533,col 9)-(line 533,col 44)",
            "(line 534,col 9)-(line 534,col 28)",
            "(line 535,col 9)-(line 535,col 74)",
            "(line 536,col 9)-(line 536,col 56)",
            "(line 538,col 9)-(line 538,col 51)",
            "(line 539,col 9)-(line 539,col 29)",
            "(line 540,col 9)-(line 540,col 28)",
            "(line 541,col 9)-(line 541,col 74)",
            "(line 542,col 9)-(line 542,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testBigDecimalValue()",
        "snippet": "    @Test\n    public void testBigDecimalValue() {\n        Assert.assertEquals(new BigDecimal(0.5), new BigFraction(1, 2).bigDecimalValue());\n        Assert.assertEquals(new BigDecimal(\"0.0003\"), new BigFraction(3, 10000).bigDecimalValue());\n        Assert.assertEquals(new BigDecimal(\"0\"), new BigFraction(1, 3).bigDecimalValue(BigDecimal.ROUND_DOWN));\n        Assert.assertEquals(new BigDecimal(\"0.333\"), new BigFraction(1, 3).bigDecimalValue(3, BigDecimal.ROUND_DOWN));\n    }\n",
        "begin_line": 546,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 548,col 9)-(line 548,col 90)",
            "(line 549,col 9)-(line 549,col 99)",
            "(line 550,col 9)-(line 550,col 111)",
            "(line 551,col 9)-(line 551,col 118)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testEqualsAndHashCode()",
        "snippet": "    @Test\n    public void testEqualsAndHashCode() {\n        BigFraction zero = new BigFraction(0, 1);\n        BigFraction nullFraction = null;\n        Assert.assertTrue(zero.equals(zero));\n        Assert.assertFalse(zero.equals(nullFraction));\n        Assert.assertFalse(zero.equals(Double.valueOf(0)));\n        BigFraction zero2 = new BigFraction(0, 2);\n        Assert.assertTrue(zero.equals(zero2));\n        Assert.assertEquals(zero.hashCode(), zero2.hashCode());\n        BigFraction one = new BigFraction(1, 1);\n        Assert.assertFalse((one.equals(zero) || zero.equals(one)));\n        Assert.assertTrue(one.equals(BigFraction.ONE));\n    }\n",
        "begin_line": 554,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 556,col 9)-(line 556,col 49)",
            "(line 557,col 9)-(line 557,col 40)",
            "(line 558,col 9)-(line 558,col 45)",
            "(line 559,col 9)-(line 559,col 54)",
            "(line 560,col 9)-(line 560,col 59)",
            "(line 561,col 9)-(line 561,col 50)",
            "(line 562,col 9)-(line 562,col 46)",
            "(line 563,col 9)-(line 563,col 63)",
            "(line 564,col 9)-(line 564,col 48)",
            "(line 565,col 9)-(line 565,col 67)",
            "(line 566,col 9)-(line 566,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testGetReducedFraction()",
        "snippet": "    @Test\n    public void testGetReducedFraction() {\n        BigFraction threeFourths = new BigFraction(3, 4);\n        Assert.assertTrue(threeFourths.equals(BigFraction.getReducedFraction(6, 8)));\n        Assert.assertTrue(BigFraction.ZERO.equals(BigFraction.getReducedFraction(0, -1)));\n        try {\n            BigFraction.getReducedFraction(1, 0);\n            Assert.fail(\"expecting ZeroException\");\n        } catch (ZeroException ex) {\n            // expected\n        }\n        Assert.assertEquals(BigFraction.getReducedFraction(2, Integer.MIN_VALUE).getNumeratorAsInt(), -1);\n        Assert.assertEquals(BigFraction.getReducedFraction(1, -1).getNumeratorAsInt(), -1);\n    }\n",
        "begin_line": 569,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 571,col 9)-(line 571,col 57)",
            "(line 572,col 9)-(line 572,col 85)",
            "(line 573,col 9)-(line 573,col 90)",
            "(line 574,col 9)-(line 579,col 9)",
            "(line 580,col 9)-(line 580,col 106)",
            "(line 581,col 9)-(line 581,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testPercentage()",
        "snippet": "    @Test\n    public void testPercentage() {\n        Assert.assertEquals(50.0, new BigFraction(1, 2).percentageValue(), 1.0e-15);\n    }\n",
        "begin_line": 584,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 586,col 9)-(line 586,col 84)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testPow()",
        "snippet": "    @Test\n    public void testPow() {\n        Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13));\n        Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(13l));\n        Assert.assertEquals(new BigFraction(8192, 1594323), new BigFraction(2, 3).pow(BigInteger.valueOf(13l)));\n        Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0));\n        Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(0l));\n        Assert.assertEquals(BigFraction.ONE, new BigFraction(2, 3).pow(BigInteger.valueOf(0l)));\n        Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13));\n        Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(-13l));\n        Assert.assertEquals(new BigFraction(1594323, 8192), new BigFraction(2, 3).pow(BigInteger.valueOf(-13l)));\n    }\n",
        "begin_line": 589,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 591,col 9)-(line 591,col 91)",
            "(line 592,col 9)-(line 592,col 92)",
            "(line 593,col 9)-(line 593,col 112)",
            "(line 594,col 9)-(line 594,col 75)",
            "(line 595,col 9)-(line 595,col 76)",
            "(line 596,col 9)-(line 596,col 96)",
            "(line 597,col 9)-(line 597,col 92)",
            "(line 598,col 9)-(line 598,col 93)",
            "(line 599,col 9)-(line 599,col 113)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testMath340()",
        "snippet": "    @Test\n    public void testMath340() {\n        BigFraction fractionA = new BigFraction(0.00131);\n        BigFraction fractionB = new BigFraction(.37).reciprocal();\n        BigFraction errorResult = fractionA.multiply(fractionB);\n        BigFraction correctResult = new BigFraction(fractionA.getNumerator().multiply(fractionB.getNumerator()),\n                                                    fractionA.getDenominator().multiply(fractionB.getDenominator()));\n        Assert.assertEquals(correctResult, errorResult);\n    }\n",
        "begin_line": 602,
        "end_line": 610,
        "comment": "",
        "child_ranges": [
            "(line 604,col 9)-(line 604,col 57)",
            "(line 605,col 9)-(line 605,col 66)",
            "(line 606,col 9)-(line 606,col 64)",
            "(line 607,col 9)-(line 608,col 117)",
            "(line 609,col 9)-(line 609,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.fraction.BigFractionTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/fraction/BigFractionTest.java",
        "signature": "org.apache.commons.math.fraction.BigFractionTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() throws FractionConversionException {\n        BigFraction[] fractions = {\n            new BigFraction(3, 4), BigFraction.ONE, BigFraction.ZERO,\n            new BigFraction(17), new BigFraction(FastMath.PI, 1000),\n            new BigFraction(-5, 2)\n        };\n        for (BigFraction fraction : fractions) {\n            Assert.assertEquals(fraction, TestUtils.serializeAndRecover(fraction));\n        }\n    }\n",
        "begin_line": 612,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 614,col 9)-(line 618,col 10)",
            "(line 619,col 9)-(line 621,col 9)"
        ]
    }
]