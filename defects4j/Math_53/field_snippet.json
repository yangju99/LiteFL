[
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.I",
        "snippet": "    public static final Complex I = new Complex(0.0, 1.0);",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The square root of -1. A number representing \"0.0 + 1.0i\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.NaN",
        "snippet": "    public static final Complex NaN = new Complex(Double.NaN, Double.NaN);",
        "begin_line": 56,
        "end_line": 56,
        "comment": " A complex number representing \"NaN + NaNi\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.INF",
        "snippet": "    public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);",
        "begin_line": 60,
        "end_line": 60,
        "comment": " A complex number representing \"+INF + INFi\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.ONE",
        "snippet": "    public static final Complex ONE = new Complex(1.0, 0.0);",
        "begin_line": 63,
        "end_line": 63,
        "comment": " A complex number representing \"1.0 + 0.0i\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.ZERO",
        "snippet": "    public static final Complex ZERO = new Complex(0.0, 0.0);",
        "begin_line": 66,
        "end_line": 66,
        "comment": " A complex number representing \"0.0 + 0.0i\" "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6195664516687396620L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " Serializable version identifier "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.imaginary",
        "snippet": "    private final double imaginary;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The imaginary part. "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.real",
        "snippet": "    private final double real;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The real part. "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.isNaN",
        "snippet": "    private final transient boolean isNaN;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Record whether this complex number is equal to NaN. "
    },
    {
        "class_name": "org.apache.commons.math.complex.Complex",
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "signature": "org.apache.commons.math.complex.Complex.isInfinite",
        "snippet": "    private final transient boolean isInfinite;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Record whether this complex number is infinite. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.EPSILON",
        "snippet": "    public static final double EPSILON = 0x1.0p-53;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Smallest positive number such that 1 - EPSILON is not numerically equal to 1. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SAFE_MIN",
        "snippet": "    public static final double SAFE_MIN = 0x1.0p-1022;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Safe minimum, such that 1 / SAFE_MIN does not overflow.\n     * <p>In IEEE 754 arithmetic, this is also the smallest normalized\n     * number 2<sup>-1022</sup>.</p>\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.TWO_PI",
        "snippet": "    public static final double TWO_PI = 2 * FastMath.PI;",
        "begin_line": 58,
        "end_line": 58,
        "comment": "\n     * 2 &pi;.\n     * @since 2.1\n     "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NB",
        "snippet": "    private static final byte  NB = (byte)-1;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " -1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.NS",
        "snippet": "    private static final short NS = (short)-1;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " -1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PB",
        "snippet": "    private static final byte  PB = (byte)1;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " 1.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.PS",
        "snippet": "    private static final short PS = (short)1;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " 1.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZB",
        "snippet": "    private static final byte  ZB = (byte)0;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " 0.0 cast as a byte. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.ZS",
        "snippet": "    private static final short ZS = (short)0;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " 0.0 cast as a short. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SGN_MASK",
        "snippet": "    private static final long SGN_MASK = 0x8000000000000000L;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Offset to order signed double numbers lexicographically. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.SGN_MASK_FLOAT",
        "snippet": "    private static final int SGN_MASK_FLOAT = 0x80000000;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Offset to order signed double numbers lexicographically. "
    },
    {
        "class_name": "org.apache.commons.math.util.MathUtils",
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "signature": "org.apache.commons.math.util.MathUtils.FACTORIALS",
        "snippet": "    private static final long[] FACTORIALS = new long[] {\n                       1l,                  1l,                   2l,\n                       6l,                 24l,                 120l,\n                     720l,               5040l,               40320l,\n                  362880l,            3628800l,            39916800l,\n               479001600l,         6227020800l,         87178291200l,\n           1307674368000l,     20922789888000l,     355687428096000l,\n        6402373705728000l, 121645100408832000l, 2432902008176640000l };",
        "begin_line": 85,
        "end_line": 92,
        "comment": " All long-representable factorials "
    }
]