[
    {
        "name": "Complex.add#150",
        "is_bug": true,
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.add(org.apache.commons.math.complex.Complex)",
        "snippet": "    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n",
        "begin_line": 150,
        "end_line": 155,
        "comment": "\n     * Return the sum of this complex number and the given complex number.\n     * <p>\n     * Uses the definitional formula\n     * <pre>\n     * (a + bi) + (c + di) = (a+c) + (b+d)i\n     * </pre></p>\n     * <p>\n     * If either this or <code>rhs</code> has a NaN value in either part,\n     * {@link #NaN} is returned; otherwise Infinite and NaN values are\n     * returned in the parts of the result according to the rules for\n     * {@link java.lang.Double} arithmetic.</p>\n     *\n     * @param rhs the other complex number\n     * @return the complex number sum\n     * @throws NullArgumentException if <code>rhs</code> is null\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2236
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.isNaN#318",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.isNaN()",
        "snippet": "    public boolean isNaN() {\n        return isNaN;\n    }\n",
        "begin_line": 318,
        "end_line": 320,
        "comment": "\n     * Returns true if either or both parts of this complex number is NaN;\n     * false otherwise\n     *\n     * @return  true if either or both parts of this complex number is NaN;\n     * false otherwise\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2041
        },
        "num_failing_tests": 1
    },
    {
        "name": "MathUtils.checkNotNull#2329",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
        "class_name": "org.apache.commons.math.util.MathUtils",
        "signature": "org.apache.commons.math.util.MathUtils.checkNotNull(java.lang.Object)",
        "snippet": "    public static void checkNotNull(Object o)\n        throws NullArgumentException {\n        if (o == null) {\n            throw new NullArgumentException();\n        }\n    }\n",
        "begin_line": 2329,
        "end_line": 2334,
        "comment": "\n     * Checks that an object is not null.\n     *\n     * @param o Object to be checked.\n     * @throws NullArgumentException if {@code o} is {@code null}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1525
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.createComplex#996",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.createComplex(double, double)",
        "snippet": "    protected Complex createComplex(double realPart, double imaginaryPart) {\n        return new Complex(realPart, imaginaryPart);\n    }\n",
        "begin_line": 996,
        "end_line": 998,
        "comment": "\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param realPart the real part\n     * @param imaginaryPart the imaginary part\n     * @return a new complex number instance\n     * @since 1.2\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1195
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.getReal#307",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.getReal()",
        "snippet": "    public double getReal() {\n        return real;\n    }\n",
        "begin_line": 307,
        "end_line": 309,
        "comment": "\n     * Access the real part.\n     *\n     * @return the real part\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0985
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.getImaginary#298",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.getImaginary()",
        "snippet": "    public double getImaginary() {\n        return imaginary;\n    }\n",
        "begin_line": 298,
        "end_line": 300,
        "comment": "\n     * Access the imaginary part.\n     *\n     * @return the imaginary part\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0981
        },
        "num_failing_tests": 1
    },
    {
        "name": "Complex.Complex#89",
        "is_bug": false,
        "src_path": "src/main/java/org/apache/commons/math/complex/Complex.java",
        "class_name": "org.apache.commons.math.complex.Complex",
        "signature": "org.apache.commons.math.complex.Complex.Complex(double, double)",
        "snippet": "    public Complex(double real, double imaginary) {\n        super();\n        this.real = real;\n        this.imaginary = imaginary;\n\n        isNaN = Double.isNaN(real) || Double.isNaN(imaginary);\n        isInfinite = !isNaN &&\n        (Double.isInfinite(real) || Double.isInfinite(imaginary));\n    }\n",
        "begin_line": 89,
        "end_line": 97,
        "comment": "\n     * Create a complex number given the real and imaginary parts.\n     *\n     * @param real the real part\n     * @param imaginary the imaginary part\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0776
        },
        "num_failing_tests": 1
    }
]