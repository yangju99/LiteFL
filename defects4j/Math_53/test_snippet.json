[
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructor()",
        "snippet": "    @Test\n    public void testConstructor() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 58,
        "end_line": 63,
        "comment": "",
        "child_ranges": [
            "(line 60,col 9)-(line 60,col 42)",
            "(line 61,col 9)-(line 61,col 54)",
            "(line 62,col 9)-(line 62,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConstructorNaN()",
        "snippet": "    @Test\n    public void testConstructorNaN() {\n        Complex z = new Complex(3.0, Double.NaN);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(nan, 4.0);\n        Assert.assertTrue(z.isNaN());\n\n        z = new Complex(3.0, 4.0);\n        Assert.assertFalse(z.isNaN());\n    }\n",
        "begin_line": 65,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 49)",
            "(line 68,col 9)-(line 68,col 37)",
            "(line 70,col 9)-(line 70,col 34)",
            "(line 71,col 9)-(line 71,col 37)",
            "(line 73,col 9)-(line 73,col 34)",
            "(line 74,col 9)-(line 74,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbs()",
        "snippet": "    @Test\n    public void testAbs() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(5.0, z.abs(), 1.0e-5);\n    }\n",
        "begin_line": 77,
        "end_line": 81,
        "comment": "",
        "child_ranges": [
            "(line 79,col 9)-(line 79,col 42)",
            "(line 80,col 9)-(line 80,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsNaN()",
        "snippet": "    @Test\n    public void testAbsNaN() {\n        Assert.assertTrue(Double.isNaN(Complex.NaN.abs()));\n        Complex z = new Complex(inf, nan);\n        Assert.assertTrue(Double.isNaN(z.abs()));\n    }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 59)",
            "(line 86,col 9)-(line 86,col 42)",
            "(line 87,col 9)-(line 87,col 49)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAbsInfinite()",
        "snippet": "    @Test\n    public void testAbsInfinite() {\n        Complex z = new Complex(inf, 0);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n        z = new Complex(inf, neginf);\n        Assert.assertEquals(inf, z.abs(), 0);\n    }\n",
        "begin_line": 90,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 40)",
            "(line 93,col 9)-(line 93,col 45)",
            "(line 94,col 9)-(line 94,col 35)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 37)",
            "(line 97,col 9)-(line 97,col 45)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAdd()",
        "snippet": "    @Test\n    public void testAdd() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.add(y);\n        Assert.assertEquals(8.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(10.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 100,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 102,col 9)-(line 102,col 42)",
            "(line 103,col 9)-(line 103,col 42)",
            "(line 104,col 9)-(line 104,col 29)",
            "(line 105,col 9)-(line 105,col 54)",
            "(line 106,col 9)-(line 106,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddNaN()",
        "snippet": "    @Test\n    public void testAddNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.add(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n        z = new Complex(1, nan);\n        Complex w = x.add(z);\n        Assert.assertTrue(Double.isNaN(w.getReal()));\n        Assert.assertTrue(Double.isNaN(w.getImaginary()));\n    }\n",
        "begin_line": 109,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 42)",
            "(line 112,col 9)-(line 112,col 39)",
            "(line 113,col 9)-(line 113,col 37)",
            "(line 114,col 9)-(line 114,col 32)",
            "(line 115,col 9)-(line 115,col 29)",
            "(line 116,col 9)-(line 116,col 53)",
            "(line 117,col 9)-(line 117,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAddInfinite()",
        "snippet": "    @Test\n    public void testAddInfinite() {\n        Complex x = new Complex(1, 1);\n        Complex z = new Complex(inf, 0);\n        Complex w = x.add(z);\n        Assert.assertEquals(w.getImaginary(), 1, 0);\n        Assert.assertEquals(inf, w.getReal(), 0);\n\n        x = new Complex(neginf, 0);\n        Assert.assertTrue(Double.isNaN(x.add(z).getReal()));\n    }\n",
        "begin_line": 120,
        "end_line": 130,
        "comment": "",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 38)",
            "(line 123,col 9)-(line 123,col 40)",
            "(line 124,col 9)-(line 124,col 29)",
            "(line 125,col 9)-(line 125,col 52)",
            "(line 126,col 9)-(line 126,col 49)",
            "(line 128,col 9)-(line 128,col 35)",
            "(line 129,col 9)-(line 129,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugate()",
        "snippet": "    @Test\n    public void testConjugate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.conjugate();\n        Assert.assertEquals(3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 132,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 134,col 9)-(line 134,col 42)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 54)",
            "(line 137,col 9)-(line 137,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateNaN()",
        "snippet": "    @Test\n    public void testConjugateNaN() {\n        Complex z = Complex.NaN.conjugate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 140,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 44)",
            "(line 143,col 9)-(line 143,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testConjugateInfiinite()",
        "snippet": "    @Test\n    public void testConjugateInfiinite() {\n        Complex z = new Complex(0, inf);\n        Assert.assertEquals(neginf, z.conjugate().getImaginary(), 0);\n        z = new Complex(0, neginf);\n        Assert.assertEquals(inf, z.conjugate().getImaginary(), 0);\n    }\n",
        "begin_line": 146,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 148,col 9)-(line 148,col 40)",
            "(line 149,col 9)-(line 149,col 69)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivide()",
        "snippet": "    @Test\n    public void testDivide() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.divide(y);\n        Assert.assertEquals(39.0 / 61.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(2.0 / 61.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 154,
        "end_line": 161,
        "comment": "",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 42)",
            "(line 157,col 9)-(line 157,col 42)",
            "(line 158,col 9)-(line 158,col 32)",
            "(line 159,col 9)-(line 159,col 62)",
            "(line 160,col 9)-(line 160,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideReal()",
        "snippet": "    @Test\n    public void testDivideReal() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(2d, 0d);\n        Assert.assertEquals(new Complex(1d, 1.5), x.divide(y));\n\n    }\n",
        "begin_line": 163,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 40)",
            "(line 166,col 9)-(line 166,col 40)",
            "(line 167,col 9)-(line 167,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideImaginary()",
        "snippet": "    @Test\n    public void testDivideImaginary() {\n        Complex x = new Complex(2d, 3d);\n        Complex y = new Complex(0d, 2d);\n        Assert.assertEquals(new Complex(1.5d, -1d), x.divide(y));\n    }\n",
        "begin_line": 171,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 173,col 9)-(line 173,col 40)",
            "(line 174,col 9)-(line 174,col 40)",
            "(line 175,col 9)-(line 175,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideInfinite()",
        "snippet": "    @Test\n    public void testDivideInfinite() {\n        Complex x = new Complex(3, 4);\n        Complex w = new Complex(neginf, inf);\n        Assert.assertTrue(x.divide(w).equals(Complex.ZERO));\n\n        Complex z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertEquals(inf, z.getImaginary(), 0);\n\n        w = new Complex(inf, inf);\n        z = w.divide(x);\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n        Assert.assertEquals(inf, z.getReal(), 0);\n\n        w = new Complex(1, inf);\n        z = w.divide(w);\n        Assert.assertTrue(Double.isNaN(z.getReal()));\n        Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 178,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 38)",
            "(line 181,col 9)-(line 181,col 45)",
            "(line 182,col 9)-(line 182,col 60)",
            "(line 184,col 9)-(line 184,col 32)",
            "(line 185,col 9)-(line 185,col 53)",
            "(line 186,col 9)-(line 186,col 54)",
            "(line 188,col 9)-(line 188,col 34)",
            "(line 189,col 9)-(line 189,col 24)",
            "(line 190,col 9)-(line 190,col 58)",
            "(line 191,col 9)-(line 191,col 49)",
            "(line 193,col 9)-(line 193,col 32)",
            "(line 194,col 9)-(line 194,col 24)",
            "(line 195,col 9)-(line 195,col 53)",
            "(line 196,col 9)-(line 196,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideZero()",
        "snippet": "    @Test\n    public void testDivideZero() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.ZERO);\n        Assert.assertEquals(z, Complex.NaN);\n    }\n",
        "begin_line": 199,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 201,col 9)-(line 201,col 42)",
            "(line 202,col 9)-(line 202,col 43)",
            "(line 203,col 9)-(line 203,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaN()",
        "snippet": "    @Test\n    public void testDivideNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.divide(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 206,
        "end_line": 211,
        "comment": "",
        "child_ranges": [
            "(line 208,col 9)-(line 208,col 42)",
            "(line 209,col 9)-(line 209,col 42)",
            "(line 210,col 9)-(line 210,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testDivideNaNInf()",
        "snippet": "    @Test\n    public void testDivideNaNInf() {\n       Complex z = oneInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertEquals(inf, z.getImaginary(), 0);\n\n       z = negInfNegInf.divide(oneNaN);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n\n       z = negInfInf.divide(Complex.ONE);\n       Assert.assertTrue(Double.isNaN(z.getReal()));\n       Assert.assertTrue(Double.isNaN(z.getImaginary()));\n    }\n",
        "begin_line": 213,
        "end_line": 226,
        "comment": "",
        "child_ranges": [
            "(line 215,col 8)-(line 215,col 46)",
            "(line 216,col 8)-(line 216,col 52)",
            "(line 217,col 8)-(line 217,col 53)",
            "(line 219,col 8)-(line 219,col 39)",
            "(line 220,col 8)-(line 220,col 52)",
            "(line 221,col 8)-(line 221,col 57)",
            "(line 223,col 8)-(line 223,col 41)",
            "(line 224,col 8)-(line 224,col 52)",
            "(line 225,col 8)-(line 225,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiply()",
        "snippet": "    @Test\n    public void testMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.multiply(y);\n        Assert.assertEquals(-9.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(38.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 228,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 230,col 9)-(line 230,col 42)",
            "(line 231,col 9)-(line 231,col 42)",
            "(line 232,col 9)-(line 232,col 34)",
            "(line 233,col 9)-(line 233,col 55)",
            "(line 234,col 9)-(line 234,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaN()",
        "snippet": "    @Test\n    public void testMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.multiply(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 237,
        "end_line": 242,
        "comment": "",
        "child_ranges": [
            "(line 239,col 9)-(line 239,col 42)",
            "(line 240,col 9)-(line 240,col 44)",
            "(line 241,col 9)-(line 241,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMultiplyNaNInf()",
        "snippet": "    @Test\n    public void testMultiplyNaNInf() {\n        Complex z = new Complex(1,1);\n        Complex w = z.multiply(infOne);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        // [MATH-164]\n        Assert.assertTrue(new Complex( 1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex(-1,0).multiply(infInf).equals(Complex.INF));\n        Assert.assertTrue(new Complex( 1,0).multiply(negInfZero).equals(Complex.INF));\n\n        w = oneInf.multiply(oneNegInf);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        w = negInfNegInf.multiply(oneNaN);\n        Assert.assertTrue(Double.isNaN(w.getReal()));\n        Assert.assertTrue(Double.isNaN(w.getImaginary()));\n    }\n",
        "begin_line": 244,
        "end_line": 263,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 37)",
            "(line 247,col 9)-(line 247,col 39)",
            "(line 248,col 9)-(line 248,col 49)",
            "(line 249,col 9)-(line 249,col 54)",
            "(line 252,col 9)-(line 252,col 82)",
            "(line 253,col 9)-(line 253,col 82)",
            "(line 254,col 9)-(line 254,col 86)",
            "(line 256,col 9)-(line 256,col 39)",
            "(line 257,col 9)-(line 257,col 49)",
            "(line 258,col 9)-(line 258,col 54)",
            "(line 260,col 9)-(line 260,col 42)",
            "(line 261,col 9)-(line 261,col 53)",
            "(line 262,col 9)-(line 262,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiply()",
        "snippet": "    @Test\n    public void testScalarMultiply() {\n        Complex x = new Complex(3.0, 4.0);\n        double y = 2.0;\n        Complex z = x.multiply(y);\n        Assert.assertEquals(6.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(8.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 265,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 267,col 9)-(line 267,col 42)",
            "(line 268,col 9)-(line 268,col 23)",
            "(line 269,col 9)-(line 269,col 34)",
            "(line 270,col 9)-(line 270,col 54)",
            "(line 271,col 9)-(line 271,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyNaN()",
        "snippet": "    @Test\n    public void testScalarMultiplyNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.multiply(Double.NaN);\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 274,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 276,col 9)-(line 276,col 42)",
            "(line 277,col 9)-(line 277,col 43)",
            "(line 278,col 9)-(line 278,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testScalarMultiplyInf()",
        "snippet": "    @Test\n    public void testScalarMultiplyInf() {\n        Complex z = new Complex(1,1);\n        Complex w = z.multiply(Double.POSITIVE_INFINITY);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n\n        w = z.multiply(Double.NEGATIVE_INFINITY);\n        Assert.assertEquals(w.getReal(), inf, 0);\n        Assert.assertEquals(w.getImaginary(), inf, 0);\n    }\n",
        "begin_line": 281,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 283,col 9)-(line 283,col 37)",
            "(line 284,col 9)-(line 284,col 57)",
            "(line 285,col 9)-(line 285,col 49)",
            "(line 286,col 9)-(line 286,col 54)",
            "(line 288,col 9)-(line 288,col 49)",
            "(line 289,col 9)-(line 289,col 49)",
            "(line 290,col 9)-(line 290,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegate()",
        "snippet": "    @Test\n    public void testNegate() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.negate();\n        Assert.assertEquals(-3.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-4.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 293,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 295,col 9)-(line 295,col 42)",
            "(line 296,col 9)-(line 296,col 31)",
            "(line 297,col 9)-(line 297,col 55)",
            "(line 298,col 9)-(line 298,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNegateNaN()",
        "snippet": "    @Test\n    public void testNegateNaN() {\n        Complex z = Complex.NaN.negate();\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 301,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 303,col 9)-(line 303,col 41)",
            "(line 304,col 9)-(line 304,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtract()",
        "snippet": "    @Test\n    public void testSubtract() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(5.0, 6.0);\n        Complex z = x.subtract(y);\n        Assert.assertEquals(-2.0, z.getReal(), 1.0e-5);\n        Assert.assertEquals(-2.0, z.getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 307,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 309,col 9)-(line 309,col 42)",
            "(line 310,col 9)-(line 310,col 42)",
            "(line 311,col 9)-(line 311,col 34)",
            "(line 312,col 9)-(line 312,col 55)",
            "(line 313,col 9)-(line 313,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSubtractNaN()",
        "snippet": "    @Test\n    public void testSubtractNaN() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex z = x.subtract(Complex.NaN);\n        Assert.assertTrue(z.isNaN());\n    }\n",
        "begin_line": 316,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 318,col 9)-(line 318,col 42)",
            "(line 319,col 9)-(line 319,col 44)",
            "(line 320,col 9)-(line 320,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNull()",
        "snippet": "    @Test\n    public void testEqualsNull() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(null));\n    }\n",
        "begin_line": 323,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 325,col 9)-(line 325,col 42)",
            "(line 326,col 9)-(line 326,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsClass()",
        "snippet": "    @Test\n    public void testEqualsClass() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertFalse(x.equals(this));\n    }\n",
        "begin_line": 329,
        "end_line": 333,
        "comment": "",
        "child_ranges": [
            "(line 331,col 9)-(line 331,col 42)",
            "(line 332,col 9)-(line 332,col 43)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsSame()",
        "snippet": "    @Test\n    public void testEqualsSame() {\n        Complex x = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(x));\n    }\n",
        "begin_line": 335,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 337,col 9)-(line 337,col 42)",
            "(line 338,col 9)-(line 338,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsTrue()",
        "snippet": "    @Test\n    public void testEqualsTrue() {\n        Complex x = new Complex(3.0, 4.0);\n        Complex y = new Complex(3.0, 4.0);\n        Assert.assertTrue(x.equals(y));\n    }\n",
        "begin_line": 341,
        "end_line": 346,
        "comment": "",
        "child_ranges": [
            "(line 343,col 9)-(line 343,col 42)",
            "(line 344,col 9)-(line 344,col 42)",
            "(line 345,col 9)-(line 345,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsRealDifference()",
        "snippet": "    @Test\n    public void testEqualsRealDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 348,
        "end_line": 353,
        "comment": "",
        "child_ranges": [
            "(line 350,col 9)-(line 350,col 42)",
            "(line 351,col 9)-(line 351,col 61)",
            "(line 352,col 9)-(line 352,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsImaginaryDifference()",
        "snippet": "    @Test\n    public void testEqualsImaginaryDifference() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.equals(y));\n    }\n",
        "begin_line": 355,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 357,col 9)-(line 357,col 42)",
            "(line 358,col 9)-(line 358,col 61)",
            "(line 359,col 9)-(line 359,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testEqualsNaN()",
        "snippet": "    @Test\n    public void testEqualsNaN() {\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Complex complexNaN = Complex.NaN;\n        Assert.assertTrue(realNaN.equals(imaginaryNaN));\n        Assert.assertTrue(imaginaryNaN.equals(complexNaN));\n        Assert.assertTrue(realNaN.equals(complexNaN));\n    }\n",
        "begin_line": 362,
        "end_line": 370,
        "comment": "",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 55)",
            "(line 365,col 9)-(line 365,col 60)",
            "(line 366,col 9)-(line 366,col 41)",
            "(line 367,col 9)-(line 367,col 56)",
            "(line 368,col 9)-(line 368,col 59)",
            "(line 369,col 9)-(line 369,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testHashCode()",
        "snippet": "    @Test\n    public void testHashCode() {\n        Complex x = new Complex(0.0, 0.0);\n        Complex y = new Complex(0.0, 0.0 + Double.MIN_VALUE);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        y = new Complex(0.0 + Double.MIN_VALUE, 0.0);\n        Assert.assertFalse(x.hashCode()==y.hashCode());\n        Complex realNaN = new Complex(Double.NaN, 0.0);\n        Complex imaginaryNaN = new Complex(0.0, Double.NaN);\n        Assert.assertEquals(realNaN.hashCode(), imaginaryNaN.hashCode());\n        Assert.assertEquals(imaginaryNaN.hashCode(), Complex.NaN.hashCode());\n    }\n",
        "begin_line": 372,
        "end_line": 383,
        "comment": "",
        "child_ranges": [
            "(line 374,col 9)-(line 374,col 42)",
            "(line 375,col 9)-(line 375,col 61)",
            "(line 376,col 9)-(line 376,col 55)",
            "(line 377,col 9)-(line 377,col 53)",
            "(line 378,col 9)-(line 378,col 55)",
            "(line 379,col 9)-(line 379,col 55)",
            "(line 380,col 9)-(line 380,col 60)",
            "(line 381,col 9)-(line 381,col 73)",
            "(line 382,col 9)-(line 382,col 77)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcos()",
        "snippet": "    @Test\n    public void testAcos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.936812, -2.30551);\n        TestUtils.assertEquals(expected, z.acos(), 1.0e-5);\n        TestUtils.assertEquals(new Complex(FastMath.acos(0), 0),\n                Complex.ZERO.acos(), 1.0e-12);\n    }\n",
        "begin_line": 385,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 387,col 9)-(line 387,col 38)",
            "(line 388,col 9)-(line 388,col 59)",
            "(line 389,col 9)-(line 389,col 59)",
            "(line 390,col 9)-(line 391,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosInf()",
        "snippet": "    @Test\n    public void testAcosInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.acos());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, infOne.acos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.acos());\n        TestUtils.assertSame(Complex.NaN, infInf.acos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.acos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.acos());\n    }\n",
        "begin_line": 394,
        "end_line": 404,
        "comment": "",
        "child_ranges": [
            "(line 396,col 9)-(line 396,col 57)",
            "(line 397,col 9)-(line 397,col 60)",
            "(line 398,col 9)-(line 398,col 57)",
            "(line 399,col 9)-(line 399,col 60)",
            "(line 400,col 9)-(line 400,col 57)",
            "(line 401,col 9)-(line 401,col 60)",
            "(line 402,col 9)-(line 402,col 60)",
            "(line 403,col 9)-(line 403,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAcosNaN()",
        "snippet": "    @Test\n    public void testAcosNaN() {\n        Assert.assertTrue(Complex.NaN.acos().isNaN());\n    }\n",
        "begin_line": 406,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 408,col 9)-(line 408,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsin()",
        "snippet": "    @Test\n    public void testAsin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(0.633984, 2.30551);\n        TestUtils.assertEquals(expected, z.asin(), 1.0e-5);\n    }\n",
        "begin_line": 411,
        "end_line": 416,
        "comment": "",
        "child_ranges": [
            "(line 413,col 9)-(line 413,col 38)",
            "(line 414,col 9)-(line 414,col 58)",
            "(line 415,col 9)-(line 415,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinNaN()",
        "snippet": "    @Test\n    public void testAsinNaN() {\n        Assert.assertTrue(Complex.NaN.asin().isNaN());\n    }\n",
        "begin_line": 418,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAsinInf()",
        "snippet": "    @Test\n    public void testAsinInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.asin());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, infOne.asin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.asin());\n        TestUtils.assertSame(Complex.NaN, infInf.asin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.asin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.asin());\n    }\n",
        "begin_line": 423,
        "end_line": 433,
        "comment": "",
        "child_ranges": [
            "(line 425,col 9)-(line 425,col 57)",
            "(line 426,col 9)-(line 426,col 60)",
            "(line 427,col 9)-(line 427,col 57)",
            "(line 428,col 9)-(line 428,col 60)",
            "(line 429,col 9)-(line 429,col 57)",
            "(line 430,col 9)-(line 430,col 60)",
            "(line 431,col 9)-(line 431,col 60)",
            "(line 432,col 9)-(line 432,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtan()",
        "snippet": "    @Test\n    public void testAtan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.44831, 0.158997);\n        TestUtils.assertEquals(expected, z.atan(), 1.0e-5);\n    }\n",
        "begin_line": 436,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 438,col 9)-(line 438,col 38)",
            "(line 439,col 9)-(line 439,col 58)",
            "(line 440,col 9)-(line 440,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanInf()",
        "snippet": "    @Test\n    public void testAtanInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.atan());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, infOne.atan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.atan());\n        TestUtils.assertSame(Complex.NaN, infInf.atan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.atan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.atan());\n    }\n",
        "begin_line": 443,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 57)",
            "(line 446,col 9)-(line 446,col 60)",
            "(line 447,col 9)-(line 447,col 57)",
            "(line 448,col 9)-(line 448,col 60)",
            "(line 449,col 9)-(line 449,col 57)",
            "(line 450,col 9)-(line 450,col 60)",
            "(line 451,col 9)-(line 451,col 60)",
            "(line 452,col 9)-(line 452,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testAtanNaN()",
        "snippet": "    @Test\n    public void testAtanNaN() {\n        Assert.assertTrue(Complex.NaN.atan().isNaN());\n        Assert.assertTrue(Complex.I.atan().isNaN());\n    }\n",
        "begin_line": 455,
        "end_line": 459,
        "comment": "",
        "child_ranges": [
            "(line 457,col 9)-(line 457,col 54)",
            "(line 458,col 9)-(line 458,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCos()",
        "snippet": "    @Test\n    public void testCos() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-27.03495, -3.851153);\n        TestUtils.assertEquals(expected, z.cos(), 1.0e-5);\n    }\n",
        "begin_line": 461,
        "end_line": 466,
        "comment": "",
        "child_ranges": [
            "(line 463,col 9)-(line 463,col 38)",
            "(line 464,col 9)-(line 464,col 61)",
            "(line 465,col 9)-(line 465,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosNaN()",
        "snippet": "    @Test\n    public void testCosNaN() {\n        Assert.assertTrue(Complex.NaN.cos().isNaN());\n    }\n",
        "begin_line": 468,
        "end_line": 471,
        "comment": "",
        "child_ranges": [
            "(line 470,col 9)-(line 470,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosInf()",
        "snippet": "    @Test\n    public void testCosInf() {\n        TestUtils.assertSame(infNegInf, oneInf.cos());\n        TestUtils.assertSame(infInf, oneNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, infOne.cos());\n        TestUtils.assertSame(Complex.NaN, negInfOne.cos());\n        TestUtils.assertSame(Complex.NaN, infInf.cos());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cos());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cos());\n    }\n",
        "begin_line": 473,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 475,col 9)-(line 475,col 54)",
            "(line 476,col 9)-(line 476,col 54)",
            "(line 477,col 9)-(line 477,col 56)",
            "(line 478,col 9)-(line 478,col 59)",
            "(line 479,col 9)-(line 479,col 56)",
            "(line 480,col 9)-(line 480,col 59)",
            "(line 481,col 9)-(line 481,col 59)",
            "(line 482,col 9)-(line 482,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCosh()",
        "snippet": "    @Test\n    public void testCosh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.58066, -7.58155);\n        TestUtils.assertEquals(expected, z.cosh(), 1.0e-5);\n    }\n",
        "begin_line": 485,
        "end_line": 490,
        "comment": "",
        "child_ranges": [
            "(line 487,col 9)-(line 487,col 38)",
            "(line 488,col 9)-(line 488,col 59)",
            "(line 489,col 9)-(line 489,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshNaN()",
        "snippet": "    @Test\n    public void testCoshNaN() {\n        Assert.assertTrue(Complex.NaN.cosh().isNaN());\n    }\n",
        "begin_line": 492,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 494,col 9)-(line 494,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testCoshInf()",
        "snippet": "    @Test\n    public void testCoshInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.cosh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.cosh());\n        TestUtils.assertSame(infInf, infOne.cosh());\n        TestUtils.assertSame(infNegInf, negInfOne.cosh());\n        TestUtils.assertSame(Complex.NaN, infInf.cosh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.cosh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.cosh());\n    }\n",
        "begin_line": 497,
        "end_line": 507,
        "comment": "",
        "child_ranges": [
            "(line 499,col 9)-(line 499,col 57)",
            "(line 500,col 9)-(line 500,col 60)",
            "(line 501,col 9)-(line 501,col 52)",
            "(line 502,col 9)-(line 502,col 58)",
            "(line 503,col 9)-(line 503,col 57)",
            "(line 504,col 9)-(line 504,col 60)",
            "(line 505,col 9)-(line 505,col 60)",
            "(line 506,col 9)-(line 506,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExp()",
        "snippet": "    @Test\n    public void testExp() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-13.12878, -15.20078);\n        TestUtils.assertEquals(expected, z.exp(), 1.0e-5);\n        TestUtils.assertEquals(Complex.ONE,\n                Complex.ZERO.exp(), 10e-12);\n        Complex iPi = Complex.I.multiply(new Complex(pi,0));\n        TestUtils.assertEquals(Complex.ONE.negate(),\n                iPi.exp(), 10e-12);\n    }\n",
        "begin_line": 509,
        "end_line": 519,
        "comment": "",
        "child_ranges": [
            "(line 511,col 9)-(line 511,col 38)",
            "(line 512,col 9)-(line 512,col 61)",
            "(line 513,col 9)-(line 513,col 58)",
            "(line 514,col 9)-(line 515,col 44)",
            "(line 516,col 9)-(line 516,col 60)",
            "(line 517,col 9)-(line 518,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpNaN()",
        "snippet": "    @Test\n    public void testExpNaN() {\n        Assert.assertTrue(Complex.NaN.exp().isNaN());\n    }\n",
        "begin_line": 521,
        "end_line": 524,
        "comment": "",
        "child_ranges": [
            "(line 523,col 9)-(line 523,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testExpInf()",
        "snippet": "    @Test\n    public void testExpInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.exp());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.exp());\n        TestUtils.assertSame(infInf, infOne.exp());\n        TestUtils.assertSame(Complex.ZERO, negInfOne.exp());\n        TestUtils.assertSame(Complex.NaN, infInf.exp());\n        TestUtils.assertSame(Complex.NaN, infNegInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfInf.exp());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.exp());\n    }\n",
        "begin_line": 526,
        "end_line": 536,
        "comment": "",
        "child_ranges": [
            "(line 528,col 9)-(line 528,col 56)",
            "(line 529,col 9)-(line 529,col 59)",
            "(line 530,col 9)-(line 530,col 51)",
            "(line 531,col 9)-(line 531,col 60)",
            "(line 532,col 9)-(line 532,col 56)",
            "(line 533,col 9)-(line 533,col 59)",
            "(line 534,col 9)-(line 534,col 59)",
            "(line 535,col 9)-(line 535,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLog()",
        "snippet": "    @Test\n    public void testLog() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.60944, 0.927295);\n        TestUtils.assertEquals(expected, z.log(), 1.0e-5);\n    }\n",
        "begin_line": 538,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 540,col 9)-(line 540,col 38)",
            "(line 541,col 9)-(line 541,col 58)",
            "(line 542,col 9)-(line 542,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogNaN()",
        "snippet": "    @Test\n    public void testLogNaN() {\n        Assert.assertTrue(Complex.NaN.log().isNaN());\n    }\n",
        "begin_line": 545,
        "end_line": 548,
        "comment": "",
        "child_ranges": [
            "(line 547,col 9)-(line 547,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogInf()",
        "snippet": "    @Test\n    public void testLogInf() {\n        TestUtils.assertEquals(new Complex(inf, pi / 2),\n                oneInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 2),\n                oneNegInf.log(), 10e-12);\n        TestUtils.assertEquals(infZero, infOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi),\n                negInfOne.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, pi / 4),\n                infInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, -pi / 4),\n                infNegInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, 3d * pi / 4),\n                negInfInf.log(), 10e-12);\n        TestUtils.assertEquals(new Complex(inf, - 3d * pi / 4),\n                negInfNegInf.log(), 10e-12);\n    }\n",
        "begin_line": 550,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 552,col 9)-(line 553,col 38)",
            "(line 554,col 9)-(line 555,col 41)",
            "(line 556,col 9)-(line 556,col 62)",
            "(line 557,col 9)-(line 558,col 41)",
            "(line 559,col 9)-(line 560,col 38)",
            "(line 561,col 9)-(line 562,col 41)",
            "(line 563,col 9)-(line 564,col 41)",
            "(line 565,col 9)-(line 566,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testLogZero()",
        "snippet": "    @Test\n    public void testLogZero() {\n        TestUtils.assertSame(negInfZero, Complex.ZERO.log());\n    }\n",
        "begin_line": 569,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 571,col 9)-(line 571,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPow()",
        "snippet": "    @Test\n    public void testPow() {\n        Complex x = new Complex(3, 4);\n        Complex y = new Complex(5, 6);\n        Complex expected = new Complex(-1.860893, 11.83677);\n        TestUtils.assertEquals(expected, x.pow(y), 1.0e-5);\n    }\n",
        "begin_line": 574,
        "end_line": 580,
        "comment": "",
        "child_ranges": [
            "(line 576,col 9)-(line 576,col 38)",
            "(line 577,col 9)-(line 577,col 38)",
            "(line 578,col 9)-(line 578,col 60)",
            "(line 579,col 9)-(line 579,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNBase()",
        "snippet": "    @Test\n    public void testPowNaNBase() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(Complex.NaN.pow(x).isNaN());\n    }\n",
        "begin_line": 582,
        "end_line": 586,
        "comment": "",
        "child_ranges": [
            "(line 584,col 9)-(line 584,col 38)",
            "(line 585,col 9)-(line 585,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowNaNExponent()",
        "snippet": "    @Test\n    public void testPowNaNExponent() {\n        Complex x = new Complex(3, 4);\n        Assert.assertTrue(x.pow(Complex.NaN).isNaN());\n    }\n",
        "begin_line": 588,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 590,col 9)-(line 590,col 38)",
            "(line 591,col 9)-(line 591,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowInf()",
        "snippet": "   @Test\n   public void testPowInf() {\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(oneNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infOne));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfInf));\n       TestUtils.assertSame(Complex.NaN,Complex.ONE.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfOne.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,negInfNegInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infInf.pow(infInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(negInfNegInf));\n       TestUtils.assertSame(Complex.NaN,infNegInf.pow(infInf));\n   }\n",
        "begin_line": 594,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 596,col 8)-(line 596,col 65)",
            "(line 597,col 8)-(line 597,col 68)",
            "(line 598,col 8)-(line 598,col 65)",
            "(line 599,col 8)-(line 599,col 65)",
            "(line 600,col 8)-(line 600,col 68)",
            "(line 601,col 8)-(line 601,col 68)",
            "(line 602,col 8)-(line 602,col 71)",
            "(line 603,col 8)-(line 603,col 65)",
            "(line 604,col 8)-(line 604,col 68)",
            "(line 605,col 8)-(line 605,col 65)",
            "(line 606,col 8)-(line 606,col 68)",
            "(line 607,col 8)-(line 607,col 68)",
            "(line 608,col 8)-(line 608,col 71)",
            "(line 609,col 8)-(line 609,col 69)",
            "(line 610,col 8)-(line 610,col 72)",
            "(line 611,col 8)-(line 611,col 66)",
            "(line 612,col 8)-(line 612,col 63)",
            "(line 613,col 8)-(line 613,col 66)",
            "(line 614,col 8)-(line 614,col 60)",
            "(line 615,col 8)-(line 615,col 66)",
            "(line 616,col 8)-(line 616,col 69)",
            "(line 617,col 8)-(line 617,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testPowZero()",
        "snippet": "   @Test\n   public void testPowZero() {\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ONE));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.ZERO));\n       TestUtils.assertSame(Complex.NaN,\n               Complex.ZERO.pow(Complex.I));\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.ONE.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               Complex.I.pow(Complex.ZERO), 10e-12);\n       TestUtils.assertEquals(Complex.ONE,\n               new Complex(-1, 3).pow(Complex.ZERO), 10e-12);\n   }\n",
        "begin_line": 620,
        "end_line": 634,
        "comment": "",
        "child_ranges": [
            "(line 622,col 8)-(line 623,col 46)",
            "(line 624,col 8)-(line 625,col 47)",
            "(line 626,col 8)-(line 627,col 44)",
            "(line 628,col 8)-(line 629,col 54)",
            "(line 630,col 8)-(line 631,col 52)",
            "(line 632,col 8)-(line 633,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testpowNull()",
        "snippet": "    @Test(expected=NullArgumentException.class)\n    public void testpowNull() {\n        Complex.ONE.pow(null);\n    }\n",
        "begin_line": 636,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 638,col 9)-(line 638,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSin()",
        "snippet": "    @Test\n    public void testSin() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(3.853738, -27.01681);\n        TestUtils.assertEquals(expected, z.sin(), 1.0e-5);\n    }\n",
        "begin_line": 641,
        "end_line": 646,
        "comment": "",
        "child_ranges": [
            "(line 643,col 9)-(line 643,col 38)",
            "(line 644,col 9)-(line 644,col 60)",
            "(line 645,col 9)-(line 645,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinInf()",
        "snippet": "    @Test\n    public void testSinInf() {\n        TestUtils.assertSame(infInf, oneInf.sin());\n        TestUtils.assertSame(infNegInf, oneNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, infOne.sin());\n        TestUtils.assertSame(Complex.NaN, negInfOne.sin());\n        TestUtils.assertSame(Complex.NaN, infInf.sin());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sin());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sin());\n    }\n",
        "begin_line": 648,
        "end_line": 658,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 650,col 51)",
            "(line 651,col 9)-(line 651,col 57)",
            "(line 652,col 9)-(line 652,col 56)",
            "(line 653,col 9)-(line 653,col 59)",
            "(line 654,col 9)-(line 654,col 56)",
            "(line 655,col 9)-(line 655,col 59)",
            "(line 656,col 9)-(line 656,col 59)",
            "(line 657,col 9)-(line 657,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinNaN()",
        "snippet": "    @Test\n    public void testSinNaN() {\n        Assert.assertTrue(Complex.NaN.sin().isNaN());\n    }\n",
        "begin_line": 660,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 662,col 9)-(line 662,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinh()",
        "snippet": "    @Test\n    public void testSinh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-6.54812, -7.61923);\n        TestUtils.assertEquals(expected, z.sinh(), 1.0e-5);\n    }\n",
        "begin_line": 665,
        "end_line": 670,
        "comment": "",
        "child_ranges": [
            "(line 667,col 9)-(line 667,col 38)",
            "(line 668,col 9)-(line 668,col 59)",
            "(line 669,col 9)-(line 669,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhNaN()",
        "snippet": "    @Test\n    public void testSinhNaN() {\n        Assert.assertTrue(Complex.NaN.sinh().isNaN());\n    }\n",
        "begin_line": 672,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 674,col 9)-(line 674,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSinhInf()",
        "snippet": "    @Test\n    public void testSinhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.sinh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.sinh());\n        TestUtils.assertSame(infInf, infOne.sinh());\n        TestUtils.assertSame(negInfInf, negInfOne.sinh());\n        TestUtils.assertSame(Complex.NaN, infInf.sinh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.sinh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.sinh());\n    }\n",
        "begin_line": 677,
        "end_line": 687,
        "comment": "",
        "child_ranges": [
            "(line 679,col 9)-(line 679,col 57)",
            "(line 680,col 9)-(line 680,col 60)",
            "(line 681,col 9)-(line 681,col 52)",
            "(line 682,col 9)-(line 682,col 58)",
            "(line 683,col 9)-(line 683,col 57)",
            "(line 684,col 9)-(line 684,col 60)",
            "(line 685,col 9)-(line 685,col 60)",
            "(line 686,col 9)-(line 686,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealPositive()",
        "snippet": "    @Test\n    public void testSqrtRealPositive() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(2, 1);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 689,
        "end_line": 694,
        "comment": "",
        "child_ranges": [
            "(line 691,col 9)-(line 691,col 38)",
            "(line 692,col 9)-(line 692,col 45)",
            "(line 693,col 9)-(line 693,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealZero()",
        "snippet": "    @Test\n    public void testSqrtRealZero() {\n        Complex z = new Complex(0.0, 4);\n        Complex expected = new Complex(1.41421, 1.41421);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 696,
        "end_line": 701,
        "comment": "",
        "child_ranges": [
            "(line 698,col 9)-(line 698,col 40)",
            "(line 699,col 9)-(line 699,col 57)",
            "(line 700,col 9)-(line 700,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtRealNegative()",
        "snippet": "    @Test\n    public void testSqrtRealNegative() {\n        Complex z = new Complex(-3.0, 4);\n        Complex expected = new Complex(1, 2);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 703,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 705,col 9)-(line 705,col 41)",
            "(line 706,col 9)-(line 706,col 45)",
            "(line 707,col 9)-(line 707,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryZero()",
        "snippet": "    @Test\n    public void testSqrtImaginaryZero() {\n        Complex z = new Complex(-3.0, 0.0);\n        Complex expected = new Complex(0.0, 1.73205);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 710,
        "end_line": 715,
        "comment": "",
        "child_ranges": [
            "(line 712,col 9)-(line 712,col 43)",
            "(line 713,col 9)-(line 713,col 53)",
            "(line 714,col 9)-(line 714,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtImaginaryNegative()",
        "snippet": "    @Test\n    public void testSqrtImaginaryNegative() {\n        Complex z = new Complex(-3.0, -4.0);\n        Complex expected = new Complex(1.0, -2.0);\n        TestUtils.assertEquals(expected, z.sqrt(), 1.0e-5);\n    }\n",
        "begin_line": 717,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 719,col 9)-(line 719,col 44)",
            "(line 720,col 9)-(line 720,col 50)",
            "(line 721,col 9)-(line 721,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtPolar()",
        "snippet": "    @Test\n    public void testSqrtPolar() {\n        double r = 1;\n        for (int i = 0; i < 5; i++) {\n            r += i;\n            double theta = 0;\n            for (int j =0; j < 11; j++) {\n                theta += pi /12;\n                Complex z = ComplexUtils.polar2Complex(r, theta);\n                Complex sqrtz = ComplexUtils.polar2Complex(FastMath.sqrt(r), theta / 2);\n                TestUtils.assertEquals(sqrtz, z.sqrt(), 10e-12);\n            }\n        }\n    }\n",
        "begin_line": 724,
        "end_line": 737,
        "comment": "",
        "child_ranges": [
            "(line 726,col 9)-(line 726,col 21)",
            "(line 727,col 9)-(line 736,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtNaN()",
        "snippet": "    @Test\n    public void testSqrtNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt().isNaN());\n    }\n",
        "begin_line": 739,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 741,col 9)-(line 741,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrtInf()",
        "snippet": "    @Test\n    public void testSqrtInf() {\n        TestUtils.assertSame(infNaN, oneInf.sqrt());\n        TestUtils.assertSame(infNaN, oneNegInf.sqrt());\n        TestUtils.assertSame(infZero, infOne.sqrt());\n        TestUtils.assertSame(zeroInf, negInfOne.sqrt());\n        TestUtils.assertSame(infNaN, infInf.sqrt());\n        TestUtils.assertSame(infNaN, infNegInf.sqrt());\n        TestUtils.assertSame(nanInf, negInfInf.sqrt());\n        TestUtils.assertSame(nanNegInf, negInfNegInf.sqrt());\n    }\n",
        "begin_line": 744,
        "end_line": 754,
        "comment": "",
        "child_ranges": [
            "(line 746,col 9)-(line 746,col 52)",
            "(line 747,col 9)-(line 747,col 55)",
            "(line 748,col 9)-(line 748,col 53)",
            "(line 749,col 9)-(line 749,col 56)",
            "(line 750,col 9)-(line 750,col 52)",
            "(line 751,col 9)-(line 751,col 55)",
            "(line 752,col 9)-(line 752,col 55)",
            "(line 753,col 9)-(line 753,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1z()",
        "snippet": "    @Test\n    public void testSqrt1z() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(4.08033, -2.94094);\n        TestUtils.assertEquals(expected, z.sqrt1z(), 1.0e-5);\n    }\n",
        "begin_line": 756,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 758,col 9)-(line 758,col 38)",
            "(line 759,col 9)-(line 759,col 58)",
            "(line 760,col 9)-(line 760,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSqrt1zNaN()",
        "snippet": "    @Test\n    public void testSqrt1zNaN() {\n        Assert.assertTrue(Complex.NaN.sqrt1z().isNaN());\n    }\n",
        "begin_line": 763,
        "end_line": 766,
        "comment": "",
        "child_ranges": [
            "(line 765,col 9)-(line 765,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTan()",
        "snippet": "    @Test\n    public void testTan() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);\n    }\n",
        "begin_line": 768,
        "end_line": 773,
        "comment": "",
        "child_ranges": [
            "(line 770,col 9)-(line 770,col 38)",
            "(line 771,col 9)-(line 771,col 63)",
            "(line 772,col 9)-(line 772,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanNaN()",
        "snippet": "    @Test\n    public void testTanNaN() {\n        Assert.assertTrue(Complex.NaN.tan().isNaN());\n    }\n",
        "begin_line": 775,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 777,col 9)-(line 777,col 53)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanInf()",
        "snippet": "    @Test\n    public void testTanInf() {\n        TestUtils.assertSame(zeroNaN, oneInf.tan());\n        TestUtils.assertSame(zeroNaN, oneNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, infOne.tan());\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());\n        TestUtils.assertSame(Complex.NaN, infInf.tan());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());\n    }\n",
        "begin_line": 780,
        "end_line": 790,
        "comment": "",
        "child_ranges": [
            "(line 782,col 9)-(line 782,col 52)",
            "(line 783,col 9)-(line 783,col 55)",
            "(line 784,col 9)-(line 784,col 56)",
            "(line 785,col 9)-(line 785,col 59)",
            "(line 786,col 9)-(line 786,col 56)",
            "(line 787,col 9)-(line 787,col 59)",
            "(line 788,col 9)-(line 788,col 59)",
            "(line 789,col 9)-(line 789,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanCritical()",
        "snippet": "   @Test\n   public void testTanCritical() {\n        TestUtils.assertSame(infNaN, new Complex(pi/2, 0).tan());\n        TestUtils.assertSame(negInfNaN, new Complex(-pi/2, 0).tan());\n    }\n",
        "begin_line": 792,
        "end_line": 796,
        "comment": "",
        "child_ranges": [
            "(line 794,col 9)-(line 794,col 65)",
            "(line 795,col 9)-(line 795,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanh()",
        "snippet": "    @Test\n    public void testTanh() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);\n    }\n",
        "begin_line": 798,
        "end_line": 803,
        "comment": "",
        "child_ranges": [
            "(line 800,col 9)-(line 800,col 38)",
            "(line 801,col 9)-(line 801,col 60)",
            "(line 802,col 9)-(line 802,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhNaN()",
        "snippet": "    @Test\n    public void testTanhNaN() {\n        Assert.assertTrue(Complex.NaN.tanh().isNaN());\n    }\n",
        "begin_line": 805,
        "end_line": 808,
        "comment": "",
        "child_ranges": [
            "(line 807,col 9)-(line 807,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhInf()",
        "snippet": "    @Test\n    public void testTanhInf() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());\n        TestUtils.assertSame(nanZero, infOne.tanh());\n        TestUtils.assertSame(nanZero, negInfOne.tanh());\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());\n    }\n",
        "begin_line": 810,
        "end_line": 820,
        "comment": "",
        "child_ranges": [
            "(line 812,col 9)-(line 812,col 57)",
            "(line 813,col 9)-(line 813,col 60)",
            "(line 814,col 9)-(line 814,col 53)",
            "(line 815,col 9)-(line 815,col 56)",
            "(line 816,col 9)-(line 816,col 57)",
            "(line 817,col 9)-(line 817,col 60)",
            "(line 818,col 9)-(line 818,col 60)",
            "(line 819,col 9)-(line 819,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testTanhCritical()",
        "snippet": "    @Test\n    public void testTanhCritical() {\n        TestUtils.assertSame(nanInf, new Complex(0, pi/2).tanh());\n    }\n",
        "begin_line": 822,
        "end_line": 825,
        "comment": "",
        "child_ranges": [
            "(line 824,col 9)-(line 824,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testMath221()",
        "snippet": "    @Test\n    public void testMath221() {\n        Assert.assertEquals(new Complex(0,-1), new Complex(0,1).multiply(new Complex(-1,0)));\n    }\n",
        "begin_line": 828,
        "end_line": 831,
        "comment": " test issue MATH-221 ",
        "child_ranges": [
            "(line 830,col 9)-(line 830,col 93)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_thirdRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_thirdRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(-2,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(1.0,                  thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.3660254037844386,  thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.36602540378443843,  thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(0.366025403784439,    thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.3660254037844384,  thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 844,
        "end_line": 861,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = -2 + 2 * i</b>\n     *   => z_0 =  1      +          i\n     *   => z_1 = -1.3660 + 0.3660 * i\n     *   => z_2 =  0.3660 - 1.3660 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 847,col 9)-(line 847,col 38)",
            "(line 849,col 9)-(line 849,col 71)",
            "(line 851,col 9)-(line 851,col 53)",
            "(line 853,col 9)-(line 853,col 91)",
            "(line 854,col 9)-(line 854,col 91)",
            "(line 856,col 9)-(line 856,col 91)",
            "(line 857,col 9)-(line 857,col 91)",
            "(line 859,col 9)-(line 859,col 91)",
            "(line 860,col 9)-(line 860,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_normal_fourthRoot()",
        "snippet": "    @Test\n    public void testNthRoot_normal_fourthRoot() {\n        // The complex number we want to compute all third-roots for.\n        Complex z = new Complex(5,-2);\n        // The List holding all fourth roots\n        Complex[] fourthRootsOfZ = z.nthRoot(4).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(4, fourthRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(-0.14469266210702247,   fourthRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(0.14469266210702256,    fourthRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.5164629308487783,     fourthRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(0.14469266210702267,    fourthRootsOfZ[2].getImaginary(), 1.0e-5);\n        // test z_3\n        Assert.assertEquals(-0.14469266210702275,   fourthRootsOfZ[3].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.5164629308487783,    fourthRootsOfZ[3].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 876,
        "end_line": 896,
        "comment": "\n     * Test: computing <b>fourth roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 5 - 2 * i</b>\n     *   => z_0 =  1.5164 - 0.1446 * i\n     *   => z_1 =  0.1446 + 1.5164 * i\n     *   => z_2 = -1.5164 + 0.1446 * i\n     *   => z_3 = -1.5164 - 0.1446 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 879,col 9)-(line 879,col 38)",
            "(line 881,col 9)-(line 881,col 72)",
            "(line 883,col 9)-(line 883,col 54)",
            "(line 885,col 9)-(line 885,col 94)",
            "(line 886,col 9)-(line 886,col 94)",
            "(line 888,col 9)-(line 888,col 94)",
            "(line 889,col 9)-(line 889,col 94)",
            "(line 891,col 9)-(line 891,col 94)",
            "(line 892,col 9)-(line 892,col 94)",
            "(line 894,col 9)-(line 894,col 94)",
            "(line 895,col 9)-(line 895,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty() {\n        // The number 8 has three third roots. One we all already know is the number 2.\n        // But there are two more complex roots.\n        Complex z = new Complex(8,0);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(2.0,                thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.0,                thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(1.7320508075688774, thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-1.0,               thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.732050807568877, thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 909,
        "end_line": 927,
        "comment": "\n     * Test: computing <b>third roots</b> of z.\n     * <pre>\n     * <code>\n     * <b>z = 8</b>\n     *   => z_0 =  2\n     *   => z_1 = -1 + 1.73205 * i\n     *   => z_2 = -1 - 1.73205 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 913,col 9)-(line 913,col 37)",
            "(line 915,col 9)-(line 915,col 71)",
            "(line 917,col 9)-(line 917,col 53)",
            "(line 919,col 9)-(line 919,col 89)",
            "(line 920,col 9)-(line 920,col 89)",
            "(line 922,col 9)-(line 922,col 89)",
            "(line 923,col 9)-(line 923,col 89)",
            "(line 925,col 9)-(line 925,col 89)",
            "(line 926,col 9)-(line 926,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_thirdRoot_realPartZero()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_thirdRoot_realPartZero() {\n        // complex number with only imaginary part\n        Complex z = new Complex(0,2);\n        // The List holding all third roots\n        Complex[] thirdRootsOfZ = z.nthRoot(3).toArray(new Complex[0]);\n        // Returned Collection must not be empty!\n        Assert.assertEquals(3, thirdRootsOfZ.length);\n        // test z_0\n        Assert.assertEquals(1.0911236359717216,      thirdRootsOfZ[0].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[0].getImaginary(), 1.0e-5);\n        // test z_1\n        Assert.assertEquals(-1.0911236359717216,     thirdRootsOfZ[1].getReal(),      1.0e-5);\n        Assert.assertEquals(0.6299605249474365,      thirdRootsOfZ[1].getImaginary(), 1.0e-5);\n        // test z_2\n        Assert.assertEquals(-2.3144374213981936E-16, thirdRootsOfZ[2].getReal(),      1.0e-5);\n        Assert.assertEquals(-1.2599210498948732,     thirdRootsOfZ[2].getImaginary(), 1.0e-5);\n    }\n",
        "begin_line": 941,
        "end_line": 958,
        "comment": "\n     * Test: computing <b>third roots</b> of z with real part 0.\n     * <pre>\n     * <code>\n     * <b>z = 2 * i</b>\n     *   => z_0 =  1.0911 + 0.6299 * i\n     *   => z_1 = -1.0911 + 0.6299 * i\n     *   => z_2 = -2.3144 - 1.2599 * i\n     * </code>\n     * </pre>\n     ",
        "child_ranges": [
            "(line 944,col 9)-(line 944,col 37)",
            "(line 946,col 9)-(line 946,col 71)",
            "(line 948,col 9)-(line 948,col 53)",
            "(line 950,col 9)-(line 950,col 94)",
            "(line 951,col 9)-(line 951,col 94)",
            "(line 953,col 9)-(line 953,col 94)",
            "(line 954,col 9)-(line 954,col 94)",
            "(line 956,col 9)-(line 956,col 94)",
            "(line 957,col 9)-(line 957,col 94)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testNthRoot_cornercase_NAN_Inf()",
        "snippet": "    @Test\n    public void testNthRoot_cornercase_NAN_Inf() {\n        // NaN + finite -> NaN\n        List<Complex> roots = oneNaN.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        roots = nanZero.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // NaN + infinite -> NaN\n        roots = nanInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.NaN, roots.get(0));\n\n        // finite + infinite -> Inf\n        roots = oneInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n\n        // infinite + infinite -> Inf\n        roots = negInfInf.nthRoot(3);\n        Assert.assertEquals(1,roots.size());\n        Assert.assertEquals(Complex.INF, roots.get(0));\n    }\n",
        "begin_line": 963,
        "end_line": 988,
        "comment": "\n     * Test cornercases with NaN and Infinity.\n     ",
        "child_ranges": [
            "(line 966,col 9)-(line 966,col 48)",
            "(line 967,col 9)-(line 967,col 44)",
            "(line 968,col 9)-(line 968,col 55)",
            "(line 970,col 9)-(line 970,col 35)",
            "(line 971,col 9)-(line 971,col 44)",
            "(line 972,col 9)-(line 972,col 55)",
            "(line 975,col 9)-(line 975,col 34)",
            "(line 976,col 9)-(line 976,col 44)",
            "(line 977,col 9)-(line 977,col 55)",
            "(line 980,col 9)-(line 980,col 34)",
            "(line 981,col 9)-(line 981,col 44)",
            "(line 982,col 9)-(line 982,col 55)",
            "(line 985,col 9)-(line 985,col 37)",
            "(line 986,col 9)-(line 986,col 44)",
            "(line 987,col 9)-(line 987,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgument()",
        "snippet": "    @Test\n    public void testGetArgument() {\n        Complex z = new Complex(1, 0);\n        Assert.assertEquals(0.0, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, 1);\n        Assert.assertEquals(FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, 1);\n        Assert.assertEquals(FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 1);\n        Assert.assertEquals(3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, 0);\n        Assert.assertEquals(FastMath.PI, z.getArgument(), 1.0e-12);\n\n        z = new Complex(-1, -1);\n        Assert.assertEquals(-3 * FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n        z = new Complex(0, -1);\n        Assert.assertEquals(-FastMath.PI/2, z.getArgument(), 1.0e-12);\n\n        z = new Complex(1, -1);\n        Assert.assertEquals(-FastMath.PI/4, z.getArgument(), 1.0e-12);\n\n    }\n",
        "begin_line": 993,
        "end_line": 1019,
        "comment": "\n     * Test standard values\n     ",
        "child_ranges": [
            "(line 995,col 9)-(line 995,col 38)",
            "(line 996,col 9)-(line 996,col 59)",
            "(line 998,col 9)-(line 998,col 30)",
            "(line 999,col 9)-(line 999,col 69)",
            "(line 1001,col 9)-(line 1001,col 30)",
            "(line 1002,col 9)-(line 1002,col 69)",
            "(line 1004,col 9)-(line 1004,col 31)",
            "(line 1005,col 9)-(line 1005,col 73)",
            "(line 1007,col 9)-(line 1007,col 31)",
            "(line 1008,col 9)-(line 1008,col 67)",
            "(line 1010,col 9)-(line 1010,col 32)",
            "(line 1011,col 9)-(line 1011,col 74)",
            "(line 1013,col 9)-(line 1013,col 31)",
            "(line 1014,col 9)-(line 1014,col 70)",
            "(line 1016,col 9)-(line 1016,col 31)",
            "(line 1017,col 9)-(line 1017,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentInf()",
        "snippet": "    @Test\n    public void testGetArgumentInf() {\n        Assert.assertEquals(FastMath.PI/4, infInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, oneInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI/2, zeroInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(0.0, infZero.getArgument(), 1.0e-12);\n        Assert.assertEquals(FastMath.PI, negInfOne.getArgument(), 1.0e-12);\n        Assert.assertEquals(-3.0*FastMath.PI/4, negInfNegInf.getArgument(), 1.0e-12);\n        Assert.assertEquals(-FastMath.PI/2, oneNegInf.getArgument(), 1.0e-12);\n    }\n",
        "begin_line": 1024,
        "end_line": 1034,
        "comment": "\n     * Verify atan2-style handling of infinite parts\n     ",
        "child_ranges": [
            "(line 1026,col 9)-(line 1026,col 74)",
            "(line 1027,col 9)-(line 1027,col 74)",
            "(line 1028,col 9)-(line 1028,col 64)",
            "(line 1029,col 9)-(line 1029,col 75)",
            "(line 1030,col 9)-(line 1030,col 65)",
            "(line 1031,col 9)-(line 1031,col 75)",
            "(line 1032,col 9)-(line 1032,col 85)",
            "(line 1033,col 9)-(line 1033,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testGetArgumentNaN()",
        "snippet": "    @Test\n    public void testGetArgumentNaN() {\n        Assert.assertTrue(Double.isNaN(nanZero.getArgument()));\n        Assert.assertTrue(Double.isNaN(zeroNaN.getArgument()));\n        Assert.assertTrue(Double.isNaN(Complex.NaN.getArgument()));\n    }\n",
        "begin_line": 1039,
        "end_line": 1044,
        "comment": "\n     * Verify that either part NaN results in NaN\n     ",
        "child_ranges": [
            "(line 1041,col 9)-(line 1041,col 63)",
            "(line 1042,col 9)-(line 1042,col 63)",
            "(line 1043,col 9)-(line 1043,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.testSerial()",
        "snippet": "    @Test\n    public void testSerial() {\n        Complex z = new Complex(3.0, 4.0);\n        Assert.assertEquals(z, TestUtils.serializeAndRecover(z));\n        Complex ncmplx = (Complex)TestUtils.serializeAndRecover(oneNaN);\n        Assert.assertEquals(nanZero, ncmplx);\n        Assert.assertTrue(ncmplx.isNaN());\n        Complex infcmplx = (Complex)TestUtils.serializeAndRecover(infInf);\n        Assert.assertEquals(infInf, infcmplx);\n        Assert.assertTrue(infcmplx.isInfinite());\n        TestComplex tz = new TestComplex(3.0, 4.0);\n        Assert.assertEquals(tz, TestUtils.serializeAndRecover(tz));\n        TestComplex ntcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(oneNaN));\n        Assert.assertEquals(nanZero, ntcmplx);\n        Assert.assertTrue(ntcmplx.isNaN());\n        TestComplex inftcmplx = (TestComplex)TestUtils.serializeAndRecover(new TestComplex(infInf));\n        Assert.assertEquals(infInf, inftcmplx);\n        Assert.assertTrue(inftcmplx.isInfinite());\n    }\n",
        "begin_line": 1046,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1048,col 9)-(line 1048,col 42)",
            "(line 1049,col 9)-(line 1049,col 65)",
            "(line 1050,col 9)-(line 1050,col 72)",
            "(line 1051,col 9)-(line 1051,col 45)",
            "(line 1052,col 9)-(line 1052,col 42)",
            "(line 1053,col 9)-(line 1053,col 74)",
            "(line 1054,col 9)-(line 1054,col 46)",
            "(line 1055,col 9)-(line 1055,col 49)",
            "(line 1056,col 9)-(line 1056,col 51)",
            "(line 1057,col 9)-(line 1057,col 67)",
            "(line 1058,col 9)-(line 1058,col 98)",
            "(line 1059,col 9)-(line 1059,col 46)",
            "(line 1060,col 9)-(line 1060,col 43)",
            "(line 1061,col 9)-(line 1061,col 100)",
            "(line 1062,col 9)-(line 1062,col 47)",
            "(line 1063,col 9)-(line 1063,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(double, double)",
        "snippet": "        public TestComplex(double real, double imaginary) {\n            super(real, imaginary);\n        }\n",
        "begin_line": 1076,
        "end_line": 1078,
        "comment": "",
        "child_ranges": [
            "(line 1077,col 13)-(line 1077,col 35)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.TestComplex(org.apache.commons.math.complex.Complex)",
        "snippet": "        public TestComplex(Complex other){\n            this(other.getReal(), other.getImaginary());\n        }\n",
        "begin_line": 1080,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1081,col 13)-(line 1081,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.complex.ComplexTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "signature": "org.apache.commons.math.complex.ComplexTest.TestComplex.createComplex(double, double)",
        "snippet": "        @Override\n        protected TestComplex createComplex(double real, double imaginary){\n            return new TestComplex(real, imaginary);\n        }\n",
        "begin_line": 1084,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 13)-(line 1086,col 52)"
        ]
    }
]