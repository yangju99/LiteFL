[
    {
        "class_name": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.getSolver()",
        "snippet": "    protected UnivariateRealSolver getSolver() {\n        return new RegulaFalsiSolver();\n    }\n",
        "begin_line": 32,
        "end_line": 34,
        "comment": " {@inheritDoc} ",
        "child_ranges": [
            "(line 33,col 9)-(line 33,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.getQuinticEvalCounts()",
        "snippet": "    protected int[] getQuinticEvalCounts() {\n        // While the Regula Falsi method guarantees convergence, convergence\n        // may be extremely slow. The last test case does not converge within\n        // even a million iterations. As such, it was disabled.\n        return new int[] {3, 7, 8, 19, 18, 11, 67, 55, 288, 151, -1};\n    }\n",
        "begin_line": 37,
        "end_line": 42,
        "comment": " {@inheritDoc} ",
        "child_ranges": [
            "(line 41,col 9)-(line 41,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.testIssue631()",
        "snippet": "    @Test(expected=ConvergenceException.class)\n    public void testIssue631() {\n        final UnivariateRealFunction f = new UnivariateRealFunction() {\n                /** {@inheritDoc} */\n                public double value(double x) {\n                    return Math.exp(x) - Math.pow(Math.PI, 3.0);\n                }\n            };\n\n        final UnivariateRealSolver solver = new RegulaFalsiSolver();\n        final double root = solver.solve(3624, f, 1, 10);\n        Assert.assertEquals(3.4341896575482003, root, 1e-15);\n\t}\n",
        "begin_line": 44,
        "end_line": 56,
        "comment": "",
        "child_ranges": [
            "(line 46,col 9)-(line 51,col 14)",
            "(line 53,col 9)-(line 53,col 68)",
            "(line 54,col 9)-(line 54,col 57)",
            "(line 55,col 9)-(line 55,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest.Anonymous-9a37841e-2de0-4311-bdf3-bf4f6ddebf4e.value(double)",
        "snippet": "                public double value(double x) {\n                    return Math.exp(x) - Math.pow(Math.PI, 3.0);\n                }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": " {@inheritDoc} ",
        "child_ranges": [
            "(line 49,col 21)-(line 49,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolver()",
        "snippet": "    protected abstract UnivariateRealSolver getSolver();\n",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Returns the solver to use to perform the tests.\n     * @return the solver to use to perform the tests\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getQuinticEvalCounts()",
        "snippet": "    protected abstract int[] getQuinticEvalCounts();\n",
        "begin_line": 47,
        "end_line": 47,
        "comment": " Returns the expected number of evaluations for the\n     * {@link #testQuinticZero} unit test. A value of {@code -1} indicates that\n     * the test should be skipped for that solver.\n     * @return the expected number of evaluations for the\n     * {@link #testQuinticZero} unit test\n     ",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSinZero()",
        "snippet": "    @Test\n    public void testSinZero() {\n        // The sinus function is behaved well around the root at pi. The second\n        // order derivative is zero, which means linear approximating methods\n        // still converge quadratically.\n        UnivariateRealFunction f = new SinFunction();\n        double result;\n        UnivariateRealSolver solver = getSolver();\n\n        result = solver.solve(100, f, 3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Evaluations: \" + solver.getEvaluations());\n        Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());\n        Assert.assertTrue(solver.getEvaluations() <= 6);\n        result = solver.solve(100, f, 1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Evaluations: \" + solver.getEvaluations());\n        Assert.assertEquals(result, FastMath.PI, solver.getAbsoluteAccuracy());\n        Assert.assertTrue(solver.getEvaluations() <= 7);\n    }\n",
        "begin_line": 49,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 53)",
            "(line 55,col 9)-(line 55,col 22)",
            "(line 56,col 9)-(line 56,col 50)",
            "(line 58,col 9)-(line 58,col 44)",
            "(line 61,col 9)-(line 61,col 79)",
            "(line 62,col 9)-(line 62,col 56)",
            "(line 63,col 9)-(line 63,col 44)",
            "(line 66,col 9)-(line 66,col 79)",
            "(line 67,col 9)-(line 67,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testQuinticZero()",
        "snippet": "    @Test\n    public void testQuinticZero() {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // Around the root of 0 the function is well behaved, with a second\n        // derivative of zero a 0.\n        // The other roots are less well to find, in particular the root at 1,\n        // because the function grows fast for x>1.\n        // The function has extrema (first derivative is zero) at 0.27195613\n        // and 0.82221643, intervals containing these values are harder for\n        // the solvers.\n        UnivariateRealFunction f = new QuinticFunction();\n        double result;\n        UnivariateRealSolver solver = getSolver();\n        double atol = solver.getAbsoluteAccuracy();\n        int[] counts = getQuinticEvalCounts();\n\n        // Tests data: initial bounds, and expected solution, per test case.\n        double[][] testsData = {{-0.2,  0.2,  0.0},\n                                {-0.1,  0.3,  0.0},\n                                {-0.3,  0.45, 0.0},\n                                { 0.3,  0.7,  0.5},\n                                { 0.2,  0.6,  0.5},\n                                { 0.05, 0.95, 0.5},\n                                { 0.85, 1.25, 1.0},\n                                { 0.8,  1.2,  1.0},\n                                { 0.85, 1.75, 1.0},\n                                { 0.55, 1.45, 1.0},\n                                { 0.85, 5.0,  1.0},\n                               };\n        int maxIter = 500;\n\n        for(int i = 0; i < testsData.length; i++) {\n            // Skip test, if needed.\n            if (counts[i] == -1) continue;\n\n            // Compute solution.\n            double[] testData = testsData[i];\n            result = solver.solve(maxIter, f, testData[0], testData[1]);\n            //System.out.println(\n            //    \"Root: \" + result + \" Evaluations: \" + solver.getEvaluations());\n\n            // Check solution.\n            Assert.assertEquals(result, testData[2], atol);\n            Assert.assertTrue(solver.getEvaluations() <= counts[i] + 1);\n        }\n    }\n",
        "begin_line": 70,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 80,col 9)-(line 80,col 57)",
            "(line 81,col 9)-(line 81,col 22)",
            "(line 82,col 9)-(line 82,col 50)",
            "(line 83,col 9)-(line 83,col 51)",
            "(line 84,col 9)-(line 84,col 46)",
            "(line 87,col 9)-(line 98,col 33)",
            "(line 99,col 9)-(line 99,col 26)",
            "(line 101,col 9)-(line 114,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testRootEndpoints()",
        "snippet": "    @Test\n    public void testRootEndpoints() {\n        UnivariateRealFunction f = new XMinus5Function();\n        UnivariateRealSolver solver = getSolver();\n\n        // End-point is root. This should be a special case in the solver, and\n        // the initial end-point should be returned exactly.\n        double result = solver.solve(100, f, 5.0, 6.0);\n        Assert.assertEquals(5.0, result, 0.0);\n\n        result = solver.solve(100, f, 4.0, 5.0);\n        Assert.assertEquals(5.0, result, 0.0);\n\n        result = solver.solve(100, f, 5.0, 6.0, 5.5);\n        Assert.assertEquals(5.0, result, 0.0);\n\n        result = solver.solve(100, f, 4.0, 5.0, 4.5);\n        Assert.assertEquals(5.0, result, 0.0);\n    }\n",
        "begin_line": 117,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 119,col 9)-(line 119,col 57)",
            "(line 120,col 9)-(line 120,col 50)",
            "(line 124,col 9)-(line 124,col 55)",
            "(line 125,col 9)-(line 125,col 46)",
            "(line 127,col 9)-(line 127,col 48)",
            "(line 128,col 9)-(line 128,col 46)",
            "(line 130,col 9)-(line 130,col 53)",
            "(line 131,col 9)-(line 131,col 46)",
            "(line 133,col 9)-(line 133,col 53)",
            "(line 134,col 9)-(line 134,col 46)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testBadEndpoints()",
        "snippet": "    @Test\n    public void testBadEndpoints() {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        try {  // bad interval\n            solver.solve(100, f, 1, -1);\n            Assert.fail(\"Expecting NumberIsTooLargeException - bad interval\");\n        } catch (NumberIsTooLargeException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(100, f, 1, 1.5);\n            Assert.fail(\"Expecting NoBracketingException - non-bracketing\");\n        } catch (NoBracketingException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(100, f, 1, 1.5, 1.2);\n            Assert.fail(\"Expecting NoBracketingException - non-bracketing\");\n        } catch (NoBracketingException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 137,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 139,col 9)-(line 139,col 53)",
            "(line 140,col 9)-(line 140,col 50)",
            "(line 141,col 9)-(line 146,col 9)",
            "(line 147,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 158,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionLeftSide()",
        "snippet": "    @Test\n    public void testSolutionLeftSide() {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.LEFT_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(solution <= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 161,
        "end_line": 178,
        "comment": "",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 53)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 27)",
            "(line 166,col 9)-(line 166,col 28)",
            "(line 167,col 9)-(line 177,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionRightSide()",
        "snippet": "    @Test\n    public void testSolutionRightSide() {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.RIGHT_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(solution >= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 180,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 182,col 9)-(line 182,col 53)",
            "(line 183,col 9)-(line 183,col 50)",
            "(line 184,col 9)-(line 184,col 27)",
            "(line 185,col 9)-(line 185,col 28)",
            "(line 186,col 9)-(line 196,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionBelowSide()",
        "snippet": "    @Test\n    public void testSolutionBelowSide() {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.BELOW_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(f.value(solution) <= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 198,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 200,col 9)-(line 200,col 53)",
            "(line 201,col 9)-(line 201,col 50)",
            "(line 202,col 9)-(line 202,col 27)",
            "(line 203,col 9)-(line 203,col 28)",
            "(line 204,col 9)-(line 214,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.testSolutionAboveSide()",
        "snippet": "    @Test\n    public void testSolutionAboveSide() {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = getSolver();\n        double left = -1.5;\n        double right = 0.05;\n        for(int i = 0; i < 10; i++) {\n            // Test whether the allowed solutions are taken into account.\n            double solution = getSolution(solver, 100, f, left, right, AllowedSolution.ABOVE_SIDE);\n            if (!Double.isNaN(solution)) {\n                Assert.assertTrue(f.value(solution) >= 0.0);\n            }\n\n            // Prepare for next test.\n            left -= 0.1;\n            right += 0.3;\n        }\n    }\n",
        "begin_line": 217,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 219,col 9)-(line 219,col 53)",
            "(line 220,col 9)-(line 220,col 50)",
            "(line 221,col 9)-(line 221,col 27)",
            "(line 222,col 9)-(line 222,col 28)",
            "(line 223,col 9)-(line 233,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest",
        "child_classes": [
            "org.apache.commons.math.analysis.solvers.RegulaFalsiSolverTest"
        ],
        "src_path": "src/test/java/org/apache/commons/math/analysis/solvers/BaseSecantSolverAbstractTest.java",
        "signature": "org.apache.commons.math.analysis.solvers.BaseSecantSolverAbstractTest.getSolution(org.apache.commons.math.analysis.solvers.UnivariateRealSolver, int, org.apache.commons.math.analysis.UnivariateRealFunction, double, double, org.apache.commons.math.analysis.solvers.AllowedSolution)",
        "snippet": "    private double getSolution(UnivariateRealSolver solver, int maxEval, UnivariateRealFunction f,\n                               double left, double right, AllowedSolution allowedSolution) {\n        try {\n            @SuppressWarnings(\"unchecked\")\n            BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =\n            (BracketedUnivariateRealSolver<UnivariateRealFunction>) solver;\n            return bracketing.solve(100, f, left, right, allowedSolution);\n        } catch (ClassCastException cce) {\n            double baseRoot = solver.solve(maxEval, f, left, right);\n            if ((baseRoot <= left) || (baseRoot >= right)) {\n                // the solution slipped out of interval\n                return Double.NaN;\n            }\n            PegasusSolver bracketing =\n                    new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy(),\n                                      solver.getFunctionValueAccuracy());\n            return UnivariateRealSolverUtils.forceSide(maxEval - solver.getEvaluations(),\n                                                       f, bracketing, baseRoot, left, right,\n                                                       allowedSolution);\n        }\n    }\n",
        "begin_line": 236,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 255,col 9)"
        ]
    }
]