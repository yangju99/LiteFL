[
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.PeepholeReplaceKnownMethodsTest()",
        "snippet": "  public PeepholeReplaceKnownMethodsTest() {\n    super(\"\");\n  }\n",
        "begin_line": 25,
        "end_line": 27,
        "comment": "",
        "child_ranges": [
            "(line 26,col 5)-(line 26,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    enableLineNumberCheck(true);\n  }\n",
        "begin_line": 29,
        "end_line": 32,
        "comment": "",
        "child_ranges": [
            "(line 31,col 5)-(line 31,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  @Override\n  public CompilerPass getProcessor(final Compiler compiler) {\n    CompilerPass peepholePass = new PeepholeOptimizationsPass(compiler,\n          new PeepholeReplaceKnownMethods());\n    return peepholePass;\n  }\n",
        "begin_line": 34,
        "end_line": 39,
        "comment": "",
        "child_ranges": [
            "(line 36,col 5)-(line 37,col 45)",
            "(line 38,col 5)-(line 38,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testStringIndexOf()",
        "snippet": "  public void testStringIndexOf() {\n    fold(\"x = 'abcdef'.indexOf('b')\", \"x = 1\");\n    fold(\"x = 'abcdefbe'.indexOf('b', 2)\", \"x = 6\");\n    fold(\"x = 'abcdef'.indexOf('bcd')\", \"x = 1\");\n    fold(\"x = 'abcdefsdfasdfbcdassd'.indexOf('bcd', 4)\", \"x = 13\");\n\n    fold(\"x = 'abcdef'.lastIndexOf('b')\", \"x = 1\");\n    fold(\"x = 'abcdefbe'.lastIndexOf('b')\", \"x = 6\");\n    fold(\"x = 'abcdefbe'.lastIndexOf('b', 5)\", \"x = 1\");\n\n    // Both elements must be string. Dont do anything if either one is not\n    // string.\n    fold(\"x = 'abc1def'.indexOf(1)\", \"x = 3\");\n    fold(\"x = 'abcNaNdef'.indexOf(NaN)\", \"x = 3\");\n    fold(\"x = 'abcundefineddef'.indexOf(undefined)\", \"x = 3\");\n    fold(\"x = 'abcnulldef'.indexOf(null)\", \"x = 3\");\n    fold(\"x = 'abctruedef'.indexOf(true)\", \"x = 3\");\n\n    // The following testcase fails with JSC_PARSE_ERROR. Hence omitted.\n    // foldSame(\"x = 1.indexOf('bcd');\");\n    foldSame(\"x = NaN.indexOf('bcd')\");\n    foldSame(\"x = undefined.indexOf('bcd')\");\n    foldSame(\"x = null.indexOf('bcd')\");\n    foldSame(\"x = true.indexOf('bcd')\");\n    foldSame(\"x = false.indexOf('bcd')\");\n\n    // Avoid dealing with regex or other types.\n    foldSame(\"x = 'abcdef'.indexOf(/b./)\");\n    foldSame(\"x = 'abcdef'.indexOf({a:2})\");\n    foldSame(\"x = 'abcdef'.indexOf([1,2])\");\n  }\n",
        "begin_line": 41,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 42,col 5)-(line 42,col 47)",
            "(line 43,col 5)-(line 43,col 52)",
            "(line 44,col 5)-(line 44,col 49)",
            "(line 45,col 5)-(line 45,col 67)",
            "(line 47,col 5)-(line 47,col 51)",
            "(line 48,col 5)-(line 48,col 53)",
            "(line 49,col 5)-(line 49,col 56)",
            "(line 53,col 5)-(line 53,col 46)",
            "(line 54,col 5)-(line 54,col 50)",
            "(line 55,col 5)-(line 55,col 62)",
            "(line 56,col 5)-(line 56,col 52)",
            "(line 57,col 5)-(line 57,col 52)",
            "(line 61,col 5)-(line 61,col 39)",
            "(line 62,col 5)-(line 62,col 45)",
            "(line 63,col 5)-(line 63,col 40)",
            "(line 64,col 5)-(line 64,col 40)",
            "(line 65,col 5)-(line 65,col 41)",
            "(line 68,col 5)-(line 68,col 43)",
            "(line 69,col 5)-(line 69,col 44)",
            "(line 70,col 5)-(line 70,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testStringJoinAddSparse()",
        "snippet": "  public void testStringJoinAddSparse() {\n    fold(\"x = [,,'a'].join(',')\", \"x = ',,a'\");\n  }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testNoStringJoin()",
        "snippet": "  public void testNoStringJoin() {\n    foldSame(\"x = [].join(',',2)\");\n    foldSame(\"x = [].join(f)\");\n  }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "",
        "child_ranges": [
            "(line 78,col 5)-(line 78,col 35)",
            "(line 79,col 5)-(line 79,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testStringJoinAdd()",
        "snippet": "  public void testStringJoinAdd() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");\n\n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join('-')\");\n    foldSame(\"x = ['', foo, ''].join()\");\n\n    fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");\n\n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");\n\n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");\n\n    fold(\"x = [1,2].join()\", \"x = '1,2'\");\n    fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");\n    fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");\n    // This can be folded but we don't currently.\n    foldSame(\"x = [[1,2],[3,4]].join()\"); // would like: \"x = '1,2,3,4'\"\n  }\n",
        "begin_line": 82,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 83,col 5)-(line 83,col 56)",
            "(line 84,col 5)-(line 84,col 41)",
            "(line 85,col 5)-(line 85,col 45)",
            "(line 86,col 5)-(line 86,col 59)",
            "(line 87,col 5)-(line 88,col 42)",
            "(line 89,col 5)-(line 90,col 38)",
            "(line 91,col 5)-(line 92,col 38)",
            "(line 95,col 5)-(line 95,col 50)",
            "(line 96,col 5)-(line 96,col 50)",
            "(line 99,col 5)-(line 99,col 58)",
            "(line 100,col 5)-(line 100,col 56)",
            "(line 101,col 5)-(line 101,col 58)",
            "(line 104,col 5)-(line 105,col 74)",
            "(line 108,col 5)-(line 108,col 40)",
            "(line 109,col 5)-(line 109,col 41)",
            "(line 111,col 5)-(line 112,col 38)",
            "(line 113,col 5)-(line 114,col 39)",
            "(line 116,col 5)-(line 117,col 44)",
            "(line 119,col 5)-(line 120,col 34)",
            "(line 122,col 5)-(line 122,col 42)",
            "(line 123,col 5)-(line 123,col 58)",
            "(line 124,col 5)-(line 124,col 58)",
            "(line 126,col 5)-(line 126,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testStringJoinAdd_b1992789()",
        "snippet": "  public void testStringJoinAdd_b1992789() {\n    fold(\"x = ['a'].join('')\", \"x = \\\"a\\\"\");\n    fold(\"x = [foo()].join('')\", \"x = '' + foo()\");\n    fold(\"[foo()].join('')\", \"'' + foo()\");\n  }\n",
        "begin_line": 129,
        "end_line": 133,
        "comment": "",
        "child_ranges": [
            "(line 130,col 5)-(line 130,col 44)",
            "(line 131,col 5)-(line 131,col 51)",
            "(line 132,col 5)-(line 132,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testFoldStringSubstr()",
        "snippet": "  public void testFoldStringSubstr() {\n    fold(\"x = 'abcde'.substr(0,2)\", \"x = 'ab'\");\n    fold(\"x = 'abcde'.substr(1,2)\", \"x = 'bc'\");\n    fold(\"x = 'abcde'['substr'](1,3)\", \"x = 'bcd'\");\n    fold(\"x = 'abcde'.substr(2)\", \"x = 'cde'\");\n\n    // we should be leaving negative indexes alone for now\n    foldSame(\"x = 'abcde'.substr(-1)\");\n    foldSame(\"x = 'abcde'.substr(1, -2)\");\n    foldSame(\"x = 'abcde'.substr(1, 2, 3)\");\n    foldSame(\"x = 'a'.substr(0, 2)\");\n  }\n",
        "begin_line": 135,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 136,col 5)-(line 136,col 48)",
            "(line 137,col 5)-(line 137,col 48)",
            "(line 138,col 5)-(line 138,col 52)",
            "(line 139,col 5)-(line 139,col 47)",
            "(line 142,col 5)-(line 142,col 39)",
            "(line 143,col 5)-(line 143,col 42)",
            "(line 144,col 5)-(line 144,col 44)",
            "(line 145,col 5)-(line 145,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testFoldStringSubstring()",
        "snippet": "  public void testFoldStringSubstring() {\n    fold(\"x = 'abcde'.substring(0,2)\", \"x = 'ab'\");\n    fold(\"x = 'abcde'.substring(1,2)\", \"x = 'b'\");\n    fold(\"x = 'abcde'['substring'](1,3)\", \"x = 'bc'\");\n    fold(\"x = 'abcde'.substring(2)\", \"x = 'cde'\");\n\n    // we should be leaving negative indexes alone for now\n    foldSame(\"x = 'abcde'.substring(-1)\");\n    foldSame(\"x = 'abcde'.substring(1, -2)\");\n    foldSame(\"x = 'abcde'.substring(1, 2, 3)\");\n    foldSame(\"x = 'a'.substring(0, 2)\");\n  }\n",
        "begin_line": 148,
        "end_line": 159,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 51)",
            "(line 150,col 5)-(line 150,col 50)",
            "(line 151,col 5)-(line 151,col 54)",
            "(line 152,col 5)-(line 152,col 50)",
            "(line 155,col 5)-(line 155,col 42)",
            "(line 156,col 5)-(line 156,col 45)",
            "(line 157,col 5)-(line 157,col 47)",
            "(line 158,col 5)-(line 158,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testFoldStringCharAt()",
        "snippet": "  public void testFoldStringCharAt() {\n    fold(\"x = 'abcde'.charAt(0)\", \"x = 'a'\");\n    fold(\"x = 'abcde'.charAt(1)\", \"x = 'b'\");\n    fold(\"x = 'abcde'.charAt(2)\", \"x = 'c'\");\n    fold(\"x = 'abcde'.charAt(3)\", \"x = 'd'\");\n    fold(\"x = 'abcde'.charAt(4)\", \"x = 'e'\");\n    foldSame(\"x = 'abcde'.charAt(5)\");  // or x = ''\n    foldSame(\"x = 'abcde'.charAt(-1)\");  // or x = ''\n    foldSame(\"x = 'abcde'.charAt(y)\");\n    foldSame(\"x = 'abcde'.charAt()\");  // or x = 'a'\n    foldSame(\"x = 'abcde'.charAt(0, ++z)\");  // or (++z, 'a')\n    foldSame(\"x = 'abcde'.charAt(null)\");  // or x = 'a'\n    foldSame(\"x = 'abcde'.charAt(true)\");  // or x = 'b'\n    fold(\"x = '\\\\ud834\\udd1e'.charAt(0)\", \"x = '\\\\ud834'\");\n    fold(\"x = '\\\\ud834\\udd1e'.charAt(1)\", \"x = '\\\\udd1e'\");\n  }\n",
        "begin_line": 161,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 162,col 5)-(line 162,col 45)",
            "(line 163,col 5)-(line 163,col 45)",
            "(line 164,col 5)-(line 164,col 45)",
            "(line 165,col 5)-(line 165,col 45)",
            "(line 166,col 5)-(line 166,col 45)",
            "(line 167,col 5)-(line 167,col 38)",
            "(line 168,col 5)-(line 168,col 39)",
            "(line 169,col 5)-(line 169,col 38)",
            "(line 170,col 5)-(line 170,col 37)",
            "(line 171,col 5)-(line 171,col 43)",
            "(line 172,col 5)-(line 172,col 41)",
            "(line 173,col 5)-(line 173,col 41)",
            "(line 174,col 5)-(line 174,col 59)",
            "(line 175,col 5)-(line 175,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testFoldStringCharCodeAt()",
        "snippet": "  public void testFoldStringCharCodeAt() {\n    fold(\"x = 'abcde'.charCodeAt(0)\", \"x = 97\");\n    fold(\"x = 'abcde'.charCodeAt(1)\", \"x = 98\");\n    fold(\"x = 'abcde'.charCodeAt(2)\", \"x = 99\");\n    fold(\"x = 'abcde'.charCodeAt(3)\", \"x = 100\");\n    fold(\"x = 'abcde'.charCodeAt(4)\", \"x = 101\");\n    foldSame(\"x = 'abcde'.charCodeAt(5)\");  // or x = (0/0)\n    foldSame(\"x = 'abcde'.charCodeAt(-1)\");  // or x = (0/0)\n    foldSame(\"x = 'abcde'.charCodeAt(y)\");\n    foldSame(\"x = 'abcde'.charCodeAt()\");  // or x = 97\n    foldSame(\"x = 'abcde'.charCodeAt(0, ++z)\");  // or (++z, 97)\n    foldSame(\"x = 'abcde'.charCodeAt(null)\");  // or x = 97\n    foldSame(\"x = 'abcde'.charCodeAt(true)\");  // or x = 98\n    fold(\"x = '\\\\ud834\\udd1e'.charCodeAt(0)\", \"x = 55348\");\n    fold(\"x = '\\\\ud834\\udd1e'.charCodeAt(1)\", \"x = 56606\");\n  }\n",
        "begin_line": 178,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 48)",
            "(line 180,col 5)-(line 180,col 48)",
            "(line 181,col 5)-(line 181,col 48)",
            "(line 182,col 5)-(line 182,col 49)",
            "(line 183,col 5)-(line 183,col 49)",
            "(line 184,col 5)-(line 184,col 42)",
            "(line 185,col 5)-(line 185,col 43)",
            "(line 186,col 5)-(line 186,col 42)",
            "(line 187,col 5)-(line 187,col 41)",
            "(line 188,col 5)-(line 188,col 47)",
            "(line 189,col 5)-(line 189,col 45)",
            "(line 190,col 5)-(line 190,col 45)",
            "(line 191,col 5)-(line 191,col 59)",
            "(line 192,col 5)-(line 192,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testJoinBug()",
        "snippet": "  public void testJoinBug() {\n    fold(\"var x = [].join();\", \"var x = '';\");\n    fold(\"var x = [x].join();\", \"var x = '' + x;\");\n    foldSame(\"var x = [x,y].join();\");\n    foldSame(\"var x = [x,y,z].join();\");\n\n    foldSame(\"shape['matrix'] = [\\n\" +\n            \"    Number(headingCos2).toFixed(4),\\n\" +\n            \"    Number(-headingSin2).toFixed(4),\\n\" +\n            \"    Number(headingSin2 * yScale).toFixed(4),\\n\" +\n            \"    Number(headingCos2 * yScale).toFixed(4),\\n\" +\n            \"    0,\\n\" +\n            \"    0\\n\" +\n            \"  ].join()\");\n  }\n",
        "begin_line": 195,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 46)",
            "(line 197,col 5)-(line 197,col 51)",
            "(line 198,col 5)-(line 198,col 38)",
            "(line 199,col 5)-(line 199,col 40)",
            "(line 201,col 5)-(line 208,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testToUpper()",
        "snippet": "  public void testToUpper() {\n    fold(\"'a'.toUpperCase()\", \"'A'\");\n    fold(\"'A'.toUpperCase()\", \"'A'\");\n    fold(\"'aBcDe'.toUpperCase()\", \"'ABCDE'\");\n  }\n",
        "begin_line": 211,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 37)",
            "(line 213,col 5)-(line 213,col 37)",
            "(line 214,col 5)-(line 214,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testToLower()",
        "snippet": "  public void testToLower() {\n    fold(\"'A'.toLowerCase()\", \"'a'\");\n    fold(\"'a'.toLowerCase()\", \"'a'\");\n    fold(\"'aBcDe'.toLowerCase()\", \"'abcde'\");\n  }\n",
        "begin_line": 217,
        "end_line": 221,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 37)",
            "(line 219,col 5)-(line 219,col 37)",
            "(line 220,col 5)-(line 220,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.testFoldParseNumbers()",
        "snippet": "  public void testFoldParseNumbers() {\n    enableNormalize();\n    enableEcmaScript5(true);\n\n    fold(\"x = parseInt('123')\", \"x = 123\");\n    fold(\"x = parseInt(' 123')\", \"x = 123\");\n    fold(\"x = parseInt('123', 10)\", \"x = 123\");\n    fold(\"x = parseInt('0xA')\", \"x = 10\");\n    fold(\"x = parseInt('0xA', 16)\", \"x = 10\");\n    fold(\"x = parseInt('07', 8)\", \"x = 7\");\n    fold(\"x = parseInt('08')\", \"x = 8\");\n    fold(\"x = parseFloat('1.23')\", \"x = 1.23\");\n    fold(\"x = parseFloat('1.2300')\", \"x = 1.23\");\n    fold(\"x = parseFloat(' 0.3333')\", \"x = 0.3333\");\n\n    //Mozilla Dev Center test cases\n    fold(\"x = parseInt(' 0xF', 16)\", \"x = 15\");\n    fold(\"x = parseInt(' F', 16)\", \"x = 15\");\n    fold(\"x = parseInt('17', 8)\", \"x = 15\");\n    fold(\"x = parseInt('015', 10)\", \"x = 15\");\n    fold(\"x = parseInt('1111', 2)\", \"x = 15\");\n    fold(\"x = parseInt('12', 13)\", \"x = 15\");\n    fold(\"x = parseInt(021, 8)\", \"x = 15\");\n    fold(\"x = parseInt(15.99, 10)\", \"x = 15\");\n    fold(\"x = parseFloat('3.14')\", \"x = 3.14\");\n    fold(\"x = parseFloat(3.14)\", \"x = 3.14\");\n\n    //Valid calls - unable to fold\n    foldSame(\"x = parseInt('FXX123', 16)\");\n    foldSame(\"x = parseInt('15*3', 10)\");\n    foldSame(\"x = parseInt('15e2', 10)\");\n    foldSame(\"x = parseInt('15px', 10)\");\n    foldSame(\"x = parseInt('-0x08')\");\n    foldSame(\"x = parseInt('1', -1)\");\n    foldSame(\"x = parseFloat('3.14more non-digit characters')\");\n    foldSame(\"x = parseFloat('314e-2')\");\n    foldSame(\"x = parseFloat('0.0314E+2')\");\n    foldSame(\"x = parseFloat('3.333333333333333333333333')\");\n\n    //Invalid calls\n    foldSame(\"x = parseInt('0xa', 10)\");\n\n    enableEcmaScript5(false);\n    foldSame(\"x = parseInt('08')\");\n  }\n",
        "begin_line": 223,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 224,col 5)-(line 224,col 22)",
            "(line 225,col 5)-(line 225,col 28)",
            "(line 227,col 5)-(line 227,col 43)",
            "(line 228,col 5)-(line 228,col 44)",
            "(line 229,col 5)-(line 229,col 47)",
            "(line 230,col 5)-(line 230,col 42)",
            "(line 231,col 5)-(line 231,col 46)",
            "(line 232,col 5)-(line 232,col 43)",
            "(line 233,col 5)-(line 233,col 40)",
            "(line 234,col 5)-(line 234,col 47)",
            "(line 235,col 5)-(line 235,col 49)",
            "(line 236,col 5)-(line 236,col 52)",
            "(line 239,col 5)-(line 239,col 47)",
            "(line 240,col 5)-(line 240,col 45)",
            "(line 241,col 5)-(line 241,col 44)",
            "(line 242,col 5)-(line 242,col 46)",
            "(line 243,col 5)-(line 243,col 46)",
            "(line 244,col 5)-(line 244,col 45)",
            "(line 245,col 5)-(line 245,col 43)",
            "(line 246,col 5)-(line 246,col 46)",
            "(line 247,col 5)-(line 247,col 47)",
            "(line 248,col 5)-(line 248,col 45)",
            "(line 251,col 5)-(line 251,col 43)",
            "(line 252,col 5)-(line 252,col 41)",
            "(line 253,col 5)-(line 253,col 41)",
            "(line 254,col 5)-(line 254,col 41)",
            "(line 255,col 5)-(line 255,col 38)",
            "(line 256,col 5)-(line 256,col 38)",
            "(line 257,col 5)-(line 257,col 64)",
            "(line 258,col 5)-(line 258,col 41)",
            "(line 259,col 5)-(line 259,col 44)",
            "(line 260,col 5)-(line 260,col 61)",
            "(line 263,col 5)-(line 263,col 40)",
            "(line 265,col 5)-(line 265,col 29)",
            "(line 266,col 5)-(line 266,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.getNumRepetitions()",
        "snippet": "  @Override\n  protected int getNumRepetitions() {\n    // Reduce this to 2 if we get better expression evaluators.\n    return 2;\n  }\n",
        "begin_line": 269,
        "end_line": 273,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.foldSame(java.lang.String)",
        "snippet": "  private void foldSame(String js) {\n    testSame(js);\n  }\n",
        "begin_line": 275,
        "end_line": 277,
        "comment": "",
        "child_ranges": [
            "(line 276,col 5)-(line 276,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest.fold(java.lang.String, java.lang.String)",
        "snippet": "  private void fold(String js, String expected) {\n    test(js, expected);\n  }\n",
        "begin_line": 279,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 280,col 5)-(line 280,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String, boolean)",
        "snippet": "  protected CompilerTestCase(String externs, boolean compareAsTree) {\n    this.externsInputs = new JSSourceFile[] {\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    this.compareAsTree = compareAsTree;\n    this.parseTypeInfo = false;\n  }\n",
        "begin_line": 118,
        "end_line": 124,
        "comment": "\n   * Constructs a test.\n   *\n   * @param externs Externs JS as a string\n   * @param compareAsTree True to compare output & expected as a node tree.\n   *     99% of the time you want to compare as a tree. There are a few\n   *     special cases where you don't, like if you want to test the code\n   *     printing of \"unnatural\" syntax trees. For example,\n   *\n   * <pre>\n   * IF\n   *   IF\n   *     STATEMENT\n   * ELSE\n   *   STATEMENT\n   * </pre>\n   ",
        "child_ranges": [
            "(line 119,col 5)-(line 121,col 6)",
            "(line 122,col 5)-(line 122,col 39)",
            "(line 123,col 5)-(line 123,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase(java.lang.String)",
        "snippet": "  protected CompilerTestCase(String externs) {\n    this(externs, true);\n  }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n   * Constructs a test. Uses AST comparison.\n   * @param externs Externs JS as a string\n   ",
        "child_ranges": [
            "(line 131,col 5)-(line 131,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.CompilerTestCase()",
        "snippet": "  protected CompilerTestCase() {\n    this(\"\", true);\n  }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n   * Constructs a test. Uses AST comparison and no externs.\n   ",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getProcessor(com.google.javascript.jscomp.Compiler)",
        "snippet": "  protected abstract CompilerPass getProcessor(Compiler compiler);\n",
        "begin_line": 147,
        "end_line": 147,
        "comment": "\n   * Gets the compiler pass instance to use for a test.\n   *\n   * @param compiler The compiler\n   * @return The pass to test\n   ",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getOptions()",
        "snippet": "  protected CompilerOptions getOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n\n    // This doesn't affect whether checkSymbols is run--it just affects\n    // whether variable warnings are filtered.\n    options.checkSymbols = true;\n\n    options.setWarningLevel(\n        DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n    options.setCodingConvention(getCodingConvention());\n    return options;\n  }\n",
        "begin_line": 156,
        "end_line": 171,
        "comment": "\n   * Gets the compiler options to use for this test. Defaults to do nothing\n   * options.\n   *\n   * This is really only for configuring warnings guards. Use getProcessor\n   * to determine what passes should be run.\n   ",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 52)",
            "(line 159,col 5)-(line 161,col 5)",
            "(line 165,col 5)-(line 165,col 32)",
            "(line 167,col 5)-(line 168,col 65)",
            "(line 169,col 5)-(line 169,col 55)",
            "(line 170,col 5)-(line 170,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getCodingConvention()",
        "snippet": "  protected CodingConvention getCodingConvention() {\n    return new GoogleCodingConvention();\n  }\n",
        "begin_line": 173,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 174,col 5)-(line 174,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getNumRepetitions()",
        "snippet": "  protected int getNumRepetitions() {\n    // Since most compiler passes should be idempotent, we run each pass twice\n    // by default.\n    return 2;\n  }\n",
        "begin_line": 181,
        "end_line": 185,
        "comment": "\n   * Returns the number of times the pass should be run before results are\n   * verified.\n   ",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowSourcelessWarnings()",
        "snippet": "  void allowSourcelessWarnings() {\n    allowSourcelessWarnings = true;\n  }\n",
        "begin_line": 188,
        "end_line": 190,
        "comment": " Expect warnings without source information. ",
        "child_ranges": [
            "(line 189,col 5)-(line 189,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.getLastCompiler()",
        "snippet": "  Compiler getLastCompiler() {\n    return lastCompiler;\n  }\n",
        "begin_line": 193,
        "end_line": 195,
        "comment": " The most recently used JSComp instance. ",
        "child_ranges": [
            "(line 194,col 5)-(line 194,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableEcmaScript5(boolean)",
        "snippet": "  protected void enableEcmaScript5(boolean acceptES5) {\n    this.acceptES5 = acceptES5;\n  }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\n   * Whether to allow ECMASCRIPT5 source parsing.\n   ",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.allowExternsChanges(boolean)",
        "snippet": "  protected void allowExternsChanges(boolean allowExternsChanges) {\n    this.allowExternsChanges = allowExternsChanges;\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n   * Whether to allow externs changes.\n   ",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableTypeCheck(com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  public void enableTypeCheck(CheckLevel level) {\n    typeCheckEnabled  = true;\n    typeCheckLevel = level;\n  }\n",
        "begin_line": 219,
        "end_line": 222,
        "comment": "\n   * Perform type checking before running the test pass. This will check\n   * for type errors and annotate nodes with type information.\n   *\n   * @param level the level of severity to report for type errors\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 220,col 5)-(line 220,col 29)",
            "(line 221,col 5)-(line 221,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableLineNumberCheck(boolean)",
        "snippet": "  public void enableLineNumberCheck(boolean newVal) {\n    checkLineNumbers = newVal;\n  }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\n   * Check to make sure that line numbers were preserved.\n   ",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableTypeCheck()",
        "snippet": "  void disableTypeCheck() {\n    typeCheckEnabled  = false;\n  }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\n   * Do not run type checking before running the test pass.\n   *\n   * @see TypeCheck\n   ",
        "child_ranges": [
            "(line 237,col 5)-(line 237,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize()",
        "snippet": "  protected void enableNormalize() {\n    enableNormalize(true);\n  }\n",
        "begin_line": 246,
        "end_line": 248,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableNormalize(boolean)",
        "snippet": "  protected void enableNormalize(boolean normalizeExpected) {\n    normalizeEnabled = true;\n    this.normalizeExpected = normalizeExpected;\n  }\n",
        "begin_line": 258,
        "end_line": 261,
        "comment": "\n   * Perform AST normalization before running the test pass, and anti-normalize\n   * after running it.\n   *\n   * @param normalizeExpected Whether to perform normalization on the\n   * expected js result.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 28)",
            "(line 260,col 5)-(line 260,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.disableNormalize()",
        "snippet": "  protected void disableNormalize() {\n    normalizeEnabled = false;\n  }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "\n   * Don't perform AST normalization before running the test pass.\n   * @see Normalize\n   ",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableMarkNoSideEffects()",
        "snippet": "  void enableMarkNoSideEffects() {\n    markNoSideEffects  = true;\n  }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\n   * Run the MarkSideEffectCalls pass before running the test pass.\n   *\n   * @see MarkNoSideEffectCalls\n   ",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.enableAstValidation(boolean)",
        "snippet": "  protected void enableAstValidation(boolean validate) {\n    astValidationEnabled = validate;\n  }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\n   * Whether to allow Validate the AST after each run of the pass.\n   ",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createTypeCheck(com.google.javascript.jscomp.Compiler, com.google.javascript.jscomp.CheckLevel)",
        "snippet": "  private static TypeCheck createTypeCheck(Compiler compiler,\n      CheckLevel level) {\n    ReverseAbstractInterpreter rai =\n        new SemanticReverseAbstractInterpreter(compiler.getCodingConvention(),\n            compiler.getTypeRegistry());\n\n    return new TypeCheck(compiler, rai, compiler.getTypeRegistry(),\n        level, CheckLevel.OFF);\n  }\n",
        "begin_line": 288,
        "end_line": 296,
        "comment": " Returns a newly created TypeCheck. ",
        "child_ranges": [
            "(line 290,col 5)-(line 292,col 40)",
            "(line 294,col 5)-(line 295,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String)",
        "snippet": "  public void test(String js, String expected) {\n    test(js, expected, (DiagnosticType) null);\n  }\n",
        "begin_line": 304,
        "end_line": 306,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Input\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 305,col 5)-(line 305,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 316,
        "end_line": 318,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 317,col 5)-(line 317,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String js, String expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 331,
        "end_line": 334,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The content of the error expected\n   ",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externsInputs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 346,
        "end_line": 349,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 348,col 5)-(line 348,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    test(externs, js, expected, error, warning, null);\n  }\n",
        "begin_line": 362,
        "end_line": 365,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String externs, String js, String expected,\n                   DiagnosticType error, DiagnosticType warning,\n                   String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, expected, error, warning, description);\n  }\n",
        "begin_line": 381,
        "end_line": 388,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs input\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 384,col 5)-(line 386,col 6)",
            "(line 387,col 5)-(line 387,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSSourceFile[], java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(JSSourceFile[] externs, String js, String expected,\n                   DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    CompilerOptions options = getOptions();\n\n    if (this.acceptES5) {\n      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    }\n    // Note that in this context, turning on the checkTypes option won't\n    // actually cause the type check to run.\n    options.checkTypes = parseTypeInfo;\n    compiler.init(externs, new JSSourceFile[] {\n        JSSourceFile.fromCode(\"testcode\", js) }, options);\n\n    BaseJSTypeTestCase.addNativeProperties(compiler.getTypeRegistry());\n\n    test(compiler, new String[] { expected }, error, warning, description);\n  }\n",
        "begin_line": 404,
        "end_line": 424,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param externs Externs inputs\n   * @param js Input\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 407,col 5)-(line 407,col 41)",
            "(line 408,col 5)-(line 408,col 28)",
            "(line 410,col 5)-(line 410,col 43)",
            "(line 412,col 5)-(line 414,col 5)",
            "(line 417,col 5)-(line 417,col 39)",
            "(line 418,col 5)-(line 419,col 58)",
            "(line 421,col 5)-(line 421,col 71)",
            "(line 423,col 5)-(line 423,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[])",
        "snippet": "  public void test(String[] js, String[] expected) {\n    test(js, expected, null);\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   ",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error) {\n    test(js, expected, error, null);\n  }\n",
        "begin_line": 444,
        "end_line": 446,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning) {\n    test(js, expected, error, warning, null);\n  }\n",
        "begin_line": 458,
        "end_line": 461,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 460,col 5)-(line 460,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void test(String[] js, String[] expected, DiagnosticType error,\n                   DiagnosticType warning, String description) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    JSSourceFile[] inputs = new JSSourceFile[js.length];\n    for (int i = 0; i < js.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"input\" + i, js[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    test(compiler, expected, error, warning, description);\n  }\n",
        "begin_line": 476,
        "end_line": 487,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param js Inputs\n   * @param expected Expected JS output\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 478,col 5)-(line 478,col 41)",
            "(line 479,col 5)-(line 479,col 28)",
            "(line 481,col 5)-(line 481,col 56)",
            "(line 482,col 5)-(line 484,col 5)",
            "(line 485,col 5)-(line 485,col 55)",
            "(line 486,col 5)-(line 486,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[])",
        "snippet": "  public void test(JSModule[] modules, String[] expected) {\n    test(modules, expected, null);\n  }\n",
        "begin_line": 495,
        "end_line": 497,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   ",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n      DiagnosticType error) {\n    test(modules, expected, error, null);\n  }\n",
        "begin_line": 507,
        "end_line": 510,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output,\n   * or that an expected error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 509,col 5)-(line 509,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.JSModule[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void test(JSModule[] modules, String[] expected,\n                   DiagnosticType error, DiagnosticType warning) {\n    Compiler compiler = createCompiler();\n    lastCompiler = compiler;\n\n    compiler.init(externsInputs, modules, getOptions());\n    test(compiler, expected, error, warning);\n  }\n",
        "begin_line": 522,
        "end_line": 529,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param modules Module inputs\n   * @param expected Expected JS outputs (one per module)\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 524,col 5)-(line 524,col 41)",
            "(line 525,col 5)-(line 525,col 28)",
            "(line 527,col 5)-(line 527,col 56)",
            "(line 528,col 5)-(line 528,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String)",
        "snippet": "  public void testSame(String js) {\n    test(js, js);\n  }\n",
        "begin_line": 536,
        "end_line": 538,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Input and output\n   ",
        "child_ranges": [
            "(line 537,col 5)-(line 537,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String js, DiagnosticType warning) {\n    test(js, js, null, warning);\n  }\n",
        "begin_line": 547,
        "end_line": 549,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 548,col 5)-(line 548,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(js, js, diag);\n    } else {\n      test(js, js, null, diag);\n    }\n  }\n",
        "begin_line": 559,
        "end_line": 565,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 560,col 5)-(line 564,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning) {\n    testSame(externs, js, warning, null);\n  }\n",
        "begin_line": 575,
        "end_line": 577,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 576,col 5)-(line 576,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, boolean)",
        "snippet": "  public void testSame(\n      String externs, String js, DiagnosticType diag, boolean error) {\n    if (error) {\n      test(externs, js, js, diag, null);\n    } else {\n      test(externs, js, js, null, diag);\n    }\n  }\n",
        "begin_line": 588,
        "end_line": 595,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param diag Expected error or warning, or null if none is expected\n   * @param error true if diag is an error, false if it is a warning\n   ",
        "child_ranges": [
            "(line 590,col 5)-(line 594,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  public void testSame(String externs, String js, DiagnosticType warning,\n                       String description) {\n    JSSourceFile[] externsInputs = new JSSourceFile[]{\n        JSSourceFile.fromCode(\"externs\", externs)\n    };\n    test(externsInputs, js, js, null, warning, description);\n  }\n",
        "begin_line": 608,
        "end_line": 614,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input\n   * and (optionally) that an expected warning and description is issued.\n   *\n   * @param externs Externs input\n   * @param js Input and output\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 610,col 5)-(line 612,col 6)",
            "(line 613,col 5)-(line 613,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[])",
        "snippet": "  public void testSame(String[] js) {\n    test(js, js);\n  }\n",
        "begin_line": 621,
        "end_line": 623,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input.\n   *\n   * @param js Inputs and outputs\n   ",
        "child_ranges": [
            "(line 622,col 5)-(line 622,col 17)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(String[] js, DiagnosticType error) {\n    test(js, js, error);\n  }\n",
        "begin_line": 632,
        "end_line": 634,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   ",
        "child_ranges": [
            "(line 633,col 5)-(line 633,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(\n      String[] js, DiagnosticType error, DiagnosticType warning) {\n    test(js, js, error, warning);\n  }\n",
        "begin_line": 644,
        "end_line": 647,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as its input,\n   * and emits the given error and warning.\n   *\n   * @param js Inputs and outputs\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 646,col 5)-(line 646,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[])",
        "snippet": "  public void testSame(JSModule[] modules) {\n    testSame(modules, null);\n  }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   ",
        "child_ranges": [
            "(line 655,col 5)-(line 655,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.testSame(com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  public void testSame(JSModule[] modules, DiagnosticType warning) {\n    try {\n      String[] expected = new String[modules.length];\n      for (int i = 0; i < modules.length; i++) {\n        expected[i] = \"\";\n        for (CompilerInput input : modules[i].getInputs()) {\n          expected[i] += input.getSourceFile().getCode();\n        }\n      }\n      test(modules, expected, null, warning);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n",
        "begin_line": 664,
        "end_line": 677,
        "comment": "\n   * Verifies that the compiler pass's JS output is the same as the input.\n   *\n   * @param modules Module inputs\n   * @param warning A warning, or null for no expected warning.\n   ",
        "child_ranges": [
            "(line 665,col 5)-(line 676,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void test(Compiler compiler, String[] expected,\n                      DiagnosticType error, DiagnosticType warning) {\n    test(compiler, expected, error, warning, null);\n  }\n",
        "begin_line": 690,
        "end_line": 693,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   ",
        "child_ranges": [
            "(line 692,col 5)-(line 692,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.test(com.google.javascript.jscomp.Compiler, java.lang.String[], com.google.javascript.jscomp.DiagnosticType, com.google.javascript.jscomp.DiagnosticType, java.lang.String)",
        "snippet": "  private void test(Compiler compiler, String[] expected,\n                    DiagnosticType error, DiagnosticType warning,\n                    String description) {\n    RecentChange recentChange = new RecentChange();\n    compiler.addChangeHandler(recentChange);\n\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n\n    if (astValidationEnabled) {\n      (new AstValidator()).validateRoot(root);\n    }\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = root.getLastChild();\n\n    // Save the tree for later comparison.\n    Node rootClone = root.cloneTree();\n    Node externsRootClone = rootClone.getFirstChild();\n    Node mainRootClone = rootClone.getLastChild();\n\n    int numRepetitions = getNumRepetitions();\n    ErrorManager[] errorManagers = new ErrorManager[numRepetitions];\n    int aggregateWarningCount = 0;\n    List<JSError> aggregateWarnings = Lists.newArrayList();\n    boolean hasCodeChanged = false;\n\n    assertFalse(\"Code should not change before processing\",\n        recentChange.hasCodeChanged());\n\n    for (int i = 0; i < numRepetitions; ++i) {\n      if (compiler.getErrorCount() == 0) {\n        errorManagers[i] = new BlackHoleErrorManager(compiler);\n\n        // Only run the type checking pass once, if asked.\n        // Running it twice can cause unpredictable behavior because duplicate\n        // objects for the same type are created, and the type system\n        // uses reference equality to compare many types.\n        if (typeCheckEnabled && i == 0) {\n          TypeCheck check = createTypeCheck(compiler, typeCheckLevel);\n          check.processForTesting(externsRoot, mainRoot);\n        }\n\n        // Only run the normalize pass once, if asked.\n        if (normalizeEnabled && i == 0) {\n          normalizeActualCode(compiler, externsRoot, mainRoot);\n        }\n\n        if (markNoSideEffects && i == 0) {\n          MarkNoSideEffectCalls mark = new MarkNoSideEffectCalls(compiler);\n          mark.process(externsRoot, mainRoot);\n        }\n\n        recentChange.reset();\n\n        getProcessor(compiler).process(externsRoot, mainRoot);\n        if (astValidationEnabled) {\n          (new AstValidator()).validateRoot(root);\n        }\n        if (checkLineNumbers) {\n          (new LineNumberCheck(compiler)).process(externsRoot, mainRoot);\n        }\n\n        hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n        aggregateWarningCount += errorManagers[i].getWarningCount();\n        aggregateWarnings.addAll(Lists.newArrayList(compiler.getWarnings()));\n\n        if (normalizeEnabled) {\n          boolean verifyDeclaredConstants = true;\n          new Normalize.VerifyConstants(compiler, verifyDeclaredConstants)\n              .process(externsRoot, mainRoot);\n        }\n      }\n    }\n\n    if (error == null) {\n      assertEquals(\n          \"Unexpected error(s): \" + Joiner.on(\"\\n\").join(compiler.getErrors()),\n          0, compiler.getErrorCount());\n\n      // Verify the symbol table.\n      ErrorManager symbolTableErrorManager =\n          new BlackHoleErrorManager(compiler);\n      Node expectedRoot = parseExpectedJs(expected);\n      expectedRoot.detachFromParent();\n\n      JSError[] stErrors = symbolTableErrorManager.getErrors();\n      if (expectedSymbolTableError != null) {\n        assertEquals(\"There should be one error.\", 1, stErrors.length);\n        assertEquals(expectedSymbolTableError, stErrors[0].getType());\n      } else {\n        assertEquals(\"Unexpected symbol table error(s): \" +\n            Joiner.on(\"\\n\").join(stErrors),\n            0, stErrors.length);\n      }\n\n      if (warning == null) {\n        assertEquals(\n            \"Unexpected warning(s): \" + Joiner.on(\"\\n\").join(aggregateWarnings),\n            0, aggregateWarningCount);\n      } else {\n        assertEquals(\"There should be one warning, repeated \" + numRepetitions +\n            \" time(s).\", numRepetitions, aggregateWarningCount);\n        for (int i = 0; i < numRepetitions; ++i) {\n          JSError[] warnings = errorManagers[i].getWarnings();\n          JSError actual = warnings[0];\n          assertEquals(warning, actual.getType());\n\n          // Make sure that source information is always provided.\n          if (!allowSourcelessWarnings) {\n            assertTrue(\"Missing source file name in warning\",\n                actual.sourceName != null && !actual.sourceName.isEmpty());\n            assertTrue(\"Missing line number in warning\",\n                -1 != actual.lineNumber);\n            assertTrue(\"Missing char number in warning\",\n                -1 != actual.getCharno());\n          }\n\n          if (description != null) {\n            assertEquals(description, actual.description);\n          }\n        }\n      }\n\n      if (normalizeEnabled) {\n        normalizeActualCode(compiler, externsRootClone, mainRootClone);\n      }\n\n      boolean codeChange = !mainRootClone.isEquivalentTo(mainRoot);\n      boolean externsChange = !externsRootClone.isEquivalentTo(externsRoot);\n\n      // Generally, externs should not be change by the compiler passes.\n      if (externsChange && !allowExternsChanges) {\n        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n        fail(\"Unexpected changes to externs\" +\n            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n            \"\\nResult: \" + compiler.toSource(externsRoot) +\n            \"\\n\" + explanation);\n      }\n\n      if (!codeChange && !externsChange) {\n        assertFalse(\n            \"compiler.reportCodeChange() was called \" +\n            \"even though nothing changed\",\n            hasCodeChanged);\n      } else {\n        assertTrue(\"compiler.reportCodeChange() should have been called\",\n            hasCodeChanged);\n      }\n\n      if (compareAsTree) {\n        String explanation = expectedRoot.checkTreeEquals(mainRoot);\n        assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      } else if (expected != null) {\n        assertEquals(\n            Joiner.on(\"\").join(expected), compiler.toSource(mainRoot));\n      }\n\n      // Verify normalization is not invalidated.\n      Node normalizeCheckRootClone = root.cloneTree();\n      Node normalizeCheckExternsRootClone = root.getFirstChild();\n      Node normalizeCheckMainRootClone = root.getLastChild();\n      new PrepareAst(compiler).process(\n          normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n      String explanation =\n          normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n      assertNull(\"Node structure normalization invalidated.\\nExpected: \" +\n          compiler.toSource(normalizeCheckMainRootClone) +\n          \"\\nResult: \" + compiler.toSource(mainRoot) +\n          \"\\n\" + explanation, explanation);\n\n      // TODO(johnlenz): enable this for most test cases.\n      // Currently, this invalidates test for while-loops, for-loop\n      // initializers, and other naming.  However, a set of code\n      // (FoldConstants, etc) runs before the Normalize pass, so this can't be\n      // force on everywhere.\n      if (normalizeEnabled) {\n        new Normalize(compiler, true).process(\n            normalizeCheckExternsRootClone, normalizeCheckMainRootClone);\n        explanation =  normalizeCheckMainRootClone.checkTreeEquals(mainRoot);\n        assertNull(\"Normalization invalidated.\\nExpected: \" +\n            compiler.toSource(normalizeCheckMainRootClone) +\n            \"\\nResult: \" + compiler.toSource(mainRoot) +\n            \"\\n\" + explanation, explanation);\n      }\n    } else {\n      String errors = \"\";\n      for (JSError actualError : compiler.getErrors()) {\n        errors += actualError.description + \"\\n\";\n      }\n      assertEquals(\"There should be one error. \" + errors,\n          1, compiler.getErrorCount());\n      assertEquals(errors, error, compiler.getErrors()[0].getType());\n\n      if (warning != null) {\n        String warnings = \"\";\n        for (JSError actualError : compiler.getWarnings()) {\n          warnings += actualError.description + \"\\n\";\n        }\n        assertEquals(\"There should be one warning. \" + warnings,\n            1, compiler.getWarningCount());\n        assertEquals(warnings, warning, compiler.getWarnings()[0].getType());\n      }\n    }\n  }\n",
        "begin_line": 710,
        "end_line": 916,
        "comment": "\n   * Verifies that the compiler pass's JS output matches the expected output\n   * and (optionally) that an expected warning is issued. Or, if an error is\n   * expected, this method just verifies that the error is encountered.\n   *\n   * @param compiler A compiler that has been initialized via\n   *     {@link Compiler#init}\n   * @param expected Expected output, or null if an error is expected\n   * @param error Expected error, or null if no error is expected\n   * @param warning Expected warning, or null if no warning is expected\n   * @param description The description of the expected warning,\n   *      or null if no warning is expected or if the warning's description\n   *      should not be examined\n   ",
        "child_ranges": [
            "(line 713,col 5)-(line 713,col 51)",
            "(line 714,col 5)-(line 714,col 44)",
            "(line 716,col 5)-(line 716,col 39)",
            "(line 717,col 5)-(line 718,col 66)",
            "(line 720,col 5)-(line 722,col 5)",
            "(line 723,col 5)-(line 723,col 44)",
            "(line 724,col 5)-(line 724,col 40)",
            "(line 727,col 5)-(line 727,col 38)",
            "(line 728,col 5)-(line 728,col 54)",
            "(line 729,col 5)-(line 729,col 50)",
            "(line 731,col 5)-(line 731,col 45)",
            "(line 732,col 5)-(line 732,col 68)",
            "(line 733,col 5)-(line 733,col 34)",
            "(line 734,col 5)-(line 734,col 59)",
            "(line 735,col 5)-(line 735,col 35)",
            "(line 737,col 5)-(line 738,col 39)",
            "(line 740,col 5)-(line 783,col 5)",
            "(line 785,col 5)-(line 915,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.normalizeActualCode(com.google.javascript.jscomp.Compiler, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "  private void normalizeActualCode(\n      Compiler compiler, Node externsRoot, Node mainRoot) {\n    Normalize normalize = new Normalize(compiler, false);\n    normalize.process(externsRoot, mainRoot);\n  }\n",
        "begin_line": 918,
        "end_line": 922,
        "comment": "",
        "child_ranges": [
            "(line 920,col 5)-(line 920,col 57)",
            "(line 921,col 5)-(line 921,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String[])",
        "snippet": "  protected Node parseExpectedJs(String[] expected) {\n    Compiler compiler = createCompiler();\n    JSSourceFile[] inputs = new JSSourceFile[expected.length];\n    for (int i = 0; i < expected.length; i++) {\n      inputs[i] = JSSourceFile.fromCode(\"expected\" + i, expected[i]);\n    }\n    compiler.init(externsInputs, inputs, getOptions());\n    Node root = compiler.parseInputs();\n    assertTrue(\"Unexpected parse error(s): \" +\n        Joiner.on(\"\\n\").join(compiler.getErrors()), root != null);\n    Node externsRoot = root.getFirstChild();\n    Node mainRoot = externsRoot.getNext();\n    // Only run the normalize pass, if asked.\n    if (normalizeEnabled && normalizeExpected && !compiler.hasErrors()) {\n      Normalize normalize = new Normalize(compiler, false);\n      normalize.process(externsRoot, mainRoot);\n    }\n    return mainRoot;\n  }\n",
        "begin_line": 927,
        "end_line": 945,
        "comment": "\n   * Parses expected js inputs and returns the root of the parse tree.\n   ",
        "child_ranges": [
            "(line 928,col 5)-(line 928,col 41)",
            "(line 929,col 5)-(line 929,col 62)",
            "(line 930,col 5)-(line 932,col 5)",
            "(line 933,col 5)-(line 933,col 55)",
            "(line 934,col 5)-(line 934,col 39)",
            "(line 935,col 5)-(line 936,col 66)",
            "(line 937,col 5)-(line 937,col 44)",
            "(line 938,col 5)-(line 938,col 42)",
            "(line 940,col 5)-(line 943,col 5)",
            "(line 944,col 5)-(line 944,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.parseExpectedJs(java.lang.String)",
        "snippet": "  protected Node parseExpectedJs(String expected) {\n    return parseExpectedJs(new String[] {expected});\n  }\n",
        "begin_line": 947,
        "end_line": 949,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 948,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleChain(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleChain(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i - 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 955,
        "end_line": 961,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the module before it.\n   ",
        "child_ranges": [
            "(line 956,col 5)-(line 956,col 47)",
            "(line 957,col 5)-(line 959,col 5)",
            "(line 960,col 5)-(line 960,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleStar(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleStar(String... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[0]);\n    }\n    return modules;\n  }\n",
        "begin_line": 967,
        "end_line": 973,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that each module\n   * depends on the first module.\n   ",
        "child_ranges": [
            "(line 968,col 5)-(line 968,col 47)",
            "(line 969,col 5)-(line 971,col 5)",
            "(line 972,col 5)-(line 972,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleBush(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleBush(String ... inputs) {\n    Preconditions.checkState(inputs.length > 2);\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[i == 1 ? 0 : 1]);\n    }\n    return modules;\n  }\n",
        "begin_line": 980,
        "end_line": 987,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a bush formation. In a bush formation, module 2 depends\n   * on module 1, and all other modules depend on module 2.\n   ",
        "child_ranges": [
            "(line 981,col 5)-(line 981,col 48)",
            "(line 982,col 5)-(line 982,col 47)",
            "(line 983,col 5)-(line 985,col 5)",
            "(line 986,col 5)-(line 986,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModuleTree(java.lang.String...)",
        "snippet": "  static JSModule[] createModuleTree(String ... inputs) {\n    JSModule[] modules = createModules(inputs);\n    for (int i = 1; i < modules.length; i++) {\n      modules[i].addDependency(modules[(i - 1) / 2]);\n    }\n    return modules;\n  }\n",
        "begin_line": 994,
        "end_line": 1000,
        "comment": "\n   * Generates a list of modules from a list of inputs, such that modules\n   * form a tree formation. In a tree formation, module N depends on\n   * module `floor(N/2)`, So the modules form a balanced binary tree.\n   ",
        "child_ranges": [
            "(line 995,col 5)-(line 995,col 47)",
            "(line 996,col 5)-(line 998,col 5)",
            "(line 999,col 5)-(line 999,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createModules(java.lang.String...)",
        "snippet": "  static JSModule[] createModules(String... inputs) {\n    JSModule[] modules = new JSModule[inputs.length];\n    for (int i = 0; i < inputs.length; i++) {\n      JSModule module = modules[i] = new JSModule(\"m\" + i);\n      module.add(JSSourceFile.fromCode(\"i\" + i, inputs[i]));\n    }\n    return modules;\n  }\n",
        "begin_line": 1006,
        "end_line": 1013,
        "comment": "\n   * Generates a list of modules from a list of inputs. Does not generate any\n   * dependencies between the modules.\n   ",
        "child_ranges": [
            "(line 1007,col 5)-(line 1007,col 53)",
            "(line 1008,col 5)-(line 1011,col 5)",
            "(line 1012,col 5)-(line 1012,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.BlackHoleErrorManager(com.google.javascript.jscomp.Compiler)",
        "snippet": "    private BlackHoleErrorManager(Compiler compiler) {\n      compiler.setErrorManager(this);\n    }\n",
        "begin_line": 1016,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 7)-(line 1017,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.println(com.google.javascript.jscomp.CheckLevel, com.google.javascript.jscomp.JSError)",
        "snippet": "    @Override\n    public void println(CheckLevel level, JSError error) {}\n",
        "begin_line": 1020,
        "end_line": 1021,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.BlackHoleErrorManager.printSummary()",
        "snippet": "    @Override\n    public void printSummary() {}\n",
        "begin_line": 1023,
        "end_line": 1024,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.createCompiler()",
        "snippet": "  Compiler createCompiler() {\n    Compiler compiler = new Compiler();\n    return compiler;\n  }\n",
        "begin_line": 1027,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1028,col 5)-(line 1028,col 39)",
            "(line 1029,col 5)-(line 1029,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.setExpectedSymbolTableError(com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  protected void setExpectedSymbolTableError(DiagnosticType type) {\n    this.expectedSymbolTableError = type;\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.findQualifiedNameNode(java.lang.String, com.google.javascript.rhino.Node)",
        "snippet": "  protected final Node findQualifiedNameNode(final String name, Node root) {\n    final List<Node> matches = Lists.newArrayList();\n    NodeUtil.visitPostOrder(root,\n        new NodeUtil.Visitor() {\n          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n        },\n        Predicates.<Node>alwaysTrue());\n    return matches.get(0);\n  }\n",
        "begin_line": 1037,
        "end_line": 1049,
        "comment": " Finds the first matching qualified name node in post-traversal order. ",
        "child_ranges": [
            "(line 1038,col 5)-(line 1038,col 52)",
            "(line 1039,col 5)-(line 1047,col 39)",
            "(line 1048,col 5)-(line 1048,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerTestCase",
        "child_classes": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest"
        ],
        "src_path": "test/com/google/javascript/jscomp/CompilerTestCase.java",
        "signature": "com.google.javascript.jscomp.CompilerTestCase.Anonymous-53c1bb9c-eb78-4c50-9eb1-78c0a69aab69.visit(com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void visit(Node n) {\n            if (name.equals(n.getQualifiedName())) {\n              matches.add(n);\n            }\n          }\n",
        "begin_line": 1041,
        "end_line": 1045,
        "comment": "",
        "child_ranges": [
            "(line 1042,col 13)-(line 1044,col 13)"
        ]
    }
]