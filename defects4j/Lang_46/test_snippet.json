[
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.StringEscapeUtilsTest(java.lang.String)",
        "snippet": "    public StringEscapeUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 42,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringEscapeUtilsTest.class);\n        suite.setName(\"StringEscapeUtilsTest Tests\");\n        return suite;\n    }\n",
        "begin_line": 46,
        "end_line": 50,
        "comment": "",
        "child_ranges": [
            "(line 47,col 9)-(line 47,col 69)",
            "(line 48,col 9)-(line 48,col 53)",
            "(line 49,col 9)-(line 49,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringEscapeUtils());\n        Constructor[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n    }\n",
        "begin_line": 53,
        "end_line": 60,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 54,col 9)-(line 54,col 47)",
            "(line 55,col 9)-(line 55,col 79)",
            "(line 56,col 9)-(line 56,col 37)",
            "(line 57,col 9)-(line 57,col 70)",
            "(line 58,col 9)-(line 58,col 86)",
            "(line 59,col 9)-(line 59,col 86)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJava()",
        "snippet": "    public void testEscapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.escapeJava(null));\n        try {\n            StringEscapeUtils.escapeJava(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.escapeJava(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEscapeJava(\"empty string\", \"\", \"\");\n        assertEscapeJava(FOO, FOO);\n        assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\n        assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\n        assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\n        assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n        assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n        assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n        assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\n        assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\n        assertEscapeJava(\"Should use capitalized unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\n\n        assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n                \"He didn't say, \\\"stop!\\\"\");\n        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00A0\",\n                \"This space is non-breaking:\\u00a0\");\n        assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\",\n                \"\\uABCD\\u1234\\u012C\");\n    }\n",
        "begin_line": 63,
        "end_line": 98,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 64,col 9)-(line 64,col 63)",
            "(line 65,col 9)-(line 71,col 9)",
            "(line 72,col 9)-(line 78,col 9)",
            "(line 80,col 9)-(line 80,col 49)",
            "(line 81,col 9)-(line 81,col 35)",
            "(line 82,col 9)-(line 82,col 45)",
            "(line 83,col 9)-(line 83,col 52)",
            "(line 84,col 9)-(line 84,col 73)",
            "(line 85,col 9)-(line 85,col 54)",
            "(line 86,col 9)-(line 86,col 46)",
            "(line 87,col 9)-(line 87,col 46)",
            "(line 88,col 9)-(line 88,col 46)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 84)",
            "(line 92,col 9)-(line 93,col 44)",
            "(line 94,col 9)-(line 95,col 53)",
            "(line 96,col 9)-(line 97,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaWithSlash()",
        "snippet": "    public void testEscapeJavaWithSlash() {\n        final String input = \"String with a slash (/) in it\";\n\n        final String expected = input;\n        final String actual = StringEscapeUtils.escapeJava(input);\n\n        /**\n         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape\n         * in a Java string.\n         */\n        assertEquals(expected, actual);\n    }\n",
        "begin_line": 103,
        "end_line": 114,
        "comment": "\n     * https://issues.apache.org/jira/browse/LANG-421\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 61)",
            "(line 106,col 9)-(line 106,col 38)",
            "(line 107,col 9)-(line 107,col 66)",
            "(line 113,col 9)-(line 113,col 39)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String escaped, String original) throws IOException {\n        assertEscapeJava(null, escaped, original);\n    }\n",
        "begin_line": 116,
        "end_line": 118,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertEscapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n        String converted = StringEscapeUtils.escapeJava(original);\n        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n        assertEquals(message, expected, converted);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.escapeJava(writer, original);\n        assertEquals(expected, writer.toString());\n    }\n",
        "begin_line": 120,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 66)",
            "(line 122,col 9)-(line 122,col 90)",
            "(line 123,col 9)-(line 123,col 51)",
            "(line 125,col 9)-(line 125,col 49)",
            "(line 126,col 9)-(line 126,col 55)",
            "(line 127,col 9)-(line 127,col 50)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeJava()",
        "snippet": "    public void testUnescapeJava() throws IOException {\n        assertEquals(null, StringEscapeUtils.unescapeJava(null));\n        try {\n            StringEscapeUtils.unescapeJava(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n            fail();\n        } catch (RuntimeException ex) {\n        }\n        \n        assertUnescapeJava(\"\", \"\");\n        assertUnescapeJava(\"test\", \"test\");\n        assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n        assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n        assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\n        assertUnescapeJava(\"\\\\\", \"\\\\\");\n        //foo\n        assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n        assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n        assertUnescapeJava(\"unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\n    }\n",
        "begin_line": 130,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 65)",
            "(line 132,col 9)-(line 138,col 9)",
            "(line 139,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 150,col 9)",
            "(line 152,col 9)-(line 152,col 35)",
            "(line 153,col 9)-(line 153,col 43)",
            "(line 154,col 9)-(line 154,col 53)",
            "(line 155,col 9)-(line 155,col 76)",
            "(line 156,col 9)-(line 156,col 66)",
            "(line 157,col 9)-(line 157,col 39)",
            "(line 159,col 9)-(line 159,col 71)",
            "(line 160,col 9)-(line 160,col 71)",
            "(line 161,col 9)-(line 161,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n        assertUnescapeJava(null, unescaped, original);\n    }\n",
        "begin_line": 164,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 54)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.assertUnescapeJava(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n        String expected = unescaped;\n        String actual = StringEscapeUtils.unescapeJava(original);\n\n        assertEquals(\"unescape(String) failed\" +\n                (message == null ? \"\" : (\": \" + message)) +\n                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                // we escape this so we can see it in the error message\n                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                expected, actual);\n\n        StringWriter writer = new StringWriter();\n        StringEscapeUtils.unescapeJava(writer, original);\n        assertEquals(unescaped, writer.toString());\n\n    }\n",
        "begin_line": 168,
        "end_line": 183,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 36)",
            "(line 170,col 9)-(line 170,col 65)",
            "(line 172,col 9)-(line 177,col 34)",
            "(line 179,col 9)-(line 179,col 49)",
            "(line 180,col 9)-(line 180,col 57)",
            "(line 181,col 9)-(line 181,col 51)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeJavaScript()",
        "snippet": "    public void testEscapeJavaScript() {\n        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));\n        try {\n            StringEscapeUtils.escapeJavaScript(null, null);\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        try {\n            StringEscapeUtils.escapeJavaScript(null, \"\");\n            fail();\n        } catch (IOException ex) {\n            fail();\n        } catch (IllegalArgumentException ex) {\n        }\n        \n        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJavaScript(\"He didn't say, \\\"stop!\\\"\"));\n        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n                StringEscapeUtils.escapeJavaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n    }\n",
        "begin_line": 185,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 186,col 9)-(line 186,col 69)",
            "(line 187,col 9)-(line 193,col 9)",
            "(line 194,col 9)-(line 200,col 9)",
            "(line 202,col 9)-(line 202,col 119)",
            "(line 203,col 9)-(line 204,col 131)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtml()",
        "snippet": "    public void testEscapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][1];\n            String original = htmlEscapes[i][2];\n            assertEquals(message, expected, StringEscapeUtils.escapeHtml(original));\n            StringWriter sw = new StringWriter();\n            try {\n            StringEscapeUtils.escapeHtml(sw, original);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n    }\n",
        "begin_line": 226,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 227,col 9)-(line 239,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHtml()",
        "snippet": "    public void testUnescapeHtml() {\n        for (int i = 0; i < htmlEscapes.length; ++i) {\n            String message = htmlEscapes[i][0];\n            String expected = htmlEscapes[i][2];\n            String original = htmlEscapes[i][1];\n            assertEquals(message, expected, StringEscapeUtils.unescapeHtml(original));\n            \n            StringWriter sw = new StringWriter();\n            try {\n            StringEscapeUtils.unescapeHtml(sw, original);\n            } catch (IOException e) {\n            }\n            String actual = original == null ? null : sw.toString();\n            assertEquals(message, expected, actual);\n        }\n        // \\u00E7 is a cedilla (c with wiggle under)\n        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n        // on some locales        \n        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml(\"Fran\\u00E7ais\"));\n        \n        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml(\"Hello&;World\"));\n        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml(\"Hello&#;World\"));\n        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml(\"Hello&# ;World\"));\n        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml(\"Hello&##;World\"));\n    }\n",
        "begin_line": 242,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 243,col 9)-(line 256,col 9)",
            "(line 260,col 9)-(line 260,col 118)",
            "(line 262,col 9)-(line 262,col 85)",
            "(line 263,col 9)-(line 263,col 87)",
            "(line 264,col 9)-(line 264,col 89)",
            "(line 265,col 9)-(line 265,col 89)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeHexCharsHtml()",
        "snippet": "    public void testUnescapeHexCharsHtml() {\n        // Simple easy to grok test \n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#x80;&#x9F;\"));\n        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#X80;&#X9F;\"));\n        // Test all Character values:\n        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n            Character c1 = new Character(i);\n            Character c2 = new Character((char)(i+1));\n            String expected = c1.toString() + c2.toString();\n            String escapedC1 = \"&#x\" + Integer.toHexString((c1.charValue())) + \";\";\n            String escapedC2 = \"&#x\" + Integer.toHexString((c2.charValue())) + \";\";\n            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));\n        }\n    }\n",
        "begin_line": 268,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 108)",
            "(line 271,col 9)-(line 271,col 108)",
            "(line 273,col 9)-(line 280,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeUnknownEntity()",
        "snippet": "    public void testUnescapeUnknownEntity() throws Exception\n    {\n        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml(\"&zzzz;\"));\n    }\n",
        "begin_line": 283,
        "end_line": 286,
        "comment": "",
        "child_ranges": [
            "(line 285,col 9)-(line 285,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeHtmlVersions()",
        "snippet": "    public void testEscapeHtmlVersions() throws Exception\n    {\n        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml(\"\\u0392\"));\n        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml(\"&Beta;\"));\n\n        //todo: refine API for escaping/unescaping specific HTML versions\n\n    }\n",
        "begin_line": 288,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 290,col 9)-(line 290,col 71)",
            "(line 291,col 9)-(line 291,col 73)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeXml()",
        "snippet": "    public void testEscapeXml() throws Exception {\n        assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n        assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n\n        assertEquals(\"XML should use numbers, not names for HTML entities\",\n                \"&#161;\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n        assertEquals(\"XML should use numbers, not names for HTML entities\",\n                \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n\n        assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n        assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\n        assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeXml(null));\n        assertEquals(null, StringEscapeUtils.unescapeXml(null));\n\n        StringWriter sw = new StringWriter();\n        try {\n            StringEscapeUtils.escapeXml(sw, \"<abc>\");\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n\n        sw = new StringWriter();\n        try {\n            StringEscapeUtils.unescapeXml(sw, \"&lt;abc&gt;\");\n        } catch (IOException e) {\n        }\n        assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n    }\n",
        "begin_line": 297,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 74)",
            "(line 299,col 9)-(line 299,col 76)",
            "(line 301,col 9)-(line 302,col 65)",
            "(line 303,col 9)-(line 304,col 67)",
            "(line 306,col 9)-(line 306,col 75)",
            "(line 307,col 9)-(line 307,col 73)",
            "(line 308,col 9)-(line 308,col 58)",
            "(line 309,col 9)-(line 309,col 62)",
            "(line 310,col 9)-(line 310,col 64)",
            "(line 312,col 9)-(line 312,col 45)",
            "(line 313,col 9)-(line 316,col 9)",
            "(line 317,col 9)-(line 317,col 83)",
            "(line 319,col 9)-(line 319,col 32)",
            "(line 320,col 9)-(line 323,col 9)",
            "(line 324,col 9)-(line 324,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeSql()",
        "snippet": "    public void testEscapeSql() throws Exception\n    {\n        assertEquals(\"don''t stop\", StringEscapeUtils.escapeSql(\"don't stop\"));\n        assertEquals(\"\", StringEscapeUtils.escapeSql(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeSql(null));\n    }\n",
        "begin_line": 331,
        "end_line": 336,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 79)",
            "(line 334,col 9)-(line 334,col 58)",
            "(line 335,col 9)-(line 335,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testStandaloneAmphersand()",
        "snippet": "    public void testStandaloneAmphersand() {\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml(\"test & &lt;\"));\n        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\n        assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n    }\n",
        "begin_line": 340,
        "end_line": 345,
        "comment": " http://issues.apache.org/bugzilla/show_bug.cgi?id=38569",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 77)",
            "(line 342,col 9)-(line 342,col 80)",
            "(line 343,col 9)-(line 343,col 76)",
            "(line 344,col 9)-(line 344,col 79)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testLang313()",
        "snippet": "    public void testLang313() {\n        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml(\"& &amp;\"));\n    }\n",
        "begin_line": 347,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 348,col 9)-(line 348,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeCsvString()",
        "snippet": "    public void testEscapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n        assertEquals(\"\\\"foo,bar\\\"\",      StringEscapeUtils.escapeCsv(\"foo,bar\"));\n        assertEquals(\"\\\"foo\\nbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\n        assertEquals(\"\\\"foo\\rbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\n        assertEquals(\"\\\"foo\\\"\\\"bar\\\"\",   StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\n        assertEquals(\"\",   StringEscapeUtils.escapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.escapeCsv(null));\n    }\n",
        "begin_line": 351,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 353,col 9)-(line 353,col 81)",
            "(line 354,col 9)-(line 354,col 81)",
            "(line 355,col 9)-(line 355,col 82)",
            "(line 356,col 9)-(line 356,col 82)",
            "(line 357,col 9)-(line 357,col 82)",
            "(line 358,col 9)-(line 358,col 60)",
            "(line 359,col 9)-(line 359,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testEscapeCsvWriter()",
        "snippet": "    public void testEscapeCsvWriter() throws Exception\n    {\n        checkCsvEscapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvEscapeWriter(\"\\\"foo,bar\\\"\",    \"foo,bar\");\n        checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\",   \"foo\\nbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\",   \"foo\\rbar\");\n        checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\n        checkCsvEscapeWriter(\"\", null);\n        checkCsvEscapeWriter(\"\", \"\");\n    }\n",
        "begin_line": 362,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 364,col 9)-(line 364,col 58)",
            "(line 365,col 9)-(line 365,col 58)",
            "(line 366,col 9)-(line 366,col 59)",
            "(line 367,col 9)-(line 367,col 59)",
            "(line 368,col 9)-(line 368,col 59)",
            "(line 369,col 9)-(line 369,col 39)",
            "(line 370,col 9)-(line 370,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.checkCsvEscapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvEscapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.escapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n",
        "begin_line": 373,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 374,col 9)-(line 380,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeCsvString()",
        "snippet": "    public void testUnescapeCsvString() throws Exception\n    {\n        assertEquals(\"foo.bar\",          StringEscapeUtils.unescapeCsv(\"foo.bar\"));\n        assertEquals(\"foo,bar\",      StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\n        assertEquals(\"foo\\nbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\n        assertEquals(\"foo\\rbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\n        assertEquals(\"foo\\\"bar\",   StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\n        assertEquals(\"\",   StringEscapeUtils.unescapeCsv(\"\"));\n        assertEquals(null, StringEscapeUtils.unescapeCsv(null));\n\n        assertEquals(\"\\\"foo.bar\\\"\",          StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\n    }\n",
        "begin_line": 383,
        "end_line": 394,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 83)",
            "(line 386,col 9)-(line 386,col 83)",
            "(line 387,col 9)-(line 387,col 84)",
            "(line 388,col 9)-(line 388,col 84)",
            "(line 389,col 9)-(line 389,col 84)",
            "(line 390,col 9)-(line 390,col 62)",
            "(line 391,col 9)-(line 391,col 64)",
            "(line 393,col 9)-(line 393,col 91)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.testUnescapeCsvWriter()",
        "snippet": "    public void testUnescapeCsvWriter() throws Exception\n    {\n        checkCsvUnescapeWriter(\"foo.bar\",        \"foo.bar\");\n        checkCsvUnescapeWriter(\"foo,bar\",    \"\\\"foo,bar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\nbar\",   \"\\\"foo\\nbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\rbar\",   \"\\\"foo\\rbar\\\"\");\n        checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\n        checkCsvUnescapeWriter(\"\", null);\n        checkCsvUnescapeWriter(\"\", \"\");\n\n        checkCsvUnescapeWriter(\"\\\"foo.bar\\\"\",        \"\\\"foo.bar\\\"\");\n    }\n",
        "begin_line": 396,
        "end_line": 407,
        "comment": "",
        "child_ranges": [
            "(line 398,col 9)-(line 398,col 60)",
            "(line 399,col 9)-(line 399,col 60)",
            "(line 400,col 9)-(line 400,col 61)",
            "(line 401,col 9)-(line 401,col 61)",
            "(line 402,col 9)-(line 402,col 61)",
            "(line 403,col 9)-(line 403,col 41)",
            "(line 404,col 9)-(line 404,col 39)",
            "(line 406,col 9)-(line 406,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang.StringEscapeUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang/StringEscapeUtilsTest.java",
        "signature": "org.apache.commons.lang.StringEscapeUtilsTest.checkCsvUnescapeWriter(java.lang.String, java.lang.String)",
        "snippet": "    private void checkCsvUnescapeWriter(String expected, String value) {\n        try {\n            StringWriter writer = new StringWriter();\n            StringEscapeUtils.unescapeCsv(writer, value);\n            assertEquals(expected, writer.toString());\n        } catch (IOException e) {\n            fail(\"Threw: \" + e);\n        }\n    }\n",
        "begin_line": 409,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 410,col 9)-(line 416,col 9)"
        ]
    }
]