[
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testMissedEndEvent()",
        "snippet": "  @Test\n  public void testMissedEndEvent()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k  = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,\n                                                                             1.0e-10, 1.0e-10);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      integrator.setInitialStepSize(60.0);\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n      integrator.setInitialStepSize(60.0);\n      integrator.addEventHandler(new EventHandler() {\n\n          public void init(double t0, double[] y0, double t) {\n          }\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public Action eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return Action.CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);\n      for (int i = 0; i < y.length; ++i) {\n          Assert.assertEquals(y0[i] * FastMath.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);\n      }\n\n  }\n",
        "begin_line": 41,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 45,col 7)-(line 45,col 49)",
            "(line 46,col 7)-(line 46,col 49)",
            "(line 47,col 7)-(line 47,col 53)",
            "(line 48,col 7)-(line 59,col 8)",
            "(line 61,col 7)-(line 62,col 95)",
            "(line 64,col 7)-(line 64,col 43)",
            "(line 65,col 7)-(line 67,col 7)",
            "(line 68,col 7)-(line 68,col 43)",
            "(line 70,col 7)-(line 70,col 42)",
            "(line 71,col 7)-(line 71,col 67)",
            "(line 72,col 7)-(line 72,col 50)",
            "(line 73,col 7)-(line 75,col 7)",
            "(line 77,col 7)-(line 77,col 42)",
            "(line 78,col 7)-(line 94,col 49)",
            "(line 95,col 7)-(line 95,col 66)",
            "(line 96,col 7)-(line 96,col 56)",
            "(line 97,col 7)-(line 99,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-edbb6e46-4c8b-4047-9a29-e2e83a9fdaf2.getDimension()",
        "snippet": "          public int getDimension() {\n              return k.length;\n          }\n",
        "begin_line": 50,
        "end_line": 52,
        "comment": "",
        "child_ranges": [
            "(line 51,col 15)-(line 51,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-42c82e63-fc7c-43a8-8f95-61e3e84e2ac4.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n",
        "begin_line": 54,
        "end_line": 58,
        "comment": "",
        "child_ranges": [
            "(line 55,col 15)-(line 57,col 15)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-8b1015df-5c18-4241-9d18-41505490182c.init(double, double[], double)",
        "snippet": "          public void init(double t0, double[] y0, double t) {\n          }\n",
        "begin_line": 80,
        "end_line": 81,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-8cce3788-e1f7-447e-9c18-bb5e5c5636fe.resetState(double, double[])",
        "snippet": "          public void resetState(double t, double[] y) {\n          }\n",
        "begin_line": 83,
        "end_line": 84,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-e24d7ba9-9dce-40bf-aced-28761a11075a.g(double, double[])",
        "snippet": "          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "",
        "child_ranges": [
            "(line 87,col 15)-(line 87,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-07f8cf44-59bf-45b5-a6c2-a9f9b44c6289.eventOccurred(double, double[], boolean)",
        "snippet": "          public Action eventOccurred(double t, double[] y, boolean increasing) {\n              Assert.assertEquals(tEvent, t, 5.0e-6);\n              return Action.CONTINUE;\n          }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "",
        "child_ranges": [
            "(line 91,col 15)-(line 91,col 53)",
            "(line 92,col 15)-(line 92,col 37)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testDimensionCheck()",
        "snippet": "  @Test(expected=DimensionMismatchException.class)\n  public void testDimensionCheck()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n      TestProblem1 pb = new TestProblem1();\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                             1.0e-10, 1.0e-10);\n      integrator.integrate(pb,\n                           0.0, new double[pb.getDimension()+10],\n                           1.0, new double[pb.getDimension()+10]);\n      Assert.fail(\"an exception should have been thrown\");\n  }\n",
        "begin_line": 103,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 107,col 7)-(line 107,col 43)",
            "(line 108,col 7)-(line 109,col 95)",
            "(line 110,col 7)-(line 112,col 66)",
            "(line 113,col 7)-(line 113,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testNullIntervalCheck()",
        "snippet": "  @Test(expected=NumberIsTooSmallException.class)\n  public void testNullIntervalCheck()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n      TestProblem1 pb = new TestProblem1();\n      DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0,\n                                                                             1.0e-10, 1.0e-10);\n      integrator.integrate(pb,\n                           0.0, new double[pb.getDimension()],\n                           0.0, new double[pb.getDimension()]);\n      Assert.fail(\"an exception should have been thrown\");\n  }\n",
        "begin_line": 116,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 120,col 7)-(line 120,col 43)",
            "(line 121,col 7)-(line 122,col 95)",
            "(line 123,col 7)-(line 125,col 63)",
            "(line 126,col 7)-(line 126,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testMinStep()",
        "snippet": "  @Test(expected=NumberIsTooSmallException.class)\n  public void testMinStep()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n\n      TestProblem1 pb = new TestProblem1();\n      double minStep = 0.1 * (pb.getFinalTime() - pb.getInitialTime());\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double[] vecAbsoluteTolerance = { 1.0e-15, 1.0e-16 };\n      double[] vecRelativeTolerance = { 1.0e-15, 1.0e-16 };\n\n      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                  vecAbsoluteTolerance,\n                                                                  vecRelativeTolerance);\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb,\n                      pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n      Assert.fail(\"an exception should have been thrown\");\n\n  }\n",
        "begin_line": 129,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 134,col 7)-(line 134,col 43)",
            "(line 135,col 7)-(line 135,col 71)",
            "(line 136,col 7)-(line 136,col 63)",
            "(line 137,col 7)-(line 137,col 59)",
            "(line 138,col 7)-(line 138,col 59)",
            "(line 140,col 7)-(line 142,col 88)",
            "(line 143,col 7)-(line 143,col 69)",
            "(line 144,col 7)-(line 144,col 36)",
            "(line 145,col 7)-(line 147,col 72)",
            "(line 148,col 7)-(line 148,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testIncreasingTolerance()",
        "snippet": "  @Test\n  public void testIncreasingTolerance()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n\n    int previousCalls = Integer.MAX_VALUE;\n    AdaptiveStepsizeIntegrator integ =\n        new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY,\n                                       Double.NaN, Double.NaN);\n    for (int i = -12; i < -2; ++i) {\n      TestProblem1 pb = new TestProblem1();\n      double minStep = 0;\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double scalAbsoluteTolerance = FastMath.pow(10.0, i);\n      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n      integ.setStepSizeControl(minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);\n\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb,\n                      pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n\n      // the 1.3 factor is only valid for this test\n      // and has been obtained from trial and error\n      // there is no general relation between local and global errors\n      Assert.assertTrue(handler.getMaximalValueError() < (1.3 * scalAbsoluteTolerance));\n      Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n\n      int calls = pb.getCalls();\n      Assert.assertEquals(integ.getEvaluations(), calls);\n      Assert.assertTrue(calls <= previousCalls);\n      previousCalls = calls;\n\n    }\n\n  }\n",
        "begin_line": 152,
        "end_line": 188,
        "comment": "",
        "child_ranges": [
            "(line 157,col 5)-(line 157,col 42)",
            "(line 158,col 5)-(line 160,col 63)",
            "(line 161,col 5)-(line 186,col 5)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testTooLargeFirstStep()",
        "snippet": "  @Test\n  public void testTooLargeFirstStep()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n\n      AdaptiveStepsizeIntegrator integ =\n              new DormandPrince853Integrator(0, Double.POSITIVE_INFINITY, Double.NaN, Double.NaN);\n      final double start = 0.0;\n      final double end   = 0.001;\n      FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return 1;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));\n              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));\n              yDot[0] = -100.0 * y[0];\n          }\n\n      };\n\n      integ.setStepSizeControl(0, 1.0, 1.0e-6, 1.0e-8);\n      integ.integrate(equations, start, new double[] { 1.0 }, end, new double[1]);\n\n  }\n",
        "begin_line": 190,
        "end_line": 216,
        "comment": "",
        "child_ranges": [
            "(line 195,col 7)-(line 196,col 98)",
            "(line 197,col 7)-(line 197,col 31)",
            "(line 198,col 7)-(line 198,col 33)",
            "(line 199,col 7)-(line 211,col 8)",
            "(line 213,col 7)-(line 213,col 55)",
            "(line 214,col 7)-(line 214,col 82)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-a70a6ef7-488f-47e3-9d95-1e4f92c7a487.getDimension()",
        "snippet": "          public int getDimension() {\n              return 1;\n          }\n",
        "begin_line": 201,
        "end_line": 203,
        "comment": "",
        "child_ranges": [
            "(line 202,col 15)-(line 202,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-3d33c07c-71be-437e-a4b6-e410ec0a8ba6.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              Assert.assertTrue(t >= FastMath.nextAfter(start, Double.NEGATIVE_INFINITY));\n              Assert.assertTrue(t <= FastMath.nextAfter(end,   Double.POSITIVE_INFINITY));\n              yDot[0] = -100.0 * y[0];\n          }\n",
        "begin_line": 205,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 206,col 15)-(line 206,col 90)",
            "(line 207,col 15)-(line 207,col 90)",
            "(line 208,col 15)-(line 208,col 38)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testBackward()",
        "snippet": "  @Test\n  public void testBackward()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n\n      TestProblem5 pb = new TestProblem5();\n      double minStep = 0;\n      double maxStep = pb.getFinalTime() - pb.getInitialTime();\n      double scalAbsoluteTolerance = 1.0e-8;\n      double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n      FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                  scalAbsoluteTolerance,\n                                                                  scalRelativeTolerance);\n      TestProblemHandler handler = new TestProblemHandler(pb, integ);\n      integ.addStepHandler(handler);\n      integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),\n                      pb.getFinalTime(), new double[pb.getDimension()]);\n\n      Assert.assertTrue(handler.getLastError() < 1.1e-7);\n      Assert.assertTrue(handler.getMaximalValueError() < 1.1e-7);\n      Assert.assertEquals(0, handler.getMaximalTimeError(), 1.0e-12);\n      Assert.assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n  }\n",
        "begin_line": 218,
        "end_line": 241,
        "comment": "",
        "child_ranges": [
            "(line 223,col 7)-(line 223,col 43)",
            "(line 224,col 7)-(line 224,col 25)",
            "(line 225,col 7)-(line 225,col 63)",
            "(line 226,col 7)-(line 226,col 44)",
            "(line 227,col 7)-(line 227,col 66)",
            "(line 229,col 7)-(line 231,col 89)",
            "(line 232,col 7)-(line 232,col 69)",
            "(line 233,col 7)-(line 233,col 36)",
            "(line 234,col 7)-(line 235,col 72)",
            "(line 237,col 7)-(line 237,col 57)",
            "(line 238,col 7)-(line 238,col 65)",
            "(line 239,col 7)-(line 239,col 69)",
            "(line 240,col 7)-(line 240,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testEvents()",
        "snippet": "  @Test\n  public void testEvents()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n\n    TestProblem4 pb = new TestProblem4();\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-9;\n    double scalRelativeTolerance = 0.01 * scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n    TestProblemHandler handler = new TestProblemHandler(pb, integ);\n    integ.addStepHandler(handler);\n    EventHandler[] functions = pb.getEventsHandlers();\n    double convergence = 1.0e-8 * maxStep;\n    for (int l = 0; l < functions.length; ++l) {\n      integ.addEventHandler(functions[l], Double.POSITIVE_INFINITY, convergence, 1000);\n    }\n    Assert.assertEquals(functions.length, integ.getEventHandlers().size());\n    integ.integrate(pb,\n                    pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    Assert.assertEquals(0, handler.getMaximalValueError(), 2.1e-7);\n    Assert.assertEquals(0, handler.getMaximalTimeError(), convergence);\n    Assert.assertEquals(12.0, handler.getLastTime(), convergence);\n    integ.clearEventHandlers();\n    Assert.assertEquals(0, integ.getEventHandlers().size());\n\n  }\n",
        "begin_line": 243,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 248,col 41)",
            "(line 249,col 5)-(line 249,col 23)",
            "(line 250,col 5)-(line 250,col 61)",
            "(line 251,col 5)-(line 251,col 42)",
            "(line 252,col 5)-(line 252,col 64)",
            "(line 254,col 5)-(line 256,col 87)",
            "(line 257,col 5)-(line 257,col 67)",
            "(line 258,col 5)-(line 258,col 34)",
            "(line 259,col 5)-(line 259,col 54)",
            "(line 260,col 5)-(line 260,col 42)",
            "(line 261,col 5)-(line 263,col 5)",
            "(line 264,col 5)-(line 264,col 75)",
            "(line 265,col 5)-(line 267,col 70)",
            "(line 269,col 5)-(line 269,col 67)",
            "(line 270,col 5)-(line 270,col 71)",
            "(line 271,col 5)-(line 271,col 66)",
            "(line 272,col 5)-(line 272,col 31)",
            "(line 273,col 5)-(line 273,col 60)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testKepler()",
        "snippet": "  @Test\n  public void testKepler()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n\n    final TestProblem3 pb  = new TestProblem3(0.9);\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-8;\n    double scalRelativeTolerance = scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                                scalAbsoluteTolerance,\n                                                                scalRelativeTolerance);\n    integ.addStepHandler(new KeplerHandler(pb));\n    integ.integrate(pb,\n                    pb.getInitialTime(), pb.getInitialState(),\n                    pb.getFinalTime(), new double[pb.getDimension()]);\n\n    Assert.assertEquals(integ.getEvaluations(), pb.getCalls());\n    Assert.assertTrue(pb.getCalls() < 3300);\n\n  }\n",
        "begin_line": 277,
        "end_line": 299,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 51)",
            "(line 283,col 5)-(line 283,col 23)",
            "(line 284,col 5)-(line 284,col 61)",
            "(line 285,col 5)-(line 285,col 42)",
            "(line 286,col 5)-(line 286,col 57)",
            "(line 288,col 5)-(line 290,col 87)",
            "(line 291,col 5)-(line 291,col 48)",
            "(line 292,col 5)-(line 294,col 70)",
            "(line 296,col 5)-(line 296,col 63)",
            "(line 297,col 5)-(line 297,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testVariableSteps()",
        "snippet": "  @Test\n  public void testVariableSteps()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n\n    final TestProblem3 pb  = new TestProblem3(0.9);\n    double minStep = 0;\n    double maxStep = pb.getFinalTime() - pb.getInitialTime();\n    double scalAbsoluteTolerance = 1.0e-8;\n    double scalRelativeTolerance = scalAbsoluteTolerance;\n\n    FirstOrderIntegrator integ = new DormandPrince853Integrator(minStep, maxStep,\n                                                               scalAbsoluteTolerance,\n                                                               scalRelativeTolerance);\n    integ.addStepHandler(new VariableHandler());\n    double stopTime = integ.integrate(pb,\n                                      pb.getInitialTime(), pb.getInitialState(),\n                                      pb.getFinalTime(), new double[pb.getDimension()]);\n    Assert.assertEquals(pb.getFinalTime(), stopTime, 1.0e-10);\n    Assert.assertEquals(\"Dormand-Prince 8 (5, 3)\", integ.getName());\n  }\n",
        "begin_line": 301,
        "end_line": 321,
        "comment": "",
        "child_ranges": [
            "(line 306,col 5)-(line 306,col 51)",
            "(line 307,col 5)-(line 307,col 23)",
            "(line 308,col 5)-(line 308,col 61)",
            "(line 309,col 5)-(line 309,col 42)",
            "(line 310,col 5)-(line 310,col 57)",
            "(line 312,col 5)-(line 314,col 86)",
            "(line 315,col 5)-(line 315,col 48)",
            "(line 316,col 5)-(line 318,col 88)",
            "(line 319,col 5)-(line 319,col 62)",
            "(line 320,col 5)-(line 320,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testUnstableDerivative()",
        "snippet": "  @Test\n  public void testUnstableDerivative()\n      throws DimensionMismatchException, NumberIsTooSmallException,\n             MaxCountExceededException, NoBracketingException {\n    final StepProblem stepProblem = new StepProblem(0.0, 1.0, 2.0);\n    FirstOrderIntegrator integ =\n      new DormandPrince853Integrator(0.1, 10, 1.0e-12, 0.0);\n    integ.addEventHandler(stepProblem, 1.0, 1.0e-12, 1000);\n    double[] y = { Double.NaN };\n    integ.integrate(stepProblem, 0.0, new double[] { 0.0 }, 10.0, y);\n    Assert.assertEquals(8.0, y[0], 1.0e-12);\n  }\n",
        "begin_line": 323,
        "end_line": 334,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 67)",
            "(line 328,col 5)-(line 329,col 60)",
            "(line 330,col 5)-(line 330,col 59)",
            "(line 331,col 5)-(line 331,col 32)",
            "(line 332,col 5)-(line 332,col 69)",
            "(line 333,col 5)-(line 333,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.testEventsScheduling()",
        "snippet": "  @Test\n  public void testEventsScheduling() {\n\n      FirstOrderDifferentialEquations sincos = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return 2;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              yDot[0] =  y[1];\n              yDot[1] = -y[0];\n          }\n\n      };\n\n      SchedulingChecker sinChecker = new SchedulingChecker(0); // events at 0, PI, 2PI ...\n      SchedulingChecker cosChecker = new SchedulingChecker(1); // events at PI/2, 3PI/2, 5PI/2 ...\n\n      FirstOrderIntegrator integ =\n              new DormandPrince853Integrator(0.001, 1.0, 1.0e-12, 0.0);\n      integ.addEventHandler(sinChecker, 0.01, 1.0e-7, 100);\n      integ.addStepHandler(sinChecker);\n      integ.addEventHandler(cosChecker, 0.01, 1.0e-7, 100);\n      integ.addStepHandler(cosChecker);\n      double   t0 = 0.5;\n      double[] y0 = new double[] { FastMath.sin(t0), FastMath.cos(t0) };\n      double   t  = 10.0;\n      double[] y  = new double[2];\n      integ.integrate(sincos, t0, y0, t, y);\n\n  }\n",
        "begin_line": 336,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 339,col 7)-(line 350,col 8)",
            "(line 352,col 7)-(line 352,col 62)",
            "(line 353,col 7)-(line 353,col 62)",
            "(line 355,col 7)-(line 356,col 71)",
            "(line 357,col 7)-(line 357,col 59)",
            "(line 358,col 7)-(line 358,col 39)",
            "(line 359,col 7)-(line 359,col 59)",
            "(line 360,col 7)-(line 360,col 39)",
            "(line 361,col 7)-(line 361,col 24)",
            "(line 362,col 7)-(line 362,col 72)",
            "(line 363,col 7)-(line 363,col 25)",
            "(line 364,col 7)-(line 364,col 34)",
            "(line 365,col 7)-(line 365,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-89f177a3-0be9-4fe1-a1a9-44624adb03be.getDimension()",
        "snippet": "          public int getDimension() {\n              return 2;\n          }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "",
        "child_ranges": [
            "(line 342,col 15)-(line 342,col 23)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.Anonymous-ca244af8-e843-4681-b890-3be7b0070070.computeDerivatives(double, double[], double[])",
        "snippet": "          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              yDot[0] =  y[1];\n              yDot[1] = -y[0];\n          }\n",
        "begin_line": 345,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 346,col 15)-(line 346,col 30)",
            "(line 347,col 15)-(line 347,col 30)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.SchedulingChecker.SchedulingChecker(int)",
        "snippet": "      public SchedulingChecker(int index) {\n          this.index = index;\n      }\n",
        "begin_line": 374,
        "end_line": 376,
        "comment": "",
        "child_ranges": [
            "(line 375,col 11)-(line 375,col 29)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.SchedulingChecker.init(double, double[], double)",
        "snippet": "      public void init(double t0, double[] y0, double t) {\n          tMin = t0;\n      }\n",
        "begin_line": 378,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 379,col 11)-(line 379,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.SchedulingChecker.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean)",
        "snippet": "      public void handleStep(StepInterpolator interpolator, boolean isLast) {\n          tMin = interpolator.getCurrentTime();\n      }\n",
        "begin_line": 382,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 383,col 11)-(line 383,col 47)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.SchedulingChecker.g(double, double[])",
        "snippet": "      public double g(double t, double[]  y) {\n          // once a step has been handled by handleStep,\n          // events checking should only refer to dates after the step\n          Assert.assertTrue(t >= tMin);\n          return y[index];\n      }\n",
        "begin_line": 386,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 389,col 11)-(line 389,col 39)",
            "(line 390,col 11)-(line 390,col 26)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.SchedulingChecker.eventOccurred(double, double[], boolean)",
        "snippet": "      public Action eventOccurred(double t, double[] y, boolean increasing) {\n          return Action.RESET_STATE;\n      }\n",
        "begin_line": 393,
        "end_line": 395,
        "comment": "",
        "child_ranges": [
            "(line 394,col 11)-(line 394,col 36)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.SchedulingChecker.resetState(double, double[])",
        "snippet": "      public void resetState(double t, double[] y) {\n          // in fact, we don't need to reset anything for the test\n      }\n",
        "begin_line": 397,
        "end_line": 399,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "KeplerHandler(TestProblem3)",
        "snippet": "    public KeplerHandler(TestProblem3 pb) {\n      this.pb = pb;\n    }\n",
        "begin_line": 404,
        "end_line": 406,
        "comment": "",
        "child_ranges": [
            "(line 405,col 7)-(line 405,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.KeplerHandler.init(double, double[], double)",
        "snippet": "    public void init(double t0, double[] y0, double t) {\n      nbSteps = 0;\n      maxError = 0;\n    }\n",
        "begin_line": 407,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 408,col 7)-(line 408,col 18)",
            "(line 409,col 7)-(line 409,col 19)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.KeplerHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator, boolean isLast)\n        throws MaxCountExceededException {\n\n      ++nbSteps;\n      for (int a = 1; a < 10; ++a) {\n\n        double prev   = interpolator.getPreviousTime();\n        double curr   = interpolator.getCurrentTime();\n        double interp = ((10 - a) * prev + a * curr) / 10;\n        interpolator.setInterpolatedTime(interp);\n\n        double[] interpolatedY = interpolator.getInterpolatedState ();\n        double[] theoreticalY  = pb.computeTheoreticalState(interpolator.getInterpolatedTime());\n        double dx = interpolatedY[0] - theoreticalY[0];\n        double dy = interpolatedY[1] - theoreticalY[1];\n        double error = dx * dx + dy * dy;\n        if (error > maxError) {\n          maxError = error;\n        }\n      }\n      if (isLast) {\n        Assert.assertTrue(maxError < 2.4e-10);\n        Assert.assertTrue(nbSteps < 150);\n      }\n    }\n",
        "begin_line": 411,
        "end_line": 435,
        "comment": "",
        "child_ranges": [
            "(line 414,col 7)-(line 414,col 16)",
            "(line 415,col 7)-(line 430,col 7)",
            "(line 431,col 7)-(line 434,col 7)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.VariableHandler()",
        "snippet": "    public VariableHandler() {\n        firstTime = true;\n        minStep = 0;\n        maxStep = 0;\n    }\n",
        "begin_line": 442,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 443,col 9)-(line 443,col 25)",
            "(line 444,col 9)-(line 444,col 20)",
            "(line 445,col 9)-(line 445,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.init(double, double[], double)",
        "snippet": "    public void init(double t0, double[] y0, double t) {\n      firstTime = true;\n      minStep = 0;\n      maxStep = 0;\n    }\n",
        "begin_line": 447,
        "end_line": 451,
        "comment": "",
        "child_ranges": [
            "(line 448,col 7)-(line 448,col 23)",
            "(line 449,col 7)-(line 449,col 18)",
            "(line 450,col 7)-(line 450,col 18)"
        ]
    },
    {
        "class_name": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest",
        "child_classes": [],
        "src_path": "src/test/java/org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "signature": "org.apache.commons.math3.ode.nonstiff.DormandPrince853IntegratorTest.VariableHandler.handleStep(org.apache.commons.math3.ode.sampling.StepInterpolator, boolean)",
        "snippet": "    public void handleStep(StepInterpolator interpolator,\n                           boolean isLast) {\n\n      double step = FastMath.abs(interpolator.getCurrentTime()\n                             - interpolator.getPreviousTime());\n      if (firstTime) {\n        minStep   = FastMath.abs(step);\n        maxStep   = minStep;\n        firstTime = false;\n      } else {\n        if (step < minStep) {\n          minStep = step;\n        }\n        if (step > maxStep) {\n          maxStep = step;\n        }\n      }\n\n      if (isLast) {\n        Assert.assertTrue(minStep < (1.0 / 100.0));\n        Assert.assertTrue(maxStep > (1.0 / 2.0));\n      }\n    }\n",
        "begin_line": 452,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 455,col 7)-(line 456,col 63)",
            "(line 457,col 7)-(line 468,col 7)",
            "(line 470,col 7)-(line 473,col 7)"
        ]
    }
]