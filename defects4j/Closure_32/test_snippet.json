[
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.setUp()",
        "snippet": "  @Override\n  public void setUp() {\n    externs = DEFAULT_EXTERNS;\n    lastCompiler = null;\n  }\n",
        "begin_line": 65,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 30)",
            "(line 68,col 5)-(line 68,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424()",
        "snippet": "  public void testBug1949424() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO'); FOO.bar = 3;\",\n         CLOSURE_COMPILED + \"var FOO$bar = 3;\");\n  }\n",
        "begin_line": 71,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 54)",
            "(line 73,col 5)-(line 73,col 38)",
            "(line 74,col 5)-(line 74,col 31)",
            "(line 75,col 5)-(line 76,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1949424_v2()",
        "snippet": "  public void testBug1949424_v2() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.closurePass = true;\n    test(options, CLOSURE_BOILERPLATE + \"goog.provide('FOO.BAR'); FOO.BAR = 3;\",\n         CLOSURE_COMPILED + \"var FOO$BAR = 3;\");\n  }\n",
        "begin_line": 79,
        "end_line": 85,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 54)",
            "(line 81,col 5)-(line 81,col 38)",
            "(line 82,col 5)-(line 82,col 31)",
            "(line 83,col 5)-(line 84,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1956277()",
        "snippet": "  public void testBug1956277() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    test(options, \"var CONST = {}; CONST.bar = null;\" +\n         \"function f(url) { CONST.bar = url; }\",\n         \"var CONST$bar = null; function f(url) { CONST$bar = url; }\");\n  }\n",
        "begin_line": 87,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 88,col 5)-(line 88,col 54)",
            "(line 89,col 5)-(line 89,col 38)",
            "(line 90,col 5)-(line 90,col 35)",
            "(line 91,col 5)-(line 93,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug1962380()",
        "snippet": "  public void testBug1962380() {\n    CompilerOptions options = createCompilerOptions();\n    options.collapseProperties = true;\n    options.inlineVariables = true;\n    options.generateExports = true;\n    test(options,\n         CLOSURE_BOILERPLATE + \"/** @export */ goog.CONSTANT = 1;\" +\n         \"var x = goog.CONSTANT;\",\n         \"(function() {})('goog.CONSTANT', 1);\" +\n         \"var x = 1;\");\n  }\n",
        "begin_line": 96,
        "end_line": 106,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 54)",
            "(line 98,col 5)-(line 98,col 38)",
            "(line 99,col 5)-(line 99,col 35)",
            "(line 100,col 5)-(line 100,col 35)",
            "(line 101,col 5)-(line 105,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2410122()",
        "snippet": "  public void testBug2410122() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    options.closurePass = true;\n    test(options,\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"/** @export */ function G() { goog.base(this); } \" +\n         \"goog.inherits(G, F);\",\n         \"var goog = {};\" +\n         \"function F() {}\" +\n         \"function G() { F.call(this); } \" +\n         \"goog.inherits(G, F); goog.exportSymbol('G', G);\");\n  }\n",
        "begin_line": 108,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 109,col 5)-(line 109,col 54)",
            "(line 110,col 5)-(line 110,col 35)",
            "(line 111,col 5)-(line 111,col 31)",
            "(line 112,col 5)-(line 120,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue90()",
        "snippet": "  public void testIssue90() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.removeDeadCode = true;\n    test(options,\n         \"var x; x && alert(1);\",\n         \"\");\n  }\n",
        "begin_line": 123,
        "end_line": 131,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 54)",
            "(line 125,col 5)-(line 125,col 33)",
            "(line 126,col 5)-(line 126,col 35)",
            "(line 127,col 5)-(line 127,col 34)",
            "(line 128,col 5)-(line 130,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOff()",
        "snippet": "  public void testClosurePassOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = false;\n    testSame(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\");\n    testSame(\n        options,\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\");\n  }\n",
        "begin_line": 133,
        "end_line": 143,
        "comment": "",
        "child_ranges": [
            "(line 134,col 5)-(line 134,col 54)",
            "(line 135,col 5)-(line 135,col 32)",
            "(line 136,col 5)-(line 138,col 78)",
            "(line 139,col 5)-(line 142,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassOn()",
        "snippet": "  public void testClosurePassOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(\n        options,\n        \"var goog = {}; goog.require = function(x) {}; goog.require('foo');\",\n        ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);\n    test(\n        options,\n        \"/** @define {boolean} */ var COMPILED = false;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"goog.getCssName('foo');\",\n        \"var COMPILED = true;\" +\n        \"var goog = {}; goog.getCssName = function(x) {};\" +\n        \"'foo';\");\n  }\n",
        "begin_line": 145,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 146,col 5)-(line 146,col 54)",
            "(line 147,col 5)-(line 147,col 31)",
            "(line 148,col 5)-(line 151,col 56)",
            "(line 152,col 5)-(line 159,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCssNameCheck()",
        "snippet": "  public void testCssNameCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options, \"var x = 'foo';\",\n         CheckMissingGetCssName.MISSING_GETCSSNAME);\n  }\n",
        "begin_line": 162,
        "end_line": 169,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 54)",
            "(line 164,col 5)-(line 164,col 31)",
            "(line 165,col 5)-(line 165,col 59)",
            "(line 166,col 5)-(line 166,col 52)",
            "(line 167,col 5)-(line 168,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug2592659()",
        "snippet": "  public void testBug2592659() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.checkTypes = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.WARNING;\n    options.checkMissingGetCssNameBlacklist = \"foo\";\n    test(options,\n        \"var goog = {};\\n\" +\n        \"/**\\n\" +\n        \" * @param {string} className\\n\" +\n        \" * @param {string=} opt_modifier\\n\" +\n        \" * @return {string}\\n\" +\n        \"*/\\n\" +\n        \"goog.getCssName = function(className, opt_modifier) {}\\n\" +\n        \"var x = goog.getCssName(123, 'a');\",\n        TypeValidator.TYPE_MISMATCH_WARNING);\n  }\n",
        "begin_line": 171,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 172,col 5)-(line 172,col 54)",
            "(line 173,col 5)-(line 173,col 31)",
            "(line 174,col 5)-(line 174,col 30)",
            "(line 175,col 5)-(line 175,col 61)",
            "(line 176,col 5)-(line 176,col 52)",
            "(line 177,col 5)-(line 186,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner1()",
        "snippet": "  public void testTypedefBeforeOwner1() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo = {}; foo.Bar.Type; foo.Bar = function() {};\");\n  }\n",
        "begin_line": 189,
        "end_line": 198,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 190,col 54)",
            "(line 191,col 5)-(line 191,col 31)",
            "(line 192,col 5)-(line 197,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypedefBeforeOwner2()",
        "snippet": "  public void testTypedefBeforeOwner2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options,\n         \"goog.provide('foo.Bar.Type');\\n\" +\n         \"goog.provide('foo.Bar');\\n\" +\n         \"/** @typedef {number} */ foo.Bar.Type;\\n\" +\n         \"foo.Bar = function() {};\",\n         \"var foo$Bar$Type; var foo$Bar = function() {};\");\n  }\n",
        "begin_line": 200,
        "end_line": 210,
        "comment": "",
        "child_ranges": [
            "(line 201,col 5)-(line 201,col 54)",
            "(line 202,col 5)-(line 202,col 31)",
            "(line 203,col 5)-(line 203,col 38)",
            "(line 204,col 5)-(line 209,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportedNames()",
        "snippet": "  public void testExportedNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('b', goog);\",\n         \"var a = true; var c = {}; c.exportSymbol('b', c);\");\n    test(options,\n         \"/** @define {boolean} */ var COMPILED = false;\" +\n         \"var goog = {}; goog.exportSymbol('a', goog);\",\n         \"var b = true; var c = {}; c.exportSymbol('a', c);\");\n  }\n",
        "begin_line": 212,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 213,col 5)-(line 213,col 54)",
            "(line 214,col 5)-(line 214,col 31)",
            "(line 215,col 5)-(line 215,col 58)",
            "(line 216,col 5)-(line 219,col 62)",
            "(line 220,col 5)-(line 223,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOn()",
        "snippet": "  public void testCheckGlobalThisOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 226,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 54)",
            "(line 228,col 5)-(line 228,col 39)",
            "(line 229,col 5)-(line 229,col 52)",
            "(line 230,col 5)-(line 230,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSusiciousCodeOff()",
        "snippet": "  public void testSusiciousCodeOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = false;\n    options.checkGlobalThisLevel = CheckLevel.ERROR;\n    test(options, \"function f() { this.y = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 233,
        "end_line": 238,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 54)",
            "(line 235,col 5)-(line 235,col 40)",
            "(line 236,col 5)-(line 236,col 52)",
            "(line 237,col 5)-(line 237,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalThisOff()",
        "snippet": "  public void testCheckGlobalThisOff() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkGlobalThisLevel = CheckLevel.OFF;\n    testSame(options, \"function f() { this.y = 3; }\");\n  }\n",
        "begin_line": 240,
        "end_line": 245,
        "comment": "",
        "child_ranges": [
            "(line 241,col 5)-(line 241,col 54)",
            "(line 242,col 5)-(line 242,col 39)",
            "(line 243,col 5)-(line 243,col 50)",
            "(line 244,col 5)-(line 244,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresAndCheckProvidesOff()",
        "snippet": "  public void testCheckRequiresAndCheckProvidesOff() {\n    testSame(createCompilerOptions(), new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    });\n  }\n",
        "begin_line": 247,
        "end_line": 252,
        "comment": "",
        "child_ranges": [
            "(line 248,col 5)-(line 251,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckRequiresOn()",
        "snippet": "  public void testCheckRequiresOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkRequires = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckRequiresForConstructors.MISSING_REQUIRE_WARNING);\n  }\n",
        "begin_line": 254,
        "end_line": 261,
        "comment": "",
        "child_ranges": [
            "(line 255,col 5)-(line 255,col 54)",
            "(line 256,col 5)-(line 256,col 45)",
            "(line 257,col 5)-(line 260,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesOn()",
        "snippet": "  public void testCheckProvidesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkProvides = CheckLevel.ERROR;\n    test(options, new String[] {\n      \"/** @constructor */ function Foo() {}\",\n      \"new Foo();\"\n    }, CheckProvides.MISSING_PROVIDE_WARNING);\n  }\n",
        "begin_line": 263,
        "end_line": 270,
        "comment": "",
        "child_ranges": [
            "(line 264,col 5)-(line 264,col 54)",
            "(line 265,col 5)-(line 265,col 45)",
            "(line 266,col 5)-(line 269,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOff()",
        "snippet": "  public void testGenerateExportsOff() {\n    testSame(createCompilerOptions(), \"/** @export */ function f() {}\");\n  }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 273,col 5)-(line 273,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testGenerateExportsOn()",
        "snippet": "  public void testGenerateExportsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.generateExports = true;\n    test(options, \"/** @export */ function f() {}\",\n         \"/** @export */ function f() {} goog.exportSymbol('f', f);\");\n  }\n",
        "begin_line": 276,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 54)",
            "(line 278,col 5)-(line 278,col 35)",
            "(line 279,col 5)-(line 280,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOff()",
        "snippet": "  public void testExportTestFunctionsOff() {\n    testSame(createCompilerOptions(), \"function testFoo() {}\");\n  }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "",
        "child_ranges": [
            "(line 284,col 5)-(line 284,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExportTestFunctionsOn()",
        "snippet": "  public void testExportTestFunctionsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.exportTestFunctions = true;\n    test(options, \"function testFoo() {}\",\n         \"/** @export */ function testFoo() {}\" +\n         \"goog.exportSymbol('testFoo', testFoo);\");\n  }\n",
        "begin_line": 287,
        "end_line": 293,
        "comment": "",
        "child_ranges": [
            "(line 288,col 5)-(line 288,col 54)",
            "(line 289,col 5)-(line 289,col 39)",
            "(line 290,col 5)-(line 292,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExpose()",
        "snippet": "  public void testExpose() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n         \"var x = {eeny: 1, /** @expose */ meeny: 2};\" +\n         \"/** @constructor */ var Foo = function() {};\" +\n         \"/** @expose */  Foo.prototype.miny = 3;\" +\n         \"Foo.prototype.moe = 4;\" +\n         \"function moe(a, b) { return a.meeny + b.miny; }\" +\n         \"window['x'] = x;\" +\n         \"window['Foo'] = Foo;\" +\n         \"window['moe'] = moe;\",\n         \"function a(){}\" +\n         \"a.prototype.miny=3;\" +\n         \"window.x={a:1,meeny:2};\" +\n         \"window.Foo=a;\" +\n         \"window.moe=function(b,c){\" +\n         \"  return b.meeny+c.miny\" +\n         \"}\");\n  }\n",
        "begin_line": 295,
        "end_line": 315,
        "comment": "",
        "child_ranges": [
            "(line 296,col 5)-(line 296,col 54)",
            "(line 297,col 5)-(line 298,col 48)",
            "(line 299,col 5)-(line 314,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOff()",
        "snippet": "  public void testCheckSymbolsOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3;\");\n  }\n",
        "begin_line": 317,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 318,col 5)-(line 318,col 54)",
            "(line 319,col 5)-(line 319,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckSymbolsOn()",
        "snippet": "  public void testCheckSymbolsOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    test(options, \"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 322,
        "end_line": 326,
        "comment": "",
        "child_ranges": [
            "(line 323,col 5)-(line 323,col 54)",
            "(line 324,col 5)-(line 324,col 32)",
            "(line 325,col 5)-(line 325,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOff()",
        "snippet": "  public void testCheckReferencesOff() {\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, \"x = 3; var x = 5;\");\n  }\n",
        "begin_line": 328,
        "end_line": 331,
        "comment": "",
        "child_ranges": [
            "(line 329,col 5)-(line 329,col 54)",
            "(line 330,col 5)-(line 330,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckReferencesOn()",
        "snippet": "  public void testCheckReferencesOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    test(options, \"x = 3; var x = 5;\",\n         VariableReferenceCheck.UNDECLARED_REFERENCE);\n  }\n",
        "begin_line": 333,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 334,col 5)-(line 334,col 54)",
            "(line 335,col 5)-(line 335,col 50)",
            "(line 336,col 5)-(line 337,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInferTypes()",
        "snippet": "  public void testInferTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.inferTypes = true;\n    options.checkTypes = false;\n    options.closurePass = true;\n\n    test(options,\n        CLOSURE_BOILERPLATE +\n        \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n        TypeCheck.ENUM_NOT_CONSTANT);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n\n    // This does not generate a warning.\n    test(options, \"/** @type {number} */ var n = window.name;\",\n        \"var n = window.name;\");\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() == 0);\n  }\n",
        "begin_line": 340,
        "end_line": 356,
        "comment": "",
        "child_ranges": [
            "(line 341,col 5)-(line 341,col 54)",
            "(line 342,col 5)-(line 342,col 30)",
            "(line 343,col 5)-(line 343,col 31)",
            "(line 344,col 5)-(line 344,col 31)",
            "(line 346,col 5)-(line 349,col 37)",
            "(line 350,col 5)-(line 350,col 70)",
            "(line 353,col 5)-(line 354,col 32)",
            "(line 355,col 5)-(line 355,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckAndInference()",
        "snippet": "  public void testTypeCheckAndInference() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {number} */ var n = window.name;\",\n         TypeValidator.TYPE_MISMATCH_WARNING);\n    assertTrue(lastCompiler.getErrorManager().getTypedPercent() > 0);\n  }\n",
        "begin_line": 358,
        "end_line": 364,
        "comment": "",
        "child_ranges": [
            "(line 359,col 5)-(line 359,col 54)",
            "(line 360,col 5)-(line 360,col 30)",
            "(line 361,col 5)-(line 362,col 46)",
            "(line 363,col 5)-(line 363,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeNameParser()",
        "snippet": "  public void testTypeNameParser() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"/** @type {n} */ var n = window.name;\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 367,col 5)-(line 367,col 54)",
            "(line 368,col 5)-(line 368,col 30)",
            "(line 369,col 5)-(line 370,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMemoizedTypedScopeCreator()",
        "snippet": "  public void testMemoizedTypedScopeCreator() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, \"function someTest() {\\n\"\n        + \"  /** @constructor */\\n\"\n        + \"  function Foo() { this.instProp = 3; }\\n\"\n        + \"  Foo.prototype.protoProp = function(a, b) {};\\n\"\n        + \"  /** @constructor\\n @extends Foo */\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.inherits(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.protoProp(o.protoProp, o.instProp);\\n\"\n        + \"}\",\n        \"function someTest() {\\n\"\n        + \"  function Foo() { this.b = 3; }\\n\"\n        + \"  Foo.prototype.a = function(a, b) {};\\n\"\n        + \"  function Bar() {}\\n\"\n        + \"  goog.c(Bar, Foo);\\n\"\n        + \"  var o = new Bar();\\n\"\n        + \"  o.a(o.a, o.b);\\n\"\n        + \"}\");\n  }\n",
        "begin_line": 378,
        "end_line": 401,
        "comment": " o.a(o.a, o.a), which is bad.",
        "child_ranges": [
            "(line 379,col 5)-(line 379,col 54)",
            "(line 380,col 5)-(line 380,col 30)",
            "(line 381,col 5)-(line 381,col 39)",
            "(line 382,col 5)-(line 382,col 67)",
            "(line 383,col 5)-(line 400,col 15)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckTypes()",
        "snippet": "  public void testCheckTypes() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    test(options, \"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 403,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 54)",
            "(line 405,col 5)-(line 405,col 30)",
            "(line 406,col 5)-(line 407,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceCssNames()",
        "snippet": "  public void testReplaceCssNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.gatherCssNames = true;\n    test(options, \"/** @define {boolean} */\\n\"\n         + \"var COMPILED = false;\\n\"\n         + \"goog.setCssNameMapping({'foo':'bar'});\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return goog.getCssName('foo');\\n\"\n         + \"}\",\n         \"var COMPILED = true;\\n\"\n         + \"function getCss() {\\n\"\n         + \"  return \\\"bar\\\";\"\n         + \"}\");\n    assertEquals(\n        ImmutableMap.of(\"foo\", new Integer(1)),\n        lastCompiler.getPassConfig().getIntermediateState().cssNames);\n  }\n",
        "begin_line": 410,
        "end_line": 427,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 54)",
            "(line 412,col 5)-(line 412,col 31)",
            "(line 413,col 5)-(line 413,col 34)",
            "(line 414,col 5)-(line 423,col 16)",
            "(line 424,col 5)-(line 426,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveClosureAsserts()",
        "snippet": "  public void testRemoveClosureAsserts() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    testSame(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\");\n    options.removeClosureAsserts = true;\n    test(options,\n        \"var goog = {};\"\n        + \"goog.asserts.assert(goog);\",\n        \"var goog = {};\");\n  }\n",
        "begin_line": 429,
        "end_line": 440,
        "comment": "",
        "child_ranges": [
            "(line 430,col 5)-(line 430,col 54)",
            "(line 431,col 5)-(line 431,col 31)",
            "(line 432,col 5)-(line 434,col 40)",
            "(line 435,col 5)-(line 435,col 40)",
            "(line 436,col 5)-(line 439,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeprecation()",
        "snippet": "  public void testDeprecation() {\n    String code = \"/** @deprecated */ function f() { } function g() { f(); }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.DEPRECATED, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 442,
        "end_line": 453,
        "comment": "",
        "child_ranges": [
            "(line 443,col 5)-(line 443,col 78)",
            "(line 445,col 5)-(line 445,col 54)",
            "(line 446,col 5)-(line 446,col 28)",
            "(line 448,col 5)-(line 448,col 75)",
            "(line 449,col 5)-(line 449,col 28)",
            "(line 451,col 5)-(line 451,col 30)",
            "(line 452,col 5)-(line 452,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVisibility()",
        "snippet": "  public void testVisibility() {\n    String[] code = {\n        \"/** @private */ function f() { }\",\n        \"function g() { f(); }\"\n    };\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS);\n  }\n",
        "begin_line": 455,
        "end_line": 469,
        "comment": "",
        "child_ranges": [
            "(line 456,col 5)-(line 459,col 6)",
            "(line 461,col 5)-(line 461,col 54)",
            "(line 462,col 5)-(line 462,col 28)",
            "(line 464,col 5)-(line 464,col 75)",
            "(line 465,col 5)-(line 465,col 28)",
            "(line 467,col 5)-(line 467,col 30)",
            "(line 468,col 5)-(line 468,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnreachableCode()",
        "snippet": "  public void testUnreachableCode() {\n    String code = \"function f() { return \\n 3; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkUnreachableCode = CheckLevel.ERROR;\n    test(options, code, CheckUnreachableCode.UNREACHABLE_CODE);\n  }\n",
        "begin_line": 471,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 472,col 5)-(line 472,col 50)",
            "(line 474,col 5)-(line 474,col 54)",
            "(line 475,col 5)-(line 475,col 28)",
            "(line 477,col 5)-(line 477,col 52)",
            "(line 478,col 5)-(line 478,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMissingReturn()",
        "snippet": "  public void testMissingReturn() {\n    String code =\n        \"/** @return {number} */ function f() { if (f) { return 3; } }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.checkMissingReturn = CheckLevel.ERROR;\n    testSame(options, code);\n\n    options.checkTypes = true;\n    test(options, code, CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 481,
        "end_line": 493,
        "comment": "",
        "child_ranges": [
            "(line 482,col 5)-(line 483,col 72)",
            "(line 485,col 5)-(line 485,col 54)",
            "(line 486,col 5)-(line 486,col 28)",
            "(line 488,col 5)-(line 488,col 50)",
            "(line 489,col 5)-(line 489,col 28)",
            "(line 491,col 5)-(line 491,col 30)",
            "(line 492,col 5)-(line 492,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIdGenerators()",
        "snippet": "  public void testIdGenerators() {\n    String code =  \"function f() {} f('id');\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.idGenerators = Sets.newHashSet(\"f\");\n    test(options, code, \"function f() {} 'a';\");\n  }\n",
        "begin_line": 495,
        "end_line": 503,
        "comment": "",
        "child_ranges": [
            "(line 496,col 5)-(line 496,col 46)",
            "(line 498,col 5)-(line 498,col 54)",
            "(line 499,col 5)-(line 499,col 28)",
            "(line 501,col 5)-(line 501,col 48)",
            "(line 502,col 5)-(line 502,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeArgumentsArray()",
        "snippet": "  public void testOptimizeArgumentsArray() {\n    String code =  \"function f() { return arguments[0]; }\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeArgumentsArray = true;\n    String argName = \"JSCompiler_OptimizeArgumentsArray_p0\";\n    test(options, code,\n         \"function f(\" + argName + \") { return \" + argName + \"; }\");\n  }\n",
        "begin_line": 505,
        "end_line": 515,
        "comment": "",
        "child_ranges": [
            "(line 506,col 5)-(line 506,col 59)",
            "(line 508,col 5)-(line 508,col 54)",
            "(line 509,col 5)-(line 509,col 28)",
            "(line 511,col 5)-(line 511,col 42)",
            "(line 512,col 5)-(line 512,col 60)",
            "(line 513,col 5)-(line 514,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeParameters()",
        "snippet": "  public void testOptimizeParameters() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeParameters = true;\n    test(options, code, \"function f() { var a = true; return a;} f();\");\n  }\n",
        "begin_line": 517,
        "end_line": 525,
        "comment": "",
        "child_ranges": [
            "(line 518,col 5)-(line 518,col 57)",
            "(line 520,col 5)-(line 520,col 54)",
            "(line 521,col 5)-(line 521,col 28)",
            "(line 523,col 5)-(line 523,col 38)",
            "(line 524,col 5)-(line 524,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testOptimizeReturns()",
        "snippet": "  public void testOptimizeReturns() {\n    String code = \"function f(a) { return a; } f(true);\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.optimizeReturns = true;\n    test(options, code, \"function f(a) {return;} f(true);\");\n  }\n",
        "begin_line": 527,
        "end_line": 535,
        "comment": "",
        "child_ranges": [
            "(line 528,col 5)-(line 528,col 57)",
            "(line 530,col 5)-(line 530,col 54)",
            "(line 531,col 5)-(line 531,col 28)",
            "(line 533,col 5)-(line 533,col 35)",
            "(line 534,col 5)-(line 534,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveAbstractMethods()",
        "snippet": "  public void testRemoveAbstractMethods() {\n    String code = CLOSURE_BOILERPLATE +\n        \"var x = {}; x.foo = goog.abstractMethod; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.closurePass = true;\n    options.collapseProperties = true;\n    test(options, code, CLOSURE_COMPILED + \" var x$bar = 3;\");\n  }\n",
        "begin_line": 537,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 538,col 5)-(line 539,col 62)",
            "(line 541,col 5)-(line 541,col 54)",
            "(line 542,col 5)-(line 542,col 28)",
            "(line 544,col 5)-(line 544,col 31)",
            "(line 545,col 5)-(line 545,col 38)",
            "(line 546,col 5)-(line 546,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties1()",
        "snippet": "  public void testCollapseProperties1() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 549,
        "end_line": 558,
        "comment": "",
        "child_ranges": [
            "(line 550,col 5)-(line 551,col 44)",
            "(line 553,col 5)-(line 553,col 54)",
            "(line 554,col 5)-(line 554,col 28)",
            "(line 556,col 5)-(line 556,col 38)",
            "(line 557,col 5)-(line 557,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseProperties2()",
        "snippet": "  public void testCollapseProperties2() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.collapseObjectLiterals = true;\n    test(options, code, \"var x$FOO = 5; var x$bar = 3;\");\n  }\n",
        "begin_line": 560,
        "end_line": 570,
        "comment": "",
        "child_ranges": [
            "(line 561,col 5)-(line 562,col 44)",
            "(line 564,col 5)-(line 564,col 54)",
            "(line 565,col 5)-(line 565,col 28)",
            "(line 567,col 5)-(line 567,col 38)",
            "(line 568,col 5)-(line 568,col 42)",
            "(line 569,col 5)-(line 569,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral1()",
        "snippet": "  public void testCollapseObjectLiteral1() {\n    // Verify collapseObjectLiterals does nothing in global scope\n    String code = \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    testSame(options, code);\n  }\n",
        "begin_line": 572,
        "end_line": 581,
        "comment": "",
        "child_ranges": [
            "(line 574,col 5)-(line 574,col 54)",
            "(line 576,col 5)-(line 576,col 54)",
            "(line 577,col 5)-(line 577,col 28)",
            "(line 579,col 5)-(line 579,col 42)",
            "(line 580,col 5)-(line 580,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseObjectLiteral2()",
        "snippet": "  public void testCollapseObjectLiteral2() {\n    String code =\n        \"function f() {var x = {}; x.FOO = 5; x.bar = 3;}\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseObjectLiterals = true;\n    test(options, code,\n        \"function f(){\" +\n        \"var JSCompiler_object_inline_FOO_0;\" +\n        \"var JSCompiler_object_inline_bar_1;\" +\n        \"JSCompiler_object_inline_FOO_0=5;\" +\n        \"JSCompiler_object_inline_bar_1=3}\");\n  }\n",
        "begin_line": 583,
        "end_line": 597,
        "comment": "",
        "child_ranges": [
            "(line 584,col 5)-(line 585,col 59)",
            "(line 587,col 5)-(line 587,col 54)",
            "(line 588,col 5)-(line 588,col 28)",
            "(line 590,col 5)-(line 590,col 42)",
            "(line 591,col 5)-(line 596,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTightenTypesWithoutTypeCheck()",
        "snippet": "  public void testTightenTypesWithoutTypeCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.tightenTypes = true;\n    test(options, \"\", DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n  }\n",
        "begin_line": 599,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 600,col 5)-(line 600,col 54)",
            "(line 601,col 5)-(line 601,col 32)",
            "(line 602,col 5)-(line 602,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDisambiguateProperties()",
        "snippet": "  public void testDisambiguateProperties() {\n    String code =\n        \"/** @constructor */ function Foo(){} Foo.prototype.bar = 3;\" +\n        \"/** @constructor */ function Baz(){} Baz.prototype.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.disambiguateProperties = true;\n    options.checkTypes = true;\n    test(options, code,\n         \"function Foo(){} Foo.prototype.Foo_prototype$bar = 3;\" +\n         \"function Baz(){} Baz.prototype.Baz_prototype$bar = 3;\");\n  }\n",
        "begin_line": 605,
        "end_line": 618,
        "comment": "",
        "child_ranges": [
            "(line 606,col 5)-(line 608,col 70)",
            "(line 610,col 5)-(line 610,col 54)",
            "(line 611,col 5)-(line 611,col 28)",
            "(line 613,col 5)-(line 613,col 42)",
            "(line 614,col 5)-(line 614,col 30)",
            "(line 615,col 5)-(line 617,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkPureCalls()",
        "snippet": "  public void testMarkPureCalls() {\n    String testCode = \"function foo() {} foo();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.computeFunctionSideEffects = true;\n    test(options, testCode, \"function foo() {}\");\n  }\n",
        "begin_line": 620,
        "end_line": 629,
        "comment": "",
        "child_ranges": [
            "(line 621,col 5)-(line 621,col 49)",
            "(line 622,col 5)-(line 622,col 54)",
            "(line 623,col 5)-(line 623,col 34)",
            "(line 625,col 5)-(line 625,col 32)",
            "(line 627,col 5)-(line 627,col 46)",
            "(line 628,col 5)-(line 628,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMarkNoSideEffects()",
        "snippet": "  public void testMarkNoSideEffects() {\n    String testCode = \"noSideEffects();\";\n    CompilerOptions options = createCompilerOptions();\n    options.removeDeadCode = true;\n\n    testSame(options, testCode);\n\n    options.markNoSideEffectCalls = true;\n    test(options, testCode, \"\");\n  }\n",
        "begin_line": 631,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 632,col 5)-(line 632,col 41)",
            "(line 633,col 5)-(line 633,col 54)",
            "(line 634,col 5)-(line 634,col 34)",
            "(line 636,col 5)-(line 636,col 32)",
            "(line 638,col 5)-(line 638,col 41)",
            "(line 639,col 5)-(line 639,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testChainedCalls()",
        "snippet": "  public void testChainedCalls() {\n    CompilerOptions options = createCompilerOptions();\n    options.chainCalls = true;\n    test(\n        options,\n        \"/** @constructor */ function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar(); \" +\n        \"f.bar(); \",\n        \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return this; }; \" +\n        \"var f = new Foo();\" +\n        \"f.bar().bar();\");\n  }\n",
        "begin_line": 642,
        "end_line": 656,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 54)",
            "(line 644,col 5)-(line 644,col 30)",
            "(line 645,col 5)-(line 655,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtraAnnotationNames()",
        "snippet": "  public void testExtraAnnotationNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.setExtraAnnotationNames(Sets.newHashSet(\"TagA\", \"TagB\"));\n    test(\n        options,\n        \"/** @TagA */ var f = new Foo(); /** @TagB */ f.bar();\",\n        \"var f = new Foo(); f.bar();\");\n  }\n",
        "begin_line": 658,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 659,col 5)-(line 659,col 54)",
            "(line 660,col 5)-(line 660,col 69)",
            "(line 661,col 5)-(line 664,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizePrototypeMethods()",
        "snippet": "  public void testDevirtualizePrototypeMethods() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    test(\n        options,\n        \"/** @constructor */ var Foo = function() {}; \" +\n        \"Foo.prototype.bar = function() {};\" +\n        \"(new Foo()).bar();\",\n        \"var Foo = function() {};\" +\n        \"var JSCompiler_StaticMethods_bar = \" +\n        \"    function(JSCompiler_StaticMethods_bar$self) {};\" +\n        \"JSCompiler_StaticMethods_bar(new Foo());\");\n  }\n",
        "begin_line": 667,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 668,col 5)-(line 668,col 54)",
            "(line 669,col 5)-(line 669,col 48)",
            "(line 670,col 5)-(line 678,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckConsts()",
        "snippet": "  public void testCheckConsts() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineConstantVars = true;\n    test(options, \"var FOO = true; FOO = false\",\n        ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 681,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 682,col 5)-(line 682,col 54)",
            "(line 683,col 5)-(line 683,col 38)",
            "(line 684,col 5)-(line 685,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAllChecksOn()",
        "snippet": "  public void testAllChecksOn() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSuspiciousCode = true;\n    options.checkControlStructures = true;\n    options.checkRequires = CheckLevel.ERROR;\n    options.checkProvides = CheckLevel.ERROR;\n    options.generateExports = true;\n    options.exportTestFunctions = true;\n    options.closurePass = true;\n    options.checkMissingGetCssNameLevel = CheckLevel.ERROR;\n    options.checkMissingGetCssNameBlacklist = \"goog\";\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkSymbols = true;\n    options.aggressiveVarCheck = CheckLevel.ERROR;\n    options.processObjectPropertyString = true;\n    options.collapseProperties = true;\n    test(options, CLOSURE_BOILERPLATE, CLOSURE_COMPILED);\n  }\n",
        "begin_line": 688,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 689,col 5)-(line 689,col 54)",
            "(line 690,col 5)-(line 690,col 39)",
            "(line 691,col 5)-(line 691,col 42)",
            "(line 692,col 5)-(line 692,col 45)",
            "(line 693,col 5)-(line 693,col 45)",
            "(line 694,col 5)-(line 694,col 35)",
            "(line 695,col 5)-(line 695,col 39)",
            "(line 696,col 5)-(line 696,col 31)",
            "(line 697,col 5)-(line 697,col 59)",
            "(line 698,col 5)-(line 698,col 53)",
            "(line 699,col 5)-(line 699,col 51)",
            "(line 700,col 5)-(line 700,col 47)",
            "(line 701,col 5)-(line 701,col 32)",
            "(line 702,col 5)-(line 702,col 50)",
            "(line 703,col 5)-(line 703,col 47)",
            "(line 704,col 5)-(line 704,col 38)",
            "(line 705,col 5)-(line 705,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testTypeCheckingWithSyntheticBlocks()",
        "snippet": "  public void testTypeCheckingWithSyntheticBlocks() {\n    CompilerOptions options = createCompilerOptions();\n    options.syntheticBlockStartMarker = \"synStart\";\n    options.syntheticBlockEndMarker = \"synEnd\";\n    options.checkTypes = true;\n\n    // We used to have a bug where the CFG drew an\n    // edge straight from synStart to f(progress).\n    // If that happens, then progress will get type {number|undefined}.\n    testSame(\n        options,\n        \"/** @param {number} x */ function f(x) {}\" +\n        \"function g() {\" +\n        \" synStart('foo');\" +\n        \" var progress = 1;\" +\n        \" f(progress);\" +\n        \" synEnd('foo');\" +\n        \"}\");\n  }\n",
        "begin_line": 708,
        "end_line": 726,
        "comment": "",
        "child_ranges": [
            "(line 709,col 5)-(line 709,col 54)",
            "(line 710,col 5)-(line 710,col 51)",
            "(line 711,col 5)-(line 711,col 47)",
            "(line 712,col 5)-(line 712,col 30)",
            "(line 717,col 5)-(line 725,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCompilerDoesNotBlowUpIfUndefinedSymbols()",
        "snippet": "  public void testCompilerDoesNotBlowUpIfUndefinedSymbols() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n\n    // Disable the undefined variable check.\n    options.setWarningLevel(\n        DiagnosticGroup.forType(VarCheck.UNDEFINED_VAR_ERROR),\n        CheckLevel.OFF);\n\n    // The compiler used to throw an IllegalStateException on this.\n    testSame(options, \"var x = {foo: y};\");\n  }\n",
        "begin_line": 728,
        "end_line": 739,
        "comment": "",
        "child_ranges": [
            "(line 729,col 5)-(line 729,col 54)",
            "(line 730,col 5)-(line 730,col 32)",
            "(line 733,col 5)-(line 735,col 24)",
            "(line 738,col 5)-(line 738,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConstantTagsMustAlwaysBeRemoved()",
        "snippet": "  public void testConstantTagsMustAlwaysBeRemoved() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    String originalText = \"var G_GEO_UNKNOWN_ADDRESS=1;\\n\" +\n        \"function foo() {\" +\n        \"  var localVar = 2;\\n\" +\n        \"  if (G_GEO_UNKNOWN_ADDRESS == localVar) {\\n\" +\n        \"    alert(\\\"A\\\"); }}\";\n    String expectedText = \"var G_GEO_UNKNOWN_ADDRESS=1;\" +\n        \"function foo(){var a=2;if(G_GEO_UNKNOWN_ADDRESS==a){alert(\\\"A\\\")}}\";\n\n    test(options, originalText, expectedText);\n  }\n",
        "begin_line": 744,
        "end_line": 757,
        "comment": " we finish.",
        "child_ranges": [
            "(line 745,col 5)-(line 745,col 54)",
            "(line 747,col 5)-(line 747,col 60)",
            "(line 748,col 5)-(line 752,col 31)",
            "(line 753,col 5)-(line 754,col 77)",
            "(line 756,col 5)-(line 756,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testClosurePassPreservesJsDoc()",
        "snippet": "  public void testClosurePassPreservesJsDoc() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.closurePass = true;\n\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @constructor */ Foo = function() {};\" +\n         \"var x = new Foo();\",\n         \"var COMPILED=true;var goog={};goog.exportSymbol=function(){};\" +\n         \"var Foo=function(){};var x=new Foo\");\n    test(options,\n         CLOSURE_BOILERPLATE +\n         \"goog.provide('Foo'); /** @enum */ Foo = {a: 3};\",\n         TypeCheck.ENUM_NOT_CONSTANT);\n  }\n",
        "begin_line": 759,
        "end_line": 774,
        "comment": "",
        "child_ranges": [
            "(line 760,col 5)-(line 760,col 54)",
            "(line 761,col 5)-(line 761,col 30)",
            "(line 762,col 5)-(line 762,col 31)",
            "(line 764,col 5)-(line 769,col 47)",
            "(line 770,col 5)-(line 773,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst()",
        "snippet": "  public void testProvidedNamespaceIsConst() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo'); \" +\n         \"function f() { foo = {};}\",\n         \"var foo = {}; function f() { foo = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 776,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 777,col 5)-(line 777,col 54)",
            "(line 778,col 5)-(line 778,col 31)",
            "(line 779,col 5)-(line 779,col 38)",
            "(line 780,col 5)-(line 780,col 38)",
            "(line 781,col 5)-(line 785,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst2()",
        "snippet": "  public void testProvidedNamespaceIsConst2() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.bar'); \" +\n         \"function f() { foo.bar = {};}\",\n         \"var foo$bar = {};\" +\n         \"function f() { foo$bar = {}; }\",\n         ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n  }\n",
        "begin_line": 788,
        "end_line": 799,
        "comment": "",
        "child_ranges": [
            "(line 789,col 5)-(line 789,col 54)",
            "(line 790,col 5)-(line 790,col 31)",
            "(line 791,col 5)-(line 791,col 38)",
            "(line 792,col 5)-(line 792,col 38)",
            "(line 793,col 5)-(line 798,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst3()",
        "snippet": "  public void testProvidedNamespaceIsConst3() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; \" +\n         \"goog.provide('foo.bar'); goog.provide('foo.bar.baz'); \" +\n         \"/** @constructor */ foo.bar = function() {};\" +\n         \"/** @constructor */ foo.bar.baz = function() {};\",\n         \"var foo$bar = function(){};\" +\n         \"var foo$bar$baz = function(){};\");\n  }\n",
        "begin_line": 801,
        "end_line": 813,
        "comment": "",
        "child_ranges": [
            "(line 802,col 5)-(line 802,col 54)",
            "(line 803,col 5)-(line 803,col 31)",
            "(line 804,col 5)-(line 804,col 38)",
            "(line 805,col 5)-(line 805,col 38)",
            "(line 806,col 5)-(line 812,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst4()",
        "snippet": "  public void testProvidedNamespaceIsConst4() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"var foo = {}; foo.Bar = {};\",\n         \"var foo = {}; var foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 815,
        "end_line": 824,
        "comment": "",
        "child_ranges": [
            "(line 816,col 5)-(line 816,col 54)",
            "(line 817,col 5)-(line 817,col 31)",
            "(line 818,col 5)-(line 818,col 38)",
            "(line 819,col 5)-(line 819,col 38)",
            "(line 820,col 5)-(line 823,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvidedNamespaceIsConst5()",
        "snippet": "  public void testProvidedNamespaceIsConst5() {\n    CompilerOptions options = createCompilerOptions();\n    options.closurePass = true;\n    options.inlineConstantVars = true;\n    options.collapseProperties = true;\n    test(options,\n         \"var goog = {}; goog.provide('foo.Bar'); \" +\n         \"foo = {}; foo.Bar = {};\",\n         \"var foo = {}; foo = {}; foo.Bar = {};\");\n  }\n",
        "begin_line": 826,
        "end_line": 835,
        "comment": "",
        "child_ranges": [
            "(line 827,col 5)-(line 827,col 54)",
            "(line 828,col 5)-(line 828,col 31)",
            "(line 829,col 5)-(line 829,col 38)",
            "(line 830,col 5)-(line 830,col 38)",
            "(line 831,col 5)-(line 834,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAlwaysOn()",
        "snippet": "  public void testProcessDefinesAlwaysOn() {\n    test(createCompilerOptions(),\n         \"/** @define {boolean} */ var HI = true; HI = false;\",\n         \"var HI = false;false;\");\n  }\n",
        "begin_line": 837,
        "end_line": 841,
        "comment": "",
        "child_ranges": [
            "(line 838,col 5)-(line 840,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProcessDefinesAdditionalReplacements()",
        "snippet": "  public void testProcessDefinesAdditionalReplacements() {\n    CompilerOptions options = createCompilerOptions();\n    options.setDefineToBooleanLiteral(\"HI\", false);\n    test(options,\n         \"/** @define {boolean} */ var HI = true;\",\n         \"var HI = false;\");\n  }\n",
        "begin_line": 843,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 844,col 5)-(line 844,col 54)",
            "(line 845,col 5)-(line 845,col 51)",
            "(line 846,col 5)-(line 848,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testReplaceMessages()",
        "snippet": "  public void testReplaceMessages() {\n    CompilerOptions options = createCompilerOptions();\n    String prefix = \"var goog = {}; goog.getMsg = function() {};\";\n    testSame(options, prefix + \"var MSG_HI = goog.getMsg('hi');\");\n\n    options.messageBundle = new EmptyMessageBundle();\n    test(options,\n        prefix + \"/** @desc xyz */ var MSG_HI = goog.getMsg('hi');\",\n        prefix + \"var MSG_HI = 'hi';\");\n  }\n",
        "begin_line": 851,
        "end_line": 860,
        "comment": "",
        "child_ranges": [
            "(line 852,col 5)-(line 852,col 54)",
            "(line 853,col 5)-(line 853,col 66)",
            "(line 854,col 5)-(line 854,col 66)",
            "(line 856,col 5)-(line 856,col 53)",
            "(line 857,col 5)-(line 859,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckGlobalNames()",
        "snippet": "  public void testCheckGlobalNames() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkGlobalNamesLevel = CheckLevel.ERROR;\n    test(options, \"var x = {}; var y = x.z;\",\n         CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 862,
        "end_line": 867,
        "comment": "",
        "child_ranges": [
            "(line 863,col 5)-(line 863,col 54)",
            "(line 864,col 5)-(line 864,col 53)",
            "(line 865,col 5)-(line 866,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGetters()",
        "snippet": "  public void testInlineGetters() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function Foo() {} Foo.prototype.bar = function() { return 3; };\" +\n        \"var x = new Foo(); x.bar();\";\n\n    testSame(options, code);\n    options.inlineGetters = true;\n\n    test(options, code,\n         \"function Foo() {} Foo.prototype.bar = function() { return 3 };\" +\n         \"var x = new Foo(); 3;\");\n  }\n",
        "begin_line": 869,
        "end_line": 881,
        "comment": "",
        "child_ranges": [
            "(line 870,col 5)-(line 870,col 54)",
            "(line 871,col 5)-(line 873,col 38)",
            "(line 875,col 5)-(line 875,col 28)",
            "(line 876,col 5)-(line 876,col 33)",
            "(line 878,col 5)-(line 880,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineGettersWithAmbiguate()",
        "snippet": "  public void testInlineGettersWithAmbiguate() {\n    CompilerOptions options = createCompilerOptions();\n\n    String code =\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"/** @type {number} */ Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"/** @constructor */\" +\n        \"function Bar() {}\" +\n        \"/** @type {string} */ Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().getField();\" +\n        \"new Bar().getField();\";\n\n    testSame(options, code);\n\n    options.inlineGetters = true;\n\n    test(options, code,\n        \"function Foo() {}\" +\n        \"Foo.prototype.field;\" +\n        \"Foo.prototype.getField = function() { return this.field; };\" +\n        \"function Bar() {}\" +\n        \"Bar.prototype.field;\" +\n        \"Bar.prototype.getField = function() { return this.field; };\" +\n        \"new Foo().field;\" +\n        \"new Bar().field;\");\n\n    options.checkTypes = true;\n    options.ambiguateProperties = true;\n\n    // Propagating the wrong type information may cause ambiguate properties\n    // to generate bad code.\n    testSame(options, code);\n  }\n",
        "begin_line": 883,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 884,col 5)-(line 884,col 54)",
            "(line 886,col 5)-(line 896,col 32)",
            "(line 898,col 5)-(line 898,col 28)",
            "(line 900,col 5)-(line 900,col 33)",
            "(line 902,col 5)-(line 910,col 28)",
            "(line 912,col 5)-(line 912,col 30)",
            "(line 913,col 5)-(line 913,col 39)",
            "(line 917,col 5)-(line 917,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineVariables()",
        "snippet": "  public void testInlineVariables() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x);\";\n    testSame(options, code);\n\n    options.inlineVariables = true;\n    test(options, code, \"(function foo() {})(3);\");\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR);\n  }\n",
        "begin_line": 920,
        "end_line": 930,
        "comment": "",
        "child_ranges": [
            "(line 921,col 5)-(line 921,col 54)",
            "(line 922,col 5)-(line 922,col 57)",
            "(line 923,col 5)-(line 923,col 28)",
            "(line 925,col 5)-(line 925,col 35)",
            "(line 926,col 5)-(line 926,col 51)",
            "(line 928,col 5)-(line 928,col 64)",
            "(line 929,col 5)-(line 929,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineConstants()",
        "snippet": "  public void testInlineConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function foo() {} var x = 3; foo(x); var YYY = 4; foo(YYY);\";\n    testSame(options, code);\n\n    options.inlineConstantVars = true;\n    test(options, code, \"function foo() {} var x = 3; foo(x); foo(4);\");\n  }\n",
        "begin_line": 932,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 933,col 5)-(line 933,col 54)",
            "(line 934,col 5)-(line 934,col 80)",
            "(line 935,col 5)-(line 935,col 28)",
            "(line 937,col 5)-(line 937,col 38)",
            "(line 938,col 5)-(line 938,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMinimizeExits()",
        "snippet": "  public void testMinimizeExits() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() {\" +\n        \"  if (window.foo) return; window.h(); \" +\n        \"}\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(\n        options, code,\n        \"function f() {\" +\n        \"  window.foo || window.h(); \" +\n        \"}\");\n  }\n",
        "begin_line": 941,
        "end_line": 955,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 54)",
            "(line 943,col 5)-(line 946,col 12)",
            "(line 947,col 5)-(line 947,col 28)",
            "(line 949,col 5)-(line 949,col 33)",
            "(line 950,col 5)-(line 954,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldConstants()",
        "snippet": "  public void testFoldConstants() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"if (true) { window.foo(); }\";\n    testSame(options, code);\n\n    options.foldConstants = true;\n    test(options, code, \"window.foo();\");\n  }\n",
        "begin_line": 957,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 958,col 5)-(line 958,col 54)",
            "(line 959,col 5)-(line 959,col 48)",
            "(line 960,col 5)-(line 960,col 28)",
            "(line 962,col 5)-(line 962,col 33)",
            "(line 963,col 5)-(line 963,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnreachableCode()",
        "snippet": "  public void testRemoveUnreachableCode() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return; f(); }\";\n    testSame(options, code);\n\n    options.removeDeadCode = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 966,
        "end_line": 973,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 967,col 54)",
            "(line 968,col 5)-(line 968,col 50)",
            "(line 969,col 5)-(line 969,col 28)",
            "(line 971,col 5)-(line 971,col 34)",
            "(line 972,col 5)-(line 972,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties1()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    test(options, code, \"function Foo() {}\");\n  }\n",
        "begin_line": 975,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 976,col 5)-(line 976,col 54)",
            "(line 977,col 5)-(line 978,col 64)",
            "(line 979,col 5)-(line 979,col 28)",
            "(line 981,col 5)-(line 981,col 51)",
            "(line 982,col 5)-(line 982,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedPrototypeProperties2()",
        "snippet": "  public void testRemoveUnusedPrototypeProperties2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() {} \" +\n        \"Foo.prototype.bar = function() { return new Foo(); };\" +\n        \"function f(x) { x.bar(); }\";\n    testSame(options, code);\n\n    options.removeUnusedPrototypeProperties = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 985,
        "end_line": 997,
        "comment": "",
        "child_ranges": [
            "(line 986,col 5)-(line 986,col 54)",
            "(line 987,col 5)-(line 989,col 37)",
            "(line 990,col 5)-(line 990,col 28)",
            "(line 992,col 5)-(line 992,col 51)",
            "(line 993,col 5)-(line 993,col 28)",
            "(line 995,col 5)-(line 995,col 36)",
            "(line 996,col 5)-(line 996,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSmartNamePass()",
        "snippet": "  public void testSmartNamePass() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function Foo() { this.bar(); } \" +\n        \"Foo.prototype.bar = function() { return Foo(); };\";\n    testSame(options, code);\n\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 999,
        "end_line": 1007,
        "comment": "",
        "child_ranges": [
            "(line 1000,col 5)-(line 1000,col 54)",
            "(line 1001,col 5)-(line 1002,col 60)",
            "(line 1003,col 5)-(line 1003,col 28)",
            "(line 1005,col 5)-(line 1005,col 36)",
            "(line 1006,col 5)-(line 1006,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDeadAssignmentsElimination()",
        "snippet": "  public void testDeadAssignmentsElimination() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; 4; x = 5; return x; } f(); \";\n    testSame(options, code);\n\n    options.deadAssignmentElimination = true;\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() { var x = 3; 4; x = 5; return x; } f();\");\n  }\n",
        "begin_line": 1009,
        "end_line": 1019,
        "comment": "",
        "child_ranges": [
            "(line 1010,col 5)-(line 1010,col 54)",
            "(line 1011,col 5)-(line 1011,col 74)",
            "(line 1012,col 5)-(line 1012,col 28)",
            "(line 1014,col 5)-(line 1014,col 45)",
            "(line 1015,col 5)-(line 1015,col 28)",
            "(line 1017,col 5)-(line 1017,col 36)",
            "(line 1018,col 5)-(line 1018,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testInlineFunctions()",
        "snippet": "  public void testInlineFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 3; } f(); \";\n    testSame(options, code);\n\n    options.inlineFunctions = true;\n    test(options, code, \"3;\");\n  }\n",
        "begin_line": 1021,
        "end_line": 1028,
        "comment": "",
        "child_ranges": [
            "(line 1022,col 5)-(line 1022,col 54)",
            "(line 1023,col 5)-(line 1023,col 53)",
            "(line 1024,col 5)-(line 1024,col 28)",
            "(line 1026,col 5)-(line 1026,col 35)",
            "(line 1027,col 5)-(line 1027,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars1()",
        "snippet": "  public void testRemoveUnusedVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f(x) {} f();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"function f() {} f();\");\n  }\n",
        "begin_line": 1030,
        "end_line": 1037,
        "comment": "",
        "child_ranges": [
            "(line 1031,col 5)-(line 1031,col 54)",
            "(line 1032,col 5)-(line 1032,col 42)",
            "(line 1033,col 5)-(line 1033,col 28)",
            "(line 1035,col 5)-(line 1035,col 36)",
            "(line 1036,col 5)-(line 1036,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRemoveUnusedVars2()",
        "snippet": "  public void testRemoveUnusedVars2() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"(function f(x) {})();var g = function() {}; g();\";\n    testSame(options, code);\n\n    options.removeUnusedVars = true;\n    test(options, code, \"(function() {})();var g = function() {}; g();\");\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"(function f() {})();var g = function $g$() {}; g();\");\n  }\n",
        "begin_line": 1039,
        "end_line": 1049,
        "comment": "",
        "child_ranges": [
            "(line 1040,col 5)-(line 1040,col 54)",
            "(line 1041,col 5)-(line 1041,col 69)",
            "(line 1042,col 5)-(line 1042,col 28)",
            "(line 1044,col 5)-(line 1044,col 36)",
            "(line 1045,col 5)-(line 1045,col 73)",
            "(line 1047,col 5)-(line 1047,col 77)",
            "(line 1048,col 5)-(line 1048,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleCodeMotion()",
        "snippet": "  public void testCrossModuleCodeMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var x = 1;\",\n      \"x;\",\n    };\n    testSame(options, code);\n\n    options.crossModuleCodeMotion = true;\n    test(options, code, new String[] {\n      \"\",\n      \"var x = 1; x;\",\n    });\n  }\n",
        "begin_line": 1051,
        "end_line": 1064,
        "comment": "",
        "child_ranges": [
            "(line 1052,col 5)-(line 1052,col 54)",
            "(line 1053,col 5)-(line 1056,col 6)",
            "(line 1057,col 5)-(line 1057,col 28)",
            "(line 1059,col 5)-(line 1059,col 41)",
            "(line 1060,col 5)-(line 1063,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCrossModuleMethodMotion()",
        "snippet": "  public void testCrossModuleMethodMotion() {\n    CompilerOptions options = createCompilerOptions();\n    String[] code = new String[] {\n      \"var Foo = function() {}; Foo.prototype.bar = function() {};\" +\n      \"var x = new Foo();\",\n      \"x.bar();\",\n    };\n    testSame(options, code);\n\n    options.crossModuleMethodMotion = true;\n    test(options, code, new String[] {\n      CrossModuleMethodMotion.STUB_DECLARATIONS +\n      \"var Foo = function() {};\" +\n      \"Foo.prototype.bar=JSCompiler_stubMethod(0); var x=new Foo;\",\n      \"Foo.prototype.bar=JSCompiler_unstubMethod(0,function(){}); x.bar()\",\n    });\n  }\n",
        "begin_line": 1066,
        "end_line": 1082,
        "comment": "",
        "child_ranges": [
            "(line 1067,col 5)-(line 1067,col 54)",
            "(line 1068,col 5)-(line 1072,col 6)",
            "(line 1073,col 5)-(line 1073,col 28)",
            "(line 1075,col 5)-(line 1075,col 43)",
            "(line 1076,col 5)-(line 1081,col 7)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables1()",
        "snippet": "  public void testFlowSensitiveInlineVariables1() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { var x = 3; x = 5; return x; }\";\n    testSame(options, code);\n\n    options.flowSensitiveInlineVariables = true;\n    test(options, code, \"function f() { var x = 3; return 5; }\");\n\n    String unusedVar = \"function f() { var x; x = 5; return x; } f()\";\n    test(options, unusedVar, \"function f() { var x; return 5; } f()\");\n\n    options.removeUnusedVars = true;\n    test(options, unusedVar, \"function f() { return 5; } f()\");\n  }\n",
        "begin_line": 1084,
        "end_line": 1097,
        "comment": "",
        "child_ranges": [
            "(line 1085,col 5)-(line 1085,col 54)",
            "(line 1086,col 5)-(line 1086,col 65)",
            "(line 1087,col 5)-(line 1087,col 28)",
            "(line 1089,col 5)-(line 1089,col 48)",
            "(line 1090,col 5)-(line 1090,col 65)",
            "(line 1092,col 5)-(line 1092,col 70)",
            "(line 1093,col 5)-(line 1093,col 70)",
            "(line 1095,col 5)-(line 1095,col 36)",
            "(line 1096,col 5)-(line 1096,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFlowSensitiveInlineVariables2()",
        "snippet": "  public void testFlowSensitiveInlineVariables2() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function f () {\\n\" +\n        \"    var ab = 0;\\n\" +\n        \"    ab += '-';\\n\" +\n        \"    alert(ab);\\n\" +\n        \"}\",\n        \"function f () {\\n\" +\n        \"    alert('0-');\\n\" +\n        \"}\");\n  }\n",
        "begin_line": 1099,
        "end_line": 1112,
        "comment": "",
        "child_ranges": [
            "(line 1100,col 5)-(line 1100,col 54)",
            "(line 1101,col 5)-(line 1102,col 48)",
            "(line 1103,col 5)-(line 1111,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCollapseAnonymousFunctions()",
        "snippet": "  public void testCollapseAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.collapseAnonymousFunctions = true;\n    test(options, code, \"function f() {}\");\n  }\n",
        "begin_line": 1114,
        "end_line": 1121,
        "comment": "",
        "child_ranges": [
            "(line 1115,col 5)-(line 1115,col 54)",
            "(line 1116,col 5)-(line 1116,col 43)",
            "(line 1117,col 5)-(line 1117,col 28)",
            "(line 1119,col 5)-(line 1119,col 46)",
            "(line 1120,col 5)-(line 1120,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testMoveFunctionDeclarations()",
        "snippet": "  public void testMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f(); function f() { return 3; }\";\n    testSame(options, code);\n\n    options.moveFunctionDeclarations = true;\n    test(options, code, \"function f() { return 3; } var x = f();\");\n  }\n",
        "begin_line": 1123,
        "end_line": 1130,
        "comment": "",
        "child_ranges": [
            "(line 1124,col 5)-(line 1124,col 54)",
            "(line 1125,col 5)-(line 1125,col 60)",
            "(line 1126,col 5)-(line 1126,col 28)",
            "(line 1128,col 5)-(line 1128,col 44)",
            "(line 1129,col 5)-(line 1129,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNameAnonymousFunctions()",
        "snippet": "  public void testNameAnonymousFunctions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    testSame(options, code);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.MAPPED;\n    test(options, code, \"var f = function $() {}\");\n    assertNotNull(lastCompiler.getResult().namedAnonFunctionMap);\n\n    options.anonymousFunctionNaming = AnonymousFunctionNamingPolicy.UNMAPPED;\n    test(options, code, \"var f = function $f$() {}\");\n    assertNull(lastCompiler.getResult().namedAnonFunctionMap);\n  }\n",
        "begin_line": 1132,
        "end_line": 1144,
        "comment": "",
        "child_ranges": [
            "(line 1133,col 5)-(line 1133,col 54)",
            "(line 1134,col 5)-(line 1134,col 43)",
            "(line 1135,col 5)-(line 1135,col 28)",
            "(line 1137,col 5)-(line 1137,col 75)",
            "(line 1138,col 5)-(line 1138,col 51)",
            "(line 1139,col 5)-(line 1139,col 65)",
            "(line 1141,col 5)-(line 1141,col 77)",
            "(line 1142,col 5)-(line 1142,col 53)",
            "(line 1143,col 5)-(line 1143,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var f = function() {};\";\n    String expected = \"var a; var b = function() {}; a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.a = \" + i + \";\";\n      expected += \"a.a = \" + i + \";\";\n    }\n    testSame(options, code);\n\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, expected);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    options.variableRenaming = VariableRenamingPolicy.OFF;\n    testSame(options, code);\n  }\n",
        "begin_line": 1146,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1147,col 5)-(line 1147,col 54)",
            "(line 1148,col 5)-(line 1148,col 43)",
            "(line 1149,col 5)-(line 1149,col 71)",
            "(line 1150,col 5)-(line 1153,col 5)",
            "(line 1154,col 5)-(line 1154,col 28)",
            "(line 1156,col 5)-(line 1156,col 54)",
            "(line 1157,col 5)-(line 1157,col 58)",
            "(line 1158,col 5)-(line 1158,col 34)",
            "(line 1160,col 5)-(line 1160,col 64)",
            "(line 1161,col 5)-(line 1161,col 58)",
            "(line 1162,col 5)-(line 1162,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDevirtualizationAndExtractPrototypeMemberDeclarations()",
        "snippet": "  public void testDevirtualizationAndExtractPrototypeMemberDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    options.devirtualizePrototypeMethods = true;\n    options.collapseAnonymousFunctions = true;\n    options.extractPrototypeMemberDeclarations = true;\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    String code = \"var f = function() {};\";\n    String expected = \"var a; function b() {} a = b.prototype;\";\n    for (int i = 0; i < 10; i++) {\n      code += \"f.prototype.argz = function() {arguments};\";\n      code += \"f.prototype.devir\" + i + \" = function() {};\";\n\n      char letter = (char) ('d' + i);\n      expected += \"a.argz = function() {arguments};\";\n      expected += \"function \" + letter + \"(c){}\";\n    }\n\n    code += \"var F = new f(); F.argz();\";\n    expected += \"var n = new b(); n.argz();\";\n\n    for (int i = 0; i < 10; i++) {\n      code += \"F.devir\" + i + \"();\";\n\n      char letter = (char) ('d' + i);\n      expected += letter + \"(n);\";\n    }\n    test(options, code, expected);\n  }\n",
        "begin_line": 1165,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1166,col 5)-(line 1166,col 54)",
            "(line 1167,col 5)-(line 1167,col 48)",
            "(line 1168,col 5)-(line 1168,col 46)",
            "(line 1169,col 5)-(line 1169,col 54)",
            "(line 1170,col 5)-(line 1170,col 58)",
            "(line 1171,col 5)-(line 1171,col 43)",
            "(line 1172,col 5)-(line 1172,col 64)",
            "(line 1173,col 5)-(line 1180,col 5)",
            "(line 1182,col 5)-(line 1182,col 41)",
            "(line 1183,col 5)-(line 1183,col 45)",
            "(line 1185,col 5)-(line 1190,col 5)",
            "(line 1191,col 5)-(line 1191,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoalesceVariableNames()",
        "snippet": "  public void testCoalesceVariableNames() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() {var x = 3; var y = x; var z = y; return z;}\";\n    testSame(options, code);\n\n    options.coalesceVariableNames = true;\n    test(options, code,\n         \"function f() {var x = 3; x = x; x = x; return x;}\");\n  }\n",
        "begin_line": 1194,
        "end_line": 1202,
        "comment": "",
        "child_ranges": [
            "(line 1195,col 5)-(line 1195,col 54)",
            "(line 1196,col 5)-(line 1196,col 78)",
            "(line 1197,col 5)-(line 1197,col 28)",
            "(line 1199,col 5)-(line 1199,col 41)",
            "(line 1200,col 5)-(line 1201,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testPropertyRenaming()",
        "snippet": "  public void testPropertyRenaming() {\n    CompilerOptions options = createCompilerOptions();\n    options.propertyAffinity = true;\n    String code =\n        \"function f() { return this.foo + this['bar'] + this.Baz; }\" +\n        \"f.prototype.bar = 3; f.prototype.Baz = 3;\";\n    String heuristic =\n        \"function f() { return this.foo + this['bar'] + this.a; }\" +\n        \"f.prototype.bar = 3; f.prototype.a = 3;\";\n    String aggHeuristic =\n        \"function f() { return this.foo + this['b'] + this.a; } \" +\n        \"f.prototype.b = 3; f.prototype.a = 3;\";\n    String all =\n        \"function f() { return this.b + this['bar'] + this.a; }\" +\n        \"f.prototype.c = 3; f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.propertyRenaming = PropertyRenamingPolicy.HEURISTIC;\n    test(options, code, heuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;\n    test(options, code, aggHeuristic);\n\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, all);\n  }\n",
        "begin_line": 1204,
        "end_line": 1229,
        "comment": "",
        "child_ranges": [
            "(line 1205,col 5)-(line 1205,col 54)",
            "(line 1206,col 5)-(line 1206,col 36)",
            "(line 1207,col 5)-(line 1209,col 52)",
            "(line 1210,col 5)-(line 1212,col 50)",
            "(line 1213,col 5)-(line 1215,col 48)",
            "(line 1216,col 5)-(line 1218,col 48)",
            "(line 1219,col 5)-(line 1219,col 28)",
            "(line 1221,col 5)-(line 1221,col 64)",
            "(line 1222,col 5)-(line 1222,col 35)",
            "(line 1224,col 5)-(line 1224,col 75)",
            "(line 1225,col 5)-(line 1225,col 38)",
            "(line 1227,col 5)-(line 1227,col 67)",
            "(line 1228,col 5)-(line 1228,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testConvertToDottedProperties()",
        "snippet": "  public void testConvertToDottedProperties() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return this['bar']; } f.prototype.bar = 3;\";\n    String expected =\n        \"function f() { return this.bar; } f.prototype.a = 3;\";\n    testSame(options, code);\n\n    options.convertToDottedProperties = true;\n    options.propertyRenaming = PropertyRenamingPolicy.ALL_UNQUOTED;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1231,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1232,col 5)-(line 1232,col 54)",
            "(line 1233,col 5)-(line 1234,col 68)",
            "(line 1235,col 5)-(line 1236,col 63)",
            "(line 1237,col 5)-(line 1237,col 28)",
            "(line 1239,col 5)-(line 1239,col 45)",
            "(line 1240,col 5)-(line 1240,col 67)",
            "(line 1241,col 5)-(line 1241,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRewriteFunctionExpressions()",
        "snippet": "  public void testRewriteFunctionExpressions() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a = function() {};\";\n    String expected = \"function JSCompiler_emptyFn(){return function(){}} \" +\n        \"var a = JSCompiler_emptyFn();\";\n    for (int i = 0; i < 10; i++) {\n      code += \"a = function() {};\";\n      expected += \"a = JSCompiler_emptyFn();\";\n    }\n    testSame(options, code);\n\n    options.rewriteFunctionExpressions = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1244,
        "end_line": 1257,
        "comment": "",
        "child_ranges": [
            "(line 1245,col 5)-(line 1245,col 54)",
            "(line 1246,col 5)-(line 1246,col 43)",
            "(line 1247,col 5)-(line 1248,col 40)",
            "(line 1249,col 5)-(line 1252,col 5)",
            "(line 1253,col 5)-(line 1253,col 28)",
            "(line 1255,col 5)-(line 1255,col 46)",
            "(line 1256,col 5)-(line 1256,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasAllStrings()",
        "snippet": "  public void testAliasAllStrings() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return 'a'; }\";\n    String expected = \"var $$S_a = 'a'; function f() { return $$S_a; }\";\n    testSame(options, code);\n\n    options.aliasAllStrings = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1259,
        "end_line": 1267,
        "comment": "",
        "child_ranges": [
            "(line 1260,col 5)-(line 1260,col 54)",
            "(line 1261,col 5)-(line 1261,col 49)",
            "(line 1262,col 5)-(line 1262,col 72)",
            "(line 1263,col 5)-(line 1263,col 28)",
            "(line 1265,col 5)-(line 1265,col 35)",
            "(line 1266,col 5)-(line 1266,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasExterns()",
        "snippet": "  public void testAliasExterns() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"function f() { return window + window + window + window; }\";\n    String expected = \"var GLOBAL_window = window;\" +\n        \"function f() { return GLOBAL_window + GLOBAL_window + \" +\n        \"               GLOBAL_window + GLOBAL_window; }\";\n    testSame(options, code);\n\n    options.aliasExternals = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1269,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1270,col 5)-(line 1270,col 54)",
            "(line 1271,col 5)-(line 1271,col 79)",
            "(line 1272,col 5)-(line 1274,col 58)",
            "(line 1275,col 5)-(line 1275,col 28)",
            "(line 1277,col 5)-(line 1277,col 34)",
            "(line 1278,col 5)-(line 1278,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAliasKeywords()",
        "snippet": "  public void testAliasKeywords() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"function f() { return true + true + true + true + true + true; }\";\n    String expected = \"var JSCompiler_alias_TRUE = true;\" +\n        \"function f() { return JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE + JSCompiler_alias_TRUE + \" +\n        \"    JSCompiler_alias_TRUE; }\";\n    testSame(options, code);\n\n    options.aliasKeywords = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1281,
        "end_line": 1294,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1282,col 54)",
            "(line 1283,col 5)-(line 1284,col 75)",
            "(line 1285,col 5)-(line 1289,col 39)",
            "(line 1290,col 5)-(line 1290,col 28)",
            "(line 1292,col 5)-(line 1292,col 33)",
            "(line 1293,col 5)-(line 1293,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars1()",
        "snippet": "  public void testRenameVars1() {\n    CompilerOptions options = createCompilerOptions();\n    String code =\n        \"var abc = 3; function f() { var xyz = 5; return abc + xyz; }\";\n    String local = \"var abc = 3; function f() { var a = 5; return abc + a; }\";\n    String all = \"var a = 3; function c() { var b = 5; return a + b; }\";\n    testSame(options, code);\n\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    test(options, code, local);\n\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n    test(options, code, all);\n\n    options.reserveRawExports = true;\n  }\n",
        "begin_line": 1296,
        "end_line": 1311,
        "comment": "",
        "child_ranges": [
            "(line 1297,col 5)-(line 1297,col 54)",
            "(line 1298,col 5)-(line 1299,col 71)",
            "(line 1300,col 5)-(line 1300,col 78)",
            "(line 1301,col 5)-(line 1301,col 72)",
            "(line 1302,col 5)-(line 1302,col 28)",
            "(line 1304,col 5)-(line 1304,col 60)",
            "(line 1305,col 5)-(line 1305,col 31)",
            "(line 1307,col 5)-(line 1307,col 58)",
            "(line 1308,col 5)-(line 1308,col 29)",
            "(line 1310,col 5)-(line 1310,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameVars2()",
        "snippet": "  public void testRenameVars2() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.ALL;\n\n    String code =     \"var abc = 3; function f() { window['a'] = 5; }\";\n    String noexport = \"var a = 3;   function b() { window['a'] = 5; }\";\n    String export =   \"var b = 3;   function c() { window['a'] = 5; }\";\n\n    options.reserveRawExports = false;\n    test(options, code, noexport);\n\n    options.reserveRawExports = true;\n    test(options, code, export);\n  }\n",
        "begin_line": 1313,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1314,col 5)-(line 1314,col 54)",
            "(line 1315,col 5)-(line 1315,col 58)",
            "(line 1317,col 5)-(line 1317,col 71)",
            "(line 1318,col 5)-(line 1318,col 71)",
            "(line 1319,col 5)-(line 1319,col 71)",
            "(line 1321,col 5)-(line 1321,col 38)",
            "(line 1322,col 5)-(line 1322,col 34)",
            "(line 1324,col 5)-(line 1324,col 37)",
            "(line 1325,col 5)-(line 1325,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testShadowVaribles()",
        "snippet": "  public void testShadowVaribles() {\n    CompilerOptions options = createCompilerOptions();\n    options.variableRenaming = VariableRenamingPolicy.LOCAL;\n    options.shadowVariables = true;\n    String code =     \"var f = function(x) { return function(y) {}}\";\n    String expected = \"var f = function(a) { return function(a) {}}\";\n    test(options, code, expected);\n  }\n",
        "begin_line": 1328,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1329,col 54)",
            "(line 1330,col 5)-(line 1330,col 60)",
            "(line 1331,col 5)-(line 1331,col 35)",
            "(line 1332,col 5)-(line 1332,col 69)",
            "(line 1333,col 5)-(line 1333,col 69)",
            "(line 1334,col 5)-(line 1334,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenameLabels()",
        "snippet": "  public void testRenameLabels() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"longLabel: while (true) { break longLabel; }\";\n    String expected = \"a: while (true) { break a; }\";\n    testSame(options, code);\n\n    options.labelRenaming = true;\n    test(options, code, expected);\n  }\n",
        "begin_line": 1337,
        "end_line": 1345,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 5)-(line 1338,col 54)",
            "(line 1339,col 5)-(line 1339,col 65)",
            "(line 1340,col 5)-(line 1340,col 53)",
            "(line 1341,col 5)-(line 1341,col 28)",
            "(line 1343,col 5)-(line 1343,col 33)",
            "(line 1344,col 5)-(line 1344,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBadBreakStatementInIdeMode()",
        "snippet": "  public void testBadBreakStatementInIdeMode() {\n    // Ensure that type-checking doesn't crash, even if the CFG is malformed.\n    // This can happen in IDE mode.\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    options.checkTypes = true;\n    test(options,\n         \"function f() { try { } catch(e) { break; } }\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1347,
        "end_line": 1356,
        "comment": "",
        "child_ranges": [
            "(line 1350,col 5)-(line 1350,col 54)",
            "(line 1351,col 5)-(line 1351,col 27)",
            "(line 1352,col 5)-(line 1352,col 30)",
            "(line 1353,col 5)-(line 1355,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue63SourceMap()",
        "snippet": "  public void testIssue63SourceMap() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var a;\";\n\n    options.skipAllPasses = true;\n    options.sourceMapOutputPath = \"./src.map\";\n\n    Compiler compiler = compile(options, code);\n    compiler.toSource();\n  }\n",
        "begin_line": 1358,
        "end_line": 1367,
        "comment": "",
        "child_ranges": [
            "(line 1359,col 5)-(line 1359,col 54)",
            "(line 1360,col 5)-(line 1360,col 27)",
            "(line 1362,col 5)-(line 1362,col 33)",
            "(line 1363,col 5)-(line 1363,col 46)",
            "(line 1365,col 5)-(line 1365,col 47)",
            "(line 1366,col 5)-(line 1366,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp1()",
        "snippet": "  public void testRegExp1() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String expected = \"\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1369,
        "end_line": 1382,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1370,col 54)",
            "(line 1371,col 5)-(line 1371,col 33)",
            "(line 1373,col 5)-(line 1373,col 39)",
            "(line 1375,col 5)-(line 1375,col 28)",
            "(line 1377,col 5)-(line 1377,col 46)",
            "(line 1379,col 5)-(line 1379,col 25)",
            "(line 1381,col 5)-(line 1381,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRegExp2()",
        "snippet": "  public void testRegExp2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/(a)/.test(\\\"a\\\");var a = RegExp.$1\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, CheckRegExp.REGEXP_REFERENCE);\n\n    options.setWarningLevel(DiagnosticGroups.CHECK_REGEXP, CheckLevel.OFF);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1384,
        "end_line": 1400,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 5)-(line 1385,col 54)",
            "(line 1387,col 5)-(line 1387,col 33)",
            "(line 1389,col 5)-(line 1389,col 56)",
            "(line 1391,col 5)-(line 1391,col 28)",
            "(line 1393,col 5)-(line 1393,col 46)",
            "(line 1395,col 5)-(line 1395,col 54)",
            "(line 1397,col 5)-(line 1397,col 75)",
            "(line 1399,col 5)-(line 1399,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals1()",
        "snippet": "  public void testFoldLocals1() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // An external object, whose constructor has no side-effects,\n    // and whose method \"go\" only modifies the object.\n    String code = \"new Widget().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1402,
        "end_line": 1416,
        "comment": "",
        "child_ranges": [
            "(line 1403,col 5)-(line 1403,col 54)",
            "(line 1405,col 5)-(line 1405,col 33)",
            "(line 1409,col 5)-(line 1409,col 39)",
            "(line 1411,col 5)-(line 1411,col 28)",
            "(line 1413,col 5)-(line 1413,col 46)",
            "(line 1415,col 5)-(line 1415,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals2()",
        "snippet": "  public void testFoldLocals2() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n    options.checkTypes = true;\n\n    // An external function that returns a local object that the\n    // method \"go\" that only modifies the object.\n    String code = \"widgetToken().go();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, \"widgetToken()\");\n  }\n",
        "begin_line": 1418,
        "end_line": 1433,
        "comment": "",
        "child_ranges": [
            "(line 1419,col 5)-(line 1419,col 54)",
            "(line 1421,col 5)-(line 1421,col 33)",
            "(line 1422,col 5)-(line 1422,col 30)",
            "(line 1426,col 5)-(line 1426,col 40)",
            "(line 1428,col 5)-(line 1428,col 28)",
            "(line 1430,col 5)-(line 1430,col 46)",
            "(line 1432,col 5)-(line 1432,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals3()",
        "snippet": "  public void testFoldLocals3() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    // A function \"f\" who returns a known local object, and a method that\n    // modifies only modifies that.\n    String definition = \"function f(){return new Widget()}\";\n    String call = \"f().go();\";\n    String code = definition + call;\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    // BROKEN\n    //test(options, code, definition);\n    testSame(options, code);\n  }\n",
        "begin_line": 1436,
        "end_line": 1454,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 5)-(line 1437,col 54)",
            "(line 1439,col 5)-(line 1439,col 33)",
            "(line 1443,col 5)-(line 1443,col 60)",
            "(line 1444,col 5)-(line 1444,col 30)",
            "(line 1445,col 5)-(line 1445,col 36)",
            "(line 1447,col 5)-(line 1447,col 28)",
            "(line 1449,col 5)-(line 1449,col 46)",
            "(line 1453,col 5)-(line 1453,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals4()",
        "snippet": "  public void testFoldLocals4() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"/** @constructor */\\n\"\n        + \"function InternalWidget(){this.x = 1;}\"\n        + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\"\n        + \"new InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){this.x = 1;}\"\n      + \"InternalWidget.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1456,
        "end_line": 1475,
        "comment": "",
        "child_ranges": [
            "(line 1457,col 5)-(line 1457,col 54)",
            "(line 1459,col 5)-(line 1459,col 33)",
            "(line 1461,col 5)-(line 1464,col 47)",
            "(line 1466,col 5)-(line 1466,col 28)",
            "(line 1468,col 5)-(line 1468,col 46)",
            "(line 1470,col 5)-(line 1472,col 73)",
            "(line 1474,col 5)-(line 1474,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals5()",
        "snippet": "  public void testFoldLocals5() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){var a={};a.x={};return a}\"\n        + \"fn().x.y = 1;\";\n\n    // \"fn\" returns a unescaped local object, we should be able to fold it,\n    // but we don't currently.\n    String result = \"\"\n        + \"function fn(){var a={x:{}};return a}\"\n        + \"fn().x.y = 1;\";\n\n    test(options, code, result);\n\n    options.computeFunctionSideEffects = true;\n\n    test(options, code, result);\n  }\n",
        "begin_line": 1477,
        "end_line": 1497,
        "comment": "",
        "child_ranges": [
            "(line 1478,col 5)-(line 1478,col 54)",
            "(line 1480,col 5)-(line 1480,col 33)",
            "(line 1482,col 5)-(line 1484,col 26)",
            "(line 1488,col 5)-(line 1490,col 26)",
            "(line 1492,col 5)-(line 1492,col 32)",
            "(line 1494,col 5)-(line 1494,col 46)",
            "(line 1496,col 5)-(line 1496,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals6()",
        "snippet": "  public void testFoldLocals6() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function fn(){return {}}\"\n        + \"fn().x.y = 1;\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1499,
        "end_line": 1513,
        "comment": "",
        "child_ranges": [
            "(line 1500,col 5)-(line 1500,col 54)",
            "(line 1502,col 5)-(line 1502,col 33)",
            "(line 1504,col 5)-(line 1506,col 26)",
            "(line 1508,col 5)-(line 1508,col 28)",
            "(line 1510,col 5)-(line 1510,col 46)",
            "(line 1512,col 5)-(line 1512,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testFoldLocals7()",
        "snippet": "  public void testFoldLocals7() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = true;\n\n    String code = \"\"\n        + \"function InternalWidget(){return [];}\"\n        + \"Array.prototype.internalGo = function (){this.x = 2};\"\n        + \"InternalWidget().internalGo();\";\n\n    testSame(options, code);\n\n    options.computeFunctionSideEffects = true;\n\n    String optimized = \"\"\n      + \"function InternalWidget(){return [];}\"\n      + \"Array.prototype.internalGo = function (){this.x = 2};\";\n\n    test(options, code, optimized);\n  }\n",
        "begin_line": 1515,
        "end_line": 1534,
        "comment": "",
        "child_ranges": [
            "(line 1516,col 5)-(line 1516,col 54)",
            "(line 1518,col 5)-(line 1518,col 33)",
            "(line 1520,col 5)-(line 1523,col 43)",
            "(line 1525,col 5)-(line 1525,col 28)",
            "(line 1527,col 5)-(line 1527,col 46)",
            "(line 1529,col 5)-(line 1531,col 64)",
            "(line 1533,col 5)-(line 1533,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testVarDeclarationsIntoFor()",
        "snippet": "  public void testVarDeclarationsIntoFor() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"var a = 1; for (var b = 2; ;) {}\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = false;\n\n    test(options, code, \"for (var a = 1, b = 2; ;) {}\");\n  }\n",
        "begin_line": 1536,
        "end_line": 1548,
        "comment": "",
        "child_ranges": [
            "(line 1537,col 5)-(line 1537,col 54)",
            "(line 1539,col 5)-(line 1539,col 49)",
            "(line 1541,col 5)-(line 1541,col 53)",
            "(line 1543,col 5)-(line 1543,col 28)",
            "(line 1545,col 5)-(line 1545,col 49)",
            "(line 1547,col 5)-(line 1547,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testExploitAssigns()",
        "snippet": "  public void testExploitAssigns() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.collapseVariableDeclarations = false;\n\n    String code = \"a = 1; b = a; c = b\";\n\n    testSame(options, code);\n\n    options.collapseVariableDeclarations = true;\n\n    test(options, code, \"c=b=a=1\");\n  }\n",
        "begin_line": 1550,
        "end_line": 1562,
        "comment": "",
        "child_ranges": [
            "(line 1551,col 5)-(line 1551,col 54)",
            "(line 1553,col 5)-(line 1553,col 49)",
            "(line 1555,col 5)-(line 1555,col 40)",
            "(line 1557,col 5)-(line 1557,col 28)",
            "(line 1559,col 5)-(line 1559,col 48)",
            "(line 1561,col 5)-(line 1561,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRecoverOnBadExterns()",
        "snippet": "  public void testRecoverOnBadExterns() throws Exception {\n    // This test is for a bug in a very narrow set of circumstances:\n    // 1) externs validation has to be off.\n    // 2) aliasExternals has to be on.\n    // 3) The user has to reference a \"normal\" variable in externs.\n    // This case is handled at checking time by injecting a\n    // synthetic extern variable, and adding a \"@suppress {duplicate}\" to\n    // the normal code at compile time. But optimizations may remove that\n    // annotation, so we need to make sure that the variable declarations\n    // are de-duped before that happens.\n    CompilerOptions options = createCompilerOptions();\n\n    options.aliasExternals = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\", \"extern.foo\"));\n\n    test(options,\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         \"var extern; \" +\n         \"function f() { return extern + extern + extern + extern; }\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n  }\n",
        "begin_line": 1564,
        "end_line": 1586,
        "comment": "",
        "child_ranges": [
            "(line 1574,col 5)-(line 1574,col 54)",
            "(line 1576,col 5)-(line 1576,col 34)",
            "(line 1577,col 5)-(line 1578,col 54)",
            "(line 1580,col 5)-(line 1585,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testDuplicateVariablesInExterns()",
        "snippet": "  public void testDuplicateVariablesInExterns() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = true;\n    externs = ImmutableList.of(\n        SourceFile.fromCode(\"externs\",\n            \"var externs = {}; /** @suppress {duplicate} */ var externs = {};\"));\n    testSame(options, \"\");\n  }\n",
        "begin_line": 1588,
        "end_line": 1595,
        "comment": "",
        "child_ranges": [
            "(line 1589,col 5)-(line 1589,col 54)",
            "(line 1590,col 5)-(line 1590,col 32)",
            "(line 1591,col 5)-(line 1593,col 81)",
            "(line 1594,col 5)-(line 1594,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode()",
        "snippet": "  public void testLanguageMode() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n\n    String code = \"var a = {get f(){}}\";\n\n    Compiler compiler = compile(options, code);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\n        \"JSC_PARSE_ERROR. Parse error. \" +\n        \"getters are not supported in Internet Explorer \" +\n        \"at i0 line 1 : 0\",\n        compiler.getErrors()[0].toString());\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    testSame(options, code);\n  }\n",
        "begin_line": 1597,
        "end_line": 1618,
        "comment": "",
        "child_ranges": [
            "(line 1598,col 5)-(line 1598,col 54)",
            "(line 1599,col 5)-(line 1599,col 52)",
            "(line 1601,col 5)-(line 1601,col 40)",
            "(line 1603,col 5)-(line 1603,col 47)",
            "(line 1604,col 5)-(line 1604,col 49)",
            "(line 1605,col 5)-(line 1609,col 44)",
            "(line 1611,col 5)-(line 1611,col 52)",
            "(line 1613,col 5)-(line 1613,col 28)",
            "(line 1615,col 5)-(line 1615,col 59)",
            "(line 1617,col 5)-(line 1617,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLanguageMode2()",
        "snippet": "  public void testLanguageMode2() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT3);\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF);\n\n    String code = \"var a  = 2; delete a;\";\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    testSame(options, code);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n\n    test(options,\n        code,\n        code,\n        StrictModeCheck.DELETE_VARIABLE);\n  }\n",
        "begin_line": 1620,
        "end_line": 1639,
        "comment": "",
        "child_ranges": [
            "(line 1621,col 5)-(line 1621,col 54)",
            "(line 1622,col 5)-(line 1622,col 52)",
            "(line 1623,col 5)-(line 1623,col 73)",
            "(line 1625,col 5)-(line 1625,col 42)",
            "(line 1627,col 5)-(line 1627,col 28)",
            "(line 1629,col 5)-(line 1629,col 52)",
            "(line 1631,col 5)-(line 1631,col 28)",
            "(line 1633,col 5)-(line 1633,col 59)",
            "(line 1635,col 5)-(line 1638,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue598()",
        "snippet": "  public void testIssue598() {\n    CompilerOptions options = createCompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5_STRICT);\n    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n\n    String code =\n        \"'use strict';\\n\" +\n        \"function App() {}\\n\" +\n        \"App.prototype = {\\n\" +\n        \"  get appData() { return this.appData_; },\\n\" +\n        \"  set appData(data) { this.appData_ = data; }\\n\" +\n        \"};\";\n\n    Compiler compiler = compile(options, code);\n    testSame(options, code);\n  }\n",
        "begin_line": 1641,
        "end_line": 1658,
        "comment": "",
        "child_ranges": [
            "(line 1642,col 5)-(line 1642,col 54)",
            "(line 1643,col 5)-(line 1643,col 59)",
            "(line 1644,col 5)-(line 1644,col 60)",
            "(line 1646,col 5)-(line 1646,col 52)",
            "(line 1648,col 5)-(line 1654,col 13)",
            "(line 1656,col 5)-(line 1656,col 47)",
            "(line 1657,col 5)-(line 1657,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue701()",
        "snippet": "  public void testIssue701() {\n    // Check ASCII art in license comments.\n    String ascii = \"/**\\n\" +\n        \" * @preserve\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\";\n    String result = \"/*\\n\\n\" +\n        \"   This\\n\" +\n        \"     is\\n\" +\n        \"       ASCII    ART\\n\" +\n        \"*/\\n\";\n    testSame(createCompilerOptions(), ascii);\n    assertEquals(result, lastCompiler.toSource());\n  }\n",
        "begin_line": 1660,
        "end_line": 1675,
        "comment": "",
        "child_ranges": [
            "(line 1662,col 5)-(line 1667,col 13)",
            "(line 1668,col 5)-(line 1672,col 15)",
            "(line 1673,col 5)-(line 1673,col 45)",
            "(line 1674,col 5)-(line 1674,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCoaleseVariables()",
        "snippet": "  public void testCoaleseVariables() {\n    CompilerOptions options = createCompilerOptions();\n\n    options.foldConstants = false;\n    options.coalesceVariableNames = true;\n\n    String code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    String expected =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    a = a;\" +\n        \"    return a;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = false;\n\n    code =\n        \"function f(a) {\" +\n        \"  if (a) {\" +\n        \"    return a;\" +\n        \"  } else {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n    expected =\n        \"function f(a) {\" +\n        \"  if (!a) {\" +\n        \"    var b = a;\" +\n        \"    return b;\" +\n        \"  }\" +\n        \"  return a;\" +\n        \"}\";\n\n    test(options, code, expected);\n\n    options.foldConstants = true;\n    options.coalesceVariableNames = true;\n\n    expected =\n      \"function f(a) {\" +\n      \"  return a;\" +\n      \"}\";\n\n    test(options, code, expected);\n  }\n",
        "begin_line": 1677,
        "end_line": 1739,
        "comment": "",
        "child_ranges": [
            "(line 1678,col 5)-(line 1678,col 54)",
            "(line 1680,col 5)-(line 1680,col 34)",
            "(line 1681,col 5)-(line 1681,col 41)",
            "(line 1683,col 5)-(line 1692,col 12)",
            "(line 1693,col 5)-(line 1702,col 12)",
            "(line 1704,col 5)-(line 1704,col 34)",
            "(line 1706,col 5)-(line 1706,col 33)",
            "(line 1707,col 5)-(line 1707,col 42)",
            "(line 1709,col 5)-(line 1718,col 12)",
            "(line 1719,col 5)-(line 1726,col 12)",
            "(line 1728,col 5)-(line 1728,col 34)",
            "(line 1730,col 5)-(line 1730,col 33)",
            "(line 1731,col 5)-(line 1731,col 41)",
            "(line 1733,col 5)-(line 1736,col 10)",
            "(line 1738,col 5)-(line 1738,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateStatementFusion()",
        "snippet": "  public void testLateStatementFusion() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"while(a){a();if(b){b();b()}}\",\n        \"for(;a;)a(),b&&(b(),b())\");\n  }\n",
        "begin_line": 1741,
        "end_line": 1747,
        "comment": "",
        "child_ranges": [
            "(line 1742,col 5)-(line 1742,col 54)",
            "(line 1743,col 5)-(line 1743,col 33)",
            "(line 1744,col 5)-(line 1746,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testLateConstantReordering()",
        "snippet": "  public void testLateConstantReordering() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n        \"if (x < 1 || x > 1 || 1 < x || 1 > x) { alert(x) }\",\n        \"   (1 > x || 1 < x || 1 < x || 1 > x) && alert(x) \");\n  }\n",
        "begin_line": 1749,
        "end_line": 1755,
        "comment": "",
        "child_ranges": [
            "(line 1750,col 5)-(line 1750,col 54)",
            "(line 1751,col 5)-(line 1751,col 33)",
            "(line 1752,col 5)-(line 1754,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testsyntheticBlockOnDeadAssignments()",
        "snippet": "  public void testsyntheticBlockOnDeadAssignments() {\n    CompilerOptions options = createCompilerOptions();\n    options.deadAssignmentElimination = true;\n    options.removeUnusedVars = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"var x; x = 1; START(); x = 1;END();x()\",\n                  \"var x; x = 1;{START();{x = 1}END()}x()\");\n  }\n",
        "begin_line": 1757,
        "end_line": 1765,
        "comment": "",
        "child_ranges": [
            "(line 1758,col 5)-(line 1758,col 54)",
            "(line 1759,col 5)-(line 1759,col 45)",
            "(line 1760,col 5)-(line 1760,col 36)",
            "(line 1761,col 5)-(line 1761,col 48)",
            "(line 1762,col 5)-(line 1762,col 44)",
            "(line 1763,col 5)-(line 1764,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug4152835()",
        "snippet": "  public void testBug4152835() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    options.syntheticBlockStartMarker = \"START\";\n    options.syntheticBlockEndMarker = \"END\";\n    test(options, \"START();END()\", \"{START();{}END()}\");\n  }\n",
        "begin_line": 1767,
        "end_line": 1773,
        "comment": "",
        "child_ranges": [
            "(line 1768,col 5)-(line 1768,col 54)",
            "(line 1769,col 5)-(line 1769,col 33)",
            "(line 1770,col 5)-(line 1770,col 48)",
            "(line 1771,col 5)-(line 1771,col 44)",
            "(line 1772,col 5)-(line 1772,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBug5786871()",
        "snippet": "  public void testBug5786871() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options, \"function () {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 1775,
        "end_line": 1779,
        "comment": "",
        "child_ranges": [
            "(line 1776,col 5)-(line 1776,col 54)",
            "(line 1777,col 5)-(line 1777,col 27)",
            "(line 1778,col 5)-(line 1778,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue378()",
        "snippet": "  public void testIssue378() {\n    CompilerOptions options = createCompilerOptions();\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    testSame(options, \"function f(c) {var f = c; arguments[0] = this;\" +\n                      \"    f.apply(this, arguments); return this;}\");\n  }\n",
        "begin_line": 1781,
        "end_line": 1787,
        "comment": "",
        "child_ranges": [
            "(line 1782,col 5)-(line 1782,col 54)",
            "(line 1783,col 5)-(line 1783,col 35)",
            "(line 1784,col 5)-(line 1784,col 48)",
            "(line 1785,col 5)-(line 1786,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue550()",
        "snippet": "  public void testIssue550() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.SIMPLE_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.foldConstants = true;\n    options.inlineVariables = true;\n    options.flowSensitiveInlineVariables = true;\n    test(options,\n        \"function f(h) {\\n\" +\n        \"  var a = h;\\n\" +\n        \"  a = a + 'x';\\n\" +\n        \"  a = a + 'y';\\n\" +\n        \"  return a;\\n\" +\n        \"}\",\n        \"function f(a) {return a + 'xy'}\");\n  }\n",
        "begin_line": 1789,
        "end_line": 1804,
        "comment": "",
        "child_ranges": [
            "(line 1790,col 5)-(line 1790,col 54)",
            "(line 1791,col 5)-(line 1792,col 48)",
            "(line 1793,col 5)-(line 1793,col 33)",
            "(line 1794,col 5)-(line 1794,col 35)",
            "(line 1795,col 5)-(line 1795,col 48)",
            "(line 1796,col 5)-(line 1803,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIssue284()",
        "snippet": "  public void testIssue284() {\n    CompilerOptions options = createCompilerOptions();\n    options.smartNameRemoval = true;\n    test(options,\n        \"var goog = {};\" +\n        \"goog.inherits = function(x, y) {};\" +\n        \"var ns = {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.FooEvent = function() {};\" +\n        \"/** @constructor */\" +\n        \"ns.PageSelectionModel.SelectEvent = function() {};\" +\n        \"goog.inherits(ns.PageSelectionModel.ChangeEvent,\" +\n        \"    ns.PageSelectionModel.FooEvent);\",\n        \"\");\n  }\n",
        "begin_line": 1806,
        "end_line": 1822,
        "comment": "",
        "child_ranges": [
            "(line 1807,col 5)-(line 1807,col 54)",
            "(line 1808,col 5)-(line 1808,col 36)",
            "(line 1809,col 5)-(line 1821,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCodingConvention()",
        "snippet": "  public void testCodingConvention() {\n    Compiler compiler = new Compiler();\n    compiler.initOptions(new CompilerOptions());\n    assertEquals(\n      compiler.getCodingConvention().getClass().toString(),\n      ClosureCodingConvention.class.toString());\n  }\n",
        "begin_line": 1824,
        "end_line": 1830,
        "comment": "",
        "child_ranges": [
            "(line 1825,col 5)-(line 1825,col 39)",
            "(line 1826,col 5)-(line 1826,col 48)",
            "(line 1827,col 5)-(line 1829,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testJQueryStringSplitLoops()",
        "snippet": "  public void testJQueryStringSplitLoops() {\n    CompilerOptions options = createCompilerOptions();\n    options.foldConstants = true;\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"var x='1,2,3,4,5,6,7'.split(',')\");\n\n    options = createCompilerOptions();\n    options.foldConstants = true;\n    options.computeFunctionSideEffects = false;\n    options.removeUnusedVars = true;\n\n    // If we do splits too early, it would add a sideeffect to x.\n    test(options,\n      \"var x=['1','2','3','4','5','6','7']\",\n      \"\");\n\n  }\n",
        "begin_line": 1832,
        "end_line": 1849,
        "comment": "",
        "child_ranges": [
            "(line 1833,col 5)-(line 1833,col 54)",
            "(line 1834,col 5)-(line 1834,col 33)",
            "(line 1835,col 5)-(line 1837,col 42)",
            "(line 1839,col 5)-(line 1839,col 38)",
            "(line 1840,col 5)-(line 1840,col 33)",
            "(line 1841,col 5)-(line 1841,col 47)",
            "(line 1842,col 5)-(line 1842,col 36)",
            "(line 1845,col 5)-(line 1847,col 10)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testAlwaysRunSafetyCheck()",
        "snippet": "  public void testAlwaysRunSafetyCheck() {\n    CompilerOptions options = createCompilerOptions();\n    options.checkSymbols = false;\n    options.customPasses = ArrayListMultimap.create();\n    options.customPasses.put(\n        CustomPassExecutionTime.BEFORE_OPTIMIZATIONS,\n        new CompilerPass() {\n          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n        });\n    try {\n      test(options,\n           \"var x = 3; function f() { return x + z; }\",\n           \"function f() { return x + z; }\");\n      fail(\"Expected runtime exception\");\n    } catch (RuntimeException e) {\n      assertTrue(e.getMessage().indexOf(\"Unexpected variable x\") != -1);\n    }\n  }\n",
        "begin_line": 1851,
        "end_line": 1872,
        "comment": "",
        "child_ranges": [
            "(line 1852,col 5)-(line 1852,col 54)",
            "(line 1853,col 5)-(line 1853,col 33)",
            "(line 1854,col 5)-(line 1854,col 54)",
            "(line 1855,col 5)-(line 1863,col 11)",
            "(line 1864,col 5)-(line 1871,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.Anonymous-926b635c-1a36-4eb9-933a-0de1a6eee060.process(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)",
        "snippet": "          @Override public void process(Node externs, Node root) {\n            Node var = root.getLastChild().getFirstChild();\n            assertEquals(Token.VAR, var.getType());\n            var.detachFromParent();\n          }\n",
        "begin_line": 1858,
        "end_line": 1862,
        "comment": "",
        "child_ranges": [
            "(line 1859,col 13)-(line 1859,col 59)",
            "(line 1860,col 13)-(line 1860,col 51)",
            "(line 1861,col 13)-(line 1861,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressEs5StrictWarning()",
        "snippet": "  public void testSuppressEs5StrictWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n    testSame(options,\n        \"/** @suppress{es5Strict} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1874,
        "end_line": 1880,
        "comment": "",
        "child_ranges": [
            "(line 1875,col 5)-(line 1875,col 54)",
            "(line 1876,col 5)-(line 1876,col 77)",
            "(line 1877,col 5)-(line 1879,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testCheckProvidesWarning()",
        "snippet": "  public void testCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    test(options,\n        \"/** @constructor */\\n\" +\n        \"function f() { var arguments; }\",\n        DiagnosticType.warning(\"JSC_MISSING_PROVIDE\", \"missing goog.provide(''{0}'')\"));\n  }\n",
        "begin_line": 1882,
        "end_line": 1890,
        "comment": "",
        "child_ranges": [
            "(line 1883,col 5)-(line 1883,col 54)",
            "(line 1884,col 5)-(line 1884,col 81)",
            "(line 1885,col 5)-(line 1885,col 49)",
            "(line 1886,col 5)-(line 1889,col 88)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSuppressCheckProvidesWarning()",
        "snippet": "  public void testSuppressCheckProvidesWarning() {\n    CompilerOptions options = createCompilerOptions();\n    options.setWarningLevel(DiagnosticGroups.CHECK_PROVIDES, CheckLevel.WARNING);\n    options.setCheckProvides(CheckLevel.WARNING);\n    testSame(options,\n        \"/** @constructor\\n\" +\n        \" *  @suppress{checkProvides} */\\n\" +\n        \"function f() { var arguments; }\");\n  }\n",
        "begin_line": 1892,
        "end_line": 1900,
        "comment": "",
        "child_ranges": [
            "(line 1893,col 5)-(line 1893,col 54)",
            "(line 1894,col 5)-(line 1894,col 81)",
            "(line 1895,col 5)-(line 1895,col 49)",
            "(line 1896,col 5)-(line 1899,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespace()",
        "snippet": "  public void testRenamePrefixNamespace() {\n    String code =\n        \"var x = {}; x.FOO = 5; x.bar = 3;\";\n\n    CompilerOptions options = createCompilerOptions();\n    testSame(options, code);\n\n    options.collapseProperties = true;\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.x$FOO = 5; _.x$bar = 3;\");\n  }\n",
        "begin_line": 1902,
        "end_line": 1912,
        "comment": "",
        "child_ranges": [
            "(line 1903,col 5)-(line 1904,col 44)",
            "(line 1906,col 5)-(line 1906,col 54)",
            "(line 1907,col 5)-(line 1907,col 28)",
            "(line 1909,col 5)-(line 1909,col 38)",
            "(line 1910,col 5)-(line 1910,col 40)",
            "(line 1911,col 5)-(line 1911,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testRenamePrefixNamespaceActivatesMoveFunctionDeclarations()",
        "snippet": "  public void testRenamePrefixNamespaceActivatesMoveFunctionDeclarations() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var x = f; function f() { return 3; }\";\n    testSame(options, code);\n    assertFalse(options.moveFunctionDeclarations);\n    options.renamePrefixNamespace = \"_\";\n    test(options, code, \"_.f = function() { return 3; }; _.x = _.f;\");\n  }\n",
        "begin_line": 1914,
        "end_line": 1921,
        "comment": "",
        "child_ranges": [
            "(line 1915,col 5)-(line 1915,col 54)",
            "(line 1916,col 5)-(line 1916,col 58)",
            "(line 1917,col 5)-(line 1917,col 28)",
            "(line 1918,col 5)-(line 1918,col 50)",
            "(line 1919,col 5)-(line 1919,col 40)",
            "(line 1920,col 5)-(line 1920,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testBrokenNameSpace()",
        "snippet": "  public void testBrokenNameSpace() {\n    CompilerOptions options = createCompilerOptions();\n    String code = \"var goog; goog.provide('i.am.on.a.Horse');\" +\n                  \"i.am.on.a.Horse = function() {};\" +\n                  \"i.am.on.a.Horse.prototype.x = function() {};\" +\n                  \"i.am.on.a.Boat.prototype.y = function() {}\";\n    options.closurePass = true;\n    options.collapseProperties = true;\n    options.smartNameRemoval = true;\n    test(options, code, \"\");\n  }\n",
        "begin_line": 1923,
        "end_line": 1933,
        "comment": "",
        "child_ranges": [
            "(line 1924,col 5)-(line 1924,col 54)",
            "(line 1925,col 5)-(line 1928,col 63)",
            "(line 1929,col 5)-(line 1929,col 31)",
            "(line 1930,col 5)-(line 1930,col 38)",
            "(line 1931,col 5)-(line 1931,col 36)",
            "(line 1932,col 5)-(line 1932,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNamelessParameter()",
        "snippet": "  public void testNamelessParameter() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    String code =\n        \"var impl_0;\" +\n        \"$load($init());\" +\n        \"function $load(){\" +\n        \"  window['f'] = impl_0;\" +\n        \"}\" +\n        \"function $init() {\" +\n        \"  impl_0 = {};\" +\n        \"}\";\n    String result =\n        \"window.f = {};\";\n    test(options, code, result);\n  }\n",
        "begin_line": 1935,
        "end_line": 1951,
        "comment": "",
        "child_ranges": [
            "(line 1936,col 5)-(line 1936,col 54)",
            "(line 1937,col 5)-(line 1938,col 48)",
            "(line 1939,col 5)-(line 1947,col 12)",
            "(line 1948,col 5)-(line 1949,col 25)",
            "(line 1950,col 5)-(line 1950,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testHiddenSideEffect()",
        "snippet": "  public void testHiddenSideEffect() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setAliasExternals(true);\n    String code =\n        \"window.offsetWidth;\";\n    String result =\n        \"window.offsetWidth;\";\n    test(options, code, result);\n  }\n",
        "begin_line": 1953,
        "end_line": 1963,
        "comment": "",
        "child_ranges": [
            "(line 1954,col 5)-(line 1954,col 54)",
            "(line 1955,col 5)-(line 1956,col 48)",
            "(line 1957,col 5)-(line 1957,col 36)",
            "(line 1958,col 5)-(line 1959,col 30)",
            "(line 1960,col 5)-(line 1961,col 30)",
            "(line 1962,col 5)-(line 1962,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testNegativeZero()",
        "snippet": "  public void testNegativeZero() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    test(options,\n        \"function bar(x) { return x; }\\n\" +\n        \"function foo(x) { print(x / bar(0));\\n\" +\n        \"                 print(x / bar(-0)); }\\n\" +\n        \"foo(3);\",\n        \"print(3/0);print(3/-0);\");\n  }\n",
        "begin_line": 1965,
        "end_line": 1975,
        "comment": "",
        "child_ranges": [
            "(line 1966,col 5)-(line 1966,col 54)",
            "(line 1967,col 5)-(line 1968,col 48)",
            "(line 1969,col 5)-(line 1974,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSingletonGetter1()",
        "snippet": "  public void testSingletonGetter1() {\n    CompilerOptions options = createCompilerOptions();\n    CompilationLevel.ADVANCED_OPTIMIZATIONS\n        .setOptionsForCompilationLevel(options);\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n        \"/** @const */\\n\" +\n        \"var goog = goog || {};\\n\" +\n        \"goog.addSingletonGetter = function(ctor) {\\n\" +\n        \"  ctor.getInstance = function() {\\n\" +\n        \"    return ctor.instance_ || (ctor.instance_ = new ctor());\\n\" +\n        \"  };\\n\" +\n        \"};\" +\n        \"function Foo() {}\\n\" +\n        \"goog.addSingletonGetter(Foo);\" +\n        \"Foo.prototype.bar = 1;\" +\n        \"function Bar() {}\\n\" +\n        \"goog.addSingletonGetter(Bar);\" +\n        \"Bar.prototype.bar = 1;\",\n        \"\");\n  }\n",
        "begin_line": 1977,
        "end_line": 1997,
        "comment": "",
        "child_ranges": [
            "(line 1978,col 5)-(line 1978,col 54)",
            "(line 1979,col 5)-(line 1980,col 48)",
            "(line 1981,col 5)-(line 1981,col 63)",
            "(line 1982,col 5)-(line 1996,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction1()",
        "snippet": "  public void testIncompleteFunction1() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"var foo = {bar: function(e) }\" },\n        new String[] { \"var foo = {bar: function(e){}};\" },\n        warnings\n    );\n  }\n",
        "begin_line": 1999,
        "end_line": 2010,
        "comment": "",
        "child_ranges": [
            "(line 2000,col 5)-(line 2000,col 54)",
            "(line 2001,col 5)-(line 2001,col 27)",
            "(line 2002,col 5)-(line 2004,col 40)",
            "(line 2005,col 5)-(line 2009,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testIncompleteFunction2()",
        "snippet": "  public void testIncompleteFunction2() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    DiagnosticType[] warnings = new DiagnosticType[]{\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR,\n        RhinoErrorReporter.PARSE_ERROR};\n    test(options,\n        new String[] { \"function hi\" },\n        new String[] { \"function hi() {}\" },\n        warnings\n    );\n  }\n",
        "begin_line": 2012,
        "end_line": 2027,
        "comment": "",
        "child_ranges": [
            "(line 2013,col 5)-(line 2013,col 54)",
            "(line 2014,col 5)-(line 2014,col 27)",
            "(line 2015,col 5)-(line 2021,col 40)",
            "(line 2022,col 5)-(line 2026,col 6)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSortingOff()",
        "snippet": "  public void testSortingOff() {\n    CompilerOptions options = new CompilerOptions();\n    options.closurePass = true;\n    options.setCodingConvention(new ClosureCodingConvention());\n    test(options,\n         new String[] {\n           \"goog.require('goog.beer');\",\n           \"goog.provide('goog.beer');\"\n         },\n         ProcessClosurePrimitives.LATE_PROVIDE_ERROR);\n  }\n",
        "begin_line": 2029,
        "end_line": 2039,
        "comment": "",
        "child_ranges": [
            "(line 2030,col 5)-(line 2030,col 52)",
            "(line 2031,col 5)-(line 2031,col 31)",
            "(line 2032,col 5)-(line 2032,col 63)",
            "(line 2033,col 5)-(line 2038,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testUnboundedArrayLiteralInfiniteLoop()",
        "snippet": "  public void testUnboundedArrayLiteralInfiniteLoop() {\n    CompilerOptions options = createCompilerOptions();\n    options.ideMode = true;\n    test(options,\n         \"var x = [1, 2\",\n         \"var x = [1, 2]\",\n         RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 2041,
        "end_line": 2048,
        "comment": "",
        "child_ranges": [
            "(line 2042,col 5)-(line 2042,col 54)",
            "(line 2043,col 5)-(line 2043,col 27)",
            "(line 2044,col 5)-(line 2047,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testProvideRequireSameFile()",
        "snippet": "  public void testProvideRequireSameFile() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.setDependencyOptions(\n        new DependencyOptions()\n        .setDependencySorting(true));\n    options.closurePass = true;\n    test(\n        options,\n        \"goog.provide('x');\\ngoog.require('x');\",\n        \"var x = {};\");\n  }\n",
        "begin_line": 2050,
        "end_line": 2060,
        "comment": "",
        "child_ranges": [
            "(line 2051,col 5)-(line 2051,col 54)",
            "(line 2052,col 5)-(line 2054,col 37)",
            "(line 2055,col 5)-(line 2055,col 31)",
            "(line 2056,col 5)-(line 2059,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuard()",
        "snippet": "  public void testStrictWarningsGuard() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(1, compiler.getErrors().length);\n    assertEquals(0, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2062,
        "end_line": 2071,
        "comment": "",
        "child_ranges": [
            "(line 2063,col 5)-(line 2063,col 54)",
            "(line 2064,col 5)-(line 2064,col 30)",
            "(line 2065,col 5)-(line 2065,col 56)",
            "(line 2067,col 5)-(line 2068,col 65)",
            "(line 2069,col 5)-(line 2069,col 49)",
            "(line 2070,col 5)-(line 2070,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testStrictWarningsGuardEmergencyMode()",
        "snippet": "  public void testStrictWarningsGuardEmergencyMode() throws Exception {\n    CompilerOptions options = createCompilerOptions();\n    options.checkTypes = true;\n    options.addWarningsGuard(new StrictWarningsGuard());\n    options.useEmergencyFailSafe();\n\n    Compiler compiler = compile(options,\n        \"/** @return {number} */ function f() { return true; }\");\n    assertEquals(0, compiler.getErrors().length);\n    assertEquals(1, compiler.getWarnings().length);\n  }\n",
        "begin_line": 2073,
        "end_line": 2083,
        "comment": "",
        "child_ranges": [
            "(line 2074,col 5)-(line 2074,col 54)",
            "(line 2075,col 5)-(line 2075,col 30)",
            "(line 2076,col 5)-(line 2076,col 56)",
            "(line 2077,col 5)-(line 2077,col 35)",
            "(line 2079,col 5)-(line 2080,col 65)",
            "(line 2081,col 5)-(line 2081,col 49)",
            "(line 2082,col 5)-(line 2082,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  private void testSame(CompilerOptions options, String original) {\n    testSame(options, new String[] { original });\n  }\n",
        "begin_line": 2085,
        "end_line": 2087,
        "comment": "",
        "child_ranges": [
            "(line 2086,col 5)-(line 2086,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.testSame(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  private void testSame(CompilerOptions options, String[] original) {\n    test(options, original, original);\n  }\n",
        "begin_line": 2089,
        "end_line": 2091,
        "comment": "",
        "child_ranges": [
            "(line 2090,col 5)-(line 2090,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, String compiled) {\n    test(options, new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 2097,
        "end_line": 2100,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 2099,col 5)-(line 2099,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled) {\n    Compiler compiler = compile(options, original);\n    assertEquals(\"Expected no warnings or errors\\n\" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        0, compiler.getErrors().length + compiler.getWarnings().length);\n\n    Node root = compiler.getRoot().getLastChild();\n    Node expectedRoot = parse(compiled, options);\n    String explanation = expectedRoot.checkTreeEquals(root);\n    assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n        \"\\nResult: \" + compiler.toSource(root) +\n        \"\\n\" + explanation, explanation);\n  }\n",
        "begin_line": 2106,
        "end_line": 2120,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 2108,col 5)-(line 2108,col 51)",
            "(line 2109,col 5)-(line 2112,col 72)",
            "(line 2114,col 5)-(line 2114,col 50)",
            "(line 2115,col 5)-(line 2115,col 49)",
            "(line 2116,col 5)-(line 2116,col 60)",
            "(line 2117,col 5)-(line 2119,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, DiagnosticType warning) {\n    test(options, new String[] { original }, warning);\n  }\n",
        "begin_line": 2126,
        "end_line": 2129,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 2128,col 5)-(line 2128,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String original, String compiled, DiagnosticType warning) {\n    test(options, new String[] { original }, new String[] { compiled },\n         warning);\n  }\n",
        "begin_line": 2131,
        "end_line": 2135,
        "comment": "",
        "child_ranges": [
            "(line 2133,col 5)-(line 2134,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, DiagnosticType warning) {\n    test(options, original, null, warning);\n  }\n",
        "begin_line": 2137,
        "end_line": 2140,
        "comment": "",
        "child_ranges": [
            "(line 2139,col 5)-(line 2139,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType warning) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, 1);\n    assertEquals(\"Expected exactly one warning or error\",\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n    if (compiler.getErrors().length > 0) {\n      assertEquals(warning, compiler.getErrors()[0].getType());\n    } else {\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 2146,
        "end_line": 2166,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 2148,col 5)-(line 2148,col 51)",
            "(line 2149,col 5)-(line 2149,col 49)",
            "(line 2150,col 5)-(line 2151,col 72)",
            "(line 2152,col 5)-(line 2156,col 5)",
            "(line 2158,col 5)-(line 2165,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.test(com.google.javascript.jscomp.CompilerOptions, java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType[])",
        "snippet": "  private void test(CompilerOptions options,\n      String[] original, String[] compiled, DiagnosticType[] warnings) {\n    Compiler compiler = compile(options, original);\n    checkUnexpectedErrorsOrWarnings(compiler, warnings.length);\n\n    if (compiled != null) {\n      Node root = compiler.getRoot().getLastChild();\n      Node expectedRoot = parse(compiled, options);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 2172,
        "end_line": 2185,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * there is an error or warning.\n   ",
        "child_ranges": [
            "(line 2174,col 5)-(line 2174,col 51)",
            "(line 2175,col 5)-(line 2175,col 63)",
            "(line 2177,col 5)-(line 2184,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.checkUnexpectedErrorsOrWarnings(com.google.javascript.jscomp.Compiler, int)",
        "snippet": "  private void checkUnexpectedErrorsOrWarnings(\n      Compiler compiler, int expected) {\n    int actual = compiler.getErrors().length + compiler.getWarnings().length;\n    if (actual != expected) {\n      String msg = \"\";\n      for (JSError err : compiler.getErrors()) {\n        msg += \"Error:\" + err.toString() + \"\\n\";\n      }\n      for (JSError err : compiler.getWarnings()) {\n        msg += \"Warning:\" + err.toString() + \"\\n\";\n      }\n      assertEquals(\"Unexpected warnings or errors.\\n \" + msg,\n        expected, actual);\n    }\n  }\n",
        "begin_line": 2187,
        "end_line": 2201,
        "comment": "",
        "child_ranges": [
            "(line 2189,col 5)-(line 2189,col 77)",
            "(line 2190,col 5)-(line 2200,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String)",
        "snippet": "  private Compiler compile(CompilerOptions options, String original) {\n    return compile(options, new String[] { original });\n  }\n",
        "begin_line": 2203,
        "end_line": 2205,
        "comment": "",
        "child_ranges": [
            "(line 2204,col 5)-(line 2204,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.compile(com.google.javascript.jscomp.CompilerOptions, java.lang.String[])",
        "snippet": "  private Compiler compile(CompilerOptions options, String[] original) {\n    Compiler compiler = lastCompiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.compileModules(\n        externs, Lists.newArrayList(CompilerTestCase.createModuleChain(original)),\n        options);\n    return compiler;\n  }\n",
        "begin_line": 2207,
        "end_line": 2217,
        "comment": "",
        "child_ranges": [
            "(line 2208,col 5)-(line 2208,col 54)",
            "(line 2209,col 5)-(line 2209,col 51)",
            "(line 2210,col 5)-(line 2212,col 5)",
            "(line 2213,col 5)-(line 2215,col 17)",
            "(line 2216,col 5)-(line 2216,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.parse(java.lang.String[], com.google.javascript.jscomp.CompilerOptions)",
        "snippet": "  private Node parse(String[] original, CompilerOptions options) {\n    Compiler compiler = new Compiler();\n    List<SourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(SourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    compiler.init(externs, inputs, options);\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node all = compiler.parseInputs();\n    checkUnexpectedErrorsOrWarnings(compiler, 0);\n    Node n = all.getLastChild();\n    Node externs = all.getFirstChild();\n\n    (new CreateSyntheticBlocks(\n        compiler, \"synStart\", \"synEnd\")).process(externs, n);\n    (new Normalize(compiler, false)).process(externs, n);\n    (MakeDeclaredNamesUnique.getContextualRenameInverter(compiler)).process(\n        externs, n);\n    (new Denormalize(compiler)).process(externs, n);\n    return n;\n  }\n",
        "begin_line": 2219,
        "end_line": 2239,
        "comment": "",
        "child_ranges": [
            "(line 2220,col 5)-(line 2220,col 39)",
            "(line 2221,col 5)-(line 2221,col 51)",
            "(line 2222,col 5)-(line 2224,col 5)",
            "(line 2225,col 5)-(line 2225,col 44)",
            "(line 2226,col 5)-(line 2226,col 49)",
            "(line 2227,col 5)-(line 2227,col 38)",
            "(line 2228,col 5)-(line 2228,col 49)",
            "(line 2229,col 5)-(line 2229,col 32)",
            "(line 2230,col 5)-(line 2230,col 39)",
            "(line 2232,col 5)-(line 2233,col 61)",
            "(line 2234,col 5)-(line 2234,col 57)",
            "(line 2235,col 5)-(line 2236,col 20)",
            "(line 2237,col 5)-(line 2237,col 52)",
            "(line 2238,col 5)-(line 2238,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.IntegrationTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/IntegrationTest.java",
        "signature": "com.google.javascript.jscomp.IntegrationTest.createCompilerOptions()",
        "snippet": "  private CompilerOptions createCompilerOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new GoogleCodingConvention());\n    return options;\n  }\n",
        "begin_line": 2242,
        "end_line": 2246,
        "comment": " Creates a CompilerOptions object with google coding conventions. ",
        "child_ranges": [
            "(line 2243,col 5)-(line 2243,col 52)",
            "(line 2244,col 5)-(line 2244,col 62)",
            "(line 2245,col 5)-(line 2245,col 19)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    extraAnnotations =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .annotationNames.keySet());\n    extraSuppressions =\n        Sets.newHashSet(\n            ParserRunner.createConfig(true, LanguageMode.ECMASCRIPT3, false)\n                .suppressionNames);\n\n    extraSuppressions.add(\"x\");\n    extraSuppressions.add(\"y\");\n    extraSuppressions.add(\"z\");\n  }\n",
        "begin_line": 49,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 18)",
            "(line 52,col 5)-(line 55,col 43)",
            "(line 56,col 5)-(line 59,col 35)",
            "(line 61,col 5)-(line 61,col 31)",
            "(line 62,col 5)-(line 62,col 31)",
            "(line 63,col 5)-(line 63,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic1()",
        "snippet": "  public void testParseTypeViaStatic1() throws Exception {\n    Node typeNode = parseType(\"null\");\n    assertTypeEquals(NULL_TYPE, typeNode);\n  }\n",
        "begin_line": 66,
        "end_line": 69,
        "comment": "",
        "child_ranges": [
            "(line 67,col 5)-(line 67,col 38)",
            "(line 68,col 5)-(line 68,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic2()",
        "snippet": "  public void testParseTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"string\");\n    assertTypeEquals(STRING_TYPE, typeNode);\n  }\n",
        "begin_line": 71,
        "end_line": 74,
        "comment": "",
        "child_ranges": [
            "(line 72,col 5)-(line 72,col 40)",
            "(line 73,col 5)-(line 73,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic3()",
        "snippet": "  public void testParseTypeViaStatic3() throws Exception {\n    Node typeNode = parseType(\"!Date\");\n    assertTypeEquals(DATE_TYPE, typeNode);\n  }\n",
        "begin_line": 76,
        "end_line": 79,
        "comment": "",
        "child_ranges": [
            "(line 77,col 5)-(line 77,col 39)",
            "(line 78,col 5)-(line 78,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseTypeViaStatic4()",
        "snippet": "  public void testParseTypeViaStatic4() throws Exception {\n    Node typeNode = parseType(\"boolean|string\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, STRING_TYPE), typeNode);\n  }\n",
        "begin_line": 81,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 82,col 5)-(line 82,col 48)",
            "(line 83,col 5)-(line 83,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic()",
        "snippet": "  public void testParseInvalidTypeViaStatic() throws Exception {\n    Node typeNode = parseType(\"sometype.<anothertype\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 86,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 87,col 5)-(line 87,col 55)",
            "(line 88,col 5)-(line 88,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInvalidTypeViaStatic2()",
        "snippet": "  public void testParseInvalidTypeViaStatic2() throws Exception {\n    Node typeNode = parseType(\"\");\n    assertNull(typeNode);\n  }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 34)",
            "(line 93,col 5)-(line 93,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType1()",
        "snippet": "  public void testParseNamedType1() throws Exception {\n    assertNull(parse(\"@type null\", \"Unexpected end of file\"));\n  }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "",
        "child_ranges": [
            "(line 97,col 5)-(line 97,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType2()",
        "snippet": "  public void testParseNamedType2() throws Exception {\n    JSDocInfo info = parse(\"@type null*/\");\n    assertTypeEquals(NULL_TYPE, info.getType());\n  }\n",
        "begin_line": 100,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 101,col 5)-(line 101,col 43)",
            "(line 102,col 5)-(line 102,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType3()",
        "snippet": "  public void testParseNamedType3() throws Exception {\n    JSDocInfo info = parse(\"@type {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 106,col 5)-(line 106,col 47)",
            "(line 107,col 5)-(line 107,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType4()",
        "snippet": "  public void testParseNamedType4() throws Exception {\n    // Multi-line @type.\n    JSDocInfo info = parse(\"@type \\n {string}*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 110,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 112,col 5)-(line 112,col 50)",
            "(line 113,col 5)-(line 113,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType5()",
        "snippet": "  public void testParseNamedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\nBar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 116,
        "end_line": 121,
        "comment": "",
        "child_ranges": [
            "(line 117,col 5)-(line 117,col 52)",
            "(line 118,col 5)-(line 120,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedType6()",
        "snippet": "  public void testParseNamedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!goog.\\n * Bar.\\n * Baz}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.Bar.Baz\", null, -1, -1),\n        info.getType());\n  }\n",
        "begin_line": 123,
        "end_line": 128,
        "comment": "",
        "child_ranges": [
            "(line 124,col 5)-(line 124,col 64)",
            "(line 125,col 5)-(line 127,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError1()",
        "snippet": "  public void testParseNamedTypeError1() throws Exception {\n    // To avoid parsing ambiguities, type names must end in a '.' to\n    // get the continuation behavior.\n    parse(\"@type {!goog\\n * .Bar} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 130,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 133,col 5)-(line 134,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNamedTypeError2()",
        "snippet": "  public void testParseNamedTypeError2() throws Exception {\n    parse(\"@type {!goog.\\n * Bar\\n * .Baz} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 137,
        "end_line": 140,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 139,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType1()",
        "snippet": "  public void testTypedefType1() throws Exception {\n    JSDocInfo info = parse(\"@typedef string */\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 142,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 143,col 5)-(line 143,col 49)",
            "(line 144,col 5)-(line 144,col 38)",
            "(line 145,col 5)-(line 145,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType2()",
        "snippet": "  public void testTypedefType2() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {string}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(STRING_TYPE, info.getTypedefType());\n  }\n",
        "begin_line": 148,
        "end_line": 152,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 53)",
            "(line 150,col 5)-(line 150,col 38)",
            "(line 151,col 5)-(line 151,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypedefType3()",
        "snippet": "  public void testTypedefType3() throws Exception {\n    JSDocInfo info = parse(\"@typedef \\n {(string|number)}*/\");\n    assertTrue(info.hasTypedefType());\n    assertTypeEquals(\n        createUnionType(NUMBER_TYPE, STRING_TYPE),\n        info.getTypedefType());\n  }\n",
        "begin_line": 154,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 155,col 5)-(line 155,col 62)",
            "(line 156,col 5)-(line 156,col 38)",
            "(line 157,col 5)-(line 159,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType1()",
        "snippet": "  public void testParseStringType1() throws Exception {\n    assertTypeEquals(STRING_TYPE, parse(\"@type {string}*/\").getType());\n  }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseStringType2()",
        "snippet": "  public void testParseStringType2() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE, parse(\"@type {!String}*/\").getType());\n  }\n",
        "begin_line": 166,
        "end_line": 168,
        "comment": "",
        "child_ranges": [
            "(line 167,col 5)-(line 167,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType1()",
        "snippet": "  public void testParseBooleanType1() throws Exception {\n    assertTypeEquals(BOOLEAN_TYPE, parse(\"@type {boolean}*/\").getType());\n  }\n",
        "begin_line": 170,
        "end_line": 172,
        "comment": "",
        "child_ranges": [
            "(line 171,col 5)-(line 171,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBooleanType2()",
        "snippet": "  public void testParseBooleanType2() throws Exception {\n    assertTypeEquals(\n        BOOLEAN_OBJECT_TYPE, parse(\"@type {!Boolean}*/\").getType());\n  }\n",
        "begin_line": 174,
        "end_line": 177,
        "comment": "",
        "child_ranges": [
            "(line 175,col 5)-(line 176,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType1()",
        "snippet": "  public void testParseNumberType1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@type {number}*/\").getType());\n  }\n",
        "begin_line": 179,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 180,col 5)-(line 180,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNumberType2()",
        "snippet": "  public void testParseNumberType2() throws Exception {\n    assertTypeEquals(NUMBER_OBJECT_TYPE, parse(\"@type {!Number}*/\").getType());\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType1()",
        "snippet": "  public void testParseNullType1() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {null}*/\").getType());\n  }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullType2()",
        "snippet": "  public void testParseNullType2() throws Exception {\n    assertTypeEquals(NULL_TYPE, parse(\"@type {Null}*/\").getType());\n  }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 192,col 5)-(line 192,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType1()",
        "snippet": "  public void testParseAllType1() throws Exception {\n    testParseType(\"*\");\n  }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseAllType2()",
        "snippet": "  public void testParseAllType2() throws Exception {\n    testParseType(\"*?\", \"*\");\n  }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 200,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseObjectType()",
        "snippet": "  public void testParseObjectType() throws Exception {\n    assertTypeEquals(OBJECT_TYPE, parse(\"@type {!Object}*/\").getType());\n  }\n",
        "begin_line": 203,
        "end_line": 205,
        "comment": "",
        "child_ranges": [
            "(line 204,col 5)-(line 204,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDateType()",
        "snippet": "  public void testParseDateType() throws Exception {\n    assertTypeEquals(DATE_TYPE, parse(\"@type {!Date}*/\").getType());\n  }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 208,col 5)-(line 208,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionType()",
        "snippet": "  public void testParseFunctionType() throws Exception {\n    assertTypeEquals(\n        createNullableType(U2U_CONSTRUCTOR_TYPE),\n        parse(\"@type {Function}*/\").getType());\n  }\n",
        "begin_line": 211,
        "end_line": 215,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 214,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRegExpType()",
        "snippet": "  public void testParseRegExpType() throws Exception {\n    assertTypeEquals(REGEXP_TYPE, parse(\"@type {!RegExp}*/\").getType());\n  }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 218,col 5)-(line 218,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseErrorTypes()",
        "snippet": "  public void testParseErrorTypes() throws Exception {\n    assertTypeEquals(ERROR_TYPE, parse(\"@type {!Error}*/\").getType());\n    assertTypeEquals(URI_ERROR_TYPE, parse(\"@type {!URIError}*/\").getType());\n    assertTypeEquals(EVAL_ERROR_TYPE, parse(\"@type {!EvalError}*/\").getType());\n    assertTypeEquals(REFERENCE_ERROR_TYPE,\n        parse(\"@type {!ReferenceError}*/\").getType());\n    assertTypeEquals(TYPE_ERROR_TYPE, parse(\"@type {!TypeError}*/\").getType());\n    assertTypeEquals(\n        RANGE_ERROR_TYPE, parse(\"@type {!RangeError}*/\").getType());\n    assertTypeEquals(\n        SYNTAX_ERROR_TYPE, parse(\"@type {!SyntaxError}*/\").getType());\n  }\n",
        "begin_line": 221,
        "end_line": 232,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 70)",
            "(line 223,col 5)-(line 223,col 77)",
            "(line 224,col 5)-(line 224,col 79)",
            "(line 225,col 5)-(line 226,col 54)",
            "(line 227,col 5)-(line 227,col 79)",
            "(line 228,col 5)-(line 229,col 68)",
            "(line 230,col 5)-(line 231,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType1()",
        "snippet": "  public void testParseUndefinedType1() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {undefined}*/\").getType());\n  }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "",
        "child_ranges": [
            "(line 235,col 5)-(line 235,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType2()",
        "snippet": "  public void testParseUndefinedType2() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {Undefined}*/\").getType());\n  }\n",
        "begin_line": 238,
        "end_line": 240,
        "comment": "",
        "child_ranges": [
            "(line 239,col 5)-(line 239,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUndefinedType3()",
        "snippet": "  public void testParseUndefinedType3() throws Exception {\n    assertTypeEquals(VOID_TYPE, parse(\"@type {void}*/\").getType());\n  }\n",
        "begin_line": 242,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 243,col 5)-(line 243,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType1()",
        "snippet": "  public void testParseParametrizedType1() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<number> */\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 246,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 55)",
            "(line 248,col 5)-(line 248,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType2()",
        "snippet": "  public void testParseParametrizedType2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<number>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 251,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 56)",
            "(line 253,col 5)-(line 253,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType3()",
        "snippet": "  public void testParseParametrizedType3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,null)>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 256,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 257,col 5)-(line 257,col 61)",
            "(line 258,col 5)-(line 258,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType4()",
        "snippet": "  public void testParseParametrizedType4() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<(number|null)>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 261,
        "end_line": 264,
        "comment": "",
        "child_ranges": [
            "(line 262,col 5)-(line 262,col 63)",
            "(line 263,col 5)-(line 263,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType5()",
        "snippet": "  public void testParseParametrizedType5() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Array.<(number|null)>>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 266,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 267,col 5)-(line 267,col 71)",
            "(line 268,col 5)-(line 268,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType6()",
        "snippet": "  public void testParseParametrizedType6() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<!Array.<(number|null)>>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 271,
        "end_line": 274,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 72)",
            "(line 273,col 5)-(line 273,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType7()",
        "snippet": "  public void testParseParametrizedType7() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():Date>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 276,
        "end_line": 279,
        "comment": "",
        "child_ranges": [
            "(line 277,col 5)-(line 277,col 65)",
            "(line 278,col 5)-(line 278,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType8()",
        "snippet": "  public void testParseParametrizedType8() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<function():!Date>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 281,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 282,col 5)-(line 282,col 66)",
            "(line 283,col 5)-(line 283,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType9()",
        "snippet": "  public void testParseParametrizedType9() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 286,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 61)",
            "(line 288,col 5)-(line 288,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParametrizedType10()",
        "snippet": "  public void testParseParametrizedType10() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<Date|number|boolean>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 291,
        "end_line": 294,
        "comment": "",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 69)",
            "(line 293,col 5)-(line 293,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamterizedType11()",
        "snippet": "  public void testParseParamterizedType11() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<number>}*/\");\n    assertTypeEquals(OBJECT_TYPE, info.getType());\n    assertParameterTypeEquals(NUMBER_TYPE, info.getType());\n  }\n",
        "begin_line": 296,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 297,col 5)-(line 297,col 57)",
            "(line 298,col 5)-(line 298,col 50)",
            "(line 299,col 5)-(line 299,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamterizedType12()",
        "snippet": "  public void testParseParamterizedType12() throws Exception {\n    JSDocInfo info = parse(\"@type {!Object.<string,number>}*/\");\n    assertTypeEquals(OBJECT_TYPE, info.getType());\n    assertParameterTypeEquals(NUMBER_TYPE, info.getType());\n    assertIndexTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 302,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 303,col 64)",
            "(line 304,col 5)-(line 304,col 50)",
            "(line 305,col 5)-(line 305,col 59)",
            "(line 306,col 5)-(line 306,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType1()",
        "snippet": "  public void testParseUnionType1() throws Exception {\n    JSDocInfo info = parse(\"@type {(boolean,null)}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 309,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 310,col 5)-(line 310,col 55)",
            "(line 311,col 5)-(line 311,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType2()",
        "snippet": "  public void testParseUnionType2() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean|null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 314,
        "end_line": 317,
        "comment": "",
        "child_ranges": [
            "(line 315,col 5)-(line 315,col 53)",
            "(line 316,col 5)-(line 316,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType3()",
        "snippet": "  public void testParseUnionType3() throws Exception {\n    JSDocInfo info = parse(\"@type {boolean||null}*/\");\n    assertTypeEquals(createUnionType(BOOLEAN_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 319,
        "end_line": 322,
        "comment": "",
        "child_ranges": [
            "(line 320,col 5)-(line 320,col 54)",
            "(line 321,col 5)-(line 321,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType4()",
        "snippet": "  public void testParseUnionType4() throws Exception {\n    JSDocInfo info = parse(\"@type {(Array.<boolean>,null)}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 324,
        "end_line": 327,
        "comment": "",
        "child_ranges": [
            "(line 325,col 5)-(line 325,col 63)",
            "(line 326,col 5)-(line 326,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType5()",
        "snippet": "  public void testParseUnionType5() throws Exception {\n    JSDocInfo info = parse(\"@type {(null, Array.<boolean>)}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 329,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 330,col 5)-(line 330,col 64)",
            "(line 331,col 5)-(line 331,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType6()",
        "snippet": "  public void testParseUnionType6() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>|null}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 334,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 335,col 5)-(line 335,col 61)",
            "(line 336,col 5)-(line 336,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType7()",
        "snippet": "  public void testParseUnionType7() throws Exception {\n    JSDocInfo info = parse(\"@type {null|Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 339,
        "end_line": 342,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 61)",
            "(line 341,col 5)-(line 341,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType8()",
        "snippet": "  public void testParseUnionType8() throws Exception {\n    JSDocInfo info = parse(\"@type {null||Array.<boolean>}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 344,
        "end_line": 347,
        "comment": "",
        "child_ranges": [
            "(line 345,col 5)-(line 345,col 62)",
            "(line 346,col 5)-(line 346,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType9()",
        "snippet": "  public void testParseUnionType9() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>||null}*/\");\n    assertTypeEquals(createUnionType(ARRAY_TYPE, NULL_TYPE), info.getType());\n  }\n",
        "begin_line": 349,
        "end_line": 352,
        "comment": "",
        "child_ranges": [
            "(line 350,col 5)-(line 350,col 62)",
            "(line 351,col 5)-(line 351,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType10()",
        "snippet": "  public void testParseUnionType10() throws Exception {\n    parse(\"@type {string|}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 354,
        "end_line": 357,
        "comment": "",
        "child_ranges": [
            "(line 355,col 5)-(line 356,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType11()",
        "snippet": "  public void testParseUnionType11() throws Exception {\n    parse(\"@type {(string,)}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 359,
        "end_line": 362,
        "comment": "",
        "child_ranges": [
            "(line 360,col 5)-(line 361,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType12()",
        "snippet": "  public void testParseUnionType12() throws Exception {\n    parse(\"@type {()}*/\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 364,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 365,col 5)-(line 366,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType13()",
        "snippet": "  public void testParseUnionType13() throws Exception {\n    testParseType(\n        \"(function(this:Date),function(this:String):number)\",\n        \"Function\");\n  }\n",
        "begin_line": 369,
        "end_line": 373,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 372,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType14()",
        "snippet": "  public void testParseUnionType14() throws Exception {\n    testParseType(\n        \"(function(...[function(number):boolean]):number)|\" +\n        \"function(this:String, string):number\",\n        \"Function\");\n  }\n",
        "begin_line": 375,
        "end_line": 380,
        "comment": "",
        "child_ranges": [
            "(line 376,col 5)-(line 379,col 20)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType15()",
        "snippet": "  public void testParseUnionType15() throws Exception {\n    testParseType(\"*|number\", \"*\");\n  }\n",
        "begin_line": 382,
        "end_line": 384,
        "comment": "",
        "child_ranges": [
            "(line 383,col 5)-(line 383,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType16()",
        "snippet": "  public void testParseUnionType16() throws Exception {\n    testParseType(\"number|*\", \"*\");\n  }\n",
        "begin_line": 386,
        "end_line": 388,
        "comment": "",
        "child_ranges": [
            "(line 387,col 5)-(line 387,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType17()",
        "snippet": "  public void testParseUnionType17() throws Exception {\n    testParseType(\"string|number|*\", \"*\");\n  }\n",
        "begin_line": 390,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 391,col 5)-(line 391,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionType18()",
        "snippet": "  public void testParseUnionType18() throws Exception {\n    testParseType(\"(string,*,number)\", \"*\");\n  }\n",
        "begin_line": 394,
        "end_line": 396,
        "comment": "",
        "child_ranges": [
            "(line 395,col 5)-(line 395,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnionTypeError1()",
        "snippet": "  public void testParseUnionTypeError1() throws Exception {\n    parse(\"@type {(string,|number)} */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 398,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 399,col 5)-(line 400,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType1()",
        "snippet": "  public void testParseUnknownType1() throws Exception {\n    testParseType(\"?\");\n  }\n",
        "begin_line": 403,
        "end_line": 405,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType2()",
        "snippet": "  public void testParseUnknownType2() throws Exception {\n    testParseType(\"(?|number)\", \"?\");\n  }\n",
        "begin_line": 407,
        "end_line": 409,
        "comment": "",
        "child_ranges": [
            "(line 408,col 5)-(line 408,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseUnknownType3()",
        "snippet": "  public void testParseUnknownType3() throws Exception {\n    testParseType(\"(number|?)\", \"?\");\n  }\n",
        "begin_line": 411,
        "end_line": 413,
        "comment": "",
        "child_ranges": [
            "(line 412,col 5)-(line 412,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType1()",
        "snippet": "  public void testParseFunctionalType1() throws Exception {\n    testParseType(\"function (): number\");\n  }\n",
        "begin_line": 415,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 416,col 5)-(line 416,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType2()",
        "snippet": "  public void testParseFunctionalType2() throws Exception {\n    testParseType(\"function (number, string): boolean\");\n  }\n",
        "begin_line": 419,
        "end_line": 421,
        "comment": "",
        "child_ranges": [
            "(line 420,col 5)-(line 420,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType3()",
        "snippet": "  public void testParseFunctionalType3() throws Exception {\n    testParseType(\n        \"function(this:Array)\", \"function (this:Array): ?\");\n  }\n",
        "begin_line": 423,
        "end_line": 426,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 425,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType4()",
        "snippet": "  public void testParseFunctionalType4() throws Exception {\n    testParseType(\"function (...[number]): boolean\");\n  }\n",
        "begin_line": 428,
        "end_line": 430,
        "comment": "",
        "child_ranges": [
            "(line 429,col 5)-(line 429,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType5()",
        "snippet": "  public void testParseFunctionalType5() throws Exception {\n    testParseType(\"function (number, ...[string]): boolean\");\n  }\n",
        "begin_line": 432,
        "end_line": 434,
        "comment": "",
        "child_ranges": [
            "(line 433,col 5)-(line 433,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType6()",
        "snippet": "  public void testParseFunctionalType6() throws Exception {\n    testParseType(\n        \"function (this:Date, number): (boolean|number|string)\");\n  }\n",
        "begin_line": 436,
        "end_line": 439,
        "comment": "",
        "child_ranges": [
            "(line 437,col 5)-(line 438,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType7()",
        "snippet": "  public void testParseFunctionalType7() throws Exception {\n    testParseType(\"function()\", \"function (): ?\");\n  }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "",
        "child_ranges": [
            "(line 442,col 5)-(line 442,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType8()",
        "snippet": "  public void testParseFunctionalType8() throws Exception {\n    testParseType(\n        \"function(this:Array,...[boolean])\",\n        \"function (this:Array, ...[boolean]): ?\");\n  }\n",
        "begin_line": 445,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 446,col 5)-(line 448,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType9()",
        "snippet": "  public void testParseFunctionalType9() throws Exception {\n    testParseType(\n        \"function(this:Array,!Date,...[boolean?])\",\n        \"function (this:Array, Date, ...[(boolean|null)]): ?\");\n  }\n",
        "begin_line": 451,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 452,col 5)-(line 454,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType10()",
        "snippet": "  public void testParseFunctionalType10() throws Exception {\n    testParseType(\n        \"function(...[Object?]):boolean?\",\n        \"function (...[(Object|null)]): (boolean|null)\");\n  }\n",
        "begin_line": 457,
        "end_line": 461,
        "comment": "",
        "child_ranges": [
            "(line 458,col 5)-(line 460,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType11()",
        "snippet": "  public void testParseFunctionalType11() throws Exception {\n    testParseType(\n        \"function(...[[number]]):[number?]\",\n        \"function (...[Array]): Array\");\n  }\n",
        "begin_line": 463,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 464,col 5)-(line 466,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType12()",
        "snippet": "  public void testParseFunctionalType12() throws Exception {\n    testParseType(\n        \"function(...)\",\n        \"function (...[?]): ?\");\n  }\n",
        "begin_line": 469,
        "end_line": 473,
        "comment": "",
        "child_ranges": [
            "(line 470,col 5)-(line 472,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType13()",
        "snippet": "  public void testParseFunctionalType13() throws Exception {\n    testParseType(\n        \"function(...): void\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 475,
        "end_line": 479,
        "comment": "",
        "child_ranges": [
            "(line 476,col 5)-(line 478,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType14()",
        "snippet": "  public void testParseFunctionalType14() throws Exception {\n    testParseType(\"function (*, string, number): boolean\");\n  }\n",
        "begin_line": 481,
        "end_line": 483,
        "comment": "",
        "child_ranges": [
            "(line 482,col 5)-(line 482,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType15()",
        "snippet": "  public void testParseFunctionalType15() throws Exception {\n    testParseType(\"function (?, string): boolean\");\n  }\n",
        "begin_line": 485,
        "end_line": 487,
        "comment": "",
        "child_ranges": [
            "(line 486,col 5)-(line 486,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType16()",
        "snippet": "  public void testParseFunctionalType16() throws Exception {\n    testParseType(\"function (string, ?): ?\");\n  }\n",
        "begin_line": 489,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 490,col 5)-(line 490,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType17()",
        "snippet": "  public void testParseFunctionalType17() throws Exception {\n    testParseType(\"(function (?): ?|number)\");\n  }\n",
        "begin_line": 493,
        "end_line": 495,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType18()",
        "snippet": "  public void testParseFunctionalType18() throws Exception {\n    testParseType(\"function (?): (?|number)\", \"function (?): ?\");\n  }\n",
        "begin_line": 497,
        "end_line": 499,
        "comment": "",
        "child_ranges": [
            "(line 498,col 5)-(line 498,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalType19()",
        "snippet": "  public void testParseFunctionalType19() throws Exception {\n    testParseType(\n        \"function(...[?]): void\",\n        \"function (...[?]): undefined\");\n  }\n",
        "begin_line": 501,
        "end_line": 505,
        "comment": "",
        "child_ranges": [
            "(line 502,col 5)-(line 504,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testStructuralConstructor()",
        "snippet": "  public void testStructuralConstructor() throws Exception {\n    JSType type = testParseType(\n        \"function (new:Object)\", \"function (new:Object): ?\");\n    assertTrue(type.isConstructor());\n    assertFalse(type.isNominalConstructor());\n  }\n",
        "begin_line": 507,
        "end_line": 512,
        "comment": "",
        "child_ranges": [
            "(line 508,col 5)-(line 509,col 61)",
            "(line 510,col 5)-(line 510,col 37)",
            "(line 511,col 5)-(line 511,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testNominalConstructor()",
        "snippet": "  public void testNominalConstructor() throws Exception {\n    ObjectType type = testParseType(\"Array\", \"(Array|null)\").dereference();\n    assertTrue(type.getConstructor().isNominalConstructor());\n  }\n",
        "begin_line": 514,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 515,col 5)-(line 515,col 75)",
            "(line 516,col 5)-(line 516,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug1419535()",
        "snippet": "  public void testBug1419535() throws Exception {\n    parse(\"@type {function(Object, string, *)?} */\");\n    parse(\"@type {function(Object, string, *)|null} */\");\n  }\n",
        "begin_line": 519,
        "end_line": 522,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 520,col 53)",
            "(line 521,col 5)-(line 521,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testIssue477()",
        "snippet": "  public void testIssue477() throws Exception {\n    parse(\"@type function */\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 524,
        "end_line": 527,
        "comment": "",
        "child_ranges": [
            "(line 525,col 5)-(line 526,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMalformedThisAnnotation()",
        "snippet": "  public void testMalformedThisAnnotation() throws Exception {\n    parse(\"@this */\",\n        \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 529,
        "end_line": 532,
        "comment": "",
        "child_ranges": [
            "(line 530,col 5)-(line 531,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError1()",
        "snippet": "  public void testParseFunctionalTypeError1() throws Exception {\n    parse(\"@type {function number):string}*/\",\n        \"Bad type annotation. missing opening (\");\n  }\n",
        "begin_line": 534,
        "end_line": 537,
        "comment": "",
        "child_ranges": [
            "(line 535,col 5)-(line 536,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError2()",
        "snippet": "  public void testParseFunctionalTypeError2() throws Exception {\n    parse(\"@type {function( number}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 539,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 540,col 5)-(line 541,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError3()",
        "snippet": "  public void testParseFunctionalTypeError3() throws Exception {\n    parse(\"@type {function(...[number], string)}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 544,
        "end_line": 547,
        "comment": "",
        "child_ranges": [
            "(line 545,col 5)-(line 546,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError4()",
        "snippet": "  public void testParseFunctionalTypeError4() throws Exception {\n    parse(\"@type {function(string, ...[number], boolean):string}*/\",\n        \"Bad type annotation. variable length argument must be last\");\n  }\n",
        "begin_line": 549,
        "end_line": 552,
        "comment": "",
        "child_ranges": [
            "(line 550,col 5)-(line 551,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError5()",
        "snippet": "  public void testParseFunctionalTypeError5() throws Exception {\n    parse(\"@type {function (thi:Array)}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 554,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 555,col 5)-(line 556,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError6()",
        "snippet": "  public void testParseFunctionalTypeError6() throws Exception {\n    resolve(parse(\"@type {function (this:number)}*/\").getType(),\n        \"this type must be an object type\");\n  }\n",
        "begin_line": 559,
        "end_line": 562,
        "comment": "",
        "child_ranges": [
            "(line 560,col 5)-(line 561,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError7()",
        "snippet": "  public void testParseFunctionalTypeError7() throws Exception {\n    parse(\"@type {function(...[number)}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 564,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 565,col 5)-(line 566,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError8()",
        "snippet": "  public void testParseFunctionalTypeError8() throws Exception {\n    parse(\"@type {function(...number])}*/\",\n        \"Bad type annotation. missing opening [\");\n  }\n",
        "begin_line": 569,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 570,col 5)-(line 571,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError9()",
        "snippet": "  public void testParseFunctionalTypeError9() throws Exception {\n    parse(\"@type {function (new:Array, this:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 574,
        "end_line": 577,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 576,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError10()",
        "snippet": "  public void testParseFunctionalTypeError10() throws Exception {\n    parse(\"@type {function (this:Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 579,
        "end_line": 582,
        "comment": "",
        "child_ranges": [
            "(line 580,col 5)-(line 581,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError11()",
        "snippet": "  public void testParseFunctionalTypeError11() throws Exception {\n    parse(\"@type {function (Array, new:Object)} */\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 584,
        "end_line": 587,
        "comment": "",
        "child_ranges": [
            "(line 585,col 5)-(line 586,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseFunctionalTypeError12()",
        "snippet": "  public void testParseFunctionalTypeError12() throws Exception {\n    resolve(parse(\"@type {function (new:number)}*/\").getType(),\n        \"constructed type must be an object type\");\n  }\n",
        "begin_line": 589,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 590,col 5)-(line 591,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType1()",
        "snippet": "  public void testParseArrayType1() throws Exception {\n    testParseType(\"[number]\", \"Array\");\n  }\n",
        "begin_line": 594,
        "end_line": 596,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 595,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType2()",
        "snippet": "  public void testParseArrayType2() throws Exception {\n    testParseType(\"[(number,boolean,[Object?])]\", \"Array\");\n  }\n",
        "begin_line": 598,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 599,col 5)-(line 599,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayType3()",
        "snippet": "  public void testParseArrayType3() throws Exception {\n    testParseType(\"[[number],[string]]?\", \"(Array|null)\");\n  }\n",
        "begin_line": 602,
        "end_line": 604,
        "comment": "",
        "child_ranges": [
            "(line 603,col 5)-(line 603,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError1()",
        "snippet": "  public void testParseArrayTypeError1() throws Exception {\n    parse(\"@type {[number}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 606,
        "end_line": 609,
        "comment": "",
        "child_ranges": [
            "(line 607,col 5)-(line 608,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError2()",
        "snippet": "  public void testParseArrayTypeError2() throws Exception {\n    parse(\"@type {number]}*/\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 611,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 612,col 5)-(line 613,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError3()",
        "snippet": "  public void testParseArrayTypeError3() throws Exception {\n    parse(\"@type {[(number,boolean,Object?])]}*/\",\n        \"Bad type annotation. missing closing )\");\n  }\n",
        "begin_line": 616,
        "end_line": 619,
        "comment": "",
        "child_ranges": [
            "(line 617,col 5)-(line 618,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseArrayTypeError4()",
        "snippet": "  public void testParseArrayTypeError4() throws Exception {\n    parse(\"@type {(number,boolean,[Object?)]}*/\",\n        \"Bad type annotation. missing closing ]\");\n  }\n",
        "begin_line": 621,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 622,col 5)-(line 623,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String)",
        "snippet": "  private JSType testParseType(String type) throws Exception {\n    return testParseType(type, type);\n  }\n",
        "begin_line": 626,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 627,col 5)-(line 627,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseType(java.lang.String, java.lang.String)",
        "snippet": "  private JSType testParseType(\n      String type, String typeExpected) throws Exception {\n    JSDocInfo info = parse(\"@type {\" + type + \"}*/\");\n\n    assertNotNull(info);\n    assertTrue(info.hasType());\n\n    JSType actual = resolve(info.getType());\n    assertEquals(typeExpected, actual.toString());\n    return actual;\n  }\n",
        "begin_line": 630,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 632,col 5)-(line 632,col 53)",
            "(line 634,col 5)-(line 634,col 24)",
            "(line 635,col 5)-(line 635,col 31)",
            "(line 637,col 5)-(line 637,col 44)",
            "(line 638,col 5)-(line 638,col 50)",
            "(line 639,col 5)-(line 639,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers1()",
        "snippet": "  public void testParseNullableModifiers1() throws Exception {\n    JSDocInfo info = parse(\"@type {string?}*/\");\n    assertTypeEquals(createNullableType(STRING_TYPE), info.getType());\n  }\n",
        "begin_line": 642,
        "end_line": 645,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 48)",
            "(line 644,col 5)-(line 644,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers2()",
        "snippet": "  public void testParseNullableModifiers2() throws Exception {\n    JSDocInfo info = parse(\"@type {!Array.<string?>}*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 647,
        "end_line": 650,
        "comment": "",
        "child_ranges": [
            "(line 648,col 5)-(line 648,col 57)",
            "(line 649,col 5)-(line 649,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers3()",
        "snippet": "  public void testParseNullableModifiers3() throws Exception {\n    JSDocInfo info = parse(\"@type {Array.<boolean>?}*/\");\n    assertTypeEquals(createNullableType(ARRAY_TYPE), info.getType());\n  }\n",
        "begin_line": 652,
        "end_line": 655,
        "comment": "",
        "child_ranges": [
            "(line 653,col 5)-(line 653,col 57)",
            "(line 654,col 5)-(line 654,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers4()",
        "snippet": "  public void testParseNullableModifiers4() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean)?}*/\");\n    assertTypeEquals(\n        createNullableType(createUnionType(STRING_TYPE, BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 657,
        "end_line": 662,
        "comment": "",
        "child_ranges": [
            "(line 658,col 5)-(line 658,col 58)",
            "(line 659,col 5)-(line 661,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers5()",
        "snippet": "  public void testParseNullableModifiers5() throws Exception {\n    JSDocInfo info = parse(\"@type {(string?,boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 664,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 665,col 5)-(line 665,col 58)",
            "(line 666,col 5)-(line 668,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers6()",
        "snippet": "  public void testParseNullableModifiers6() throws Exception {\n    JSDocInfo info = parse(\"@type {(string,boolean?)}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 671,
        "end_line": 676,
        "comment": "",
        "child_ranges": [
            "(line 672,col 5)-(line 672,col 58)",
            "(line 673,col 5)-(line 675,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers7()",
        "snippet": "  public void testParseNullableModifiers7() throws Exception {\n    JSDocInfo info = parse(\"@type {string?|boolean}*/\");\n    assertTypeEquals(\n        createUnionType(createNullableType(STRING_TYPE), BOOLEAN_TYPE),\n        info.getType());\n  }\n",
        "begin_line": 678,
        "end_line": 683,
        "comment": "",
        "child_ranges": [
            "(line 679,col 5)-(line 679,col 56)",
            "(line 680,col 5)-(line 682,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers8()",
        "snippet": "  public void testParseNullableModifiers8() throws Exception {\n    JSDocInfo info = parse(\"@type {string|boolean?}*/\");\n    assertTypeEquals(\n        createUnionType(STRING_TYPE, createNullableType(BOOLEAN_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 685,
        "end_line": 690,
        "comment": "",
        "child_ranges": [
            "(line 686,col 5)-(line 686,col 56)",
            "(line 687,col 5)-(line 689,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNullableModifiers9()",
        "snippet": "  public void testParseNullableModifiers9() throws Exception {\n    JSDocInfo info = parse(\"@type {foo.Hello.World?}*/\");\n    assertTypeEquals(\n        createNullableType(\n            registry.createNamedType(\n                \"foo.Hello.World\", null, -1, -1)),\n        info.getType());\n  }\n",
        "begin_line": 692,
        "end_line": 699,
        "comment": "",
        "child_ranges": [
            "(line 693,col 5)-(line 693,col 57)",
            "(line 694,col 5)-(line 698,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOptionalModifier()",
        "snippet": "  public void testParseOptionalModifier() throws Exception {\n    JSDocInfo info = parse(\"@type {function(number=)}*/\");\n    assertTypeEquals(\n        registry.createFunctionType(\n            UNKNOWN_TYPE, createUnionType(VOID_TYPE, NUMBER_TYPE)),\n        info.getType());\n  }\n",
        "begin_line": 701,
        "end_line": 707,
        "comment": "",
        "child_ranges": [
            "(line 702,col 5)-(line 702,col 58)",
            "(line 703,col 5)-(line 706,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline1()",
        "snippet": "  public void testParseNewline1() throws Exception {\n    JSDocInfo info = parse(\"@type {string\\n* }\\n*/\");\n    assertTypeEquals(STRING_TYPE, info.getType());\n  }\n",
        "begin_line": 709,
        "end_line": 712,
        "comment": "",
        "child_ranges": [
            "(line 710,col 5)-(line 710,col 53)",
            "(line 711,col 5)-(line 711,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline2()",
        "snippet": "  public void testParseNewline2() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<\\n* number\\n* > */\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 714,
        "end_line": 717,
        "comment": "",
        "child_ranges": [
            "(line 715,col 5)-(line 715,col 63)",
            "(line 716,col 5)-(line 716,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline3()",
        "snippet": "  public void testParseNewline3() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number,\\n* null)>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 719,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 720,col 5)-(line 720,col 65)",
            "(line 721,col 5)-(line 721,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline4()",
        "snippet": "  public void testParseNewline4() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<(number|\\n* null)>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 724,
        "end_line": 727,
        "comment": "",
        "child_ranges": [
            "(line 725,col 5)-(line 725,col 65)",
            "(line 726,col 5)-(line 726,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNewline5()",
        "snippet": "  public void testParseNewline5() throws Exception {\n    JSDocInfo info = parse(\"@type !Array.<function(\\n* )\\n* :\\n* Date>*/\");\n    assertTypeEquals(ARRAY_TYPE, info.getType());\n  }\n",
        "begin_line": 729,
        "end_line": 732,
        "comment": "",
        "child_ranges": [
            "(line 730,col 5)-(line 730,col 75)",
            "(line 731,col 5)-(line 731,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType1()",
        "snippet": "  public void testParseReturnType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {null|string|Array.<boolean>}*/\");\n    assertTypeEquals(\n        createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 734,
        "end_line": 740,
        "comment": "",
        "child_ranges": [
            "(line 735,col 5)-(line 736,col 57)",
            "(line 737,col 5)-(line 739,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType2()",
        "snippet": "  public void testParseReturnType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@returns {null|(string,Array.<boolean>)}*/\");\n    assertTypeEquals(\n        createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 742,
        "end_line": 748,
        "comment": "",
        "child_ranges": [
            "(line 743,col 5)-(line 744,col 60)",
            "(line 745,col 5)-(line 747,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseReturnType3()",
        "snippet": "  public void testParseReturnType3() throws Exception {\n    JSDocInfo info =\n        parse(\"@return {((null||Array.<boolean>,string),boolean)}*/\");\n    assertTypeEquals(\n        createUnionType(ARRAY_TYPE, NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),\n        info.getReturnType());\n  }\n",
        "begin_line": 750,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 751,col 5)-(line 752,col 70)",
            "(line 753,col 5)-(line 755,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType1()",
        "snippet": "  public void testParseThisType1() throws Exception {\n    JSDocInfo info =\n        parse(\"@this {goog.foo.Bar}*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 758,
        "end_line": 764,
        "comment": "",
        "child_ranges": [
            "(line 759,col 5)-(line 760,col 40)",
            "(line 761,col 5)-(line 763,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType2()",
        "snippet": "  public void testParseThisType2() throws Exception {\n    JSDocInfo info =\n        parse(\"@this goog.foo.Bar*/\");\n    assertTypeEquals(\n        registry.createNamedType(\"goog.foo.Bar\", null, -1, -1),\n        info.getThisType());\n  }\n",
        "begin_line": 766,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 767,col 5)-(line 768,col 38)",
            "(line 769,col 5)-(line 771,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType3()",
        "snippet": "  public void testParseThisType3() throws Exception {\n    parse(\"@type {number}\\n@this goog.foo.Bar*/\",\n        \"Bad type annotation. type annotation incompatible \" +\n        \"with other annotations\");\n  }\n",
        "begin_line": 774,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 775,col 5)-(line 777,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType4()",
        "snippet": "  public void testParseThisType4() throws Exception {\n    resolve(parse(\"@this number*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 780,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 781,col 5)-(line 782,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType5()",
        "snippet": "  public void testParseThisType5() throws Exception {\n    parse(\"@this {Date|Error}*/\");\n  }\n",
        "begin_line": 785,
        "end_line": 787,
        "comment": "",
        "child_ranges": [
            "(line 786,col 5)-(line 786,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThisType6()",
        "snippet": "  public void testParseThisType6() throws Exception {\n    resolve(parse(\"@this {Date|number}*/\").getThisType(),\n        \"@this must specify an object type\");\n  }\n",
        "begin_line": 789,
        "end_line": 792,
        "comment": "",
        "child_ranges": [
            "(line 790,col 5)-(line 791,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam1()",
        "snippet": "  public void testParseParam1() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 794,
        "end_line": 798,
        "comment": "",
        "child_ranges": [
            "(line 795,col 5)-(line 795,col 54)",
            "(line 796,col 5)-(line 796,col 46)",
            "(line 797,col 5)-(line 797,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam2()",
        "snippet": "  public void testParseParam2() throws Exception {\n    JSDocInfo info = parse(\"@param index*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 800,
        "end_line": 804,
        "comment": "",
        "child_ranges": [
            "(line 801,col 5)-(line 801,col 45)",
            "(line 802,col 5)-(line 802,col 46)",
            "(line 803,col 5)-(line 803,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam3()",
        "snippet": "  public void testParseParam3() throws Exception {\n    JSDocInfo info = parse(\"@param {number} index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 806,
        "end_line": 810,
        "comment": "",
        "child_ranges": [
            "(line 807,col 5)-(line 807,col 70)",
            "(line 808,col 5)-(line 808,col 46)",
            "(line 809,col 5)-(line 809,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam4()",
        "snippet": "  public void testParseParam4() throws Exception {\n    JSDocInfo info = parse(\"@param index useful comments*/\");\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 812,
        "end_line": 816,
        "comment": "",
        "child_ranges": [
            "(line 813,col 5)-(line 813,col 61)",
            "(line 814,col 5)-(line 814,col 46)",
            "(line 815,col 5)-(line 815,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam5()",
        "snippet": "  public void testParseParam5() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 818,
        "end_line": 823,
        "comment": "",
        "child_ranges": [
            "(line 820,col 5)-(line 820,col 58)",
            "(line 821,col 5)-(line 821,col 46)",
            "(line 822,col 5)-(line 822,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam6()",
        "snippet": "  public void testParseParam6() throws Exception {\n    // Test for multi-line @param.\n    JSDocInfo info = parse(\"@param {number} \\n * index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 825,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 827,col 5)-(line 827,col 60)",
            "(line 828,col 5)-(line 828,col 46)",
            "(line 829,col 5)-(line 829,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam7()",
        "snippet": "  public void testParseParam7() throws Exception {\n    // Optional @param\n    JSDocInfo info = parse(\"@param {number=} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 832,
        "end_line": 838,
        "comment": "",
        "child_ranges": [
            "(line 834,col 5)-(line 834,col 56)",
            "(line 835,col 5)-(line 837,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam8()",
        "snippet": "  public void testParseParam8() throws Exception {\n    // Var args @param\n    JSDocInfo info = parse(\"@param {...number} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(NUMBER_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 840,
        "end_line": 846,
        "comment": "",
        "child_ranges": [
            "(line 842,col 5)-(line 842,col 58)",
            "(line 843,col 5)-(line 845,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam9()",
        "snippet": "  public void testParseParam9() throws Exception {\n    parse(\"@param {...number=} index */\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 848,
        "end_line": 852,
        "comment": "",
        "child_ranges": [
            "(line 849,col 5)-(line 851,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam10()",
        "snippet": "  public void testParseParam10() throws Exception {\n    parse(\"@param {...number index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 854,
        "end_line": 857,
        "comment": "",
        "child_ranges": [
            "(line 855,col 5)-(line 856,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam11()",
        "snippet": "  public void testParseParam11() throws Exception {\n    parse(\"@param {number= index */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 859,
        "end_line": 862,
        "comment": "",
        "child_ranges": [
            "(line 860,col 5)-(line 861,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam12()",
        "snippet": "  public void testParseParam12() throws Exception {\n    JSDocInfo info = parse(\"@param {...number|string} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 864,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 865,col 5)-(line 865,col 65)",
            "(line 866,col 5)-(line 869,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam13()",
        "snippet": "  public void testParseParam13() throws Exception {\n    JSDocInfo info = parse(\"@param {...(number|string)} index */\");\n    assertTypeEquals(\n        registry.createOptionalType(\n            registry.createUnionType(STRING_TYPE, NUMBER_TYPE)),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 872,
        "end_line": 878,
        "comment": "",
        "child_ranges": [
            "(line 873,col 5)-(line 873,col 67)",
            "(line 874,col 5)-(line 877,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam14()",
        "snippet": "  public void testParseParam14() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 880,
        "end_line": 886,
        "comment": "",
        "child_ranges": [
            "(line 881,col 5)-(line 881,col 57)",
            "(line 882,col 5)-(line 882,col 46)",
            "(line 883,col 5)-(line 885,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam15()",
        "snippet": "  public void testParseParam15() throws Exception {\n    JSDocInfo info = parse(\"@param {string} [index */\",\n        \"Bad type annotation. missing closing ]\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 888,
        "end_line": 893,
        "comment": "",
        "child_ranges": [
            "(line 889,col 5)-(line 890,col 50)",
            "(line 891,col 5)-(line 891,col 46)",
            "(line 892,col 5)-(line 892,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam16()",
        "snippet": "  public void testParseParam16() throws Exception {\n    JSDocInfo info = parse(\"@param {string} index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(STRING_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 895,
        "end_line": 899,
        "comment": "",
        "child_ranges": [
            "(line 896,col 5)-(line 896,col 56)",
            "(line 897,col 5)-(line 897,col 46)",
            "(line 898,col 5)-(line 898,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam17()",
        "snippet": "  public void testParseParam17() throws Exception {\n    JSDocInfo info = parse(\"@param {string=} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 901,
        "end_line": 907,
        "comment": "",
        "child_ranges": [
            "(line 902,col 5)-(line 902,col 58)",
            "(line 903,col 5)-(line 903,col 46)",
            "(line 904,col 5)-(line 906,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam18()",
        "snippet": "  public void testParseParam18() throws Exception {\n    JSDocInfo info = parse(\"@param {...string} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 909,
        "end_line": 915,
        "comment": "",
        "child_ranges": [
            "(line 910,col 5)-(line 910,col 60)",
            "(line 911,col 5)-(line 911,col 46)",
            "(line 912,col 5)-(line 914,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam19()",
        "snippet": "  public void testParseParam19() throws Exception {\n    JSDocInfo info = parse(\"@param {...} [index] */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(UNKNOWN_TYPE),\n        info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 917,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 918,col 5)-(line 918,col 54)",
            "(line 919,col 5)-(line 919,col 46)",
            "(line 920,col 5)-(line 922,col 40)",
            "(line 923,col 5)-(line 923,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam20()",
        "snippet": "  public void testParseParam20() throws Exception {\n    JSDocInfo info = parse(\"@param {?=} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 926,
        "end_line": 931,
        "comment": "",
        "child_ranges": [
            "(line 927,col 5)-(line 927,col 51)",
            "(line 928,col 5)-(line 928,col 46)",
            "(line 929,col 5)-(line 930,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParam21()",
        "snippet": "  public void testParseParam21() throws Exception {\n    JSDocInfo info = parse(\"@param {...?} index */\");\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        UNKNOWN_TYPE, info.getParameterType(\"index\"));\n    assertTrue(info.getParameterType(\"index\").isVarArgs());\n  }\n",
        "begin_line": 933,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 934,col 5)-(line 934,col 53)",
            "(line 935,col 5)-(line 935,col 46)",
            "(line 936,col 5)-(line 937,col 54)",
            "(line 938,col 5)-(line 938,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows1()",
        "snippet": "  public void testParseThrows1() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number */\");\n    assertEquals(1, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 941,
        "end_line": 945,
        "comment": "",
        "child_ranges": [
            "(line 942,col 5)-(line 942,col 62)",
            "(line 943,col 5)-(line 943,col 50)",
            "(line 944,col 5)-(line 944,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseThrows2()",
        "snippet": "  public void testParseThrows2() throws Exception {\n    JSDocInfo info = parse(\"@throws {number} Some number\\n \"\n                           + \"*@throws {String} A string */\");\n    assertEquals(2, info.getThrownTypes().size());\n    assertTypeEquals(NUMBER_TYPE, info.getThrownTypes().get(0));\n  }\n",
        "begin_line": 947,
        "end_line": 952,
        "comment": "",
        "child_ranges": [
            "(line 948,col 5)-(line 949,col 62)",
            "(line 950,col 5)-(line 950,col 50)",
            "(line 951,col 5)-(line 951,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType1()",
        "snippet": "  public void testParseRecordType1() throws Exception {\n    parseFull(\"/** @param {{x}} n\\n*/\");\n  }\n",
        "begin_line": 954,
        "end_line": 956,
        "comment": "",
        "child_ranges": [
            "(line 955,col 5)-(line 955,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType2()",
        "snippet": "  public void testParseRecordType2() throws Exception {\n    parseFull(\"/** @param {{z, y}} n\\n*/\");\n  }\n",
        "begin_line": 958,
        "end_line": 960,
        "comment": "",
        "child_ranges": [
            "(line 959,col 5)-(line 959,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType3()",
        "snippet": "  public void testParseRecordType3() throws Exception {\n    parseFull(\"/** @param {{z, y, x, q, hello, thisisatest}} n\\n*/\");\n  }\n",
        "begin_line": 962,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 963,col 5)-(line 963,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType4()",
        "snippet": "  public void testParseRecordType4() throws Exception {\n    parseFull(\"/** @param {{a, 'a', 'hello', 2, this, do, while, for}} n\\n*/\");\n  }\n",
        "begin_line": 966,
        "end_line": 968,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 967,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType5()",
        "snippet": "  public void testParseRecordType5() throws Exception {\n    parseFull(\"/** @param {{x : hello}} n\\n*/\");\n  }\n",
        "begin_line": 970,
        "end_line": 972,
        "comment": "",
        "child_ranges": [
            "(line 971,col 5)-(line 971,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType6()",
        "snippet": "  public void testParseRecordType6() throws Exception {\n    parseFull(\"/** @param {{'x' : hello}} n\\n*/\");\n  }\n",
        "begin_line": 974,
        "end_line": 976,
        "comment": "",
        "child_ranges": [
            "(line 975,col 5)-(line 975,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType7()",
        "snippet": "  public void testParseRecordType7() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello}} n\\n*/\");\n  }\n",
        "begin_line": 978,
        "end_line": 980,
        "comment": "",
        "child_ranges": [
            "(line 979,col 5)-(line 979,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType8()",
        "snippet": "  public void testParseRecordType8() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : bar}} n\\n*/\");\n  }\n",
        "begin_line": 982,
        "end_line": 984,
        "comment": "",
        "child_ranges": [
            "(line 983,col 5)-(line 983,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType9()",
        "snippet": "  public void testParseRecordType9() throws Exception {\n    parseFull(\"/** @param {{'x' : !hello, y : {z : bar, 3 : meh}}} n\\n*/\");\n  }\n",
        "begin_line": 986,
        "end_line": 988,
        "comment": "",
        "child_ranges": [
            "(line 987,col 5)-(line 987,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType10()",
        "snippet": "  public void testParseRecordType10() throws Exception {\n    parseFull(\"/** @param {{__proto__ : moo}} n\\n*/\");\n  }\n",
        "begin_line": 990,
        "end_line": 992,
        "comment": "",
        "child_ranges": [
            "(line 991,col 5)-(line 991,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType11()",
        "snippet": "  public void testParseRecordType11() throws Exception {\n    parseFull(\"/** @param {{a : b} n\\n*/\",\n              \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 994,
        "end_line": 997,
        "comment": "",
        "child_ranges": [
            "(line 995,col 5)-(line 996,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType12()",
        "snippet": "  public void testParseRecordType12() throws Exception {\n    parseFull(\"/** @param {{!hello : hey}} n\\n*/\",\n              \"Bad type annotation. type not recognized due to syntax error\");\n  }\n",
        "begin_line": 999,
        "end_line": 1002,
        "comment": "",
        "child_ranges": [
            "(line 1000,col 5)-(line 1001,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType13()",
        "snippet": "  public void testParseRecordType13() throws Exception {\n    parseFull(\"/** @param {{x}|number} n\\n*/\");\n  }\n",
        "begin_line": 1004,
        "end_line": 1006,
        "comment": "",
        "child_ranges": [
            "(line 1005,col 5)-(line 1005,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType14()",
        "snippet": "  public void testParseRecordType14() throws Exception {\n    parseFull(\"/** @param {{x : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1008,
        "end_line": 1010,
        "comment": "",
        "child_ranges": [
            "(line 1009,col 5)-(line 1009,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType15()",
        "snippet": "  public void testParseRecordType15() throws Exception {\n    parseFull(\"/** @param {{'x' : y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1012,
        "end_line": 1014,
        "comment": "",
        "child_ranges": [
            "(line 1013,col 5)-(line 1013,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType16()",
        "snippet": "  public void testParseRecordType16() throws Exception {\n    parseFull(\"/** @param {{x, y}|number} n\\n*/\");\n  }\n",
        "begin_line": 1016,
        "end_line": 1018,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType17()",
        "snippet": "  public void testParseRecordType17() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|number} n\\n*/\");\n  }\n",
        "begin_line": 1020,
        "end_line": 1022,
        "comment": "",
        "child_ranges": [
            "(line 1021,col 5)-(line 1021,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType18()",
        "snippet": "  public void testParseRecordType18() throws Exception {\n    parseFull(\"/** @param {number|{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1024,
        "end_line": 1026,
        "comment": "",
        "child_ranges": [
            "(line 1025,col 5)-(line 1025,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType19()",
        "snippet": "  public void testParseRecordType19() throws Exception {\n    parseFull(\"/** @param {?{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1028,
        "end_line": 1030,
        "comment": "",
        "child_ranges": [
            "(line 1029,col 5)-(line 1029,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType20()",
        "snippet": "  public void testParseRecordType20() throws Exception {\n    parseFull(\"/** @param {!{x : hello, 'y'}} n\\n*/\");\n  }\n",
        "begin_line": 1032,
        "end_line": 1034,
        "comment": "",
        "child_ranges": [
            "(line 1033,col 5)-(line 1033,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType21()",
        "snippet": "  public void testParseRecordType21() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|boolean} n\\n*/\");\n  }\n",
        "begin_line": 1036,
        "end_line": 1038,
        "comment": "",
        "child_ranges": [
            "(line 1037,col 5)-(line 1037,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType22()",
        "snippet": "  public void testParseRecordType22() throws Exception {\n    parseFull(\"/** @param {{x : hello, 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1040,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1041,col 5)-(line 1041,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseRecordType23()",
        "snippet": "  public void testParseRecordType23() throws Exception {\n    parseFull(\"/** @param {{x : function(), 'y'}|function()} n\\n*/\");\n  }\n",
        "begin_line": 1044,
        "end_line": 1046,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError1()",
        "snippet": "  public void testParseParamError1() throws Exception {\n    parseFull(\"/** @param\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1048,
        "end_line": 1051,
        "comment": "",
        "child_ranges": [
            "(line 1049,col 5)-(line 1050,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError2()",
        "snippet": "  public void testParseParamError2() throws Exception {\n    parseFull(\"/** @param {Number}*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1053,
        "end_line": 1056,
        "comment": "",
        "child_ranges": [
            "(line 1054,col 5)-(line 1055,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError3()",
        "snippet": "  public void testParseParamError3() throws Exception {\n    parseFull(\"/** @param {Number}\\n*/\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1058,
        "end_line": 1061,
        "comment": "",
        "child_ranges": [
            "(line 1059,col 5)-(line 1060,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError4()",
        "snippet": "  public void testParseParamError4() throws Exception {\n    parseFull(\"/** @param {Number}\\n* * num */\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1063,
        "end_line": 1066,
        "comment": "",
        "child_ranges": [
            "(line 1064,col 5)-(line 1065,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseParamError5()",
        "snippet": "  public void testParseParamError5() throws Exception {\n    parse(\"@param {number} x \\n * @param {string} x */\",\n        \"Bad type annotation. duplicate variable name \\\"x\\\"\");\n  }\n",
        "begin_line": 1068,
        "end_line": 1071,
        "comment": "",
        "child_ranges": [
            "(line 1069,col 5)-(line 1070,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends1()",
        "snippet": "  public void testParseExtends1() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n                     parse(\"@extends String*/\").getBaseType());\n  }\n",
        "begin_line": 1073,
        "end_line": 1076,
        "comment": "",
        "child_ranges": [
            "(line 1074,col 5)-(line 1075,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends2()",
        "snippet": "  public void testParseExtends2() throws Exception {\n    JSDocInfo info = parse(\"@extends com.google.Foo.Bar.Hello.World*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1078,
        "end_line": 1084,
        "comment": "",
        "child_ranges": [
            "(line 1079,col 5)-(line 1079,col 72)",
            "(line 1080,col 5)-(line 1083,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsGenerics()",
        "snippet": "  public void testParseExtendsGenerics() throws Exception {\n    JSDocInfo info =\n        parse(\"@extends com.google.Foo.Bar.Hello.World.<Boolean,number>*/\");\n    assertTypeEquals(\n        registry.createNamedType(\n            \"com.google.Foo.Bar.Hello.World\", null, -1, -1),\n        info.getBaseType());\n  }\n",
        "begin_line": 1086,
        "end_line": 1093,
        "comment": "",
        "child_ranges": [
            "(line 1087,col 5)-(line 1088,col 76)",
            "(line 1089,col 5)-(line 1092,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsGenerics()",
        "snippet": "  public void testParseImplementsGenerics() throws Exception {\n    // we ignore things inside <> for now\n    List<JSTypeExpression> interfaces =\n        parse(\"@implements {SomeInterface.<*>} */\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1095,
        "end_line": 1103,
        "comment": "",
        "child_ranges": [
            "(line 1097,col 5)-(line 1099,col 36)",
            "(line 1100,col 5)-(line 1100,col 39)",
            "(line 1101,col 5)-(line 1102,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends4()",
        "snippet": "  public void testParseExtends4() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1105,
        "end_line": 1108,
        "comment": "",
        "child_ranges": [
            "(line 1106,col 5)-(line 1107,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends5()",
        "snippet": "  public void testParseExtends5() throws Exception {\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends {String*/\",\n              \"Bad type annotation. expected closing }\").getBaseType());\n  }\n",
        "begin_line": 1110,
        "end_line": 1114,
        "comment": "",
        "child_ranges": [
            "(line 1111,col 5)-(line 1113,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtends6()",
        "snippet": "  public void testParseExtends6() throws Exception {\n    // Multi-line extends\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        parse(\"@extends \\n * {String}*/\").getBaseType());\n  }\n",
        "begin_line": 1116,
        "end_line": 1120,
        "comment": "",
        "child_ranges": [
            "(line 1118,col 5)-(line 1119,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsInvalidName()",
        "snippet": "  public void testParseExtendsInvalidName() throws Exception {\n    // This looks bad, but for the time being it should be ok, as\n    // we will not find a type with this name in the js parsed tree.\n    // If this is fixed in the future, change this test to check for a\n    // warning/error message.\n    assertTypeEquals(\n        registry.createNamedType(\"some_++#%$%_UglyString\", null, -1, -1),\n        parse(\"@extends {some_++#%$%_UglyString} */\").getBaseType());\n  }\n",
        "begin_line": 1122,
        "end_line": 1130,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 5)-(line 1129,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable1()",
        "snippet": "  public void testParseExtendsNullable1() throws Exception {\n    parse(\"@extends {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1132,
        "end_line": 1134,
        "comment": "",
        "child_ranges": [
            "(line 1133,col 5)-(line 1133,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExtendsNullable2()",
        "snippet": "  public void testParseExtendsNullable2() throws Exception {\n    parse(\"@extends Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 1136,
        "end_line": 1139,
        "comment": "",
        "child_ranges": [
            "(line 1137,col 5)-(line 1138,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum1()",
        "snippet": "  public void testParseEnum1() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@enum*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1141,
        "end_line": 1143,
        "comment": "",
        "child_ranges": [
            "(line 1142,col 5)-(line 1142,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum2()",
        "snippet": "  public void testParseEnum2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum {string}*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1145,
        "end_line": 1148,
        "comment": "",
        "child_ranges": [
            "(line 1146,col 5)-(line 1147,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseEnum3()",
        "snippet": "  public void testParseEnum3() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@enum string*/\").getEnumParameterType());\n  }\n",
        "begin_line": 1150,
        "end_line": 1153,
        "comment": "",
        "child_ranges": [
            "(line 1151,col 5)-(line 1152,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc1()",
        "snippet": "  public void testParseDesc1() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!*/\").getDescription());\n  }\n",
        "begin_line": 1155,
        "end_line": 1158,
        "comment": "",
        "child_ranges": [
            "(line 1156,col 5)-(line 1157,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc2()",
        "snippet": "  public void testParseDesc2() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1160,
        "end_line": 1163,
        "comment": "",
        "child_ranges": [
            "(line 1161,col 5)-(line 1162,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc3()",
        "snippet": "  public void testParseDesc3() throws Exception {\n    assertEquals(\"\", parse(\"@desc*/\").getDescription());\n  }\n",
        "begin_line": 1165,
        "end_line": 1167,
        "comment": "",
        "child_ranges": [
            "(line 1166,col 5)-(line 1166,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc4()",
        "snippet": "  public void testParseDesc4() throws Exception {\n    assertEquals(\"\", parse(\"@desc\\n*/\").getDescription());\n  }\n",
        "begin_line": 1169,
        "end_line": 1171,
        "comment": "",
        "child_ranges": [
            "(line 1170,col 5)-(line 1170,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc5()",
        "snippet": "  public void testParseDesc5() throws Exception {\n    assertEquals(\"hello world!\",\n                 parse(\"@desc hello\\nworld!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1173,
        "end_line": 1176,
        "comment": "",
        "child_ranges": [
            "(line 1174,col 5)-(line 1175,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc6()",
        "snippet": "  public void testParseDesc6() throws Exception {\n    assertEquals(\"hello world!\",\n        parse(\"@desc hello\\n* world!\\n*/\").getDescription());\n  }\n",
        "begin_line": 1178,
        "end_line": 1181,
        "comment": "",
        "child_ranges": [
            "(line 1179,col 5)-(line 1180,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc7()",
        "snippet": "  public void testParseDesc7() throws Exception {\n    assertEquals(\"a b c\", parse(\"@desc a\\n\\nb\\nc*/\").getDescription());\n  }\n",
        "begin_line": 1183,
        "end_line": 1185,
        "comment": "",
        "child_ranges": [
            "(line 1184,col 5)-(line 1184,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc8()",
        "snippet": "  public void testParseDesc8() throws Exception {\n    assertEquals(\"a b c d\",\n        parse(\"@desc a\\n      *b\\n\\n  *c\\n\\nd*/\").getDescription());\n  }\n",
        "begin_line": 1187,
        "end_line": 1190,
        "comment": "",
        "child_ranges": [
            "(line 1188,col 5)-(line 1189,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc9()",
        "snippet": "  public void testParseDesc9() throws Exception {\n    String comment = \"@desc\\n.\\n,\\n{\\n)\\n}\\n|\\n.<\\n>\\n<\\n?\\n~\\n+\\n-\\n;\\n:\\n*/\";\n\n    assertEquals(\". , { ) } | .< > < ? ~ + - ; :\",\n        parse(comment).getDescription());\n  }\n",
        "begin_line": 1192,
        "end_line": 1197,
        "comment": "",
        "child_ranges": [
            "(line 1193,col 5)-(line 1193,col 79)",
            "(line 1195,col 5)-(line 1196,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc10()",
        "snippet": "  public void testParseDesc10() throws Exception {\n    String comment = \"@desc\\n?\\n?\\n?\\n?*/\";\n\n    assertEquals(\"? ? ? ?\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1199,
        "end_line": 1203,
        "comment": "",
        "child_ranges": [
            "(line 1200,col 5)-(line 1200,col 43)",
            "(line 1202,col 5)-(line 1202,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc11()",
        "snippet": "  public void testParseDesc11() throws Exception {\n    String comment = \"@desc :[]*/\";\n\n    assertEquals(\":[]\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1205,
        "end_line": 1209,
        "comment": "",
        "child_ranges": [
            "(line 1206,col 5)-(line 1206,col 35)",
            "(line 1208,col 5)-(line 1208,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDesc12()",
        "snippet": "  public void testParseDesc12() throws Exception {\n    String comment = \"@desc\\n:\\n[\\n]\\n...*/\";\n\n    assertEquals(\": [ ] ...\", parse(comment).getDescription());\n  }\n",
        "begin_line": 1211,
        "end_line": 1215,
        "comment": "",
        "child_ranges": [
            "(line 1212,col 5)-(line 1212,col 45)",
            "(line 1214,col 5)-(line 1214,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning1()",
        "snippet": "  public void testParseMeaning1() throws Exception {\n    assertEquals(\"tigers\",\n        parse(\"@meaning tigers   */\").getMeaning());\n  }\n",
        "begin_line": 1217,
        "end_line": 1220,
        "comment": "",
        "child_ranges": [
            "(line 1218,col 5)-(line 1219,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning2()",
        "snippet": "  public void testParseMeaning2() throws Exception {\n    assertEquals(\"tigers and lions and bears\",\n        parse(\"@meaning tigers\\n * and lions\\n * and bears */\").getMeaning());\n  }\n",
        "begin_line": 1222,
        "end_line": 1225,
        "comment": "",
        "child_ranges": [
            "(line 1223,col 5)-(line 1224,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning3()",
        "snippet": "  public void testParseMeaning3() throws Exception {\n    JSDocInfo info =\n        parse(\"@meaning  tigers\\n * and lions\\n * @desc  and bears */\");\n    assertEquals(\"tigers and lions\", info.getMeaning());\n    assertEquals(\"and bears\", info.getDescription());\n  }\n",
        "begin_line": 1227,
        "end_line": 1232,
        "comment": "",
        "child_ranges": [
            "(line 1228,col 5)-(line 1229,col 72)",
            "(line 1230,col 5)-(line 1230,col 56)",
            "(line 1231,col 5)-(line 1231,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseMeaning4()",
        "snippet": "  public void testParseMeaning4() throws Exception {\n    parse(\"@meaning  tigers\\n * @meaning and lions  */\",\n        \"extra @meaning tag\");\n  }\n",
        "begin_line": 1234,
        "end_line": 1237,
        "comment": "",
        "child_ranges": [
            "(line 1235,col 5)-(line 1236,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends1()",
        "snippet": "  public void testParseLends1() throws Exception {\n    JSDocInfo info = parse(\"@lends {name} */\");\n    assertEquals(\"name\", info.getLendsName());\n  }\n",
        "begin_line": 1239,
        "end_line": 1242,
        "comment": "",
        "child_ranges": [
            "(line 1240,col 5)-(line 1240,col 47)",
            "(line 1241,col 5)-(line 1241,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends2()",
        "snippet": "  public void testParseLends2() throws Exception {\n    JSDocInfo info = parse(\"@lends   foo.bar  */\");\n    assertEquals(\"foo.bar\", info.getLendsName());\n  }\n",
        "begin_line": 1244,
        "end_line": 1247,
        "comment": "",
        "child_ranges": [
            "(line 1245,col 5)-(line 1245,col 51)",
            "(line 1246,col 5)-(line 1246,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends3()",
        "snippet": "  public void testParseLends3() throws Exception {\n    parse(\"@lends {name */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1249,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1250,col 5)-(line 1250,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends4()",
        "snippet": "  public void testParseLends4() throws Exception {\n    parse(\"@lends {} */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1253,
        "end_line": 1256,
        "comment": "",
        "child_ranges": [
            "(line 1254,col 5)-(line 1255,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends5()",
        "snippet": "  public void testParseLends5() throws Exception {\n    parse(\"@lends } */\",\n        \"Bad type annotation. missing object name in @lends tag\");\n  }\n",
        "begin_line": 1258,
        "end_line": 1261,
        "comment": "",
        "child_ranges": [
            "(line 1259,col 5)-(line 1260,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends6()",
        "snippet": "  public void testParseLends6() throws Exception {\n    parse(\"@lends {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1263,
        "end_line": 1266,
        "comment": "",
        "child_ranges": [
            "(line 1264,col 5)-(line 1265,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLends7()",
        "snippet": "  public void testParseLends7() throws Exception {\n    parse(\"@type {string} \\n * @lends {string} */\",\n        \"Bad type annotation. @lends tag incompatible with other annotations\");\n  }\n",
        "begin_line": 1268,
        "end_line": 1271,
        "comment": "",
        "child_ranges": [
            "(line 1269,col 5)-(line 1270,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParsePreserve()",
        "snippet": "  public void testParsePreserve() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@preserve Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\nBar\\n\\nBaz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1273,
        "end_line": 1279,
        "comment": "",
        "child_ranges": [
            "(line 1274,col 5)-(line 1274,col 28)",
            "(line 1275,col 5)-(line 1275,col 63)",
            "(line 1276,col 5)-(line 1276,col 51)",
            "(line 1277,col 5)-(line 1277,col 19)",
            "(line 1278,col 5)-(line 1278,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicense()",
        "snippet": "  public void testParseLicense() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo\\nBar\\n\\nBaz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\nBar\\n\\nBaz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1281,
        "end_line": 1287,
        "comment": "",
        "child_ranges": [
            "(line 1282,col 5)-(line 1282,col 28)",
            "(line 1283,col 5)-(line 1283,col 63)",
            "(line 1284,col 5)-(line 1284,col 50)",
            "(line 1285,col 5)-(line 1285,col 19)",
            "(line 1286,col 5)-(line 1286,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicenseAscii()",
        "snippet": "  public void testParseLicenseAscii() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo\\n *   Bar\\n\\n  Baz*/\";\n    parse(comment);\n    assertEquals(\" Foo\\n   Bar\\n\\n  Baz\", node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1289,
        "end_line": 1295,
        "comment": "",
        "child_ranges": [
            "(line 1290,col 5)-(line 1290,col 28)",
            "(line 1291,col 5)-(line 1291,col 63)",
            "(line 1292,col 5)-(line 1292,col 57)",
            "(line 1293,col 5)-(line 1293,col 19)",
            "(line 1294,col 5)-(line 1294,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseLicenseWithAnnotation()",
        "snippet": "  public void testParseLicenseWithAnnotation() throws Exception {\n    Node node = new Node(1);\n    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();\n    String comment = \"@license Foo \\n * @author Charlie Brown */\";\n    parse(comment);\n    assertEquals(\" Foo \\n @author Charlie Brown \",\n        node.getJSDocInfo().getLicense());\n  }\n",
        "begin_line": 1297,
        "end_line": 1304,
        "comment": "",
        "child_ranges": [
            "(line 1298,col 5)-(line 1298,col 28)",
            "(line 1299,col 5)-(line 1299,col 63)",
            "(line 1300,col 5)-(line 1300,col 66)",
            "(line 1301,col 5)-(line 1301,col 19)",
            "(line 1302,col 5)-(line 1303,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine1()",
        "snippet": "  public void testParseDefine1() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string}*/\").getType());\n  }\n",
        "begin_line": 1306,
        "end_line": 1309,
        "comment": "",
        "child_ranges": [
            "(line 1307,col 5)-(line 1308,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine2()",
        "snippet": "  public void testParseDefine2() throws Exception {\n    assertTypeEquals(STRING_TYPE,\n        parse(\"@define {string*/\",\n              \"Bad type annotation. expected closing }\").getType());\n  }\n",
        "begin_line": 1311,
        "end_line": 1315,
        "comment": "",
        "child_ranges": [
            "(line 1312,col 5)-(line 1314,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine3()",
        "snippet": "  public void testParseDefine3() throws Exception {\n    JSDocInfo info = parse(\"@define {boolean}*/\");\n    assertTrue(info.isConstant());\n    assertTrue(info.isDefine());\n    assertTypeEquals(BOOLEAN_TYPE, info.getType());\n  }\n",
        "begin_line": 1317,
        "end_line": 1322,
        "comment": "",
        "child_ranges": [
            "(line 1318,col 5)-(line 1318,col 50)",
            "(line 1319,col 5)-(line 1319,col 34)",
            "(line 1320,col 5)-(line 1320,col 32)",
            "(line 1321,col 5)-(line 1321,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine4()",
        "snippet": "  public void testParseDefine4() throws Exception {\n    assertTypeEquals(NUMBER_TYPE, parse(\"@define {number}*/\").getType());\n  }\n",
        "begin_line": 1324,
        "end_line": 1326,
        "comment": "",
        "child_ranges": [
            "(line 1325,col 5)-(line 1325,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefine5()",
        "snippet": "  public void testParseDefine5() throws Exception {\n    assertTypeEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE),\n        parse(\"@define {number|boolean}*/\").getType());\n  }\n",
        "begin_line": 1328,
        "end_line": 1331,
        "comment": "",
        "child_ranges": [
            "(line 1329,col 5)-(line 1330,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors1()",
        "snippet": "  public void testParseDefineErrors1() throws Exception {\n    parse(\"@enum {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1333,
        "end_line": 1335,
        "comment": "",
        "child_ranges": [
            "(line 1334,col 5)-(line 1334,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors2()",
        "snippet": "  public void testParseDefineErrors2() throws Exception {\n    parse(\"@define {string}\\n @enum {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1337,
        "end_line": 1341,
        "comment": "",
        "child_ranges": [
            "(line 1338,col 5)-(line 1340,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors3()",
        "snippet": "  public void testParseDefineErrors3() throws Exception {\n    parse(\"@const\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1343,
        "end_line": 1345,
        "comment": "",
        "child_ranges": [
            "(line 1344,col 5)-(line 1344,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors4()",
        "snippet": "  public void testParseDefineErrors4() throws Exception {\n    parse(\"@type string \\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1347,
        "end_line": 1349,
        "comment": "",
        "child_ranges": [
            "(line 1348,col 5)-(line 1348,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors5()",
        "snippet": "  public void testParseDefineErrors5() throws Exception {\n    parse(\"@return {string}\\n @define {string} */\", \"conflicting @define tag\");\n  }\n",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "",
        "child_ranges": [
            "(line 1352,col 5)-(line 1352,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors7()",
        "snippet": "  public void testParseDefineErrors7() throws Exception {\n    parse(\"@define {string}\\n @const */\", \"conflicting @const tag\");\n  }\n",
        "begin_line": 1355,
        "end_line": 1357,
        "comment": "",
        "child_ranges": [
            "(line 1356,col 5)-(line 1356,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDefineErrors8()",
        "snippet": "  public void testParseDefineErrors8() throws Exception {\n    parse(\"@define {string}\\n @type string */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1359,
        "end_line": 1363,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 5)-(line 1362,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck1()",
        "snippet": "  public void testParseNoCheck1() throws Exception {\n    assertTrue(parse(\"@notypecheck*/\").isNoTypeCheck());\n  }\n",
        "begin_line": 1365,
        "end_line": 1367,
        "comment": "",
        "child_ranges": [
            "(line 1366,col 5)-(line 1366,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCheck2()",
        "snippet": "  public void testParseNoCheck2() throws Exception {\n    parse(\"@notypecheck\\n@notypecheck*/\", \"extra @notypecheck tag\");\n  }\n",
        "begin_line": 1369,
        "end_line": 1371,
        "comment": "",
        "child_ranges": [
            "(line 1370,col 5)-(line 1370,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride1()",
        "snippet": "  public void testParseOverride1() throws Exception {\n    assertTrue(parse(\"@override*/\").isOverride());\n  }\n",
        "begin_line": 1373,
        "end_line": 1375,
        "comment": "",
        "child_ranges": [
            "(line 1374,col 5)-(line 1374,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseOverride2()",
        "snippet": "  public void testParseOverride2() throws Exception {\n    parse(\"@override\\n@override*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1377,
        "end_line": 1380,
        "comment": "",
        "child_ranges": [
            "(line 1378,col 5)-(line 1379,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc1()",
        "snippet": "  public void testParseInheritDoc1() throws Exception {\n    assertTrue(parse(\"@inheritDoc*/\").isOverride());\n  }\n",
        "begin_line": 1382,
        "end_line": 1384,
        "comment": "",
        "child_ranges": [
            "(line 1383,col 5)-(line 1383,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc2()",
        "snippet": "  public void testParseInheritDoc2() throws Exception {\n    parse(\"@override\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1386,
        "end_line": 1389,
        "comment": "",
        "child_ranges": [
            "(line 1387,col 5)-(line 1388,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInheritDoc3()",
        "snippet": "  public void testParseInheritDoc3() throws Exception {\n    parse(\"@inheritDoc\\n@inheritDoc*/\",\n        \"Bad type annotation. extra @override/@inheritDoc tag\");\n  }\n",
        "begin_line": 1391,
        "end_line": 1394,
        "comment": "",
        "child_ranges": [
            "(line 1392,col 5)-(line 1393,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias1()",
        "snippet": "  public void testParseNoAlias1() throws Exception {\n    assertTrue(parse(\"@noalias*/\").isNoAlias());\n  }\n",
        "begin_line": 1396,
        "end_line": 1398,
        "comment": "",
        "child_ranges": [
            "(line 1397,col 5)-(line 1397,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoAlias2()",
        "snippet": "  public void testParseNoAlias2() throws Exception {\n    parse(\"@noalias\\n@noalias*/\", \"extra @noalias tag\");\n  }\n",
        "begin_line": 1400,
        "end_line": 1402,
        "comment": "",
        "child_ranges": [
            "(line 1401,col 5)-(line 1401,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated1()",
        "snippet": "  public void testParseDeprecated1() throws Exception {\n    assertTrue(parse(\"@deprecated*/\").isDeprecated());\n  }\n",
        "begin_line": 1404,
        "end_line": 1406,
        "comment": "",
        "child_ranges": [
            "(line 1405,col 5)-(line 1405,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDeprecated2()",
        "snippet": "  public void testParseDeprecated2() throws Exception {\n    parse(\"@deprecated\\n@deprecated*/\", \"extra @deprecated tag\");\n  }\n",
        "begin_line": 1408,
        "end_line": 1410,
        "comment": "",
        "child_ranges": [
            "(line 1409,col 5)-(line 1409,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport1()",
        "snippet": "  public void testParseExport1() throws Exception {\n    assertTrue(parse(\"@export*/\").isExport());\n  }\n",
        "begin_line": 1412,
        "end_line": 1414,
        "comment": "",
        "child_ranges": [
            "(line 1413,col 5)-(line 1413,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExport2()",
        "snippet": "  public void testParseExport2() throws Exception {\n    parse(\"@export\\n@export*/\", \"extra @export tag\");\n  }\n",
        "begin_line": 1416,
        "end_line": 1418,
        "comment": "",
        "child_ranges": [
            "(line 1417,col 5)-(line 1417,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExpose1()",
        "snippet": "  public void testParseExpose1() throws Exception {\n    assertTrue(parse(\"@expose*/\").isExpose());\n  }\n",
        "begin_line": 1420,
        "end_line": 1422,
        "comment": "",
        "child_ranges": [
            "(line 1421,col 5)-(line 1421,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExpose2()",
        "snippet": "  public void testParseExpose2() throws Exception {\n    parse(\"@expose\\n@expose*/\", \"extra @expose tag\");\n  }\n",
        "begin_line": 1424,
        "end_line": 1426,
        "comment": "",
        "child_ranges": [
            "(line 1425,col 5)-(line 1425,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns1()",
        "snippet": "  public void testParseExterns1() throws Exception {\n    assertTrue(parseFileOverview(\"@externs*/\").isExterns());\n  }\n",
        "begin_line": 1428,
        "end_line": 1430,
        "comment": "",
        "child_ranges": [
            "(line 1429,col 5)-(line 1429,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns2()",
        "snippet": "  public void testParseExterns2() throws Exception {\n    parseFileOverview(\"@externs\\n@externs*/\", \"extra @externs tag\");\n  }\n",
        "begin_line": 1432,
        "end_line": 1434,
        "comment": "",
        "child_ranges": [
            "(line 1433,col 5)-(line 1433,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseExterns3()",
        "snippet": "  public void testParseExterns3() throws Exception {\n    assertNull(parse(\"@externs*/\"));\n  }\n",
        "begin_line": 1436,
        "end_line": 1438,
        "comment": "",
        "child_ranges": [
            "(line 1437,col 5)-(line 1437,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch1()",
        "snippet": "  public void testParseJavaDispatch1() throws Exception {\n    assertTrue(parse(\"@javadispatch*/\").isJavaDispatch());\n  }\n",
        "begin_line": 1440,
        "end_line": 1442,
        "comment": "",
        "child_ranges": [
            "(line 1441,col 5)-(line 1441,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch2()",
        "snippet": "  public void testParseJavaDispatch2() throws Exception {\n    parse(\"@javadispatch\\n@javadispatch*/\",\n        \"extra @javadispatch tag\");\n  }\n",
        "begin_line": 1444,
        "end_line": 1447,
        "comment": "",
        "child_ranges": [
            "(line 1445,col 5)-(line 1446,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseJavaDispatch3()",
        "snippet": "  public void testParseJavaDispatch3() throws Exception {\n    assertNull(parseFileOverview(\"@javadispatch*/\"));\n  }\n",
        "begin_line": 1449,
        "end_line": 1451,
        "comment": "",
        "child_ranges": [
            "(line 1450,col 5)-(line 1450,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile1()",
        "snippet": "  public void testParseNoCompile1() throws Exception {\n    assertTrue(parseFileOverview(\"@nocompile*/\").isNoCompile());\n  }\n",
        "begin_line": 1453,
        "end_line": 1455,
        "comment": "",
        "child_ranges": [
            "(line 1454,col 5)-(line 1454,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseNoCompile2()",
        "snippet": "  public void testParseNoCompile2() throws Exception {\n    parseFileOverview(\"@nocompile\\n@nocompile*/\", \"extra @nocompile tag\");\n  }\n",
        "begin_line": 1457,
        "end_line": 1459,
        "comment": "",
        "child_ranges": [
            "(line 1458,col 5)-(line 1458,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBugAnnotation()",
        "snippet": "  public void testBugAnnotation() throws Exception {\n    parse(\"@bug */\");\n  }\n",
        "begin_line": 1461,
        "end_line": 1463,
        "comment": "",
        "child_ranges": [
            "(line 1462,col 5)-(line 1462,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDescriptionAnnotation()",
        "snippet": "  public void testDescriptionAnnotation() throws Exception {\n    parse(\"@description */\");\n  }\n",
        "begin_line": 1465,
        "end_line": 1467,
        "comment": "",
        "child_ranges": [
            "(line 1466,col 5)-(line 1466,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression1()",
        "snippet": "  public void testRegression1() throws Exception {\n    String comment =\n        \" * @param {number} index the index of blah\\n\" +\n        \" * @return {boolean} whatever\\n\" +\n        \" * @private\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PRIVATE, info.getVisibility());\n  }\n",
        "begin_line": 1469,
        "end_line": 1481,
        "comment": "",
        "child_ranges": [
            "(line 1470,col 5)-(line 1474,col 14)",
            "(line 1476,col 5)-(line 1476,col 36)",
            "(line 1477,col 5)-(line 1477,col 46)",
            "(line 1478,col 5)-(line 1478,col 66)",
            "(line 1479,col 5)-(line 1479,col 57)",
            "(line 1480,col 5)-(line 1480,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression2()",
        "snippet": "  public void testRegression2() throws Exception {\n    String comment =\n        \" * @return {boolean} whatever\\n\" +\n        \" * but important\\n\" +\n        \" *\\n\" +\n        \" * @param {number} index the index of blah\\n\" +\n        \" * some more comments here\\n\" +\n        \" * @param name the name of the guy\\n\" +\n        \" *\\n\" +\n        \" * @protected\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(2, info.getParameterCount());\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n    assertEquals(null, info.getParameterType(\"name\"));\n    assertTypeEquals(BOOLEAN_TYPE, info.getReturnType());\n    assertEquals(Visibility.PROTECTED, info.getVisibility());\n  }\n",
        "begin_line": 1483,
        "end_line": 1501,
        "comment": "",
        "child_ranges": [
            "(line 1484,col 5)-(line 1493,col 14)",
            "(line 1495,col 5)-(line 1495,col 36)",
            "(line 1496,col 5)-(line 1496,col 46)",
            "(line 1497,col 5)-(line 1497,col 66)",
            "(line 1498,col 5)-(line 1498,col 54)",
            "(line 1499,col 5)-(line 1499,col 57)",
            "(line 1500,col 5)-(line 1500,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression3()",
        "snippet": "  public void testRegression3() throws Exception {\n    String comment =\n        \" * @param mediaTag this specified whether the @media tag is ....\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \"@public\\n\" +\n        \" *\\n\" +\n        \"\\n\" +\n        \" **********\\n\" +\n        \" * @final\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(null, info.getParameterType(\"mediaTag\"));\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n    assertTrue(info.isConstant());\n  }\n",
        "begin_line": 1503,
        "end_line": 1520,
        "comment": "",
        "child_ranges": [
            "(line 1504,col 5)-(line 1513,col 14)",
            "(line 1515,col 5)-(line 1515,col 36)",
            "(line 1516,col 5)-(line 1516,col 46)",
            "(line 1517,col 5)-(line 1517,col 58)",
            "(line 1518,col 5)-(line 1518,col 58)",
            "(line 1519,col 5)-(line 1519,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression4()",
        "snippet": "  public void testRegression4() throws Exception {\n    String comment =\n        \" * @const\\n\" +\n        \" * @hidden\\n\" +\n        \" * @preserveTry\\n\" +\n        \" * @constructor\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTrue(info.isConstructor());\n    assertTrue(info.isHidden());\n    assertTrue(info.shouldPreserveTry());\n  }\n",
        "begin_line": 1522,
        "end_line": 1536,
        "comment": "",
        "child_ranges": [
            "(line 1523,col 5)-(line 1528,col 14)",
            "(line 1530,col 5)-(line 1530,col 36)",
            "(line 1531,col 5)-(line 1531,col 34)",
            "(line 1532,col 5)-(line 1532,col 33)",
            "(line 1533,col 5)-(line 1533,col 37)",
            "(line 1534,col 5)-(line 1534,col 32)",
            "(line 1535,col 5)-(line 1535,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression5()",
        "snippet": "  public void testRegression5() throws Exception {\n    String comment = \"@const\\n@enum {string}\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isConstant());\n    assertFalse(info.isDefine());\n    assertTypeEquals(STRING_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1538,
        "end_line": 1546,
        "comment": "",
        "child_ranges": [
            "(line 1539,col 5)-(line 1539,col 57)",
            "(line 1541,col 5)-(line 1541,col 36)",
            "(line 1542,col 5)-(line 1542,col 34)",
            "(line 1543,col 5)-(line 1543,col 33)",
            "(line 1544,col 5)-(line 1544,col 63)",
            "(line 1545,col 5)-(line 1545,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression6()",
        "snippet": "  public void testRegression6() throws Exception {\n    String comment = \"@hidden\\n@enum\\n@public*/\";\n\n    JSDocInfo info = parse(comment);\n    assertTrue(info.isHidden());\n    assertTypeEquals(NUMBER_TYPE, info.getEnumParameterType());\n    assertEquals(Visibility.PUBLIC, info.getVisibility());\n  }\n",
        "begin_line": 1548,
        "end_line": 1555,
        "comment": "",
        "child_ranges": [
            "(line 1549,col 5)-(line 1549,col 49)",
            "(line 1551,col 5)-(line 1551,col 36)",
            "(line 1552,col 5)-(line 1552,col 32)",
            "(line 1553,col 5)-(line 1553,col 63)",
            "(line 1554,col 5)-(line 1554,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression7()",
        "snippet": "  public void testRegression7() throws Exception {\n    String comment =\n        \" * @desc description here\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1557,
        "end_line": 1568,
        "comment": "",
        "child_ranges": [
            "(line 1558,col 5)-(line 1562,col 14)",
            "(line 1564,col 5)-(line 1564,col 36)",
            "(line 1565,col 5)-(line 1565,col 46)",
            "(line 1566,col 5)-(line 1566,col 66)",
            "(line 1567,col 5)-(line 1567,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression8()",
        "snippet": "  public void testRegression8() throws Exception {\n    String comment =\n        \" * @name random tag here\\n\" +\n        \" * @desc description here\\n\" +\n        \" *\\n\" +\n        \" * @param {boolean} flag and some more description\\n\" +\n        \" *     nicely formatted\\n\" +\n        \" */\";\n\n    JSDocInfo info = parse(comment);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(BOOLEAN_TYPE, info.getParameterType(\"flag\"));\n    assertEquals(\"description here\", info.getDescription());\n  }\n",
        "begin_line": 1570,
        "end_line": 1583,
        "comment": "",
        "child_ranges": [
            "(line 1571,col 5)-(line 1577,col 14)",
            "(line 1579,col 5)-(line 1579,col 36)",
            "(line 1580,col 5)-(line 1580,col 46)",
            "(line 1581,col 5)-(line 1581,col 66)",
            "(line 1582,col 5)-(line 1582,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression9()",
        "snippet": "  public void testRegression9() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {string} p0 blah blah blah\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(1, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1585,
        "end_line": 1600,
        "comment": "",
        "child_ranges": [
            "(line 1586,col 5)-(line 1588,col 15)",
            "(line 1590,col 5)-(line 1590,col 36)",
            "(line 1591,col 5)-(line 1591,col 36)",
            "(line 1592,col 5)-(line 1592,col 39)",
            "(line 1593,col 5)-(line 1593,col 45)",
            "(line 1594,col 5)-(line 1594,col 34)",
            "(line 1595,col 5)-(line 1595,col 47)",
            "(line 1596,col 5)-(line 1596,col 64)",
            "(line 1597,col 5)-(line 1597,col 38)",
            "(line 1598,col 5)-(line 1598,col 32)",
            "(line 1599,col 5)-(line 1599,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression10()",
        "snippet": "  public void testRegression10() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @param {!String} p0 blah blah blah\\n\" +\n        \" * @param {boolean} p1 fobar\\n\" +\n        \" * @return {!Date} jksjkash dshad\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(2, jsdoc.getParameterCount());\n    assertTypeEquals(STRING_OBJECT_TYPE, jsdoc.getParameterType(\"p0\"));\n    assertTypeEquals(BOOLEAN_TYPE, jsdoc.getParameterType(\"p1\"));\n    assertTypeEquals(DATE_TYPE, jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1602,
        "end_line": 1620,
        "comment": "",
        "child_ranges": [
            "(line 1603,col 5)-(line 1607,col 15)",
            "(line 1609,col 5)-(line 1609,col 36)",
            "(line 1610,col 5)-(line 1610,col 36)",
            "(line 1611,col 5)-(line 1611,col 39)",
            "(line 1612,col 5)-(line 1612,col 45)",
            "(line 1613,col 5)-(line 1613,col 34)",
            "(line 1614,col 5)-(line 1614,col 47)",
            "(line 1615,col 5)-(line 1615,col 71)",
            "(line 1616,col 5)-(line 1616,col 65)",
            "(line 1617,col 5)-(line 1617,col 55)",
            "(line 1618,col 5)-(line 1618,col 32)",
            "(line 1619,col 5)-(line 1619,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression11()",
        "snippet": "  public void testRegression11() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @constructor\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1622,
        "end_line": 1636,
        "comment": "",
        "child_ranges": [
            "(line 1623,col 5)-(line 1625,col 15)",
            "(line 1627,col 5)-(line 1627,col 36)",
            "(line 1628,col 5)-(line 1628,col 36)",
            "(line 1629,col 5)-(line 1629,col 39)",
            "(line 1630,col 5)-(line 1630,col 45)",
            "(line 1631,col 5)-(line 1631,col 34)",
            "(line 1632,col 5)-(line 1632,col 47)",
            "(line 1633,col 5)-(line 1633,col 38)",
            "(line 1634,col 5)-(line 1634,col 32)",
            "(line 1635,col 5)-(line 1635,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression12()",
        "snippet": "  public void testRegression12() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends FooBar\\n\" +\n        \" */\");\n\n    assertTypeEquals(registry.createNamedType(\"FooBar\", null, 0, 0),\n        jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1638,
        "end_line": 1653,
        "comment": "",
        "child_ranges": [
            "(line 1639,col 5)-(line 1641,col 15)",
            "(line 1643,col 5)-(line 1644,col 29)",
            "(line 1645,col 5)-(line 1645,col 36)",
            "(line 1646,col 5)-(line 1646,col 39)",
            "(line 1647,col 5)-(line 1647,col 45)",
            "(line 1648,col 5)-(line 1648,col 34)",
            "(line 1649,col 5)-(line 1649,col 47)",
            "(line 1650,col 5)-(line 1650,col 38)",
            "(line 1651,col 5)-(line 1651,col 32)",
            "(line 1652,col 5)-(line 1652,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression13()",
        "snippet": "  public void testRegression13() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @type {!RegExp}\\n\" +\n        \" * @protected\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertTypeEquals(REGEXP_TYPE, jsdoc.getType());\n    assertEquals(Visibility.PROTECTED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1655,
        "end_line": 1670,
        "comment": "",
        "child_ranges": [
            "(line 1656,col 5)-(line 1659,col 15)",
            "(line 1661,col 5)-(line 1661,col 36)",
            "(line 1662,col 5)-(line 1662,col 36)",
            "(line 1663,col 5)-(line 1663,col 39)",
            "(line 1664,col 5)-(line 1664,col 45)",
            "(line 1665,col 5)-(line 1665,col 34)",
            "(line 1666,col 5)-(line 1666,col 47)",
            "(line 1667,col 5)-(line 1667,col 38)",
            "(line 1668,col 5)-(line 1668,col 51)",
            "(line 1669,col 5)-(line 1669,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression14()",
        "snippet": "  public void testRegression14() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @const\\n\" +\n        \" * @private\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertTrue(jsdoc.isConstant());\n    assertNull(jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.PRIVATE, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1672,
        "end_line": 1687,
        "comment": "",
        "child_ranges": [
            "(line 1673,col 5)-(line 1676,col 15)",
            "(line 1678,col 5)-(line 1678,col 36)",
            "(line 1679,col 5)-(line 1679,col 35)",
            "(line 1680,col 5)-(line 1680,col 39)",
            "(line 1681,col 5)-(line 1681,col 45)",
            "(line 1682,col 5)-(line 1682,col 34)",
            "(line 1683,col 5)-(line 1683,col 47)",
            "(line 1684,col 5)-(line 1684,col 38)",
            "(line 1685,col 5)-(line 1685,col 32)",
            "(line 1686,col 5)-(line 1686,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression15()",
        "snippet": "  public void testRegression15() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @desc Hello,\\n\" +\n        \" * World!\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertEquals(\"Hello, World!\", jsdoc.getDescription());\n    assertNull(jsdoc.getEnumParameterType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertNull(jsdoc.getType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n    assertFalse(jsdoc.isExport());\n  }\n",
        "begin_line": 1689,
        "end_line": 1705,
        "comment": "",
        "child_ranges": [
            "(line 1690,col 5)-(line 1693,col 15)",
            "(line 1695,col 5)-(line 1695,col 36)",
            "(line 1696,col 5)-(line 1696,col 36)",
            "(line 1697,col 5)-(line 1697,col 58)",
            "(line 1698,col 5)-(line 1698,col 45)",
            "(line 1699,col 5)-(line 1699,col 34)",
            "(line 1700,col 5)-(line 1700,col 47)",
            "(line 1701,col 5)-(line 1701,col 38)",
            "(line 1702,col 5)-(line 1702,col 32)",
            "(line 1703,col 5)-(line 1703,col 62)",
            "(line 1704,col 5)-(line 1704,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression16()",
        "snippet": "  public void testRegression16() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" Email is plp@foo.bar\\n\" +\n        \" @type {string}\\n\" +\n        \" */\");\n\n    assertNull(jsdoc.getBaseType());\n    assertFalse(jsdoc.isConstant());\n    assertTypeEquals(STRING_TYPE, jsdoc.getType());\n    assertFalse(jsdoc.isHidden());\n    assertEquals(0, jsdoc.getParameterCount());\n    assertNull(jsdoc.getReturnType());\n    assertEquals(Visibility.INHERITED, jsdoc.getVisibility());\n  }\n",
        "begin_line": 1707,
        "end_line": 1720,
        "comment": "",
        "child_ranges": [
            "(line 1708,col 5)-(line 1711,col 15)",
            "(line 1713,col 5)-(line 1713,col 36)",
            "(line 1714,col 5)-(line 1714,col 36)",
            "(line 1715,col 5)-(line 1715,col 51)",
            "(line 1716,col 5)-(line 1716,col 34)",
            "(line 1717,col 5)-(line 1717,col 47)",
            "(line 1718,col 5)-(line 1718,col 38)",
            "(line 1719,col 5)-(line 1719,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testRegression17()",
        "snippet": "  public void testRegression17() throws Exception {\n    // verifying that if no @desc is present the description is empty\n    assertNull(parse(\"@private*/\").getDescription());\n  }\n",
        "begin_line": 1722,
        "end_line": 1725,
        "comment": "",
        "child_ranges": [
            "(line 1724,col 5)-(line 1724,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression1()",
        "snippet": "  public void testFullRegression1() throws Exception {\n    parseFull(\"/** @param (string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1727,
        "end_line": 1730,
        "comment": "",
        "child_ranges": [
            "(line 1728,col 5)-(line 1729,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression2()",
        "snippet": "  public void testFullRegression2() throws Exception {\n    parseFull(\"/** @param {string,number) foo*/function bar(foo){}\",\n        \"Bad type annotation. expected closing }\",\n        \"Bad type annotation. expecting a variable name in a @param tag\");\n  }\n",
        "begin_line": 1732,
        "end_line": 1736,
        "comment": "",
        "child_ranges": [
            "(line 1733,col 5)-(line 1735,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFullRegression3()",
        "snippet": "  public void testFullRegression3() throws Exception {\n    parseFull(\"/**..\\n*/\");\n  }\n",
        "begin_line": 1738,
        "end_line": 1740,
        "comment": "",
        "child_ranges": [
            "(line 1739,col 5)-(line 1739,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907488()",
        "snippet": "  public void testBug907488() throws Exception {\n    parse(\"@type {number,null} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1742,
        "end_line": 1745,
        "comment": "",
        "child_ranges": [
            "(line 1743,col 5)-(line 1744,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug907494()",
        "snippet": "  public void testBug907494() throws Exception {\n    parse(\"@return {Object,undefined} */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1747,
        "end_line": 1750,
        "comment": "",
        "child_ranges": [
            "(line 1748,col 5)-(line 1749,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBug909468()",
        "snippet": "  public void testBug909468() throws Exception {\n    parse(\"@extends {(x)}*/\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 1752,
        "end_line": 1755,
        "comment": "",
        "child_ranges": [
            "(line 1753,col 5)-(line 1754,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterface()",
        "snippet": "  public void testParseInterface() throws Exception {\n    assertTrue(parse(\"@interface*/\").isInterface());\n  }\n",
        "begin_line": 1757,
        "end_line": 1759,
        "comment": "",
        "child_ranges": [
            "(line 1758,col 5)-(line 1758,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast1()",
        "snippet": "  public void testParseImplicitCast1() throws Exception {\n    assertTrue(parse(\"@type {string} \\n * @implicitCast*/\").isImplicitCast());\n  }\n",
        "begin_line": 1761,
        "end_line": 1763,
        "comment": "",
        "child_ranges": [
            "(line 1762,col 5)-(line 1762,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplicitCast2()",
        "snippet": "  public void testParseImplicitCast2() throws Exception {\n    assertFalse(parse(\"@type {string}*/\").isImplicitCast());\n  }\n",
        "begin_line": 1765,
        "end_line": 1767,
        "comment": "",
        "child_ranges": [
            "(line 1766,col 5)-(line 1766,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseDuplicateImplicitCast()",
        "snippet": "  public void testParseDuplicateImplicitCast() throws Exception {\n    parse(\"@type {string} \\n * @implicitCast \\n * @implicitCast*/\",\n          \"Bad type annotation. extra @implicitCast tag\");\n  }\n",
        "begin_line": 1769,
        "end_line": 1772,
        "comment": "",
        "child_ranges": [
            "(line 1770,col 5)-(line 1771,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseInterfaceDoubled()",
        "snippet": "  public void testParseInterfaceDoubled() throws Exception {\n    parse(\n        \"* @interface\\n\" +\n        \"* @interface\\n\" +\n        \"*/\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 1774,
        "end_line": 1781,
        "comment": "",
        "child_ranges": [
            "(line 1775,col 5)-(line 1780,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplements()",
        "snippet": "  public void testParseImplements() throws Exception {\n    List<JSTypeExpression> interfaces = parse(\"@implements {SomeInterface}*/\")\n        .getImplementedInterfaces();\n    assertEquals(1, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface\", null, -1, -1),\n        interfaces.get(0));\n  }\n",
        "begin_line": 1783,
        "end_line": 1789,
        "comment": "",
        "child_ranges": [
            "(line 1784,col 5)-(line 1785,col 36)",
            "(line 1786,col 5)-(line 1786,col 39)",
            "(line 1787,col 5)-(line 1788,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsTwo()",
        "snippet": "  public void testParseImplementsTwo() throws Exception {\n    List<JSTypeExpression> interfaces =\n        parse(\n            \"* @implements {SomeInterface1}\\n\" +\n            \"* @implements {SomeInterface2}\\n\" +\n            \"*/\")\n        .getImplementedInterfaces();\n    assertEquals(2, interfaces.size());\n    assertTypeEquals(registry.createNamedType(\"SomeInterface1\", null, -1, -1),\n        interfaces.get(0));\n    assertTypeEquals(registry.createNamedType(\"SomeInterface2\", null, -1, -1),\n        interfaces.get(1));\n  }\n",
        "begin_line": 1791,
        "end_line": 1803,
        "comment": "",
        "child_ranges": [
            "(line 1792,col 5)-(line 1797,col 36)",
            "(line 1798,col 5)-(line 1798,col 39)",
            "(line 1799,col 5)-(line 1800,col 27)",
            "(line 1801,col 5)-(line 1802,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsSameTwice()",
        "snippet": "  public void testParseImplementsSameTwice() throws Exception {\n    parse(\n        \"* @implements {Smth}\\n\" +\n        \"* @implements {Smth}\\n\" +\n        \"*/\",\n        \"Bad type annotation. duplicate @implements tag\");\n  }\n",
        "begin_line": 1805,
        "end_line": 1811,
        "comment": "",
        "child_ranges": [
            "(line 1806,col 5)-(line 1810,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNoName()",
        "snippet": "  public void testParseImplementsNoName() throws Exception {\n    parse(\"* @implements {} */\",\n        \"Bad type annotation. expecting a type name\");\n  }\n",
        "begin_line": 1813,
        "end_line": 1816,
        "comment": "",
        "child_ranges": [
            "(line 1814,col 5)-(line 1815,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsMissingRC()",
        "snippet": "  public void testParseImplementsMissingRC() throws Exception {\n    parse(\"* @implements {Smth */\",\n        \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1818,
        "end_line": 1821,
        "comment": "",
        "child_ranges": [
            "(line 1819,col 5)-(line 1820,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable1()",
        "snippet": "  public void testParseImplementsNullable1() throws Exception {\n    parse(\"@implements {Base?} */\", \"Bad type annotation. expected closing }\");\n  }\n",
        "begin_line": 1823,
        "end_line": 1825,
        "comment": "",
        "child_ranges": [
            "(line 1824,col 5)-(line 1824,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseImplementsNullable2()",
        "snippet": "  public void testParseImplementsNullable2() throws Exception {\n    parse(\"@implements Base? */\",\n        \"Bad type annotation. expected end of line or comment\");\n  }\n",
        "begin_line": 1827,
        "end_line": 1830,
        "comment": "",
        "child_ranges": [
            "(line 1828,col 5)-(line 1829,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceExtends()",
        "snippet": "  public void testInterfaceExtends() throws Exception {\n     JSDocInfo jsdoc = parse(\n         \" * @interface \\n\" +\n         \" * @extends {Extended} */\");\n    assertTrue(jsdoc.isInterface());\n    assertEquals(1, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended\", null, -1, -1),\n        types.get(0));\n  }\n",
        "begin_line": 1832,
        "end_line": 1841,
        "comment": "",
        "child_ranges": [
            "(line 1833,col 6)-(line 1835,col 38)",
            "(line 1836,col 5)-(line 1836,col 36)",
            "(line 1837,col 5)-(line 1837,col 56)",
            "(line 1838,col 5)-(line 1838,col 65)",
            "(line 1839,col 5)-(line 1840,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends1()",
        "snippet": "  public void testInterfaceMultiExtends1() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @interface \\n\" +\n        \" * @extends {Extended1} \\n\" +\n        \" * @extends {Extended2} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(2, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n  }\n",
        "begin_line": 1843,
        "end_line": 1856,
        "comment": "",
        "child_ranges": [
            "(line 1844,col 5)-(line 1847,col 38)",
            "(line 1848,col 5)-(line 1848,col 36)",
            "(line 1849,col 5)-(line 1849,col 36)",
            "(line 1850,col 5)-(line 1850,col 56)",
            "(line 1851,col 5)-(line 1851,col 65)",
            "(line 1852,col 5)-(line 1853,col 21)",
            "(line 1854,col 5)-(line 1855,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testInterfaceMultiExtends2()",
        "snippet": "  public void testInterfaceMultiExtends2() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \" * @extends {Extended1} \\n\" +\n        \" * @interface \\n\" +\n        \" * @extends {Extended2} \\n\" +\n        \" * @extends {Extended3} */\");\n    assertTrue(jsdoc.isInterface());\n    assertNull(jsdoc.getBaseType());\n    assertEquals(3, jsdoc.getExtendedInterfacesCount());\n    List<JSTypeExpression> types = jsdoc.getExtendedInterfaces();\n    assertTypeEquals(registry.createNamedType(\"Extended1\", null, -1, -1),\n       types.get(0));\n    assertTypeEquals(registry.createNamedType(\"Extended2\", null, -1, -1),\n        types.get(1));\n    assertTypeEquals(registry.createNamedType(\"Extended3\", null, -1, -1),\n        types.get(2));\n  }\n",
        "begin_line": 1858,
        "end_line": 1874,
        "comment": "",
        "child_ranges": [
            "(line 1859,col 5)-(line 1863,col 38)",
            "(line 1864,col 5)-(line 1864,col 36)",
            "(line 1865,col 5)-(line 1865,col 36)",
            "(line 1866,col 5)-(line 1866,col 56)",
            "(line 1867,col 5)-(line 1867,col 65)",
            "(line 1868,col 5)-(line 1869,col 21)",
            "(line 1870,col 5)-(line 1871,col 22)",
            "(line 1872,col 5)-(line 1873,col 22)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadClassMultiExtends()",
        "snippet": "  public void testBadClassMultiExtends() throws Exception {\n    parse(\" * @extends {Extended1} \\n\" +\n        \" * @constructor \\n\" +\n        \" * @extends {Extended2} */\",\n        \"Bad type annotation. type annotation incompatible with other \" +\n        \"annotations\");\n  }\n",
        "begin_line": 1876,
        "end_line": 1882,
        "comment": "",
        "child_ranges": [
            "(line 1877,col 5)-(line 1881,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadExtendsWithNullable()",
        "snippet": "  public void testBadExtendsWithNullable() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n * @extends {Object?} */\",\n        \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(OBJECT_TYPE, jsdoc.getBaseType());\n  }\n",
        "begin_line": 1884,
        "end_line": 1889,
        "comment": "",
        "child_ranges": [
            "(line 1885,col 5)-(line 1886,col 51)",
            "(line 1887,col 5)-(line 1887,col 38)",
            "(line 1888,col 5)-(line 1888,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadImplementsWithNullable()",
        "snippet": "  public void testBadImplementsWithNullable() throws Exception {\n  JSDocInfo jsdoc = parse(\"@implements {Disposable?}\\n * @constructor */\",\n      \"Bad type annotation. expected closing }\");\n    assertTrue(jsdoc.isConstructor());\n    assertTypeEquals(registry.createNamedType(\"Disposable\", null, -1, -1),\n        jsdoc.getImplementedInterfaces().get(0));\n  }\n",
        "begin_line": 1891,
        "end_line": 1897,
        "comment": "",
        "child_ranges": [
            "(line 1892,col 3)-(line 1893,col 49)",
            "(line 1894,col 5)-(line 1894,col 38)",
            "(line 1895,col 5)-(line 1896,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor1()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@interface\\n@constructor*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isInterface());\n  }\n",
        "begin_line": 1899,
        "end_line": 1903,
        "comment": "",
        "child_ranges": [
            "(line 1900,col 5)-(line 1901,col 78)",
            "(line 1902,col 5)-(line 1902,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadTypeDefInterfaceAndConstructor2()",
        "snippet": "  public void testBadTypeDefInterfaceAndConstructor2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@constructor\\n@interface*/\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n    assertTrue(jsdoc.isConstructor());\n  }\n",
        "begin_line": 1905,
        "end_line": 1909,
        "comment": "",
        "child_ranges": [
            "(line 1906,col 5)-(line 1907,col 78)",
            "(line 1908,col 5)-(line 1908,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationParameter()",
        "snippet": "  public void testDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n  }\n",
        "begin_line": 1911,
        "end_line": 1918,
        "comment": "",
        "child_ranges": [
            "(line 1912,col 5)-(line 1913,col 75)",
            "(line 1915,col 5)-(line 1915,col 61)",
            "(line 1916,col 5)-(line 1917,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testMultilineDocumentationParameter()",
        "snippet": "  public void testMultilineDocumentationParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description\"\n                + \"\\n* on multiple \\n* lines.*/\", true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description on multiple lines.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n  }\n",
        "begin_line": 1920,
        "end_line": 1929,
        "comment": "",
        "child_ranges": [
            "(line 1921,col 5)-(line 1923,col 56)",
            "(line 1925,col 5)-(line 1925,col 61)",
            "(line 1926,col 5)-(line 1927,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter()",
        "snippet": "  public void testDocumentationMultipleParameter() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.*/\"\n                , true);\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number42\"));\n    assertEquals(\"This is a description.\",\n                 jsdoc.getDescriptionForParameter(\"number42\"));\n\n    assertTrue(jsdoc.hasDescriptionForParameter(\"number87\"));\n    assertEquals(\"This is another description.\",\n                 jsdoc.getDescriptionForParameter(\"number87\"));\n  }\n",
        "begin_line": 1931,
        "end_line": 1944,
        "comment": "",
        "child_ranges": [
            "(line 1932,col 5)-(line 1935,col 24)",
            "(line 1937,col 5)-(line 1937,col 61)",
            "(line 1938,col 5)-(line 1939,col 63)",
            "(line 1941,col 5)-(line 1941,col 61)",
            "(line 1942,col 5)-(line 1943,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testDocumentationMultipleParameter2()",
        "snippet": "  public void testDocumentationMultipleParameter2() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {number} delta = 0 results in a redraw\\n\" +\n                \"  != 0 ..... */\", true);\n    assertTrue(jsdoc.hasDescriptionForParameter(\"delta\"));\n    assertEquals(\"= 0 results in a redraw != 0 .....\",\n                 jsdoc.getDescriptionForParameter(\"delta\"));\n  }\n",
        "begin_line": 1946,
        "end_line": 1953,
        "comment": "",
        "child_ranges": [
            "(line 1947,col 5)-(line 1949,col 41)",
            "(line 1950,col 5)-(line 1950,col 58)",
            "(line 1951,col 5)-(line 1952,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthors()",
        "snippet": "  public void testAuthors() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@param {Number} number42 This is a description.\"\n                + \"\\n* @param {Integer} number87 This is another description.\"\n                + \"\\n* @author a@google.com (A Person)\"\n                + \"\\n* @author b@google.com (B Person)\"\n                + \"\\n* @author c@google.com (C Person)*/\"\n                , true);\n\n    Collection<String> authors = jsdoc.getAuthors();\n\n    assertTrue(authors != null);\n    assertTrue(authors.size() == 3);\n\n    assertContains(authors, \"a@google.com (A Person)\");\n    assertContains(authors, \"b@google.com (B Person)\");\n    assertContains(authors, \"c@google.com (C Person)\");\n  }\n",
        "begin_line": 1956,
        "end_line": 1973,
        "comment": "",
        "child_ranges": [
            "(line 1957,col 5)-(line 1963,col 24)",
            "(line 1965,col 5)-(line 1965,col 52)",
            "(line 1967,col 5)-(line 1967,col 32)",
            "(line 1968,col 5)-(line 1968,col 36)",
            "(line 1970,col 5)-(line 1970,col 55)",
            "(line 1971,col 5)-(line 1971,col 55)",
            "(line 1972,col 5)-(line 1972,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress1()",
        "snippet": "  public void testSuppress1() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getSuppressions());\n  }\n",
        "begin_line": 1975,
        "end_line": 1978,
        "comment": "",
        "child_ranges": [
            "(line 1976,col 5)-(line 1976,col 47)",
            "(line 1977,col 5)-(line 1977,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSuppress2()",
        "snippet": "  public void testSuppress2() throws Exception {\n    JSDocInfo info = parse(\"@suppress {x|y|x|z} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\", \"z\"), info.getSuppressions());\n  }\n",
        "begin_line": 1980,
        "end_line": 1983,
        "comment": "",
        "child_ranges": [
            "(line 1981,col 5)-(line 1981,col 53)",
            "(line 1982,col 5)-(line 1982,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress1()",
        "snippet": "  public void testBadSuppress1() throws Exception {\n    parse(\"@suppress {} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1985,
        "end_line": 1987,
        "comment": "",
        "child_ranges": [
            "(line 1986,col 5)-(line 1986,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress2()",
        "snippet": "  public void testBadSuppress2() throws Exception {\n    parse(\"@suppress {x|} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1989,
        "end_line": 1991,
        "comment": "",
        "child_ranges": [
            "(line 1990,col 5)-(line 1990,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress3()",
        "snippet": "  public void testBadSuppress3() throws Exception {\n    parse(\"@suppress {|x} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1993,
        "end_line": 1995,
        "comment": "",
        "child_ranges": [
            "(line 1994,col 5)-(line 1994,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress4()",
        "snippet": "  public void testBadSuppress4() throws Exception {\n    parse(\"@suppress {x|y */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 1997,
        "end_line": 1999,
        "comment": "",
        "child_ranges": [
            "(line 1998,col 5)-(line 1998,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress5()",
        "snippet": "  public void testBadSuppress5() throws Exception {\n    parse(\"@suppress {x,y} */\", \"malformed @suppress tag\");\n  }\n",
        "begin_line": 2001,
        "end_line": 2003,
        "comment": "",
        "child_ranges": [
            "(line 2002,col 5)-(line 2002,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress6()",
        "snippet": "  public void testBadSuppress6() throws Exception {\n    parse(\"@suppress {x} \\n * @suppress {y} */\", \"duplicate @suppress tag\");\n  }\n",
        "begin_line": 2005,
        "end_line": 2007,
        "comment": "",
        "child_ranges": [
            "(line 2006,col 5)-(line 2006,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadSuppress7()",
        "snippet": "  public void testBadSuppress7() throws Exception {\n    parse(\"@suppress {impossible} */\",\n          \"unknown @suppress parameter: impossible\");\n  }\n",
        "begin_line": 2009,
        "end_line": 2012,
        "comment": "",
        "child_ranges": [
            "(line 2010,col 5)-(line 2011,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies1()",
        "snippet": "  public void testModifies1() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this} */\");\n    assertEquals(Sets.newHashSet(\"this\"), info.getModifies());\n  }\n",
        "begin_line": 2014,
        "end_line": 2017,
        "comment": "",
        "child_ranges": [
            "(line 2015,col 5)-(line 2015,col 50)",
            "(line 2016,col 5)-(line 2016,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies2()",
        "snippet": "  public void testModifies2() throws Exception {\n    JSDocInfo info = parse(\"@modifies {arguments} */\");\n    assertEquals(Sets.newHashSet(\"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 2019,
        "end_line": 2022,
        "comment": "",
        "child_ranges": [
            "(line 2020,col 5)-(line 2020,col 55)",
            "(line 2021,col 5)-(line 2021,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies3()",
        "snippet": "  public void testModifies3() throws Exception {\n    JSDocInfo info = parse(\"@modifies {this|arguments} */\");\n    assertEquals(Sets.newHashSet(\"this\", \"arguments\"), info.getModifies());\n  }\n",
        "begin_line": 2024,
        "end_line": 2027,
        "comment": "",
        "child_ranges": [
            "(line 2025,col 5)-(line 2025,col 60)",
            "(line 2026,col 5)-(line 2026,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies4()",
        "snippet": "  public void testModifies4() throws Exception {\n    JSDocInfo info = parse(\"@param {*} x\\n * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 2029,
        "end_line": 2032,
        "comment": "",
        "child_ranges": [
            "(line 2030,col 5)-(line 2030,col 64)",
            "(line 2031,col 5)-(line 2031,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies5()",
        "snippet": "  public void testModifies5() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x} */\");\n    assertEquals(Sets.newHashSet(\"x\"), info.getModifies());\n  }\n",
        "begin_line": 2034,
        "end_line": 2040,
        "comment": "",
        "child_ranges": [
            "(line 2035,col 5)-(line 2038,col 33)",
            "(line 2039,col 5)-(line 2039,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testModifies6()",
        "snippet": "  public void testModifies6() throws Exception {\n    JSDocInfo info = parse(\n        \"@param {*} x\\n\"\n        + \" * @param {*} y\\n\"\n        + \" * @modifies {x|y} */\");\n    assertEquals(Sets.newHashSet(\"x\", \"y\"), info.getModifies());\n  }\n",
        "begin_line": 2042,
        "end_line": 2048,
        "comment": "",
        "child_ranges": [
            "(line 2043,col 5)-(line 2046,col 35)",
            "(line 2047,col 5)-(line 2047,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies1()",
        "snippet": "  public void testBadModifies1() throws Exception {\n    parse(\"@modifies {} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2051,
        "end_line": 2053,
        "comment": "",
        "child_ranges": [
            "(line 2052,col 5)-(line 2052,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies2()",
        "snippet": "  public void testBadModifies2() throws Exception {\n    parse(\"@modifies {this|} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2055,
        "end_line": 2057,
        "comment": "",
        "child_ranges": [
            "(line 2056,col 5)-(line 2056,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies3()",
        "snippet": "  public void testBadModifies3() throws Exception {\n    parse(\"@modifies {|this} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2059,
        "end_line": 2061,
        "comment": "",
        "child_ranges": [
            "(line 2060,col 5)-(line 2060,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies4()",
        "snippet": "  public void testBadModifies4() throws Exception {\n    parse(\"@modifies {this|arguments */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2063,
        "end_line": 2065,
        "comment": "",
        "child_ranges": [
            "(line 2064,col 5)-(line 2064,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies5()",
        "snippet": "  public void testBadModifies5() throws Exception {\n    parse(\"@modifies {this,arguments} */\", \"malformed @modifies tag\");\n  }\n",
        "begin_line": 2067,
        "end_line": 2069,
        "comment": "",
        "child_ranges": [
            "(line 2068,col 5)-(line 2068,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies6()",
        "snippet": "  public void testBadModifies6() throws Exception {\n    parse(\"@modifies {this} \\n * @modifies {this} */\",\n        \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2071,
        "end_line": 2074,
        "comment": "",
        "child_ranges": [
            "(line 2072,col 5)-(line 2073,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies7()",
        "snippet": "  public void testBadModifies7() throws Exception {\n    parse(\"@modifies {impossible} */\",\n          \"unknown @modifies parameter: impossible\");\n  }\n",
        "begin_line": 2076,
        "end_line": 2079,
        "comment": "",
        "child_ranges": [
            "(line 2077,col 5)-(line 2078,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies8()",
        "snippet": "  public void testBadModifies8() throws Exception {\n    parse(\"@modifies {this}\\n\"\n        + \"@nosideeffects */\", \"conflicting @nosideeffects tag\");\n  }\n",
        "begin_line": 2081,
        "end_line": 2084,
        "comment": "",
        "child_ranges": [
            "(line 2082,col 5)-(line 2083,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testBadModifies9()",
        "snippet": "  public void testBadModifies9() throws Exception {\n    parse(\"@nosideeffects\\n\"\n        + \"@modifies {this} */\", \"conflicting @modifies tag\");\n  }\n",
        "begin_line": 2086,
        "end_line": 2089,
        "comment": "",
        "child_ranges": [
            "(line 2087,col 5)-(line 2088,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewSingleLine()",
        "snippet": "  public void testFileOverviewSingleLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Hi mom! */\");\n    assertEquals(\"Hi mom!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2097,
        "end_line": 2100,
        "comment": "",
        "child_ranges": [
            "(line 2098,col 5)-(line 2098,col 68)",
            "(line 2099,col 5)-(line 2099,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewMultiLine()",
        "snippet": "  public void testFileOverviewMultiLine() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\"@fileoverview Pie is \\n * good! */\");\n    assertEquals(\"Pie is\\n good!\", jsdoc.getFileOverview());\n  }\n",
        "begin_line": 2102,
        "end_line": 2105,
        "comment": "",
        "child_ranges": [
            "(line 2103,col 5)-(line 2103,col 78)",
            "(line 2104,col 5)-(line 2104,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testFileOverviewDuplicate()",
        "snippet": "  public void testFileOverviewDuplicate() throws Exception {\n    JSDocInfo jsdoc = parseFileOverview(\n        \"@fileoverview Pie \\n * @fileoverview Cake */\",\n        \"extra @fileoverview tag\");\n  }\n",
        "begin_line": 2107,
        "end_line": 2111,
        "comment": "",
        "child_ranges": [
            "(line 2108,col 5)-(line 2110,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testReferences()",
        "snippet": "  public void testReferences() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@see A cool place!\"\n                + \"\\n* @see The world.\"\n                + \"\\n* @see SomeClass#SomeMember\"\n                + \"\\n* @see A boring test case*/\"\n                , true);\n\n    Collection<String> references = jsdoc.getReferences();\n\n    assertTrue(references != null);\n    assertTrue(references.size() == 4);\n\n    assertContains(references, \"A cool place!\");\n    assertContains(references, \"The world.\");\n    assertContains(references, \"SomeClass#SomeMember\");\n    assertContains(references, \"A boring test case\");\n  }\n",
        "begin_line": 2113,
        "end_line": 2130,
        "comment": "",
        "child_ranges": [
            "(line 2114,col 5)-(line 2119,col 24)",
            "(line 2121,col 5)-(line 2121,col 58)",
            "(line 2123,col 5)-(line 2123,col 35)",
            "(line 2124,col 5)-(line 2124,col 39)",
            "(line 2126,col 5)-(line 2126,col 48)",
            "(line 2127,col 5)-(line 2127,col 45)",
            "(line 2128,col 5)-(line 2128,col 55)",
            "(line 2129,col 5)-(line 2129,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTags()",
        "snippet": "  public void testSingleTags() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@version Some old version\"\n                + \"\\n* @deprecated In favor of the new one!\"\n                + \"\\n* @return {SomeType} The most important object :-)*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2132,
        "end_line": 2143,
        "comment": "",
        "child_ranges": [
            "(line 2133,col 5)-(line 2137,col 24)",
            "(line 2139,col 5)-(line 2139,col 37)",
            "(line 2140,col 5)-(line 2140,col 75)",
            "(line 2141,col 5)-(line 2141,col 57)",
            "(line 2142,col 5)-(line 2142,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSingleTagsReordered()",
        "snippet": "  public void testSingleTagsReordered() throws Exception {\n    JSDocInfo jsdoc\n        = parse(\"@deprecated In favor of the new one!\"\n                + \"\\n * @return {SomeType} The most important object :-)\"\n                + \"\\n * @version Some old version*/\"\n                , true);\n\n    assertTrue(jsdoc.isDeprecated());\n    assertEquals(\"In favor of the new one!\", jsdoc.getDeprecationReason());\n    assertEquals(\"Some old version\", jsdoc.getVersion());\n    assertEquals(\"The most important object :-)\", jsdoc.getReturnDescription());\n  }\n",
        "begin_line": 2145,
        "end_line": 2156,
        "comment": "",
        "child_ranges": [
            "(line 2146,col 5)-(line 2150,col 24)",
            "(line 2152,col 5)-(line 2152,col 37)",
            "(line 2153,col 5)-(line 2153,col 75)",
            "(line 2154,col 5)-(line 2154,col 57)",
            "(line 2155,col 5)-(line 2155,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionDuplication()",
        "snippet": "  public void testVersionDuplication() throws Exception {\n    parse(\"* @version Some old version\"\n          + \"\\n* @version Another version*/\", true,\n          \"conflicting @version tag\");\n  }\n",
        "begin_line": 2158,
        "end_line": 2162,
        "comment": "",
        "child_ranges": [
            "(line 2159,col 5)-(line 2161,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testVersionMissing()",
        "snippet": "  public void testVersionMissing() throws Exception {\n    parse(\"* @version */\", true,\n          \"@version tag missing version information\");\n  }\n",
        "begin_line": 2164,
        "end_line": 2167,
        "comment": "",
        "child_ranges": [
            "(line 2165,col 5)-(line 2166,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testAuthorMissing()",
        "snippet": "  public void testAuthorMissing() throws Exception {\n    parse(\"* @author */\", true,\n          \"@author tag missing author\");\n  }\n",
        "begin_line": 2169,
        "end_line": 2172,
        "comment": "",
        "child_ranges": [
            "(line 2170,col 5)-(line 2171,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSeeMissing()",
        "snippet": "  public void testSeeMissing() throws Exception {\n    parse(\"* @see */\", true,\n          \"@see tag missing description\");\n  }\n",
        "begin_line": 2174,
        "end_line": 2177,
        "comment": "",
        "child_ranges": [
            "(line 2175,col 5)-(line 2176,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testSourceName()",
        "snippet": "  public void testSourceName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@deprecated */\", true);\n    assertEquals(\"testcode\", jsdoc.getAssociatedNode().getSourceFileName());\n  }\n",
        "begin_line": 2179,
        "end_line": 2182,
        "comment": "",
        "child_ranges": [
            "(line 2180,col 5)-(line 2180,col 52)",
            "(line 2181,col 5)-(line 2181,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment()",
        "snippet": "  public void testParseBlockComment() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2184,
        "end_line": 2195,
        "comment": "",
        "child_ranges": [
            "(line 2185,col 5)-(line 2187,col 67)",
            "(line 2189,col 5)-(line 2190,col 46)",
            "(line 2192,col 5)-(line 2194,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment2()",
        "snippet": "  public void testParseBlockComment2() throws Exception {\n    JSDocInfo jsdoc = parse(\"this is a nice comment\\n \"\n                            + \"* that is *** multiline \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"this is a nice comment\\nthat is *** multiline\",\n                 jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2197,
        "end_line": 2208,
        "comment": "",
        "child_ranges": [
            "(line 2198,col 5)-(line 2200,col 67)",
            "(line 2202,col 5)-(line 2203,col 46)",
            "(line 2205,col 5)-(line 2207,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseBlockComment3()",
        "snippet": "  public void testParseBlockComment3() throws Exception {\n    JSDocInfo jsdoc = parse(\"\\n \"\n                            + \"* hello world \\n\"\n                            + \"* @author abc@google.com */\", true);\n\n    assertEquals(\"hello world\", jsdoc.getBlockDescription());\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 2, 2),\n        \"abc@google.com\", 9, 2, 23);\n  }\n",
        "begin_line": 2210,
        "end_line": 2220,
        "comment": "",
        "child_ranges": [
            "(line 2211,col 5)-(line 2213,col 67)",
            "(line 2215,col 5)-(line 2215,col 61)",
            "(line 2217,col 5)-(line 2219,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers1()",
        "snippet": "  public void testParseWithMarkers1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"author\", 0, 0),\n        \"abc@google.com\", 7, 0, 21);\n  }\n",
        "begin_line": 2222,
        "end_line": 2228,
        "comment": "",
        "child_ranges": [
            "(line 2223,col 5)-(line 2223,col 63)",
            "(line 2225,col 5)-(line 2227,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers2()",
        "snippet": "  public void testParseWithMarkers2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {Foo} somename abc@google.com */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"abc@google.com\", 21, 0, 37);\n  }\n",
        "begin_line": 2230,
        "end_line": 2236,
        "comment": "",
        "child_ranges": [
            "(line 2231,col 5)-(line 2231,col 77)",
            "(line 2233,col 5)-(line 2235,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers3()",
        "snippet": "  public void testParseWithMarkers3() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return {Foo} some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    JSDocInfo.Marker returnDoc =\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0);\n    assertDocumentationInMarker(returnDoc,\n        \"some long multiline description\", 13, 2, 15);\n    assertEquals(8, returnDoc.getType().getPositionOnStartLine());\n    assertEquals(12, returnDoc.getType().getPositionOnEndLine());\n  }\n",
        "begin_line": 2238,
        "end_line": 2249,
        "comment": "",
        "child_ranges": [
            "(line 2239,col 5)-(line 2241,col 44)",
            "(line 2243,col 5)-(line 2244,col 54)",
            "(line 2245,col 5)-(line 2246,col 54)",
            "(line 2247,col 5)-(line 2247,col 66)",
            "(line 2248,col 5)-(line 2248,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers4()",
        "snippet": "  public void testParseWithMarkers4() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@author foobar \\n * @param {Foo} somename abc@google.com */\",\n              true);\n\n    assertAnnotationMarker(jsdoc, \"author\", 0, 0);\n    assertAnnotationMarker(jsdoc, \"param\", 1, 3);\n  }\n",
        "begin_line": 2251,
        "end_line": 2258,
        "comment": "",
        "child_ranges": [
            "(line 2252,col 5)-(line 2254,col 20)",
            "(line 2256,col 5)-(line 2256,col 50)",
            "(line 2257,col 5)-(line 2257,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers5()",
        "snippet": "  public void testParseWithMarkers5() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@return some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"return\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2260,
        "end_line": 2268,
        "comment": "",
        "child_ranges": [
            "(line 2261,col 5)-(line 2263,col 44)",
            "(line 2265,col 5)-(line 2267,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkers6()",
        "snippet": "  public void testParseWithMarkers6() throws Exception {\n    JSDocInfo jsdoc =\n        parse(\"@param x some long \\n * multiline\" +\n              \" \\n * description */\", true);\n\n    assertDocumentationInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"some long multiline description\", 8, 2, 15);\n  }\n",
        "begin_line": 2270,
        "end_line": 2278,
        "comment": "",
        "child_ranges": [
            "(line 2271,col 5)-(line 2273,col 44)",
            "(line 2275,col 5)-(line 2277,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames1()",
        "snippet": "  public void testParseWithMarkerNames1() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription */\", true);\n\n    assertNameInMarker(\n        assertAnnotationMarker(jsdoc, \"param\", 0, 0),\n        \"name\", 0, 18);\n  }\n",
        "begin_line": 2280,
        "end_line": 2286,
        "comment": "",
        "child_ranges": [
            "(line 2281,col 5)-(line 2281,col 79)",
            "(line 2283,col 5)-(line 2285,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames2()",
        "snippet": "  public void testParseWithMarkerNames2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@param {SomeType} name somedescription \\n\" +\n                            \"* @param {AnotherType} anothername des */\", true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 0, 0, 0),\n            \"name\", 0, 18),\n        \"SomeType\", 0, 7, 0, 16, true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 1, 2, 1),\n            \"anothername\", 1, 23),\n        \"AnotherType\", 1, 9, 1, 21, true);\n  }\n",
        "begin_line": 2288,
        "end_line": 2303,
        "comment": "",
        "child_ranges": [
            "(line 2289,col 5)-(line 2290,col 79)",
            "(line 2292,col 5)-(line 2296,col 39)",
            "(line 2298,col 5)-(line 2302,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerNames3()",
        "snippet": "  public void testParseWithMarkerNames3() throws Exception {\n    JSDocInfo jsdoc = parse(\n        \"@param {Some.Long.Type.\\n *  Name} name somedescription */\", true);\n\n    assertTypeInMarker(\n        assertNameInMarker(\n            assertAnnotationMarker(jsdoc, \"param\", 0, 0, 0),\n            \"name\", 1, 10),\n        \"Some.Long.Type.Name\", 0, 7, 1, 8, true);\n  }\n",
        "begin_line": 2305,
        "end_line": 2314,
        "comment": "",
        "child_ranges": [
            "(line 2306,col 5)-(line 2307,col 76)",
            "(line 2309,col 5)-(line 2313,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithoutMarkerName()",
        "snippet": "  public void testParseWithoutMarkerName() throws Exception {\n    JSDocInfo jsdoc = parse(\"@author helloworld*/\", true);\n    assertNull(assertAnnotationMarker(jsdoc, \"author\", 0, 0).getName());\n  }\n",
        "begin_line": 2316,
        "end_line": 2319,
        "comment": "",
        "child_ranges": [
            "(line 2317,col 5)-(line 2317,col 58)",
            "(line 2318,col 5)-(line 2318,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType()",
        "snippet": "  public void testParseWithMarkerType() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends {FooBar}*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 0, 9, 0, 16, true);\n  }\n",
        "begin_line": 2321,
        "end_line": 2327,
        "comment": "",
        "child_ranges": [
            "(line 2322,col 5)-(line 2322,col 57)",
            "(line 2324,col 5)-(line 2326,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParseWithMarkerType2()",
        "snippet": "  public void testParseWithMarkerType2() throws Exception {\n    JSDocInfo jsdoc = parse(\"@extends FooBar*/\", true);\n\n    assertTypeInMarker(\n        assertAnnotationMarker(jsdoc, \"extends\", 0, 0),\n        \"FooBar\", 0, 9, 0, 15, false);\n  }\n",
        "begin_line": 2329,
        "end_line": 2335,
        "comment": "",
        "child_ranges": [
            "(line 2330,col 5)-(line 2330,col 55)",
            "(line 2332,col 5)-(line 2334,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict1()",
        "snippet": "  public void testTypeTagConflict1() throws Exception {\n    parse(\"@constructor \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2337,
        "end_line": 2341,
        "comment": "",
        "child_ranges": [
            "(line 2338,col 5)-(line 2340,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict2()",
        "snippet": "  public void testTypeTagConflict2() throws Exception {\n    parse(\"@interface \\n * @interface */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2343,
        "end_line": 2347,
        "comment": "",
        "child_ranges": [
            "(line 2344,col 5)-(line 2346,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict3()",
        "snippet": "  public void testTypeTagConflict3() throws Exception {\n    parse(\"@constructor \\n * @interface */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2349,
        "end_line": 2352,
        "comment": "",
        "child_ranges": [
            "(line 2350,col 5)-(line 2351,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict4()",
        "snippet": "  public void testTypeTagConflict4() throws Exception {\n    parse(\"@interface \\n * @constructor */\",\n        \"Bad type annotation. cannot be both an interface and a constructor\");\n  }\n",
        "begin_line": 2354,
        "end_line": 2357,
        "comment": "",
        "child_ranges": [
            "(line 2355,col 5)-(line 2356,col 78)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict5()",
        "snippet": "  public void testTypeTagConflict5() throws Exception {\n    parse(\"@interface \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2359,
        "end_line": 2363,
        "comment": "",
        "child_ranges": [
            "(line 2360,col 5)-(line 2362,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict6()",
        "snippet": "  public void testTypeTagConflict6() throws Exception {\n    parse(\"@typedef {string} \\n * @type {string} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2365,
        "end_line": 2369,
        "comment": "",
        "child_ranges": [
            "(line 2366,col 5)-(line 2368,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict7()",
        "snippet": "  public void testTypeTagConflict7() throws Exception {\n    parse(\"@typedef {string} \\n * @constructor */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2371,
        "end_line": 2375,
        "comment": "",
        "child_ranges": [
            "(line 2372,col 5)-(line 2374,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict8()",
        "snippet": "  public void testTypeTagConflict8() throws Exception {\n    parse(\"@typedef {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2377,
        "end_line": 2381,
        "comment": "",
        "child_ranges": [
            "(line 2378,col 5)-(line 2380,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict9()",
        "snippet": "  public void testTypeTagConflict9() throws Exception {\n    parse(\"@enum {string} \\n * @return {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2383,
        "end_line": 2387,
        "comment": "",
        "child_ranges": [
            "(line 2384,col 5)-(line 2386,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict10()",
        "snippet": "  public void testTypeTagConflict10() throws Exception {\n    parse(\"@this {Object} \\n * @enum {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2389,
        "end_line": 2393,
        "comment": "",
        "child_ranges": [
            "(line 2390,col 5)-(line 2392,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict11()",
        "snippet": "  public void testTypeTagConflict11() throws Exception {\n    parse(\"@param {Object} x \\n * @type {boolean} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2395,
        "end_line": 2399,
        "comment": "",
        "child_ranges": [
            "(line 2396,col 5)-(line 2398,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict12()",
        "snippet": "  public void testTypeTagConflict12() throws Exception {\n    parse(\"@typedef {boolean} \\n * @param {Object} x */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2401,
        "end_line": 2405,
        "comment": "",
        "child_ranges": [
            "(line 2402,col 5)-(line 2404,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict13()",
        "snippet": "  public void testTypeTagConflict13() throws Exception {\n    parse(\"@typedef {boolean} \\n * @extends {Object} */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2407,
        "end_line": 2411,
        "comment": "",
        "child_ranges": [
            "(line 2408,col 5)-(line 2410,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testTypeTagConflict14()",
        "snippet": "  public void testTypeTagConflict14() throws Exception {\n    parse(\"@return x \\n * @return y */\",\n        \"Bad type annotation. \" +\n        \"type annotation incompatible with other annotations\");\n  }\n",
        "begin_line": 2413,
        "end_line": 2417,
        "comment": "",
        "child_ranges": [
            "(line 2414,col 5)-(line 2416,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateTypeNameMissing()",
        "snippet": "  public void testParserWithTemplateTypeNameMissing() {\n    parse(\"@template */\",\n        \"Bad type annotation. @template tag missing type name\");\n  }\n",
        "begin_line": 2419,
        "end_line": 2422,
        "comment": "",
        "child_ranges": [
            "(line 2420,col 5)-(line 2421,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testParserWithTemplateDuplicated()",
        "snippet": "  public void testParserWithTemplateDuplicated() {\n    parse(\"@template T\\n@template V */\",\n        \"Bad type annotation. @template tag at most once\");\n  }\n",
        "begin_line": 2424,
        "end_line": 2427,
        "comment": "",
        "child_ranges": [
            "(line 2425,col 5)-(line 2426,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedNewAnnotations()",
        "snippet": "  public void testWhitelistedNewAnnotations() {\n    parse(\"@foobar */\",\n        \"illegal use of unknown JSDoc tag \\\"foobar\\\"; ignoring it\");\n    extraAnnotations.add(\"foobar\");\n    parse(\"@foobar */\");\n  }\n",
        "begin_line": 2429,
        "end_line": 2434,
        "comment": "",
        "child_ranges": [
            "(line 2430,col 5)-(line 2431,col 68)",
            "(line 2432,col 5)-(line 2432,col 35)",
            "(line 2433,col 5)-(line 2433,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedConflictingAnnotation()",
        "snippet": "  public void testWhitelistedConflictingAnnotation() {\n    extraAnnotations.add(\"param\");\n    JSDocInfo info = parse(\"@param {number} index */\");\n    assertTypeEquals(NUMBER_TYPE, info.getParameterType(\"index\"));\n  }\n",
        "begin_line": 2436,
        "end_line": 2440,
        "comment": "",
        "child_ranges": [
            "(line 2437,col 5)-(line 2437,col 34)",
            "(line 2438,col 5)-(line 2438,col 55)",
            "(line 2439,col 5)-(line 2439,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testNonIdentifierAnnotation()",
        "snippet": "  public void testNonIdentifierAnnotation() {\n    // Try to whitelist an annotation that is not a valid JS identifier.\n    // It should not work.\n    extraAnnotations.add(\"123\");\n    parse(\"@123 */\", \"illegal use of unknown JSDoc tag \\\"\\\"; ignoring it\");\n  }\n",
        "begin_line": 2442,
        "end_line": 2447,
        "comment": "",
        "child_ranges": [
            "(line 2445,col 5)-(line 2445,col 32)",
            "(line 2446,col 5)-(line 2446,col 75)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax1()",
        "snippet": "  public void testUnsupportedJsDocSyntax1() {\n    JSDocInfo info =\n        parse(\"@param {string} [accessLevel=\\\"author\\\"] The user level */\",\n            true);\n    assertEquals(1, info.getParameterCount());\n    assertTypeEquals(\n        registry.createOptionalType(STRING_TYPE),\n        info.getParameterType(\"accessLevel\"));\n    assertEquals(\"The user level\",\n        info.getDescriptionForParameter(\"accessLevel\"));\n  }\n",
        "begin_line": 2449,
        "end_line": 2459,
        "comment": "",
        "child_ranges": [
            "(line 2450,col 5)-(line 2452,col 18)",
            "(line 2453,col 5)-(line 2453,col 46)",
            "(line 2454,col 5)-(line 2456,col 46)",
            "(line 2457,col 5)-(line 2458,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testUnsupportedJsDocSyntax2()",
        "snippet": "  public void testUnsupportedJsDocSyntax2() {\n    JSDocInfo info =\n        parse(\"@param userInfo The user info. \\n\" +\n              \" * @param userInfo.name The name of the user */\", true);\n    assertEquals(1, info.getParameterCount());\n    assertEquals(\"The user info.\",\n        info.getDescriptionForParameter(\"userInfo\"));\n  }\n",
        "begin_line": 2461,
        "end_line": 2468,
        "comment": "",
        "child_ranges": [
            "(line 2462,col 5)-(line 2464,col 71)",
            "(line 2465,col 5)-(line 2465,col 46)",
            "(line 2466,col 5)-(line 2467,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testWhitelistedAnnotations()",
        "snippet": "  public void testWhitelistedAnnotations() {\n    parse(\n      \"* @addon \\n\" +\n      \"* @augments \\n\" +\n      \"* @base \\n\" +\n      \"* @borrows \\n\" +\n      \"* @bug \\n\" +\n      \"* @class \\n\" +\n      \"* @config \\n\" +\n      \"* @constructs \\n\" +\n      \"* @default \\n\" +\n      \"* @description \\n\" +\n      \"* @event \\n\" +\n      \"* @example \\n\" +\n      \"* @exception \\n\" +\n      \"* @exec \\n\" +\n      \"* @externs \\n\" +\n      \"* @field \\n\" +\n      \"* @function \\n\" +\n      \"* @id \\n\" +\n      \"* @ignore \\n\" +\n      \"* @inner \\n\" +\n      \"* @lends {string} \\n\" +\n      \"* @link \\n\" +\n      \"* @member \\n\" +\n      \"* @memberOf \\n\" +\n      \"* @modName \\n\" +\n      \"* @mods \\n\" +\n      \"* @name \\n\" +\n      \"* @namespace \\n\" +\n      \"* @nocompile \\n\" +\n      \"* @property \\n\" +\n      \"* @requires \\n\" +\n      \"* @since \\n\" +\n      \"* @static \\n\" +\n      \"* @supported */\");\n  }\n",
        "begin_line": 2470,
        "end_line": 2506,
        "comment": "",
        "child_ranges": [
            "(line 2471,col 5)-(line 2505,col 25)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.testGetOriginalCommentString()",
        "snippet": "  public void testGetOriginalCommentString() throws Exception {\n    String comment = \"* @desc This is a comment */\";\n    JSDocInfo info = parse(comment);\n    assertNull(info.getOriginalCommentString());\n    info = parse(comment, true /* parseDocumentation */);\n    assertEquals(comment, info.getOriginalCommentString());\n  }\n",
        "begin_line": 2508,
        "end_line": 2514,
        "comment": "",
        "child_ranges": [
            "(line 2509,col 5)-(line 2509,col 52)",
            "(line 2510,col 5)-(line 2510,col 36)",
            "(line 2511,col 5)-(line 2511,col 48)",
            "(line 2512,col 5)-(line 2512,col 57)",
            "(line 2513,col 5)-(line 2513,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertDocumentationInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,\n                                                       String description,\n                                                       int startCharno,\n                                                       int endLineno,\n                                                       int endCharno) {\n    assertTrue(marker.getDescription() != null);\n    assertEquals(description, marker.getDescription().getItem());\n\n    // Match positional information.\n    assertEquals(marker.getAnnotation().getStartLine(),\n                 marker.getDescription().getStartLine());\n    assertEquals(startCharno, marker.getDescription().getPositionOnStartLine());\n    assertEquals(endLineno, marker.getDescription().getEndLine());\n    assertEquals(endCharno, marker.getDescription().getPositionOnEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2525,
        "end_line": 2541,
        "comment": "\n   * Asserts that a documentation field exists on the given marker.\n   *\n   * @param description The text of the documentation field expected.\n   * @param startCharno The starting character of the text.\n   * @param endLineno The ending line of the text.\n   * @param endCharno The ending character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2530,col 5)-(line 2530,col 48)",
            "(line 2531,col 5)-(line 2531,col 65)",
            "(line 2534,col 5)-(line 2535,col 57)",
            "(line 2536,col 5)-(line 2536,col 80)",
            "(line 2537,col 5)-(line 2537,col 66)",
            "(line 2538,col 5)-(line 2538,col 76)",
            "(line 2540,col 5)-(line 2540,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertTypeInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int, int, int, boolean)",
        "snippet": "  private JSDocInfo.Marker assertTypeInMarker(\n      JSDocInfo.Marker marker, String typeName,\n      int startLineno, int startCharno, int endLineno, int endCharno,\n      boolean hasBrackets) {\n\n    assertTrue(marker.getType() != null);\n    assertTrue(marker.getType().getItem().isString());\n\n    // Match the name and brackets information.\n    String foundName = marker.getType().getItem().getString();\n\n    assertEquals(typeName, foundName);\n    assertEquals(hasBrackets, marker.getType().hasBrackets());\n\n    // Match position information.\n    assertEquals(startCharno, marker.getType().getPositionOnStartLine());\n    assertEquals(endCharno, marker.getType().getPositionOnEndLine());\n    assertEquals(startLineno, marker.getType().getStartLine());\n    assertEquals(endLineno, marker.getType().getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2552,
        "end_line": 2573,
        "comment": "\n   * Asserts that a type field exists on the given marker.\n   *\n   * @param typeName The name of the type expected in the type field.\n   * @param startCharno The starting character of the type declaration.\n   * @param hasBrackets Whether the type in the type field is expected\n   *     to have brackets.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2557,col 5)-(line 2557,col 41)",
            "(line 2558,col 5)-(line 2558,col 54)",
            "(line 2561,col 5)-(line 2561,col 62)",
            "(line 2563,col 5)-(line 2563,col 38)",
            "(line 2564,col 5)-(line 2564,col 62)",
            "(line 2567,col 5)-(line 2567,col 73)",
            "(line 2568,col 5)-(line 2568,col 69)",
            "(line 2569,col 5)-(line 2569,col 63)",
            "(line 2570,col 5)-(line 2570,col 59)",
            "(line 2572,col 5)-(line 2572,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertNameInMarker(com.google.javascript.rhino.JSDocInfo.Marker, java.lang.String, int, int)",
        "snippet": "  private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,\n      String name, int startLine, int startCharno) {\n    assertTrue(marker.getName() != null);\n    assertEquals(name, marker.getName().getItem());\n\n    assertEquals(startCharno, marker.getName().getPositionOnStartLine());\n    assertEquals(startCharno + name.length(),\n                 marker.getName().getPositionOnEndLine());\n\n    assertEquals(startLine, marker.getName().getStartLine());\n    assertEquals(startLine, marker.getName().getEndLine());\n\n    return marker;\n  }\n",
        "begin_line": 2582,
        "end_line": 2595,
        "comment": "\n   * Asserts that a name field exists on the given marker.\n   *\n   * @param name The name expected in the name field.\n   * @param startCharno The starting character of the text.\n   * @return The marker, for chaining purposes.\n   ",
        "child_ranges": [
            "(line 2584,col 5)-(line 2584,col 41)",
            "(line 2585,col 5)-(line 2585,col 51)",
            "(line 2587,col 5)-(line 2587,col 73)",
            "(line 2588,col 5)-(line 2589,col 58)",
            "(line 2591,col 5)-(line 2591,col 61)",
            "(line 2592,col 5)-(line 2592,col 59)",
            "(line 2594,col 5)-(line 2594,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno) {\n    return assertAnnotationMarker(jsdoc, annotationName, startLineno,\n                                  startCharno, 0);\n  }\n",
        "begin_line": 2608,
        "end_line": 2614,
        "comment": "\n   * Asserts that an annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 2612,col 5)-(line 2613,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertAnnotationMarker(com.google.javascript.rhino.JSDocInfo, java.lang.String, int, int, int)",
        "snippet": "  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,\n                                                  String annotationName,\n                                                  int startLineno,\n                                                  int startCharno,\n                                                  int index) {\n\n    Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();\n\n    assertTrue(markers.size() > 0);\n\n    int counter = 0;\n\n    for (JSDocInfo.Marker marker : markers) {\n      if (marker.getAnnotation() != null) {\n        if (annotationName.equals(marker.getAnnotation().getItem())) {\n\n          if (counter == index) {\n            assertEquals(startLineno, marker.getAnnotation().getStartLine());\n            assertEquals(startCharno,\n                         marker.getAnnotation().getPositionOnStartLine());\n            assertEquals(startLineno, marker.getAnnotation().getEndLine());\n            assertEquals(startCharno + annotationName.length(),\n                         marker.getAnnotation().getPositionOnEndLine());\n\n            return marker;\n          }\n\n          counter++;\n        }\n      }\n    }\n\n    fail(\"No marker found\");\n    return null;\n  }\n",
        "begin_line": 2628,
        "end_line": 2662,
        "comment": "\n   * Asserts that the index-th annotation marker of a given annotation name\n   * is found in the given JSDocInfo.\n   *\n   * @param jsdoc The JSDocInfo in which to search for the annotation marker.\n   * @param annotationName The name/type of the annotation for which to\n   *   search. Example: \"author\" for an \"@author\" annotation.\n   * @param startLineno The expected starting line number of the marker.\n   * @param startCharno The expected character on the starting line.\n   * @param index The index of the marker.\n   * @return The marker found, for further testing.\n   ",
        "child_ranges": [
            "(line 2634,col 5)-(line 2634,col 62)",
            "(line 2636,col 5)-(line 2636,col 35)",
            "(line 2638,col 5)-(line 2638,col 20)",
            "(line 2640,col 5)-(line 2658,col 5)",
            "(line 2660,col 5)-(line 2660,col 28)",
            "(line 2661,col 5)-(line 2661,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertContains(java.util.Collection<T>, T)",
        "snippet": "  private <T> void assertContains(Collection<T> collection, T item) {\n    assertTrue(collection.contains(item));\n  }\n",
        "begin_line": 2664,
        "end_line": 2666,
        "comment": "",
        "child_ranges": [
            "(line 2665,col 5)-(line 2665,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFull(java.lang.String, java.lang.String...)",
        "snippet": "  private void parseFull(String code, String... warnings) {\n    CompilerEnvirons environment = new CompilerEnvirons();\n\n    TestErrorReporter testErrorReporter = new TestErrorReporter(null, warnings);\n    environment.setErrorReporter(testErrorReporter);\n\n    environment.setRecordingComments(true);\n    environment.setRecordingLocalJsDocComments(true);\n\n    Parser p = new Parser(environment, testErrorReporter);\n    AstRoot script = p.parse(code, null, 0);\n\n    Config config =\n        new Config(extraAnnotations, extraSuppressions,\n            true, LanguageMode.ECMASCRIPT3, false);\n    StaticSourceFile file = new SimpleSourceFile(script.getSourceName(), false);\n    for (Comment comment : script.getComments()) {\n      JsDocInfoParser jsdocParser =\n        new JsDocInfoParser(\n            new JsDocTokenStream(comment.getValue().substring(3),\n                comment.getLineno()),\n            comment,\n            null,\n            config,\n            testErrorReporter);\n      jsdocParser.parse();\n      jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n\n    assertTrue(\"some expected warnings were not reported\",\n        testErrorReporter.hasEncounteredAllWarnings());\n  }\n",
        "begin_line": 2668,
        "end_line": 2699,
        "comment": "",
        "child_ranges": [
            "(line 2669,col 5)-(line 2669,col 58)",
            "(line 2671,col 5)-(line 2671,col 80)",
            "(line 2672,col 5)-(line 2672,col 52)",
            "(line 2674,col 5)-(line 2674,col 43)",
            "(line 2675,col 5)-(line 2675,col 53)",
            "(line 2677,col 5)-(line 2677,col 58)",
            "(line 2678,col 5)-(line 2678,col 44)",
            "(line 2680,col 5)-(line 2682,col 51)",
            "(line 2683,col 5)-(line 2683,col 80)",
            "(line 2684,col 5)-(line 2695,col 5)",
            "(line 2697,col 5)-(line 2698,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverviewWithoutDoc(java.lang.String, java.lang.String...)",
        "snippet": "  @SuppressWarnings(\"unused\")\n  private JSDocInfo parseFileOverviewWithoutDoc(String comment,\n                                                String... warnings) {\n    return parse(comment, false, true, warnings);\n  }\n",
        "begin_line": 2701,
        "end_line": 2705,
        "comment": "",
        "child_ranges": [
            "(line 2704,col 5)-(line 2704,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseFileOverview(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parseFileOverview(String comment, String... warnings) {\n    return parse(comment, true, true, warnings);\n  }\n",
        "begin_line": 2707,
        "end_line": 2709,
        "comment": "",
        "child_ranges": [
            "(line 2708,col 5)-(line 2708,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, String... warnings) {\n    return parse(comment, false, warnings);\n  }\n",
        "begin_line": 2711,
        "end_line": 2713,
        "comment": "",
        "child_ranges": [
            "(line 2712,col 5)-(line 2712,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n                          String... warnings) {\n    return parse(comment, parseDocumentation, false, warnings);\n  }\n",
        "begin_line": 2715,
        "end_line": 2718,
        "comment": "",
        "child_ranges": [
            "(line 2717,col 5)-(line 2717,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parse(java.lang.String, boolean, boolean, java.lang.String...)",
        "snippet": "  private JSDocInfo parse(String comment, boolean parseDocumentation,\n      boolean parseFileOverview, String... warnings) {\n    TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);\n\n    Config config = new Config(extraAnnotations, extraSuppressions,\n        parseDocumentation, LanguageMode.ECMASCRIPT3, false);\n    StaticSourceFile file = new SimpleSourceFile(\"testcode\", false);\n    Node associatedNode = new Node(Token.SCRIPT);\n    associatedNode.setInputId(new InputId(file.getName()));\n    associatedNode.setStaticSourceFile(file);\n    JsDocInfoParser jsdocParser = new JsDocInfoParser(\n        stream(comment),\n        new Comment(0, 0, CommentType.JSDOC, comment),\n        associatedNode,\n        config, errorReporter);\n\n    if (fileLevelJsDocBuilder != null) {\n      jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);\n    }\n\n    jsdocParser.parse();\n\n    assertTrue(\"expected warnings were not reported\",\n        errorReporter.hasEncounteredAllWarnings());\n\n    if (parseFileOverview) {\n      return jsdocParser.getFileOverviewJSDocInfo();\n    } else {\n      return jsdocParser.retrieveAndResetParsedJSDocInfo();\n    }\n  }\n",
        "begin_line": 2720,
        "end_line": 2750,
        "comment": "",
        "child_ranges": [
            "(line 2722,col 5)-(line 2722,col 76)",
            "(line 2724,col 5)-(line 2725,col 61)",
            "(line 2726,col 5)-(line 2726,col 68)",
            "(line 2727,col 5)-(line 2727,col 49)",
            "(line 2728,col 5)-(line 2728,col 59)",
            "(line 2729,col 5)-(line 2729,col 45)",
            "(line 2730,col 5)-(line 2734,col 31)",
            "(line 2736,col 5)-(line 2738,col 5)",
            "(line 2740,col 5)-(line 2740,col 24)",
            "(line 2742,col 5)-(line 2743,col 51)",
            "(line 2745,col 5)-(line 2749,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.parseType(java.lang.String)",
        "snippet": "  private Node parseType(String typeComment) {\n    return JsDocInfoParser.parseTypeString(typeComment);\n  }\n",
        "begin_line": 2752,
        "end_line": 2754,
        "comment": "",
        "child_ranges": [
            "(line 2753,col 5)-(line 2753,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.stream(java.lang.String)",
        "snippet": "  private JsDocTokenStream stream(String source) {\n    return new JsDocTokenStream(source, 0);\n  }\n",
        "begin_line": 2756,
        "end_line": 2758,
        "comment": "",
        "child_ranges": [
            "(line 2757,col 5)-(line 2757,col 43)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertParameterTypeEquals(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  private void assertParameterTypeEquals(JSType expected, JSTypeExpression te) {\n    assertEquals(expected, ((ObjectType) resolve(te)).getParameterType());\n  }\n",
        "begin_line": 2760,
        "end_line": 2762,
        "comment": "",
        "child_ranges": [
            "(line 2761,col 5)-(line 2761,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest.assertIndexTypeEquals(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.JSTypeExpression)",
        "snippet": "  private void assertIndexTypeEquals(JSType expected, JSTypeExpression te) {\n    assertEquals(expected, ((ObjectType) resolve(te)).getIndexType());\n  }\n",
        "begin_line": 2764,
        "end_line": 2766,
        "comment": "",
        "child_ranges": [
            "(line 2765,col 5)-(line 2765,col 70)"
        ]
    }
]