[
    {
        "name": "UnivariateRealSolverImpl.getAbsoluteAccuracy#168",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl.getAbsoluteAccuracy()",
        "snippet": "    public double getAbsoluteAccuracy() {\n        return absoluteAccuracy;\n    }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "\n     * Get the actual absolute accuracy.\n     * \n     * @return the accuracy\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "BrentSolver.solve#125",
        "is_bug": true,
        "src_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
        "class_name": "org.apache.commons.math.analysis.BrentSolver",
        "signature": "org.apache.commons.math.analysis.BrentSolver.solve(double, double)",
        "snippet": "    public double solve(double min, double max) throws MaxIterationsExceededException, \n        FunctionEvaluationException {\n        \n        clearResult();\n        verifyInterval(min, max);\n        \n        double ret = Double.NaN;\n        \n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        \n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign >= 0) {\n            // check if either value is close to a zero\n                // neither value is close to zero and min and max do not bracket root.\n                throw new IllegalArgumentException\n                (\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            // solve using only the first endpoint as initial guess\n            ret = solve(min, yMin, max, yMax, min, yMin);\n            // either min or max is a root\n        }\n\n        return ret;\n    }\n",
        "begin_line": 125,
        "end_line": 152,
        "comment": "\n     * Find a zero in the given interval.\n     * <p>\n     * Requires that the values of the function at the endpoints have opposite\n     * signs. An <code>IllegalArgumentException</code> is thrown if this is not\n     * the case.</p>\n     * \n     * @param min the lower bound for the interval.\n     * @param max the upper bound for the interval.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating the\n     * function \n     * @throws IllegalArgumentException if min is not less than max or the\n     * signs of the values of the function at the endpoints are not opposites\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 1
    },
    {
        "name": "BrentSolver.solve#170",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
        "class_name": "org.apache.commons.math.analysis.BrentSolver",
        "signature": "org.apache.commons.math.analysis.BrentSolver.solve(double, double, double, double, double, double)",
        "snippet": "    private double solve(double x0, double y0,\n                         double x1, double y1,\n                         double x2, double y2)\n    throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        double delta = x1 - x0;\n        double oldDelta = delta;\n\n        int i = 0;\n        while (i < maximalIterationCount) {\n            if (Math.abs(y2) < Math.abs(y1)) {\n                // use the bracket point if is better than last approximation\n                x0 = x1;\n                x1 = x2;\n                x2 = x0;\n                y0 = y1;\n                y1 = y2;\n                y2 = y0;\n            }\n            if (Math.abs(y1) <= functionValueAccuracy) {\n                // Avoid division by very small values. Assume\n                // the iteration has converged (the problem may\n                // still be ill conditioned)\n                setResult(x1, i);\n                return result;\n            }\n            double dx = (x2 - x1);\n            double tolerance =\n                Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy);\n            if (Math.abs(dx) <= tolerance) {\n                setResult(x1, i);\n                return result;\n            }\n            if ((Math.abs(oldDelta) < tolerance) ||\n                    (Math.abs(y0) <= Math.abs(y1))) {\n                // Force bisection.\n                delta = 0.5 * dx;\n                oldDelta = delta;\n            } else {\n                double r3 = y1 / y0;\n                double p;\n                double p1;\n                // the equality test (x0 == x2) is intentional,\n                // it is part of the original Brent's method,\n                // it should NOT be replaced by proximity test\n                if (x0 == x2) {\n                    // Linear interpolation.\n                    p = dx * r3;\n                    p1 = 1.0 - r3;\n                } else {\n                    // Inverse quadratic interpolation.\n                    double r1 = y0 / y2;\n                    double r2 = y1 / y2;\n                    p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));\n                    p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0);\n                }\n                if (p > 0.0) {\n                    p1 = -p1;\n                } else {\n                    p = -p;\n                }\n                if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||\n                        p >= Math.abs(0.5 * oldDelta * p1)) {\n                    // Inverse quadratic interpolation gives a value\n                    // in the wrong direction, or progress is slow.\n                    // Fall back to bisection.\n                    delta = 0.5 * dx;\n                    oldDelta = delta;\n                } else {\n                    oldDelta = delta;\n                    delta = p / p1;\n                }\n            }\n            // Save old X1, Y1 \n            x0 = x1;\n            y0 = y1;\n            // Compute new X1, Y1\n            if (Math.abs(delta) > tolerance) {\n                x1 = x1 + delta;\n            } else if (dx > 0.0) {\n                x1 = x1 + 0.5 * tolerance;\n            } else if (dx <= 0.0) {\n                x1 = x1 - 0.5 * tolerance;\n            }\n            y1 = f.value(x1);\n            if ((y1 > 0) == (y2 > 0)) {\n                x2 = x0;\n                y2 = y0;\n                delta = x1 - x0;\n                oldDelta = delta;\n            }\n            i++;\n        }\n        throw new MaxIterationsExceededException(maximalIterationCount);\n    }\n",
        "begin_line": 170,
        "end_line": 264,
        "comment": "\n     * Find a zero starting search according to the three provided points.\n     * @param x0 old approximation for the root\n     * @param y0 function value at the approximation for the root\n     * @param x1 last calculated approximation for the root\n     * @param y1 function value at the last calculated approximation\n     * for the root\n     * @param x2 bracket point (must be set to x0 if no bracket point is\n     * known, this will force starting with linear interpolation)\n     * @param y2 function value at the bracket point.\n     * @return the value where the function is zero\n     * @throws MaxIterationsExceededException if the maximum iteration count\n     * is exceeded\n     * @throws FunctionEvaluationException if an error occurs evaluating\n     * the function \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2425
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverImpl.setResult#139",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl.setResult(double, int)",
        "snippet": "    protected final void setResult(double result, int iterationCount) {\n        this.result = result;\n        this.iterationCount = iterationCount;\n        this.resultComputed = true;\n    }\n",
        "begin_line": 139,
        "end_line": 143,
        "comment": "\n     * Convenience function for implementations.\n     * \n     * @param result the result to set\n     * @param iterationCount the iteration count to set\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.189
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverImpl.clearResult#148",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl.clearResult()",
        "snippet": "    protected final void clearResult() {\n        this.resultComputed = false;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Convenience function for implementations.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverImpl.verifyInterval#294",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl.verifyInterval(double, double)",
        "snippet": "    protected void verifyInterval(double lower, double upper) {\n        if (lower >= upper) {\n            throw new IllegalArgumentException\n                (\"Endpoints do not specify an interval: [\" + lower + \n                        \",\" + upper + \"]\");\n        }       \n    }\n",
        "begin_line": 294,
        "end_line": 300,
        "comment": "\n     * Verifies that the endpoints specify an interval, \n     * throws IllegalArgumentException if not\n     * \n     * @param lower  lower endpoint\n     * @param upper upper endpoint\n     * @throws IllegalArgumentException\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1768
        },
        "num_failing_tests": 1
    },
    {
        "name": "BrentSolver.BrentSolver#41",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
        "class_name": "org.apache.commons.math.analysis.BrentSolver",
        "signature": "org.apache.commons.math.analysis.BrentSolver.BrentSolver(org.apache.commons.math.analysis.UnivariateRealFunction)",
        "snippet": "    public BrentSolver(UnivariateRealFunction f) {\n        super(f, 100, 1E-6);\n    }\n",
        "begin_line": 41,
        "end_line": 43,
        "comment": "\n     * Construct a solver for the given function.\n     * \n     * @param f function to solve.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 1
    },
    {
        "name": "UnivariateRealSolverImpl.UnivariateRealSolverImpl#82",
        "is_bug": false,
        "src_path": "src/java/org/apache/commons/math/analysis/UnivariateRealSolverImpl.java",
        "class_name": "org.apache.commons.math.analysis.UnivariateRealSolverImpl",
        "signature": "org.apache.commons.math.analysis.UnivariateRealSolverImpl.UnivariateRealSolverImpl(org.apache.commons.math.analysis.UnivariateRealFunction, int, double)",
        "snippet": "    protected UnivariateRealSolverImpl(\n        UnivariateRealFunction f,\n        int defaultMaximalIterationCount,\n        double defaultAbsoluteAccuracy) {\n        \n        super();\n        \n        if (f == null) {\n            throw new IllegalArgumentException(\"function can not be null.\");\n        }\n        \n        this.f = f;\n        this.defaultAbsoluteAccuracy = defaultAbsoluteAccuracy;\n        this.defaultRelativeAccuracy = 1E-14;\n        this.defaultFunctionValueAccuracy = 1E-15;\n        this.absoluteAccuracy = defaultAbsoluteAccuracy;\n        this.relativeAccuracy = defaultRelativeAccuracy;\n        this.functionValueAccuracy = defaultFunctionValueAccuracy;\n        this.defaultMaximalIterationCount = defaultMaximalIterationCount;\n        this.maximalIterationCount = defaultMaximalIterationCount;\n    }\n",
        "begin_line": 82,
        "end_line": 102,
        "comment": "\n     * Construct a solver with given iteration count and accuracy.\n     * \n     * @param f the function to solve.\n     * @param defaultAbsoluteAccuracy maximum absolute error\n     * @param defaultMaximalIterationCount maximum number of iterations\n     * @throws IllegalArgumentException if f is null or the \n     * defaultAbsoluteAccuracy is not valid\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1667
        },
        "num_failing_tests": 1
    }
]