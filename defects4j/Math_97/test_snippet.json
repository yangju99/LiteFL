[
    {
        "class_name": "org.apache.commons.math.analysis.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/analysis/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.BrentSolverTest.BrentSolverTest(java.lang.String)",
        "snippet": "    public BrentSolverTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 38,
        "end_line": 40,
        "comment": "",
        "child_ranges": [
            "(line 39,col 9)-(line 39,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/analysis/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.BrentSolverTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(BrentSolverTest.class);\n        suite.setName(\"UnivariateRealSolver Tests\");\n        return suite;\n    }\n",
        "begin_line": 42,
        "end_line": 46,
        "comment": "",
        "child_ranges": [
            "(line 43,col 9)-(line 43,col 63)",
            "(line 44,col 9)-(line 44,col 52)",
            "(line 45,col 9)-(line 45,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/analysis/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.BrentSolverTest.testSinZero()",
        "snippet": "    public void testSinZero() throws MathException {\n        // The sinus function is behaved well around the root at #pi. The second\n        // order derivative is zero, which means linar approximating methods will\n        // still converge quadratically. \n        UnivariateRealFunction f = new SinFunction();\n        double result;\n        UnivariateRealSolver solver = new BrentSolver(f);\n        // Somewhat benign interval. The function is monotone.\n        result = solver.solve(3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 4 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 5);\n        // Larger and somewhat less benign interval. The function is grows first.\n        result = solver.solve(1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        solver = new SecantSolver(f);\n        result = solver.solve(3, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 4 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 5);\n        result = solver.solve(1, 4);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        assertEquals(result, solver.getResult(), 0);\n    }\n",
        "begin_line": 48,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 52,col 9)-(line 52,col 53)",
            "(line 53,col 9)-(line 53,col 22)",
            "(line 54,col 9)-(line 54,col 57)",
            "(line 56,col 9)-(line 56,col 36)",
            "(line 59,col 9)-(line 59,col 68)",
            "(line 61,col 9)-(line 61,col 52)",
            "(line 63,col 9)-(line 63,col 36)",
            "(line 66,col 9)-(line 66,col 68)",
            "(line 68,col 9)-(line 68,col 52)",
            "(line 69,col 9)-(line 69,col 37)",
            "(line 70,col 9)-(line 70,col 36)",
            "(line 73,col 9)-(line 73,col 68)",
            "(line 75,col 9)-(line 75,col 52)",
            "(line 76,col 9)-(line 76,col 36)",
            "(line 79,col 9)-(line 79,col 68)",
            "(line 81,col 9)-(line 81,col 52)",
            "(line 82,col 9)-(line 82,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/analysis/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.BrentSolverTest.testQuinticZero()",
        "snippet": "    public void testQuinticZero() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // Around the root of 0 the function is well behaved, with a second derivative\n        // of zero a 0.\n        // The other roots are less well to find, in particular the root at 1, because\n        // the function grows fast for x>1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        // intervals containing these values are harder for the solvers.\n        UnivariateRealFunction f = new QuinticFunction();\n        double result;\n        // Brent-Dekker solver.\n        UnivariateRealSolver solver = new BrentSolver(f);\n        // Symmetric bracket around 0. Test whether solvers can handle hitting\n        // the root in the first iteration.\n        result = solver.solve(-0.2, 0.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        assertTrue(solver.getIterationCount() <= 2);\n        // 1 iterations on i586 JDK 1.4.1.\n        // Asymmetric bracket around 0, just for fun. Contains extremum.\n        result = solver.solve(-0.1, 0.3);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        // Large bracket around 0. Contains two extrema.\n        result = solver.solve(-0.3, 0.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        // Benign bracket around 0.5, function is monotonous.\n        result = solver.solve(0.3, 0.7);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        // Less benign bracket around 0.5, contains one extremum.\n        result = solver.solve(0.2, 0.6);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        // Large, less benign bracket around 0.5, contains both extrema.\n        result = solver.solve(0.05, 0.95);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        // Relatively benign bracket around 1, function is monotonous. Fast growth for x>1\n        // is still a problem.\n        result = solver.solve(0.85, 1.25);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        // Less benign bracket around 1 with extremum.\n        result = solver.solve(0.8, 1.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        // Large bracket around 1. Monotonous.\n        result = solver.solve(0.85, 1.75);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 10 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 11);\n        // Large bracket around 1. Interval contains extremum.\n        result = solver.solve(0.55, 1.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 7 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 8);\n        // Very large bracket around 1 for testing fast growth behaviour.\n        result = solver.solve(0.85, 5);\n        //System.out.println(\n       //     \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 12 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 13);\n        // Secant solver.\n        solver = new SecantSolver(f);\n        result = solver.solve(-0.2, 0.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 1 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 2);\n        result = solver.solve(-0.1, 0.3);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 5 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 6);\n        result = solver.solve(-0.3, 0.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        result = solver.solve(0.3, 0.7);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 7 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 8);\n        result = solver.solve(0.2, 0.6);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 6 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 7);\n        result = solver.solve(0.05, 0.95);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 0.5, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        result = solver.solve(0.85, 1.25);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 10 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 11);\n        result = solver.solve(0.8, 1.2);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 8 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 9);\n        result = solver.solve(0.85, 1.75);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 14 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 15);\n        // The followig is especially slow because the solver first has to reduce\n        // the bracket to exclude the extremum. After that, convergence is rapide.\n        result = solver.solve(0.55, 1.45);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 7 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 8);\n        result = solver.solve(0.85, 5);\n        //System.out.println(\n        //    \"Root: \" + result + \" Iterations: \" + solver.getIterationCount());\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        // 14 iterations on i586 JDK 1.4.1.\n        assertTrue(solver.getIterationCount() <= 15);\n        // Static solve method\n        result = UnivariateRealSolverUtils.solve(f, -0.2, 0.2);\n        assertEquals(result, 0, solver.getAbsoluteAccuracy());\n        result = UnivariateRealSolverUtils.solve(f, -0.1, 0.3);\n        assertEquals(result, 0, 1E-8);\n        result = UnivariateRealSolverUtils.solve(f, -0.3, 0.45);\n        assertEquals(result, 0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.3, 0.7);\n        assertEquals(result, 0.5, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.2, 0.6);\n        assertEquals(result, 0.5, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.05, 0.95);\n        assertEquals(result, 0.5, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.25);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.8, 1.2);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.85, 1.75);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.55, 1.45);\n        assertEquals(result, 1.0, 1E-6);\n        result = UnivariateRealSolverUtils.solve(f, 0.85, 5);\n        assertEquals(result, 1.0, 1E-6);\n    }\n",
        "begin_line": 85,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 57)",
            "(line 94,col 9)-(line 94,col 22)",
            "(line 96,col 9)-(line 96,col 57)",
            "(line 99,col 9)-(line 99,col 41)",
            "(line 102,col 9)-(line 102,col 62)",
            "(line 103,col 9)-(line 103,col 52)",
            "(line 106,col 9)-(line 106,col 41)",
            "(line 109,col 9)-(line 109,col 62)",
            "(line 111,col 9)-(line 111,col 52)",
            "(line 113,col 9)-(line 113,col 42)",
            "(line 116,col 9)-(line 116,col 62)",
            "(line 118,col 9)-(line 118,col 52)",
            "(line 120,col 9)-(line 120,col 40)",
            "(line 123,col 9)-(line 123,col 64)",
            "(line 125,col 9)-(line 125,col 52)",
            "(line 127,col 9)-(line 127,col 40)",
            "(line 130,col 9)-(line 130,col 64)",
            "(line 132,col 9)-(line 132,col 52)",
            "(line 134,col 9)-(line 134,col 42)",
            "(line 137,col 9)-(line 137,col 64)",
            "(line 139,col 9)-(line 139,col 52)",
            "(line 142,col 9)-(line 142,col 42)",
            "(line 145,col 9)-(line 145,col 64)",
            "(line 147,col 9)-(line 147,col 52)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 152,col 9)-(line 152,col 64)",
            "(line 154,col 9)-(line 154,col 52)",
            "(line 156,col 9)-(line 156,col 42)",
            "(line 159,col 9)-(line 159,col 64)",
            "(line 161,col 9)-(line 161,col 53)",
            "(line 163,col 9)-(line 163,col 42)",
            "(line 166,col 9)-(line 166,col 64)",
            "(line 168,col 9)-(line 168,col 52)",
            "(line 170,col 9)-(line 170,col 39)",
            "(line 173,col 9)-(line 173,col 64)",
            "(line 175,col 9)-(line 175,col 53)",
            "(line 177,col 9)-(line 177,col 37)",
            "(line 178,col 9)-(line 178,col 41)",
            "(line 181,col 9)-(line 181,col 62)",
            "(line 183,col 9)-(line 183,col 52)",
            "(line 184,col 9)-(line 184,col 41)",
            "(line 187,col 9)-(line 187,col 62)",
            "(line 189,col 9)-(line 189,col 52)",
            "(line 190,col 9)-(line 190,col 42)",
            "(line 193,col 9)-(line 193,col 62)",
            "(line 195,col 9)-(line 195,col 52)",
            "(line 196,col 9)-(line 196,col 40)",
            "(line 199,col 9)-(line 199,col 64)",
            "(line 201,col 9)-(line 201,col 52)",
            "(line 202,col 9)-(line 202,col 40)",
            "(line 205,col 9)-(line 205,col 64)",
            "(line 207,col 9)-(line 207,col 52)",
            "(line 208,col 9)-(line 208,col 42)",
            "(line 211,col 9)-(line 211,col 64)",
            "(line 213,col 9)-(line 213,col 52)",
            "(line 214,col 9)-(line 214,col 42)",
            "(line 217,col 9)-(line 217,col 64)",
            "(line 219,col 9)-(line 219,col 53)",
            "(line 220,col 9)-(line 220,col 40)",
            "(line 223,col 9)-(line 223,col 64)",
            "(line 225,col 9)-(line 225,col 52)",
            "(line 226,col 9)-(line 226,col 42)",
            "(line 229,col 9)-(line 229,col 64)",
            "(line 231,col 9)-(line 231,col 53)",
            "(line 234,col 9)-(line 234,col 42)",
            "(line 237,col 9)-(line 237,col 64)",
            "(line 239,col 9)-(line 239,col 52)",
            "(line 240,col 9)-(line 240,col 39)",
            "(line 243,col 9)-(line 243,col 64)",
            "(line 245,col 9)-(line 245,col 53)",
            "(line 247,col 9)-(line 247,col 63)",
            "(line 248,col 9)-(line 248,col 62)",
            "(line 249,col 9)-(line 249,col 63)",
            "(line 250,col 9)-(line 250,col 38)",
            "(line 251,col 9)-(line 251,col 64)",
            "(line 252,col 9)-(line 252,col 38)",
            "(line 253,col 9)-(line 253,col 62)",
            "(line 254,col 9)-(line 254,col 40)",
            "(line 255,col 9)-(line 255,col 62)",
            "(line 256,col 9)-(line 256,col 40)",
            "(line 257,col 9)-(line 257,col 64)",
            "(line 258,col 9)-(line 258,col 40)",
            "(line 259,col 9)-(line 259,col 64)",
            "(line 260,col 9)-(line 260,col 40)",
            "(line 261,col 9)-(line 261,col 62)",
            "(line 262,col 9)-(line 262,col 40)",
            "(line 263,col 9)-(line 263,col 64)",
            "(line 264,col 9)-(line 264,col 40)",
            "(line 265,col 9)-(line 265,col 64)",
            "(line 266,col 9)-(line 266,col 40)",
            "(line 267,col 9)-(line 267,col 61)",
            "(line 268,col 9)-(line 268,col 40)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/analysis/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.BrentSolverTest.testRootEndpoints()",
        "snippet": "    public void testRootEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver(f);\n        \n        // endpoint is root\n        double result = solver.solve(Math.PI, 4);\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n\n        result = solver.solve(3, Math.PI);\n        assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());\n    }\n",
        "begin_line": 271,
        "end_line": 281,
        "comment": "",
        "child_ranges": [
            "(line 272,col 9)-(line 272,col 53)",
            "(line 273,col 9)-(line 273,col 57)",
            "(line 276,col 9)-(line 276,col 49)",
            "(line 277,col 9)-(line 277,col 68)",
            "(line 279,col 9)-(line 279,col 42)",
            "(line 280,col 9)-(line 280,col 68)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/analysis/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.BrentSolverTest.testBadEndpoints()",
        "snippet": "    public void testBadEndpoints() throws Exception {\n        UnivariateRealFunction f = new SinFunction();\n        UnivariateRealSolver solver = new BrentSolver(f);\n        try {  // bad interval\n            solver.solve(1, -1);\n            fail(\"Expecting IllegalArgumentException - bad interval\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        try {  // no bracket\n            solver.solve(1, 1.5);\n            fail(\"Expecting IllegalArgumentException - non-bracketing\");\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 283,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 284,col 9)-(line 284,col 53)",
            "(line 285,col 9)-(line 285,col 57)",
            "(line 286,col 9)-(line 291,col 9)",
            "(line 292,col 9)-(line 297,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.math.analysis.BrentSolverTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/math/analysis/BrentSolverTest.java",
        "signature": "org.apache.commons.math.analysis.BrentSolverTest.testInitialGuess()",
        "snippet": "    public void testInitialGuess() throws MathException {\n\n        MonitoredFunction f = new MonitoredFunction(new QuinticFunction());\n        UnivariateRealSolver solver = new BrentSolver(f);\n        double result;\n\n        // no guess\n        result = solver.solve(0.6, 7.0);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        int referenceCallsCount = f.getCallsCount();\n        assertTrue(referenceCallsCount >= 13);\n \n        // invalid guess (it *is* a root, but outside of the range)\n        try {\n          result = solver.solve(0.6, 7.0, 0.0);\n          fail(\"an IllegalArgumentException was expected\");\n        } catch (IllegalArgumentException iae) {\n            // expected behaviour\n        } catch (Exception e) {\n            fail(\"wrong exception caught: \" + e.getMessage());\n        }\n \n        // bad guess\n        f.setCallsCount(0);\n        result = solver.solve(0.6, 7.0, 0.61);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        assertTrue(f.getCallsCount() > referenceCallsCount);\n \n        // good guess\n        f.setCallsCount(0);\n        result = solver.solve(0.6, 7.0, 0.999999);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        assertTrue(f.getCallsCount() < referenceCallsCount);\n\n        // perfect guess\n        f.setCallsCount(0);\n        result = solver.solve(0.6, 7.0, 1.0);\n        assertEquals(result, 1.0, solver.getAbsoluteAccuracy());\n        assertEquals(0, solver.getIterationCount());\n        assertEquals(1, f.getCallsCount());\n \n    }\n",
        "begin_line": 300,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 302,col 9)-(line 302,col 75)",
            "(line 303,col 9)-(line 303,col 57)",
            "(line 304,col 9)-(line 304,col 22)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 308,col 9)-(line 308,col 64)",
            "(line 309,col 9)-(line 309,col 52)",
            "(line 310,col 9)-(line 310,col 46)",
            "(line 313,col 9)-(line 320,col 9)",
            "(line 323,col 9)-(line 323,col 27)",
            "(line 324,col 9)-(line 324,col 46)",
            "(line 325,col 9)-(line 325,col 64)",
            "(line 326,col 9)-(line 326,col 60)",
            "(line 329,col 9)-(line 329,col 27)",
            "(line 330,col 9)-(line 330,col 50)",
            "(line 331,col 9)-(line 331,col 64)",
            "(line 332,col 9)-(line 332,col 60)",
            "(line 335,col 9)-(line 335,col 27)",
            "(line 336,col 9)-(line 336,col 45)",
            "(line 337,col 9)-(line 337,col 64)",
            "(line 338,col 9)-(line 338,col 52)",
            "(line 339,col 9)-(line 339,col 43)"
        ]
    }
]