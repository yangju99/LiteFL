[
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testVarAndOptionalParams()",
        "snippet": "  public void testVarAndOptionalParams() {\n    Node args = new Node(Token.LP,\n        Node.newString(Token.NAME, \"a\"),\n        Node.newString(Token.NAME, \"b\"));\n    Node optArgs = new Node(Token.LP,\n        Node.newString(Token.NAME, \"opt_a\"),\n        Node.newString(Token.NAME, \"opt_b\"));\n\n    assertFalse(conv.isVarArgsParameter(args.getFirstChild()));\n    assertFalse(conv.isVarArgsParameter(args.getLastChild()));\n    assertFalse(conv.isVarArgsParameter(optArgs.getFirstChild()));\n    assertFalse(conv.isVarArgsParameter(optArgs.getLastChild()));\n\n    assertFalse(conv.isOptionalParameter(args.getFirstChild()));\n    assertFalse(conv.isOptionalParameter(args.getLastChild()));\n    assertFalse(conv.isOptionalParameter(optArgs.getFirstChild()));\n    assertFalse(conv.isOptionalParameter(optArgs.getLastChild()));\n  }\n",
        "begin_line": 31,
        "end_line": 48,
        "comment": "",
        "child_ranges": [
            "(line 32,col 5)-(line 34,col 41)",
            "(line 35,col 5)-(line 37,col 45)",
            "(line 39,col 5)-(line 39,col 63)",
            "(line 40,col 5)-(line 40,col 62)",
            "(line 41,col 5)-(line 41,col 66)",
            "(line 42,col 5)-(line 42,col 65)",
            "(line 44,col 5)-(line 44,col 64)",
            "(line 45,col 5)-(line 45,col 63)",
            "(line 46,col 5)-(line 46,col 67)",
            "(line 47,col 5)-(line 47,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInlineName()",
        "snippet": "  public void testInlineName() {\n    assertFalse(conv.isConstant(\"a\"));\n    assertFalse(conv.isConstant(\"XYZ123_\"));\n    assertFalse(conv.isConstant(\"ABC\"));\n    assertFalse(conv.isConstant(\"ABCdef\"));\n    assertFalse(conv.isConstant(\"aBC\"));\n    assertFalse(conv.isConstant(\"A\"));\n    assertFalse(conv.isConstant(\"_XYZ123\"));\n    assertFalse(conv.isConstant(\"a$b$XYZ123_\"));\n    assertFalse(conv.isConstant(\"a$b$ABC_DEF\"));\n    assertFalse(conv.isConstant(\"a$b$A\"));\n    assertFalse(conv.isConstant(\"a$b$a\"));\n    assertFalse(conv.isConstant(\"a$b$ABCdef\"));\n    assertFalse(conv.isConstant(\"a$b$aBC\"));\n    assertFalse(conv.isConstant(\"a$b$\"));\n    assertFalse(conv.isConstant(\"$\"));\n  }\n",
        "begin_line": 50,
        "end_line": 66,
        "comment": "",
        "child_ranges": [
            "(line 51,col 5)-(line 51,col 38)",
            "(line 52,col 5)-(line 52,col 44)",
            "(line 53,col 5)-(line 53,col 40)",
            "(line 54,col 5)-(line 54,col 43)",
            "(line 55,col 5)-(line 55,col 40)",
            "(line 56,col 5)-(line 56,col 38)",
            "(line 57,col 5)-(line 57,col 44)",
            "(line 58,col 5)-(line 58,col 48)",
            "(line 59,col 5)-(line 59,col 48)",
            "(line 60,col 5)-(line 60,col 42)",
            "(line 61,col 5)-(line 61,col 42)",
            "(line 62,col 5)-(line 62,col 47)",
            "(line 63,col 5)-(line 63,col 44)",
            "(line 64,col 5)-(line 64,col 41)",
            "(line 65,col 5)-(line 65,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testExportedName()",
        "snippet": "  public void testExportedName() {\n    assertFalse(conv.isExported(\"_a\"));\n    assertFalse(conv.isExported(\"_a_\"));\n    assertFalse(conv.isExported(\"a\"));\n\n    assertFalse(conv.isExported(\"$super\", false));\n    assertTrue(conv.isExported(\"$super\", true));\n    assertTrue(conv.isExported(\"$super\"));\n  }\n",
        "begin_line": 68,
        "end_line": 76,
        "comment": "",
        "child_ranges": [
            "(line 69,col 5)-(line 69,col 39)",
            "(line 70,col 5)-(line 70,col 40)",
            "(line 71,col 5)-(line 71,col 38)",
            "(line 73,col 5)-(line 73,col 50)",
            "(line 74,col 5)-(line 74,col 48)",
            "(line 75,col 5)-(line 75,col 42)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testPrivateName()",
        "snippet": "  public void testPrivateName() {\n    assertFalse(conv.isPrivate(\"a_\"));\n    assertFalse(conv.isPrivate(\"a\"));\n    assertFalse(conv.isPrivate(\"_a_\"));\n  }\n",
        "begin_line": 78,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 79,col 5)-(line 79,col 38)",
            "(line 80,col 5)-(line 80,col 37)",
            "(line 81,col 5)-(line 81,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testEnumKey()",
        "snippet": "  public void testEnumKey() {\n    assertTrue(conv.isValidEnumKey(\"A\"));\n    assertTrue(conv.isValidEnumKey(\"123\"));\n    assertTrue(conv.isValidEnumKey(\"FOO_BAR\"));\n\n    assertTrue(conv.isValidEnumKey(\"a\"));\n    assertTrue(conv.isValidEnumKey(\"someKeyInCamelCase\"));\n    assertTrue(conv.isValidEnumKey(\"_FOO_BAR\"));\n  }\n",
        "begin_line": 84,
        "end_line": 92,
        "comment": "",
        "child_ranges": [
            "(line 85,col 5)-(line 85,col 41)",
            "(line 86,col 5)-(line 86,col 43)",
            "(line 87,col 5)-(line 87,col 47)",
            "(line 89,col 5)-(line 89,col 41)",
            "(line 90,col 5)-(line 90,col 58)",
            "(line 91,col 5)-(line 91,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection1()",
        "snippet": "  public void testInheritanceDetection1() {\n    assertNotClassDefining(\"goog.foo(A, B);\");\n  }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 95,col 5)-(line 95,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection2()",
        "snippet": "  public void testInheritanceDetection2() {\n    assertDefinesClasses(\"goog.inherits(A, B);\", \"A\", \"B\");\n  }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "",
        "child_ranges": [
            "(line 99,col 5)-(line 99,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection3()",
        "snippet": "  public void testInheritanceDetection3() {\n    assertDefinesClasses(\"A.inherits(B);\", \"A\", \"B\");\n  }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "",
        "child_ranges": [
            "(line 103,col 5)-(line 103,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection4()",
        "snippet": "  public void testInheritanceDetection4() {\n    assertDefinesClasses(\"goog.inherits(goog.A, goog.B);\", \"goog.A\", \"goog.B\");\n  }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "",
        "child_ranges": [
            "(line 107,col 5)-(line 107,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection5()",
        "snippet": "  public void testInheritanceDetection5() {\n    assertDefinesClasses(\"goog.A.inherits(goog.B);\", \"goog.A\", \"goog.B\");\n  }\n",
        "begin_line": 110,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 5)-(line 111,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection6()",
        "snippet": "  public void testInheritanceDetection6() {\n    assertNotClassDefining(\"A.inherits(this.B);\");\n  }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "",
        "child_ranges": [
            "(line 115,col 5)-(line 115,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection7()",
        "snippet": "  public void testInheritanceDetection7() {\n    assertNotClassDefining(\"this.A.inherits(B);\");\n  }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 119,col 5)-(line 119,col 50)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection8()",
        "snippet": "  public void testInheritanceDetection8() {\n    assertNotClassDefining(\"goog.inherits(A, B, C);\");\n  }\n",
        "begin_line": 122,
        "end_line": 124,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 123,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection9()",
        "snippet": "  public void testInheritanceDetection9() {\n    assertDefinesClasses(\"A.mixin(B.prototype);\",\n        \"A\", \"B\");\n  }\n",
        "begin_line": 126,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 127,col 5)-(line 128,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection10()",
        "snippet": "  public void testInheritanceDetection10() {\n    assertDefinesClasses(\"goog.mixin(A.prototype, B.prototype);\",\n        \"A\", \"B\");\n  }\n",
        "begin_line": 131,
        "end_line": 134,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 133,col 18)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection11()",
        "snippet": "  public void testInheritanceDetection11() {\n    assertNotClassDefining(\"A.mixin(B)\");\n  }\n",
        "begin_line": 136,
        "end_line": 138,
        "comment": "",
        "child_ranges": [
            "(line 137,col 5)-(line 137,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection12()",
        "snippet": "  public void testInheritanceDetection12() {\n    assertNotClassDefining(\"goog.mixin(A.prototype, B)\");\n  }\n",
        "begin_line": 140,
        "end_line": 142,
        "comment": "",
        "child_ranges": [
            "(line 141,col 5)-(line 141,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection13()",
        "snippet": "  public void testInheritanceDetection13() {\n    assertNotClassDefining(\"goog.mixin(A, B)\");\n  }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "",
        "child_ranges": [
            "(line 145,col 5)-(line 145,col 47)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetection14()",
        "snippet": "  public void testInheritanceDetection14() {\n    assertNotClassDefining(\"goog$mixin((function(){}).prototype)\");\n  }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 149,col 5)-(line 149,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testInheritanceDetectionPostCollapseProperties()",
        "snippet": "  public void testInheritanceDetectionPostCollapseProperties() {\n    assertDefinesClasses(\"goog$inherits(A, B);\", \"A\", \"B\");\n    assertNotClassDefining(\"goog$inherits(A);\");\n  }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 59)",
            "(line 154,col 5)-(line 154,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testObjectLiteralCast()",
        "snippet": "  public void testObjectLiteralCast() {\n    assertNotObjectLiteralCast(\"goog.reflect.object();\");\n    assertNotObjectLiteralCast(\"goog.reflect.object(A);\");\n    assertNotObjectLiteralCast(\"goog.reflect.object(1, {});\");\n    assertObjectLiteralCast(\"goog.reflect.object(A, {});\");\n  }\n",
        "begin_line": 157,
        "end_line": 162,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 158,col 57)",
            "(line 159,col 5)-(line 159,col 58)",
            "(line 160,col 5)-(line 160,col 62)",
            "(line 161,col 5)-(line 161,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testFunctionBind()",
        "snippet": "  public void testFunctionBind() {\n    assertNotFunctionBind(\"goog.bind()\");  // invalid bind\n    assertFunctionBind(\"goog.bind(f)\");\n    assertFunctionBind(\"goog.bind(f, obj)\");\n    assertFunctionBind(\"goog.bind(f, obj, p1)\");\n\n    assertNotFunctionBind(\"goog$bind()\");  // invalid bind\n    assertFunctionBind(\"goog$bind(f)\");\n    assertFunctionBind(\"goog$bind(f, obj)\");\n    assertFunctionBind(\"goog$bind(f, obj, p1)\");\n\n    assertNotFunctionBind(\"goog.partial()\");  // invalid bind\n    assertFunctionBind(\"goog.partial(f)\");\n    assertFunctionBind(\"goog.partial(f, obj)\");\n    assertFunctionBind(\"goog.partial(f, obj, p1)\");\n\n    assertNotFunctionBind(\"goog$partial()\");  // invalid bind\n    assertFunctionBind(\"goog$partial(f)\");\n    assertFunctionBind(\"goog$partial(f, obj)\");\n    assertFunctionBind(\"goog$partial(f, obj, p1)\");\n\n    assertFunctionBind(\"(function(){}).bind()\");\n    assertFunctionBind(\"(function(){}).bind(obj)\");\n    assertFunctionBind(\"(function(){}).bind(obj, p1)\");\n\n    assertNotFunctionBind(\"Function.prototype.bind.call()\");\n    assertFunctionBind(\"Function.prototype.bind.call(obj)\");\n    assertFunctionBind(\"Function.prototype.bind.call(obj, p1)\");\n  }\n",
        "begin_line": 164,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 165,col 5)-(line 165,col 41)",
            "(line 166,col 5)-(line 166,col 39)",
            "(line 167,col 5)-(line 167,col 44)",
            "(line 168,col 5)-(line 168,col 48)",
            "(line 170,col 5)-(line 170,col 41)",
            "(line 171,col 5)-(line 171,col 39)",
            "(line 172,col 5)-(line 172,col 44)",
            "(line 173,col 5)-(line 173,col 48)",
            "(line 175,col 5)-(line 175,col 44)",
            "(line 176,col 5)-(line 176,col 42)",
            "(line 177,col 5)-(line 177,col 47)",
            "(line 178,col 5)-(line 178,col 51)",
            "(line 180,col 5)-(line 180,col 44)",
            "(line 181,col 5)-(line 181,col 42)",
            "(line 182,col 5)-(line 182,col 47)",
            "(line 183,col 5)-(line 183,col 51)",
            "(line 185,col 5)-(line 185,col 48)",
            "(line 186,col 5)-(line 186,col 51)",
            "(line 187,col 5)-(line 187,col 55)",
            "(line 189,col 5)-(line 189,col 60)",
            "(line 190,col 5)-(line 190,col 60)",
            "(line 191,col 5)-(line 191,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.testRequire()",
        "snippet": "  public void testRequire() {\n    assertRequire(\"goog.require('foo')\");\n    assertNotRequire(\"goog.require(foo)\");\n    assertNotRequire(\"goog.require()\");\n    assertNotRequire(\"foo()\");\n  }\n",
        "begin_line": 194,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 195,col 41)",
            "(line 196,col 5)-(line 196,col 42)",
            "(line 197,col 5)-(line 197,col 39)",
            "(line 198,col 5)-(line 198,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertFunctionBind(java.lang.String)",
        "snippet": "  private void assertFunctionBind(String code) {\n    Node n = parseTestCode(code);\n    assertNotNull(conv.describeFunctionBind(n.getFirstChild()));\n  }\n",
        "begin_line": 201,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 33)",
            "(line 203,col 5)-(line 203,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertNotFunctionBind(java.lang.String)",
        "snippet": "  private void assertNotFunctionBind(String code) {\n    Node n = parseTestCode(code);\n    assertNull(conv.describeFunctionBind(n.getFirstChild()));\n  }\n",
        "begin_line": 206,
        "end_line": 209,
        "comment": "",
        "child_ranges": [
            "(line 207,col 5)-(line 207,col 33)",
            "(line 208,col 5)-(line 208,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertRequire(java.lang.String)",
        "snippet": "  private void assertRequire(String code) {\n    Node n = parseTestCode(code);\n    assertNotNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));\n  }\n",
        "begin_line": 211,
        "end_line": 214,
        "comment": "",
        "child_ranges": [
            "(line 212,col 5)-(line 212,col 33)",
            "(line 213,col 5)-(line 213,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertNotRequire(java.lang.String)",
        "snippet": "  private void assertNotRequire(String code) {\n    Node n = parseTestCode(code);\n    assertNull(conv.extractClassNameIfRequire(n.getFirstChild(), n));\n  }\n",
        "begin_line": 216,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 217,col 5)-(line 217,col 33)",
            "(line 218,col 5)-(line 218,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertNotObjectLiteralCast(java.lang.String)",
        "snippet": "  private void assertNotObjectLiteralCast(String code) {\n    Node n = parseTestCode(code);\n    assertNull(conv.getObjectLiteralCast(null, n.getFirstChild()));\n  }\n",
        "begin_line": 221,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 33)",
            "(line 223,col 5)-(line 223,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertObjectLiteralCast(java.lang.String)",
        "snippet": "  private void assertObjectLiteralCast(String code) {\n    Node n = parseTestCode(code);\n    assertNotNull(conv.getObjectLiteralCast(null, n.getFirstChild()));\n  }\n",
        "begin_line": 226,
        "end_line": 229,
        "comment": "",
        "child_ranges": [
            "(line 227,col 5)-(line 227,col 33)",
            "(line 228,col 5)-(line 228,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertNotClassDefining(java.lang.String)",
        "snippet": "  private void assertNotClassDefining(String code) {\n    Node n = parseTestCode(code);\n    assertNull(conv.getClassesDefinedByCall(n.getFirstChild()));\n  }\n",
        "begin_line": 231,
        "end_line": 234,
        "comment": "",
        "child_ranges": [
            "(line 232,col 5)-(line 232,col 33)",
            "(line 233,col 5)-(line 233,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.assertDefinesClasses(java.lang.String, java.lang.String, java.lang.String)",
        "snippet": "  private void assertDefinesClasses(String code, String subclassName,\n      String superclassName) {\n    Node n = parseTestCode(code);\n    SubclassRelationship classes =\n        conv.getClassesDefinedByCall(n.getFirstChild());\n    assertNotNull(classes);\n    assertEquals(subclassName, classes.subclassName);\n    assertEquals(superclassName, classes.superclassName);\n  }\n",
        "begin_line": 236,
        "end_line": 244,
        "comment": "",
        "child_ranges": [
            "(line 238,col 5)-(line 238,col 33)",
            "(line 239,col 5)-(line 240,col 56)",
            "(line 241,col 5)-(line 241,col 27)",
            "(line 242,col 5)-(line 242,col 53)",
            "(line 243,col 5)-(line 243,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConventionTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/ClosureCodingConventionTest.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConventionTest.parseTestCode(java.lang.String)",
        "snippet": "  private Node parseTestCode(String code) {\n    Compiler compiler = new Compiler();\n    return compiler.parseTestCode(code).getFirstChild();\n  }\n",
        "begin_line": 246,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 247,col 5)-(line 247,col 39)",
            "(line 248,col 5)-(line 248,col 56)"
        ]
    }
]