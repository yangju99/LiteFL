[
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.StringUtilsTest(java.lang.String)",
        "snippet": "    public StringUtilsTest(String name) {\n        super(name);\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 20)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        TestRunner.run(suite());\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 32)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.suite()",
        "snippet": "    public static Test suite() {\n        TestSuite suite = new TestSuite(StringUtilsTest.class);\n        suite.setName(\"StringUtilsTest Tests\");\n        return suite;\n    }\n",
        "begin_line": 103,
        "end_line": 107,
        "comment": "",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 63)",
            "(line 105,col 9)-(line 105,col 47)",
            "(line 106,col 9)-(line 106,col 21)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.setUp()",
        "snippet": "    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n    }\n",
        "begin_line": 109,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 22)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.tearDown()",
        "snippet": "    @Override\n    protected void tearDown() throws Exception {\n        super.tearDown();\n    }\n",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 25)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testConstructor()",
        "snippet": "    public void testConstructor() {\n        assertNotNull(new StringUtils());\n        Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n        assertEquals(1, cons.length);\n        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n    }\n",
        "begin_line": 120,
        "end_line": 127,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 121,col 9)-(line 121,col 41)",
            "(line 122,col 9)-(line 122,col 76)",
            "(line 123,col 9)-(line 123,col 37)",
            "(line 124,col 9)-(line 124,col 70)",
            "(line 125,col 9)-(line 125,col 80)",
            "(line 126,col 9)-(line 126,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCaseFunctions()",
        "snippet": "    public void testCaseFunctions() {\n        assertEquals(null, StringUtils.upperCase(null));\n        assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.lowerCase(null));\n        assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));\n        assertEquals(null, StringUtils.capitalize(null));\n        assertEquals(null, StringUtils.uncapitalize(null));\n\n        assertEquals(\"capitalize(empty-string) failed\",\n                     \"\", StringUtils.capitalize(\"\") );\n        assertEquals(\"capitalize(single-char-string) failed\",\n                     \"X\", StringUtils.capitalize(\"x\") );\n        assertEquals(\"uncapitalize(String) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n        assertEquals(\"uncapitalize(empty-string) failed\",\n                     \"\", StringUtils.uncapitalize(\"\") );\n        assertEquals(\"uncapitalize(single-char-string) failed\",\n                     \"x\", StringUtils.uncapitalize(\"X\") );\n                     \n        // reflection type of tests: Sentences.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n\n        // reflection type of tests: One word.\n        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n\n        assertEquals(\"upperCase(String) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n        assertEquals(\"upperCase(empty-string) failed\",\n                     \"\", StringUtils.upperCase(\"\") );\n        assertEquals(\"lowerCase(String) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n        assertEquals(\"lowerCase(empty-string) failed\",\n                     \"\", StringUtils.lowerCase(\"\") );\n\n        assertEquals(\"upperCase(String, Locale) failed\",\n                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"upperCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.upperCase(\"\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(String, Locale) failed\",\n                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\", Locale.ENGLISH) );\n        assertEquals(\"lowerCase(empty-string, Locale) failed\",\n                     \"\", StringUtils.lowerCase(\"\", Locale.ENGLISH) );\n    }\n",
        "begin_line": 130,
        "end_line": 178,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 131,col 9)-(line 131,col 56)",
            "(line 132,col 9)-(line 132,col 72)",
            "(line 133,col 9)-(line 133,col 56)",
            "(line 134,col 9)-(line 134,col 72)",
            "(line 135,col 9)-(line 135,col 57)",
            "(line 136,col 9)-(line 136,col 59)",
            "(line 138,col 9)-(line 139,col 54)",
            "(line 140,col 9)-(line 141,col 56)",
            "(line 142,col 9)-(line 143,col 68)",
            "(line 144,col 9)-(line 145,col 56)",
            "(line 146,col 9)-(line 147,col 58)",
            "(line 150,col 9)-(line 151,col 104)",
            "(line 152,col 9)-(line 153,col 100)",
            "(line 156,col 9)-(line 157,col 94)",
            "(line 158,col 9)-(line 159,col 90)",
            "(line 161,col 9)-(line 162,col 81)",
            "(line 163,col 9)-(line 164,col 53)",
            "(line 165,col 9)-(line 166,col 81)",
            "(line 167,col 9)-(line 168,col 53)",
            "(line 170,col 9)-(line 171,col 97)",
            "(line 172,col 9)-(line 173,col 69)",
            "(line 174,col 9)-(line 175,col 97)",
            "(line 176,col 9)-(line 177,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSwapCase_String()",
        "snippet": "    public void testSwapCase_String() {\n        assertEquals(null, StringUtils.swapCase(null));\n        assertEquals(\"\", StringUtils.swapCase(\"\"));\n        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n        \n        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\n        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n        \n        String test = \"This String contains a TitleCase character: \\u01C8\";\n        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n        assertEquals(expect, WordUtils.swapCase(test));\n    }\n",
        "begin_line": 180,
        "end_line": 195,
        "comment": "",
        "child_ranges": [
            "(line 181,col 9)-(line 181,col 55)",
            "(line 182,col 9)-(line 182,col 51)",
            "(line 183,col 9)-(line 183,col 55)",
            "(line 185,col 9)-(line 185,col 52)",
            "(line 186,col 9)-(line 186,col 52)",
            "(line 187,col 9)-(line 187,col 78)",
            "(line 188,col 9)-(line 188,col 78)",
            "(line 189,col 9)-(line 189,col 78)",
            "(line 190,col 9)-(line 190,col 78)",
            "(line 192,col 9)-(line 192,col 75)",
            "(line 193,col 9)-(line 193,col 77)",
            "(line 194,col 9)-(line 194,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_Objectarray()",
        "snippet": "    public void testJoin_Objectarray() {\n        assertEquals(null, StringUtils.join(null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n    }\n",
        "begin_line": 198,
        "end_line": 206,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 51)",
            "(line 200,col 9)-(line 200,col 61)",
            "(line 201,col 9)-(line 201,col 60)",
            "(line 202,col 9)-(line 202,col 76)",
            "(line 203,col 9)-(line 203,col 74)",
            "(line 204,col 9)-(line 204,col 64)",
            "(line 205,col 9)-(line 205,col 64)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayChar()",
        "snippet": "    public void testJoin_ArrayChar() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n    }\n",
        "begin_line": 208,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 209,col 9)-(line 209,col 67)",
            "(line 210,col 9)-(line 210,col 83)",
            "(line 211,col 9)-(line 211,col 77)",
            "(line 212,col 9)-(line 212,col 82)",
            "(line 213,col 9)-(line 213,col 81)",
            "(line 215,col 9)-(line 215,col 97)",
            "(line 216,col 9)-(line 216,col 74)",
            "(line 217,col 9)-(line 217,col 76)",
            "(line 218,col 9)-(line 218,col 72)",
            "(line 219,col 9)-(line 219,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_ArrayString()",
        "snippet": "    public void testJoin_ArrayString() {\n        assertEquals(null, StringUtils.join((Object[]) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n        \n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n        \n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n    }\n",
        "begin_line": 222,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 68)",
            "(line 224,col 9)-(line 224,col 74)",
            "(line 225,col 9)-(line 225,col 72)",
            "(line 227,col 9)-(line 227,col 66)",
            "(line 229,col 9)-(line 229,col 67)",
            "(line 230,col 9)-(line 230,col 65)",
            "(line 231,col 9)-(line 231,col 72)",
            "(line 233,col 9)-(line 233,col 73)",
            "(line 234,col 9)-(line 234,col 77)",
            "(line 235,col 9)-(line 235,col 76)",
            "(line 237,col 9)-(line 237,col 97)",
            "(line 238,col 9)-(line 238,col 95)",
            "(line 239,col 9)-(line 239,col 74)",
            "(line 240,col 9)-(line 240,col 76)",
            "(line 241,col 9)-(line 241,col 72)",
            "(line 242,col 9)-(line 242,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorChar()",
        "snippet": "    public void testJoin_IteratorChar() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n    }\n",
        "begin_line": 245,
        "end_line": 251,
        "comment": "",
        "child_ranges": [
            "(line 246,col 9)-(line 246,col 70)",
            "(line 247,col 9)-(line 247,col 109)",
            "(line 248,col 9)-(line 248,col 102)",
            "(line 249,col 9)-(line 249,col 103)",
            "(line 250,col 9)-(line 250,col 92)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IteratorString()",
        "snippet": "    public void testJoin_IteratorString() {\n        assertEquals(null, StringUtils.join((Iterator<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n        \n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n        \n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n    }\n",
        "begin_line": 253,
        "end_line": 267,
        "comment": "",
        "child_ranges": [
            "(line 254,col 9)-(line 254,col 71)",
            "(line 255,col 9)-(line 255,col 100)",
            "(line 256,col 9)-(line 256,col 98)",
            "(line 257,col 9)-(line 257,col 92)",
            "(line 258,col 9)-(line 258,col 93)",
            "(line 260,col 9)-(line 260,col 92)",
            "(line 262,col 9)-(line 262,col 93)",
            "(line 263,col 9)-(line 263,col 91)",
            "(line 264,col 9)-(line 264,col 98)",
            "(line 266,col 9)-(line 266,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableChar()",
        "snippet": "    public void testJoin_IterableChar() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, ','));\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n    }\n",
        "begin_line": 269,
        "end_line": 275,
        "comment": "",
        "child_ranges": [
            "(line 270,col 9)-(line 270,col 70)",
            "(line 271,col 9)-(line 271,col 98)",
            "(line 272,col 9)-(line 272,col 91)",
            "(line 273,col 9)-(line 273,col 92)",
            "(line 274,col 9)-(line 274,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testJoin_IterableString()",
        "snippet": "    public void testJoin_IterableString() {\n        assertEquals(null, StringUtils.join((Iterable<?>) null, null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n\n        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n    }\n",
        "begin_line": 277,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 278,col 9)-(line 278,col 71)",
            "(line 279,col 9)-(line 279,col 89)",
            "(line 280,col 9)-(line 280,col 87)",
            "(line 281,col 9)-(line 281,col 81)",
            "(line 282,col 9)-(line 282,col 82)",
            "(line 284,col 9)-(line 284,col 81)",
            "(line 286,col 9)-(line 286,col 82)",
            "(line 287,col 9)-(line 287,col 80)",
            "(line 288,col 9)-(line 288,col 87)",
            "(line 290,col 9)-(line 290,col 88)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_String()",
        "snippet": "    public void testSplit_String() {\n        assertEquals(null, StringUtils.split(null));\n        assertEquals(0, StringUtils.split(\"\").length);\n        \n        String str = \"a b  .c\";\n        String[] res = StringUtils.split(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a \";\n        res = StringUtils.split(str);\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.split(str);\n        assertEquals(2, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n    }\n",
        "begin_line": 293,
        "end_line": 314,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 52)",
            "(line 295,col 9)-(line 295,col 54)",
            "(line 297,col 9)-(line 297,col 31)",
            "(line 298,col 9)-(line 298,col 46)",
            "(line 299,col 9)-(line 299,col 36)",
            "(line 300,col 9)-(line 300,col 34)",
            "(line 301,col 9)-(line 301,col 34)",
            "(line 302,col 9)-(line 302,col 35)",
            "(line 304,col 9)-(line 304,col 20)",
            "(line 305,col 9)-(line 305,col 37)",
            "(line 306,col 9)-(line 306,col 36)",
            "(line 307,col 9)-(line 307,col 34)",
            "(line 309,col 9)-(line 309,col 60)",
            "(line 310,col 9)-(line 310,col 37)",
            "(line 311,col 9)-(line 311,col 36)",
            "(line 312,col 9)-(line 312,col 34)",
            "(line 313,col 9)-(line 313,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringChar()",
        "snippet": "    public void testSplit_StringChar() {\n        assertEquals(null, StringUtils.split(null, '.'));\n        assertEquals(0, StringUtils.split(\"\", '.').length);\n\n        String str = \"a.b.. c\";\n        String[] res = StringUtils.split(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \".a.\";\n        res = StringUtils.split(str, '.');\n        assertEquals(1, res.length);\n        assertEquals(\"a\", res[0]);\n        \n        str = \"a b c\";\n        res = StringUtils.split(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n    }\n",
        "begin_line": 316,
        "end_line": 338,
        "comment": "",
        "child_ranges": [
            "(line 317,col 9)-(line 317,col 57)",
            "(line 318,col 9)-(line 318,col 59)",
            "(line 320,col 9)-(line 320,col 31)",
            "(line 321,col 9)-(line 321,col 51)",
            "(line 322,col 9)-(line 322,col 36)",
            "(line 323,col 9)-(line 323,col 34)",
            "(line 324,col 9)-(line 324,col 34)",
            "(line 325,col 9)-(line 325,col 35)",
            "(line 327,col 9)-(line 327,col 20)",
            "(line 328,col 9)-(line 328,col 42)",
            "(line 329,col 9)-(line 329,col 36)",
            "(line 330,col 9)-(line 330,col 34)",
            "(line 332,col 9)-(line 332,col 22)",
            "(line 333,col 9)-(line 333,col 41)",
            "(line 334,col 9)-(line 334,col 36)",
            "(line 335,col 9)-(line 335,col 34)",
            "(line 336,col 9)-(line 336,col 34)",
            "(line 337,col 9)-(line 337,col 34)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplit_StringString_StringStringInt()",
        "snippet": "    public void testSplit_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.split(null, \".\"));\n        assertEquals(null, StringUtils.split(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.split(\"\", \".\").length);\n        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n        \n        innerTestSplit('.', \".\", ' ');\n        innerTestSplit('.', \".\", ',');\n        innerTestSplit('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n        \n        String[] results = null;\n        String[] expectedResults = {\"ab\", \"de fg\"};\n        results = StringUtils.split(\"ab   de fg\", null, 2);\n        assertEquals(expectedResults.length, results.length);\n        for (int i = 0; i < expectedResults.length; i++) {\n            assertEquals(expectedResults[i], results[i]);\n        }\n        \n        String[] expectedResults2 = {\"ab\", \"cd:ef\"};\n        results = StringUtils.split(\"ab:cd:ef\",\":\", 2);\n        assertEquals(expectedResults2.length, results.length);\n        for (int i = 0; i < expectedResults2.length; i++) {\n            assertEquals(expectedResults2[i], results[i]);\n        }\n    }\n",
        "begin_line": 340,
        "end_line": 371,
        "comment": "",
        "child_ranges": [
            "(line 341,col 9)-(line 341,col 57)",
            "(line 342,col 9)-(line 342,col 60)",
            "(line 344,col 9)-(line 344,col 59)",
            "(line 345,col 9)-(line 345,col 62)",
            "(line 347,col 9)-(line 347,col 38)",
            "(line 348,col 9)-(line 348,col 38)",
            "(line 349,col 9)-(line 349,col 39)",
            "(line 350,col 9)-(line 355,col 9)",
            "(line 357,col 9)-(line 357,col 32)",
            "(line 358,col 9)-(line 358,col 51)",
            "(line 359,col 9)-(line 359,col 59)",
            "(line 360,col 9)-(line 360,col 61)",
            "(line 361,col 9)-(line 363,col 9)",
            "(line 365,col 9)-(line 365,col 52)",
            "(line 366,col 9)-(line 366,col 55)",
            "(line 367,col 9)-(line 367,col 62)",
            "(line 368,col 9)-(line 370,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplit(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.split(str, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.split(str2, sepStr);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, \"a\", res[0]);\n\n        res = StringUtils.split(str, sepStr, -1);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 0);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, noMatch + \"c\", res[2]);\n        \n        res = StringUtils.split(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.split(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n",
        "begin_line": 373,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 374,col 9)-(line 375,col 91)",
            "(line 377,col 9)-(line 377,col 89)",
            "(line 378,col 9)-(line 378,col 21)",
            "(line 380,col 9)-(line 380,col 45)",
            "(line 381,col 9)-(line 381,col 41)",
            "(line 382,col 9)-(line 382,col 39)",
            "(line 383,col 9)-(line 383,col 39)",
            "(line 384,col 9)-(line 384,col 49)",
            "(line 386,col 9)-(line 386,col 56)",
            "(line 387,col 9)-(line 387,col 46)",
            "(line 388,col 9)-(line 388,col 41)",
            "(line 389,col 9)-(line 389,col 39)",
            "(line 391,col 9)-(line 391,col 49)",
            "(line 392,col 9)-(line 392,col 41)",
            "(line 393,col 9)-(line 393,col 39)",
            "(line 394,col 9)-(line 394,col 39)",
            "(line 395,col 9)-(line 395,col 49)",
            "(line 397,col 9)-(line 397,col 48)",
            "(line 398,col 9)-(line 398,col 41)",
            "(line 399,col 9)-(line 399,col 39)",
            "(line 400,col 9)-(line 400,col 39)",
            "(line 401,col 9)-(line 401,col 49)",
            "(line 403,col 9)-(line 403,col 48)",
            "(line 404,col 9)-(line 404,col 41)",
            "(line 405,col 9)-(line 405,col 39)",
            "(line 407,col 9)-(line 407,col 48)",
            "(line 408,col 9)-(line 408,col 41)",
            "(line 409,col 9)-(line 409,col 39)",
            "(line 410,col 9)-(line 410,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBoolean()",
        "snippet": "    public void testSplitByWholeString_StringStringBoolean() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\" ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n\n        String[] splitWithMultipleSeparatorExpectedResults = {\"ab\", \"cd\", \"ef\"};\n        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );\n        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {\n            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;\n        }\n    }\n",
        "begin_line": 413,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 414,col 9)-(line 414,col 78)",
            "(line 416,col 9)-(line 416,col 80)",
            "(line 418,col 9)-(line 418,col 52)",
            "(line 419,col 9)-(line 419,col 68)",
            "(line 421,col 9)-(line 421,col 103)",
            "(line 422,col 9)-(line 422,col 86)",
            "(line 423,col 9)-(line 425,col 9)",
            "(line 427,col 9)-(line 427,col 86)",
            "(line 429,col 9)-(line 429,col 84)",
            "(line 430,col 9)-(line 430,col 123)",
            "(line 431,col 9)-(line 431,col 90)",
            "(line 432,col 9)-(line 434,col 9)",
            "(line 436,col 9)-(line 436,col 80)",
            "(line 437,col 9)-(line 437,col 98)",
            "(line 438,col 9)-(line 438,col 108)",
            "(line 439,col 9)-(line 441,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeString_StringStringBooleanInt()",
        "snippet": "    public void testSplitByWholeString_StringStringBooleanInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n\n        String stringToSplitOnNulls = \"ab   de fg\" ;\n        String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n\n        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\n        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n        }\n\n        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\" ;\n\n        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" } ;\n        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\", 2 ) ;\n        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {\n            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n        }\n    }\n",
        "begin_line": 444,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 81)",
            "(line 447,col 9)-(line 447,col 83)",
            "(line 449,col 9)-(line 449,col 52)",
            "(line 450,col 9)-(line 450,col 65)",
            "(line 453,col 9)-(line 453,col 106)",
            "(line 454,col 9)-(line 454,col 86)",
            "(line 455,col 9)-(line 457,col 9)",
            "(line 459,col 9)-(line 459,col 104)",
            "(line 461,col 9)-(line 461,col 102)",
            "(line 463,col 9)-(line 463,col 126)",
            "(line 464,col 9)-(line 464,col 90)",
            "(line 465,col 9)-(line 467,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByWholeSeparatorPreserveAllTokens_StringStringInt()",
        "snippet": "    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n        assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n\n        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( \"\", \".\", -1 ).length ) ;\n\n        // test whitespace\n        String input = \"ab   de fg\" ;\n        String[] expected = new String[] { \"ab\", \"\", \"\", \"de\", \"fg\" } ;\n\n        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter singlechar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter multichar\n        input = \"1::2:::3::::4\";\n        expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \"::\", -1 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n\n        // test delimiter char with max\n        input = \"1::2::3:4\";\n        expected = new String[] { \"1\", \"\", \"2\", \":3:4\" };\n\n        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", 4 ) ;\n        assertEquals( expected.length, actual.length ) ;\n        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n            assertEquals( expected[i], actual[i] );\n        }\n    }\n",
        "begin_line": 470,
        "end_line": 514,
        "comment": "",
        "child_ranges": [
            "(line 471,col 9)-(line 471,col 99)",
            "(line 473,col 9)-(line 473,col 101)",
            "(line 476,col 9)-(line 476,col 37)",
            "(line 477,col 9)-(line 477,col 71)",
            "(line 479,col 9)-(line 479,col 97)",
            "(line 480,col 9)-(line 480,col 56)",
            "(line 481,col 9)-(line 483,col 9)",
            "(line 486,col 9)-(line 486,col 32)",
            "(line 487,col 9)-(line 487,col 79)",
            "(line 489,col 9)-(line 489,col 87)",
            "(line 490,col 9)-(line 490,col 56)",
            "(line 491,col 9)-(line 493,col 9)",
            "(line 496,col 9)-(line 496,col 32)",
            "(line 497,col 9)-(line 497,col 60)",
            "(line 499,col 9)-(line 499,col 88)",
            "(line 500,col 9)-(line 500,col 56)",
            "(line 501,col 9)-(line 503,col 9)",
            "(line 506,col 9)-(line 506,col 28)",
            "(line 507,col 9)-(line 507,col 57)",
            "(line 509,col 9)-(line 509,col 86)",
            "(line 510,col 9)-(line 510,col 56)",
            "(line 511,col 9)-(line 513,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_String()",
        "snippet": "    public void testSplitPreserveAllTokens_String() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n        \n        String str = \"abc def\";\n        String[] res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(2, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"def\", res[1]);\n        \n        str = \"abc  def\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"abc\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"def\", res[2]);\n        \n        str = \" abc \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"abc\", res[1]);\n        assertEquals(\"\", res[2]);\n        \n        str = \"a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\".c\", res[2]);\n        \n        str = \" a b .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\".c\", res[3]);\n        \n        str = \"a  b  .c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\".c\", res[4]);\n        \n        str = \" a  \";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \" a  b\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"b\", res[3]);\n\n        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n        res = StringUtils.splitPreserveAllTokens(str);\n        assertEquals(WHITESPACE.length() + 1, res.length);\n        assertEquals(\"a\", res[0]);\n        for(int i = 1; i < WHITESPACE.length()-1; i++)\n        {\n          assertEquals(\"\", res[i]);\n        }\n        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n    }\n",
        "begin_line": 516,
        "end_line": 589,
        "comment": "",
        "child_ranges": [
            "(line 517,col 9)-(line 517,col 69)",
            "(line 518,col 9)-(line 518,col 71)",
            "(line 520,col 9)-(line 520,col 31)",
            "(line 521,col 9)-(line 521,col 63)",
            "(line 522,col 9)-(line 522,col 36)",
            "(line 523,col 9)-(line 523,col 36)",
            "(line 524,col 9)-(line 524,col 36)",
            "(line 526,col 9)-(line 526,col 25)",
            "(line 527,col 9)-(line 527,col 54)",
            "(line 528,col 9)-(line 528,col 36)",
            "(line 529,col 9)-(line 529,col 36)",
            "(line 530,col 9)-(line 530,col 33)",
            "(line 531,col 9)-(line 531,col 36)",
            "(line 533,col 9)-(line 533,col 22)",
            "(line 534,col 9)-(line 534,col 54)",
            "(line 535,col 9)-(line 535,col 36)",
            "(line 536,col 9)-(line 536,col 33)",
            "(line 537,col 9)-(line 537,col 36)",
            "(line 538,col 9)-(line 538,col 33)",
            "(line 540,col 9)-(line 540,col 23)",
            "(line 541,col 9)-(line 541,col 54)",
            "(line 542,col 9)-(line 542,col 36)",
            "(line 543,col 9)-(line 543,col 34)",
            "(line 544,col 9)-(line 544,col 34)",
            "(line 545,col 9)-(line 545,col 35)",
            "(line 547,col 9)-(line 547,col 24)",
            "(line 548,col 9)-(line 548,col 54)",
            "(line 549,col 9)-(line 549,col 36)",
            "(line 550,col 9)-(line 550,col 33)",
            "(line 551,col 9)-(line 551,col 34)",
            "(line 552,col 9)-(line 552,col 34)",
            "(line 553,col 9)-(line 553,col 35)",
            "(line 555,col 9)-(line 555,col 25)",
            "(line 556,col 9)-(line 556,col 54)",
            "(line 557,col 9)-(line 557,col 36)",
            "(line 558,col 9)-(line 558,col 34)",
            "(line 559,col 9)-(line 559,col 33)",
            "(line 560,col 9)-(line 560,col 34)",
            "(line 561,col 9)-(line 561,col 33)",
            "(line 562,col 9)-(line 562,col 35)",
            "(line 564,col 9)-(line 564,col 21)",
            "(line 565,col 9)-(line 565,col 54)",
            "(line 566,col 9)-(line 566,col 36)",
            "(line 567,col 9)-(line 567,col 33)",
            "(line 568,col 9)-(line 568,col 34)",
            "(line 569,col 9)-(line 569,col 33)",
            "(line 570,col 9)-(line 570,col 33)",
            "(line 572,col 9)-(line 572,col 22)",
            "(line 573,col 9)-(line 573,col 54)",
            "(line 574,col 9)-(line 574,col 36)",
            "(line 575,col 9)-(line 575,col 33)",
            "(line 576,col 9)-(line 576,col 34)",
            "(line 577,col 9)-(line 577,col 33)",
            "(line 578,col 9)-(line 578,col 34)",
            "(line 580,col 9)-(line 580,col 60)",
            "(line 581,col 9)-(line 581,col 54)",
            "(line 582,col 9)-(line 582,col 58)",
            "(line 583,col 9)-(line 583,col 34)",
            "(line 584,col 9)-(line 587,col 9)",
            "(line 588,col 9)-(line 588,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringChar()",
        "snippet": "    public void testSplitPreserveAllTokens_StringChar() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n\n        String str = \"a.b. c\";\n        String[] res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\" c\", res[2]);\n            \n        str = \"a.b.. c\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\" c\", res[3]);\n\n        str = \".a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n       \n        str = \".a..\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a.\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"\", res[3]);\n        \n        str = \"..a\";\n        res = StringUtils.splitPreserveAllTokens(str, '.');\n        assertEquals(3, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        \n        str = \"a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(3, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n\n        str = \"a  b  c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"c\", res[4]);\n        \n        str = \" a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"a\", res[1]);\n        assertEquals(\"b\", res[2]);\n        assertEquals(\"c\", res[3]);\n\n        str = \"  a b c\";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"\", res[0]);\n        assertEquals(\"\", res[1]);\n        assertEquals(\"a\", res[2]);\n        assertEquals(\"b\", res[3]);\n        assertEquals(\"c\", res[4]);\n\n        str = \"a b c \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(4, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n\n        str = \"a b c  \";\n        res = StringUtils.splitPreserveAllTokens(str,' ');\n        assertEquals(5, res.length);\n        assertEquals(\"a\", res[0]);\n        assertEquals(\"b\", res[1]);\n        assertEquals(\"c\", res[2]);\n        assertEquals(\"\", res[3]);\n        assertEquals(\"\", res[3]);\n\n        // Match example in javadoc\n        {\n          String[] results = null;\n          String[] expectedResults = {\"a\", \"\", \"b\", \"c\"};\n          results = StringUtils.splitPreserveAllTokens(\"a..b.c\",'.');\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n    }\n",
        "begin_line": 591,
        "end_line": 700,
        "comment": "",
        "child_ranges": [
            "(line 592,col 9)-(line 592,col 74)",
            "(line 593,col 9)-(line 593,col 76)",
            "(line 595,col 9)-(line 595,col 30)",
            "(line 596,col 9)-(line 596,col 68)",
            "(line 597,col 9)-(line 597,col 36)",
            "(line 598,col 9)-(line 598,col 34)",
            "(line 599,col 9)-(line 599,col 34)",
            "(line 600,col 9)-(line 600,col 35)",
            "(line 602,col 9)-(line 602,col 24)",
            "(line 603,col 9)-(line 603,col 59)",
            "(line 604,col 9)-(line 604,col 36)",
            "(line 605,col 9)-(line 605,col 34)",
            "(line 606,col 9)-(line 606,col 34)",
            "(line 607,col 9)-(line 607,col 33)",
            "(line 608,col 9)-(line 608,col 35)",
            "(line 610,col 9)-(line 610,col 20)",
            "(line 611,col 9)-(line 611,col 59)",
            "(line 612,col 9)-(line 612,col 36)",
            "(line 613,col 9)-(line 613,col 33)",
            "(line 614,col 9)-(line 614,col 34)",
            "(line 615,col 9)-(line 615,col 33)",
            "(line 617,col 9)-(line 617,col 21)",
            "(line 618,col 9)-(line 618,col 59)",
            "(line 619,col 9)-(line 619,col 36)",
            "(line 620,col 9)-(line 620,col 33)",
            "(line 621,col 9)-(line 621,col 34)",
            "(line 622,col 9)-(line 622,col 33)",
            "(line 623,col 9)-(line 623,col 33)",
            "(line 625,col 9)-(line 625,col 21)",
            "(line 626,col 9)-(line 626,col 59)",
            "(line 627,col 9)-(line 627,col 36)",
            "(line 628,col 9)-(line 628,col 33)",
            "(line 629,col 9)-(line 629,col 33)",
            "(line 630,col 9)-(line 630,col 34)",
            "(line 631,col 9)-(line 631,col 33)",
            "(line 633,col 9)-(line 633,col 20)",
            "(line 634,col 9)-(line 634,col 59)",
            "(line 635,col 9)-(line 635,col 36)",
            "(line 636,col 9)-(line 636,col 33)",
            "(line 637,col 9)-(line 637,col 33)",
            "(line 638,col 9)-(line 638,col 34)",
            "(line 640,col 9)-(line 640,col 22)",
            "(line 641,col 9)-(line 641,col 58)",
            "(line 642,col 9)-(line 642,col 36)",
            "(line 643,col 9)-(line 643,col 34)",
            "(line 644,col 9)-(line 644,col 34)",
            "(line 645,col 9)-(line 645,col 34)",
            "(line 647,col 9)-(line 647,col 24)",
            "(line 648,col 9)-(line 648,col 58)",
            "(line 649,col 9)-(line 649,col 36)",
            "(line 650,col 9)-(line 650,col 34)",
            "(line 651,col 9)-(line 651,col 33)",
            "(line 652,col 9)-(line 652,col 34)",
            "(line 653,col 9)-(line 653,col 33)",
            "(line 654,col 9)-(line 654,col 34)",
            "(line 656,col 9)-(line 656,col 23)",
            "(line 657,col 9)-(line 657,col 58)",
            "(line 658,col 9)-(line 658,col 36)",
            "(line 659,col 9)-(line 659,col 33)",
            "(line 660,col 9)-(line 660,col 34)",
            "(line 661,col 9)-(line 661,col 34)",
            "(line 662,col 9)-(line 662,col 34)",
            "(line 664,col 9)-(line 664,col 24)",
            "(line 665,col 9)-(line 665,col 58)",
            "(line 666,col 9)-(line 666,col 36)",
            "(line 667,col 9)-(line 667,col 33)",
            "(line 668,col 9)-(line 668,col 33)",
            "(line 669,col 9)-(line 669,col 34)",
            "(line 670,col 9)-(line 670,col 34)",
            "(line 671,col 9)-(line 671,col 34)",
            "(line 673,col 9)-(line 673,col 23)",
            "(line 674,col 9)-(line 674,col 58)",
            "(line 675,col 9)-(line 675,col 36)",
            "(line 676,col 9)-(line 676,col 34)",
            "(line 677,col 9)-(line 677,col 34)",
            "(line 678,col 9)-(line 678,col 34)",
            "(line 679,col 9)-(line 679,col 33)",
            "(line 681,col 9)-(line 681,col 24)",
            "(line 682,col 9)-(line 682,col 58)",
            "(line 683,col 9)-(line 683,col 36)",
            "(line 684,col 9)-(line 684,col 34)",
            "(line 685,col 9)-(line 685,col 34)",
            "(line 686,col 9)-(line 686,col 34)",
            "(line 687,col 9)-(line 687,col 33)",
            "(line 688,col 9)-(line 688,col 33)",
            "(line 691,col 9)-(line 699,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitPreserveAllTokens_StringString_StringStringInt()",
        "snippet": "    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n        \n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n        \n        innerTestSplitPreserveAllTokens('.', \".\", ' ');\n        innerTestSplitPreserveAllTokens('.', \".\", ',');\n        innerTestSplitPreserveAllTokens('.', \".,\", 'x');\n        for (int i = 0; i < WHITESPACE.length(); i++) {\n            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n            }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"  de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"::de:fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] expectedResults = {\"ab\", \"cd:ef\"};\n          String[] results = null;\n          results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n\n        {\n          String[] results = null;\n          String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n        {\n          String[] results = null;\n          String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n          results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n          assertEquals(expectedResults.length, results.length);\n          for (int i = 0; i < expectedResults.length; i++) {\n              assertEquals(expectedResults[i], results[i]);\n          }\n        }\n        \n    }\n",
        "begin_line": 702,
        "end_line": 829,
        "comment": "",
        "child_ranges": [
            "(line 703,col 9)-(line 703,col 74)",
            "(line 704,col 9)-(line 704,col 77)",
            "(line 706,col 9)-(line 706,col 76)",
            "(line 707,col 9)-(line 707,col 79)",
            "(line 709,col 9)-(line 709,col 55)",
            "(line 710,col 9)-(line 710,col 55)",
            "(line 711,col 9)-(line 711,col 56)",
            "(line 712,col 9)-(line 717,col 9)",
            "(line 719,col 9)-(line 727,col 9)",
            "(line 729,col 9)-(line 737,col 9)",
            "(line 739,col 9)-(line 747,col 9)",
            "(line 749,col 9)-(line 757,col 9)",
            "(line 759,col 9)-(line 767,col 9)",
            "(line 769,col 9)-(line 777,col 9)",
            "(line 779,col 9)-(line 787,col 9)",
            "(line 789,col 9)-(line 797,col 9)",
            "(line 799,col 9)-(line 807,col 9)",
            "(line 809,col 9)-(line 817,col 9)",
            "(line 819,col 9)-(line 827,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.innerTestSplitPreserveAllTokens(char, java.lang.String, char)",
        "snippet": "    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n        \n        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n        String[] res;\n        // (str, sepStr)\n        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        final String str2 = separator + \"a\" + separator;\n        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n        assertEquals(msg, 3, res.length);\n        assertEquals(msg, \"\", res[0]);\n        assertEquals(msg, \"a\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n\n        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n        assertEquals(msg, 4, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, \"b\", res[1]);\n        assertEquals(msg, \"\", res[2]);\n        assertEquals(msg, noMatch + \"c\", res[3]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n        assertEquals(msg, 1, res.length);\n        assertEquals(msg, str, res[0]);\n        \n        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n        assertEquals(msg, 2, res.length);\n        assertEquals(msg, \"a\", res[0]);\n        assertEquals(msg, str.substring(2), res[1]);\n    }\n",
        "begin_line": 831,
        "end_line": 874,
        "comment": "",
        "child_ranges": [
            "(line 832,col 9)-(line 833,col 91)",
            "(line 835,col 9)-(line 835,col 89)",
            "(line 836,col 9)-(line 836,col 21)",
            "(line 838,col 9)-(line 838,col 62)",
            "(line 839,col 9)-(line 839,col 41)",
            "(line 840,col 9)-(line 840,col 39)",
            "(line 841,col 9)-(line 841,col 39)",
            "(line 842,col 9)-(line 842,col 38)",
            "(line 843,col 9)-(line 843,col 49)",
            "(line 845,col 9)-(line 845,col 56)",
            "(line 846,col 9)-(line 846,col 63)",
            "(line 847,col 9)-(line 847,col 41)",
            "(line 848,col 9)-(line 848,col 38)",
            "(line 849,col 9)-(line 849,col 39)",
            "(line 850,col 9)-(line 850,col 38)",
            "(line 852,col 9)-(line 852,col 66)",
            "(line 853,col 9)-(line 853,col 41)",
            "(line 854,col 9)-(line 854,col 39)",
            "(line 855,col 9)-(line 855,col 39)",
            "(line 856,col 9)-(line 856,col 38)",
            "(line 857,col 9)-(line 857,col 49)",
            "(line 859,col 9)-(line 859,col 65)",
            "(line 860,col 9)-(line 860,col 41)",
            "(line 861,col 9)-(line 861,col 39)",
            "(line 862,col 9)-(line 862,col 39)",
            "(line 863,col 9)-(line 863,col 38)",
            "(line 864,col 9)-(line 864,col 49)",
            "(line 866,col 9)-(line 866,col 65)",
            "(line 867,col 9)-(line 867,col 41)",
            "(line 868,col 9)-(line 868,col 39)",
            "(line 870,col 9)-(line 870,col 65)",
            "(line 871,col 9)-(line 871,col 41)",
            "(line 872,col 9)-(line 872,col 39)",
            "(line 873,col 9)-(line 873,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterType()",
        "snippet": "    public void testSplitByCharacterType() {\n        assertNull(StringUtils.splitByCharacterType(null));\n        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n        \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n        \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterType(\"number5\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"fooBar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n                StringUtils.splitByCharacterType(\"foo200Bar\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n                StringUtils.splitByCharacterType(\"ASFRules\")));\n    }\n",
        "begin_line": 876,
        "end_line": 900,
        "comment": "",
        "child_ranges": [
            "(line 877,col 9)-(line 877,col 59)",
            "(line 878,col 9)-(line 878,col 69)",
            "(line 880,col 9)-(line 881,col 63)",
            "(line 883,col 9)-(line 884,col 65)",
            "(line 886,col 9)-(line 887,col 63)",
            "(line 889,col 9)-(line 890,col 62)",
            "(line 892,col 9)-(line 893,col 61)",
            "(line 895,col 9)-(line 896,col 64)",
            "(line 898,col 9)-(line 899,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testSplitByCharacterTypeCamelCase()",
        "snippet": "    public void testSplitByCharacterTypeCamelCase() {\n        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n                \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n        \n        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n\n        assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n    }\n",
        "begin_line": 902,
        "end_line": 926,
        "comment": "",
        "child_ranges": [
            "(line 903,col 9)-(line 903,col 68)",
            "(line 904,col 9)-(line 904,col 78)",
            "(line 906,col 9)-(line 907,col 80)",
            "(line 909,col 9)-(line 910,col 82)",
            "(line 912,col 9)-(line 913,col 80)",
            "(line 915,col 9)-(line 916,col 71)",
            "(line 918,col 9)-(line 919,col 70)",
            "(line 921,col 9)-(line 922,col 73)",
            "(line 924,col 9)-(line 925,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDeleteWhitespace_String()",
        "snippet": "    public void testDeleteWhitespace_String() {\n        assertEquals(null, StringUtils.deleteWhitespace(null));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n        // Note: u-2007 and u-000A both cause problems in the source code\n        // it should ignore 2007 but delete 000A\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n    }\n",
        "begin_line": 928,
        "end_line": 939,
        "comment": "",
        "child_ranges": [
            "(line 929,col 9)-(line 929,col 63)",
            "(line 930,col 9)-(line 930,col 59)",
            "(line 931,col 9)-(line 931,col 92)",
            "(line 932,col 9)-(line 932,col 83)",
            "(line 933,col 9)-(line 933,col 115)",
            "(line 936,col 9)-(line 936,col 98)",
            "(line 937,col 9)-(line 937,col 83)",
            "(line 938,col 9)-(line 938,col 96)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringString()",
        "snippet": "    public void testReplace_StringStringString() {\n        assertEquals(null, StringUtils.replace(null, null, null));\n        assertEquals(null, StringUtils.replace(null, null, \"any\"));\n        assertEquals(null, StringUtils.replace(null, \"any\", null));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n\n        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n       }\n",
        "begin_line": 941,
        "end_line": 960,
        "comment": "",
        "child_ranges": [
            "(line 942,col 9)-(line 942,col 66)",
            "(line 943,col 9)-(line 943,col 67)",
            "(line 944,col 9)-(line 944,col 67)",
            "(line 945,col 9)-(line 945,col 68)",
            "(line 947,col 9)-(line 947,col 62)",
            "(line 948,col 9)-(line 948,col 63)",
            "(line 949,col 9)-(line 949,col 63)",
            "(line 950,col 9)-(line 950,col 64)",
            "(line 952,col 9)-(line 952,col 67)",
            "(line 953,col 9)-(line 953,col 69)",
            "(line 954,col 9)-(line 954,col 67)",
            "(line 955,col 9)-(line 955,col 68)",
            "(line 957,col 9)-(line 957,col 70)",
            "(line 958,col 9)-(line 958,col 82)",
            "(line 959,col 9)-(line 959,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringStringInt()",
        "snippet": "    public void testReplace_StringStringStringInt() {\n        assertEquals(null, StringUtils.replace(null, null, null, 2));\n        assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", null, 2));\n        assertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n\n        assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\n        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n        \n        String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});\n        assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n        \n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\n        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n    }\n",
        "begin_line": 962,
        "end_line": 985,
        "comment": "",
        "child_ranges": [
            "(line 963,col 9)-(line 963,col 69)",
            "(line 964,col 9)-(line 964,col 70)",
            "(line 965,col 9)-(line 965,col 70)",
            "(line 966,col 9)-(line 966,col 71)",
            "(line 968,col 9)-(line 968,col 65)",
            "(line 969,col 9)-(line 969,col 66)",
            "(line 970,col 9)-(line 970,col 66)",
            "(line 971,col 9)-(line 971,col 67)",
            "(line 973,col 9)-(line 973,col 70)",
            "(line 974,col 9)-(line 974,col 63)",
            "(line 976,col 9)-(line 976,col 69)",
            "(line 977,col 9)-(line 977,col 72)",
            "(line 978,col 9)-(line 978,col 71)",
            "(line 979,col 9)-(line 979,col 70)",
            "(line 980,col 9)-(line 980,col 69)",
            "(line 981,col 9)-(line 981,col 68)",
            "(line 983,col 9)-(line 983,col 69)",
            "(line 984,col 9)-(line 984,col 71)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceOnce_StringStringString()",
        "snippet": "    public void testReplaceOnce_StringStringString() {\n        assertEquals(null, StringUtils.replaceOnce(null, null, null));\n        assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\n        assertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n\n        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n    }\n",
        "begin_line": 987,
        "end_line": 1004,
        "comment": "",
        "child_ranges": [
            "(line 988,col 9)-(line 988,col 70)",
            "(line 989,col 9)-(line 989,col 71)",
            "(line 990,col 9)-(line 990,col 71)",
            "(line 991,col 9)-(line 991,col 72)",
            "(line 993,col 9)-(line 993,col 66)",
            "(line 994,col 9)-(line 994,col 67)",
            "(line 995,col 9)-(line 995,col 67)",
            "(line 996,col 9)-(line 996,col 68)",
            "(line 998,col 9)-(line 998,col 71)",
            "(line 999,col 9)-(line 999,col 73)",
            "(line 1000,col 9)-(line 1000,col 71)",
            "(line 1001,col 9)-(line 1001,col 72)",
            "(line 1003,col 9)-(line 1003,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArray()",
        "snippet": "    public void testReplace_StringStringArrayStringArray() {\n\n        \n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n        //JAVADOC TESTS END\n\n        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\n            new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \n                \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \n                \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \n                \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\n            new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \n                \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n                \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n                \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n\n        // Test null safety inside arrays - LANG-552\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\n        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n    }\n",
        "begin_line": 1009,
        "end_line": 1040,
        "comment": "\n     * Test method for 'StringUtils.replaceEach(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1013,col 9)-(line 1013,col 88)",
            "(line 1014,col 9)-(line 1014,col 91)",
            "(line 1015,col 9)-(line 1015,col 71)",
            "(line 1016,col 9)-(line 1016,col 80)",
            "(line 1017,col 9)-(line 1017,col 80)",
            "(line 1018,col 9)-(line 1018,col 84)",
            "(line 1020,col 9)-(line 1020,col 94)",
            "(line 1021,col 9)-(line 1021,col 98)",
            "(line 1022,col 9)-(line 1022,col 111)",
            "(line 1023,col 9)-(line 1023,col 111)",
            "(line 1026,col 9)-(line 1026,col 108)",
            "(line 1027,col 9)-(line 1035,col 93)",
            "(line 1038,col 9)-(line 1038,col 98)",
            "(line 1039,col 9)-(line 1039,col 108)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplace_StringStringArrayStringArrayBoolean()",
        "snippet": "    public void testReplace_StringStringArrayStringArrayBoolean() {\n        //JAVADOC TESTS START\n        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n        assertEquals(StringUtils.replaceEachRepeatedly(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"tcte\");\n\n        try {\n            StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"});\n            fail(\"Should be a circular reference\");\n        } catch (IllegalStateException e) {}\n\n        //JAVADOC TESTS END\n\n    }\n",
        "begin_line": 1045,
        "end_line": 1066,
        "comment": "\n     * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\n     ",
        "child_ranges": [
            "(line 1047,col 9)-(line 1047,col 98)",
            "(line 1048,col 9)-(line 1048,col 101)",
            "(line 1049,col 9)-(line 1049,col 81)",
            "(line 1050,col 9)-(line 1050,col 90)",
            "(line 1051,col 9)-(line 1051,col 90)",
            "(line 1052,col 9)-(line 1052,col 90)",
            "(line 1054,col 9)-(line 1054,col 104)",
            "(line 1055,col 9)-(line 1055,col 108)",
            "(line 1056,col 9)-(line 1056,col 121)",
            "(line 1057,col 9)-(line 1057,col 121)",
            "(line 1059,col 9)-(line 1062,col 44)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringCharChar()",
        "snippet": "    public void testReplaceChars_StringCharChar() {\n        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n    }\n",
        "begin_line": 1068,
        "end_line": 1073,
        "comment": "",
        "child_ranges": [
            "(line 1069,col 9)-(line 1069,col 69)",
            "(line 1070,col 9)-(line 1070,col 65)",
            "(line 1071,col 9)-(line 1071,col 75)",
            "(line 1072,col 9)-(line 1072,col 75)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReplaceChars_StringStringString()",
        "snippet": "    public void testReplaceChars_StringStringString() {\n        assertEquals(null, StringUtils.replaceChars(null, null, null));\n        assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n        assertEquals(null, StringUtils.replaceChars(null, \"a\", null));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"\"));\n        assertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n        \n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n        \n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n        \n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n        \n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n        \n        // Javadoc examples:\n        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n        \n        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454\n        assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\n        assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\",\n            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n            \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n    }\n",
        "begin_line": 1075,
        "end_line": 1118,
        "comment": "",
        "child_ranges": [
            "(line 1076,col 9)-(line 1076,col 71)",
            "(line 1077,col 9)-(line 1077,col 69)",
            "(line 1078,col 9)-(line 1078,col 70)",
            "(line 1079,col 9)-(line 1079,col 69)",
            "(line 1080,col 9)-(line 1080,col 70)",
            "(line 1082,col 9)-(line 1082,col 67)",
            "(line 1083,col 9)-(line 1083,col 65)",
            "(line 1084,col 9)-(line 1084,col 66)",
            "(line 1085,col 9)-(line 1085,col 65)",
            "(line 1086,col 9)-(line 1086,col 66)",
            "(line 1088,col 9)-(line 1088,col 73)",
            "(line 1089,col 9)-(line 1089,col 71)",
            "(line 1090,col 9)-(line 1090,col 72)",
            "(line 1092,col 9)-(line 1092,col 71)",
            "(line 1093,col 9)-(line 1093,col 69)",
            "(line 1094,col 9)-(line 1094,col 70)",
            "(line 1096,col 9)-(line 1096,col 71)",
            "(line 1097,col 9)-(line 1097,col 69)",
            "(line 1098,col 9)-(line 1098,col 71)",
            "(line 1100,col 9)-(line 1100,col 77)",
            "(line 1101,col 9)-(line 1101,col 75)",
            "(line 1102,col 9)-(line 1102,col 78)",
            "(line 1104,col 9)-(line 1104,col 75)",
            "(line 1105,col 9)-(line 1105,col 73)",
            "(line 1108,col 9)-(line 1108,col 77)",
            "(line 1109,col 9)-(line 1109,col 77)",
            "(line 1110,col 9)-(line 1110,col 75)",
            "(line 1111,col 9)-(line 1111,col 78)",
            "(line 1114,col 9)-(line 1114,col 73)",
            "(line 1115,col 9)-(line 1117,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testOverlay_StringStringIntInt()",
        "snippet": "    public void testOverlay_StringStringIntInt() {\n        assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n        assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n        \n        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n        \n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n        \n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n    }\n",
        "begin_line": 1120,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1121,col 9)-(line 1121,col 66)",
            "(line 1122,col 9)-(line 1122,col 68)",
            "(line 1124,col 9)-(line 1124,col 62)",
            "(line 1125,col 9)-(line 1125,col 60)",
            "(line 1126,col 9)-(line 1126,col 68)",
            "(line 1127,col 9)-(line 1127,col 68)",
            "(line 1128,col 9)-(line 1128,col 70)",
            "(line 1130,col 9)-(line 1130,col 72)",
            "(line 1131,col 9)-(line 1131,col 72)",
            "(line 1132,col 9)-(line 1132,col 70)",
            "(line 1133,col 9)-(line 1133,col 70)",
            "(line 1134,col 9)-(line 1134,col 78)",
            "(line 1135,col 9)-(line 1135,col 78)",
            "(line 1137,col 9)-(line 1137,col 77)",
            "(line 1138,col 9)-(line 1138,col 77)",
            "(line 1139,col 9)-(line 1139,col 82)",
            "(line 1140,col 9)-(line 1140,col 82)",
            "(line 1141,col 9)-(line 1141,col 79)",
            "(line 1142,col 9)-(line 1142,col 79)",
            "(line 1143,col 9)-(line 1143,col 81)",
            "(line 1144,col 9)-(line 1144,col 81)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringInt()",
        "snippet": "    public void testRepeat_StringInt() {\n        assertEquals(null, StringUtils.repeat(null, 2));\n        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n        String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1147,
        "end_line": 1157,
        "comment": "",
        "child_ranges": [
            "(line 1148,col 9)-(line 1148,col 56)",
            "(line 1149,col 9)-(line 1149,col 54)",
            "(line 1150,col 9)-(line 1150,col 52)",
            "(line 1151,col 9)-(line 1151,col 56)",
            "(line 1152,col 9)-(line 1152,col 60)",
            "(line 1153,col 9)-(line 1153,col 64)",
            "(line 1154,col 9)-(line 1154,col 52)",
            "(line 1155,col 9)-(line 1155,col 42)",
            "(line 1156,col 9)-(line 1156,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRepeat_StringStringInt()",
        "snippet": "    public void testRepeat_StringStringInt() {\n        assertEquals(null, StringUtils.repeat(null, null, 2));\n        assertEquals(null, StringUtils.repeat(null, \"x\", 2));\n        assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n\n        assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\n        assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n\n        assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n\n        assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n    }\n",
        "begin_line": 1159,
        "end_line": 1170,
        "comment": "",
        "child_ranges": [
            "(line 1160,col 9)-(line 1160,col 62)",
            "(line 1161,col 9)-(line 1161,col 61)",
            "(line 1162,col 9)-(line 1162,col 58)",
            "(line 1164,col 9)-(line 1164,col 58)",
            "(line 1165,col 9)-(line 1165,col 56)",
            "(line 1167,col 9)-(line 1167,col 59)",
            "(line 1169,col 9)-(line 1169,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChop()",
        "snippet": "    public void testChop() {\n\n        String[][] chopCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { \"foo\", \"fo\"},\n            { \"foo\\nfoo\", \"foo\\nfo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"\\r\\n\", \"\" },\n            { null, null },\n            { \"\", \"\" },\n            { \"a\", \"\" },\n        };\n        for (int i = 0; i < chopCases.length; i++) {\n            String original = chopCases[i][0];\n            String expectedResult = chopCases[i][1];\n            assertEquals(\"chop(String) failed\",\n                    expectedResult, StringUtils.chop(original));\n        }\n    }\n",
        "begin_line": 1172,
        "end_line": 1194,
        "comment": "",
        "child_ranges": [
            "(line 1174,col 9)-(line 1187,col 10)",
            "(line 1188,col 9)-(line 1193,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testChomp()",
        "snippet": "    public void testChomp() {\n\n        String[][] chompCases = {\n            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\" , FOO_UNCAP },\n            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n            { FOO_UNCAP, FOO_UNCAP },\n            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n            { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" },\n            { \"foo\\nfoo\", \"foo\\nfoo\" },\n            { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n            { \"\\n\", \"\" },\n            { \"\\r\", \"\" },\n            { \"a\", \"a\" },\n            { \"\\r\\n\", \"\" },\n            { \"\", \"\" },\n            { null, null },\n            { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n        };\n        for (int i = 0; i < chompCases.length; i++) {\n            String original = chompCases[i][0];\n            String expectedResult = chompCases[i][1];\n            assertEquals(\"chomp(String) failed\",\n                    expectedResult, StringUtils.chomp(original));\n        }\n\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foobar\", \"bar\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foobar\", StringUtils.chomp(\"foobar\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", null));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"\", \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, null));\n        assertEquals(\"chomp(String, String) failed\",\n                null, StringUtils.chomp(null, \"\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n        assertEquals(\"chomp(String, String) failed\",\n                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n    }\n",
        "begin_line": 1196,
        "end_line": 1251,
        "comment": "",
        "child_ranges": [
            "(line 1198,col 9)-(line 1215,col 10)",
            "(line 1216,col 9)-(line 1221,col 9)",
            "(line 1223,col 9)-(line 1224,col 59)",
            "(line 1225,col 9)-(line 1226,col 62)",
            "(line 1227,col 9)-(line 1228,col 58)",
            "(line 1229,col 9)-(line 1230,col 59)",
            "(line 1231,col 9)-(line 1232,col 61)",
            "(line 1233,col 9)-(line 1234,col 50)",
            "(line 1235,col 9)-(line 1236,col 49)",
            "(line 1237,col 9)-(line 1238,col 47)",
            "(line 1239,col 9)-(line 1240,col 54)",
            "(line 1241,col 9)-(line 1242,col 53)",
            "(line 1243,col 9)-(line 1244,col 51)",
            "(line 1245,col 9)-(line 1246,col 53)",
            "(line 1247,col 9)-(line 1248,col 55)",
            "(line 1249,col 9)-(line 1250,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringInt()",
        "snippet": "    public void testRightPad_StringInt() {\n        assertEquals(null, StringUtils.rightPad(null, 5));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n    }\n",
        "begin_line": 1254,
        "end_line": 1260,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1255,col 9)-(line 1255,col 58)",
            "(line 1256,col 9)-(line 1256,col 59)",
            "(line 1257,col 9)-(line 1257,col 62)",
            "(line 1258,col 9)-(line 1258,col 60)",
            "(line 1259,col 9)-(line 1259,col 61)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntChar()",
        "snippet": "    public void testRightPad_StringIntChar() {\n        assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n        String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1262,
        "end_line": 1272,
        "comment": "",
        "child_ranges": [
            "(line 1263,col 9)-(line 1263,col 63)",
            "(line 1264,col 9)-(line 1264,col 64)",
            "(line 1265,col 9)-(line 1265,col 67)",
            "(line 1266,col 9)-(line 1266,col 65)",
            "(line 1267,col 9)-(line 1267,col 66)",
            "(line 1268,col 9)-(line 1268,col 67)",
            "(line 1269,col 9)-(line 1269,col 61)",
            "(line 1270,col 9)-(line 1270,col 42)",
            "(line 1271,col 9)-(line 1271,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRightPad_StringIntString()",
        "snippet": "    public void testRightPad_StringIntString() {\n        assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n        assertEquals(null, StringUtils.rightPad(null, 8, null));\n        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n    }\n",
        "begin_line": 1274,
        "end_line": 1285,
        "comment": "",
        "child_ranges": [
            "(line 1275,col 9)-(line 1275,col 64)",
            "(line 1276,col 9)-(line 1276,col 64)",
            "(line 1277,col 9)-(line 1277,col 64)",
            "(line 1278,col 9)-(line 1278,col 70)",
            "(line 1279,col 9)-(line 1279,col 70)",
            "(line 1280,col 9)-(line 1280,col 69)",
            "(line 1281,col 9)-(line 1281,col 65)",
            "(line 1282,col 9)-(line 1282,col 66)",
            "(line 1283,col 9)-(line 1283,col 68)",
            "(line 1284,col 9)-(line 1284,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringInt()",
        "snippet": "    public void testLeftPad_StringInt() {\n        assertEquals(null, StringUtils.leftPad(null, 5));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n    }\n",
        "begin_line": 1288,
        "end_line": 1293,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1289,col 9)-(line 1289,col 57)",
            "(line 1290,col 9)-(line 1290,col 58)",
            "(line 1291,col 9)-(line 1291,col 61)",
            "(line 1292,col 9)-(line 1292,col 59)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntChar()",
        "snippet": "    public void testLeftPad_StringIntChar() {\n        assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n        assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n        String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n        assertEquals(10000, str.length());\n        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n    }\n",
        "begin_line": 1295,
        "end_line": 1305,
        "comment": "",
        "child_ranges": [
            "(line 1296,col 9)-(line 1296,col 62)",
            "(line 1297,col 9)-(line 1297,col 63)",
            "(line 1298,col 9)-(line 1298,col 66)",
            "(line 1299,col 9)-(line 1299,col 66)",
            "(line 1300,col 9)-(line 1300,col 81)",
            "(line 1301,col 9)-(line 1301,col 64)",
            "(line 1302,col 9)-(line 1302,col 60)",
            "(line 1303,col 9)-(line 1303,col 42)",
            "(line 1304,col 9)-(line 1304,col 76)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLeftPad_StringIntString()",
        "snippet": "    public void testLeftPad_StringIntString() {\n        assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n        assertEquals(null, StringUtils.leftPad(null, 5, null));\n        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n    }\n",
        "begin_line": 1307,
        "end_line": 1318,
        "comment": "",
        "child_ranges": [
            "(line 1308,col 9)-(line 1308,col 63)",
            "(line 1309,col 9)-(line 1309,col 63)",
            "(line 1310,col 9)-(line 1310,col 63)",
            "(line 1311,col 9)-(line 1311,col 69)",
            "(line 1312,col 9)-(line 1312,col 69)",
            "(line 1313,col 9)-(line 1313,col 68)",
            "(line 1314,col 9)-(line 1314,col 64)",
            "(line 1315,col 9)-(line 1315,col 65)",
            "(line 1316,col 9)-(line 1316,col 67)",
            "(line 1317,col 9)-(line 1317,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testLength()",
        "snippet": "    public void testLength() {\n        assertEquals(0, StringUtils.length(null));\n        assertEquals(0, StringUtils.length(\"\"));\n        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n        assertEquals(1, StringUtils.length(\"A\"));\n        assertEquals(1, StringUtils.length(\" \"));\n        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n    }\n",
        "begin_line": 1320,
        "end_line": 1327,
        "comment": "",
        "child_ranges": [
            "(line 1321,col 9)-(line 1321,col 50)",
            "(line 1322,col 9)-(line 1322,col 48)",
            "(line 1323,col 9)-(line 1323,col 63)",
            "(line 1324,col 9)-(line 1324,col 49)",
            "(line 1325,col 9)-(line 1325,col 49)",
            "(line 1326,col 9)-(line 1326,col 56)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringInt()",
        "snippet": "    public void testCenter_StringInt() {\n        assertEquals(null, StringUtils.center(null, -1));\n        assertEquals(null, StringUtils.center(null, 4));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n        assertEquals(\"    \", StringUtils.center(\"\", 4));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n    }\n",
        "begin_line": 1330,
        "end_line": 1342,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1331,col 9)-(line 1331,col 57)",
            "(line 1332,col 9)-(line 1332,col 56)",
            "(line 1333,col 9)-(line 1333,col 56)",
            "(line 1334,col 9)-(line 1334,col 56)",
            "(line 1335,col 9)-(line 1335,col 57)",
            "(line 1336,col 9)-(line 1336,col 56)",
            "(line 1337,col 9)-(line 1337,col 56)",
            "(line 1338,col 9)-(line 1338,col 58)",
            "(line 1339,col 9)-(line 1339,col 60)",
            "(line 1340,col 9)-(line 1340,col 57)",
            "(line 1341,col 9)-(line 1341,col 58)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntChar()",
        "snippet": "    public void testCenter_StringIntChar() {\n        assertEquals(null, StringUtils.center(null, -1, ' '));\n        assertEquals(null, StringUtils.center(null, 4, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\n        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\n        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n    }\n",
        "begin_line": 1344,
        "end_line": 1357,
        "comment": "",
        "child_ranges": [
            "(line 1345,col 9)-(line 1345,col 62)",
            "(line 1346,col 9)-(line 1346,col 61)",
            "(line 1347,col 9)-(line 1347,col 61)",
            "(line 1348,col 9)-(line 1348,col 61)",
            "(line 1349,col 9)-(line 1349,col 62)",
            "(line 1350,col 9)-(line 1350,col 61)",
            "(line 1351,col 9)-(line 1351,col 61)",
            "(line 1352,col 9)-(line 1352,col 63)",
            "(line 1353,col 9)-(line 1353,col 65)",
            "(line 1354,col 9)-(line 1354,col 62)",
            "(line 1355,col 9)-(line 1355,col 63)",
            "(line 1356,col 9)-(line 1356,col 63)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testCenter_StringIntString()",
        "snippet": "    public void testCenter_StringIntString() {\n        assertEquals(null, StringUtils.center(null, 4, null));\n        assertEquals(null, StringUtils.center(null, -1, \" \"));\n        assertEquals(null, StringUtils.center(null, 4, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n    }\n",
        "begin_line": 1359,
        "end_line": 1375,
        "comment": "",
        "child_ranges": [
            "(line 1360,col 9)-(line 1360,col 62)",
            "(line 1361,col 9)-(line 1361,col 62)",
            "(line 1362,col 9)-(line 1362,col 61)",
            "(line 1363,col 9)-(line 1363,col 61)",
            "(line 1364,col 9)-(line 1364,col 61)",
            "(line 1365,col 9)-(line 1365,col 62)",
            "(line 1366,col 9)-(line 1366,col 61)",
            "(line 1367,col 9)-(line 1367,col 61)",
            "(line 1368,col 9)-(line 1368,col 63)",
            "(line 1369,col 9)-(line 1369,col 65)",
            "(line 1370,col 9)-(line 1370,col 62)",
            "(line 1371,col 9)-(line 1371,col 63)",
            "(line 1372,col 9)-(line 1372,col 66)",
            "(line 1373,col 9)-(line 1373,col 68)",
            "(line 1374,col 9)-(line 1374,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverse_String()",
        "snippet": "    public void testReverse_String() {\n        assertEquals(null, StringUtils.reverse(null) );\n        assertEquals(\"\", StringUtils.reverse(\"\") );\n        assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n    }\n",
        "begin_line": 1378,
        "end_line": 1382,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1379,col 9)-(line 1379,col 55)",
            "(line 1380,col 9)-(line 1380,col 51)",
            "(line 1381,col 9)-(line 1381,col 69)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testReverseDelimited_StringChar()",
        "snippet": "    public void testReverseDelimited_StringChar() {\n        assertEquals(null, StringUtils.reverseDelimited(null, '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n        assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.') );\n        assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.') );\n        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n    }\n",
        "begin_line": 1384,
        "end_line": 1390,
        "comment": "",
        "child_ranges": [
            "(line 1385,col 9)-(line 1385,col 69)",
            "(line 1386,col 9)-(line 1386,col 65)",
            "(line 1387,col 9)-(line 1387,col 75)",
            "(line 1388,col 9)-(line 1388,col 75)",
            "(line 1389,col 9)-(line 1389,col 65)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_String()",
        "snippet": "    public void testDefault_String() {\n        assertEquals(\"\", StringUtils.defaultString(null));\n        assertEquals(\"\", StringUtils.defaultString(\"\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n    }\n",
        "begin_line": 1393,
        "end_line": 1397,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1394,col 9)-(line 1394,col 58)",
            "(line 1395,col 9)-(line 1395,col 56)",
            "(line 1396,col 9)-(line 1396,col 62)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefault_StringString()",
        "snippet": "    public void testDefault_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n        assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n    }\n",
        "begin_line": 1399,
        "end_line": 1403,
        "comment": "",
        "child_ranges": [
            "(line 1400,col 9)-(line 1400,col 70)",
            "(line 1401,col 9)-(line 1401,col 64)",
            "(line 1402,col 9)-(line 1402,col 70)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDefaultIfEmpty_StringString()",
        "snippet": "    public void testDefaultIfEmpty_StringString() {\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n        assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n        assertNull(StringUtils.defaultIfEmpty(\"\", null));\n    }\n",
        "begin_line": 1405,
        "end_line": 1410,
        "comment": "",
        "child_ranges": [
            "(line 1406,col 9)-(line 1406,col 71)",
            "(line 1407,col 9)-(line 1407,col 69)",
            "(line 1408,col 9)-(line 1408,col 71)",
            "(line 1409,col 9)-(line 1409,col 57)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringInt()",
        "snippet": "    public void testAbbreviate_StringInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abc\", 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }              \n    }\n",
        "begin_line": 1413,
        "end_line": 1436,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1414,col 9)-(line 1414,col 61)",
            "(line 1415,col 9)-(line 1415,col 57)",
            "(line 1416,col 9)-(line 1416,col 67)",
            "(line 1417,col 9)-(line 1417,col 134)",
            "(line 1419,col 9)-(line 1419,col 45)",
            "(line 1420,col 9)-(line 1420,col 78)",
            "(line 1421,col 9)-(line 1421,col 87)",
            "(line 1422,col 9)-(line 1422,col 87)",
            "(line 1423,col 9)-(line 1423,col 69)",
            "(line 1424,col 9)-(line 1424,col 70)",
            "(line 1425,col 9)-(line 1425,col 70)",
            "(line 1426,col 9)-(line 1426,col 67)",
            "(line 1427,col 9)-(line 1427,col 56)",
            "(line 1429,col 9)-(line 1435,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testAbbreviate_StringIntInt()",
        "snippet": "    public void testAbbreviate_StringIntInt() {\n        assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n        \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        try {\n            @SuppressWarnings(\"unused\")\n            String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n                // empty\n        }      \n        \n\n        String raspberry = \"raspberry peach\";\n        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n\n        assertEquals(null, StringUtils.abbreviate(null, 7, 14));\n        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n    }\n",
        "begin_line": 1438,
        "end_line": 1483,
        "comment": "",
        "child_ranges": [
            "(line 1439,col 9)-(line 1439,col 65)",
            "(line 1440,col 9)-(line 1440,col 60)",
            "(line 1441,col 9)-(line 1441,col 60)",
            "(line 1443,col 9)-(line 1449,col 9)",
            "(line 1450,col 9)-(line 1456,col 9)",
            "(line 1459,col 9)-(line 1459,col 45)",
            "(line 1460,col 9)-(line 1460,col 83)",
            "(line 1462,col 9)-(line 1462,col 64)",
            "(line 1463,col 9)-(line 1463,col 57)",
            "(line 1464,col 9)-(line 1464,col 56)",
            "(line 1465,col 9)-(line 1465,col 56)",
            "(line 1466,col 9)-(line 1466,col 56)",
            "(line 1467,col 9)-(line 1467,col 56)",
            "(line 1468,col 9)-(line 1468,col 56)",
            "(line 1469,col 9)-(line 1469,col 56)",
            "(line 1470,col 9)-(line 1470,col 56)",
            "(line 1471,col 9)-(line 1471,col 56)",
            "(line 1472,col 9)-(line 1472,col 56)",
            "(line 1473,col 9)-(line 1473,col 56)",
            "(line 1474,col 9)-(line 1474,col 57)",
            "(line 1475,col 9)-(line 1475,col 57)",
            "(line 1476,col 9)-(line 1476,col 57)",
            "(line 1477,col 9)-(line 1477,col 57)",
            "(line 1478,col 9)-(line 1478,col 57)",
            "(line 1479,col 9)-(line 1479,col 57)",
            "(line 1480,col 9)-(line 1480,col 57)",
            "(line 1481,col 9)-(line 1481,col 57)",
            "(line 1482,col 9)-(line 1482,col 72)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.assertAbbreviateWithOffset(java.lang.String, int, int)",
        "snippet": "    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n        String abcdefghijklmno = \"abcdefghijklmno\";\n        String message = \"abbreviate(String,int,int) failed\";\n        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n            assertTrue(message + \" -- should contain offset character\",\n                    actual.indexOf((char)('a'+offset)) != -1);\n        }\n        assertTrue(message + \" -- should not be greater than maxWidth\",\n                actual.length() <= maxWidth);\n        assertEquals(message, expected, actual);\n    }\n",
        "begin_line": 1485,
        "end_line": 1496,
        "comment": "",
        "child_ranges": [
            "(line 1486,col 9)-(line 1486,col 51)",
            "(line 1487,col 9)-(line 1487,col 61)",
            "(line 1488,col 9)-(line 1488,col 82)",
            "(line 1489,col 9)-(line 1492,col 9)",
            "(line 1493,col 9)-(line 1494,col 45)",
            "(line 1495,col 9)-(line 1495,col 48)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifference_StringString()",
        "snippet": "    public void testDifference_StringString() {\n        assertEquals(null, StringUtils.difference(null, null));\n        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n        assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n        assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n    }\n",
        "begin_line": 1499,
        "end_line": 1509,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1500,col 9)-(line 1500,col 63)",
            "(line 1501,col 9)-(line 1501,col 57)",
            "(line 1502,col 9)-(line 1502,col 63)",
            "(line 1503,col 9)-(line 1503,col 60)",
            "(line 1504,col 9)-(line 1504,col 83)",
            "(line 1505,col 9)-(line 1505,col 87)",
            "(line 1506,col 9)-(line 1506,col 88)",
            "(line 1507,col 9)-(line 1507,col 63)",
            "(line 1508,col 9)-(line 1508,col 99)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringString()",
        "snippet": "    public void testDifferenceAt_StringString() {\n        assertEquals(-1, StringUtils.indexOfDifference(null, null));\n        assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\n        assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n        assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n        assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n        //System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n    }\n",
        "begin_line": 1511,
        "end_line": 1522,
        "comment": "",
        "child_ranges": [
            "(line 1512,col 9)-(line 1512,col 68)",
            "(line 1513,col 9)-(line 1513,col 77)",
            "(line 1514,col 9)-(line 1514,col 64)",
            "(line 1515,col 9)-(line 1515,col 66)",
            "(line 1516,col 9)-(line 1516,col 66)",
            "(line 1517,col 9)-(line 1517,col 79)",
            "(line 1518,col 9)-(line 1518,col 89)",
            "(line 1519,col 9)-(line 1519,col 70)",
            "(line 1520,col 9)-(line 1520,col 90)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetLevenshteinDistance_StringString()",
        "snippet": "    public void testGetLevenshteinDistance_StringString() {\n        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\n        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(\"a\", null);\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n        try {\n            @SuppressWarnings(\"unused\")\n            int d = StringUtils.getLevenshteinDistance(null, \"a\");\n            fail(\"expecting IllegalArgumentException\");\n        } catch (IllegalArgumentException ex) {\n            // empty\n        }\n    }\n",
        "begin_line": 1525,
        "end_line": 1550,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1526,col 9)-(line 1526,col 69)",
            "(line 1527,col 9)-(line 1527,col 70)",
            "(line 1528,col 9)-(line 1528,col 76)",
            "(line 1529,col 9)-(line 1529,col 76)",
            "(line 1530,col 9)-(line 1530,col 75)",
            "(line 1531,col 9)-(line 1531,col 82)",
            "(line 1532,col 9)-(line 1532,col 82)",
            "(line 1533,col 9)-(line 1533,col 82)",
            "(line 1534,col 9)-(line 1534,col 82)",
            "(line 1535,col 9)-(line 1535,col 79)",
            "(line 1536,col 9)-(line 1542,col 9)",
            "(line 1543,col 9)-(line 1549,col 9)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testEMPTY()",
        "snippet": "    public void testEMPTY() {\n        assertNotNull(StringUtils.EMPTY);\n        assertEquals(\"\", StringUtils.EMPTY);\n        assertEquals(0, StringUtils.EMPTY.length());\n    }\n",
        "begin_line": 1555,
        "end_line": 1559,
        "comment": "\n     * A sanity check for {@link StringUtils#EMPTY}.\n     ",
        "child_ranges": [
            "(line 1556,col 9)-(line 1556,col 41)",
            "(line 1557,col 9)-(line 1557,col 44)",
            "(line 1558,col 9)-(line 1558,col 52)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllLowerCase()",
        "snippet": "    public void testIsAllLowerCase() {\n        assertFalse(StringUtils.isAllLowerCase(null));\n        assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllLowerCase(\"abc\"));\n        assertFalse(StringUtils.isAllLowerCase(\"abc \"));\n        assertFalse(StringUtils.isAllLowerCase(\"abC\"));\n    }\n",
        "begin_line": 1564,
        "end_line": 1570,
        "comment": "\n     * Test for {@link StringUtils#isAllLowerCase(String)}.\n     ",
        "child_ranges": [
            "(line 1565,col 9)-(line 1565,col 54)",
            "(line 1566,col 9)-(line 1566,col 67)",
            "(line 1567,col 9)-(line 1567,col 54)",
            "(line 1568,col 9)-(line 1568,col 56)",
            "(line 1569,col 9)-(line 1569,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testIsAllUpperCase()",
        "snippet": "    public void testIsAllUpperCase() {\n        assertFalse(StringUtils.isAllUpperCase(null));\n        assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\n        assertTrue(StringUtils.isAllUpperCase(\"ABC\"));\n        assertFalse(StringUtils.isAllUpperCase(\"ABC \"));\n        assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n    }\n",
        "begin_line": 1575,
        "end_line": 1581,
        "comment": "\n     * Test for {@link StringUtils#isAllUpperCase(String)}.\n     ",
        "child_ranges": [
            "(line 1576,col 9)-(line 1576,col 54)",
            "(line 1577,col 9)-(line 1577,col 67)",
            "(line 1578,col 9)-(line 1578,col 54)",
            "(line 1579,col 9)-(line 1579,col 56)",
            "(line 1580,col 9)-(line 1580,col 55)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStart()",
        "snippet": "    public void testRemoveStart() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(StringUtils.removeStart(null, null));\n        assertNull(StringUtils.removeStart(null, \"\"));\n        assertNull(StringUtils.removeStart(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(StringUtils.removeStart(\"\", null), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n    }\n",
        "begin_line": 1583,
        "end_line": 1599,
        "comment": "",
        "child_ranges": [
            "(line 1585,col 9)-(line 1585,col 56)",
            "(line 1586,col 9)-(line 1586,col 54)",
            "(line 1587,col 9)-(line 1587,col 55)",
            "(line 1590,col 9)-(line 1590,col 60)",
            "(line 1591,col 9)-(line 1591,col 58)",
            "(line 1592,col 9)-(line 1592,col 59)",
            "(line 1595,col 9)-(line 1595,col 86)",
            "(line 1596,col 9)-(line 1596,col 82)",
            "(line 1597,col 9)-(line 1597,col 78)",
            "(line 1598,col 9)-(line 1598,col 80)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveStartIgnoreCase()",
        "snippet": "    public void testRemoveStartIgnoreCase() {\n        // StringUtils.removeStart(\"\", *)        = \"\"\n        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeStart(*, null)      = *\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");        \n        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");        \n        \n        // Case insensitive:\n        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n    }\n",
        "begin_line": 1601,
        "end_line": 1620,
        "comment": "",
        "child_ranges": [
            "(line 1603,col 9)-(line 1603,col 103)",
            "(line 1604,col 9)-(line 1604,col 101)",
            "(line 1605,col 9)-(line 1605,col 103)",
            "(line 1608,col 9)-(line 1608,col 107)",
            "(line 1609,col 9)-(line 1609,col 105)",
            "(line 1610,col 9)-(line 1610,col 107)",
            "(line 1613,col 9)-(line 1613,col 151)",
            "(line 1614,col 9)-(line 1614,col 143)",
            "(line 1615,col 9)-(line 1615,col 135)",
            "(line 1616,col 9)-(line 1616,col 137)",
            "(line 1619,col 9)-(line 1619,col 151)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEnd()",
        "snippet": "    public void testRemoveEnd() {\n        // StringUtils.removeEnd(\"\", *)        = \"\"\n        assertNull(StringUtils.removeEnd(null, null));\n        assertNull(StringUtils.removeEnd(null, \"\"));\n        assertNull(StringUtils.removeEnd(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(StringUtils.removeEnd(\"\", null), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\n        assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n    }\n",
        "begin_line": 1622,
        "end_line": 1639,
        "comment": "",
        "child_ranges": [
            "(line 1624,col 9)-(line 1624,col 54)",
            "(line 1625,col 9)-(line 1625,col 52)",
            "(line 1626,col 9)-(line 1626,col 53)",
            "(line 1629,col 9)-(line 1629,col 58)",
            "(line 1630,col 9)-(line 1630,col 56)",
            "(line 1631,col 9)-(line 1631,col 57)",
            "(line 1634,col 9)-(line 1634,col 90)",
            "(line 1635,col 9)-(line 1635,col 84)",
            "(line 1636,col 9)-(line 1636,col 80)",
            "(line 1637,col 9)-(line 1637,col 76)",
            "(line 1638,col 9)-(line 1638,col 78)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemoveEndIgnoreCase()",
        "snippet": "    public void testRemoveEndIgnoreCase() {\n        // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n        \n        // StringUtils.removeEnd(*, null)      = *\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n        \n        // All others:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");   \n        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");   \n\n        // Case insensitive:\n        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n    }\n",
        "begin_line": 1641,
        "end_line": 1661,
        "comment": "",
        "child_ranges": [
            "(line 1643,col 9)-(line 1643,col 99)",
            "(line 1644,col 9)-(line 1644,col 97)",
            "(line 1645,col 9)-(line 1645,col 99)",
            "(line 1648,col 9)-(line 1648,col 103)",
            "(line 1649,col 9)-(line 1649,col 101)",
            "(line 1650,col 9)-(line 1650,col 103)",
            "(line 1653,col 9)-(line 1653,col 154)",
            "(line 1654,col 9)-(line 1654,col 147)",
            "(line 1655,col 9)-(line 1655,col 139)",
            "(line 1656,col 9)-(line 1656,col 131)",
            "(line 1657,col 9)-(line 1657,col 133)",
            "(line 1660,col 9)-(line 1660,col 147)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_String()",
        "snippet": "    public void testRemove_String() {\n        // StringUtils.remove(null, *)        = null\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(null, StringUtils.remove(null, \"a\"));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n        \n        // StringUtils.remove(*, null)        = *\n        assertEquals(null, StringUtils.remove(null, null));\n        assertEquals(\"\", StringUtils.remove(\"\", null));\n        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n        \n        // StringUtils.remove(*, \"\")          = *\n        assertEquals(null, StringUtils.remove(null, \"\"));\n        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n        \n        // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n        \n        // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n    }\n",
        "begin_line": 1663,
        "end_line": 1689,
        "comment": "",
        "child_ranges": [
            "(line 1665,col 9)-(line 1665,col 59)",
            "(line 1666,col 9)-(line 1666,col 57)",
            "(line 1667,col 9)-(line 1667,col 58)",
            "(line 1670,col 9)-(line 1670,col 55)",
            "(line 1671,col 9)-(line 1671,col 53)",
            "(line 1672,col 9)-(line 1672,col 54)",
            "(line 1675,col 9)-(line 1675,col 59)",
            "(line 1676,col 9)-(line 1676,col 55)",
            "(line 1677,col 9)-(line 1677,col 57)",
            "(line 1680,col 9)-(line 1680,col 57)",
            "(line 1681,col 9)-(line 1681,col 53)",
            "(line 1682,col 9)-(line 1682,col 55)",
            "(line 1685,col 9)-(line 1685,col 63)",
            "(line 1688,col 9)-(line 1688,col 67)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testRemove_char()",
        "snippet": "    public void testRemove_char() {\n        // StringUtils.remove(null, *)       = null\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        assertEquals(null, StringUtils.remove(null, 'a'));\n        \n        // StringUtils.remove(\"\", *)          = \"\"\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n        \n        // StringUtils.remove(\"queued\", 'u') = \"qeed\"\n        assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\n        \n        // StringUtils.remove(\"queued\", 'z') = \"queued\"\n        assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n    }\n",
        "begin_line": 1691,
        "end_line": 1707,
        "comment": "",
        "child_ranges": [
            "(line 1693,col 9)-(line 1693,col 58)",
            "(line 1694,col 9)-(line 1694,col 58)",
            "(line 1695,col 9)-(line 1695,col 58)",
            "(line 1698,col 9)-(line 1698,col 54)",
            "(line 1699,col 9)-(line 1699,col 54)",
            "(line 1700,col 9)-(line 1700,col 54)",
            "(line 1703,col 9)-(line 1703,col 64)",
            "(line 1706,col 9)-(line 1706,col 66)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testDifferenceAt_StringArray()",
        "snippet": "    public void testDifferenceAt_StringArray(){        \n        assertEquals(-1, StringUtils.indexOfDifference(null));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\n        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\n        assertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }\n",
        "begin_line": 1710,
        "end_line": 1728,
        "comment": "",
        "child_ranges": [
            "(line 1711,col 9)-(line 1711,col 62)",
            "(line 1712,col 9)-(line 1712,col 73)",
            "(line 1713,col 9)-(line 1713,col 78)",
            "(line 1714,col 9)-(line 1714,col 83)",
            "(line 1715,col 9)-(line 1715,col 79)",
            "(line 1716,col 9)-(line 1716,col 80)",
            "(line 1717,col 9)-(line 1717,col 89)",
            "(line 1718,col 9)-(line 1718,col 89)",
            "(line 1719,col 9)-(line 1719,col 81)",
            "(line 1720,col 9)-(line 1720,col 81)",
            "(line 1721,col 9)-(line 1721,col 85)",
            "(line 1722,col 9)-(line 1722,col 82)",
            "(line 1723,col 9)-(line 1723,col 85)",
            "(line 1724,col 9)-(line 1724,col 88)",
            "(line 1725,col 9)-(line 1725,col 86)",
            "(line 1726,col 9)-(line 1726,col 86)",
            "(line 1727,col 9)-(line 1727,col 104)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testGetCommonPrefix_StringArray()",
        "snippet": "    public void testGetCommonPrefix_StringArray(){        \n        assertEquals(\"\", StringUtils.getCommonPrefix(null));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {}));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}));\n        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}));\n        assertEquals(\"a\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}));\n        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}));\n        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}));\n        assertEquals(\"i am a \", StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}));\n    }\n",
        "begin_line": 1730,
        "end_line": 1748,
        "comment": "",
        "child_ranges": [
            "(line 1731,col 9)-(line 1731,col 60)",
            "(line 1732,col 9)-(line 1732,col 71)",
            "(line 1733,col 9)-(line 1733,col 79)",
            "(line 1734,col 9)-(line 1734,col 81)",
            "(line 1735,col 9)-(line 1735,col 77)",
            "(line 1736,col 9)-(line 1736,col 79)",
            "(line 1737,col 9)-(line 1737,col 88)",
            "(line 1738,col 9)-(line 1738,col 88)",
            "(line 1739,col 9)-(line 1739,col 80)",
            "(line 1740,col 9)-(line 1740,col 80)",
            "(line 1741,col 9)-(line 1741,col 86)",
            "(line 1742,col 9)-(line 1742,col 82)",
            "(line 1743,col 9)-(line 1743,col 86)",
            "(line 1744,col 9)-(line 1744,col 89)",
            "(line 1745,col 9)-(line 1745,col 85)",
            "(line 1746,col 9)-(line 1746,col 85)",
            "(line 1747,col 9)-(line 1747,col 110)"
        ]
    },
    {
        "class_name": "org.apache.commons.lang3.StringUtilsTest",
        "child_classes": [],
        "src_path": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
        "signature": "org.apache.commons.lang3.StringUtilsTest.testStartsWithAny()",
        "snippet": "    public void testStartsWithAny() {\n        assertFalse(StringUtils.startsWithAny(null, null));\n        assertFalse(StringUtils.startsWithAny(null, new String[] {\"abc\"}));\n        assertFalse(StringUtils.startsWithAny(\"abcxyz\", null));\n        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {}));\n        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}));\n        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}));\n        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abcd\"}));\n    }\n",
        "begin_line": 1750,
        "end_line": 1758,
        "comment": "",
        "child_ranges": [
            "(line 1751,col 9)-(line 1751,col 59)",
            "(line 1752,col 9)-(line 1752,col 75)",
            "(line 1753,col 9)-(line 1753,col 63)",
            "(line 1754,col 9)-(line 1754,col 74)",
            "(line 1755,col 9)-(line 1755,col 78)",
            "(line 1756,col 9)-(line 1756,col 91)",
            "(line 1757,col 9)-(line 1757,col 93)"
        ]
    }
]