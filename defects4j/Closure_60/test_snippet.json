[
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.setUp()",
        "snippet": "  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    externs = DEFAULT_EXTERNS;\n    lastCompiler = null;\n    lastArg = null;\n    outReader = new ByteArrayOutputStream();\n    errReader = new ByteArrayOutputStream();\n    useStringComparison = false;\n    useModules = ModulePattern.NONE;\n    args.clear();\n    exitCodes = Lists.newArrayList();\n  }\n",
        "begin_line": 100,
        "end_line": 112,
        "comment": "",
        "child_ranges": [
            "(line 102,col 5)-(line 102,col 18)",
            "(line 103,col 5)-(line 103,col 30)",
            "(line 104,col 5)-(line 104,col 24)",
            "(line 105,col 5)-(line 105,col 19)",
            "(line 106,col 5)-(line 106,col 44)",
            "(line 107,col 5)-(line 107,col 44)",
            "(line 108,col 5)-(line 108,col 32)",
            "(line 109,col 5)-(line 109,col 36)",
            "(line 110,col 5)-(line 110,col 17)",
            "(line 111,col 5)-(line 111,col 37)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.tearDown()",
        "snippet": "  @Override\n  public void tearDown() throws Exception {\n    super.tearDown();\n  }\n",
        "begin_line": 114,
        "end_line": 117,
        "comment": "",
        "child_ranges": [
            "(line 116,col 5)-(line 116,col 21)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering1()",
        "snippet": "  public void testWarningGuardOrdering1() {\n    args.add(\"--jscomp_error=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 119,
        "end_line": 123,
        "comment": "",
        "child_ranges": [
            "(line 120,col 5)-(line 120,col 42)",
            "(line 121,col 5)-(line 121,col 40)",
            "(line 122,col 5)-(line 122,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering2()",
        "snippet": "  public void testWarningGuardOrdering2() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 125,
        "end_line": 129,
        "comment": "",
        "child_ranges": [
            "(line 126,col 5)-(line 126,col 40)",
            "(line 127,col 5)-(line 127,col 42)",
            "(line 128,col 5)-(line 128,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering3()",
        "snippet": "  public void testWarningGuardOrdering3() {\n    args.add(\"--jscomp_warning=globalThis\");\n    args.add(\"--jscomp_off=globalThis\");\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 131,
        "end_line": 135,
        "comment": "",
        "child_ranges": [
            "(line 132,col 5)-(line 132,col 44)",
            "(line 133,col 5)-(line 133,col 40)",
            "(line 134,col 5)-(line 134,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testWarningGuardOrdering4()",
        "snippet": "  public void testWarningGuardOrdering4() {\n    args.add(\"--jscomp_off=globalThis\");\n    args.add(\"--jscomp_warning=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 137,
        "end_line": 141,
        "comment": "",
        "child_ranges": [
            "(line 138,col 5)-(line 138,col 40)",
            "(line 139,col 5)-(line 139,col 44)",
            "(line 140,col 5)-(line 140,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOffByDefault()",
        "snippet": "  public void testCheckGlobalThisOffByDefault() {\n    testSame(\"function f() { this.a = 3; }\");\n  }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "",
        "child_ranges": [
            "(line 144,col 5)-(line 144,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithAdvancedMode()",
        "snippet": "  public void testCheckGlobalThisOnWithAdvancedMode() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 147,
        "end_line": 150,
        "comment": "",
        "child_ranges": [
            "(line 148,col 5)-(line 148,col 59)",
            "(line 149,col 5)-(line 149,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckGlobalThisOnWithErrorFlag()",
        "snippet": "  public void testCheckGlobalThisOnWithErrorFlag() {\n    args.add(\"--jscomp_error=globalThis\");\n    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n  }\n",
        "begin_line": 152,
        "end_line": 155,
        "comment": "",
        "child_ranges": [
            "(line 153,col 5)-(line 153,col 42)",
            "(line 154,col 5)-(line 154,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOffByDefault()",
        "snippet": "  public void testTypeCheckingOffByDefault() {\n    test(\"function f(x) { return x; } f();\",\n         \"function f(a) { return a; } f();\");\n  }\n",
        "begin_line": 157,
        "end_line": 160,
        "comment": "",
        "child_ranges": [
            "(line 158,col 5)-(line 159,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testReflectedMethods()",
        "snippet": "  public void testReflectedMethods() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\n        \"/** @constructor */\" +\n        \"function Foo() {}\" +\n        \"Foo.prototype.handle = function(x, y) { alert(y); };\" +\n        \"var x = goog.reflect.object(Foo, {handle: 1});\" +\n        \"for (var i in x) { x[i].call(x); }\" +\n        \"window['Foo'] = Foo;\",\n        \"function a() {}\" +\n        \"a.prototype.a = function(e, d) { alert(d); };\" +\n        \"var b = goog.c.b(a, {a: 1}),c;\" +\n        \"for (c in b) { b[c].call(b); }\" +\n        \"window.Foo = a;\");\n  }\n",
        "begin_line": 162,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 163,col 5)-(line 163,col 59)",
            "(line 164,col 5)-(line 175,col 27)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckingOnWithVerbose()",
        "snippet": "  public void testTypeCheckingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f(x) { return x; } f();\", TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 178,
        "end_line": 181,
        "comment": "",
        "child_ranges": [
            "(line 179,col 5)-(line 179,col 40)",
            "(line 180,col 5)-(line 180,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOffByDefault()",
        "snippet": "  public void testTypeParsingOffByDefault() {\n    testSame(\"/** @return {number */ function f(a) { return a; }\");\n  }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "",
        "child_ranges": [
            "(line 184,col 5)-(line 184,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeParsingOnWithVerbose()",
        "snippet": "  public void testTypeParsingOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n    test(\"/** @return {n} */ function f(a) { return a; }\",\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 187,
        "end_line": 193,
        "comment": "",
        "child_ranges": [
            "(line 188,col 5)-(line 188,col 40)",
            "(line 189,col 5)-(line 190,col 46)",
            "(line 191,col 5)-(line 192,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride1()",
        "snippet": "  public void testTypeCheckOverride1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=checkTypes\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n  }\n",
        "begin_line": 195,
        "end_line": 199,
        "comment": "",
        "child_ranges": [
            "(line 196,col 5)-(line 196,col 40)",
            "(line 197,col 5)-(line 197,col 40)",
            "(line 198,col 5)-(line 198,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTypeCheckOverride2()",
        "snippet": "  public void testTypeCheckOverride2() {\n    args.add(\"--warning_level=DEFAULT\");\n    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n\n    args.add(\"--jscomp_warning=checkTypes\");\n    test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 201,
        "end_line": 208,
        "comment": "",
        "child_ranges": [
            "(line 202,col 5)-(line 202,col 40)",
            "(line 203,col 5)-(line 203,col 62)",
            "(line 205,col 5)-(line 205,col 44)",
            "(line 206,col 5)-(line 207,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOffForDefault()",
        "snippet": "  public void testCheckSymbolsOffForDefault() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"x = 3; var y; var y;\", \"x=3; var y;\");\n  }\n",
        "begin_line": 210,
        "end_line": 213,
        "comment": "",
        "child_ranges": [
            "(line 211,col 5)-(line 211,col 40)",
            "(line 212,col 5)-(line 212,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOnForVerbose()",
        "snippet": "  public void testCheckSymbolsOnForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n    test(\"var y; var y;\", SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 215,
        "end_line": 219,
        "comment": "",
        "child_ranges": [
            "(line 216,col 5)-(line 216,col 40)",
            "(line 217,col 5)-(line 217,col 49)",
            "(line 218,col 5)-(line 218,col 77)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForVerbose()",
        "snippet": "  public void testCheckSymbolsOverrideForVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=undefinedVars\");\n    testSame(\"x = 3;\");\n  }\n",
        "begin_line": 221,
        "end_line": 225,
        "comment": "",
        "child_ranges": [
            "(line 222,col 5)-(line 222,col 40)",
            "(line 223,col 5)-(line 223,col 43)",
            "(line 224,col 5)-(line 224,col 23)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckSymbolsOverrideForQuiet()",
        "snippet": "  public void testCheckSymbolsOverrideForQuiet() {\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--jscomp_error=undefinedVars\");\n    test(\"x = 3;\", VarCheck.UNDEFINED_VAR_ERROR);\n  }\n",
        "begin_line": 227,
        "end_line": 231,
        "comment": "",
        "child_ranges": [
            "(line 228,col 5)-(line 228,col 38)",
            "(line 229,col 5)-(line 229,col 45)",
            "(line 230,col 5)-(line 230,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties1()",
        "snippet": "  public void testCheckUndefinedProperties1() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_error=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 233,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 234,col 5)-(line 234,col 40)",
            "(line 235,col 5)-(line 235,col 49)",
            "(line 236,col 5)-(line 236,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties2()",
        "snippet": "  public void testCheckUndefinedProperties2() {\n    args.add(\"--warning_level=VERBOSE\");\n    args.add(\"--jscomp_off=missingProperties\");\n    test(\"var x = {}; var y = x.bar;\", CheckGlobalNames.UNDEFINED_NAME_WARNING);\n  }\n",
        "begin_line": 239,
        "end_line": 243,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 240,col 40)",
            "(line 241,col 5)-(line 241,col 47)",
            "(line 242,col 5)-(line 242,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCheckUndefinedProperties3()",
        "snippet": "  public void testCheckUndefinedProperties3() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() {var x = {}; var y = x.bar;}\",\n        TypeCheck.INEXISTENT_PROPERTY);\n  }\n",
        "begin_line": 245,
        "end_line": 249,
        "comment": "",
        "child_ranges": [
            "(line 246,col 5)-(line 246,col 40)",
            "(line 247,col 5)-(line 248,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDuplicateParams()",
        "snippet": "  public void testDuplicateParams() {\n    test(\"function f(a, a) {}\", RhinoErrorReporter.DUPLICATE_PARAM);\n    assertTrue(lastCompiler.hasHaltingErrors());\n  }\n",
        "begin_line": 251,
        "end_line": 254,
        "comment": "",
        "child_ranges": [
            "(line 252,col 5)-(line 252,col 68)",
            "(line 253,col 5)-(line 253,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag()",
        "snippet": "  public void testDefineFlag() {\n    args.add(\"--define=FOO\");\n    args.add(\"--define=\\\"BAR=5\\\"\");\n    args.add(\"--D\"); args.add(\"CCC\");\n    args.add(\"-D\"); args.add(\"DDD\");\n    test(\"/** @define {boolean} */ var FOO = false;\" +\n         \"/** @define {number} */ var BAR = 3;\" +\n         \"/** @define {boolean} */ var CCC = false;\" +\n         \"/** @define {boolean} */ var DDD = false;\",\n         \"var FOO = !0, BAR = 5, CCC = !0, DDD = !0;\");\n  }\n",
        "begin_line": 256,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 257,col 5)-(line 257,col 29)",
            "(line 258,col 5)-(line 258,col 35)",
            "(line 259,col 5)-(line 259,col 20)",
            "(line 259,col 22)-(line 259,col 37)",
            "(line 260,col 5)-(line 260,col 19)",
            "(line 260,col 21)-(line 260,col 36)",
            "(line 261,col 5)-(line 265,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag2()",
        "snippet": "  public void testDefineFlag2() {\n    args.add(\"--define=FOO='x\\\"'\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x\\\\\\\"\\\";\");\n  }\n",
        "begin_line": 268,
        "end_line": 272,
        "comment": "",
        "child_ranges": [
            "(line 269,col 5)-(line 269,col 35)",
            "(line 270,col 5)-(line 271,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDefineFlag3()",
        "snippet": "  public void testDefineFlag3() {\n    args.add(\"--define=FOO=\\\"x'\\\"\");\n    test(\"/** @define {string} */ var FOO = \\\"a\\\";\",\n         \"var FOO = \\\"x'\\\";\");\n  }\n",
        "begin_line": 274,
        "end_line": 278,
        "comment": "",
        "child_ranges": [
            "(line 275,col 5)-(line 275,col 36)",
            "(line 276,col 5)-(line 277,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testScriptStrictModeNoWarning()",
        "snippet": "  public void testScriptStrictModeNoWarning() {\n    test(\"'use strict';\", \"\");\n    test(\"'no use strict';\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 280,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 281,col 5)-(line 281,col 30)",
            "(line 282,col 5)-(line 282,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testFunctionStrictModeNoWarning()",
        "snippet": "  public void testFunctionStrictModeNoWarning() {\n    test(\"function f() {'use strict';}\", \"function f() {}\");\n    test(\"function f() {'no use strict';}\",\n         CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 285,
        "end_line": 289,
        "comment": "",
        "child_ranges": [
            "(line 286,col 5)-(line 286,col 60)",
            "(line 287,col 5)-(line 288,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testQuietMode()",
        "snippet": "  public void testQuietMode() {\n    args.add(\"--warning_level=DEFAULT\");\n    test(\"/** @const \\n * @const */ var x;\",\n         RhinoErrorReporter.PARSE_ERROR);\n    args.add(\"--warning_level=QUIET\");\n    testSame(\"/** @const \\n * @const */ var x;\");\n  }\n",
        "begin_line": 291,
        "end_line": 297,
        "comment": "",
        "child_ranges": [
            "(line 292,col 5)-(line 292,col 40)",
            "(line 293,col 5)-(line 294,col 41)",
            "(line 295,col 5)-(line 295,col 38)",
            "(line 296,col 5)-(line 296,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testProcessClosurePrimitives()",
        "snippet": "  public void testProcessClosurePrimitives() {\n    test(\"var goog = {}; goog.provide('goog.dom');\",\n         \"var goog = {dom:{}};\");\n    args.add(\"--process_closure_primitives=false\");\n    testSame(\"var goog = {}; goog.provide('goog.dom');\");\n  }\n",
        "begin_line": 299,
        "end_line": 304,
        "comment": "",
        "child_ranges": [
            "(line 300,col 5)-(line 301,col 33)",
            "(line 302,col 5)-(line 302,col 51)",
            "(line 303,col 5)-(line 303,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCssNameWiring()",
        "snippet": "  public void testCssNameWiring() throws Exception {\n    test(\"var goog = {}; goog.getCssName = function() {};\" +\n         \"goog.setCssNameMapping = function() {};\" +\n         \"goog.setCssNameMapping({'goog': 'a', 'button': 'b'});\" +\n         \"var a = goog.getCssName('goog-button');\" +\n         \"var b = goog.getCssName('css-button');\" +\n         \"var c = goog.getCssName('goog-menu');\" +\n         \"var d = goog.getCssName('css-menu');\",\n         \"var goog = { getCssName: function() {},\" +\n         \"             setCssNameMapping: function() {} },\" +\n         \"    a = 'a-b',\" +\n         \"    b = 'css-b',\" +\n         \"    c = 'a-menu',\" +\n         \"    d = 'css-menu';\");\n  }\n",
        "begin_line": 306,
        "end_line": 320,
        "comment": "",
        "child_ranges": [
            "(line 307,col 5)-(line 319,col 32)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue70()",
        "snippet": "  public void testIssue70() {\n    test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "",
        "child_ranges": [
            "(line 327,col 5)-(line 327,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue81()",
        "snippet": "  public void testIssue81() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    useStringComparison = true;\n    test(\"eval('1'); var x = eval; x('2');\",\n         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n  }\n",
        "begin_line": 330,
        "end_line": 335,
        "comment": "",
        "child_ranges": [
            "(line 331,col 5)-(line 331,col 59)",
            "(line 332,col 5)-(line 332,col 31)",
            "(line 333,col 5)-(line 334,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue115()",
        "snippet": "  public void testIssue115() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--jscomp_off=es5Strict\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"function f() { \" +\n         \"  var arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\",\n         \"function f() { \" +\n         \"  arguments = Array.prototype.slice.call(arguments, 0);\" +\n         \"  return arguments[0]; \" +\n         \"}\");\n  }\n",
        "begin_line": 337,
        "end_line": 349,
        "comment": "",
        "child_ranges": [
            "(line 338,col 5)-(line 338,col 57)",
            "(line 339,col 5)-(line 339,col 39)",
            "(line 340,col 5)-(line 340,col 40)",
            "(line 341,col 5)-(line 348,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue297()",
        "snippet": "  public void testIssue297() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function f(p) {\" +\n         \" var x;\" +\n         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n         \"}\",\n         \"function f(b) {\" +\n         \" var a;\" +\n         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && a>0);\" +\n         \"}\");\n  }\n",
        "begin_line": 351,
        "end_line": 361,
        "comment": "",
        "child_ranges": [
            "(line 352,col 5)-(line 352,col 57)",
            "(line 353,col 5)-(line 360,col 14)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testIssue504()",
        "snippet": "  public void testIssue504() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"void function() { alert('hi'); }();\",\n         \"alert('hi');\", CheckSideEffects.USELESS_CODE_ERROR);\n  }\n",
        "begin_line": 363,
        "end_line": 367,
        "comment": "",
        "child_ranges": [
            "(line 364,col 5)-(line 364,col 59)",
            "(line 365,col 5)-(line 366,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag1()",
        "snippet": "  public void testDebugFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=false\");\n    test(\"function foo(a) {}\",\n         \"function foo() {}\");\n  }\n",
        "begin_line": 369,
        "end_line": 374,
        "comment": "",
        "child_ranges": [
            "(line 370,col 5)-(line 370,col 57)",
            "(line 371,col 5)-(line 371,col 30)",
            "(line 372,col 5)-(line 373,col 30)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag2()",
        "snippet": "  public void testDebugFlag2() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug=true\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 376,
        "end_line": 381,
        "comment": "",
        "child_ranges": [
            "(line 377,col 5)-(line 377,col 57)",
            "(line 378,col 5)-(line 378,col 29)",
            "(line 379,col 5)-(line 380,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag3()",
        "snippet": "  public void testDebugFlag3() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=false\");\n    test(\"function Foo() {}\" +\n         \"Foo.x = 1;\" +\n         \"function f() {throw new Foo().x;} f();\",\n         \"throw (new function() {}).a;\");\n  }\n",
        "begin_line": 383,
        "end_line": 391,
        "comment": "",
        "child_ranges": [
            "(line 384,col 5)-(line 384,col 59)",
            "(line 385,col 5)-(line 385,col 38)",
            "(line 386,col 5)-(line 386,col 30)",
            "(line 387,col 5)-(line 390,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDebugFlag4()",
        "snippet": "  public void testDebugFlag4() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    args.add(\"--warning_level=QUIET\");\n    args.add(\"--debug=true\");\n    test(\"function Foo() {}\" +\n        \"Foo.x = 1;\" +\n        \"function f() {throw new Foo().x;} f();\",\n        \"throw (new function Foo() {}).$x$;\");\n  }\n",
        "begin_line": 393,
        "end_line": 401,
        "comment": "",
        "child_ranges": [
            "(line 394,col 5)-(line 394,col 59)",
            "(line 395,col 5)-(line 395,col 38)",
            "(line 396,col 5)-(line 396,col 29)",
            "(line 397,col 5)-(line 400,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag1()",
        "snippet": "  public void testBooleanFlag1() {\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    args.add(\"--debug\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 403,
        "end_line": 408,
        "comment": "",
        "child_ranges": [
            "(line 404,col 5)-(line 404,col 57)",
            "(line 405,col 5)-(line 405,col 24)",
            "(line 406,col 5)-(line 407,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testBooleanFlag2()",
        "snippet": "  public void testBooleanFlag2() {\n    args.add(\"--debug\");\n    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n    test(\"function foo(a) {alert(a)}\",\n         \"function foo($a$$) {alert($a$$)}\");\n  }\n",
        "begin_line": 410,
        "end_line": 415,
        "comment": "",
        "child_ranges": [
            "(line 411,col 5)-(line 411,col 24)",
            "(line 412,col 5)-(line 412,col 57)",
            "(line 413,col 5)-(line 414,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testHelpFlag()",
        "snippet": "  public void testHelpFlag() {\n    args.add(\"--help\");\n    assertFalse(\n        createCommandLineRunner(\n            new String[] {\"function f() {}\"}).shouldRunCompiler());\n  }\n",
        "begin_line": 417,
        "end_line": 422,
        "comment": "",
        "child_ranges": [
            "(line 418,col 5)-(line 418,col 23)",
            "(line 419,col 5)-(line 421,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting1()",
        "snippet": "  public void testExternsLifting1() throws Exception{\n    String code = \"/** @externs */ function f() {}\";\n    test(new String[] {code},\n         new String[] {});\n\n    assertEquals(2, lastCompiler.getExternsForTesting().size());\n\n    CompilerInput extern = lastCompiler.getExternsForTesting().get(1);\n    assertNull(extern.getModule());\n    assertTrue(extern.isExtern());\n    assertEquals(code, extern.getCode());\n\n    assertEquals(1, lastCompiler.getInputsForTesting().size());\n\n    CompilerInput input = lastCompiler.getInputsForTesting().get(0);\n    assertNotNull(input.getModule());\n    assertFalse(input.isExtern());\n    assertEquals(\"\", input.getCode());\n  }\n",
        "begin_line": 424,
        "end_line": 442,
        "comment": "",
        "child_ranges": [
            "(line 425,col 5)-(line 425,col 52)",
            "(line 426,col 5)-(line 427,col 26)",
            "(line 429,col 5)-(line 429,col 64)",
            "(line 431,col 5)-(line 431,col 70)",
            "(line 432,col 5)-(line 432,col 35)",
            "(line 433,col 5)-(line 433,col 34)",
            "(line 434,col 5)-(line 434,col 41)",
            "(line 436,col 5)-(line 436,col 63)",
            "(line 438,col 5)-(line 438,col 68)",
            "(line 439,col 5)-(line 439,col 37)",
            "(line 440,col 5)-(line 440,col 34)",
            "(line 441,col 5)-(line 441,col 38)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testExternsLifting2()",
        "snippet": "  public void testExternsLifting2() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\"/** @externs */ function f() {}\", \"f(3);\"},\n         new String[] {\"f(3);\"},\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n  }\n",
        "begin_line": 444,
        "end_line": 449,
        "comment": "",
        "child_ranges": [
            "(line 445,col 5)-(line 445,col 40)",
            "(line 446,col 5)-(line 448,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOff()",
        "snippet": "  public void testSourceSortingOff() {\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         }, ProcessClosurePrimitives.LATE_PROVIDE_ERROR);\n  }\n",
        "begin_line": 451,
        "end_line": 456,
        "comment": "",
        "child_ranges": [
            "(line 452,col 5)-(line 455,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingOn()",
        "snippet": "  public void testSourceSortingOn() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 458,
        "end_line": 468,
        "comment": "",
        "child_ranges": [
            "(line 459,col 5)-(line 459,col 51)",
            "(line 460,col 5)-(line 467,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps1()",
        "snippet": "  public void testSourceSortingCircularDeps1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 470,
        "end_line": 478,
        "comment": "",
        "child_ranges": [
            "(line 471,col 5)-(line 471,col 51)",
            "(line 472,col 5)-(line 477,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceSortingCircularDeps2()",
        "snippet": "  public void testSourceSortingCircularDeps2() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.provide('roses.lime.juice');\",\n          \"goog.provide('gin'); goog.require('tonic'); var gin = {};\",\n          \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\",\n          \"goog.require('gin'); goog.require('tonic');\",\n          \"goog.provide('gimlet');\" +\n          \"     goog.require('gin'); goog.require('roses.lime.juice');\"\n         },\n         JSModule.CIRCULAR_DEPENDENCY_ERROR);\n  }\n",
        "begin_line": 480,
        "end_line": 491,
        "comment": "",
        "child_ranges": [
            "(line 481,col 5)-(line 481,col 51)",
            "(line 482,col 5)-(line 490,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn1()",
        "snippet": "  public void testSourcePruningOn1() {\n    args.add(\"--manage_closure_dependencies=true\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\"\n         });\n  }\n",
        "begin_line": 493,
        "end_line": 504,
        "comment": "",
        "child_ranges": [
            "(line 494,col 5)-(line 494,col 51)",
            "(line 495,col 5)-(line 503,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn2()",
        "snippet": "  public void testSourcePruningOn2() {\n    args.add(\"--closure_entry_point=guinness\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var guinness = {};\"\n         });\n  }\n",
        "begin_line": 506,
        "end_line": 517,
        "comment": "",
        "child_ranges": [
            "(line 507,col 5)-(line 507,col 47)",
            "(line 508,col 5)-(line 516,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn3()",
        "snippet": "  public void testSourcePruningOn3() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 519,
        "end_line": 529,
        "comment": "",
        "child_ranges": [
            "(line 520,col 5)-(line 520,col 45)",
            "(line 521,col 5)-(line 528,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn4()",
        "snippet": "  public void testSourcePruningOn4() {\n    args.add(\"--closure_entry_point=scotch\");\n    args.add(\"--closure_entry_point=beer\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 531,
        "end_line": 543,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 532,col 45)",
            "(line 533,col 5)-(line 533,col 43)",
            "(line 534,col 5)-(line 542,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn5()",
        "snippet": "  public void testSourcePruningOn5() {\n    args.add(\"--closure_entry_point=shiraz\");\n    test(new String[] {\n          \"goog.provide('guinness');\\ngoog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         Compiler.MISSING_ENTRY_ERROR);\n  }\n",
        "begin_line": 545,
        "end_line": 553,
        "comment": "",
        "child_ranges": [
            "(line 546,col 5)-(line 546,col 45)",
            "(line 547,col 5)-(line 552,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourcePruningOn6()",
        "snippet": "  public void testSourcePruningOn6() {\n    args.add(\"--closure_entry_point=scotch\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer');\",\n          \"goog.provide('scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {};\",\n           \"\",\n           \"var scotch = {}, x = 3;\",\n         });\n  }\n",
        "begin_line": 555,
        "end_line": 567,
        "comment": "",
        "child_ranges": [
            "(line 556,col 5)-(line 556,col 45)",
            "(line 557,col 5)-(line 566,col 12)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testForwardDeclareDroppedTypes()",
        "snippet": "  public void testForwardDeclareDroppedTypes() {\n    args.add(\"--manage_closure_dependencies=true\");\n\n    args.add(\"--warning_level=VERBOSE\");\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\",\n          \"goog.provide('Scotch'); var x = 3;\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         });\n\n    test(new String[] {\n          \"goog.require('beer');\",\n          \"goog.provide('beer'); /** @param {Scotch} x */ function f(x) {}\"\n         },\n         new String[] {\n           \"var beer = {}; function f() {}\",\n           \"\"\n         },\n         RhinoErrorReporter.TYPE_PARSE_ERROR);\n  }\n",
        "begin_line": 570,
        "end_line": 593,
        "comment": "",
        "child_ranges": [
            "(line 571,col 5)-(line 571,col 51)",
            "(line 573,col 5)-(line 573,col 40)",
            "(line 574,col 5)-(line 582,col 12)",
            "(line 584,col 5)-(line 592,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion1()",
        "snippet": "  public void testSourceMapExpansion1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    args.add(\"--create_source_map=%outname%.map\");\n    testSame(\"var x = 3;\");\n    assertEquals(\"/path/to/out.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 595,
        "end_line": 603,
        "comment": "",
        "child_ranges": [
            "(line 596,col 5)-(line 596,col 33)",
            "(line 597,col 5)-(line 597,col 32)",
            "(line 598,col 5)-(line 598,col 50)",
            "(line 599,col 5)-(line 599,col 27)",
            "(line 600,col 5)-(line 602,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion2()",
        "snippet": "  public void testSourceMapExpansion2() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(), null));\n  }\n",
        "begin_line": 605,
        "end_line": 613,
        "comment": "",
        "child_ranges": [
            "(line 606,col 5)-(line 606,col 37)",
            "(line 607,col 5)-(line 607,col 50)",
            "(line 608,col 5)-(line 608,col 48)",
            "(line 609,col 5)-(line 609,col 56)",
            "(line 610,col 5)-(line 612,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapExpansion3()",
        "snippet": "  public void testSourceMapExpansion3() {\n    useModules = ModulePattern.CHAIN;\n    args.add(\"--create_source_map=%outname%.map\");\n    args.add(\"--module_output_path_prefix=foo_\");\n    testSame(new String[] {\"var x = 3;\", \"var y = 5;\"});\n    assertEquals(\"foo_m0.js.map\",\n        lastCommandLineRunner.expandSourceMapPath(\n            lastCompiler.getOptions(),\n            lastCompiler.getModuleGraph().getRootModule()));\n  }\n",
        "begin_line": 615,
        "end_line": 624,
        "comment": "",
        "child_ranges": [
            "(line 616,col 5)-(line 616,col 37)",
            "(line 617,col 5)-(line 617,col 50)",
            "(line 618,col 5)-(line 618,col 49)",
            "(line 619,col 5)-(line 619,col 56)",
            "(line 620,col 5)-(line 623,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSourceMapFormat1()",
        "snippet": "  public void testSourceMapFormat1() {\n    args.add(\"--js_output_file\");\n    args.add(\"/path/to/out.js\");\n    testSame(\"var x = 3;\");\n    assertEquals(SourceMap.Format.DEFAULT,\n        lastCompiler.getOptions().sourceMapFormat);\n  }\n",
        "begin_line": 626,
        "end_line": 632,
        "comment": "",
        "child_ranges": [
            "(line 627,col 5)-(line 627,col 33)",
            "(line 628,col 5)-(line 628,col 32)",
            "(line 629,col 5)-(line 629,col 27)",
            "(line 630,col 5)-(line 631,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testCharSetExpansion()",
        "snippet": "  public void testCharSetExpansion() {\n    testSame(\"\");\n    assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);\n    args.add(\"--charset=UTF-8\");\n    testSame(\"\");\n    assertEquals(\"UTF-8\", lastCompiler.getOptions().outputCharset);\n  }\n",
        "begin_line": 634,
        "end_line": 640,
        "comment": "",
        "child_ranges": [
            "(line 635,col 5)-(line 635,col 17)",
            "(line 636,col 5)-(line 636,col 70)",
            "(line 637,col 5)-(line 637,col 32)",
            "(line 638,col 5)-(line 638,col 17)",
            "(line 639,col 5)-(line 639,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testChainModuleManifest()",
        "snippet": "  public void testChainModuleManifest() throws Exception {\n    useModules = ModulePattern.CHAIN;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m1}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m2}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 642,
        "end_line": 663,
        "comment": "",
        "child_ranges": [
            "(line 643,col 5)-(line 643,col 37)",
            "(line 644,col 5)-(line 645,col 67)",
            "(line 647,col 5)-(line 647,col 48)",
            "(line 648,col 5)-(line 649,col 54)",
            "(line 650,col 5)-(line 662,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testStarModuleManifest()",
        "snippet": "  public void testStarModuleManifest() throws Exception {\n    useModules = ModulePattern.STAR;\n    testSame(new String[] {\n          \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n\n    StringBuilder builder = new StringBuilder();\n    lastCommandLineRunner.printModuleGraphManifestOrBundleTo(\n        lastCompiler.getModuleGraph(), builder, true);\n    assertEquals(\n        \"{m0}\\n\" +\n        \"i0\\n\" +\n        \"\\n\" +\n        \"{m1:m0}\\n\" +\n        \"i1\\n\" +\n        \"\\n\" +\n        \"{m2:m0}\\n\" +\n        \"i2\\n\" +\n        \"\\n\" +\n        \"{m3:m0}\\n\" +\n        \"i3\\n\",\n        builder.toString());\n  }\n",
        "begin_line": 665,
        "end_line": 686,
        "comment": "",
        "child_ranges": [
            "(line 666,col 5)-(line 666,col 36)",
            "(line 667,col 5)-(line 668,col 67)",
            "(line 670,col 5)-(line 670,col 48)",
            "(line 671,col 5)-(line 672,col 54)",
            "(line 673,col 5)-(line 685,col 28)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag()",
        "snippet": "  public void testVersionFlag() {\n    args.add(\"--version\");\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 688,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 689,col 5)-(line 689,col 26)",
            "(line 690,col 5)-(line 690,col 17)",
            "(line 691,col 5)-(line 695,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testVersionFlag2()",
        "snippet": "  public void testVersionFlag2() {\n    lastArg = \"--version\";\n    testSame(\"\");\n    assertEquals(\n        0,\n        new String(errReader.toByteArray()).indexOf(\n            \"Closure Compiler (http://code.google.com/closure/compiler)\\n\" +\n            \"Version: \"));\n  }\n",
        "begin_line": 698,
        "end_line": 706,
        "comment": "",
        "child_ranges": [
            "(line 699,col 5)-(line 699,col 26)",
            "(line 700,col 5)-(line 700,col 17)",
            "(line 701,col 5)-(line 705,col 26)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testPrintAstFlag()",
        "snippet": "  public void testPrintAstFlag() {\n    args.add(\"--print_ast=true\");\n    testSame(\"\");\n    assertEquals(\n        \"digraph AST {\\n\" +\n        \"  node [color=lightblue2, style=filled];\\n\" +\n        \"  node0 [label=\\\"BLOCK\\\"];\\n\" +\n        \"  node1 [label=\\\"SCRIPT\\\"];\\n\" +\n        \"  node0 -> node1 [weight=1];\\n\" +\n        \"  node1 -> RETURN [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> RETURN [label=\\\"SYN_BLOCK\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"  node0 -> node1 [label=\\\"UNCOND\\\", \" +\n            \"fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n        \"}\\n\\n\",\n        new String(outReader.toByteArray()));\n  }\n",
        "begin_line": 708,
        "end_line": 725,
        "comment": "",
        "child_ranges": [
            "(line 709,col 5)-(line 709,col 33)",
            "(line 710,col 5)-(line 710,col 17)",
            "(line 711,col 5)-(line 724,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSyntheticExterns()",
        "snippet": "  public void testSyntheticExterns() {\n    externs = ImmutableList.of(\n        JSSourceFile.fromCode(\"externs\", \"myVar.property;\"));\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         VarCheck.UNDEFINED_EXTERN_VAR_ERROR);\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var yourVar = {};\",\n         \"var theirVar={},myVar={},yourVar={};\");\n\n    args.add(\"--jscomp_off=externsValidation\");\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"var theirVar = {}; var myVar = {}; var myVar = {};\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);\n  }\n",
        "begin_line": 727,
        "end_line": 742,
        "comment": "",
        "child_ranges": [
            "(line 728,col 5)-(line 729,col 61)",
            "(line 730,col 5)-(line 731,col 46)",
            "(line 733,col 5)-(line 733,col 47)",
            "(line 734,col 5)-(line 734,col 40)",
            "(line 735,col 5)-(line 736,col 49)",
            "(line 738,col 5)-(line 738,col 47)",
            "(line 739,col 5)-(line 739,col 40)",
            "(line 740,col 5)-(line 741,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGoogAssertStripping()",
        "snippet": "  public void testGoogAssertStripping() {\n    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n    test(\"goog.asserts.assert(false)\",\n         \"\");\n    args.add(\"--debug\");\n    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(!1)\");\n  }\n",
        "begin_line": 744,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 745,col 5)-(line 745,col 59)",
            "(line 746,col 5)-(line 747,col 13)",
            "(line 748,col 5)-(line 748,col 24)",
            "(line 749,col 5)-(line 749,col 70)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testMissingReturnCheckOnWithVerbose()",
        "snippet": "  public void testMissingReturnCheckOnWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @return {number} */ function f() {f()} f();\",\n        CheckMissingReturn.MISSING_RETURN_STATEMENT);\n  }\n",
        "begin_line": 752,
        "end_line": 756,
        "comment": "",
        "child_ranges": [
            "(line 753,col 5)-(line 753,col 40)",
            "(line 754,col 5)-(line 755,col 53)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testGenerateExports()",
        "snippet": "  public void testGenerateExports() {\n    args.add(\"--generate_exports=true\");\n    test(\"/** @export */ foo.prototype.x = function() {};\",\n        \"foo.prototype.x=function(){};\"+\n        \"goog.exportSymbol(\\\"foo.prototype.x\\\",foo.prototype.x);\");\n  }\n",
        "begin_line": 758,
        "end_line": 763,
        "comment": "",
        "child_ranges": [
            "(line 759,col 5)-(line 759,col 40)",
            "(line 760,col 5)-(line 762,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testDepreciationWithVerbose()",
        "snippet": "  public void testDepreciationWithVerbose() {\n    args.add(\"--warning_level=VERBOSE\");\n    test(\"/** @deprecated */ function f() {}; f()\",\n       CheckAccessControls.DEPRECATED_NAME);\n  }\n",
        "begin_line": 765,
        "end_line": 769,
        "comment": "",
        "child_ranges": [
            "(line 766,col 5)-(line 766,col 40)",
            "(line 767,col 5)-(line 768,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testTwoParseErrors()",
        "snippet": "  public void testTwoParseErrors() {\n    // If parse errors are reported in different files, make\n    // sure all of them are reported.\n    Compiler compiler = compile(new String[] {\n      \"var a b;\",\n      \"var b c;\"\n    });\n    assertEquals(2, compiler.getErrors().length);\n  }\n",
        "begin_line": 771,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 774,col 5)-(line 777,col 7)",
            "(line 778,col 5)-(line 778,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES3ByDefault()",
        "snippet": "  public void testES3ByDefault() {\n    test(\"var x = f.function\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 781,
        "end_line": 783,
        "comment": "",
        "child_ranges": [
            "(line 782,col 5)-(line 782,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5()",
        "snippet": "  public void testES5() {\n    args.add(\"--language_in=ECMASCRIPT5\");\n    test(\"var x = f.function\", \"var x = f.function\");\n    test(\"var let\", \"var let\");\n  }\n",
        "begin_line": 785,
        "end_line": 789,
        "comment": "",
        "child_ranges": [
            "(line 786,col 5)-(line 786,col 42)",
            "(line 787,col 5)-(line 787,col 53)",
            "(line 788,col 5)-(line 788,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5Strict()",
        "snippet": "  public void testES5Strict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    test(\"var x = f.function\", \"'use strict';var x = f.function\");\n    test(\"var let\", RhinoErrorReporter.PARSE_ERROR);\n  }\n",
        "begin_line": 791,
        "end_line": 795,
        "comment": "",
        "child_ranges": [
            "(line 792,col 5)-(line 792,col 49)",
            "(line 793,col 5)-(line 793,col 66)",
            "(line 794,col 5)-(line 794,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrict()",
        "snippet": "  public void testES5StrictUseStrict() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n  }\n",
        "begin_line": 797,
        "end_line": 802,
        "comment": "",
        "child_ranges": [
            "(line 798,col 5)-(line 798,col 49)",
            "(line 799,col 5)-(line 799,col 69)",
            "(line 800,col 5)-(line 800,col 46)",
            "(line 801,col 5)-(line 801,col 64)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testES5StrictUseStrictMultipleInputs()",
        "snippet": "  public void testES5StrictUseStrictMultipleInputs() {\n    args.add(\"--language_in=ECMASCRIPT5_STRICT\");\n    Compiler compiler = compile(new String[] {\"var x = f.function\",\n        \"var y = f.function\", \"var z = f.function\"});\n    String outputSource = compiler.toSource();\n    assertEquals(\"'use strict'\", outputSource.substring(0, 12));\n    assertEquals(outputSource.substring(13).indexOf(\"'use strict'\"), -1);\n  }\n",
        "begin_line": 804,
        "end_line": 811,
        "comment": "",
        "child_ranges": [
            "(line 805,col 5)-(line 805,col 49)",
            "(line 806,col 5)-(line 807,col 53)",
            "(line 808,col 5)-(line 808,col 46)",
            "(line 809,col 5)-(line 809,col 64)",
            "(line 810,col 5)-(line 810,col 73)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String)",
        "snippet": "  private void testSame(String original) {\n    testSame(new String[] { original });\n  }\n",
        "begin_line": 815,
        "end_line": 817,
        "comment": "",
        "child_ranges": [
            "(line 816,col 5)-(line 816,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.testSame(java.lang.String[])",
        "snippet": "  private void testSame(String[] original) {\n    test(original, original);\n  }\n",
        "begin_line": 819,
        "end_line": 821,
        "comment": "",
        "child_ranges": [
            "(line 820,col 5)-(line 820,col 29)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String)",
        "snippet": "  private void test(String original, String compiled) {\n    test(new String[] { original }, new String[] { compiled });\n  }\n",
        "begin_line": 823,
        "end_line": 825,
        "comment": "",
        "child_ranges": [
            "(line 824,col 5)-(line 824,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[])",
        "snippet": "  private void test(String[] original, String[] compiled) {\n    test(original, compiled, null);\n  }\n",
        "begin_line": 831,
        "end_line": 833,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   ",
        "child_ranges": [
            "(line 832,col 5)-(line 832,col 35)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, String[] compiled,\n                    DiagnosticType warning) {\n    Compiler compiler = compile(original);\n\n    if (warning == null) {\n      assertEquals(\"Expected no warnings or errors\\n\" +\n          \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n          \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n          0, compiler.getErrors().length + compiler.getWarnings().length);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n    }\n\n    Node root = compiler.getRoot().getLastChild();\n    if (useStringComparison) {\n      assertEquals(Joiner.on(\"\").join(compiled), compiler.toSource());\n    } else {\n      Node expectedRoot = parse(compiled);\n      String explanation = expectedRoot.checkTreeEquals(root);\n      assertNull(\"\\nExpected: \" + compiler.toSource(expectedRoot) +\n          \"\\nResult: \" + compiler.toSource(root) +\n          \"\\n\" + explanation, explanation);\n    }\n  }\n",
        "begin_line": 841,
        "end_line": 865,
        "comment": "\n   * Asserts that when compiling with the given compiler options,\n   * {@code original} is transformed into {@code compiled}.\n   * If {@code warning} is non-null, we will also check if the given\n   * warning type was emitted.\n   ",
        "child_ranges": [
            "(line 843,col 5)-(line 843,col 42)",
            "(line 845,col 5)-(line 853,col 5)",
            "(line 855,col 5)-(line 855,col 50)",
            "(line 856,col 5)-(line 864,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, DiagnosticType warning) {\n    test(new String[] { original }, warning);\n  }\n",
        "begin_line": 870,
        "end_line": 872,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 871,col 5)-(line 871,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String, java.lang.String, com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String original, String expected, DiagnosticType warning) {\n    test(new String[] { original }, new String[] { expected }, warning);\n  }\n",
        "begin_line": 874,
        "end_line": 876,
        "comment": "",
        "child_ranges": [
            "(line 875,col 5)-(line 875,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.test(java.lang.String[], com.google.javascript.jscomp.DiagnosticType)",
        "snippet": "  private void test(String[] original, DiagnosticType warning) {\n    Compiler compiler = compile(original);\n    assertEquals(\"Expected exactly one warning or error \" +\n        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n        1, compiler.getErrors().length + compiler.getWarnings().length);\n\n    assertTrue(exitCodes.size() > 0);\n    int lastExitCode = exitCodes.get(exitCodes.size() - 1);\n\n    if (compiler.getErrors().length > 0) {\n      assertEquals(1, compiler.getErrors().length);\n      assertEquals(warning, compiler.getErrors()[0].getType());\n      assertEquals(1, lastExitCode);\n    } else {\n      assertEquals(1, compiler.getWarnings().length);\n      assertEquals(warning, compiler.getWarnings()[0].getType());\n      assertEquals(0, lastExitCode);\n    }\n  }\n",
        "begin_line": 881,
        "end_line": 900,
        "comment": "\n   * Asserts that when compiling, there is an error or warning.\n   ",
        "child_ranges": [
            "(line 882,col 5)-(line 882,col 42)",
            "(line 883,col 5)-(line 886,col 72)",
            "(line 888,col 5)-(line 888,col 37)",
            "(line 889,col 5)-(line 889,col 59)",
            "(line 891,col 5)-(line 899,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.createCommandLineRunner(java.lang.String[])",
        "snippet": "  private CommandLineRunner createCommandLineRunner(String[] original) {\n    for (int i = 0; i < original.length; i++) {\n      args.add(\"--js\");\n      args.add(\"/path/to/input\" + i + \".js\");\n      if (useModules == ModulePattern.CHAIN) {\n        args.add(\"--module\");\n        args.add(\"mod\" + i + \":1\" + (i > 0 ? (\":mod\" + (i - 1)) : \"\"));\n      } else if (useModules == ModulePattern.STAR) {\n        args.add(\"--module\");\n        args.add(\"mod\" + i + \":1\" + (i > 0 ? \":mod0\" : \"\"));\n      }\n    }\n\n    if (lastArg != null) {\n      args.add(lastArg);\n    }\n\n    String[] argStrings = args.toArray(new String[] {});\n    return new CommandLineRunner(\n        argStrings,\n        new PrintStream(outReader),\n        new PrintStream(errReader));\n  }\n",
        "begin_line": 902,
        "end_line": 924,
        "comment": "",
        "child_ranges": [
            "(line 903,col 5)-(line 913,col 5)",
            "(line 915,col 5)-(line 917,col 5)",
            "(line 919,col 5)-(line 919,col 56)",
            "(line 920,col 5)-(line 923,col 36)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.compile(java.lang.String[])",
        "snippet": "  private Compiler compile(String[] original) {\n    CommandLineRunner runner = createCommandLineRunner(original);\n    assertTrue(runner.shouldRunCompiler());\n    Supplier<List<JSSourceFile>> inputsSupplier = null;\n    Supplier<List<JSModule>> modulesSupplier = null;\n\n    if (useModules == ModulePattern.NONE) {\n      List<JSSourceFile> inputs = Lists.newArrayList();\n      for (int i = 0; i < original.length; i++) {\n        inputs.add(JSSourceFile.fromCode(\"input\" + i, original[i]));\n      }\n      inputsSupplier = Suppliers.ofInstance(inputs);\n    } else if (useModules == ModulePattern.STAR) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleStar(original)));\n    } else if (useModules == ModulePattern.CHAIN) {\n      modulesSupplier = Suppliers.<List<JSModule>>ofInstance(\n          Lists.<JSModule>newArrayList(\n              CompilerTestCase.createModuleChain(original)));\n    } else {\n      throw new IllegalArgumentException(\"Unknown module type: \" + useModules);\n    }\n\n    runner.enableTestMode(\n        Suppliers.<List<JSSourceFile>>ofInstance(externs),\n        inputsSupplier,\n        modulesSupplier,\n        new Function<Integer, Boolean>() {\n          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n        });\n    runner.run();\n    lastCompiler = runner.getCompiler();\n    lastCommandLineRunner = runner;\n    return lastCompiler;\n  }\n",
        "begin_line": 926,
        "end_line": 964,
        "comment": "",
        "child_ranges": [
            "(line 927,col 5)-(line 927,col 65)",
            "(line 928,col 5)-(line 928,col 43)",
            "(line 929,col 5)-(line 929,col 55)",
            "(line 930,col 5)-(line 930,col 52)",
            "(line 932,col 5)-(line 948,col 5)",
            "(line 950,col 5)-(line 959,col 11)",
            "(line 960,col 5)-(line 960,col 17)",
            "(line 961,col 5)-(line 961,col 40)",
            "(line 962,col 5)-(line 962,col 35)",
            "(line 963,col 5)-(line 963,col 24)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.Anonymous-df06e2cb-ba24-4b12-9a52-b20401263ffc.apply(java.lang.Integer)",
        "snippet": "          @Override\n          public Boolean apply(Integer code) {\n            return exitCodes.add(code);\n          }\n",
        "begin_line": 955,
        "end_line": 958,
        "comment": "",
        "child_ranges": [
            "(line 957,col 13)-(line 957,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunnerTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/CommandLineRunnerTest.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunnerTest.parse(java.lang.String[])",
        "snippet": "  private Node parse(String[] original) {\n    String[] argStrings = args.toArray(new String[] {});\n    CommandLineRunner runner = new CommandLineRunner(argStrings);\n    Compiler compiler = runner.createCompiler();\n    List<JSSourceFile> inputs = Lists.newArrayList();\n    for (int i = 0; i < original.length; i++) {\n      inputs.add(JSSourceFile.fromCode(\"input\" + i, original[i]));\n    }\n    CompilerOptions options = new CompilerOptions();\n    // ECMASCRIPT5 is the most forgiving.\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.init(externs, inputs, options);\n    Node all = compiler.parseInputs();\n    Preconditions.checkState(compiler.getErrorCount() == 0);\n    Preconditions.checkNotNull(all);\n    Node n = all.getLastChild();\n    return n;\n  }\n",
        "begin_line": 966,
        "end_line": 983,
        "comment": "",
        "child_ranges": [
            "(line 967,col 5)-(line 967,col 56)",
            "(line 968,col 5)-(line 968,col 65)",
            "(line 969,col 5)-(line 969,col 48)",
            "(line 970,col 5)-(line 970,col 53)",
            "(line 971,col 5)-(line 973,col 5)",
            "(line 974,col 5)-(line 974,col 52)",
            "(line 976,col 5)-(line 976,col 52)",
            "(line 977,col 5)-(line 977,col 44)",
            "(line 978,col 5)-(line 978,col 38)",
            "(line 979,col 5)-(line 979,col 60)",
            "(line 980,col 5)-(line 980,col 36)",
            "(line 981,col 5)-(line 981,col 32)",
            "(line 982,col 5)-(line 982,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.parse(java.lang.String)",
        "snippet": "  private static Node parse(String js) {\n    Compiler compiler = new Compiler();\n    compiler.initCompilerOptionsIfTesting();\n    compiler.getOptions().setLanguageIn(LanguageMode.ECMASCRIPT5);\n    Node n = compiler.parseTestCode(js);\n    assertEquals(0, compiler.getErrorCount());\n    return n;\n  }\n",
        "begin_line": 37,
        "end_line": 44,
        "comment": "",
        "child_ranges": [
            "(line 38,col 5)-(line 38,col 39)",
            "(line 39,col 5)-(line 39,col 44)",
            "(line 40,col 5)-(line 40,col 66)",
            "(line 41,col 5)-(line 41,col 40)",
            "(line 42,col 5)-(line 42,col 46)",
            "(line 43,col 5)-(line 43,col 13)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getNode(java.lang.String)",
        "snippet": "  static Node getNode(String js) {\n    Node root = parse(\"var a=(\" + js + \");\");\n    Node expr = root.getFirstChild();\n    Node var = expr.getFirstChild();\n    return var.getFirstChild();\n  }\n",
        "begin_line": 46,
        "end_line": 51,
        "comment": "",
        "child_ranges": [
            "(line 47,col 5)-(line 47,col 45)",
            "(line 48,col 5)-(line 48,col 37)",
            "(line 49,col 5)-(line 49,col 36)",
            "(line 50,col 5)-(line 50,col 31)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLiteralOrConstValue()",
        "snippet": "  public void testIsLiteralOrConstValue() {\n    assertLiteralAndImmutable(getNode(\"10\"));\n    assertLiteralAndImmutable(getNode(\"-10\"));\n    assertLiteralButNotImmutable(getNode(\"[10, 20]\"));\n    assertLiteralButNotImmutable(getNode(\"{'a': 20}\"));\n    assertLiteralButNotImmutable(getNode(\"[10, , 1.0, [undefined], 'a']\"));\n    assertLiteralButNotImmutable(getNode(\"/abc/\"));\n    assertLiteralAndImmutable(getNode(\"\\\"string\\\"\"));\n    assertLiteralAndImmutable(getNode(\"'aaa'\"));\n    assertLiteralAndImmutable(getNode(\"null\"));\n    assertLiteralAndImmutable(getNode(\"undefined\"));\n    assertLiteralAndImmutable(getNode(\"void 0\"));\n    assertNotLiteral(getNode(\"abc\"));\n    assertNotLiteral(getNode(\"[10, foo(), 20]\"));\n    assertNotLiteral(getNode(\"foo()\"));\n    assertNotLiteral(getNode(\"c + d\"));\n    assertNotLiteral(getNode(\"{'a': foo()}\"));\n    assertNotLiteral(getNode(\"void foo()\"));\n  }\n",
        "begin_line": 53,
        "end_line": 71,
        "comment": "",
        "child_ranges": [
            "(line 54,col 5)-(line 54,col 45)",
            "(line 55,col 5)-(line 55,col 46)",
            "(line 56,col 5)-(line 56,col 54)",
            "(line 57,col 5)-(line 57,col 55)",
            "(line 58,col 5)-(line 58,col 75)",
            "(line 59,col 5)-(line 59,col 51)",
            "(line 60,col 5)-(line 60,col 53)",
            "(line 61,col 5)-(line 61,col 48)",
            "(line 62,col 5)-(line 62,col 47)",
            "(line 63,col 5)-(line 63,col 52)",
            "(line 64,col 5)-(line 64,col 49)",
            "(line 65,col 5)-(line 65,col 37)",
            "(line 66,col 5)-(line 66,col 49)",
            "(line 67,col 5)-(line 67,col 39)",
            "(line 68,col 5)-(line 68,col 39)",
            "(line 69,col 5)-(line 69,col 46)",
            "(line 70,col 5)-(line 70,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralAndImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralAndImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertTrue(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 73,
        "end_line": 77,
        "comment": "",
        "child_ranges": [
            "(line 74,col 5)-(line 74,col 49)",
            "(line 75,col 5)-(line 75,col 50)",
            "(line 76,col 5)-(line 76,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertLiteralButNotImmutable(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertLiteralButNotImmutable(Node n) {\n    assertTrue(NodeUtil.isLiteralValue(n, true));\n    assertTrue(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 79,
        "end_line": 83,
        "comment": "",
        "child_ranges": [
            "(line 80,col 5)-(line 80,col 49)",
            "(line 81,col 5)-(line 81,col 50)",
            "(line 82,col 5)-(line 82,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNotLiteral(com.google.javascript.rhino.Node)",
        "snippet": "  public void assertNotLiteral(Node n) {\n    assertFalse(NodeUtil.isLiteralValue(n, true));\n    assertFalse(NodeUtil.isLiteralValue(n, false));\n    assertFalse(NodeUtil.isImmutableValue(n));\n  }\n",
        "begin_line": 85,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 86,col 5)-(line 86,col 50)",
            "(line 87,col 5)-(line 87,col 51)",
            "(line 88,col 5)-(line 88,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetBooleanValue()",
        "snippet": "  public void testGetBooleanValue() {\n    assertPureBooleanTrue(\"true\");\n    assertPureBooleanTrue(\"10\");\n    assertPureBooleanTrue(\"'0'\");\n    assertPureBooleanTrue(\"/a/\");\n    assertPureBooleanTrue(\"{}\");\n    assertPureBooleanTrue(\"[]\");\n    assertPureBooleanFalse(\"false\");\n    assertPureBooleanFalse(\"null\");\n    assertPureBooleanFalse(\"0\");\n    assertPureBooleanFalse(\"''\");\n    assertPureBooleanFalse(\"undefined\");\n    assertPureBooleanFalse(\"void 0\");\n    assertPureBooleanUnknown(\"void foo()\");\n    assertPureBooleanUnknown(\"b\");\n    assertPureBooleanUnknown(\"-'0.0'\");\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    assertPureBooleanUnknown(\"{a:foo()}\");\n    assertPureBooleanUnknown(\"[foo()]\");\n  }\n",
        "begin_line": 91,
        "end_line": 111,
        "comment": "",
        "child_ranges": [
            "(line 92,col 5)-(line 92,col 34)",
            "(line 93,col 5)-(line 93,col 32)",
            "(line 94,col 5)-(line 94,col 33)",
            "(line 95,col 5)-(line 95,col 33)",
            "(line 96,col 5)-(line 96,col 32)",
            "(line 97,col 5)-(line 97,col 32)",
            "(line 98,col 5)-(line 98,col 36)",
            "(line 99,col 5)-(line 99,col 35)",
            "(line 100,col 5)-(line 100,col 32)",
            "(line 101,col 5)-(line 101,col 33)",
            "(line 102,col 5)-(line 102,col 40)",
            "(line 103,col 5)-(line 103,col 37)",
            "(line 104,col 5)-(line 104,col 43)",
            "(line 105,col 5)-(line 105,col 34)",
            "(line 106,col 5)-(line 106,col 39)",
            "(line 109,col 5)-(line 109,col 42)",
            "(line 110,col 5)-(line 110,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertPureBooleanTrue(java.lang.String)",
        "snippet": "  private void assertPureBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE, NodeUtil.getPureBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "",
        "child_ranges": [
            "(line 114,col 5)-(line 114,col 80)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertPureBooleanFalse(java.lang.String)",
        "snippet": "  private void assertPureBooleanFalse(String val) {\n    assertEquals(\n        TernaryValue.FALSE, NodeUtil.getPureBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 117,
        "end_line": 120,
        "comment": "",
        "child_ranges": [
            "(line 118,col 5)-(line 119,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertPureBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertPureBooleanUnknown(String val) {\n    assertEquals(\n        TernaryValue.UNKNOWN, NodeUtil.getPureBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 122,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 123,col 5)-(line 124,col 74)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetExpressionBooleanValue()",
        "snippet": "  public void testGetExpressionBooleanValue() {\n    assertImpureBooleanTrue(\"a=true\");\n    assertImpureBooleanFalse(\"a=false\");\n\n    assertImpureBooleanTrue(\"a=(false,true)\");\n    assertImpureBooleanFalse(\"a=(true,false)\");\n\n    assertImpureBooleanTrue(\"a=(false || true)\");\n    assertImpureBooleanFalse(\"a=(true && false)\");\n\n    assertImpureBooleanTrue(\"a=!(true && false)\");\n\n    assertImpureBooleanTrue(\"a,true\");\n    assertImpureBooleanFalse(\"a,false\");\n\n    assertImpureBooleanTrue(\"true||false\");\n    assertImpureBooleanFalse(\"false||false\");\n\n    assertImpureBooleanTrue(\"true&&true\");\n    assertImpureBooleanFalse(\"true&&false\");\n\n    assertImpureBooleanFalse(\"!true\");\n    assertImpureBooleanTrue(\"!false\");\n    assertImpureBooleanTrue(\"!''\");\n\n    // Assignment ops other than ASSIGN are unknown.\n    assertImpureBooleanUnknown(\"a *= 2\");\n\n    // Complex expressions that contain anything other then \"=\", \",\", or \"!\" are\n    // unknown.\n    assertImpureBooleanUnknown(\"2 + 2\");\n\n    assertImpureBooleanTrue(\"a=1\");\n    assertImpureBooleanTrue(\"a=/a/\");\n    assertImpureBooleanTrue(\"a={}\");\n\n    assertImpureBooleanTrue(\"true\");\n    assertImpureBooleanTrue(\"10\");\n    assertImpureBooleanTrue(\"'0'\");\n    assertImpureBooleanTrue(\"/a/\");\n    assertImpureBooleanTrue(\"{}\");\n    assertImpureBooleanTrue(\"[]\");\n    assertImpureBooleanFalse(\"false\");\n    assertImpureBooleanFalse(\"null\");\n    assertImpureBooleanFalse(\"0\");\n    assertImpureBooleanFalse(\"''\");\n    assertImpureBooleanFalse(\"undefined\");\n    assertImpureBooleanFalse(\"void 0\");\n    assertImpureBooleanFalse(\"void foo()\");\n\n    assertImpureBooleanTrue(\"a?true:true\");\n    assertImpureBooleanFalse(\"a?false:false\");\n    assertImpureBooleanUnknown(\"a?true:false\");\n    assertImpureBooleanUnknown(\"a?true:foo()\");\n\n    assertImpureBooleanUnknown(\"b\");\n    assertImpureBooleanUnknown(\"-'0.0'\");\n\n    assertImpureBooleanTrue(\"{a:foo()}\");\n    assertImpureBooleanTrue(\"[foo()]\");\n  }\n",
        "begin_line": 127,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 128,col 5)-(line 128,col 38)",
            "(line 129,col 5)-(line 129,col 40)",
            "(line 131,col 5)-(line 131,col 46)",
            "(line 132,col 5)-(line 132,col 47)",
            "(line 134,col 5)-(line 134,col 49)",
            "(line 135,col 5)-(line 135,col 50)",
            "(line 137,col 5)-(line 137,col 50)",
            "(line 139,col 5)-(line 139,col 38)",
            "(line 140,col 5)-(line 140,col 40)",
            "(line 142,col 5)-(line 142,col 43)",
            "(line 143,col 5)-(line 143,col 45)",
            "(line 145,col 5)-(line 145,col 42)",
            "(line 146,col 5)-(line 146,col 44)",
            "(line 148,col 5)-(line 148,col 38)",
            "(line 149,col 5)-(line 149,col 38)",
            "(line 150,col 5)-(line 150,col 35)",
            "(line 153,col 5)-(line 153,col 41)",
            "(line 157,col 5)-(line 157,col 40)",
            "(line 159,col 5)-(line 159,col 35)",
            "(line 160,col 5)-(line 160,col 37)",
            "(line 161,col 5)-(line 161,col 36)",
            "(line 163,col 5)-(line 163,col 36)",
            "(line 164,col 5)-(line 164,col 34)",
            "(line 165,col 5)-(line 165,col 35)",
            "(line 166,col 5)-(line 166,col 35)",
            "(line 167,col 5)-(line 167,col 34)",
            "(line 168,col 5)-(line 168,col 34)",
            "(line 169,col 5)-(line 169,col 38)",
            "(line 170,col 5)-(line 170,col 37)",
            "(line 171,col 5)-(line 171,col 34)",
            "(line 172,col 5)-(line 172,col 35)",
            "(line 173,col 5)-(line 173,col 42)",
            "(line 174,col 5)-(line 174,col 39)",
            "(line 175,col 5)-(line 175,col 43)",
            "(line 177,col 5)-(line 177,col 43)",
            "(line 178,col 5)-(line 178,col 46)",
            "(line 179,col 5)-(line 179,col 47)",
            "(line 180,col 5)-(line 180,col 47)",
            "(line 182,col 5)-(line 182,col 36)",
            "(line 183,col 5)-(line 183,col 41)",
            "(line 185,col 5)-(line 185,col 41)",
            "(line 186,col 5)-(line 186,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertImpureBooleanTrue(java.lang.String)",
        "snippet": "  private void assertImpureBooleanTrue(String val) {\n    assertEquals(TernaryValue.TRUE,\n        NodeUtil.getImpureBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 189,
        "end_line": 192,
        "comment": "",
        "child_ranges": [
            "(line 190,col 5)-(line 191,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertImpureBooleanFalse(java.lang.String)",
        "snippet": "  private void assertImpureBooleanFalse(String val) {\n    assertEquals(TernaryValue.FALSE,\n        NodeUtil.getImpureBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 194,
        "end_line": 197,
        "comment": "",
        "child_ranges": [
            "(line 195,col 5)-(line 196,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertImpureBooleanUnknown(java.lang.String)",
        "snippet": "  private void assertImpureBooleanUnknown(String val) {\n    assertEquals(TernaryValue.UNKNOWN,\n        NodeUtil.getImpureBooleanValue(getNode(val)));\n  }\n",
        "begin_line": 199,
        "end_line": 202,
        "comment": "",
        "child_ranges": [
            "(line 200,col 5)-(line 201,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetStringValue()",
        "snippet": "  public void testGetStringValue() {\n    assertEquals(\"true\", NodeUtil.getStringValue(getNode(\"true\")));\n    assertEquals(\"10\", NodeUtil.getStringValue(getNode(\"10\")));\n    assertEquals(\"1\", NodeUtil.getStringValue(getNode(\"1.0\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"'0'\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"/a/\")));\n    assertEquals(\"[object Object]\", NodeUtil.getStringValue(getNode(\"{}\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[]\")));\n    assertEquals(\"false\", NodeUtil.getStringValue(getNode(\"false\")));\n    assertEquals(\"null\", NodeUtil.getStringValue(getNode(\"null\")));\n    assertEquals(\"0\", NodeUtil.getStringValue(getNode(\"0\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"''\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"undefined\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void 0\")));\n    assertEquals(\"undefined\", NodeUtil.getStringValue(getNode(\"void foo()\")));\n\n    assertEquals(\"NaN\", NodeUtil.getStringValue(getNode(\"NaN\")));\n    assertEquals(\"Infinity\", NodeUtil.getStringValue(getNode(\"Infinity\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"x\")));\n  }\n",
        "begin_line": 204,
        "end_line": 223,
        "comment": "",
        "child_ranges": [
            "(line 205,col 5)-(line 205,col 67)",
            "(line 206,col 5)-(line 206,col 63)",
            "(line 207,col 5)-(line 207,col 63)",
            "(line 208,col 5)-(line 208,col 63)",
            "(line 209,col 5)-(line 209,col 64)",
            "(line 210,col 5)-(line 210,col 76)",
            "(line 211,col 5)-(line 211,col 61)",
            "(line 212,col 5)-(line 212,col 69)",
            "(line 213,col 5)-(line 213,col 67)",
            "(line 214,col 5)-(line 214,col 61)",
            "(line 215,col 5)-(line 215,col 61)",
            "(line 216,col 5)-(line 216,col 77)",
            "(line 217,col 5)-(line 217,col 74)",
            "(line 218,col 5)-(line 218,col 78)",
            "(line 220,col 5)-(line 220,col 65)",
            "(line 221,col 5)-(line 221,col 75)",
            "(line 222,col 5)-(line 222,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetArrayStringValue()",
        "snippet": "  public void testGetArrayStringValue() {\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[]\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"['']\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[null]\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[undefined]\")));\n    assertEquals(\"\", NodeUtil.getStringValue(getNode(\"[void 0]\")));\n    assertEquals(\"NaN\", NodeUtil.getStringValue(getNode(\"[NaN]\")));\n    assertEquals(\",\", NodeUtil.getStringValue(getNode(\"[,'']\")));\n    assertEquals(\",,\", NodeUtil.getStringValue(getNode(\"[[''],[''],['']]\")));\n    assertEquals(\"1,2\", NodeUtil.getStringValue(getNode(\"[[1.0],[2.0]]\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"[a]\")));\n    assertEquals(null, NodeUtil.getStringValue(getNode(\"[1,a]\")));\n  }\n",
        "begin_line": 225,
        "end_line": 237,
        "comment": "",
        "child_ranges": [
            "(line 226,col 5)-(line 226,col 61)",
            "(line 227,col 5)-(line 227,col 63)",
            "(line 228,col 5)-(line 228,col 65)",
            "(line 229,col 5)-(line 229,col 70)",
            "(line 230,col 5)-(line 230,col 67)",
            "(line 231,col 5)-(line 231,col 67)",
            "(line 232,col 5)-(line 232,col 65)",
            "(line 233,col 5)-(line 233,col 77)",
            "(line 234,col 5)-(line 234,col 75)",
            "(line 235,col 5)-(line 235,col 64)",
            "(line 236,col 5)-(line 236,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsObjectLiteralKey1()",
        "snippet": "  public void testIsObjectLiteralKey1() throws Exception {\n    testIsObjectLiteralKey(\n      parseExpr(\"({})\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"a\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"'a'\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"1\"), false);\n    testIsObjectLiteralKey(\n      parseExpr(\"({a: 1})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({1: 1})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({get a(){}})\").getFirstChild(), true);\n    testIsObjectLiteralKey(\n      parseExpr(\"({set a(b){}})\").getFirstChild(), true);\n  }\n",
        "begin_line": 239,
        "end_line": 256,
        "comment": "",
        "child_ranges": [
            "(line 240,col 5)-(line 241,col 32)",
            "(line 242,col 5)-(line 243,col 29)",
            "(line 244,col 5)-(line 245,col 31)",
            "(line 246,col 5)-(line 247,col 29)",
            "(line 248,col 5)-(line 249,col 51)",
            "(line 250,col 5)-(line 251,col 51)",
            "(line 252,col 5)-(line 253,col 56)",
            "(line 254,col 5)-(line 255,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.parseExpr(java.lang.String)",
        "snippet": "  private Node parseExpr(String js) {\n    Compiler compiler = new Compiler();\n    CompilerOptions options = new CompilerOptions();\n    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n    compiler.initOptions(options);\n    Node root = compiler.parseTestCode(js);\n    return root.getFirstChild().getFirstChild();\n  }\n",
        "begin_line": 258,
        "end_line": 265,
        "comment": "",
        "child_ranges": [
            "(line 259,col 5)-(line 259,col 39)",
            "(line 260,col 5)-(line 260,col 52)",
            "(line 261,col 5)-(line 261,col 52)",
            "(line 262,col 5)-(line 262,col 34)",
            "(line 263,col 5)-(line 263,col 43)",
            "(line 264,col 5)-(line 264,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsObjectLiteralKey(com.google.javascript.rhino.Node, boolean)",
        "snippet": "  private void testIsObjectLiteralKey(Node node, boolean expected) {\n    assertEquals(expected, NodeUtil.isObjectLitKey(node, node.getParent()));\n  }\n",
        "begin_line": 267,
        "end_line": 269,
        "comment": "",
        "child_ranges": [
            "(line 268,col 5)-(line 268,col 76)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName1()",
        "snippet": "  public void testGetFunctionName1() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"function name(){}\");\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 271,
        "end_line": 276,
        "comment": "",
        "child_ranges": [
            "(line 272,col 5)-(line 272,col 39)",
            "(line 273,col 5)-(line 273,col 62)",
            "(line 275,col 5)-(line 275,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName2()",
        "snippet": "  public void testGetFunctionName2() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name\");\n  }\n",
        "begin_line": 278,
        "end_line": 284,
        "comment": "",
        "child_ranges": [
            "(line 279,col 5)-(line 279,col 39)",
            "(line 280,col 5)-(line 281,col 41)",
            "(line 283,col 5)-(line 283,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName3()",
        "snippet": "  public void testGetFunctionName3() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"qualified.name = function(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name\");\n  }\n",
        "begin_line": 286,
        "end_line": 292,
        "comment": "",
        "child_ranges": [
            "(line 287,col 5)-(line 287,col 39)",
            "(line 288,col 5)-(line 289,col 41)",
            "(line 291,col 5)-(line 291,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName4()",
        "snippet": "  public void testGetFunctionName4() throws Exception {\n    Compiler compiler = new Compiler();\n    Node parent = compiler.parseTestCode(\"var name2 = function name1(){}\")\n        .getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getFirstChild(), \"name2\");\n  }\n",
        "begin_line": 294,
        "end_line": 300,
        "comment": "",
        "child_ranges": [
            "(line 295,col 5)-(line 295,col 39)",
            "(line 296,col 5)-(line 297,col 41)",
            "(line 299,col 5)-(line 299,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName5()",
        "snippet": "  public void testGetFunctionName5() throws Exception {\n    Compiler compiler = new Compiler();\n    Node n = compiler.parseTestCode(\"qualified.name2 = function name1(){}\");\n    Node parent = n.getFirstChild().getFirstChild();\n\n    testGetFunctionName(parent.getLastChild(), \"qualified.name2\");\n  }\n",
        "begin_line": 302,
        "end_line": 308,
        "comment": "",
        "child_ranges": [
            "(line 303,col 5)-(line 303,col 39)",
            "(line 304,col 5)-(line 304,col 76)",
            "(line 305,col 5)-(line 305,col 52)",
            "(line 307,col 5)-(line 307,col 66)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetFunctionName(com.google.javascript.rhino.Node, java.lang.String)",
        "snippet": "  private void testGetFunctionName(Node function, String name) {\n    assertEquals(Token.FUNCTION, function.getType());\n    assertEquals(name, NodeUtil.getFunctionName(function));\n  }\n",
        "begin_line": 310,
        "end_line": 313,
        "comment": "",
        "child_ranges": [
            "(line 311,col 5)-(line 311,col 53)",
            "(line 312,col 5)-(line 312,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsFunctionDeclaration()",
        "snippet": "  public void testContainsFunctionDeclaration() {\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"function foo(){}\")));\n    assertTrue(NodeUtil.containsFunction(\n                   getNode(\"(b?function(){}:null)\")));\n\n    assertFalse(NodeUtil.containsFunction(\n                   getNode(\"(b?foo():null)\")));\n    assertFalse(NodeUtil.containsFunction(\n                    getNode(\"foo()\")));\n  }\n",
        "begin_line": 315,
        "end_line": 325,
        "comment": "",
        "child_ranges": [
            "(line 316,col 5)-(line 317,col 49)",
            "(line 318,col 5)-(line 319,col 54)",
            "(line 321,col 5)-(line 322,col 47)",
            "(line 323,col 5)-(line 324,col 39)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String)",
        "snippet": "  private void assertSideEffect(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild()));\n  }\n",
        "begin_line": 327,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 328,col 5)-(line 328,col 23)",
            "(line 329,col 5)-(line 329,col 69)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertSideEffect(boolean, java.lang.String, boolean)",
        "snippet": "  private void assertSideEffect(boolean se, String js, boolean GlobalRegExp) {\n    Node n = parse(js);\n    Compiler compiler = new Compiler();\n    compiler.setHasRegExpGlobalReferences(GlobalRegExp);\n    assertEquals(se, NodeUtil.mayHaveSideEffects(n.getFirstChild(), compiler));\n  }\n",
        "begin_line": 332,
        "end_line": 337,
        "comment": "",
        "child_ranges": [
            "(line 333,col 5)-(line 333,col 23)",
            "(line 334,col 5)-(line 334,col 39)",
            "(line 335,col 5)-(line 335,col 56)",
            "(line 336,col 5)-(line 336,col 79)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayHaveSideEffects()",
        "snippet": "  public void testMayHaveSideEffects() {\n    assertSideEffect(true, \"i++\");\n    assertSideEffect(true, \"[b, [a, i++]]\");\n    assertSideEffect(true, \"i=3\");\n    assertSideEffect(true, \"[0, i=3]\");\n    assertSideEffect(true, \"b()\");\n    assertSideEffect(true, \"[1, b()]\");\n    assertSideEffect(true, \"b.b=4\");\n    assertSideEffect(true, \"b.b--\");\n    assertSideEffect(true, \"i--\");\n    assertSideEffect(true, \"a[0][i=4]\");\n    assertSideEffect(true, \"a += 3\");\n    assertSideEffect(true, \"a, b, z += 4\");\n    assertSideEffect(true, \"a ? c : d++\");\n    assertSideEffect(true, \"a + c++\");\n    assertSideEffect(true, \"a + c - d()\");\n    assertSideEffect(true, \"a + c - d()\");\n\n    assertSideEffect(true, \"function foo() {}\");\n    assertSideEffect(true, \"while(true);\");\n    assertSideEffect(true, \"if(true){a()}\");\n\n    assertSideEffect(false, \"if(true){a}\");\n    assertSideEffect(false, \"(function() { })\");\n    assertSideEffect(false, \"(function() { i++ })\");\n    assertSideEffect(false, \"[function a(){}]\");\n\n    assertSideEffect(false, \"a\");\n    assertSideEffect(false, \"[b, c [d, [e]]]\");\n    assertSideEffect(false, \"({a: x, b: y, c: z})\");\n    assertSideEffect(false, \"/abc/gi\");\n    assertSideEffect(false, \"'a'\");\n    assertSideEffect(false, \"0\");\n    assertSideEffect(false, \"a + c\");\n    assertSideEffect(false, \"'c' + a[0]\");\n    assertSideEffect(false, \"a[0][1]\");\n    assertSideEffect(false, \"'a' + c\");\n    assertSideEffect(false, \"'a' + a.name\");\n    assertSideEffect(false, \"1, 2, 3\");\n    assertSideEffect(false, \"a, b, 3\");\n    assertSideEffect(false, \"(function(a, b) {  })\");\n    assertSideEffect(false, \"a ? c : d\");\n    assertSideEffect(false, \"'1' + navigator.userAgent\");\n\n    assertSideEffect(false, \"new RegExp('foobar', 'i')\");\n    assertSideEffect(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertSideEffect(false, \"new Array()\");\n    assertSideEffect(false, \"new Array\");\n    assertSideEffect(false, \"new Array(4)\");\n    assertSideEffect(false, \"new Array('a', 'b', 'c')\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n    assertSideEffect(true, \"new SomeClassINeverHeardOf()\");\n\n    assertSideEffect(false, \"({}).foo = 4\");\n    assertSideEffect(false, \"([]).foo = 4\");\n    assertSideEffect(false, \"(function() {}).foo = 4\");\n\n    assertSideEffect(true, \"this.foo = 4\");\n    assertSideEffect(true, \"a.foo = 4\");\n    assertSideEffect(true, \"(function() { return n; })().foo = 4\");\n    assertSideEffect(true, \"([]).foo = bar()\");\n\n    assertSideEffect(false, \"undefined\");\n    assertSideEffect(false, \"void 0\");\n    assertSideEffect(true, \"void foo()\");\n    assertSideEffect(false, \"-Infinity\");\n    assertSideEffect(false, \"Infinity\");\n    assertSideEffect(false, \"NaN\");\n\n    assertSideEffect(false, \"({}||[]).foo = 2;\");\n    assertSideEffect(false, \"(true ? {} : []).foo = 2;\");\n    assertSideEffect(false, \"({},[]).foo = 2;\");\n  }\n",
        "begin_line": 339,
        "end_line": 411,
        "comment": "",
        "child_ranges": [
            "(line 340,col 5)-(line 340,col 34)",
            "(line 341,col 5)-(line 341,col 44)",
            "(line 342,col 5)-(line 342,col 34)",
            "(line 343,col 5)-(line 343,col 39)",
            "(line 344,col 5)-(line 344,col 34)",
            "(line 345,col 5)-(line 345,col 39)",
            "(line 346,col 5)-(line 346,col 36)",
            "(line 347,col 5)-(line 347,col 36)",
            "(line 348,col 5)-(line 348,col 34)",
            "(line 349,col 5)-(line 349,col 40)",
            "(line 350,col 5)-(line 350,col 37)",
            "(line 351,col 5)-(line 351,col 43)",
            "(line 352,col 5)-(line 352,col 42)",
            "(line 353,col 5)-(line 353,col 38)",
            "(line 354,col 5)-(line 354,col 42)",
            "(line 355,col 5)-(line 355,col 42)",
            "(line 357,col 5)-(line 357,col 48)",
            "(line 358,col 5)-(line 358,col 43)",
            "(line 359,col 5)-(line 359,col 44)",
            "(line 361,col 5)-(line 361,col 43)",
            "(line 362,col 5)-(line 362,col 48)",
            "(line 363,col 5)-(line 363,col 52)",
            "(line 364,col 5)-(line 364,col 48)",
            "(line 366,col 5)-(line 366,col 33)",
            "(line 367,col 5)-(line 367,col 47)",
            "(line 368,col 5)-(line 368,col 52)",
            "(line 369,col 5)-(line 369,col 39)",
            "(line 370,col 5)-(line 370,col 35)",
            "(line 371,col 5)-(line 371,col 33)",
            "(line 372,col 5)-(line 372,col 37)",
            "(line 373,col 5)-(line 373,col 42)",
            "(line 374,col 5)-(line 374,col 39)",
            "(line 375,col 5)-(line 375,col 39)",
            "(line 376,col 5)-(line 376,col 44)",
            "(line 377,col 5)-(line 377,col 39)",
            "(line 378,col 5)-(line 378,col 39)",
            "(line 379,col 5)-(line 379,col 53)",
            "(line 380,col 5)-(line 380,col 41)",
            "(line 381,col 5)-(line 381,col 57)",
            "(line 383,col 5)-(line 383,col 57)",
            "(line 384,col 5)-(line 384,col 64)",
            "(line 385,col 5)-(line 385,col 43)",
            "(line 386,col 5)-(line 386,col 41)",
            "(line 387,col 5)-(line 387,col 44)",
            "(line 388,col 5)-(line 388,col 56)",
            "(line 389,col 5)-(line 389,col 59)",
            "(line 390,col 5)-(line 390,col 59)",
            "(line 392,col 5)-(line 392,col 44)",
            "(line 393,col 5)-(line 393,col 44)",
            "(line 394,col 5)-(line 394,col 55)",
            "(line 396,col 5)-(line 396,col 43)",
            "(line 397,col 5)-(line 397,col 40)",
            "(line 398,col 5)-(line 398,col 67)",
            "(line 399,col 5)-(line 399,col 47)",
            "(line 401,col 5)-(line 401,col 41)",
            "(line 402,col 5)-(line 402,col 38)",
            "(line 403,col 5)-(line 403,col 41)",
            "(line 404,col 5)-(line 404,col 41)",
            "(line 405,col 5)-(line 405,col 40)",
            "(line 406,col 5)-(line 406,col 35)",
            "(line 408,col 5)-(line 408,col 49)",
            "(line 409,col 5)-(line 409,col 57)",
            "(line 410,col 5)-(line 410,col 48)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testObjectMethodSideEffects()",
        "snippet": "  public void testObjectMethodSideEffects() {\n    // \"toString\" and \"valueOf\" are assumed to be side-effect free\n    assertSideEffect(false, \"o.toString()\");\n    assertSideEffect(false, \"o.valueOf()\");\n\n    // other methods depend on the extern definitions\n    assertSideEffect(true, \"o.watch()\");\n  }\n",
        "begin_line": 413,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 415,col 5)-(line 415,col 44)",
            "(line 416,col 5)-(line 416,col 43)",
            "(line 419,col 5)-(line 419,col 40)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRegExpSideEffect()",
        "snippet": "  public void testRegExpSideEffect() {\n    // A RegExp Object by itself doesn't have any side-effects\n    assertSideEffect(false, \"/abc/gi\", true);\n    assertSideEffect(false, \"/abc/gi\", false);\n\n    // RegExp instance methods have global side-effects, so whether they are\n    // considered side-effect free depends on whether the global properties\n    // are referenced.\n    assertSideEffect(true, \"(/abc/gi).test('')\", true);\n    assertSideEffect(false, \"(/abc/gi).test('')\", false);\n    assertSideEffect(true, \"(/abc/gi).test(a)\", true);\n    assertSideEffect(false, \"(/abc/gi).test(b)\", false);\n\n    assertSideEffect(true, \"(/abc/gi).exec('')\", true);\n    assertSideEffect(false, \"(/abc/gi).exec('')\", false);\n\n    // Some RegExp object method that may have side-effects.\n    assertSideEffect(true, \"(/abc/gi).foo('')\", true);\n    assertSideEffect(true, \"(/abc/gi).foo('')\", false);\n\n    // Try the string RegExp ops.\n    assertSideEffect(true, \"''.match('a')\", true);\n    assertSideEffect(false, \"''.match('a')\", false);\n    assertSideEffect(true, \"''.match(/(a)/)\", true);\n    assertSideEffect(false, \"''.match(/(a)/)\", false);\n\n    assertSideEffect(true, \"''.replace('a')\", true);\n    assertSideEffect(false, \"''.replace('a')\", false);\n\n    assertSideEffect(true, \"''.search('a')\", true);\n    assertSideEffect(false, \"''.search('a')\", false);\n\n    assertSideEffect(true, \"''.split('a')\", true);\n    assertSideEffect(false, \"''.split('a')\", false);\n\n    // Some non-RegExp string op that may have side-effects.\n    assertSideEffect(true, \"''.foo('a')\", true);\n    assertSideEffect(true, \"''.foo('a')\", false);\n\n    // 'a' might be a RegExp object with the 'g' flag, in which case\n    // the state might change by running any of the string ops.\n    // Specifically, using these methods resets the \"lastIndex\" if used\n    // in combination with a RegExp instance \"exec\" method.\n    assertSideEffect(true, \"''.match(a)\", true);\n    assertSideEffect(true, \"''.match(a)\", false);\n  }\n",
        "begin_line": 422,
        "end_line": 467,
        "comment": "",
        "child_ranges": [
            "(line 424,col 5)-(line 424,col 45)",
            "(line 425,col 5)-(line 425,col 46)",
            "(line 430,col 5)-(line 430,col 55)",
            "(line 431,col 5)-(line 431,col 57)",
            "(line 432,col 5)-(line 432,col 54)",
            "(line 433,col 5)-(line 433,col 56)",
            "(line 435,col 5)-(line 435,col 55)",
            "(line 436,col 5)-(line 436,col 57)",
            "(line 439,col 5)-(line 439,col 54)",
            "(line 440,col 5)-(line 440,col 55)",
            "(line 443,col 5)-(line 443,col 50)",
            "(line 444,col 5)-(line 444,col 52)",
            "(line 445,col 5)-(line 445,col 52)",
            "(line 446,col 5)-(line 446,col 54)",
            "(line 448,col 5)-(line 448,col 52)",
            "(line 449,col 5)-(line 449,col 54)",
            "(line 451,col 5)-(line 451,col 51)",
            "(line 452,col 5)-(line 452,col 53)",
            "(line 454,col 5)-(line 454,col 50)",
            "(line 455,col 5)-(line 455,col 52)",
            "(line 458,col 5)-(line 458,col 48)",
            "(line 459,col 5)-(line 459,col 49)",
            "(line 465,col 5)-(line 465,col 48)",
            "(line 466,col 5)-(line 466,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertMutableState(boolean, java.lang.String)",
        "snippet": "  private void assertMutableState(boolean se, String js) {\n    Node n = parse(js);\n    assertEquals(se, NodeUtil.mayEffectMutableState(n.getFirstChild()));\n  }\n",
        "begin_line": 469,
        "end_line": 472,
        "comment": "",
        "child_ranges": [
            "(line 470,col 5)-(line 470,col 23)",
            "(line 471,col 5)-(line 471,col 72)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayEffectMutableState()",
        "snippet": "  public void testMayEffectMutableState() {\n    assertMutableState(true, \"i++\");\n    assertMutableState(true, \"[b, [a, i++]]\");\n    assertMutableState(true, \"i=3\");\n    assertMutableState(true, \"[0, i=3]\");\n    assertMutableState(true, \"b()\");\n    assertMutableState(true, \"void b()\");\n    assertMutableState(true, \"[1, b()]\");\n    assertMutableState(true, \"b.b=4\");\n    assertMutableState(true, \"b.b--\");\n    assertMutableState(true, \"i--\");\n    assertMutableState(true, \"a[0][i=4]\");\n    assertMutableState(true, \"a += 3\");\n    assertMutableState(true, \"a, b, z += 4\");\n    assertMutableState(true, \"a ? c : d++\");\n    assertMutableState(true, \"a + c++\");\n    assertMutableState(true, \"a + c - d()\");\n    assertMutableState(true, \"a + c - d()\");\n\n    assertMutableState(true, \"function foo() {}\");\n    assertMutableState(true, \"while(true);\");\n    assertMutableState(true, \"if(true){a()}\");\n\n    assertMutableState(false, \"if(true){a}\");\n    assertMutableState(true, \"(function() { })\");\n    assertMutableState(true, \"(function() { i++ })\");\n    assertMutableState(true, \"[function a(){}]\");\n\n    assertMutableState(false, \"a\");\n    assertMutableState(true, \"[b, c [d, [e]]]\");\n    assertMutableState(true, \"({a: x, b: y, c: z})\");\n    // Note: RegEx objects are not immutable,  for instance, the exec\n    // method maintains state for \"global\" searches.\n    assertMutableState(true, \"/abc/gi\");\n    assertMutableState(false, \"'a'\");\n    assertMutableState(false, \"0\");\n    assertMutableState(false, \"a + c\");\n    assertMutableState(false, \"'c' + a[0]\");\n    assertMutableState(false, \"a[0][1]\");\n    assertMutableState(false, \"'a' + c\");\n    assertMutableState(false, \"'a' + a.name\");\n    assertMutableState(false, \"1, 2, 3\");\n    assertMutableState(false, \"a, b, 3\");\n    assertMutableState(true, \"(function(a, b) {  })\");\n    assertMutableState(false, \"a ? c : d\");\n    assertMutableState(false, \"'1' + navigator.userAgent\");\n\n    assertMutableState(true, \"new RegExp('foobar', 'i')\");\n    assertMutableState(true, \"new RegExp(SomethingWacky(), 'i')\");\n    assertMutableState(true, \"new Array()\");\n    assertMutableState(true, \"new Array\");\n    assertMutableState(true, \"new Array(4)\");\n    assertMutableState(true, \"new Array('a', 'b', 'c')\");\n    assertMutableState(true, \"new SomeClassINeverHeardOf()\");\n  }\n",
        "begin_line": 474,
        "end_line": 528,
        "comment": "",
        "child_ranges": [
            "(line 475,col 5)-(line 475,col 36)",
            "(line 476,col 5)-(line 476,col 46)",
            "(line 477,col 5)-(line 477,col 36)",
            "(line 478,col 5)-(line 478,col 41)",
            "(line 479,col 5)-(line 479,col 36)",
            "(line 480,col 5)-(line 480,col 41)",
            "(line 481,col 5)-(line 481,col 41)",
            "(line 482,col 5)-(line 482,col 38)",
            "(line 483,col 5)-(line 483,col 38)",
            "(line 484,col 5)-(line 484,col 36)",
            "(line 485,col 5)-(line 485,col 42)",
            "(line 486,col 5)-(line 486,col 39)",
            "(line 487,col 5)-(line 487,col 45)",
            "(line 488,col 5)-(line 488,col 44)",
            "(line 489,col 5)-(line 489,col 40)",
            "(line 490,col 5)-(line 490,col 44)",
            "(line 491,col 5)-(line 491,col 44)",
            "(line 493,col 5)-(line 493,col 50)",
            "(line 494,col 5)-(line 494,col 45)",
            "(line 495,col 5)-(line 495,col 46)",
            "(line 497,col 5)-(line 497,col 45)",
            "(line 498,col 5)-(line 498,col 49)",
            "(line 499,col 5)-(line 499,col 53)",
            "(line 500,col 5)-(line 500,col 49)",
            "(line 502,col 5)-(line 502,col 35)",
            "(line 503,col 5)-(line 503,col 48)",
            "(line 504,col 5)-(line 504,col 53)",
            "(line 507,col 5)-(line 507,col 40)",
            "(line 508,col 5)-(line 508,col 37)",
            "(line 509,col 5)-(line 509,col 35)",
            "(line 510,col 5)-(line 510,col 39)",
            "(line 511,col 5)-(line 511,col 44)",
            "(line 512,col 5)-(line 512,col 41)",
            "(line 513,col 5)-(line 513,col 41)",
            "(line 514,col 5)-(line 514,col 46)",
            "(line 515,col 5)-(line 515,col 41)",
            "(line 516,col 5)-(line 516,col 41)",
            "(line 517,col 5)-(line 517,col 54)",
            "(line 518,col 5)-(line 518,col 43)",
            "(line 519,col 5)-(line 519,col 59)",
            "(line 521,col 5)-(line 521,col 58)",
            "(line 522,col 5)-(line 522,col 66)",
            "(line 523,col 5)-(line 523,col 44)",
            "(line 524,col 5)-(line 524,col 42)",
            "(line 525,col 5)-(line 525,col 45)",
            "(line 526,col 5)-(line 526,col 57)",
            "(line 527,col 5)-(line 527,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression()",
        "snippet": "  public void testIsFunctionExpression() {\n    assertContainsAnonFunc(true, \"(function(){})\");\n    assertContainsAnonFunc(true, \"[function a(){}]\");\n    assertContainsAnonFunc(false, \"{x: function a(){}}\");\n    assertContainsAnonFunc(true, \"(function a(){})()\");\n    assertContainsAnonFunc(true, \"x = function a(){};\");\n    assertContainsAnonFunc(true, \"var x = function a(){};\");\n    assertContainsAnonFunc(true, \"if (function a(){});\");\n    assertContainsAnonFunc(true, \"while (function a(){});\");\n    assertContainsAnonFunc(true, \"do; while (function a(){});\");\n    assertContainsAnonFunc(true, \"for (function a(){};;);\");\n    assertContainsAnonFunc(true, \"for (;function a(){};);\");\n    assertContainsAnonFunc(true, \"for (;;function a(){});\");\n    assertContainsAnonFunc(true, \"for (p in function a(){});\");\n    assertContainsAnonFunc(true, \"with (function a(){}) {}\");\n    assertContainsAnonFunc(false, \"function a(){}\");\n    assertContainsAnonFunc(false, \"if (x) function a(){};\");\n    assertContainsAnonFunc(false, \"if (x) { function a(){} }\");\n    assertContainsAnonFunc(false, \"if (x); else function a(){};\");\n    assertContainsAnonFunc(false, \"while (x) function a(){};\");\n    assertContainsAnonFunc(false, \"do function a(){} while (0);\");\n    assertContainsAnonFunc(false, \"for (;;) function a(){}\");\n    assertContainsAnonFunc(false, \"for (p in o) function a(){};\");\n    assertContainsAnonFunc(false, \"with (x) function a(){}\");\n  }\n",
        "begin_line": 531,
        "end_line": 555,
        "comment": "",
        "child_ranges": [
            "(line 532,col 5)-(line 532,col 51)",
            "(line 533,col 5)-(line 533,col 53)",
            "(line 534,col 5)-(line 534,col 57)",
            "(line 535,col 5)-(line 535,col 55)",
            "(line 536,col 5)-(line 536,col 56)",
            "(line 537,col 5)-(line 537,col 60)",
            "(line 538,col 5)-(line 538,col 57)",
            "(line 539,col 5)-(line 539,col 60)",
            "(line 540,col 5)-(line 540,col 64)",
            "(line 541,col 5)-(line 541,col 60)",
            "(line 542,col 5)-(line 542,col 60)",
            "(line 543,col 5)-(line 543,col 60)",
            "(line 544,col 5)-(line 544,col 63)",
            "(line 545,col 5)-(line 545,col 61)",
            "(line 546,col 5)-(line 546,col 52)",
            "(line 547,col 5)-(line 547,col 60)",
            "(line 548,col 5)-(line 548,col 63)",
            "(line 549,col 5)-(line 549,col 66)",
            "(line 550,col 5)-(line 550,col 63)",
            "(line 551,col 5)-(line 551,col 66)",
            "(line 552,col 5)-(line 552,col 61)",
            "(line 553,col 5)-(line 553,col 66)",
            "(line 554,col 5)-(line 554,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testNewFunctionNode()",
        "snippet": "  public void testNewFunctionNode() {\n    Node expected = parse(\"function foo(p1, p2, p3) { throw 2; }\");\n    Node body = new Node(Token.BLOCK, new Node(Token.THROW, Node.newNumber(2)));\n    List<Node> params = Lists.newArrayList(Node.newString(Token.NAME, \"p1\"),\n                                           Node.newString(Token.NAME, \"p2\"),\n                                           Node.newString(Token.NAME, \"p3\"));\n    Node function = NodeUtil.newFunctionNode(\n        \"foo\", params, body, -1, -1);\n    Node actual = new Node(Token.SCRIPT);\n    actual.setIsSyntheticBlock(true);\n    actual.addChildToFront(function);\n    String difference = expected.checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 557,
        "end_line": 572,
        "comment": "",
        "child_ranges": [
            "(line 558,col 5)-(line 558,col 67)",
            "(line 559,col 5)-(line 559,col 80)",
            "(line 560,col 5)-(line 562,col 77)",
            "(line 563,col 5)-(line 564,col 37)",
            "(line 565,col 5)-(line 565,col 41)",
            "(line 566,col 5)-(line 566,col 37)",
            "(line 567,col 5)-(line 567,col 37)",
            "(line 568,col 5)-(line 568,col 57)",
            "(line 569,col 5)-(line 571,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertContainsAnonFunc(boolean, java.lang.String)",
        "snippet": "  private void assertContainsAnonFunc(boolean expected, String js) {\n    Node funcParent = findParentOfFuncDescendant(parse(js));\n    assertNotNull(\"Expected function node in parse tree of: \" + js, funcParent);\n    Node funcNode = getFuncChild(funcParent);\n    assertEquals(expected, NodeUtil.isFunctionExpression(funcNode));\n  }\n",
        "begin_line": 574,
        "end_line": 579,
        "comment": "",
        "child_ranges": [
            "(line 575,col 5)-(line 575,col 60)",
            "(line 576,col 5)-(line 576,col 80)",
            "(line 577,col 5)-(line 577,col 45)",
            "(line 578,col 5)-(line 578,col 68)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.findParentOfFuncDescendant(com.google.javascript.rhino.Node)",
        "snippet": "  private Node findParentOfFuncDescendant(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return n;\n      }\n      Node result = findParentOfFuncDescendant(c);\n      if (result != null) {\n        return result;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 581,
        "end_line": 592,
        "comment": "",
        "child_ranges": [
            "(line 582,col 5)-(line 590,col 5)",
            "(line 591,col 5)-(line 591,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFuncChild(com.google.javascript.rhino.Node)",
        "snippet": "  private Node getFuncChild(Node n) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.getType() == Token.FUNCTION) {\n        return c;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 594,
        "end_line": 601,
        "comment": "",
        "child_ranges": [
            "(line 595,col 5)-(line 599,col 5)",
            "(line 600,col 5)-(line 600,col 16)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testContainsType()",
        "snippet": "  public void testContainsType() {\n    assertTrue(NodeUtil.containsType(\n        parse(\"this\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"function foo(){}(this)\"), Token.THIS));\n    assertTrue(NodeUtil.containsType(\n        parse(\"b?this:null\"), Token.THIS));\n\n    assertFalse(NodeUtil.containsType(\n        parse(\"a\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"function foo(){}\"), Token.THIS));\n    assertFalse(NodeUtil.containsType(\n        parse(\"(b?foo():null)\"), Token.THIS));\n  }\n",
        "begin_line": 603,
        "end_line": 617,
        "comment": "",
        "child_ranges": [
            "(line 604,col 5)-(line 605,col 36)",
            "(line 606,col 5)-(line 607,col 54)",
            "(line 608,col 5)-(line 609,col 43)",
            "(line 611,col 5)-(line 612,col 33)",
            "(line 613,col 5)-(line 614,col 48)",
            "(line 615,col 5)-(line 616,col 46)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testReferencesThis()",
        "snippet": "  public void testReferencesThis() {\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"this\")));\n    // Don't descend into functions (starts at the script node)\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"function foo(){this}\")));\n    // But starting with a function properly check for 'this'\n    Node n = parse(\"function foo(){this}\").getFirstChild();\n    assertEquals(n.getType(), Token.FUNCTION);\n    assertTrue(NodeUtil.referencesThis(n));\n    assertTrue(NodeUtil.referencesThis(\n        parse(\"b?this:null\")));\n\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"a\")));\n    n = parse(\"function foo(){}\").getFirstChild();\n    assertEquals(n.getType(), Token.FUNCTION);\n    assertFalse(NodeUtil.referencesThis(n));\n    assertFalse(NodeUtil.referencesThis(\n        parse(\"(b?foo():null)\")));\n  }\n",
        "begin_line": 619,
        "end_line": 639,
        "comment": "",
        "child_ranges": [
            "(line 620,col 5)-(line 621,col 24)",
            "(line 623,col 5)-(line 624,col 40)",
            "(line 626,col 5)-(line 626,col 59)",
            "(line 627,col 5)-(line 627,col 46)",
            "(line 628,col 5)-(line 628,col 43)",
            "(line 629,col 5)-(line 630,col 31)",
            "(line 632,col 5)-(line 633,col 21)",
            "(line 634,col 5)-(line 634,col 50)",
            "(line 635,col 5)-(line 635,col 46)",
            "(line 636,col 5)-(line 636,col 44)",
            "(line 637,col 5)-(line 638,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNodeTypeReferenceCount()",
        "snippet": "  public void testGetNodeTypeReferenceCount() {\n    assertEquals(0, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"function foo(){}\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(1, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n    assertEquals(2, NodeUtil.getNodeTypeReferenceCount(\n        parse(\"this;function foo(){}(this)\"), Token.THIS,\n            Predicates.<Node>alwaysTrue()));\n  }\n",
        "begin_line": 641,
        "end_line": 651,
        "comment": "",
        "child_ranges": [
            "(line 642,col 5)-(line 644,col 44)",
            "(line 645,col 5)-(line 647,col 44)",
            "(line 648,col 5)-(line 650,col 44)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsNameReferenceCount()",
        "snippet": "  public void testIsNameReferenceCount() {\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"var foo = function(){}\"), \"foo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined\"), \"undefined\"));\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertTrue(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"goo\"));\n    assertFalse(NodeUtil.isNameReferenced(\n        parse(\"goo.foo\"), \"foo\"));\n  }\n",
        "begin_line": 653,
        "end_line": 669,
        "comment": "",
        "child_ranges": [
            "(line 654,col 5)-(line 655,col 43)",
            "(line 656,col 5)-(line 657,col 49)",
            "(line 658,col 5)-(line 659,col 49)",
            "(line 660,col 5)-(line 661,col 42)",
            "(line 662,col 5)-(line 663,col 70)",
            "(line 665,col 5)-(line 666,col 34)",
            "(line 667,col 5)-(line 668,col 34)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNameReferenceCount()",
        "snippet": "  public void testGetNameReferenceCount() {\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"undefined\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"undefined\"), \"undefined\"));\n    assertEquals(2, NodeUtil.getNameReferenceCount(\n        parse(\"undefined;function foo(){}(undefined)\"), \"undefined\"));\n\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"goo\"));\n    assertEquals(0, NodeUtil.getNameReferenceCount(\n        parse(\"goo.foo\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"function foo(){}\"), \"foo\"));\n    assertEquals(1, NodeUtil.getNameReferenceCount(\n        parse(\"var foo = function(){}\"), \"foo\"));\n  }\n",
        "begin_line": 672,
        "end_line": 688,
        "comment": "",
        "child_ranges": [
            "(line 673,col 5)-(line 674,col 49)",
            "(line 675,col 5)-(line 676,col 42)",
            "(line 677,col 5)-(line 678,col 70)",
            "(line 680,col 5)-(line 681,col 34)",
            "(line 682,col 5)-(line 683,col 34)",
            "(line 684,col 5)-(line 685,col 43)",
            "(line 686,col 5)-(line 687,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetVarsDeclaredInBranch()",
        "snippet": "  public void testGetVarsDeclaredInBranch() {\n    Compiler compiler = new Compiler();\n\n    assertNodeNames(Sets.newHashSet(\"foo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo;\")));\n    assertNodeNames(Sets.newHashSet(\"foo\",\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var foo,goo;\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"foo();\")));\n    assertNodeNames(Sets.<String>newHashSet(),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"function f(){var foo;}\")));\n    assertNodeNames(Sets.newHashSet(\"goo\"),\n        NodeUtil.getVarsDeclaredInBranch(\n            parse(\"var goo;function f(){var foo;}\")));\n  }\n",
        "begin_line": 690,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 691,col 5)-(line 691,col 39)",
            "(line 693,col 5)-(line 695,col 32)",
            "(line 696,col 5)-(line 698,col 36)",
            "(line 699,col 5)-(line 701,col 30)",
            "(line 702,col 5)-(line 704,col 46)",
            "(line 705,col 5)-(line 707,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.assertNodeNames(java.util.Set<java.lang.String>, java.util.Collection<com.google.javascript.rhino.Node>)",
        "snippet": "  private void assertNodeNames(Set<String> nodeNames, Collection<Node> nodes) {\n    Set<String> actualNames = Sets.newHashSet();\n    for (Node node : nodes) {\n      actualNames.add(node.getString());\n    }\n    assertEquals(nodeNames, actualNames);\n  }\n",
        "begin_line": 710,
        "end_line": 716,
        "comment": "",
        "child_ranges": [
            "(line 711,col 5)-(line 711,col 48)",
            "(line 712,col 5)-(line 714,col 5)",
            "(line 715,col 5)-(line 715,col 41)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsControlStructureCodeBlock()",
        "snippet": "  public void testIsControlStructureCodeBlock() {\n    Node root = parse(\"if (x) foo(); else boo();\");\n    Node ifNode = root.getFirstChild();\n\n    Node ifCondition = ifNode.getFirstChild();\n    Node ifCase = ifNode.getFirstChild().getNext();\n    Node elseCase = ifNode.getLastChild();\n\n    assertFalse(NodeUtil.isControlStructureCodeBlock(ifNode, ifCondition));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, ifCase));\n    assertTrue(NodeUtil.isControlStructureCodeBlock(ifNode, elseCase));\n  }\n",
        "begin_line": 718,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 719,col 5)-(line 719,col 51)",
            "(line 720,col 5)-(line 720,col 39)",
            "(line 722,col 5)-(line 722,col 46)",
            "(line 723,col 5)-(line 723,col 51)",
            "(line 724,col 5)-(line 724,col 42)",
            "(line 726,col 5)-(line 726,col 75)",
            "(line 727,col 5)-(line 727,col 69)",
            "(line 728,col 5)-(line 728,col 71)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression1()",
        "snippet": "  public void testIsFunctionExpression1() {\n    Node root = parse(\"(function foo() {})\");\n    Node StatementNode = root.getFirstChild();\n    assertTrue(NodeUtil.isExpressionNode(StatementNode));\n    Node functionNode = StatementNode.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertTrue(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 731,
        "end_line": 738,
        "comment": "",
        "child_ranges": [
            "(line 732,col 5)-(line 732,col 45)",
            "(line 733,col 5)-(line 733,col 46)",
            "(line 734,col 5)-(line 734,col 57)",
            "(line 735,col 5)-(line 735,col 54)",
            "(line 736,col 5)-(line 736,col 50)",
            "(line 737,col 5)-(line 737,col 60)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsFunctionExpression2()",
        "snippet": "  public void testIsFunctionExpression2() {\n    Node root = parse(\"function foo() {}\");\n    Node functionNode = root.getFirstChild();\n    assertTrue(NodeUtil.isFunction(functionNode));\n    assertFalse(NodeUtil.isFunctionExpression(functionNode));\n  }\n",
        "begin_line": 740,
        "end_line": 745,
        "comment": "",
        "child_ranges": [
            "(line 741,col 5)-(line 741,col 43)",
            "(line 742,col 5)-(line 742,col 45)",
            "(line 743,col 5)-(line 743,col 50)",
            "(line 744,col 5)-(line 744,col 61)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveChildBlock()",
        "snippet": "  public void testRemoveChildBlock() {\n    // Test removing the inner block.\n    Node actual = parse(\"{{x()}}\");\n\n    Node outerBlockNode = actual.getFirstChild();\n    Node innerBlockNode = outerBlockNode.getFirstChild();\n    innerBlockNode.setIsSyntheticBlock(true);\n\n    NodeUtil.removeChild(outerBlockNode, innerBlockNode);\n    String expected = \"{{}}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 747,
        "end_line": 761,
        "comment": "",
        "child_ranges": [
            "(line 749,col 5)-(line 749,col 35)",
            "(line 751,col 5)-(line 751,col 49)",
            "(line 752,col 5)-(line 752,col 57)",
            "(line 753,col 5)-(line 753,col 45)",
            "(line 755,col 5)-(line 755,col 57)",
            "(line 756,col 5)-(line 756,col 29)",
            "(line 757,col 5)-(line 757,col 64)",
            "(line 758,col 5)-(line 760,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild1()",
        "snippet": "  public void testRemoveTryChild1() {\n    // Test removing the finally clause.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, finallyBlock);\n    String expected = \"try {foo()} catch(e) {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 763,
        "end_line": 778,
        "comment": "",
        "child_ranges": [
            "(line 765,col 5)-(line 765,col 62)",
            "(line 767,col 5)-(line 767,col 42)",
            "(line 768,col 5)-(line 768,col 44)",
            "(line 769,col 5)-(line 769,col 57)",
            "(line 770,col 5)-(line 770,col 47)",
            "(line 772,col 5)-(line 772,col 48)",
            "(line 773,col 5)-(line 773,col 48)",
            "(line 774,col 5)-(line 774,col 64)",
            "(line 775,col 5)-(line 777,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild2()",
        "snippet": "  public void testRemoveTryChild2() {\n    // Test removing the try clause.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(tryNode, tryBlock);\n    String expected = \"try {} catch(e) {} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 780,
        "end_line": 794,
        "comment": "",
        "child_ranges": [
            "(line 782,col 5)-(line 782,col 62)",
            "(line 784,col 5)-(line 784,col 42)",
            "(line 785,col 5)-(line 785,col 44)",
            "(line 786,col 5)-(line 786,col 57)",
            "(line 788,col 5)-(line 788,col 44)",
            "(line 789,col 5)-(line 789,col 54)",
            "(line 790,col 5)-(line 790,col 64)",
            "(line 791,col 5)-(line 793,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild3()",
        "snippet": "  public void testRemoveTryChild3() {\n    // Test removing the catch clause.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(catchBlocks, catchBlock);\n    String expected = \"try {foo()} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 796,
        "end_line": 812,
        "comment": "",
        "child_ranges": [
            "(line 798,col 5)-(line 798,col 62)",
            "(line 800,col 5)-(line 800,col 42)",
            "(line 801,col 5)-(line 801,col 44)",
            "(line 802,col 5)-(line 802,col 57)",
            "(line 803,col 5)-(line 803,col 50)",
            "(line 804,col 5)-(line 804,col 47)",
            "(line 806,col 5)-(line 806,col 50)",
            "(line 807,col 5)-(line 807,col 47)",
            "(line 808,col 5)-(line 808,col 64)",
            "(line 809,col 5)-(line 811,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild4()",
        "snippet": "  public void testRemoveTryChild4() {\n    // Test removing the catch clause without a finally.\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(tryNode, catchBlocks);\n    String expected = \"try {foo()} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 814,
        "end_line": 830,
        "comment": "",
        "child_ranges": [
            "(line 816,col 5)-(line 816,col 62)",
            "(line 818,col 5)-(line 818,col 42)",
            "(line 819,col 5)-(line 819,col 44)",
            "(line 820,col 5)-(line 820,col 57)",
            "(line 821,col 5)-(line 821,col 50)",
            "(line 822,col 5)-(line 822,col 47)",
            "(line 824,col 5)-(line 824,col 47)",
            "(line 825,col 5)-(line 825,col 47)",
            "(line 826,col 5)-(line 826,col 64)",
            "(line 827,col 5)-(line 829,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveTryChild5()",
        "snippet": "  public void testRemoveTryChild5() {\n    Node actual = parse(\"try {foo()} catch(e) {} finally {}\");\n\n    Node tryNode = actual.getFirstChild();\n    Node tryBlock = tryNode.getFirstChild();\n    Node catchBlocks = tryNode.getFirstChild().getNext();\n    Node catchBlock = catchBlocks.getFirstChild();\n    Node finallyBlock = tryNode.getLastChild();\n\n    NodeUtil.removeChild(catchBlocks, catchBlock);\n    String expected = \"try {foo()} finally {}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 832,
        "end_line": 847,
        "comment": "",
        "child_ranges": [
            "(line 833,col 5)-(line 833,col 62)",
            "(line 835,col 5)-(line 835,col 42)",
            "(line 836,col 5)-(line 836,col 44)",
            "(line 837,col 5)-(line 837,col 57)",
            "(line 838,col 5)-(line 838,col 50)",
            "(line 839,col 5)-(line 839,col 47)",
            "(line 841,col 5)-(line 841,col 50)",
            "(line 842,col 5)-(line 842,col 47)",
            "(line 843,col 5)-(line 843,col 64)",
            "(line 844,col 5)-(line 846,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveVarChild()",
        "snippet": "  public void testRemoveVarChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"var foo, goo, hoo\");\n\n    Node varNode = actual.getFirstChild();\n    Node nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    String expected = \"var goo, hoo\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n\n    // Test removing the second child.\n    actual = parse(\"var foo, goo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo, hoo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last child of several children.\n    actual = parse(\"var foo, hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"var foo\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n\n    // Test removing the last.\n    actual = parse(\"var hoo\");\n\n    varNode = actual.getFirstChild();\n    nameNode = varNode.getFirstChild();\n\n    NodeUtil.removeChild(varNode, nameNode);\n    expected = \"\";\n    difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 849,
        "end_line": 904,
        "comment": "",
        "child_ranges": [
            "(line 850,col 5)-(line 850,col 39)",
            "(line 853,col 5)-(line 853,col 45)",
            "(line 855,col 5)-(line 855,col 42)",
            "(line 856,col 5)-(line 856,col 44)",
            "(line 858,col 5)-(line 858,col 44)",
            "(line 859,col 5)-(line 859,col 37)",
            "(line 860,col 5)-(line 860,col 64)",
            "(line 861,col 5)-(line 863,col 5)",
            "(line 867,col 5)-(line 867,col 40)",
            "(line 869,col 5)-(line 869,col 37)",
            "(line 870,col 5)-(line 870,col 49)",
            "(line 872,col 5)-(line 872,col 44)",
            "(line 873,col 5)-(line 873,col 30)",
            "(line 874,col 5)-(line 874,col 57)",
            "(line 875,col 5)-(line 877,col 5)",
            "(line 880,col 5)-(line 880,col 35)",
            "(line 882,col 5)-(line 882,col 37)",
            "(line 883,col 5)-(line 883,col 49)",
            "(line 885,col 5)-(line 885,col 44)",
            "(line 886,col 5)-(line 886,col 25)",
            "(line 887,col 5)-(line 887,col 57)",
            "(line 888,col 5)-(line 890,col 5)",
            "(line 893,col 5)-(line 893,col 30)",
            "(line 895,col 5)-(line 895,col 37)",
            "(line 896,col 5)-(line 896,col 39)",
            "(line 898,col 5)-(line 898,col 44)",
            "(line 899,col 5)-(line 899,col 18)",
            "(line 900,col 5)-(line 900,col 57)",
            "(line 901,col 5)-(line 903,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild1()",
        "snippet": "  public void testRemoveLabelChild1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the first child.\n    Node actual = parse(\"foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 906,
        "end_line": 921,
        "comment": "",
        "child_ranges": [
            "(line 907,col 5)-(line 907,col 39)",
            "(line 910,col 5)-(line 910,col 38)",
            "(line 912,col 5)-(line 912,col 44)",
            "(line 913,col 5)-(line 913,col 52)",
            "(line 915,col 5)-(line 915,col 53)",
            "(line 916,col 5)-(line 916,col 25)",
            "(line 917,col 5)-(line 917,col 64)",
            "(line 918,col 5)-(line 920,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveLabelChild2()",
        "snippet": "  public void testRemoveLabelChild2() {\n    // Test removing the first child.\n    Node actual = parse(\"achoo: foo: goo()\");\n\n    Node labelNode = actual.getFirstChild();\n    Node callExpressNode = labelNode.getLastChild();\n\n    NodeUtil.removeChild(labelNode, callExpressNode);\n    String expected = \"\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    if (difference != null) {\n      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n    }\n  }\n",
        "begin_line": 923,
        "end_line": 936,
        "comment": "",
        "child_ranges": [
            "(line 925,col 5)-(line 925,col 45)",
            "(line 927,col 5)-(line 927,col 44)",
            "(line 928,col 5)-(line 928,col 52)",
            "(line 930,col 5)-(line 930,col 53)",
            "(line 931,col 5)-(line 931,col 25)",
            "(line 932,col 5)-(line 932,col 64)",
            "(line 933,col 5)-(line 935,col 5)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testRemoveForChild()",
        "snippet": "  public void testRemoveForChild() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    Node forNode = actual.getFirstChild();\n    Node child = forNode.getFirstChild();\n\n    NodeUtil.removeChild(forNode, child);\n    String expected = \"for(;a<0;a++)foo()\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the condition.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;;a++)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the increment.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getFirstChild().getNext().getNext();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;)foo()\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(var a=0;a<0;a++)foo()\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(var a=0;a<0;a++);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n\n\n    // Test removing the body.\n    actual = parse(\"for(a in ack)foo();\");\n\n    forNode = actual.getFirstChild();\n    child = forNode.getLastChild();\n\n    NodeUtil.removeChild(forNode, child);\n    expected = \"for(a in ack);\";\n    difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 938,
        "end_line": 999,
        "comment": "",
        "child_ranges": [
            "(line 939,col 5)-(line 939,col 39)",
            "(line 942,col 5)-(line 942,col 53)",
            "(line 944,col 5)-(line 944,col 42)",
            "(line 945,col 5)-(line 945,col 41)",
            "(line 947,col 5)-(line 947,col 41)",
            "(line 948,col 5)-(line 948,col 43)",
            "(line 949,col 5)-(line 949,col 64)",
            "(line 950,col 5)-(line 950,col 65)",
            "(line 954,col 5)-(line 954,col 48)",
            "(line 956,col 5)-(line 956,col 37)",
            "(line 957,col 5)-(line 957,col 46)",
            "(line 959,col 5)-(line 959,col 41)",
            "(line 960,col 5)-(line 960,col 40)",
            "(line 961,col 5)-(line 961,col 57)",
            "(line 962,col 5)-(line 962,col 65)",
            "(line 966,col 5)-(line 966,col 48)",
            "(line 968,col 5)-(line 968,col 37)",
            "(line 969,col 5)-(line 969,col 56)",
            "(line 971,col 5)-(line 971,col 41)",
            "(line 972,col 5)-(line 972,col 40)",
            "(line 973,col 5)-(line 973,col 57)",
            "(line 974,col 5)-(line 974,col 65)",
            "(line 978,col 5)-(line 978,col 48)",
            "(line 980,col 5)-(line 980,col 37)",
            "(line 981,col 5)-(line 981,col 35)",
            "(line 983,col 5)-(line 983,col 41)",
            "(line 984,col 5)-(line 984,col 39)",
            "(line 985,col 5)-(line 985,col 57)",
            "(line 986,col 5)-(line 986,col 65)",
            "(line 990,col 5)-(line 990,col 42)",
            "(line 992,col 5)-(line 992,col 37)",
            "(line 993,col 5)-(line 993,col 35)",
            "(line 995,col 5)-(line 995,col 41)",
            "(line 996,col 5)-(line 996,col 32)",
            "(line 997,col 5)-(line 997,col 57)",
            "(line 998,col 5)-(line 998,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock1()",
        "snippet": "  public void testMergeBlock1() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"{{a();b();}}\");\n\n    Node parentBlock = actual.getFirstChild();\n    Node childBlock = parentBlock.getFirstChild();\n\n    assertTrue(NodeUtil.tryMergeBlock(childBlock));\n    String expected = \"{a();b();}\";\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 1001,
        "end_line": 1014,
        "comment": "",
        "child_ranges": [
            "(line 1002,col 5)-(line 1002,col 39)",
            "(line 1005,col 5)-(line 1005,col 40)",
            "(line 1007,col 5)-(line 1007,col 46)",
            "(line 1008,col 5)-(line 1008,col 50)",
            "(line 1010,col 5)-(line 1010,col 51)",
            "(line 1011,col 5)-(line 1011,col 35)",
            "(line 1012,col 5)-(line 1012,col 64)",
            "(line 1013,col 5)-(line 1013,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock2()",
        "snippet": "  public void testMergeBlock2() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    Node actual = parse(\"foo:{a();}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n  }\n",
        "begin_line": 1016,
        "end_line": 1026,
        "comment": "",
        "child_ranges": [
            "(line 1017,col 5)-(line 1017,col 39)",
            "(line 1020,col 5)-(line 1020,col 38)",
            "(line 1022,col 5)-(line 1022,col 46)",
            "(line 1023,col 5)-(line 1023,col 49)",
            "(line 1025,col 5)-(line 1025,col 52)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMergeBlock3()",
        "snippet": "  public void testMergeBlock3() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"foo:{a();boo()}\";\n    Node actual = parse(\"foo:{a();boo()}\");\n\n    Node parentLabel = actual.getFirstChild();\n    Node childBlock = parentLabel.getLastChild();\n\n    assertFalse(NodeUtil.tryMergeBlock(childBlock));\n    String expected = code;\n    String difference = parse(expected).checkTreeEquals(actual);\n    assertNull(\"Nodes do not match:\\n\" + difference, difference);\n  }\n",
        "begin_line": 1028,
        "end_line": 1042,
        "comment": "",
        "child_ranges": [
            "(line 1029,col 5)-(line 1029,col 39)",
            "(line 1032,col 5)-(line 1032,col 36)",
            "(line 1033,col 5)-(line 1033,col 43)",
            "(line 1035,col 5)-(line 1035,col 46)",
            "(line 1036,col 5)-(line 1036,col 49)",
            "(line 1038,col 5)-(line 1038,col 52)",
            "(line 1039,col 5)-(line 1039,col 27)",
            "(line 1040,col 5)-(line 1040,col 64)",
            "(line 1041,col 5)-(line 1041,col 65)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetSourceName()",
        "snippet": "  public void testGetSourceName() {\n    Node n = new Node(Token.BLOCK);\n    Node parent = new Node(Token.BLOCK, n);\n    parent.putProp(Node.SOURCENAME_PROP, \"foo\");\n    assertEquals(\"foo\", NodeUtil.getSourceName(n));\n  }\n",
        "begin_line": 1044,
        "end_line": 1049,
        "comment": "",
        "child_ranges": [
            "(line 1045,col 5)-(line 1045,col 35)",
            "(line 1046,col 5)-(line 1046,col 43)",
            "(line 1047,col 5)-(line 1047,col 48)",
            "(line 1048,col 5)-(line 1048,col 51)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsLabelName()",
        "snippet": "  public void testIsLabelName() {\n    Compiler compiler = new Compiler();\n\n    // Test removing the initializer.\n    String code = \"a:while(1) {a; continue a; break a; break;}\";\n    Node actual = parse(code);\n\n    Node labelNode = actual.getFirstChild();\n    assertTrue(labelNode.getType() == Token.LABEL);\n    assertTrue(NodeUtil.isLabelName(labelNode.getFirstChild()));\n    assertFalse(NodeUtil.isLabelName(labelNode.getLastChild()));\n\n    Node whileNode = labelNode.getLastChild();\n    assertTrue(whileNode.getType() == Token.WHILE);\n    Node whileBlock = whileNode.getLastChild();\n    assertTrue(whileBlock.getType() == Token.BLOCK);\n    assertFalse(NodeUtil.isLabelName(whileBlock));\n\n    Node firstStatement = whileBlock.getFirstChild();\n    assertTrue(firstStatement.getType() == Token.EXPR_RESULT);\n    Node variableReference = firstStatement.getFirstChild();\n    assertTrue(variableReference.getType() == Token.NAME);\n    assertFalse(NodeUtil.isLabelName(variableReference));\n\n    Node continueStatement = firstStatement.getNext();\n    assertTrue(continueStatement.getType() == Token.CONTINUE);\n    assertTrue(NodeUtil.isLabelName(continueStatement.getFirstChild()));\n\n    Node firstBreak = continueStatement.getNext();\n    assertTrue(firstBreak.getType() == Token.BREAK);\n    assertTrue(NodeUtil.isLabelName(firstBreak.getFirstChild()));\n\n    Node secondBreak = firstBreak.getNext();\n    assertTrue(secondBreak.getType() == Token.BREAK);\n    assertFalse(secondBreak.hasChildren());\n    assertFalse(NodeUtil.isLabelName(secondBreak.getFirstChild()));\n  }\n",
        "begin_line": 1051,
        "end_line": 1087,
        "comment": "",
        "child_ranges": [
            "(line 1052,col 5)-(line 1052,col 39)",
            "(line 1055,col 5)-(line 1055,col 64)",
            "(line 1056,col 5)-(line 1056,col 30)",
            "(line 1058,col 5)-(line 1058,col 44)",
            "(line 1059,col 5)-(line 1059,col 51)",
            "(line 1060,col 5)-(line 1060,col 64)",
            "(line 1061,col 5)-(line 1061,col 64)",
            "(line 1063,col 5)-(line 1063,col 46)",
            "(line 1064,col 5)-(line 1064,col 51)",
            "(line 1065,col 5)-(line 1065,col 47)",
            "(line 1066,col 5)-(line 1066,col 52)",
            "(line 1067,col 5)-(line 1067,col 50)",
            "(line 1069,col 5)-(line 1069,col 53)",
            "(line 1070,col 5)-(line 1070,col 62)",
            "(line 1071,col 5)-(line 1071,col 60)",
            "(line 1072,col 5)-(line 1072,col 58)",
            "(line 1073,col 5)-(line 1073,col 57)",
            "(line 1075,col 5)-(line 1075,col 54)",
            "(line 1076,col 5)-(line 1076,col 62)",
            "(line 1077,col 5)-(line 1077,col 72)",
            "(line 1079,col 5)-(line 1079,col 50)",
            "(line 1080,col 5)-(line 1080,col 52)",
            "(line 1081,col 5)-(line 1081,col 65)",
            "(line 1083,col 5)-(line 1083,col 44)",
            "(line 1084,col 5)-(line 1084,col 53)",
            "(line 1085,col 5)-(line 1085,col 43)",
            "(line 1086,col 5)-(line 1086,col 67)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue1()",
        "snippet": "  public void testLocalValue1() throws Exception {\n    // Names are not known to be local.\n    assertFalse(testLocalValue(\"x\"));\n    assertFalse(testLocalValue(\"x()\"));\n    assertFalse(testLocalValue(\"this\"));\n    assertFalse(testLocalValue(\"arguments\"));\n\n    // We can't know if new objects are local unless we know\n    // that they don't alias themselves.\n    assertFalse(testLocalValue(\"new x()\"));\n\n    // property references are assume to be non-local\n    assertFalse(testLocalValue(\"(new x()).y\"));\n    assertFalse(testLocalValue(\"(new x())['y']\"));\n\n    // Primitive values are local\n    assertTrue(testLocalValue(\"null\"));\n    assertTrue(testLocalValue(\"undefined\"));\n    assertTrue(testLocalValue(\"Infinity\"));\n    assertTrue(testLocalValue(\"NaN\"));\n    assertTrue(testLocalValue(\"1\"));\n    assertTrue(testLocalValue(\"'a'\"));\n    assertTrue(testLocalValue(\"true\"));\n    assertTrue(testLocalValue(\"false\"));\n    assertTrue(testLocalValue(\"[]\"));\n    assertTrue(testLocalValue(\"{}\"));\n\n    // The contents of arrays and objects don't matter\n    assertTrue(testLocalValue(\"[x]\"));\n    assertTrue(testLocalValue(\"{'a':x}\"));\n\n    // Pre-increment results in primitive number\n    assertTrue(testLocalValue(\"++x\"));\n    assertTrue(testLocalValue(\"--x\"));\n\n    // Post-increment, the previous value matters.\n    assertFalse(testLocalValue(\"x++\"));\n    assertFalse(testLocalValue(\"x--\"));\n\n    // The left side of an only assign matters if it is an alias or mutable.\n    assertTrue(testLocalValue(\"x=1\"));\n    assertFalse(testLocalValue(\"x=[]\"));\n    assertFalse(testLocalValue(\"x=y\"));\n    // The right hand side of assignment opts don't matter, as they force\n    // a local result.\n    assertTrue(testLocalValue(\"x+=y\"));\n    assertTrue(testLocalValue(\"x*=y\"));\n    // Comparisons always result in locals, as they force a local boolean\n    // result.\n    assertTrue(testLocalValue(\"x==y\"));\n    assertTrue(testLocalValue(\"x!=y\"));\n    assertTrue(testLocalValue(\"x>y\"));\n    // Only the right side of a comma matters\n    assertTrue(testLocalValue(\"(1,2)\"));\n    assertTrue(testLocalValue(\"(x,1)\"));\n    assertFalse(testLocalValue(\"(x,y)\"));\n\n    // Both the operands of OR matter\n    assertTrue(testLocalValue(\"1||2\"));\n    assertFalse(testLocalValue(\"x||1\"));\n    assertFalse(testLocalValue(\"x||y\"));\n    assertFalse(testLocalValue(\"1||y\"));\n\n    // Both the operands of AND matter\n    assertTrue(testLocalValue(\"1&&2\"));\n    assertFalse(testLocalValue(\"x&&1\"));\n    assertFalse(testLocalValue(\"x&&y\"));\n    assertFalse(testLocalValue(\"1&&y\"));\n\n    // Only the results of HOOK matter\n    assertTrue(testLocalValue(\"x?1:2\"));\n    assertFalse(testLocalValue(\"x?x:2\"));\n    assertFalse(testLocalValue(\"x?1:x\"));\n    assertFalse(testLocalValue(\"x?x:y\"));\n\n    // Results of ops are local values\n    assertTrue(testLocalValue(\"!y\"));\n    assertTrue(testLocalValue(\"~y\"));\n    assertTrue(testLocalValue(\"y + 1\"));\n    assertTrue(testLocalValue(\"y + z\"));\n    assertTrue(testLocalValue(\"y * z\"));\n\n    assertTrue(testLocalValue(\"'a' in x\"));\n    assertTrue(testLocalValue(\"typeof x\"));\n    assertTrue(testLocalValue(\"x instanceof y\"));\n\n    assertTrue(testLocalValue(\"void x\"));\n    assertTrue(testLocalValue(\"void 0\"));\n\n    assertFalse(testLocalValue(\"{}.x\"));\n\n    assertTrue(testLocalValue(\"{}.toString()\"));\n    assertTrue(testLocalValue(\"o.toString()\"));\n\n    assertFalse(testLocalValue(\"o.valueOf()\"));\n\n    assertTrue(testLocalValue(\"delete a.b\"));\n  }\n",
        "begin_line": 1089,
        "end_line": 1186,
        "comment": "",
        "child_ranges": [
            "(line 1091,col 5)-(line 1091,col 37)",
            "(line 1092,col 5)-(line 1092,col 39)",
            "(line 1093,col 5)-(line 1093,col 40)",
            "(line 1094,col 5)-(line 1094,col 45)",
            "(line 1098,col 5)-(line 1098,col 43)",
            "(line 1101,col 5)-(line 1101,col 47)",
            "(line 1102,col 5)-(line 1102,col 50)",
            "(line 1105,col 5)-(line 1105,col 39)",
            "(line 1106,col 5)-(line 1106,col 44)",
            "(line 1107,col 5)-(line 1107,col 43)",
            "(line 1108,col 5)-(line 1108,col 38)",
            "(line 1109,col 5)-(line 1109,col 36)",
            "(line 1110,col 5)-(line 1110,col 38)",
            "(line 1111,col 5)-(line 1111,col 39)",
            "(line 1112,col 5)-(line 1112,col 40)",
            "(line 1113,col 5)-(line 1113,col 37)",
            "(line 1114,col 5)-(line 1114,col 37)",
            "(line 1117,col 5)-(line 1117,col 38)",
            "(line 1118,col 5)-(line 1118,col 42)",
            "(line 1121,col 5)-(line 1121,col 38)",
            "(line 1122,col 5)-(line 1122,col 38)",
            "(line 1125,col 5)-(line 1125,col 39)",
            "(line 1126,col 5)-(line 1126,col 39)",
            "(line 1129,col 5)-(line 1129,col 38)",
            "(line 1130,col 5)-(line 1130,col 40)",
            "(line 1131,col 5)-(line 1131,col 39)",
            "(line 1134,col 5)-(line 1134,col 39)",
            "(line 1135,col 5)-(line 1135,col 39)",
            "(line 1138,col 5)-(line 1138,col 39)",
            "(line 1139,col 5)-(line 1139,col 39)",
            "(line 1140,col 5)-(line 1140,col 38)",
            "(line 1142,col 5)-(line 1142,col 40)",
            "(line 1143,col 5)-(line 1143,col 40)",
            "(line 1144,col 5)-(line 1144,col 41)",
            "(line 1147,col 5)-(line 1147,col 39)",
            "(line 1148,col 5)-(line 1148,col 40)",
            "(line 1149,col 5)-(line 1149,col 40)",
            "(line 1150,col 5)-(line 1150,col 40)",
            "(line 1153,col 5)-(line 1153,col 39)",
            "(line 1154,col 5)-(line 1154,col 40)",
            "(line 1155,col 5)-(line 1155,col 40)",
            "(line 1156,col 5)-(line 1156,col 40)",
            "(line 1159,col 5)-(line 1159,col 40)",
            "(line 1160,col 5)-(line 1160,col 41)",
            "(line 1161,col 5)-(line 1161,col 41)",
            "(line 1162,col 5)-(line 1162,col 41)",
            "(line 1165,col 5)-(line 1165,col 37)",
            "(line 1166,col 5)-(line 1166,col 37)",
            "(line 1167,col 5)-(line 1167,col 40)",
            "(line 1168,col 5)-(line 1168,col 40)",
            "(line 1169,col 5)-(line 1169,col 40)",
            "(line 1171,col 5)-(line 1171,col 43)",
            "(line 1172,col 5)-(line 1172,col 43)",
            "(line 1173,col 5)-(line 1173,col 49)",
            "(line 1175,col 5)-(line 1175,col 41)",
            "(line 1176,col 5)-(line 1176,col 41)",
            "(line 1178,col 5)-(line 1178,col 40)",
            "(line 1180,col 5)-(line 1180,col 48)",
            "(line 1181,col 5)-(line 1181,col 47)",
            "(line 1183,col 5)-(line 1183,col 47)",
            "(line 1185,col 5)-(line 1185,col 45)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue2()",
        "snippet": "  public void testLocalValue2() {\n    Node newExpr = getNode(\"new x()\");\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    Preconditions.checkState(newExpr.getType() == Token.NEW);\n    Node.SideEffectFlags flags = new Node.SideEffectFlags();\n\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setMutatesThis();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setReturnsTainted();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setThrows();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setMutatesArguments();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n\n    flags.clearAllFlags();\n    flags.setMutatesGlobalState();\n    newExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(newExpr));\n  }\n",
        "begin_line": 1188,
        "end_line": 1229,
        "comment": "",
        "child_ranges": [
            "(line 1189,col 5)-(line 1189,col 38)",
            "(line 1190,col 5)-(line 1190,col 57)",
            "(line 1192,col 5)-(line 1192,col 61)",
            "(line 1193,col 5)-(line 1193,col 60)",
            "(line 1195,col 5)-(line 1195,col 26)",
            "(line 1196,col 5)-(line 1196,col 48)",
            "(line 1198,col 5)-(line 1198,col 56)",
            "(line 1200,col 5)-(line 1200,col 26)",
            "(line 1201,col 5)-(line 1201,col 27)",
            "(line 1202,col 5)-(line 1202,col 48)",
            "(line 1204,col 5)-(line 1204,col 56)",
            "(line 1206,col 5)-(line 1206,col 26)",
            "(line 1207,col 5)-(line 1207,col 30)",
            "(line 1208,col 5)-(line 1208,col 48)",
            "(line 1210,col 5)-(line 1210,col 56)",
            "(line 1212,col 5)-(line 1212,col 26)",
            "(line 1213,col 5)-(line 1213,col 22)",
            "(line 1214,col 5)-(line 1214,col 48)",
            "(line 1216,col 5)-(line 1216,col 57)",
            "(line 1218,col 5)-(line 1218,col 26)",
            "(line 1219,col 5)-(line 1219,col 32)",
            "(line 1220,col 5)-(line 1220,col 48)",
            "(line 1222,col 5)-(line 1222,col 57)",
            "(line 1224,col 5)-(line 1224,col 26)",
            "(line 1225,col 5)-(line 1225,col 34)",
            "(line 1226,col 5)-(line 1226,col 48)",
            "(line 1228,col 5)-(line 1228,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testCallSideEffects()",
        "snippet": "  public void testCallSideEffects() {\n    Node callExpr = getNode(\"new x().method()\");\n    assertTrue(NodeUtil.functionCallHasSideEffects(callExpr));\n\n    Node newExpr = callExpr.getFirstChild().getFirstChild();\n    Preconditions.checkState(newExpr.getType() == Token.NEW);\n    Node.SideEffectFlags flags = new Node.SideEffectFlags();\n\n    // No side effects, local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // Modifies this, local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    flags.setMutatesThis();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // Modifies this, non-local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    flags.setMutatesThis();\n    flags.setReturnsTainted();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // No modifications, non-local result\n    flags.clearAllFlags();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    flags.setReturnsTainted();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertFalse(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertFalse(NodeUtil.mayHaveSideEffects(callExpr));\n\n    // The new modifies global state, no side-effect call, non-local result\n    // This call could be removed, but not the new.\n    flags.clearAllFlags();\n    flags.setMutatesGlobalState();\n    newExpr.setSideEffectFlags(flags.valueOf());\n    flags.clearAllFlags();\n    callExpr.setSideEffectFlags(flags.valueOf());\n\n    assertTrue(NodeUtil.evaluatesToLocalValue(callExpr));\n    assertFalse(NodeUtil.functionCallHasSideEffects(callExpr));\n    assertTrue(NodeUtil.mayHaveSideEffects(callExpr));\n  }\n",
        "begin_line": 1231,
        "end_line": 1294,
        "comment": "",
        "child_ranges": [
            "(line 1232,col 5)-(line 1232,col 48)",
            "(line 1233,col 5)-(line 1233,col 62)",
            "(line 1235,col 5)-(line 1235,col 60)",
            "(line 1236,col 5)-(line 1236,col 61)",
            "(line 1237,col 5)-(line 1237,col 60)",
            "(line 1240,col 5)-(line 1240,col 26)",
            "(line 1241,col 5)-(line 1241,col 48)",
            "(line 1242,col 5)-(line 1242,col 26)",
            "(line 1243,col 5)-(line 1243,col 49)",
            "(line 1245,col 5)-(line 1245,col 57)",
            "(line 1246,col 5)-(line 1246,col 63)",
            "(line 1247,col 5)-(line 1247,col 55)",
            "(line 1250,col 5)-(line 1250,col 26)",
            "(line 1251,col 5)-(line 1251,col 48)",
            "(line 1252,col 5)-(line 1252,col 26)",
            "(line 1253,col 5)-(line 1253,col 27)",
            "(line 1254,col 5)-(line 1254,col 49)",
            "(line 1256,col 5)-(line 1256,col 57)",
            "(line 1257,col 5)-(line 1257,col 63)",
            "(line 1258,col 5)-(line 1258,col 55)",
            "(line 1261,col 5)-(line 1261,col 26)",
            "(line 1262,col 5)-(line 1262,col 48)",
            "(line 1263,col 5)-(line 1263,col 26)",
            "(line 1264,col 5)-(line 1264,col 27)",
            "(line 1265,col 5)-(line 1265,col 30)",
            "(line 1266,col 5)-(line 1266,col 49)",
            "(line 1268,col 5)-(line 1268,col 58)",
            "(line 1269,col 5)-(line 1269,col 63)",
            "(line 1270,col 5)-(line 1270,col 55)",
            "(line 1273,col 5)-(line 1273,col 26)",
            "(line 1274,col 5)-(line 1274,col 48)",
            "(line 1275,col 5)-(line 1275,col 26)",
            "(line 1276,col 5)-(line 1276,col 30)",
            "(line 1277,col 5)-(line 1277,col 49)",
            "(line 1279,col 5)-(line 1279,col 58)",
            "(line 1280,col 5)-(line 1280,col 63)",
            "(line 1281,col 5)-(line 1281,col 55)",
            "(line 1285,col 5)-(line 1285,col 26)",
            "(line 1286,col 5)-(line 1286,col 34)",
            "(line 1287,col 5)-(line 1287,col 48)",
            "(line 1288,col 5)-(line 1288,col 26)",
            "(line 1289,col 5)-(line 1289,col 49)",
            "(line 1291,col 5)-(line 1291,col 57)",
            "(line 1292,col 5)-(line 1292,col 63)",
            "(line 1293,col 5)-(line 1293,col 54)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testLocalValue(java.lang.String)",
        "snippet": "  private boolean testLocalValue(String js) {\n    return NodeUtil.evaluatesToLocalValue(getNode(js));\n  }\n",
        "begin_line": 1296,
        "end_line": 1298,
        "comment": "",
        "child_ranges": [
            "(line 1297,col 5)-(line 1297,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefine()",
        "snippet": "  public void testValidDefine() {\n    assertTrue(testValidDefineValue(\"1\"));\n    assertTrue(testValidDefineValue(\"-3\"));\n    assertTrue(testValidDefineValue(\"true\"));\n    assertTrue(testValidDefineValue(\"false\"));\n    assertTrue(testValidDefineValue(\"'foo'\"));\n\n    assertFalse(testValidDefineValue(\"x\"));\n    assertFalse(testValidDefineValue(\"null\"));\n    assertFalse(testValidDefineValue(\"undefined\"));\n    assertFalse(testValidDefineValue(\"NaN\"));\n\n    assertTrue(testValidDefineValue(\"!true\"));\n    assertTrue(testValidDefineValue(\"-true\"));\n    assertTrue(testValidDefineValue(\"1 & 8\"));\n    assertTrue(testValidDefineValue(\"1 + 8\"));\n    assertTrue(testValidDefineValue(\"'a' + 'b'\"));\n\n    assertFalse(testValidDefineValue(\"1 & foo\"));\n  }\n",
        "begin_line": 1300,
        "end_line": 1319,
        "comment": "",
        "child_ranges": [
            "(line 1301,col 5)-(line 1301,col 42)",
            "(line 1302,col 5)-(line 1302,col 43)",
            "(line 1303,col 5)-(line 1303,col 45)",
            "(line 1304,col 5)-(line 1304,col 46)",
            "(line 1305,col 5)-(line 1305,col 46)",
            "(line 1307,col 5)-(line 1307,col 43)",
            "(line 1308,col 5)-(line 1308,col 46)",
            "(line 1309,col 5)-(line 1309,col 51)",
            "(line 1310,col 5)-(line 1310,col 45)",
            "(line 1312,col 5)-(line 1312,col 46)",
            "(line 1313,col 5)-(line 1313,col 46)",
            "(line 1314,col 5)-(line 1314,col 46)",
            "(line 1315,col 5)-(line 1315,col 46)",
            "(line 1316,col 5)-(line 1316,col 50)",
            "(line 1318,col 5)-(line 1318,col 49)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testValidDefineValue(java.lang.String)",
        "snippet": "  private boolean testValidDefineValue(String js) {\n    Node script = parse(\"var test = \" + js +\";\");\n    Node var = script.getFirstChild();\n    Node name = var.getFirstChild();\n    Node value = name.getFirstChild();\n\n    ImmutableSet<String> defines = ImmutableSet.of();\n    return NodeUtil.isValidDefineValue(value, defines);\n  }\n",
        "begin_line": 1321,
        "end_line": 1329,
        "comment": "",
        "child_ranges": [
            "(line 1322,col 5)-(line 1322,col 49)",
            "(line 1323,col 5)-(line 1323,col 38)",
            "(line 1324,col 5)-(line 1324,col 36)",
            "(line 1325,col 5)-(line 1325,col 38)",
            "(line 1327,col 5)-(line 1327,col 53)",
            "(line 1328,col 5)-(line 1328,col 55)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNumberValue()",
        "snippet": "  public void testGetNumberValue() {\n    // Strings\n    assertEquals(1.0, NodeUtil.getNumberValue(getNode(\"'\\\\uFEFF1'\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"''\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"' '\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"' \\\\t'\")));\n    assertEquals(0.0, NodeUtil.getNumberValue(getNode(\"'+0'\")));\n    assertEquals(-0.0, NodeUtil.getNumberValue(getNode(\"'-0'\")));\n    assertEquals(2.0, NodeUtil.getNumberValue(getNode(\"'+2'\")));\n    assertEquals(-1.6, NodeUtil.getNumberValue(getNode(\"'-1.6'\")));\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"'16'\")));\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"' 16 '\")));\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"' 16 '\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'123e2'\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'123E2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'123e-2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'123E-2'\")));\n    assertEquals(-1.23, NodeUtil.getNumberValue(getNode(\"'-123e-2'\")));\n    assertEquals(-1.23, NodeUtil.getNumberValue(getNode(\"'-123E-2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'+123e-2'\")));\n    assertEquals(1.23, NodeUtil.getNumberValue(getNode(\"'+123E-2'\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'+123e+2'\")));\n    assertEquals(12300.0, NodeUtil.getNumberValue(getNode(\"'+123E+2'\")));\n\n    assertEquals(15.0, NodeUtil.getNumberValue(getNode(\"'0xf'\")));\n    assertEquals(15.0, NodeUtil.getNumberValue(getNode(\"'0xF'\")));\n\n    // Chrome and rhino behavior differently from FF and IE. FF and IE\n    // consider a negative hex number to be invalid\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-0xf'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-0xF'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+0xf'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+0xF'\")));\n\n    assertEquals(16.0, NodeUtil.getNumberValue(getNode(\"'0X10'\")));\n    assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'0X10.8'\")));\n    assertEquals(77.0, NodeUtil.getNumberValue(getNode(\"'077'\")));\n    assertEquals(-77.0, NodeUtil.getNumberValue(getNode(\"'-077'\")));\n    assertEquals(-77.5, NodeUtil.getNumberValue(getNode(\"'-077.5'\")));\n    assertEquals(\n        Double.NEGATIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"'-Infinity'\")));\n    assertEquals(\n        Double.POSITIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"'Infinity'\")));\n    assertEquals(\n        Double.POSITIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"'+Infinity'\")));\n    // FireFox treats \"infinity\" as \"Infinity\", IE treats it as NaN\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'-infinity'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'infinity'\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"'+infinity'\")));\n\n    assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'NaN'\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"'some unknown string'\")));\n    assertEquals(Double.NaN, NodeUtil.getNumberValue(getNode(\"'123 blah'\")));\n\n    // Literals\n    assertEquals(1.0, NodeUtil.getNumberValue(getNode(\"1\")));\n    // \"-1\" is parsed as a literal\n    assertEquals(-1.0, NodeUtil.getNumberValue(getNode(\"-1\")));\n    // \"+1\" is parse as an op + literal\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"+1\")));\n    assertEquals(22.0, NodeUtil.getNumberValue(getNode(\"22\")));\n    assertEquals(18.0, NodeUtil.getNumberValue(getNode(\"022\")));\n    assertEquals(34.0, NodeUtil.getNumberValue(getNode(\"0x22\")));\n\n    assertEquals(\n        1.0, NodeUtil.getNumberValue(getNode(\"true\")));\n    assertEquals(\n        0.0, NodeUtil.getNumberValue(getNode(\"false\")));\n    assertEquals(\n        0.0, NodeUtil.getNumberValue(getNode(\"null\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"void 0\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"void f\")));\n    // values with side-effects are ignored.\n    assertEquals(\n        null, NodeUtil.getNumberValue(getNode(\"void f()\")));\n    assertEquals(\n        Double.NaN, NodeUtil.getNumberValue(getNode(\"NaN\")));\n    assertEquals(\n        Double.POSITIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"Infinity\")));\n    assertEquals(\n        Double.NEGATIVE_INFINITY,\n        NodeUtil.getNumberValue(getNode(\"-Infinity\")));\n\n    // \"infinity\" is not a known name.\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"infinity\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"-infinity\")));\n\n    // getNumberValue only converts literals\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"x\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"x.y\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"1/2\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"1-2\")));\n    assertEquals(null, NodeUtil.getNumberValue(getNode(\"+1\")));\n  }\n",
        "begin_line": 1331,
        "end_line": 1431,
        "comment": "",
        "child_ranges": [
            "(line 1333,col 5)-(line 1333,col 70)",
            "(line 1334,col 5)-(line 1334,col 62)",
            "(line 1335,col 5)-(line 1335,col 63)",
            "(line 1336,col 5)-(line 1336,col 66)",
            "(line 1337,col 5)-(line 1337,col 64)",
            "(line 1338,col 5)-(line 1338,col 65)",
            "(line 1339,col 5)-(line 1339,col 64)",
            "(line 1340,col 5)-(line 1340,col 67)",
            "(line 1341,col 5)-(line 1341,col 65)",
            "(line 1342,col 5)-(line 1342,col 67)",
            "(line 1343,col 5)-(line 1343,col 67)",
            "(line 1344,col 5)-(line 1344,col 71)",
            "(line 1345,col 5)-(line 1345,col 71)",
            "(line 1346,col 5)-(line 1346,col 69)",
            "(line 1347,col 5)-(line 1347,col 69)",
            "(line 1348,col 5)-(line 1348,col 71)",
            "(line 1349,col 5)-(line 1349,col 71)",
            "(line 1350,col 5)-(line 1350,col 70)",
            "(line 1351,col 5)-(line 1351,col 70)",
            "(line 1352,col 5)-(line 1352,col 73)",
            "(line 1353,col 5)-(line 1353,col 73)",
            "(line 1355,col 5)-(line 1355,col 66)",
            "(line 1356,col 5)-(line 1356,col 66)",
            "(line 1360,col 5)-(line 1360,col 67)",
            "(line 1361,col 5)-(line 1361,col 67)",
            "(line 1362,col 5)-(line 1362,col 67)",
            "(line 1363,col 5)-(line 1363,col 67)",
            "(line 1365,col 5)-(line 1365,col 67)",
            "(line 1366,col 5)-(line 1366,col 75)",
            "(line 1367,col 5)-(line 1367,col 66)",
            "(line 1368,col 5)-(line 1368,col 68)",
            "(line 1369,col 5)-(line 1369,col 70)",
            "(line 1370,col 5)-(line 1372,col 57)",
            "(line 1373,col 5)-(line 1375,col 56)",
            "(line 1376,col 5)-(line 1378,col 57)",
            "(line 1380,col 5)-(line 1380,col 72)",
            "(line 1381,col 5)-(line 1381,col 71)",
            "(line 1382,col 5)-(line 1382,col 72)",
            "(line 1384,col 5)-(line 1384,col 72)",
            "(line 1385,col 5)-(line 1386,col 79)",
            "(line 1387,col 5)-(line 1387,col 77)",
            "(line 1390,col 5)-(line 1390,col 61)",
            "(line 1392,col 5)-(line 1392,col 63)",
            "(line 1394,col 5)-(line 1394,col 63)",
            "(line 1395,col 5)-(line 1395,col 63)",
            "(line 1396,col 5)-(line 1396,col 64)",
            "(line 1397,col 5)-(line 1397,col 65)",
            "(line 1399,col 5)-(line 1400,col 55)",
            "(line 1401,col 5)-(line 1402,col 56)",
            "(line 1403,col 5)-(line 1404,col 55)",
            "(line 1405,col 5)-(line 1406,col 64)",
            "(line 1407,col 5)-(line 1408,col 64)",
            "(line 1410,col 5)-(line 1411,col 60)",
            "(line 1412,col 5)-(line 1413,col 61)",
            "(line 1414,col 5)-(line 1416,col 54)",
            "(line 1417,col 5)-(line 1419,col 55)",
            "(line 1422,col 5)-(line 1422,col 69)",
            "(line 1423,col 5)-(line 1423,col 70)",
            "(line 1426,col 5)-(line 1426,col 62)",
            "(line 1427,col 5)-(line 1427,col 64)",
            "(line 1428,col 5)-(line 1428,col 64)",
            "(line 1429,col 5)-(line 1429,col 64)",
            "(line 1430,col 5)-(line 1430,col 63)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsNumbericResult()",
        "snippet": "  public void testIsNumbericResult() {\n    assertTrue(NodeUtil.isNumericResult(getNode(\"1\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"true\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"+true\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"+1\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"-1\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"-Infinity\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"Infinity\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"NaN\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"undefined\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"void 0\")));\n\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a << b\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a >> b\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a >>> b\")));\n\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a == b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a != b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a === b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a !== b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a < b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a > b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a <= b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a >= b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a in b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a instanceof b\")));\n\n    assertFalse(NodeUtil.isNumericResult(getNode(\"'a'\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"'a'+b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a+'b'\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a+b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a()\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"''.a\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a.b\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a.b()\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"a().b()\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"new a()\")));\n\n    // Definitely not numberic\n    assertFalse(NodeUtil.isNumericResult(getNode(\"([1,2])\")));\n    assertFalse(NodeUtil.isNumericResult(getNode(\"({a:1})\")));\n\n    // Recurse into the expression when necessary.\n    assertTrue(NodeUtil.isNumericResult(getNode(\"1 && 2\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"1 || 2\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a ? 2 : 3\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a,1\")));\n    assertTrue(NodeUtil.isNumericResult(getNode(\"a=1\")));\n  }\n",
        "begin_line": 1433,
        "end_line": 1481,
        "comment": "",
        "child_ranges": [
            "(line 1434,col 5)-(line 1434,col 55)",
            "(line 1435,col 5)-(line 1435,col 59)",
            "(line 1436,col 5)-(line 1436,col 59)",
            "(line 1437,col 5)-(line 1437,col 56)",
            "(line 1438,col 5)-(line 1438,col 56)",
            "(line 1439,col 5)-(line 1439,col 63)",
            "(line 1440,col 5)-(line 1440,col 62)",
            "(line 1441,col 5)-(line 1441,col 57)",
            "(line 1442,col 5)-(line 1442,col 64)",
            "(line 1443,col 5)-(line 1443,col 61)",
            "(line 1445,col 5)-(line 1445,col 60)",
            "(line 1446,col 5)-(line 1446,col 60)",
            "(line 1447,col 5)-(line 1447,col 61)",
            "(line 1449,col 5)-(line 1449,col 61)",
            "(line 1450,col 5)-(line 1450,col 61)",
            "(line 1451,col 5)-(line 1451,col 62)",
            "(line 1452,col 5)-(line 1452,col 62)",
            "(line 1453,col 5)-(line 1453,col 60)",
            "(line 1454,col 5)-(line 1454,col 60)",
            "(line 1455,col 5)-(line 1455,col 61)",
            "(line 1456,col 5)-(line 1456,col 61)",
            "(line 1457,col 5)-(line 1457,col 61)",
            "(line 1458,col 5)-(line 1458,col 69)",
            "(line 1460,col 5)-(line 1460,col 58)",
            "(line 1461,col 5)-(line 1461,col 60)",
            "(line 1462,col 5)-(line 1462,col 60)",
            "(line 1463,col 5)-(line 1463,col 58)",
            "(line 1464,col 5)-(line 1464,col 58)",
            "(line 1465,col 5)-(line 1465,col 59)",
            "(line 1466,col 5)-(line 1466,col 58)",
            "(line 1467,col 5)-(line 1467,col 60)",
            "(line 1468,col 5)-(line 1468,col 62)",
            "(line 1469,col 5)-(line 1469,col 62)",
            "(line 1472,col 5)-(line 1472,col 62)",
            "(line 1473,col 5)-(line 1473,col 62)",
            "(line 1476,col 5)-(line 1476,col 60)",
            "(line 1477,col 5)-(line 1477,col 60)",
            "(line 1478,col 5)-(line 1478,col 63)",
            "(line 1479,col 5)-(line 1479,col 57)",
            "(line 1480,col 5)-(line 1480,col 57)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testIsBooleanResult()",
        "snippet": "  public void testIsBooleanResult() {\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"1\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"+true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"+1\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"-1\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"-Infinity\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"Infinity\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"NaN\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"undefined\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"void 0\")));\n\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a << b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a >> b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a >>> b\")));\n\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a == b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a != b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a === b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a !== b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a < b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a > b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a <= b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a >= b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a in b\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a instanceof b\")));\n\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'+b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a+'b'\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a+b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"''.a\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a().b()\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"new a()\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"delete a\")));\n\n    // Definitely not boolean\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"([true,false])\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"({a:true})\")));\n\n    // These are boolean but aren't handled yet, \"false\" here means \"unknown\".\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true && false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"true || false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a ? true : false\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a,true\")));\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"a=true\")));\n    assertFalse(NodeUtil.isBooleanResult(getNode(\"a=1\")));\n  }\n",
        "begin_line": 1483,
        "end_line": 1533,
        "comment": "",
        "child_ranges": [
            "(line 1484,col 5)-(line 1484,col 56)",
            "(line 1485,col 5)-(line 1485,col 58)",
            "(line 1486,col 5)-(line 1486,col 60)",
            "(line 1487,col 5)-(line 1487,col 57)",
            "(line 1488,col 5)-(line 1488,col 57)",
            "(line 1489,col 5)-(line 1489,col 64)",
            "(line 1490,col 5)-(line 1490,col 63)",
            "(line 1491,col 5)-(line 1491,col 58)",
            "(line 1492,col 5)-(line 1492,col 64)",
            "(line 1493,col 5)-(line 1493,col 61)",
            "(line 1495,col 5)-(line 1495,col 61)",
            "(line 1496,col 5)-(line 1496,col 61)",
            "(line 1497,col 5)-(line 1497,col 62)",
            "(line 1499,col 5)-(line 1499,col 60)",
            "(line 1500,col 5)-(line 1500,col 60)",
            "(line 1501,col 5)-(line 1501,col 61)",
            "(line 1502,col 5)-(line 1502,col 61)",
            "(line 1503,col 5)-(line 1503,col 59)",
            "(line 1504,col 5)-(line 1504,col 59)",
            "(line 1505,col 5)-(line 1505,col 60)",
            "(line 1506,col 5)-(line 1506,col 60)",
            "(line 1507,col 5)-(line 1507,col 60)",
            "(line 1508,col 5)-(line 1508,col 68)",
            "(line 1510,col 5)-(line 1510,col 58)",
            "(line 1511,col 5)-(line 1511,col 60)",
            "(line 1512,col 5)-(line 1512,col 60)",
            "(line 1513,col 5)-(line 1513,col 58)",
            "(line 1514,col 5)-(line 1514,col 58)",
            "(line 1515,col 5)-(line 1515,col 59)",
            "(line 1516,col 5)-(line 1516,col 58)",
            "(line 1517,col 5)-(line 1517,col 60)",
            "(line 1518,col 5)-(line 1518,col 62)",
            "(line 1519,col 5)-(line 1519,col 62)",
            "(line 1520,col 5)-(line 1520,col 62)",
            "(line 1523,col 5)-(line 1523,col 69)",
            "(line 1524,col 5)-(line 1524,col 65)",
            "(line 1527,col 5)-(line 1527,col 67)",
            "(line 1528,col 5)-(line 1528,col 67)",
            "(line 1529,col 5)-(line 1529,col 70)",
            "(line 1530,col 5)-(line 1530,col 60)",
            "(line 1531,col 5)-(line 1531,col 60)",
            "(line 1532,col 5)-(line 1532,col 58)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testMayBeString()",
        "snippet": "  public void testMayBeString() {\n    assertFalse(NodeUtil.mayBeString(getNode(\"1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"true\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"+true\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"+1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"-1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"-Infinity\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"Infinity\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"NaN\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"undefined\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"void 0\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"null\")));\n\n    assertFalse(NodeUtil.mayBeString(getNode(\"a << b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a >> b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a >>> b\")));\n\n    assertFalse(NodeUtil.mayBeString(getNode(\"a == b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a != b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a === b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a !== b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a < b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a > b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a <= b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a >= b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a in b\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a instanceof b\")));\n\n    assertTrue(NodeUtil.mayBeString(getNode(\"'a'\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"'a'+b\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a+'b'\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a+b\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a()\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"''.a\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a.b\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a.b()\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"a().b()\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"new a()\")));\n\n    // These can't be strings but they aren't handled yet.\n    assertFalse(NodeUtil.mayBeString(getNode(\"1 && 2\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1 || 2\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1 ? 2 : 3\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1,2\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"a=1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"1+1\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"true+true\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"null+null\")));\n    assertFalse(NodeUtil.mayBeString(getNode(\"NaN+NaN\")));\n\n    // These are not strings but they aren't primitives either\n    assertTrue(NodeUtil.mayBeString(getNode(\"([1,2])\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"({a:1})\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"({}+1)\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"(1+{})\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"([]+1)\")));\n    assertTrue(NodeUtil.mayBeString(getNode(\"(1+[])\")));\n  }\n",
        "begin_line": 1535,
        "end_line": 1592,
        "comment": "",
        "child_ranges": [
            "(line 1536,col 5)-(line 1536,col 52)",
            "(line 1537,col 5)-(line 1537,col 55)",
            "(line 1538,col 5)-(line 1538,col 56)",
            "(line 1539,col 5)-(line 1539,col 53)",
            "(line 1540,col 5)-(line 1540,col 53)",
            "(line 1541,col 5)-(line 1541,col 60)",
            "(line 1542,col 5)-(line 1542,col 59)",
            "(line 1543,col 5)-(line 1543,col 54)",
            "(line 1544,col 5)-(line 1544,col 60)",
            "(line 1545,col 5)-(line 1545,col 57)",
            "(line 1546,col 5)-(line 1546,col 55)",
            "(line 1548,col 5)-(line 1548,col 57)",
            "(line 1549,col 5)-(line 1549,col 57)",
            "(line 1550,col 5)-(line 1550,col 58)",
            "(line 1552,col 5)-(line 1552,col 57)",
            "(line 1553,col 5)-(line 1553,col 57)",
            "(line 1554,col 5)-(line 1554,col 58)",
            "(line 1555,col 5)-(line 1555,col 58)",
            "(line 1556,col 5)-(line 1556,col 56)",
            "(line 1557,col 5)-(line 1557,col 56)",
            "(line 1558,col 5)-(line 1558,col 57)",
            "(line 1559,col 5)-(line 1559,col 57)",
            "(line 1560,col 5)-(line 1560,col 57)",
            "(line 1561,col 5)-(line 1561,col 65)",
            "(line 1563,col 5)-(line 1563,col 53)",
            "(line 1564,col 5)-(line 1564,col 55)",
            "(line 1565,col 5)-(line 1565,col 55)",
            "(line 1566,col 5)-(line 1566,col 53)",
            "(line 1567,col 5)-(line 1567,col 53)",
            "(line 1568,col 5)-(line 1568,col 54)",
            "(line 1569,col 5)-(line 1569,col 53)",
            "(line 1570,col 5)-(line 1570,col 55)",
            "(line 1571,col 5)-(line 1571,col 57)",
            "(line 1572,col 5)-(line 1572,col 57)",
            "(line 1575,col 5)-(line 1575,col 57)",
            "(line 1576,col 5)-(line 1576,col 57)",
            "(line 1577,col 5)-(line 1577,col 60)",
            "(line 1578,col 5)-(line 1578,col 54)",
            "(line 1579,col 5)-(line 1579,col 54)",
            "(line 1580,col 5)-(line 1580,col 54)",
            "(line 1581,col 5)-(line 1581,col 60)",
            "(line 1582,col 5)-(line 1582,col 60)",
            "(line 1583,col 5)-(line 1583,col 58)",
            "(line 1586,col 5)-(line 1586,col 57)",
            "(line 1587,col 5)-(line 1587,col 57)",
            "(line 1588,col 5)-(line 1588,col 56)",
            "(line 1589,col 5)-(line 1589,col 56)",
            "(line 1590,col 5)-(line 1590,col 56)",
            "(line 1591,col 5)-(line 1591,col 56)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testGetNearestFunctionName()",
        "snippet": "  public void testGetNearestFunctionName() {\n    testFunctionName(\"function a() {}\", \"a\");\n    testFunctionName(\"(function a() {})\", \"a\");\n    testFunctionName(\"({a:function () {}})\", \"a\");\n    testFunctionName(\"({get a() {}})\", \"a\");\n    testFunctionName(\"({set a(b) {}})\", \"a\");\n    testFunctionName(\"({set a(b) {}})\", \"a\");\n    testFunctionName(\"({1:function () {}})\", \"1\");\n    testFunctionName(\"var a = function a() {}\", \"a\");\n    testFunctionName(\"var a;a = function a() {}\", \"a\");\n    testFunctionName(\"var o;o.a = function a() {}\", \"o.a\");\n    testFunctionName(\"this.a = function a() {}\", \"this.a\");\n  }\n",
        "begin_line": 1594,
        "end_line": 1606,
        "comment": "",
        "child_ranges": [
            "(line 1595,col 5)-(line 1595,col 45)",
            "(line 1596,col 5)-(line 1596,col 47)",
            "(line 1597,col 5)-(line 1597,col 50)",
            "(line 1598,col 5)-(line 1598,col 44)",
            "(line 1599,col 5)-(line 1599,col 45)",
            "(line 1600,col 5)-(line 1600,col 45)",
            "(line 1601,col 5)-(line 1601,col 50)",
            "(line 1602,col 5)-(line 1602,col 53)",
            "(line 1603,col 5)-(line 1603,col 55)",
            "(line 1604,col 5)-(line 1604,col 59)",
            "(line 1605,col 5)-(line 1605,col 59)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.testFunctionName(java.lang.String, java.lang.String)",
        "snippet": "  static void testFunctionName(String js, String expected) {\n    assertEquals(\n        expected,\n        NodeUtil.getNearestFunctionName(getFunctionNode(js)));\n  }\n",
        "begin_line": 1608,
        "end_line": 1612,
        "comment": "",
        "child_ranges": [
            "(line 1609,col 5)-(line 1611,col 62)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFunctionNode(java.lang.String)",
        "snippet": "  static Node getFunctionNode(String js) {\n    Node root = parse(js);\n    return getFunctionNode(root);\n  }\n",
        "begin_line": 1614,
        "end_line": 1617,
        "comment": "",
        "child_ranges": [
            "(line 1615,col 5)-(line 1615,col 26)",
            "(line 1616,col 5)-(line 1616,col 33)"
        ]
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtilTest",
        "child_classes": [],
        "src_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "signature": "com.google.javascript.jscomp.NodeUtilTest.getFunctionNode(com.google.javascript.rhino.Node)",
        "snippet": "  static Node getFunctionNode(Node n) {\n    if (n.getType() == Token.FUNCTION) {\n      return n;\n    }\n    for (Node c : n.children()) {\n      Node result = getFunctionNode(c);\n      if (result != null) {\n        return result;\n      }\n    }\n    return null;\n  }\n",
        "begin_line": 1619,
        "end_line": 1630,
        "comment": "",
        "child_ranges": [
            "(line 1620,col 5)-(line 1622,col 5)",
            "(line 1623,col 5)-(line 1628,col 5)",
            "(line 1629,col 5)-(line 1629,col 16)"
        ]
    }
]