[
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OBJECT_IDS_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CATCH_SCOPE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_ID_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGET_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BREAK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CONTINUE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ENUM_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FUNCTION_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TEMP_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCAL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CODEOFFSET_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FIXUPS_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARS_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.USES_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.REGEXP_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASES_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEFAULT_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.CASEARRAY_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SOURCENAME_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TYPE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIAL_PROP_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LABEL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FINALLY_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LOCALCOUNT_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.TARGETBLOCK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VARIABLE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LASTUSE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ISNUMBER_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTCALL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DEBUGSOURCE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.JSDOC_INFO_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.VAR_ARGS_NAME",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SKIP_INDEXES_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.INCRDECR_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MEMBER_TYPE_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NAME_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PARENTHESIZED_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.QUOTED_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.OPT_ARG_NAME",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.EMPTY_BLOCK",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ORIGINALNAME_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BRACELESS_TYPE",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_CONSTANT_NAME",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_NAMESPACE",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.IS_DISPATCHER",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECTIVES",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DIRECT_EVAL",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FREE_CALL",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LAST_PROP",
        "snippet": "  public static final int\n      // Rhino's AST captures data flow. These are the annotations\n      // it used. We've mostly torn them out.\n      LOCAL_BLOCK_PROP  = -3,\n      OBJECT_IDS_PROP   = -2,\n      CATCH_SCOPE_PROP  = -1,\n      LABEL_ID_PROP     =  0,\n\n      TARGET_PROP       =  1,\n      BREAK_PROP        =  2,\n      CONTINUE_PROP     =  3,\n      ENUM_PROP         =  4,\n      FUNCTION_PROP     =  5,\n      TEMP_PROP         =  6,\n      LOCAL_PROP        =  7,\n      CODEOFFSET_PROP   =  8,\n      FIXUPS_PROP       =  9,\n      VARS_PROP         = 10,\n      USES_PROP         = 11,\n      REGEXP_PROP       = 12,\n      CASES_PROP        = 13,\n      DEFAULT_PROP      = 14,\n      CASEARRAY_PROP    = 15,\n\n      // TODO(nicksantos): Remove this prop.\n      SOURCENAME_PROP   = 16,\n\n      TYPE_PROP         = 17,\n      SPECIAL_PROP_PROP = 18,\n      LABEL_PROP        = 19,\n      FINALLY_PROP      = 20,\n      LOCALCOUNT_PROP   = 21,\n  /*\n      the following properties are defined and manipulated by the\n      optimizer -\n      TARGETBLOCK_PROP - the block referenced by a branch node\n      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n      LASTUSE_PROP - that variable node is the last reference before\n                      a new def or the end of the block\n      ISNUMBER_PROP - this node generates code on Number children and\n                      delivers a Number result (as opposed to Objects)\n      DIRECTCALL_PROP - this call node should emit code to test the function\n                        object against the known class and call diret if it\n                        matches.\n  */\n\n      TARGETBLOCK_PROP  = 22,\n      VARIABLE_PROP     = 23,\n      LASTUSE_PROP      = 24,\n      ISNUMBER_PROP     = 25,\n      DIRECTCALL_PROP   = 26,\n\n      SPECIALCALL_PROP  = 27,\n      DEBUGSOURCE_PROP  = 28,\n      JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n      VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                  // argument placeholder.\n      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n      INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n      NAME_PROP          = 34,    // property name\n      PARENTHESIZED_PROP = 35,    // expression is parenthesized\n      QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n      OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n      SYNTHETIC_BLOCK_PROP = 38,  // A synthetic block. Used to make\n                                  // processing simpler, and does not\n                                  // represent a real block in the source.\n      EMPTY_BLOCK        = 39,    // Used to indicate BLOCK that replaced\n                                  // EMPTY nodes.\n      ORIGINALNAME_PROP  = 40,    // The original name of the node, before\n                                  // renaming.\n      BRACELESS_TYPE     = 41,    // The type syntax without curly braces.\n      SIDE_EFFECT_FLAGS  = 42,    // Function or constructor call side effect\n                                  // flags\n      // Coding convention props\n      IS_CONSTANT_NAME   = 43,    // The variable or property is constant.\n      IS_OPTIONAL_PARAM  = 44,    // The parameter is optional.\n      IS_VAR_ARGS_PARAM  = 45,    // The parameter is a var_args.\n      IS_NAMESPACE       = 46,    // The variable creates a namespace.\n      IS_DISPATCHER      = 47,    // The function is a dispatcher function,\n                                  // probably generated from Java code, and\n                                  // should be resolved to the proper\n                                  // overload if possible.\n      DIRECTIVES         = 48,    // The ES5 directives on this node.\n      DIRECT_EVAL        = 49,    // ES5 distinguishes between direct and\n                                  // indirect calls to eval.\n      FREE_CALL          = 50,    // A CALL without an explicit \"this\" value.\n      STATIC_SOURCE_FILE = 51,    // A StaticSourceFile indicating the file\n                                  // where this node lives.\n      LAST_PROP          = 51;",
        "begin_line": 67,
        "end_line": 156,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.BOTH",
        "snippet": "  public static final int\n      BOTH = 0,\n      LEFT = 1,\n      RIGHT = 2;",
        "begin_line": 160,
        "end_line": 163,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.LEFT",
        "snippet": "  public static final int\n      BOTH = 0,\n      LEFT = 1,\n      RIGHT = 2;",
        "begin_line": 160,
        "end_line": 163,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.RIGHT",
        "snippet": "  public static final int\n      BOTH = 0,\n      LEFT = 1,\n      RIGHT = 2;",
        "begin_line": 160,
        "end_line": 163,
        "comment": " which of the children are Number types"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NON_SPECIALCALL",
        "snippet": "  public static final int    // values for SPECIALCALL_PROP\n      NON_SPECIALCALL  = 0,\n      SPECIALCALL_EVAL = 1,\n      SPECIALCALL_WITH = 2;",
        "begin_line": 165,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_EVAL",
        "snippet": "  public static final int    // values for SPECIALCALL_PROP\n      NON_SPECIALCALL  = 0,\n      SPECIALCALL_EVAL = 1,\n      SPECIALCALL_WITH = 2;",
        "begin_line": 165,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SPECIALCALL_WITH",
        "snippet": "  public static final int    // values for SPECIALCALL_PROP\n      NON_SPECIALCALL  = 0,\n      SPECIALCALL_EVAL = 1,\n      SPECIALCALL_WITH = 2;",
        "begin_line": 165,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DECR_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 170,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.POST_FLAG",
        "snippet": "  public static final int   // flags for INCRDECR_PROP\n      DECR_FLAG = 0x1,\n      POST_FLAG = 0x2;",
        "begin_line": 170,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.PROPERTY_FLAG",
        "snippet": "  public static final int   // flags for MEMBER_TYPE_PROP\n      PROPERTY_FLAG    = 0x1, // property access: element is valid name\n      ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n      DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 174,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.ATTRIBUTE_FLAG",
        "snippet": "  public static final int   // flags for MEMBER_TYPE_PROP\n      PROPERTY_FLAG    = 0x1, // property access: element is valid name\n      ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n      DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 174,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.DESCENDANTS_FLAG",
        "snippet": "  public static final int   // flags for MEMBER_TYPE_PROP\n      PROPERTY_FLAG    = 0x1, // property access: element is valid name\n      ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n      DESCENDANTS_FLAG = 0x4; // x..y or x..@i",
        "begin_line": 174,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 250,
        "end_line": 250,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NumberNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NumberNode.number",
        "snippet": "    private double number;",
        "begin_line": 278,
        "end_line": 278,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 283,
        "end_line": 283,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.StringNode",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.StringNode.str",
        "snippet": "    private String str;",
        "begin_line": 347,
        "end_line": 347,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 361,
        "end_line": 361,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.next",
        "snippet": "    private final PropListItem next;",
        "begin_line": 363,
        "end_line": 363,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AbstractPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AbstractPropListItem.propType",
        "snippet": "    private final int propType;",
        "begin_line": 364,
        "end_line": 364,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 385,
        "end_line": 385,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ObjectPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.ObjectPropListItem.objectValue",
        "snippet": "    private final Object objectValue;",
        "begin_line": 387,
        "end_line": 387,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 417,
        "end_line": 417,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.IntPropListItem",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.IntPropListItem.intValue",
        "snippet": "    final int intValue;",
        "begin_line": 419,
        "end_line": 419,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.type",
        "snippet": "  int type;              // type of the node; Token.NAME for example",
        "begin_line": 1173,
        "end_line": 1173,
        "comment": " type of the node; Token.NAME for example"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.next",
        "snippet": "  Node next;             // next sibling",
        "begin_line": 1174,
        "end_line": 1174,
        "comment": " next sibling"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.first",
        "snippet": "  private Node first;    // first element of a linked list of children",
        "begin_line": 1175,
        "end_line": 1175,
        "comment": " first element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.last",
        "snippet": "  private Node last;     // last element of a linked list of children",
        "begin_line": 1176,
        "end_line": 1176,
        "comment": " last element of a linked list of children"
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.propListHead",
        "snippet": "  private PropListItem propListHead;",
        "begin_line": 1184,
        "end_line": 1184,
        "comment": "\n   * Linked list of properties. Since vast majority of nodes would have\n   * no more then 2 properties, linked list saves memory and provides\n   * fast lookup. If this does not holds, propListHead can be replaced\n   * by UintMap.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_BITS",
        "snippet": "  public static final int COLUMN_BITS = 12;",
        "begin_line": 1194,
        "end_line": 1194,
        "comment": "\n   * COLUMN_BITS represents how many of the lower-order bits of\n   * sourcePosition are reserved for storing the column number.\n   * Bits above these store the line number.\n   * This gives us decent position information for everything except\n   * files already passed through a minimizer, where lines might\n   * be longer than 4096 characters.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",
        "snippet": "  public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;",
        "begin_line": 1201,
        "end_line": 1201,
        "comment": "\n   * MAX_COLUMN_NUMBER represents the maximum column number that can\n   * be represented.  JSCompiler's modifications to Rhino cause all\n   * tokens located beyond the maximum column to MAX_COLUMN_NUMBER.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.COLUMN_MASK",
        "snippet": "  public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;",
        "begin_line": 1208,
        "end_line": 1208,
        "comment": "\n   * COLUMN_MASK stores a value where bits storing the column number\n   * are set, and bits storing the line are not set.  It's handy for\n   * separating column number from line number.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.sourcePosition",
        "snippet": "  private int sourcePosition;",
        "begin_line": 1216,
        "end_line": 1216,
        "comment": "\n   * Source position of this node. The position is encoded with the\n   * column number in the low 12 bits of the integer, and the line\n   * number in the rest.  Create some handy constants so we can change this\n   * size if we want.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.jsType",
        "snippet": "  private JSType jsType;",
        "begin_line": 1218,
        "end_line": 1218,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.parent",
        "snippet": "  private Node parent;",
        "begin_line": 1220,
        "end_line": 1220,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.start",
        "snippet": "    private final Node start;",
        "begin_line": 1345,
        "end_line": 1345,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.current",
        "snippet": "    private Node current;",
        "begin_line": 1346,
        "end_line": 1346,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SiblingNodeIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SiblingNodeIterable.used",
        "snippet": "    private boolean used;",
        "begin_line": 1347,
        "end_line": 1347,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.AncestorIterable",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.AncestorIterable.cur",
        "snippet": "    private Node cur;",
        "begin_line": 1426,
        "end_line": 1426,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",
        "snippet": "  final public static int FLAG_GLOBAL_STATE_UNMODIFIED = 1;",
        "begin_line": 2223,
        "end_line": 2223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",
        "snippet": "  final public static int FLAG_THIS_UNMODIFIED = 2;",
        "begin_line": 2224,
        "end_line": 2224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",
        "snippet": "  final public static int FLAG_ARGUMENTS_UNMODIFIED = 4;",
        "begin_line": 2225,
        "end_line": 2225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_NO_THROWS",
        "snippet": "  final public static int FLAG_NO_THROWS = 8;",
        "begin_line": 2226,
        "end_line": 2226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",
        "snippet": "  final public static int FLAG_LOCAL_RESULTS = 16;",
        "begin_line": 2227,
        "end_line": 2227,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",
        "snippet": "  final public static int SIDE_EFFECTS_FLAGS_MASK = 31;",
        "begin_line": 2229,
        "end_line": 2229,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",
        "snippet": "  final public static int SIDE_EFFECTS_ALL = 0;",
        "begin_line": 2231,
        "end_line": 2231,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Node",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",
        "snippet": "  final public static int NO_SIDE_EFFECTS =\n    FLAG_GLOBAL_STATE_UNMODIFIED\n    | FLAG_THIS_UNMODIFIED\n    | FLAG_ARGUMENTS_UNMODIFIED\n    | FLAG_NO_THROWS;",
        "begin_line": 2232,
        "end_line": 2236,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.SideEffectFlags",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.SideEffectFlags.value",
        "snippet": "    private int value = Node.SIDE_EFFECTS_ALL;",
        "begin_line": 2268,
        "end_line": 2268,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeA",
        "snippet": "    final Node nodeA;",
        "begin_line": 2381,
        "end_line": 2381,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.NodeMismatch",
        "src_path": "src/com/google/javascript/rhino/Node.java",
        "signature": "com.google.javascript.rhino.NodeMismatch.nodeB",
        "snippet": "    final Node nodeB;",
        "begin_line": 2382,
        "end_line": 2382,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType MODULE_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_MODULE_DEPENDENCY_ERROR\",\n          \"Bad dependency: {0} -> {1}. \"\n              + \"Modules must be listed in dependency order.\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",
        "snippet": "  static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_ENTRY_ERROR\",\n      \"required entry point \\\"{0}\\\" never provided\");",
        "begin_line": 75,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.options",
        "snippet": "  CompilerOptions options = null;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.passes",
        "snippet": "  private PassConfig passes = null;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externs",
        "snippet": "  private List<CompilerInput> externs;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The externs inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.modules",
        "snippet": "  private List<JSModule> modules;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The JS source modules"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.moduleGraph",
        "snippet": "  private JSModuleGraph moduleGraph;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " 2 modules, because we use this as a signal for which passes to run."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputs",
        "snippet": "  private List<CompilerInput> inputs;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The JS source inputs"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " error manager to which error management is delegated"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.warningsGuard",
        "snippet": "  private WarningsGuard warningsGuard;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " Warnings guard for filtering warnings."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externsRoot",
        "snippet": "  Node externsRoot;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Parse tree root nodes"
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.jsRoot",
        "snippet": "  Node jsRoot;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externAndJsRoot",
        "snippet": "  Node externAndJsRoot;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.inputsByName",
        "snippet": "  private Map<String, CompilerInput> inputsByName;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sourceMap",
        "snippet": "  private SourceMap sourceMap;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The source code map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.externExports",
        "snippet": "  private String externExports = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The externs created from the exports.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.uniqueNameId",
        "snippet": "  private int uniqueNameId = 0;",
        "begin_line": 119,
        "end_line": 119,
        "comment": "\n   * Ids for function inlining so that each declared name remains\n   * unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.useThreads",
        "snippet": "  private boolean useThreads = true;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Whether to use threads. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.hasRegExpGlobalReferences",
        "snippet": "  private boolean hasRegExpGlobalReferences = true;",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n   * Whether to assume there are references to the RegExp Global object\n   * properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.functionInformationMap",
        "snippet": "  private FunctionInformationMap functionInformationMap;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " The function information map "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.debugLog",
        "snippet": "  private final StringBuilder debugLog = new StringBuilder();",
        "begin_line": 134,
        "end_line": 134,
        "comment": " Debugging information "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultCodingConvention",
        "snippet": "  CodingConvention defaultCodingConvention = new ClosureCodingConvention();",
        "begin_line": 137,
        "end_line": 137,
        "comment": " Detects Google-specific coding conventions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeRegistry",
        "snippet": "  private JSTypeRegistry typeRegistry;",
        "begin_line": 139,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.parserConfig",
        "snippet": "  private Config parserConfig = null;",
        "begin_line": 140,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.abstractInterpreter",
        "snippet": "  private ReverseAbstractInterpreter abstractInterpreter;",
        "begin_line": 142,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.typeValidator",
        "snippet": "  private TypeValidator typeValidator;",
        "begin_line": 143,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.tracker",
        "snippet": "  public PerformanceTracker tracker;",
        "begin_line": 145,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.oldErrorReporter",
        "snippet": "  private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =\n      RhinoErrorReporter.forOldRhino(this);",
        "begin_line": 148,
        "end_line": 149,
        "comment": " The oldErrorReporter exists so we can get errors from the JSTypeRegistry."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.defaultErrorReporter",
        "snippet": "  private final ErrorReporter defaultErrorReporter =\n      RhinoErrorReporter.forNewRhino(this);",
        "begin_line": 152,
        "end_line": 153,
        "comment": " This error reporter gets the messages from the current Rhino parser."
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",
        "snippet": "  public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(\n      \"JSC_OPTIMIZE_LOOP_ERROR\",\n      \"Exceeded max number of optimization iterations: {0}\");",
        "begin_line": 156,
        "end_line": 158,
        "comment": " Error strings used for reporting JSErrors "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",
        "snippet": "  public static final DiagnosticType MOTION_ITERATIONS_ERROR =\n      DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n          \"Exceeded max number of code motion iterations: {0}\");",
        "begin_line": 159,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",
        "snippet": "  private static final long COMPILER_STACK_SIZE = 1048576L;",
        "begin_line": 163,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(\"com.google.javascript.jscomp\");",
        "begin_line": 171,
        "end_line": 172,
        "comment": "\n   * Logger for the whole com.google.javascript.jscomp domain -\n   * setting configuration for this logger affects all loggers\n   *  in other classes within the compiler.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.outStream",
        "snippet": "  private final PrintStream outStream;",
        "begin_line": 174,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.globalRefMap",
        "snippet": "  private GlobalVarReferenceMap globalRefMap = null;",
        "begin_line": 176,
        "end_line": 176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_MODULE_LIST_ERROR\",\n          \"At least one module must be provided\");",
        "begin_line": 378,
        "end_line": 380,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",
        "snippet": "  private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =\n      DiagnosticType.error(\"JSC_EMPTY_ROOT_MODULE_ERROR\",\n          \"Root module '{0}' must contain at least one source code input\");",
        "begin_line": 382,
        "end_line": 384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_INPUT\", \"Duplicate input: {0}\");",
        "begin_line": 444,
        "end_line": 445,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",
        "snippet": "  static final DiagnosticType DUPLICATE_EXTERN_INPUT =\n      DiagnosticType.error(\"JSC_DUPLICATE_EXTERN_INPUT\",\n          \"Duplicate extern input: {0}\");",
        "begin_line": 446,
        "end_line": 448,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.sanityCheck",
        "snippet": "  private final PassFactory sanityCheck =\n      new PassFactory(\"sanityCheck\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SanityCheck(compiler);\n    }\n  };",
        "begin_line": 772,
        "end_line": 778,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 834,
        "end_line": 834,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 835,
        "end_line": 835,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.sb",
        "snippet": "    private final StringBuilder sb = new StringBuilder();",
        "begin_line": 1495,
        "end_line": 1495,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.lineCount",
        "snippet": "    private int lineCount = 0;",
        "begin_line": 1496,
        "end_line": 1496,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeBuilder",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.CodeBuilder.colCount",
        "snippet": "    private int colCount = 0;",
        "begin_line": 1497,
        "end_line": 1497,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.recentChange",
        "snippet": "  protected final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 1641,
        "end_line": 1642,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Compiler",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.Compiler.codeChangeHandlers",
        "snippet": "  private final List<CodeChangeHandler> codeChangeHandlers =\n      Lists.<CodeChangeHandler>newArrayList();",
        "begin_line": 1643,
        "end_line": 1644,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 1934,
        "end_line": 1934,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externsRoot",
        "snippet": "    Node externsRoot;",
        "begin_line": 1936,
        "end_line": 1936,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.jsRoot",
        "snippet": "    private Node jsRoot;",
        "begin_line": 1937,
        "end_line": 1937,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.externs",
        "snippet": "    private List<CompilerInput> externs;",
        "begin_line": 1938,
        "end_line": 1938,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.inputs",
        "snippet": "    private List<CompilerInput> inputs;",
        "begin_line": 1939,
        "end_line": 1939,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.modules",
        "snippet": "    private List<JSModule> modules;",
        "begin_line": 1940,
        "end_line": 1940,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.passConfigState",
        "snippet": "    private PassConfig.State passConfigState;",
        "begin_line": 1941,
        "end_line": 1941,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.typeRegistry",
        "snippet": "    private JSTypeRegistry typeRegistry;",
        "begin_line": 1942,
        "end_line": 1942,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IntermediateState",
        "src_path": "src/com/google/javascript/jscomp/Compiler.java",
        "signature": "com.google.javascript.jscomp.IntermediateState.lifeCycleStage",
        "snippet": "    private AbstractCompiler.LifeCycleStage lifeCycleStage;",
        "begin_line": 1943,
        "end_line": 1943,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolved",
        "snippet": "  private boolean resolved = false;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.resolveResult",
        "snippet": "  private JSType resolveResult = null;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",
        "snippet": "  public static final String UNKNOWN_NAME =\n      \"Unknown class name\";",
        "begin_line": 73,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",
        "snippet": "  public static final String NOT_A_CLASS =\n      \"Not declared as a constructor\";",
        "begin_line": 76,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",
        "snippet": "  public static final String NOT_A_TYPE =\n      \"Not declared as a type name\";",
        "begin_line": 79,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",
        "snippet": "  public static final String EMPTY_TYPE_COMPONENT =\n      \"Named type with empty name component\";",
        "begin_line": 82,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ALPHA",
        "snippet": "  static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n    public int compare(JSType t1, JSType t2) {\n      return t1.toString().compareTo(t2.toString());\n    }\n  };",
        "begin_line": 90,
        "end_line": 94,
        "comment": "\n   * Total ordering on types based on their textual representation.\n   * This is used to have a deterministic output of the toString\n   * method of the union type since this output is used in tests.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.ENUMDECL",
        "snippet": "  public static final int ENUMDECL = 1;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " A flag set on enum definition tree nodes"
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",
        "snippet": "  public static final int NOT_ENUMDECL = 0;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSType",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.JSType.registry",
        "snippet": "  final JSTypeRegistry registry;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeA",
        "snippet": "    public final JSType typeA;",
        "begin_line": 1007,
        "end_line": 1007,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.TypePair",
        "src_path": "src/com/google/javascript/rhino/jstype/JSType.java",
        "signature": "com.google.javascript.rhino.jstype.TypePair.typeB",
        "snippet": "    public final JSType typeB;",
        "begin_line": 1008,
        "end_line": 1008,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstValidator",
        "src_path": "src/com/google/javascript/jscomp/AstValidator.java",
        "signature": "com.google.javascript.jscomp.AstValidator.violationHandler",
        "snippet": "  private final ViolationHandler violationHandler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.codingConvention",
        "snippet": "  private final CodingConvention codingConvention;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.removeGlobals",
        "snippet": "  private final boolean removeGlobals;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.preserveFunctionExpressionNames",
        "snippet": "  private boolean preserveFunctionExpressionNames;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.referenced",
        "snippet": "  private final Set<Var> referenced = Sets.newHashSet();",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n   * Keep track of variables that we've referenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.maybeUnreferenced",
        "snippet": "  private final List<Var> maybeUnreferenced = Lists.newArrayList();",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n   * Keep track of variables that might be unreferenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.allFunctionScopes",
        "snippet": "  private final List<Scope> allFunctionScopes = Lists.newArrayList();",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Keep track of scopes that we've traversed.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.assignsByVar",
        "snippet": "  private final Multimap<Var, Assign> assignsByVar =\n      ArrayListMultimap.create();",
        "begin_line": 97,
        "end_line": 98,
        "comment": "\n   * Keep track of assigns to variables that we haven't referenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.assignsByNode",
        "snippet": "  private final Map<Node, Assign> assignsByNode = Maps.newHashMap();",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n   * The assigns, indexed by the NAME node that they assign to.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.inheritsCalls",
        "snippet": "  private final Multimap<Var, Node> inheritsCalls =\n      ArrayListMultimap.create();",
        "begin_line": 108,
        "end_line": 109,
        "comment": "\n   * Subclass name -> inherits call EXPR node.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.continuations",
        "snippet": "  private final Multimap<Var, Continuation> continuations =\n      ArrayListMultimap.create();",
        "begin_line": 115,
        "end_line": 116,
        "comment": "\n   * Keep track of continuations that are finished iff the variable they're\n   * indexed by is referenced.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.modifyCallSites",
        "snippet": "  private boolean modifyCallSites;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedVars",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedVars.callSiteOptimizer",
        "snippet": "  private CallSiteOptimizer callSiteOptimizer;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 399,
        "end_line": 399,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.defFinder",
        "snippet": "    private final SimpleDefinitionFinder defFinder;",
        "begin_line": 400,
        "end_line": 400,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.toRemove",
        "snippet": "    private final List<Node> toRemove = Lists.newArrayList();",
        "begin_line": 401,
        "end_line": 401,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallSiteOptimizer",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.CallSiteOptimizer.toReplaceWithZero",
        "snippet": "    private final List<Node> toReplaceWithZero = Lists.newArrayList();",
        "begin_line": 402,
        "end_line": 402,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Continuation",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Continuation.node",
        "snippet": "    private final Node node;",
        "begin_line": 853,
        "end_line": 853,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Continuation",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Continuation.scope",
        "snippet": "    private final Scope scope;",
        "begin_line": 854,
        "end_line": 854,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.assignNode",
        "snippet": "    final Node assignNode;",
        "begin_line": 875,
        "end_line": 875,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.nameNode",
        "snippet": "    final Node nameNode;",
        "begin_line": 877,
        "end_line": 877,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.isPropertyAssign",
        "snippet": "    final boolean isPropertyAssign;",
        "begin_line": 881,
        "end_line": 881,
        "comment": " this is an assign to a property of that variable."
    },
    {
        "class_name": "com.google.javascript.jscomp.Assign",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedVars.java",
        "signature": "com.google.javascript.jscomp.Assign.mayHaveSecondarySideEffects",
        "snippet": "    final boolean mayHaveSecondarySideEffects;",
        "begin_line": 892,
        "end_line": 892,
        "comment": " way."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " Reference to JS Compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.startNode",
        "snippet": "    final Node startNode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": "\n     * Variable declaration that any following var nodes should be\n     * collapsed into\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.endNode",
        "snippet": "    final Node endNode;",
        "begin_line": 79,
        "end_line": 79,
        "comment": "\n     * Last node (non-inclusive) of the chain of nodes to collapse.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Collapse",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.Collapse.parent",
        "snippet": "    final Node parent;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Parent of the nodes to the collapse "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.collapses",
        "snippet": "  private final List<Collapse> collapses = Lists.newArrayList();",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n   * Collapses to do in this pass.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseVariableDeclarations",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.CollapseVariableDeclarations.nodesToCollapse",
        "snippet": "  private final Set<Node> nodesToCollapse = Sets.newHashSet();",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\n   * Nodes we've already looked at for collapsing, so that we don't look at them\n   * again (we look ahead when examining what nodes can be collapsed, and the\n   * node traversal may give them to us again)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherCollapses",
        "src_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherCollapses.blacklistedVars",
        "snippet": "    private final Set<Var> blacklistedVars = Sets.newHashSet();",
        "begin_line": 133,
        "end_line": 133,
        "comment": " This is a workaround for a bug in Firefox."
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printTrees",
        "snippet": "    public static final boolean printTrees = true;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " debug flags"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printICode",
        "snippet": "    static final boolean printICode = false;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.printNames",
        "snippet": "    static final boolean printNames = printTrees || printICode;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ERROR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FIRST_BYTECODE_TOKEN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENTERWITH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LEAVEWITH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GOTO",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IFEQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IFNE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETNAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITOR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITXOR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITAND",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.URSH",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ADD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SUB",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MUL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DIV",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.MOD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NOT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BITNOT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.POS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEG",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NEW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DELPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETPROP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETELEM",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETELEM",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CALL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NUMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STRING",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.NULL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THIS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FALSE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRUE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHEQ",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SHNE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REGEXP",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BINDNAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THROW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETHROW",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INSTANCEOF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOCAL_LOAD",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GETVAR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETVAR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH_SCOPE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_INIT_KEYS",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_INIT_VALUES",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_NEXT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ENUM_ID",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.THISFN",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RETURN_RESULT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ARRAYLIT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OBJECTLIT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEL_REF",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_CALL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_SPECIAL",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULTNAMESPACE",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ESCXMLATTR",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ESCXMLTEXT",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_MEMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NS_MEMBER",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.REF_NS_NAME",
        "snippet": "    public final static int\n    // start enum\n        ERROR          = -1, // well-known as the only code < EOF\n        EOF            = 0,  // end of file token - (not EOF_CHAR)\n        EOL            = 1,  // end of line\n\n        // Interpreter reuses the following as bytecodes\n        FIRST_BYTECODE_TOKEN    = 2,\n\n        ENTERWITH      = 2,\n        LEAVEWITH      = 3,\n        RETURN         = 4,\n        GOTO           = 5,\n        IFEQ           = 6,\n        IFNE           = 7,\n        SETNAME        = 8,\n        BITOR          = 9,\n        BITXOR         = 10,\n        BITAND         = 11,\n        EQ             = 12,\n        NE             = 13,\n        LT             = 14,\n        LE             = 15,\n        GT             = 16,\n        GE             = 17,\n        LSH            = 18,\n        RSH            = 19,\n        URSH           = 20,\n        ADD            = 21,\n        SUB            = 22,\n        MUL            = 23,\n        DIV            = 24,\n        MOD            = 25,\n        NOT            = 26,\n        BITNOT         = 27,\n        POS            = 28,\n        NEG            = 29,\n        NEW            = 30,\n        DELPROP        = 31,\n        TYPEOF         = 32,\n        GETPROP        = 33,\n        SETPROP        = 34,\n        GETELEM        = 35,\n        SETELEM        = 36,\n        CALL           = 37,\n        NAME           = 38,\n        NUMBER         = 39,\n        STRING         = 40,\n        NULL           = 41,\n        THIS           = 42,\n        FALSE          = 43,\n        TRUE           = 44,\n        SHEQ           = 45,   // shallow equality (===)\n        SHNE           = 46,   // shallow inequality (!==)\n        REGEXP         = 47,\n        BINDNAME       = 48,\n        THROW          = 49,\n        RETHROW        = 50, // rethrow caught execetion: catch (e if ) use it\n        IN             = 51,\n        INSTANCEOF     = 52,\n        LOCAL_LOAD     = 53,\n        GETVAR         = 54,\n        SETVAR         = 55,\n        CATCH_SCOPE    = 56,\n        ENUM_INIT_KEYS = 57,\n        ENUM_INIT_VALUES = 58,\n        ENUM_NEXT      = 59,\n        ENUM_ID        = 60,\n        THISFN         = 61,\n        RETURN_RESULT  = 62, // to return prevoisly stored return result\n        ARRAYLIT       = 63, // array literal\n        OBJECTLIT      = 64, // object literal\n        GET_REF        = 65, // *reference\n        SET_REF        = 66, // *reference    = something\n        DEL_REF        = 67, // delete reference\n        REF_CALL       = 68, // f(args)    = something or f(args)++\n        REF_SPECIAL    = 69, // reference for special properties like __proto\n\n        // For XML support:\n        DEFAULTNAMESPACE = 70, // default xml namespace =\n        ESCXMLATTR     = 71,\n        ESCXMLTEXT     = 72,\n        REF_MEMBER     = 73, // Reference for x.@y, x..y etc.\n        REF_NS_MEMBER  = 74, // Reference for x.ns::y, x..ns::y etc.\n        REF_NAME       = 75, // Reference for @y, @[y] etc.\n        REF_NS_NAME    = 76; // Reference for ns::y, @ns::y@[y] etc.",
        "begin_line": 67,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_BYTECODE_TOKEN",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TRY",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SEMI",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LC",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RC",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LP",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RP",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COMMA",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITOR",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITXOR",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_BITAND",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_LSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_RSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_URSH",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_ADD",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_SUB",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MUL",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_DIV",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ASSIGN_MOD",
        "snippet": "    public final static int\n        LAST_BYTECODE_TOKEN    = REF_NS_NAME,\n\n        TRY            = 77,\n        SEMI           = 78,  // semicolon\n        LB             = 79,  // left and right brackets\n        RB             = 80,\n        LC             = 81,  // left and right curlies (braces)\n        RC             = 82,\n        LP             = 83,  // left and right parentheses\n        RP             = 84,\n        COMMA          = 85,  // comma operator\n\n        ASSIGN         = 86,  // simple assignment  (=)\n        ASSIGN_BITOR   = 87,  // |=\n        ASSIGN_BITXOR  = 88,  // ^=\n        ASSIGN_BITAND  = 89,  // &=\n        ASSIGN_LSH     = 90,  // <<=\n        ASSIGN_RSH     = 91,  // >>=\n        ASSIGN_URSH    = 92,  // >>>=\n        ASSIGN_ADD     = 93,  // +=\n        ASSIGN_SUB     = 94,  // -=\n        ASSIGN_MUL     = 95,  // *=\n        ASSIGN_DIV     = 96,  // /=\n        ASSIGN_MOD     = 97;  // %=",
        "begin_line": 155,
        "end_line": 179,
        "comment": " End of interpreter bytecodes"
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FIRST_ASSIGN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_ASSIGN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.HOOK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLON",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.OR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.AND",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.INC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FUNCTION",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPORT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IMPORT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.IF",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELSE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SWITCH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CASE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEFAULT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WHILE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DO",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FOR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BREAK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONTINUE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.WITH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CATCH",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.FINALLY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.VOID",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.RESERVED",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EMPTY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BLOCK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TARGET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOOP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_VOID",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EXPR_RESULT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.JSR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SCRIPT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TYPEOFNAME",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.USE_STACK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETPROP_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETELEM_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LOCAL_BLOCK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET_REF_OP",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOTDOT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.COLONCOLON",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XML",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DOTQUERY",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XMLATTR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.XMLEND",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TO_OBJECT",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.TO_DOUBLE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.GET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SET",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.CONST",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETCONST",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.SETCONSTVAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.DEBUGGER",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LABEL_NAME",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.LAST_TOKEN",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ANNOTATION",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.PIPE",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.STAR",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EOC",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.QMARK",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.ELLIPSIS",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.BANG",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Token",
        "src_path": "src/com/google/javascript/rhino/Token.java",
        "signature": "com.google.javascript.rhino.Token.EQUALS",
        "snippet": "    public final static int\n        FIRST_ASSIGN   = ASSIGN,\n        LAST_ASSIGN    = ASSIGN_MOD,\n\n        HOOK           = 98, // conditional (?:)\n        COLON          = 99,\n        OR             = 100, // logical or (||)\n        AND            = 101, // logical and (&&)\n        INC            = 102, // increment/decrement (++ --)\n        DEC            = 103,\n        DOT            = 104, // member operator (.)\n        FUNCTION       = 105, // function keyword\n        EXPORT         = 106, // export keyword\n        IMPORT         = 107, // import keyword\n        IF             = 108, // if keyword\n        ELSE           = 109, // else keyword\n        SWITCH         = 110, // switch keyword\n        CASE           = 111, // case keyword\n        DEFAULT        = 112, // default keyword\n        WHILE          = 113, // while keyword\n        DO             = 114, // do keyword\n        FOR            = 115, // for keyword\n        BREAK          = 116, // break keyword\n        CONTINUE       = 117, // continue keyword\n        VAR            = 118, // var keyword\n        WITH           = 119, // with keyword\n        CATCH          = 120, // catch keyword\n        FINALLY        = 121, // finally keyword\n        VOID           = 122, // void keyword\n        RESERVED       = 123, // reserved keywords\n\n        EMPTY          = 124,\n\n        /* types used for the parse tree - these never get returned\n         * by the scanner.\n         */\n\n        BLOCK          = 125, // statement block\n        LABEL          = 126, // label\n        TARGET         = 127,\n        LOOP           = 128,\n        EXPR_VOID      = 129, // expression statement in functions\n        EXPR_RESULT    = 130, // expression statement in scripts\n        JSR            = 131,\n        SCRIPT         = 132, // top-level node for entire script\n        TYPEOFNAME     = 133, // for typeof(simple-name)\n        USE_STACK      = 134,\n        SETPROP_OP     = 135, // x.y op= something\n        SETELEM_OP     = 136, // x[y] op= something\n        LOCAL_BLOCK    = 137,\n        SET_REF_OP     = 138, // *reference op= something\n\n        // For XML support:\n        DOTDOT         = 139,  // member operator (..)\n        COLONCOLON     = 140,  // namespace::name\n        XML            = 141,  // XML type\n        DOTQUERY       = 142,  // .() -- e.g., x.emps.emp.(name == \"terry\")\n        XMLATTR        = 143,  // @\n        XMLEND         = 144,\n\n        // Optimizer-only-tokens\n        TO_OBJECT      = 145,\n        TO_DOUBLE      = 146,\n\n        GET            = 147,  // JS 1.5 get pseudo keyword\n        SET            = 148,  // JS 1.5 set pseudo keyword\n\n        CONST          = 149,  // JS 1.5 const keyword\n        SETCONST       = 150,\n        SETCONSTVAR    = 151,\n        DEBUGGER       = 152,\n\n        // JSCompiler introduced tokens\n        LABEL_NAME     = 153,\n\n        LAST_TOKEN     = 153,\n\n        // JSDoc-only tokens\n        ANNOTATION     = 300,\n        PIPE           = 301,\n        STAR           = 302,\n        EOC            = 303,\n        QMARK          = 304,\n        ELLIPSIS       = 305,\n        BANG           = 306,\n        EQUALS         = 307;",
        "begin_line": 181,
        "end_line": 266,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.first",
        "snippet": "    private final Annotatable first;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotationState.second",
        "snippet": "    private final Annotation second;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphAnnotationState",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.GraphAnnotationState.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.nodeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> nodeAnnotationStack;",
        "begin_line": 87,
        "end_line": 87,
        "comment": "\n   * Used by {@link #pushNodeAnnotations()} and {@link #popNodeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.Graph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.Graph.edgeAnnotationStack",
        "snippet": "  private Deque<GraphAnnotationState> edgeAnnotationStack;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Used by {@link #pushEdgeAnnotations()} and {@link #popEdgeAnnotations()}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.graph",
        "snippet": "    private Graph<N, E> graph;",
        "begin_line": 304,
        "end_line": 304,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.SimpleSubGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/Graph.java",
        "signature": "com.google.javascript.jscomp.graph.SimpleSubGraph.nodes",
        "snippet": "    private List<GraphNode<N, E>> nodes = Lists.newArrayList();",
        "begin_line": 305,
        "end_line": 305,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConstCheck",
        "src_path": "src/com/google/javascript/jscomp/ConstCheck.java",
        "signature": "com.google.javascript.jscomp.ConstCheck.CONST_REASSIGNED_VALUE_ERROR",
        "snippet": "  static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR =\n      DiagnosticType.error(\n          \"JSC_CONSTANT_REASSIGNED_VALUE_ERROR\",\n          \"constant {0} assigned a value more than once\");",
        "begin_line": 36,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConstCheck",
        "src_path": "src/com/google/javascript/jscomp/ConstCheck.java",
        "signature": "com.google.javascript.jscomp.ConstCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConstCheck",
        "src_path": "src/com/google/javascript/jscomp/ConstCheck.java",
        "signature": "com.google.javascript.jscomp.ConstCheck.initializedConstants",
        "snippet": "  private final Set<Scope.Var> initializedConstants;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.COMPILED_CONSTANT_NAME",
        "snippet": "  private static final String COMPILED_CONSTANT_NAME = \"COMPILED\";",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For the --mark-as-compiled pass "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CLOSURE_LOCALE_CONSTANT_NAME",
        "snippet": "  private static final String CLOSURE_LOCALE_CONSTANT_NAME = \"goog.LOCALE\";",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Constant name for Closure's locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",
        "snippet": "  static final DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK =\n      DiagnosticType.error(\"JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK\",\n          \"TightenTypes requires type checking. Please use --check_types.\");",
        "begin_line": 60,
        "end_line": 62,
        "comment": " Compiler errors when invalid combinations of passes are run."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.CANNOT_USE_PROTOTYPE_AND_VAR",
        "snippet": "  static final DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR =\n      DiagnosticType.error(\"JSC_CANNOT_USE_PROTOTYPE_AND_VAR\",\n          \"Rename prototypes and inline variables cannot be used together\");",
        "begin_line": 64,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.REPORT_PATH_IO_ERROR",
        "snippet": "  static final DiagnosticType REPORT_PATH_IO_ERROR =\n      DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n          \"Error writing compiler report to {0}\");",
        "begin_line": 69,
        "end_line": 71,
        "comment": " Miscellaneous errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_PROP_PARSE",
        "snippet": "  private static final DiagnosticType INPUT_MAP_PROP_PARSE =\n      DiagnosticType.error(\"JSC_INPUT_MAP_PROP_PARSE\",\n          \"Input property map parse error: {0}\");",
        "begin_line": 73,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.INPUT_MAP_VAR_PARSE",
        "snippet": "  private static final DiagnosticType INPUT_MAP_VAR_PARSE =\n      DiagnosticType.error(\"JSC_INPUT_MAP_VAR_PARSE\",\n          \"Input variable map parse error: {0}\");",
        "begin_line": 77,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_GRAPH_FILE_ERROR",
        "snippet": "  private static final DiagnosticType NAME_REF_GRAPH_FILE_ERROR =\n      DiagnosticType.error(\"JSC_NAME_REF_GRAPH_FILE_ERROR\",\n          \"Error \\\"{1}\\\" writing name reference graph to \\\"{0}\\\".\");",
        "begin_line": 81,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.NAME_REF_REPORT_FILE_ERROR",
        "snippet": "  private static final DiagnosticType NAME_REF_REPORT_FILE_ERROR =\n      DiagnosticType.error(\"JSC_NAME_REF_REPORT_FILE_ERROR\",\n          \"Error \\\"{1}\\\" writing name reference report to \\\"{0}\\\".\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.namespaceForChecks",
        "snippet": "  private GlobalNamespace namespaceForChecks = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n   * A global namespace to share across checking passes.\n   * TODO(nicksantos): This is a hack until I can get the namespace into\n   * the symbol table.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypes",
        "snippet": "  private TightenTypes tightenTypes = null;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n   * A type-tightener to share across optimization passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportedNames",
        "snippet": "  private Set<String> exportedNames = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " Names exported by goog.exportSymbol. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleIdGenerator",
        "snippet": "  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator =\n      new CrossModuleMethodMotion.IdGenerator();",
        "begin_line": 108,
        "end_line": 109,
        "comment": "\n   * Ids for cross-module method stubbing, so that each method has\n   * a unique id.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.cssNames",
        "snippet": "  private Map<String, Integer> cssNames = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": "\n   * Keys are arguments passed to getCssName() found during compilation; values\n   * are the number of times the key appeared as an argument to getCssName().\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.variableMap",
        "snippet": "  private VariableMap variableMap = null;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The variable renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.propertyMap",
        "snippet": "  private VariableMap propertyMap = null;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " The property renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.anonymousFunctionNameMap",
        "snippet": "  private VariableMap anonymousFunctionNameMap = null;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The naming map for anonymous functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.functionNames",
        "snippet": "  private FunctionNames functionNames = null;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Fully qualified function names and globally unique ids "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.stringMap",
        "snippet": "  private VariableMap stringMap = null;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " String replacement map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.idGeneratorMap",
        "snippet": "  private String idGeneratorMap = null;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Id generator map "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.suspiciousCode",
        "snippet": "  final HotSwapPassFactory suspiciousCode =\n      new HotSwapPassFactory(\"suspiciousCode\", true) {\n\n    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      List<Callback> sharedCallbacks = Lists.newArrayList();\n      if (options.checkSuspiciousCode) {\n        sharedCallbacks.add(new CheckAccidentalSemicolon(CheckLevel.WARNING));\n        sharedCallbacks.add(new CheckSideEffects(CheckLevel.WARNING));\n      }\n\n      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        sharedCallbacks.add(new CheckGlobalThis(compiler));\n      }\n      return combineChecks(compiler, sharedCallbacks);\n    }\n\n  };",
        "begin_line": 699,
        "end_line": 717,
        "comment": " TODO(bolinfest): Write a CompilerPass for this."
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlStructures",
        "snippet": "  final HotSwapPassFactory checkControlStructures =\n      new HotSwapPassFactory(\"checkControlStructures\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new ControlStructureCheck(compiler);\n    }\n  };",
        "begin_line": 734,
        "end_line": 740,
        "comment": " Checks for validity of the control structures. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkRequires",
        "snippet": "  final HotSwapPassFactory checkRequires =\n      new HotSwapPassFactory(\"checkRequires\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new CheckRequiresForConstructors(compiler, options.checkRequires);\n    }\n  };",
        "begin_line": 743,
        "end_line": 749,
        "comment": " Checks that all constructed classes are goog.require()d. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkProvides",
        "snippet": "  final HotSwapPassFactory checkProvides =\n      new HotSwapPassFactory(\"checkProvides\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new CheckProvides(compiler, options.checkProvides);\n    }\n  };",
        "begin_line": 752,
        "end_line": 758,
        "comment": " Makes sure @constructor is paired with goog.provides(). "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.GENERATE_EXPORTS_ERROR",
        "snippet": "  private static final DiagnosticType GENERATE_EXPORTS_ERROR =\n      DiagnosticType.error(\n          \"JSC_GENERATE_EXPORTS_ERROR\",\n          \"Exports can only be generated if export symbol/property \" +\n          \"functions are set.\");",
        "begin_line": 760,
        "end_line": 764,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.generateExports",
        "snippet": "  final PassFactory generateExports =\n      new PassFactory(\"generateExports\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null &&\n          convention.getExportPropertyFunction() != null) {\n        return new GenerateExports(compiler,\n            convention.getExportSymbolFunction(),\n            convention.getExportPropertyFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 767,
        "end_line": 781,
        "comment": " Generates exports for @export annotations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exportTestFunctions",
        "snippet": "  final PassFactory exportTestFunctions =\n      new PassFactory(\"exportTestFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      CodingConvention convention = compiler.getCodingConvention();\n      if (convention.getExportSymbolFunction() != null) {\n        return new ExportTestFunctions(compiler,\n            convention.getExportSymbolFunction());\n      } else {\n        return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);\n      }\n    }\n  };",
        "begin_line": 784,
        "end_line": 796,
        "comment": " Generates exports for functions associated with JSUnit. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.gatherRawExports",
        "snippet": "  final PassFactory gatherRawExports =\n      new PassFactory(\"gatherRawExports\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      final GatherRawExports pass = new GatherRawExports(\n          compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          if (exportedNames == null) {\n            exportedNames = Sets.newHashSet();\n          }\n          exportedNames.addAll(pass.getExportedVariableNames());\n        }\n      };\n    }\n  };",
        "begin_line": 799,
        "end_line": 817,
        "comment": " Raw exports processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closurePrimitives",
        "snippet": "  @SuppressWarnings(\"deprecation\")\n  final HotSwapPassFactory closurePrimitives =\n      new HotSwapPassFactory(\"processProvidesAndRequires\", false) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      final ProcessClosurePrimitives pass = new ProcessClosurePrimitives(\n          compiler,\n          options.brokenClosureRequiresLevel,\n          options.rewriteNewDateGoogNow);\n\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          exportedNames = pass.getExportedVariableNames();\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot) {\n          pass.hotSwapScript(scriptRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 820,
        "end_line": 842,
        "comment": " Closure pre-processing pass. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceMessages",
        "snippet": "  final PassFactory replaceMessages =\n      new PassFactory(\"replaceMessages\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new ReplaceMessages(compiler,\n          options.messageBundle,\n          /* warn about message dupes */\n          true,\n          /* allow messages with goog.getMsg */\n          JsMessage.Style.getFromParams(true, false),\n          /* if we can't find a translation, don't worry about it. */\n          false);\n    }\n  };",
        "begin_line": 849,
        "end_line": 862,
        "comment": "\n   * The default i18n pass.\n   * A lot of the options are not configurable, because ReplaceMessages\n   * has a lot of legacy logic.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureGoogScopeAliases",
        "snippet": "  final HotSwapPassFactory closureGoogScopeAliases =\n      new HotSwapPassFactory(\"processGoogScopeAliases\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new ScopedAliases(\n              compiler, options.getAliasTransformationHandler());\n    }\n  };",
        "begin_line": 865,
        "end_line": 872,
        "comment": " Applies aliases and inlines goog.scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureCheckGetCssName",
        "snippet": "  final PassFactory closureCheckGetCssName =\n      new PassFactory(\"checkMissingGetCssName\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      String blacklist = options.checkMissingGetCssNameBlacklist;\n      Preconditions.checkState(blacklist != null && !blacklist.isEmpty(),\n          \"Not checking use of goog.getCssName because of empty blacklist.\");\n      return new CheckMissingGetCssName(\n          compiler, options.checkMissingGetCssNameLevel, blacklist);\n    }\n  };",
        "begin_line": 875,
        "end_line": 885,
        "comment": " Checks that CSS class names are wrapped in goog.getCssName "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureReplaceGetCssName",
        "snippet": "  final PassFactory closureReplaceGetCssName =\n      new PassFactory(\"renameCssNames\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Integer> newCssNames = null;\n          if (options.gatherCssNames) {\n            newCssNames = Maps.newHashMap();\n          }\n          (new ReplaceCssNames(compiler, newCssNames)).process(\n              externs, jsRoot);\n          cssNames = newCssNames;\n        }\n      };\n    }\n  };",
        "begin_line": 892,
        "end_line": 909,
        "comment": "\n   * Processes goog.getCssName.  The cssRenamingMap is used to lookup\n   * replacement values for the classnames.  If null, the raw class names are\n   * inlined.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.createSyntheticBlocks",
        "snippet": "  final PassFactory createSyntheticBlocks =\n      new PassFactory(\"createSyntheticBlocks\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CreateSyntheticBlocks(compiler,\n          options.syntheticBlockStartMarker,\n          options.syntheticBlockEndMarker);\n    }\n  };",
        "begin_line": 915,
        "end_line": 923,
        "comment": "\n   * Creates synthetic blocks to prevent FoldConstants from moving code\n   * past markers in the source.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.peepholeOptimizations",
        "snippet": "  final PassFactory peepholeOptimizations =\n      new PassFactory(\"peepholeOptimizations\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new PeepholeOptimizationsPass(compiler,\n            new PeepholeSubstituteAlternateSyntax(false),\n            new PeepholeReplaceKnownMethods(),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeFoldConstants(),\n            new PeepholeCollectPropertyAssignments());\n    }\n  };",
        "begin_line": 926,
        "end_line": 937,
        "comment": " Various peephole optimizations. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.latePeepholeOptimizations",
        "snippet": "  final PassFactory latePeepholeOptimizations =\n      new PassFactory(\"latePeepholeOptimizations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new PeepholeOptimizationsPass(compiler,\n            new StatementFusion(),\n            new PeepholeRemoveDeadCode(),\n            new PeepholeSubstituteAlternateSyntax(true),\n            new PeepholeReplaceKnownMethods(),\n            new PeepholeFoldConstants());\n    }\n  };",
        "begin_line": 940,
        "end_line": 951,
        "comment": " Same as peepholeOptimizations but aggressively merges code together "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVars",
        "snippet": "  final HotSwapPassFactory checkVars =\n      new HotSwapPassFactory(\"checkVars\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler);\n    }\n  };",
        "begin_line": 954,
        "end_line": 960,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkRegExp",
        "snippet": "  final PassFactory checkRegExp =\n      new PassFactory(\"checkRegExp\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      final CheckRegExp pass = new CheckRegExp(compiler);\n\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          pass.process(externs, root);\n          compiler.setHasRegExpGlobalReferences(\n              pass.isGlobalRegExpPropertiesUsed());\n        }\n      };\n    }\n  };",
        "begin_line": 963,
        "end_line": 978,
        "comment": " Checks for RegExp references. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkShadowVars",
        "snippet": "  final PassFactory checkShadowVars =\n      new PassFactory(\"variableShadowDeclarationCheck\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VariableShadowDeclarationCheck(\n          compiler, options.checkShadowVars);\n    }\n  };",
        "begin_line": 981,
        "end_line": 988,
        "comment": " Checks that no vars are illegally shadowed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkVariableReferences",
        "snippet": "  final HotSwapPassFactory checkVariableReferences =\n      new HotSwapPassFactory(\"checkVariableReferences\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new VariableReferenceCheck(\n          compiler, options.aggressiveVarCheck);\n    }\n  };",
        "begin_line": 991,
        "end_line": 998,
        "comment": " Checks that references to variables look reasonable. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPreprocess",
        "snippet": "  final PassFactory objectPropertyStringPreprocess =\n      new PassFactory(\"ObjectPropertyStringPreprocess\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPreprocess(compiler);\n    }\n  };",
        "begin_line": 1001,
        "end_line": 1007,
        "comment": " Pre-process goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.resolveTypes",
        "snippet": "  final HotSwapPassFactory resolveTypes =\n      new HotSwapPassFactory(\"resolveTypes\", false) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new GlobalTypeResolver(compiler);\n    }\n  };",
        "begin_line": 1010,
        "end_line": 1016,
        "comment": " Creates a typed scope and adds types to the type registry. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inferTypes",
        "snippet": "  final HotSwapPassFactory inferTypes =\n      new HotSwapPassFactory(\"inferTypes\", false) {\n    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(getTypedScopeCreator());\n\n          makeTypeInference(compiler).process(externs, root);\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot) {\n          makeTypeInference(compiler).inferTypes(scriptRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1019,
        "end_line": 1038,
        "comment": " Runs type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inferJsDocInfo",
        "snippet": "  final HotSwapPassFactory inferJsDocInfo =\n    new HotSwapPassFactory(\"inferJsDocInfo\", false) {\n  @Override\n  protected HotSwapCompilerPass createInternal(\n      final AbstractCompiler compiler) {\n    return new HotSwapCompilerPass() {\n      @Override\n      public void process(Node externs, Node root) {\n        Preconditions.checkNotNull(topScope);\n        Preconditions.checkNotNull(getTypedScopeCreator());\n\n        makeInferJsDocInfo(compiler).process(externs, root);\n      }\n      @Override\n      public void hotSwapScript(Node scriptRoot) {\n        makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot);\n      }\n    };\n  }\n};",
        "begin_line": 1040,
        "end_line": 1059,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkTypes",
        "snippet": "  final HotSwapPassFactory checkTypes =\n      new HotSwapPassFactory(\"checkTypes\", false) {\n    @Override\n    protected HotSwapCompilerPass createInternal(final AbstractCompiler\n        compiler) {\n      return new HotSwapCompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          Preconditions.checkNotNull(topScope);\n          Preconditions.checkNotNull(getTypedScopeCreator());\n\n          TypeCheck check = makeTypeCheck(compiler);\n          check.process(externs, root);\n          compiler.getErrorManager().setTypedPercent(check.getTypedPercent());\n        }\n        @Override\n        public void hotSwapScript(Node scriptRoot) {\n          makeTypeCheck(compiler).check(scriptRoot, false);\n        }\n      };\n    }\n  };",
        "begin_line": 1062,
        "end_line": 1083,
        "comment": " Checks type usage "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkControlFlow",
        "snippet": "  final HotSwapPassFactory checkControlFlow =\n      new HotSwapPassFactory(\"checkControlFlow\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      List<Callback> callbacks = Lists.newArrayList();\n      if (options.checkUnreachableCode.isOn()) {\n        callbacks.add(\n            new CheckUnreachableCode(compiler, options.checkUnreachableCode));\n      }\n      if (options.checkMissingReturn.isOn() && options.checkTypes) {\n        callbacks.add(\n            new CheckMissingReturn(compiler, options.checkMissingReturn));\n      }\n      return combineChecks(compiler, callbacks);\n    }\n  };",
        "begin_line": 1089,
        "end_line": 1104,
        "comment": "\n   * Checks possible execution paths of the program for problems: missing return\n   * statements and dead code.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkAccessControls",
        "snippet": "  final HotSwapPassFactory checkAccessControls =\n      new HotSwapPassFactory(\"checkAccessControls\", true) {\n    @Override\n    protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {\n      return new CheckAccessControls(compiler);\n    }\n  };",
        "begin_line": 1107,
        "end_line": 1113,
        "comment": " Checks access controls. Depends on type-inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalTypeResolver",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.GlobalTypeResolver.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1125,
        "end_line": 1125,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkGlobalNames",
        "snippet": "  final PassFactory checkGlobalNames =\n      new PassFactory(\"Check names\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          // Create a global namespace for analysis by check passes.\n          // Note that this class does all heavy computation lazily,\n          // so it's OK to create it here.\n          namespaceForChecks = new GlobalNamespace(compiler, jsRoot);\n          new CheckGlobalNames(compiler, options.checkGlobalNamesLevel)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1146,
        "end_line": 1162,
        "comment": " Checks global name usage. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkStrictMode",
        "snippet": "  final PassFactory checkStrictMode =\n      new PassFactory(\"checkStrictMode\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new StrictModeCheck(compiler,\n          !options.checkSymbols,  // don't check variables twice\n          !options.checkCaja);    // disable eval check if not Caja\n    }\n  };",
        "begin_line": 1165,
        "end_line": 1173,
        "comment": " Checks that the code is ES5 or Caja compliant. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.processTweaks",
        "snippet": "  final PassFactory processTweaks = new PassFactory(\"processTweaks\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          new ProcessTweaks(compiler,\n              options.getTweakProcessing().shouldStrip(),\n              options.getTweakReplacements()).process(externs, jsRoot);\n        }\n      };\n    }\n  };",
        "begin_line": 1176,
        "end_line": 1188,
        "comment": " Process goog.tweak.getTweak() calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.processDefines",
        "snippet": "  final PassFactory processDefines =\n      new PassFactory(\"processDefines\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          Map<String, Node> replacements = getAdditionalReplacements(options);\n          replacements.putAll(options.getDefineReplacements());\n\n          new ProcessDefines(compiler, replacements)\n              .injectNamespace(namespaceForChecks).process(externs, jsRoot);\n\n          // Kill the namespace in the other class\n          // so that it can be garbage collected after all passes\n          // are through with it.\n          namespaceForChecks = null;\n        }\n      };\n    }\n  };",
        "begin_line": 1191,
        "end_line": 1211,
        "comment": " Override @define-annotated constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.checkConsts",
        "snippet": "  final PassFactory checkConsts =\n      new PassFactory(\"checkConsts\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ConstCheck(compiler);\n    }\n  };",
        "begin_line": 1214,
        "end_line": 1220,
        "comment": " Checks that all constants are not modified "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.computeFunctionNames",
        "snippet": "  final PassFactory computeFunctionNames =\n      new PassFactory(\"computeFunctionNames\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return ((functionNames = new FunctionNames(compiler)));\n    }\n  };",
        "begin_line": 1223,
        "end_line": 1229,
        "comment": " Computes the names of functions for later analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ignoreCajaProperties",
        "snippet": "  final PassFactory ignoreCajaProperties =\n      new PassFactory(\"ignoreCajaProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new IgnoreCajaProperties(compiler);\n    }\n  };",
        "begin_line": 1232,
        "end_line": 1238,
        "comment": " Skips Caja-private properties in for-in loops "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.runtimeTypeCheck",
        "snippet": "  final PassFactory runtimeTypeCheck =\n      new PassFactory(\"runtimeTypeCheck\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RuntimeTypeCheck(compiler,\n          options.runtimeTypeCheckLogFunction);\n    }\n  };",
        "begin_line": 1241,
        "end_line": 1248,
        "comment": " Inserts runtime type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceIdGenerators",
        "snippet": "  final PassFactory replaceIdGenerators =\n      new PassFactory(\"replaceIdGenerators\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          ReplaceIdGenerators pass =\n              new ReplaceIdGenerators(compiler, options.idGenerators);\n          pass.process(externs, root);\n          idGeneratorMap = pass.getIdGeneratorMap();\n        }\n      };\n    }\n  };",
        "begin_line": 1251,
        "end_line": 1264,
        "comment": " Generates unique ids. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.replaceStrings",
        "snippet": "  final PassFactory replaceStrings =\n      new PassFactory(\"replaceStrings\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          ReplaceStrings pass = new ReplaceStrings(\n              compiler,\n              options.replaceStringsPlaceholderToken,\n              options.replaceStringsFunctionDescriptions,\n              options.replaceStringsReservedStrings);\n          pass.process(externs, root);\n          stringMap = pass.getStringMap();\n        }\n      };\n    }\n  };",
        "begin_line": 1267,
        "end_line": 1283,
        "comment": " Replace strings. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.optimizeArgumentsArray",
        "snippet": "  final PassFactory optimizeArgumentsArray =\n      new PassFactory(\"optimizeArgumentsArray\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new OptimizeArgumentsArray(compiler);\n    }\n  };",
        "begin_line": 1286,
        "end_line": 1292,
        "comment": " Optimizes the \"arguments\" array. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureCodeRemoval",
        "snippet": "  final PassFactory closureCodeRemoval =\n      new PassFactory(\"closureCodeRemoval\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new ClosureCodeRemoval(compiler, options.removeAbstractMethods,\n          options.removeClosureAsserts);\n    }\n  };",
        "begin_line": 1295,
        "end_line": 1302,
        "comment": " Remove variables set to goog.abstractMethod. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.closureOptimizePrimitives",
        "snippet": "  final PassFactory closureOptimizePrimitives =\n      new PassFactory(\"closureOptimizePrimitives\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new ClosureOptimizePrimitives(compiler);\n    }\n  };",
        "begin_line": 1305,
        "end_line": 1311,
        "comment": " Special case optimizations for closure functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseProperties",
        "snippet": "  final PassFactory collapseProperties =\n      new PassFactory(\"collapseProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CollapseProperties(\n          compiler, options.collapsePropertiesOnExternTypes,\n          !isInliningForbidden());\n    }\n  };",
        "begin_line": 1314,
        "end_line": 1322,
        "comment": " Collapses names in the global scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseObjectLiterals",
        "snippet": "  final PassFactory collapseObjectLiterals =\n      new PassFactory(\"collapseObjectLiterals\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new InlineObjectLiterals(\n          compiler, compiler.getUniqueNameIdSupplier());\n    }\n  };",
        "begin_line": 1325,
        "end_line": 1332,
        "comment": " Rewrite properties as variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.tightenTypesBuilder",
        "snippet": "  final PassFactory tightenTypesBuilder =\n      new PassFactory(\"tightenTypes\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      if (!options.checkTypes) {\n        return new ErrorPass(compiler, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);\n      }\n      tightenTypes = new TightenTypes(compiler);\n      return tightenTypes;\n    }\n  };",
        "begin_line": 1338,
        "end_line": 1348,
        "comment": "\n   * Try to infer the actual types, which may be narrower\n   * than the declared types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.disambiguateProperties",
        "snippet": "  final PassFactory disambiguateProperties =\n      new PassFactory(\"disambiguateProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      if (tightenTypes == null) {\n        return DisambiguateProperties.forJSTypeSystem(compiler);\n      } else {\n        return DisambiguateProperties.forConcreteTypeSystem(\n            compiler, tightenTypes);\n      }\n    }\n  };",
        "begin_line": 1351,
        "end_line": 1362,
        "comment": " Devirtualize property names based on type information. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.chainCalls",
        "snippet": "  final PassFactory chainCalls =\n      new PassFactory(\"chainCalls\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ChainCalls(compiler);\n    }\n  };",
        "begin_line": 1367,
        "end_line": 1373,
        "comment": "\n   * Chain calls to functions that return this.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.devirtualizePrototypeMethods",
        "snippet": "  final PassFactory devirtualizePrototypeMethods =\n      new PassFactory(\"devirtualizePrototypeMethods\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new DevirtualizePrototypeMethods(compiler);\n    }\n  };",
        "begin_line": 1379,
        "end_line": 1385,
        "comment": "\n   * Rewrite instance methods as static methods, to make them easier\n   * to inline.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.optimizeCallsAndRemoveUnusedVars",
        "snippet": "  final PassFactory optimizeCallsAndRemoveUnusedVars =\n      new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      OptimizeCalls passes = new OptimizeCalls(compiler);\n      if (options.optimizeReturns) {\n        // Remove unused return values.\n        passes.addPass(new OptimizeReturns(compiler));\n      }\n\n      if (options.optimizeParameters) {\n        // Remove all parameters that are constants or unused.\n        passes.addPass(new OptimizeParameters(compiler));\n      }\n\n      if (options.optimizeCalls) {\n        boolean removeOnlyLocals = options.removeUnusedLocalVars\n            && !options.removeUnusedVars;\n        boolean preserveAnonymousFunctionNames =\n            options.anonymousFunctionNaming !=\n            AnonymousFunctionNamingPolicy.OFF;\n        passes.addPass(\n            new RemoveUnusedVars(compiler, !removeOnlyLocals,\n                preserveAnonymousFunctionNames, true));\n      }\n      return passes;\n    }\n  };",
        "begin_line": 1391,
        "end_line": 1418,
        "comment": "\n   * Optimizes unused function arguments, unused return values, and inlines\n   * constant parameters. Also runs RemoveUnusedVars.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markPureFunctions",
        "snippet": "  final PassFactory markPureFunctions =\n      new PassFactory(\"markPureFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new PureFunctionIdentifier.Driver(\n          compiler, options.debugFunctionSideEffectsPath, false);\n    }\n  };",
        "begin_line": 1424,
        "end_line": 1431,
        "comment": "\n   * Look for function calls that are pure, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markNoSideEffectCalls",
        "snippet": "  final PassFactory markNoSideEffectCalls =\n      new PassFactory(\"markNoSideEffectCalls\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MarkNoSideEffectCalls(compiler);\n    }\n  };",
        "begin_line": 1437,
        "end_line": 1443,
        "comment": "\n   * Look for function calls that have no side effects, and annotate them\n   * that way.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineVariables",
        "snippet": "  final PassFactory inlineVariables =\n      new PassFactory(\"inlineVariables\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      if (isInliningForbidden()) {\n        // In old renaming schemes, inlining a variable can change whether\n        // or not a property is renamed. This is bad, and those old renaming\n        // schemes need to die.\n        return new ErrorPass(compiler, CANNOT_USE_PROTOTYPE_AND_VAR);\n      } else {\n        InlineVariables.Mode mode;\n        if (options.inlineVariables) {\n          mode = InlineVariables.Mode.ALL;\n        } else if (options.inlineLocalVariables) {\n          mode = InlineVariables.Mode.LOCALS_ONLY;\n        } else {\n          throw new IllegalStateException(\"No variable inlining option set.\");\n        }\n\n        return new InlineVariables(compiler, mode, true);\n      }\n    }\n  };",
        "begin_line": 1446,
        "end_line": 1468,
        "comment": " Inlines variables heuristically. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineConstants",
        "snippet": "  final PassFactory inlineConstants =\n      new PassFactory(\"inlineConstants\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new InlineVariables(\n          compiler, InlineVariables.Mode.CONSTANTS_ONLY, true);\n    }\n  };",
        "begin_line": 1471,
        "end_line": 1478,
        "comment": " Inlines variables that are marked as constants. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.minimizeExitPoints",
        "snippet": "  final PassFactory minimizeExitPoints =\n      new PassFactory(\"minimizeExitPoints\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MinimizeExitPoints(compiler);\n    }\n  };",
        "begin_line": 1483,
        "end_line": 1489,
        "comment": "\n   * Perform local control flow optimizations.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnreachableCode",
        "snippet": "  final PassFactory removeUnreachableCode =\n      new PassFactory(\"removeUnreachableCode\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new UnreachableCodeElimination(compiler, true);\n    }\n  };",
        "begin_line": 1494,
        "end_line": 1500,
        "comment": "\n   * Use data flow analysis to remove dead branches.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedPrototypeProperties",
        "snippet": "  final PassFactory removeUnusedPrototypeProperties =\n      new PassFactory(\"removeUnusedPrototypeProperties\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RemoveUnusedPrototypeProperties(\n          compiler, options.removeUnusedPrototypePropertiesInExterns,\n          !options.removeUnusedVars);\n    }\n  };",
        "begin_line": 1505,
        "end_line": 1513,
        "comment": "\n   * Remove prototype properties that do not appear to be used.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.smartNamePass",
        "snippet": "  final PassFactory smartNamePass =\n      new PassFactory(\"smartNamePass\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n\n          String reportPath = options.reportPath;\n          if (reportPath != null) {\n            try {\n              Files.write(na.getHtmlReport(), new File(reportPath),\n                  Charsets.UTF_8);\n            } catch (IOException e) {\n              compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));\n            }\n          }\n\n          if (options.smartNameRemoval) {\n            na.removeUnreferenced();\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 1519,
        "end_line": 1545,
        "comment": "\n   * Process smart name processing - removes unused classes and does referencing\n   * starting with minimum set of names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.smartNamePass2",
        "snippet": "  final PassFactory smartNamePass2 =\n      new PassFactory(\"smartNamePass\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node root) {\n          NameAnalyzer na = new NameAnalyzer(compiler, false);\n          na.process(externs, root);\n          na.removeUnreferenced();\n        }\n      };\n    }\n  };",
        "begin_line": 1551,
        "end_line": 1564,
        "comment": "\n   * Process smart name processing - removes unused classes and does referencing\n   * starting with minimum set of names.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineSimpleMethods",
        "snippet": "  final PassFactory inlineSimpleMethods =\n      new PassFactory(\"inlineSimpleMethods\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new InlineSimpleMethods(compiler);\n    }\n  };",
        "begin_line": 1567,
        "end_line": 1573,
        "comment": " Inlines simple methods, like getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.deadAssignmentsElimination",
        "snippet": "  final PassFactory deadAssignmentsElimination =\n      new PassFactory(\"deadAssignmentsElimination\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new DeadAssignmentsElimination(compiler);\n    }\n  };",
        "begin_line": 1576,
        "end_line": 1582,
        "comment": " Kills dead assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.inlineFunctions",
        "snippet": "  final PassFactory inlineFunctions =\n      new PassFactory(\"inlineFunctions\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      boolean enableBlockInlining = !isInliningForbidden();\n      return new InlineFunctions(\n          compiler,\n          compiler.getUniqueNameIdSupplier(),\n          options.inlineFunctions,\n          options.inlineLocalFunctions,\n          enableBlockInlining,\n          options.isAssumeStrictThis()\n              || options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT);\n    }\n  };",
        "begin_line": 1585,
        "end_line": 1599,
        "comment": " Inlines function calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.removeUnusedVars",
        "snippet": "  final PassFactory removeUnusedVars =\n      new PassFactory(\"removeUnusedVars\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      boolean removeOnlyLocals = options.removeUnusedLocalVars\n          && !options.removeUnusedVars;\n      boolean preserveAnonymousFunctionNames =\n          options.anonymousFunctionNaming != AnonymousFunctionNamingPolicy.OFF;\n      return new RemoveUnusedVars(\n          compiler,\n          !removeOnlyLocals,\n          preserveAnonymousFunctionNames,\n          false);\n    }\n  };",
        "begin_line": 1602,
        "end_line": 1616,
        "comment": " Removes variables that are never used. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleCodeMotion",
        "snippet": "  final PassFactory crossModuleCodeMotion =\n      new PassFactory(\"crossModuleCodeMotion\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CrossModuleCodeMotion(compiler, compiler.getModuleGraph());\n    }\n  };",
        "begin_line": 1621,
        "end_line": 1627,
        "comment": "\n   * Move global symbols to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.crossModuleMethodMotion",
        "snippet": "  final PassFactory crossModuleMethodMotion =\n      new PassFactory(\"crossModuleMethodMotion\", false) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CrossModuleMethodMotion(\n          compiler, crossModuleIdGenerator,\n          // Only move properties in externs if we're not treating\n          // them as exports.\n          options.removeUnusedPrototypePropertiesInExterns);\n    }\n  };",
        "begin_line": 1632,
        "end_line": 1642,
        "comment": "\n   * Move methods to a deeper common module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.specializeInitialModule",
        "snippet": "  final PassFactory specializeInitialModule =\n      new PassFactory(\"specializeInitialModule\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new SpecializeModule(compiler, devirtualizePrototypeMethods,\n          inlineFunctions, removeUnusedPrototypeProperties);\n    }\n  };",
        "begin_line": 1647,
        "end_line": 1654,
        "comment": "\n   * Specialize the initial module at the cost of later modules\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.flowSensitiveInlineVariables",
        "snippet": "  final PassFactory flowSensitiveInlineVariables =\n      new PassFactory(\"flowSensitiveInlineVariables\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new FlowSensitiveInlineVariables(compiler);\n    }\n  };",
        "begin_line": 1657,
        "end_line": 1663,
        "comment": " A data-flow based variable inliner. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.coalesceVariableNames",
        "snippet": "  final PassFactory coalesceVariableNames =\n      new PassFactory(\"coalesceVariableNames\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CoalesceVariableNames(compiler, options.generatePseudoNames);\n    }\n  };",
        "begin_line": 1666,
        "end_line": 1672,
        "comment": " Uses register-allocation algorithms to use fewer variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.exploitAssign",
        "snippet": "  final PassFactory exploitAssign =\n      new PassFactory(\"expointAssign\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new PeepholeOptimizationsPass(compiler,\n          new ExploitAssigns());\n    }\n  };",
        "begin_line": 1678,
        "end_line": 1685,
        "comment": "\n   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n   * {@code var x,y;}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseVariableDeclarations",
        "snippet": "  final PassFactory collapseVariableDeclarations =\n      new PassFactory(\"collapseVariableDeclarations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CollapseVariableDeclarations(compiler);\n    }\n  };",
        "begin_line": 1691,
        "end_line": 1697,
        "comment": "\n   * Some simple, local collapses (e.g., {@code var x; var y;} becomes\n   * {@code var x,y;}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.groupVariableDeclarations",
        "snippet": "  final PassFactory groupVariableDeclarations =\n      new PassFactory(\"groupVariableDeclarations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new GroupVariableDeclarations(compiler);\n    }\n  };",
        "begin_line": 1702,
        "end_line": 1708,
        "comment": "\n   * Simple global collapses of variable declarations.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.extractPrototypeMemberDeclarations",
        "snippet": "  final PassFactory extractPrototypeMemberDeclarations =\n      new PassFactory(\"extractPrototypeMemberDeclarations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ExtractPrototypeMemberDeclarations(compiler);\n    }\n  };",
        "begin_line": 1713,
        "end_line": 1719,
        "comment": "\n   * Extracts common sub-expressions.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.rewriteFunctionExpressions",
        "snippet": "  final PassFactory rewriteFunctionExpressions =\n      new PassFactory(\"rewriteFunctionExpressions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new FunctionRewriter(compiler);\n    }\n  };",
        "begin_line": 1722,
        "end_line": 1728,
        "comment": " Rewrites common function definitions to be more compact. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.collapseAnonymousFunctions",
        "snippet": "  final PassFactory collapseAnonymousFunctions =\n      new PassFactory(\"collapseAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new CollapseAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 1731,
        "end_line": 1737,
        "comment": " Collapses functions to not use the VAR keyword. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.moveFunctionDeclarations",
        "snippet": "  final PassFactory moveFunctionDeclarations =\n      new PassFactory(\"moveFunctionDeclarations\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new MoveFunctionDeclarations(compiler);\n    }\n  };",
        "begin_line": 1740,
        "end_line": 1746,
        "comment": " Moves function declarations to the top, to simulate actual hoisting. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameUnmappedAnonymousFunctions",
        "snippet": "  final PassFactory nameUnmappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new NameAnonymousFunctions(compiler);\n    }\n  };",
        "begin_line": 1748,
        "end_line": 1754,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.nameMappedAnonymousFunctions",
        "snippet": "  final PassFactory nameMappedAnonymousFunctions =\n      new PassFactory(\"nameAnonymousFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          NameAnonymousFunctionsMapped naf =\n              new NameAnonymousFunctionsMapped(compiler);\n          naf.process(externs, root);\n          anonymousFunctionNameMap = naf.getFunctionMap();\n        }\n      };\n    }\n  };",
        "begin_line": 1756,
        "end_line": 1769,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.operaCompoundAssignFix",
        "snippet": "  final PassFactory operaCompoundAssignFix =\n      new PassFactory(\"operaCompoundAssignFix\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new OperaCompoundAssignFix(compiler);\n    }\n  };",
        "begin_line": 1771,
        "end_line": 1777,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasExternals",
        "snippet": "  final PassFactory aliasExternals =\n      new PassFactory(\"aliasExternals\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AliasExternals(compiler, compiler.getModuleGraph(),\n          options.unaliasableGlobals, options.aliasableGlobals);\n    }\n  };",
        "begin_line": 1780,
        "end_line": 1787,
        "comment": " Alias external symbols. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasStrings",
        "snippet": "  final PassFactory aliasStrings =\n      new PassFactory(\"aliasStrings\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AliasStrings(\n          compiler,\n          compiler.getModuleGraph(),\n          options.aliasAllStrings ? null : options.aliasableStrings,\n          options.aliasStringsBlacklist,\n          options.outputJsStringUsage);\n    }\n  };",
        "begin_line": 1793,
        "end_line": 1804,
        "comment": "\n   * Alias string literals with global variables, to avoid creating lots of\n   * transient objects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.aliasKeywords",
        "snippet": "  final PassFactory aliasKeywords =\n      new PassFactory(\"aliasKeywords\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AliasKeywords(compiler);\n    }\n  };",
        "begin_line": 1807,
        "end_line": 1813,
        "comment": " Aliases common keywords (true, false) "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.objectPropertyStringPostprocess",
        "snippet": "  final PassFactory objectPropertyStringPostprocess =\n      new PassFactory(\"ObjectPropertyStringPostprocess\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ObjectPropertyStringPostprocess(compiler);\n    }\n  };",
        "begin_line": 1816,
        "end_line": 1822,
        "comment": " Handling for the ObjectPropertyString primitive. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.ambiguateProperties",
        "snippet": "  final PassFactory ambiguateProperties =\n      new PassFactory(\"ambiguateProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AmbiguateProperties(\n          compiler, options.anonymousFunctionNaming.getReservedCharacters());\n    }\n  };",
        "begin_line": 1828,
        "end_line": 1835,
        "comment": "\n   * Renames properties so that the two properties that never appear on\n   * the same object get the same name.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.markUnnormalized",
        "snippet": "  final PassFactory markUnnormalized =\n      new PassFactory(\"markUnnormalized\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          compiler.setLifeCycleStage(LifeCycleStage.RAW);\n        }\n      };\n    }\n  };",
        "begin_line": 1840,
        "end_line": 1850,
        "comment": "\n   * Mark the point at which the normalized AST assumptions no longer hold.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.denormalize",
        "snippet": "  final PassFactory denormalize =\n      new PassFactory(\"denormalize\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new Denormalize(compiler);\n    }\n  };",
        "begin_line": 1853,
        "end_line": 1859,
        "comment": " Denormalize the AST for code generation. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.invertContextualRenaming",
        "snippet": "  final PassFactory invertContextualRenaming =\n      new PassFactory(\"invertNames\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return MakeDeclaredNamesUnique.getContextualRenameInverter(compiler);\n    }\n  };",
        "begin_line": 1862,
        "end_line": 1868,
        "comment": " Inverting name normalization. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameProperties",
        "snippet": "  final PassFactory renameProperties =\n      new PassFactory(\"renameProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      VariableMap map = null;\n      if (options.inputPropertyMapSerialized != null) {\n        try {\n          map = VariableMap.fromBytes(options.inputPropertyMapSerialized);\n        } catch (ParseException e) {\n          return new ErrorPass(compiler,\n              JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));\n        }\n      }\n\n      final VariableMap prevPropertyMap = map;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          propertyMap = runPropertyRenaming(\n              compiler, prevPropertyMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 1873,
        "end_line": 1895,
        "comment": "\n   * Renames properties.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameVars",
        "snippet": "  final PassFactory renameVars =\n      new PassFactory(\"renameVars\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      VariableMap map = null;\n      if (options.inputVariableMapSerialized != null) {\n        try {\n          map = VariableMap.fromBytes(options.inputVariableMapSerialized);\n        } catch (ParseException e) {\n          return new ErrorPass(compiler,\n              JSError.make(INPUT_MAP_VAR_PARSE, e.getMessage()));\n        }\n      }\n\n      final VariableMap prevVariableMap = map;\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          variableMap = runVariableRenaming(\n              compiler, prevVariableMap, externs, root);\n        }\n      };\n    }\n  };",
        "begin_line": 1929,
        "end_line": 1951,
        "comment": " Renames variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.renameLabels",
        "snippet": "  final PassFactory renameLabels =\n      new PassFactory(\"renameLabels\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new RenameLabels(compiler);\n    }\n  };",
        "begin_line": 1975,
        "end_line": 1981,
        "comment": " Renames labels "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.convertToDottedProperties",
        "snippet": "  final PassFactory convertToDottedProperties =\n      new PassFactory(\"convertToDottedProperties\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new ConvertToDottedProperties(compiler);\n    }\n  };",
        "begin_line": 1984,
        "end_line": 1990,
        "comment": " Convert bracket access to dot access "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.sanityCheckAst",
        "snippet": "  final PassFactory sanityCheckAst =\n      new PassFactory(\"sanityCheckAst\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new AstValidator();\n    }\n  };",
        "begin_line": 1993,
        "end_line": 1999,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.sanityCheckVars",
        "snippet": "  final PassFactory sanityCheckVars =\n      new PassFactory(\"sanityCheckVars\", true) {\n    @Override\n    protected CompilerPass createInternal(AbstractCompiler compiler) {\n      return new VarCheck(compiler, true);\n    }\n  };",
        "begin_line": 2002,
        "end_line": 2008,
        "comment": " Checks that all variables are defined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.instrumentFunctions",
        "snippet": "  final PassFactory instrumentFunctions =\n      new PassFactory(\"instrumentFunctions\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override public void process(Node externs, Node root) {\n          try {\n            FileReader templateFile =\n                new FileReader(options.instrumentationTemplate);\n            (new InstrumentFunctions(\n                compiler, functionNames,\n                options.instrumentationTemplate,\n                options.appNameStr,\n                templateFile)).process(externs, root);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(AbstractCompiler.READ_ERROR,\n                    options.instrumentationTemplate));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2011,
        "end_line": 2033,
        "comment": " Adds instrumentations according to an instrumentation template. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.printNameReferenceGraph",
        "snippet": "  final PassFactory printNameReferenceGraph =\n    new PassFactory(\"printNameReferenceGraph\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          NameReferenceGraphConstruction gc =\n              new NameReferenceGraphConstruction(compiler);\n          gc.process(externs, jsRoot);\n          String graphFileName = options.nameReferenceGraphPath;\n          try {\n            Files.write(DotFormatter.toDot(gc.getNameReferenceGraph()),\n                new File(graphFileName),\n                Charsets.UTF_8);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(\n                    NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2104,
        "end_line": 2127,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultPassConfig",
        "src_path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "signature": "com.google.javascript.jscomp.DefaultPassConfig.printNameReferenceReport",
        "snippet": "  final PassFactory printNameReferenceReport =\n      new PassFactory(\"printNameReferenceReport\", true) {\n    @Override\n    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n      return new CompilerPass() {\n        @Override\n        public void process(Node externs, Node jsRoot) {\n          NameReferenceGraphConstruction gc =\n              new NameReferenceGraphConstruction(compiler);\n          String reportFileName = options.nameReferenceReportPath;\n          try {\n            NameReferenceGraphReport report =\n                new NameReferenceGraphReport(gc.getNameReferenceGraph());\n            Files.write(report.getHtmlReport(),\n                new File(reportFileName),\n                Charsets.UTF_8);\n          } catch (IOException e) {\n            compiler.report(\n                JSError.make(\n                    NAME_REF_REPORT_FILE_ERROR,\n                    e.getMessage(),\n                    reportFileName));\n          }\n        }\n      };\n    }\n  };",
        "begin_line": 2129,
        "end_line": 2155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.className",
        "snippet": "  private final String className;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.properties",
        "snippet": "  private final Map<String, Property> properties;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.nativeType",
        "snippet": "  private final boolean nativeType;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.implicitPrototypeFallback",
        "snippet": "  private ObjectType implicitPrototypeFallback;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " some subclasses override this to do special resolution handling."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.prettyPrint",
        "snippet": "  private boolean prettyPrint = false;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " by printing all properties."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.PrototypeObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",
        "snippet": "  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 497,
        "end_line": 497,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.name",
        "snippet": "    private String name;",
        "begin_line": 502,
        "end_line": 502,
        "comment": "\n     * Property's name.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.type",
        "snippet": "    private JSType type;",
        "begin_line": 507,
        "end_line": 507,
        "comment": "\n     * Property's type.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.inferred",
        "snippet": "    private final boolean inferred;",
        "begin_line": 512,
        "end_line": 512,
        "comment": "\n     * Whether the property's type is inferred.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.propertyNode",
        "snippet": "    private final Node propertyNode;",
        "begin_line": 518,
        "end_line": 518,
        "comment": "\n     * The node corresponding to this property, e.g., a GETPROP node that\n     * declares this property.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.Property",
        "src_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.Property.docInfo",
        "snippet": "    private JSDocInfo docInfo = null;",
        "begin_line": 521,
        "end_line": 521,
        "comment": "  The JSDocInfo for this property. "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionPrototypeType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionPrototypeType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionPrototypeType.ownerFunction",
        "snippet": "  private final FunctionType ownerFunction;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRewriter",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.FunctionRewriter.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionRewriter",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.FunctionRewriter.SAVINGS_THRESHOLD",
        "snippet": "  private static final int SAVINGS_THRESHOLD = 16;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Selected arbitrarily."
    },
    {
        "class_name": "com.google.javascript.jscomp.Reduction",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.Reduction.parent",
        "snippet": "    private final Node parent;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reduction",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.Reduction.oldChild",
        "snippet": "    private final Node oldChild;",
        "begin_line": 121,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reduction",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.Reduction.newChild",
        "snippet": "    private final Node newChild;",
        "begin_line": 122,
        "end_line": 122,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReductionGatherer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReductionGatherer.reducers",
        "snippet": "    private final List<Reducer> reducers;",
        "begin_line": 153,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReductionGatherer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReductionGatherer.reductions",
        "snippet": "    private final Multimap<Reducer, Reduction> reductions;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.EmptyFunctionReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.EmptyFunctionReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_emptyFn\";",
        "begin_line": 233,
        "end_line": 233,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.EmptyFunctionReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.EmptyFunctionReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function() {}\" +\n        \"}\";",
        "begin_line": 234,
        "end_line": 237,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IdentityReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.IdentityReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_identityFn\";",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IdentityReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.IdentityReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"() {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n             \"return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
        "begin_line": 290,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReturnConstantReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReturnConstantReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_returnArg\";",
        "begin_line": 349,
        "end_line": 349,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReturnConstantReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.ReturnConstantReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME +\n        \"(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"  return function() {return \" + FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
        "begin_line": 350,
        "end_line": 354,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.GetterReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_get\";",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.GetterReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function() {return this[\" + FACTORY_METHOD_NAME + \"_name]}\" +\n        \"}\";",
        "begin_line": 404,
        "end_line": 408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.SetterReducer.FACTORY_METHOD_NAME",
        "snippet": "    static final String FACTORY_METHOD_NAME = \"JSCompiler_set\";",
        "begin_line": 463,
        "end_line": 463,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SetterReducer",
        "src_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
        "signature": "com.google.javascript.jscomp.SetterReducer.HELPER_SOURCE",
        "snippet": "    static final String HELPER_SOURCE =\n        \"function \" + FACTORY_METHOD_NAME + \"(\" +\n        FACTORY_METHOD_NAME + \"_name) {\" +\n        \"  return function(\" + FACTORY_METHOD_NAME + \"_value) {\" +\n        \"this[\" + FACTORY_METHOD_NAME + \"_name] = \" +\n        FACTORY_METHOD_NAME + \"_value}\" +\n        \"}\";",
        "begin_line": 464,
        "end_line": 470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SuppressDocWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.SuppressDocWarningsGuard.suppressors",
        "snippet": "  private final Map<String, DiagnosticGroupWarningsGuard> suppressors =\n      Maps.newHashMap();",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Warnings guards for each suppressable warnings group, indexed by name. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.SCOPING_METHOD_NAME",
        "snippet": "  static final String SCOPING_METHOD_NAME = \"goog.scope\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": " Name used to denote an scoped function block used for aliasing. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.transformationHandler",
        "snippet": "  private final AliasTransformationHandler transformationHandler;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USED_IMPROPERLY",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USED_IMPROPERLY\",\n      \"The call to goog.scope must be alone in a single statement.\");",
        "begin_line": 56,
        "end_line": 58,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_HAS_BAD_PARAMETERS",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =\n      DiagnosticType.error(\n          \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\",\n          \"The call to goog.scope must take only a single parameter.  It must\" +\n              \" be an anonymous function that itself takes no parameters.\");",
        "begin_line": 60,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_REFERENCES_THIS",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_REFERENCES_THIS\",\n      \"The body of a goog.scope function cannot reference 'this'.\");",
        "begin_line": 66,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_RETURN",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_RETURN\",\n      \"The body of a goog.scope function cannot use 'return'.\");",
        "begin_line": 70,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_USES_THROW",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_USES_THROW\",\n      \"The body of a goog.scope function cannot use 'throw'.\");",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_ALIAS_REDEFINED",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\",\n      \"The alias {0} is assigned a value more than once.\");",
        "begin_line": 78,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ScopedAliases",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL",
        "snippet": "  static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(\n      \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n      \"The local variable {0} is in a goog.scope and is not an alias.\");",
        "begin_line": 82,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedNode.aliasReference",
        "snippet": "    private final Node aliasReference;",
        "begin_line": 143,
        "end_line": 143,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedNode.aliasDefinition",
        "snippet": "    private final Node aliasDefinition;",
        "begin_line": 145,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedTypeNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedTypeNode.aliasReference",
        "snippet": "    private final Node aliasReference;",
        "begin_line": 159,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasedTypeNode",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.AliasedTypeNode.correctedType",
        "snippet": "    private final String correctedType;",
        "begin_line": 161,
        "end_line": 161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliasDefinitions",
        "snippet": "    private final List<Node> aliasDefinitions = Lists.newArrayList();",
        "begin_line": 176,
        "end_line": 176,
        "comment": " The job of this class is to collect these three data sets."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.scopeCalls",
        "snippet": "    private final List<Node> scopeCalls = Lists.newArrayList();",
        "begin_line": 178,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliasUsages",
        "snippet": "    private final List<AliasUsage> aliasUsages = Lists.newArrayList();",
        "begin_line": 180,
        "end_line": 180,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.aliases",
        "snippet": "    private final Map<String, Var> aliases = Maps.newHashMap();",
        "begin_line": 183,
        "end_line": 183,
        "comment": " This map is temporary and cleared for each scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.hasErrors",
        "snippet": "    private boolean hasErrors = false;",
        "begin_line": 185,
        "end_line": 185,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Traversal",
        "src_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "signature": "com.google.javascript.jscomp.Traversal.transformation",
        "snippet": "    private AliasTransformation transformation = null;",
        "begin_line": 187,
        "end_line": 187,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.InstanceObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/InstanceObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.InstanceObjectType.constructor",
        "snippet": "  private final FunctionType constructor;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerpt",
        "snippet": "  private SourceExcerpt excerpt;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LightweightMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.LightweightMessageFormatter.excerptFormatter",
        "snippet": "  private static final ExcerptFormatter excerptFormatter =\n      new LineNumberingFormatter();",
        "begin_line": 32,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.OBJECTLIT_EXPECTED",
        "snippet": "  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(\n      \"JSC_REFLECT_OBJECTLIT_EXPECTED\",\n      \"Object literal expected as second argument\");",
        "begin_line": 42,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
        "signature": "com.google.javascript.jscomp.ClosureCodingConvention.propertyTestFunctions",
        "snippet": "  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n      \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\",\n      \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\",\n      \"goog.isFunction\", \"goog.isArray\", \"goog.isObject\");",
        "begin_line": 275,
        "end_line": 278,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeOptimizationsPass",
        "src_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
        "signature": "com.google.javascript.jscomp.PeepholeOptimizationsPass.peepholeOptimizations",
        "snippet": "  private final AbstractPeepholeOptimization[] peepholeOptimizations;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " modify something."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 7L;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageIn",
        "snippet": "  private LanguageMode languageIn;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n   * The JavaScript language version accepted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.languageOut",
        "snippet": "  private LanguageMode languageOut;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n   * The JavaScript language version accepted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.acceptConstKeyword",
        "snippet": "  boolean acceptConstKeyword;",
        "begin_line": 55,
        "end_line": 55,
        "comment": "\n   * Whether the compiler handles `const' keyword or not.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.assumeStrictThis",
        "snippet": "  private boolean assumeStrictThis;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n   * Whether the compiler should assume that a function's \"this\" value\n   * never needs coercion (for example in non-strict \"null\" or \"undefined\" will\n   * be coerced to the global \"this\" and primitives to objects).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ideMode",
        "snippet": "  public boolean ideMode;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n   * Configures the compiler for use as an IDE backend.  In this mode:\n   * <ul>\n   *  <li>No optimization passes will run.</li>\n   *  <li>The last time custom passes are invoked is\n   *      {@link CustomPassExecutionTime#BEFORE_OPTIMIZATIONS}</li>\n   *  <li>The compiler will always try to process all inputs fully, even\n   *      if it encounters errors.</li>\n   *  <li>The compiler may record more information than is strictly\n   *      needed for codegen.</li>\n   * </ul>\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypes",
        "snippet": "  boolean inferTypes;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n   * Even if checkTypes is disabled, clients might want to still infer types.\n   * This is mostly used when ideMode is enabled.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.skipAllPasses",
        "snippet": "  boolean skipAllPasses;",
        "begin_line": 89,
        "end_line": 89,
        "comment": "\n   * Configures the compiler to skip as many passes as possible.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameAnonymousFunctionsOnly",
        "snippet": "  boolean nameAnonymousFunctionsOnly;",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n   * If true, name anonymous functions only. All others passes will be skipped.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devMode",
        "snippet": "  DevMode devMode;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n   * Configures the compiler to run expensive sanity checks after\n   * every pass. Only intended for internal development.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.manageClosureDependencies",
        "snippet": "  boolean manageClosureDependencies = false;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.manageClosureDependenciesEntryPoints",
        "snippet": "  List<String> manageClosureDependenciesEntryPoints = ImmutableList.of();",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.messageBundle",
        "snippet": "  public transient MessageBundle messageBundle = null;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " Transient so that clients don't have to implement Serializable."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSymbols",
        "snippet": "  public boolean checkSymbols;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Checks that all symbols are defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkShadowVars",
        "snippet": "  public CheckLevel checkShadowVars;",
        "begin_line": 124,
        "end_line": 124,
        "comment": "\n   * Checks that all variables with the @noshadow attribute are\n   * never shadowed.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aggressiveVarCheck",
        "snippet": "  public CheckLevel aggressiveVarCheck;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Checks for suspicious variable definitions and undefined variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkFunctions",
        "snippet": "  public CheckLevel checkFunctions;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " Checks function arity "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMethods",
        "snippet": "  public CheckLevel checkMethods;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Checks method arity "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkDuplicateMessages",
        "snippet": "  public boolean checkDuplicateMessages;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Makes sure no duplicate messages "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.allowLegacyJsMessages",
        "snippet": "  public boolean allowLegacyJsMessages;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " Allows old deprecated js message style "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.strictMessageReplacement",
        "snippet": "  public boolean strictMessageReplacement;",
        "begin_line": 145,
        "end_line": 145,
        "comment": "\n   * Whether we should throw an exception in case if the message absent from a\n   * bundle.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkSuspiciousCode",
        "snippet": "  public boolean checkSuspiciousCode;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " Checks for suspicious statements that have no effect "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkControlStructures",
        "snippet": "  public boolean checkControlStructures;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " Checks for invalid control structures "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypes",
        "snippet": "  public boolean checkTypes;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " Checks types on expressions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tightenTypes",
        "snippet": "  public boolean tightenTypes;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " Tightens types based on a global analysis. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inferTypesInGlobalScope",
        "snippet": "  public boolean inferTypesInGlobalScope;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " Runs a flow sensitive type inference in the global scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkTypedPropertyCalls",
        "snippet": "  public boolean checkTypedPropertyCalls;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " Checks for inexistant property calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportMissingOverride",
        "snippet": "  public CheckLevel reportMissingOverride;",
        "begin_line": 171,
        "end_line": 171,
        "comment": "\n   * Flags a warning if a property is missing the @override annotation, but it\n   * overrides a base class property.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportUnknownTypes",
        "snippet": "  public CheckLevel reportUnknownTypes;",
        "begin_line": 174,
        "end_line": 174,
        "comment": " Flags a warning for every node whose type could not be determined. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkRequires",
        "snippet": "  public CheckLevel checkRequires;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " Checks for missing goog.require() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkProvides",
        "snippet": "  public CheckLevel checkProvides;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Checks for missing goog.provides() calls *"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalNamesLevel",
        "snippet": "  public CheckLevel checkGlobalNamesLevel;",
        "begin_line": 186,
        "end_line": 186,
        "comment": "\n   * Checks the integrity of references to qualified global names.\n   * (e.g. \"a.b\")\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.brokenClosureRequiresLevel",
        "snippet": "  public CheckLevel brokenClosureRequiresLevel;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Sets the check level for bad Closure require calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkGlobalThisLevel",
        "snippet": "  public CheckLevel checkGlobalThisLevel;",
        "begin_line": 199,
        "end_line": 199,
        "comment": "\n   * Checks for certain uses of the {@code this} keyword that are considered\n   * unsafe because they are likely to reference the global {@code this}\n   * object unintentionally.\n   *\n   * If this is off, but collapseProperties is on, then the compiler will\n   * usually ignore you and run this check anyways.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameLevel",
        "snippet": "  public CheckLevel checkMissingGetCssNameLevel;",
        "begin_line": 205,
        "end_line": 205,
        "comment": "\n   * Checks that certain string literals only appear in strings used as\n   * goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingGetCssNameBlacklist",
        "snippet": "  public String checkMissingGetCssNameBlacklist;",
        "begin_line": 210,
        "end_line": 210,
        "comment": "\n   * Regex of string literals that may only appear in goog.getCssName arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkEs5Strict",
        "snippet": "  public boolean checkEs5Strict;",
        "begin_line": 214,
        "end_line": 214,
        "comment": " TODO(johnlenz): remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkCaja",
        "snippet": "  public boolean checkCaja;",
        "begin_line": 217,
        "end_line": 217,
        "comment": " Checks that the synctactic restrictions of Caja are met. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.foldConstants",
        "snippet": "  public boolean foldConstants;",
        "begin_line": 224,
        "end_line": 224,
        "comment": " Folds constants (e.g. (2 + 3) to 5) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.deadAssignmentElimination",
        "snippet": "  public boolean deadAssignmentElimination;",
        "begin_line": 227,
        "end_line": 227,
        "comment": " Remove assignments to values that can not be referenced "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineConstantVars",
        "snippet": "  public boolean inlineConstantVars;",
        "begin_line": 230,
        "end_line": 230,
        "comment": " Inlines constants (symbols that are all CAPS) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineFunctions",
        "snippet": "  public boolean inlineFunctions;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " Inlines short functions "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.decomposeExpressions",
        "snippet": "  public boolean decomposeExpressions;",
        "begin_line": 236,
        "end_line": 236,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineAnonymousFunctionExpressions",
        "snippet": "  public boolean inlineAnonymousFunctionExpressions;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalFunctions",
        "snippet": "  public boolean inlineLocalFunctions;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " Enhanced function inlining "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleCodeMotion",
        "snippet": "  public boolean crossModuleCodeMotion;",
        "begin_line": 245,
        "end_line": 245,
        "comment": " Move code to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.coalesceVariableNames",
        "snippet": "  public boolean coalesceVariableNames;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " Merge two variables together as one. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.crossModuleMethodMotion",
        "snippet": "  public boolean crossModuleMethodMotion;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " Move methds to a deeper module "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineGetters",
        "snippet": "  public boolean inlineGetters;",
        "begin_line": 254,
        "end_line": 254,
        "comment": " Inlines trivial getters "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineVariables",
        "snippet": "  public boolean inlineVariables;",
        "begin_line": 257,
        "end_line": 257,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inlineLocalVariables",
        "snippet": "  public boolean inlineLocalVariables;",
        "begin_line": 260,
        "end_line": 260,
        "comment": " Inlines variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.flowSensitiveInlineVariables",
        "snippet": "  public boolean flowSensitiveInlineVariables;",
        "begin_line": 264,
        "end_line": 264,
        "comment": " Remove this."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.smartNameRemoval",
        "snippet": "  public boolean smartNameRemoval;",
        "begin_line": 267,
        "end_line": 267,
        "comment": " Removes code associated with unused global names "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeDeadCode",
        "snippet": "  public boolean removeDeadCode;",
        "begin_line": 270,
        "end_line": 270,
        "comment": " Removes code that will never execute "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkUnreachableCode",
        "snippet": "  public CheckLevel checkUnreachableCode;",
        "begin_line": 273,
        "end_line": 273,
        "comment": " Checks for unreachable code "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.checkMissingReturn",
        "snippet": "  public CheckLevel checkMissingReturn;",
        "begin_line": 276,
        "end_line": 276,
        "comment": " Checks for missing return statements "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.extractPrototypeMemberDeclarations",
        "snippet": "  public boolean extractPrototypeMemberDeclarations;",
        "begin_line": 279,
        "end_line": 279,
        "comment": " Extracts common prototype member declarations "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeEmptyFunctions",
        "snippet": "  public boolean removeEmptyFunctions;",
        "begin_line": 282,
        "end_line": 282,
        "comment": " Removes functions that have no body "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypeProperties",
        "snippet": "  public boolean removeUnusedPrototypeProperties;",
        "begin_line": 285,
        "end_line": 285,
        "comment": " Removes unused member prototypes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedPrototypePropertiesInExterns",
        "snippet": "  public boolean removeUnusedPrototypePropertiesInExterns;",
        "begin_line": 288,
        "end_line": 288,
        "comment": " Tells AnalyzePrototypeProperties it can remove externed props. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedVars",
        "snippet": "  public boolean removeUnusedVars;",
        "begin_line": 291,
        "end_line": 291,
        "comment": " Removes unused variables "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeUnusedLocalVars",
        "snippet": "  public boolean removeUnusedLocalVars;",
        "begin_line": 294,
        "end_line": 294,
        "comment": " Removes unused variables in local scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasExternals",
        "snippet": "  public boolean aliasExternals;",
        "begin_line": 297,
        "end_line": 297,
        "comment": " Adds variable aliases for externals to reduce code size "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableGlobals",
        "snippet": "  public String aliasableGlobals;",
        "begin_line": 303,
        "end_line": 303,
        "comment": "\n   * If set to a non-empty string, then during an alias externals pass only\n   * externals with these names will be considered for aliasing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.unaliasableGlobals",
        "snippet": "  public String unaliasableGlobals;",
        "begin_line": 309,
        "end_line": 309,
        "comment": "\n   * Additional globals that can not be aliased since they may be undefined or\n   * can cause errors.  Comma separated list of symbols.  e.g. \"foo,bar\"\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseVariableDeclarations",
        "snippet": "  public boolean collapseVariableDeclarations;",
        "begin_line": 312,
        "end_line": 312,
        "comment": " Collapses multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.groupVariableDeclarations",
        "snippet": "  public boolean groupVariableDeclarations;",
        "begin_line": 315,
        "end_line": 315,
        "comment": " Group multiple variable declarations into one "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseAnonymousFunctions",
        "snippet": "  public boolean collapseAnonymousFunctions;",
        "begin_line": 321,
        "end_line": 321,
        "comment": "\n   * Collapses anonymous function declarations into named function\n   * declarations\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasableStrings",
        "snippet": "  public Set<String> aliasableStrings;",
        "begin_line": 328,
        "end_line": 328,
        "comment": "\n   * If set to a non-empty set, those strings literals will be aliased to a\n   * single global instance per string, to avoid creating more objects than\n   * necessary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasStringsBlacklist",
        "snippet": "  public String aliasStringsBlacklist;",
        "begin_line": 335,
        "end_line": 335,
        "comment": "\n   * A blacklist in the form of a regular expression to block strings that\n   * contains certain words from being aliased.\n   * If the value is the empty string, no words are blacklisted.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasAllStrings",
        "snippet": "  public boolean aliasAllStrings;",
        "begin_line": 342,
        "end_line": 342,
        "comment": "\n   * Aliases all string literals to global instances, to avoid creating more\n   * objects than necessary (if true, overrides any set of strings passed in\n   * to aliasableStrings)\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputJsStringUsage",
        "snippet": "  boolean outputJsStringUsage;",
        "begin_line": 345,
        "end_line": 345,
        "comment": " Print string usage as part of the compilation log. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.convertToDottedProperties",
        "snippet": "  public boolean convertToDottedProperties;",
        "begin_line": 348,
        "end_line": 348,
        "comment": " Converts quoted property accesses to dot syntax (a['b'] -> a.b) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteFunctionExpressions",
        "snippet": "  public boolean rewriteFunctionExpressions;",
        "begin_line": 351,
        "end_line": 351,
        "comment": " Reduces the size of common function expressions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeParameters",
        "snippet": "  public boolean optimizeParameters;",
        "begin_line": 356,
        "end_line": 356,
        "comment": "\n   * Remove unused and constant parameters.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeReturns",
        "snippet": "  public boolean optimizeReturns;",
        "begin_line": 361,
        "end_line": 361,
        "comment": "\n   * Remove unused return values.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeCalls",
        "snippet": "  public boolean optimizeCalls;",
        "begin_line": 366,
        "end_line": 366,
        "comment": "\n   * Remove unused parameters from call sites.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.optimizeArgumentsArray",
        "snippet": "  public boolean optimizeArgumentsArray;",
        "begin_line": 371,
        "end_line": 371,
        "comment": "\n   * Provide formal names for elements of arguments array.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.chainCalls",
        "snippet": "  boolean chainCalls;",
        "begin_line": 374,
        "end_line": 374,
        "comment": " Chains calls to functions that return this. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.variableRenaming",
        "snippet": "  public VariableRenamingPolicy variableRenaming;",
        "begin_line": 381,
        "end_line": 381,
        "comment": " Controls which variables get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyRenaming",
        "snippet": "  public PropertyRenamingPolicy propertyRenaming;",
        "begin_line": 384,
        "end_line": 384,
        "comment": " Controls which properties get renamed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.propertyAffinity",
        "snippet": "  boolean propertyAffinity;",
        "begin_line": 387,
        "end_line": 387,
        "comment": " Should we use affinity information when generating property names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.labelRenaming",
        "snippet": "  public boolean labelRenaming;",
        "begin_line": 390,
        "end_line": 390,
        "comment": " Controls label renaming. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reserveRawExports",
        "snippet": "  public boolean reserveRawExports;",
        "begin_line": 393,
        "end_line": 393,
        "comment": " Reserve property names on the global this object. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.shadowVariables",
        "snippet": "  boolean shadowVariables;",
        "begin_line": 396,
        "end_line": 396,
        "comment": " Should shadow variable names in outer scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generatePseudoNames",
        "snippet": "  public boolean generatePseudoNames;",
        "begin_line": 401,
        "end_line": 401,
        "comment": "\n   * Generate pseudo names for variables and properties for debugging purposes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.renamePrefix",
        "snippet": "  public String renamePrefix;",
        "begin_line": 404,
        "end_line": 404,
        "comment": " Specifies a prefix for all globals "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasKeywords",
        "snippet": "  public boolean aliasKeywords;",
        "begin_line": 407,
        "end_line": 407,
        "comment": " Aliases true, false, and null to variables with shorter names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseProperties",
        "snippet": "  public boolean collapseProperties;",
        "begin_line": 410,
        "end_line": 410,
        "comment": " Flattens multi-level property names (e.g. a$b = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapseObjectLiterals",
        "snippet": "  public boolean collapseObjectLiterals;",
        "begin_line": 413,
        "end_line": 413,
        "comment": " Split object literals into individual variables when possible. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.collapsePropertiesOnExternTypes",
        "snippet": "  boolean collapsePropertiesOnExternTypes;",
        "begin_line": 416,
        "end_line": 416,
        "comment": " Flattens multi-level property names on extern types (e.g. String$f = x) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.devirtualizePrototypeMethods",
        "snippet": "  public boolean devirtualizePrototypeMethods;",
        "begin_line": 422,
        "end_line": 422,
        "comment": "\n   * Devirtualize prototype method by rewriting them to be static calls that\n   * take the this pointer as their first argument\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.computeFunctionSideEffects",
        "snippet": "  public boolean computeFunctionSideEffects;",
        "begin_line": 428,
        "end_line": 428,
        "comment": "\n   * Use @nosideeffects annotations, function bodies and name graph\n   * to determine if calls have side effects.  Requires --check_types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.debugFunctionSideEffectsPath",
        "snippet": "  public String debugFunctionSideEffectsPath;",
        "begin_line": 433,
        "end_line": 433,
        "comment": "\n   * Where to save debug report for compute function side effects.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.disambiguateProperties",
        "snippet": "  public boolean disambiguateProperties;",
        "begin_line": 439,
        "end_line": 439,
        "comment": "\n   * Rename properties to disambiguate between unrelated fields based on\n   * type information.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ambiguateProperties",
        "snippet": "  public boolean ambiguateProperties;",
        "begin_line": 442,
        "end_line": 442,
        "comment": " Rename unrelated properties to the same name to reduce code size. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.anonymousFunctionNaming",
        "snippet": "  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;",
        "begin_line": 445,
        "end_line": 445,
        "comment": " Give anonymous functions names for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputVariableMapSerialized",
        "snippet": "  public byte[] inputVariableMapSerialized;",
        "begin_line": 448,
        "end_line": 448,
        "comment": " Serialized input variable renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputPropertyMapSerialized",
        "snippet": "  public byte[] inputPropertyMapSerialized;",
        "begin_line": 451,
        "end_line": 451,
        "comment": " Serialized input property renaming map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.exportTestFunctions",
        "snippet": "  public boolean exportTestFunctions;",
        "begin_line": 454,
        "end_line": 454,
        "comment": " Whether to export test functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.specializeInitialModule",
        "snippet": "  public boolean specializeInitialModule;",
        "begin_line": 457,
        "end_line": 457,
        "comment": " Specialize the initial module at the cost of later modules "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheck",
        "snippet": "  boolean runtimeTypeCheck;",
        "begin_line": 464,
        "end_line": 464,
        "comment": " Inserts runtime type assertions for debugging. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.runtimeTypeCheckLogFunction",
        "snippet": "  String runtimeTypeCheckLogFunction;",
        "begin_line": 471,
        "end_line": 471,
        "comment": "\n   * A JS function to be used for logging runtime type assertion\n   * failures. It will be passed the warning as a string and the\n   * faulty expression as arguments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.codingConvention",
        "snippet": "  private CodingConvention codingConvention;",
        "begin_line": 474,
        "end_line": 474,
        "comment": " A CodingConvention to use during the compile. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverage",
        "snippet": "  public boolean instrumentForCoverage;",
        "begin_line": 477,
        "end_line": 477,
        "comment": " Instrument code for the purpose of collecting coverage data. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentForCoverageOnly",
        "snippet": "  public boolean instrumentForCoverageOnly;",
        "begin_line": 483,
        "end_line": 483,
        "comment": "\n   * Instrument code for the purpose of collecting coverage data - restrict to\n   * coverage pass only, and skip all other passes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.ignoreCajaProperties",
        "snippet": "  public boolean ignoreCajaProperties;",
        "begin_line": 486,
        "end_line": 486,
        "comment": " Add code to skip properties that Caja adds to Object.prototype "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockStartMarker",
        "snippet": "  public String syntheticBlockStartMarker;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.syntheticBlockEndMarker",
        "snippet": "  public String syntheticBlockEndMarker;",
        "begin_line": 490,
        "end_line": 490,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.locale",
        "snippet": "  public String locale;",
        "begin_line": 493,
        "end_line": 493,
        "comment": " Compiling locale "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markAsCompiled",
        "snippet": "  public boolean markAsCompiled;",
        "begin_line": 496,
        "end_line": 496,
        "comment": " Sets the special \"COMPILED\" value to true "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeTryCatchFinally",
        "snippet": "  public boolean removeTryCatchFinally;",
        "begin_line": 499,
        "end_line": 499,
        "comment": " Removes try...catch...finally blocks for easier debugging "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.closurePass",
        "snippet": "  public boolean closurePass;",
        "begin_line": 502,
        "end_line": 502,
        "comment": " Processes goog.provide() and goog.require() calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.rewriteNewDateGoogNow",
        "snippet": "  boolean rewriteNewDateGoogNow;",
        "begin_line": 505,
        "end_line": 505,
        "comment": " Rewrite new Date(goog.now()) to new Date().  "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeAbstractMethods",
        "snippet": "  boolean removeAbstractMethods;",
        "begin_line": 508,
        "end_line": 508,
        "comment": " Remove goog.abstractMethod assignments. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.removeClosureAsserts",
        "snippet": "  boolean removeClosureAsserts;",
        "begin_line": 511,
        "end_line": 511,
        "comment": " Remove goog.asserts calls. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.gatherCssNames",
        "snippet": "  public boolean gatherCssNames;",
        "begin_line": 514,
        "end_line": 514,
        "comment": " Gather CSS names (requires closurePass) "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypes",
        "snippet": "  public Set<String> stripTypes;",
        "begin_line": 517,
        "end_line": 517,
        "comment": " Names of types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNameSuffixes",
        "snippet": "  public Set<String> stripNameSuffixes;",
        "begin_line": 520,
        "end_line": 520,
        "comment": " Name suffixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripNamePrefixes",
        "snippet": "  public Set<String> stripNamePrefixes;",
        "begin_line": 523,
        "end_line": 523,
        "comment": " Name prefixes that determine which variables and properties to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.stripTypePrefixes",
        "snippet": "  public Set<String> stripTypePrefixes;",
        "begin_line": 526,
        "end_line": 526,
        "comment": " Qualified type name prefixes that determine which types to strip "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.customPasses",
        "snippet": "  public transient\n      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;",
        "begin_line": 529,
        "end_line": 530,
        "comment": " Custom passes "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.markNoSideEffectCalls",
        "snippet": "  public boolean markNoSideEffectCalls;",
        "begin_line": 533,
        "end_line": 533,
        "comment": " Mark no side effect calls "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.defineReplacements",
        "snippet": "  private Map<String, Object> defineReplacements;",
        "begin_line": 536,
        "end_line": 536,
        "comment": " Replacements for @defines. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakProcessing",
        "snippet": "  private TweakProcessing tweakProcessing;",
        "begin_line": 539,
        "end_line": 539,
        "comment": " What kind of processing to do for goog.tweak functions. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tweakReplacements",
        "snippet": "  private Map<String, Object> tweakReplacements;",
        "begin_line": 542,
        "end_line": 542,
        "comment": " Replacements for tweaks. Will be Boolean, Numbers, or Strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.moveFunctionDeclarations",
        "snippet": "  public boolean moveFunctionDeclarations;",
        "begin_line": 545,
        "end_line": 545,
        "comment": " Move top level function declarations to the top "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.instrumentationTemplate",
        "snippet": "  public String instrumentationTemplate;",
        "begin_line": 548,
        "end_line": 548,
        "comment": " Instrumentation template to use "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.appNameStr",
        "snippet": "  public String appNameStr;",
        "begin_line": 554,
        "end_line": 554,
        "comment": "\n   * App identifier string for use by the instrumentation template's\n   * app_name_setter\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.recordFunctionInformation",
        "snippet": "  public boolean recordFunctionInformation;",
        "begin_line": 557,
        "end_line": 557,
        "comment": " Record function information "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.generateExports",
        "snippet": "  public boolean generateExports;",
        "begin_line": 559,
        "end_line": 559,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.cssRenamingMap",
        "snippet": "  public CssRenamingMap cssRenamingMap;",
        "begin_line": 562,
        "end_line": 562,
        "comment": " Map used in the renaming of CSS class names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.processObjectPropertyString",
        "snippet": "  boolean processObjectPropertyString;",
        "begin_line": 565,
        "end_line": 565,
        "comment": " Process instances of goog.testing.ObjectPropertyString. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.idGenerators",
        "snippet": "  Set<String> idGenerators;",
        "begin_line": 568,
        "end_line": 568,
        "comment": " Id generators to replace. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsFunctionDescriptions",
        "snippet": "  List<String> replaceStringsFunctionDescriptions;",
        "begin_line": 571,
        "end_line": 571,
        "comment": " Configuration strings "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsPlaceholderToken",
        "snippet": "  String replaceStringsPlaceholderToken;",
        "begin_line": 572,
        "end_line": 572,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.replaceStringsReservedStrings",
        "snippet": "  Set<String> replaceStringsReservedStrings;",
        "begin_line": 574,
        "end_line": 574,
        "comment": " A list of strings that should not be used as replacements"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.operaCompoundAssignFix",
        "snippet": "  boolean operaCompoundAssignFix;",
        "begin_line": 577,
        "end_line": 577,
        "comment": " Fixes open source issue: 390"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.prettyPrint",
        "snippet": "  public boolean prettyPrint;",
        "begin_line": 584,
        "end_line": 584,
        "comment": " Output in pretty indented format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineBreak",
        "snippet": "  public boolean lineBreak;",
        "begin_line": 587,
        "end_line": 587,
        "comment": " Line break the output a bit more aggressively "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.printInputDelimiter",
        "snippet": "  public boolean printInputDelimiter;",
        "begin_line": 590,
        "end_line": 590,
        "comment": " Prints a separator comment before each js script "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.inputDelimiter",
        "snippet": "  public String inputDelimiter = \"// Input %num%\";",
        "begin_line": 593,
        "end_line": 593,
        "comment": " The string to use as the separator for printInputDelimiter "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.reportPath",
        "snippet": "  public String reportPath;",
        "begin_line": 596,
        "end_line": 596,
        "comment": " Where to save a report of global name usage "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.tracer",
        "snippet": "  public TracerMode tracer;",
        "begin_line": 598,
        "end_line": 598,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.colorizeErrorOutput",
        "snippet": "  private boolean colorizeErrorOutput;",
        "begin_line": 600,
        "end_line": 600,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.errorFormat",
        "snippet": "  public ErrorFormat errorFormat;",
        "begin_line": 602,
        "end_line": 602,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.jsOutputFile",
        "snippet": "  public String jsOutputFile;",
        "begin_line": 604,
        "end_line": 604,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.warningsGuard",
        "snippet": "  private ComposeWarningsGuard warningsGuard =\n      new ComposeWarningsGuard();",
        "begin_line": 606,
        "end_line": 607,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.summaryDetailLevel",
        "snippet": "  int summaryDetailLevel = 1;",
        "begin_line": 609,
        "end_line": 609,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.lineLengthThreshold",
        "snippet": "  int lineLengthThreshold = CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 611,
        "end_line": 611,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExports",
        "snippet": "  private boolean externExports;",
        "begin_line": 621,
        "end_line": 621,
        "comment": "\n   * Whether the exports should be made available via {@link Result} after\n   * compilation. This is implicitly true if {@link #externExportsPath} is set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.externExportsPath",
        "snippet": "  String externExportsPath;",
        "begin_line": 624,
        "end_line": 624,
        "comment": " The output path for the created externs file. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceReportPath",
        "snippet": "  public String nameReferenceReportPath;",
        "begin_line": 627,
        "end_line": 627,
        "comment": " Where to save a cross-reference report from the name reference graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.nameReferenceGraphPath",
        "snippet": "  public String nameReferenceGraphPath;",
        "begin_line": 630,
        "end_line": 630,
        "comment": " Where to save the name reference graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapOutputPath",
        "snippet": "  public String sourceMapOutputPath;",
        "begin_line": 637,
        "end_line": 637,
        "comment": " The output path for the source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapDetailLevel",
        "snippet": "  public SourceMap.DetailLevel sourceMapDetailLevel =\n      SourceMap.DetailLevel.SYMBOLS;",
        "begin_line": 640,
        "end_line": 641,
        "comment": " The detail level for the generated source map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.sourceMapFormat",
        "snippet": "  public SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 644,
        "end_line": 645,
        "comment": " The source map file format "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.outputCharset",
        "snippet": "  String outputCharset;",
        "begin_line": 651,
        "end_line": 651,
        "comment": "\n   * Charset to use when generating code.  If null, then output ASCII.\n   * This needs to be a string because CompilerOptions is serializable.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.looseTypes",
        "snippet": "  boolean looseTypes;",
        "begin_line": 656,
        "end_line": 656,
        "comment": "\n   * Whether the named objects types included 'undefined' by default.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.aliasHandler",
        "snippet": "  private transient AliasTransformationHandler aliasHandler;",
        "begin_line": 661,
        "end_line": 661,
        "comment": "\n   * Data holder Alias Transformation information accumulated during a compile.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerOptions",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER",
        "snippet": "  static final AliasTransformationHandler NULL_ALIAS_TRANSFORMATION_HANDLER =\n      new NullAliasTransformationHandler();",
        "begin_line": 1362,
        "end_line": 1363,
        "comment": "\n   * A Null implementation of the CodeChanges interface which performs all\n   * operations as a No-Op\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 0L;",
        "begin_line": 1367,
        "end_line": 1367,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformationHandler",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformationHandler.NULL_ALIAS_TRANSFORMATION",
        "snippet": "    private static final AliasTransformation NULL_ALIAS_TRANSFORMATION =\n        new NullAliasTransformation();",
        "begin_line": 1369,
        "end_line": 1370,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NullAliasTransformation",
        "src_path": "src/com/google/javascript/jscomp/CompilerOptions.java",
        "signature": "com.google.javascript.jscomp.NullAliasTransformation.serialVersionUID",
        "snippet": "      private static final long serialVersionUID = 0L;",
        "begin_line": 1381,
        "end_line": 1381,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.SOURCE_EXCERPT_REGION_LENGTH",
        "snippet": "  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;",
        "begin_line": 56,
        "end_line": 56,
        "comment": "\n   * Number of lines in the region returned by {@link #getRegion(int)}.\n   * This length must be odd.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.fileName",
        "snippet": "  private final String fileName;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.isExternFile",
        "snippet": "  private boolean isExternFile = false;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.originalPath",
        "snippet": "  private String originalPath = null;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " from a Jar, it could be the path to the Jar."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lastOffset",
        "snippet": "  private int lastOffset;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " than starting at the beginning of the file."
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.lastLine",
        "snippet": "  private int lastLine;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceFile",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.SourceFile.code",
        "snippet": "  private String code = null;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Preloaded",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Preloaded.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 314,
        "end_line": 314,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 332,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Generated",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.Generated.generator",
        "snippet": "    private final Generator generator;",
        "begin_line": 333,
        "end_line": 333,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 366,
        "end_line": 366,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.file",
        "snippet": "    private final File file;",
        "begin_line": 367,
        "end_line": 367,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OnDisk",
        "src_path": "src/com/google/javascript/jscomp/SourceFile.java",
        "signature": "com.google.javascript.jscomp.OnDisk.inputCharset",
        "snippet": "    protected String inputCharset = Charsets.UTF_8.name();",
        "begin_line": 372,
        "end_line": 372,
        "comment": " Default input file format for JSCompiler has always been UTF_8."
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.REGEXP_REFERENCE",
        "snippet": "  static final DiagnosticType REGEXP_REFERENCE =\n    DiagnosticType.warning(\"JSC_REGEXP_REFERENCE\",\n        \"References to the global RegExp object prevents \" +\n        \"optimization of regular expressions.\");",
        "begin_line": 32,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.MALFORMED_REGEXP",
        "snippet": "  static final DiagnosticType MALFORMED_REGEXP = DiagnosticType.warning(\n        \"JSC_MALFORMED_REGEXP\",\n        \"Malformed Regular Expression: {0}\");",
        "begin_line": 36,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckRegExp",
        "src_path": "src/com/google/javascript/jscomp/CheckRegExp.java",
        "signature": "com.google.javascript.jscomp.CheckRegExp.globalRegExpPropertiesUsed",
        "snippet": "  private boolean globalRegExpPropertiesUsed = false;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.orderOfAddition",
        "snippet": "  private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();",
        "begin_line": 45,
        "end_line": 45,
        "comment": " The order that the guards were added in."
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.numberOfAdds",
        "snippet": "  private int numberOfAdds = 0;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guardComparator",
        "snippet": "  private final Comparator<WarningsGuard> guardComparator =\n      new GuardComparator(orderOfAddition);",
        "begin_line": 48,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GuardComparator",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.GuardComparator.orderOfAddition",
        "snippet": "    private final Map<WarningsGuard, Integer> orderOfAddition;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ComposeWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/ComposeWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.ComposeWarningsGuard.guards",
        "snippet": "  private final TreeSet<WarningsGuard> guards =\n      new TreeSet<WarningsGuard>(guardComparator);",
        "begin_line": 75,
        "end_line": 76,
        "comment": " The order that the guards are applied in."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.stream",
        "snippet": "  private final JsDocTokenStream stream;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.jsdocBuilder",
        "snippet": "  private final JSDocInfoBuilder jsdocBuilder;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.parser",
        "snippet": "  private final ErrorReporterParser parser = new ErrorReporterParser();",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.templateNode",
        "snippet": "  private final Node templateNode;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " memory footprint associated with these (similar to IRFactory)."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileOverviewJSDocInfo",
        "snippet": "  private JSDocInfo fileOverviewJSDocInfo = null;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The DocInfo with the fileoverview tag for the whole file."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.state",
        "snippet": "  private State state;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.annotationNames",
        "snippet": "  private final Map<String, Annotation> annotationNames;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.suppressionNames",
        "snippet": "  private final Set<String> suppressionNames;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",
        "snippet": "  static private final Set<String> modifiesAnnotationKeywords =\n      ImmutableSet.<String>of(\"this\", \"arguments\");",
        "begin_line": 94,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.fileLevelJsDocBuilder",
        "snippet": "  private Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;",
        "begin_line": 97,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.string",
        "snippet": "    private final String string;",
        "begin_line": 1213,
        "end_line": 1213,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtractionInfo.token",
        "snippet": "    private final JsDocToken token;",
        "begin_line": 1214,
        "end_line": 1214,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.type",
        "snippet": "    final JSTypeExpression type;",
        "begin_line": 1226,
        "end_line": 1226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.lineno",
        "snippet": "    final int lineno;",
        "begin_line": 1227,
        "end_line": 1227,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.ExtendedTypeInfo.charno",
        "snippet": "    final int charno;",
        "begin_line": 1228,
        "end_line": 1228,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",
        "snippet": "  private static final JsDocToken NO_UNREAD_TOKEN = null;",
        "begin_line": 2186,
        "end_line": 2186,
        "comment": "\n   * Specific value indicating that the {@link #unreadToken} contains no token.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocInfoParser.unreadToken",
        "snippet": "  private JsDocToken unreadToken = NO_UNREAD_TOKEN;",
        "begin_line": 2191,
        "end_line": 2191,
        "comment": "\n   * One token buffer.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.UNSAFE_NAMESPACE_WARNING",
        "snippet": "  static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
        "begin_line": 76,
        "end_line": 79,
        "comment": " Warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.NAMESPACE_REDEFINED_WARNING",
        "snippet": "  static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
        "begin_line": 81,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS",
        "snippet": "  static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
        "begin_line": 86,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.globalNames",
        "snippet": "  private List<Name> globalNames;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.nameMap",
        "snippet": "  private Map<String, Name> nameMap;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " Maps names (e.g. \"a.b.c\") to nodes in the global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.collapsePropertiesOnExternTypes",
        "snippet": "  private final boolean collapsePropertiesOnExternTypes;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseProperties",
        "src_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
        "signature": "com.google.javascript.jscomp.CollapseProperties.inlineAliases",
        "snippet": "  private final boolean inlineAliases;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.vars",
        "snippet": "  private final Map<String, Var> vars = new LinkedHashMap<String, Var>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.parent",
        "snippet": "  private final Scope parent;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.depth",
        "snippet": "  private final int depth;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.rootNode",
        "snippet": "  private final Node rootNode;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.thisType",
        "snippet": "  private final ObjectType thisType;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The type of {@code this} in the current scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.isBottom",
        "snippet": "  private final boolean isBottom;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Whether this is a bottom scope for the purposes of type inference. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.arguments",
        "snippet": "  private Var arguments;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Scope",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",
        "snippet": "  private static final Predicate<Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES =\n      new Predicate<Var>() {\n    @Override public boolean apply(Var var) {\n      return var.getParentNode() != null &&\n          var.getType() == null && // no declared type\n          var.getParentNode().getType() == Token.VAR &&\n          !var.isExtern();\n    }\n  };",
        "begin_line": 67,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.name",
        "snippet": "    final String name;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " name "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.nameNode",
        "snippet": "    final Node nameNode;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Var node "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.type",
        "snippet": "    private JSType type;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * The variable's type.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.info",
        "snippet": "    private final JSDocInfo info;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n     * The variable's doc info.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.typeInferred",
        "snippet": "    private final boolean typeInferred;",
        "begin_line": 100,
        "end_line": 100,
        "comment": "\n     * Whether the variable's type has been inferred or is declared. An inferred\n     * type may change over time (as more code is discovered), whereas a\n     * declared type is a static contract that must be matched.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.input",
        "snippet": "    final CompilerInput input;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " Input source "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.isDefine",
        "snippet": "    final boolean isDefine;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Whether the variable is a define "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.index",
        "snippet": "    final int index;",
        "begin_line": 112,
        "end_line": 112,
        "comment": "\n     * The index at which the var is declared. e..g if it's 0, it's the first\n     * declared variable in that scope\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Var",
        "src_path": "src/com/google/javascript/jscomp/Scope.java",
        "signature": "com.google.javascript.jscomp.Var.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The enclosing scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.colorings",
        "snippet": "  private final Deque<GraphColoring<Var, Void>> colorings;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.usePseudoNames",
        "snippet": "  private final boolean usePseudoNames;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CoalesceVariableNames",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CoalesceVariableNames.coloringTieBreaker",
        "snippet": "  private static final Comparator<Var> coloringTieBreaker =\n      new Comparator<Var>() {\n    public int compare(Var v1, Var v2) {\n      return v1.index - v2.index;\n    }\n  };",
        "begin_line": 67,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedLiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CombinedLiveRangeChecker.callback1",
        "snippet": "    private final LiveRangeChecker callback1;",
        "begin_line": 302,
        "end_line": 302,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedLiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.CombinedLiveRangeChecker.callback2",
        "snippet": "    private final LiveRangeChecker callback2;",
        "begin_line": 303,
        "end_line": 303,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.defFound",
        "snippet": "    boolean defFound = false;",
        "begin_line": 372,
        "end_line": 372,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.crossed",
        "snippet": "    boolean crossed = false;",
        "begin_line": 373,
        "end_line": 373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.def",
        "snippet": "    private final Var def;",
        "begin_line": 374,
        "end_line": 374,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiveRangeChecker",
        "src_path": "src/com/google/javascript/jscomp/CoalesceVariableNames.java",
        "signature": "com.google.javascript.jscomp.LiveRangeChecker.use",
        "snippet": "    private final Var use;",
        "begin_line": 375,
        "end_line": 375,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ConvertToDottedProperties",
        "src_path": "src/com/google/javascript/jscomp/ConvertToDottedProperties.java",
        "signature": "com.google.javascript.jscomp.ConvertToDottedProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAst",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAst.checkOnly",
        "snippet": "  private final boolean checkOnly;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrepareAnnotations",
        "src_path": "src/com/google/javascript/jscomp/PrepareAst.java",
        "signature": "com.google.javascript.jscomp.PrepareAnnotations.convention",
        "snippet": "    private final CodingConvention convention;",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeReturns",
        "src_path": "src/com/google/javascript/jscomp/OptimizeReturns.java",
        "signature": "com.google.javascript.jscomp.OptimizeReturns.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.EOF_CHAR",
        "snippet": "  private final static int\n      EOF_CHAR = -1;",
        "begin_line": 35,
        "end_line": 36,
        "comment": "\n   * For chars - because we need something out-of-range\n   * to check.  (And checking EOF by exception is annoying.)\n   * Note distinction from EOF token type!\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.string",
        "snippet": "  private String string = \"\";",
        "begin_line": 455,
        "end_line": 455,
        "comment": " code."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBuffer",
        "snippet": "  private char[] stringBuffer = new char[128];",
        "begin_line": 457,
        "end_line": 457,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.stringBufferTop",
        "snippet": "  private int stringBufferTop;",
        "begin_line": 458,
        "end_line": 458,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetBuffer",
        "snippet": "  private final int[] ungetBuffer = new int[3];",
        "begin_line": 461,
        "end_line": 461,
        "comment": " Room to backtrace from to < on failed match of the last - in <!--"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.ungetCursor",
        "snippet": "  private int ungetCursor;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.hitEOF",
        "snippet": "  private boolean hitEOF = false;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineStart",
        "snippet": "  private int lineStart = 0;",
        "begin_line": 466,
        "end_line": 466,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineEndChar",
        "snippet": "  private int lineEndChar = -1;",
        "begin_line": 467,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.lineno",
        "snippet": "  int lineno;",
        "begin_line": 468,
        "end_line": 468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.charno",
        "snippet": "  private int charno = -1;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initCharno",
        "snippet": "  private int initCharno;",
        "begin_line": 470,
        "end_line": 470,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.initLineno",
        "snippet": "  private int initLineno;",
        "begin_line": 471,
        "end_line": 471,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceString",
        "snippet": "  private String sourceString;",
        "begin_line": 473,
        "end_line": 473,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceEnd",
        "snippet": "  private int sourceEnd;",
        "begin_line": 474,
        "end_line": 474,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.sourceCursor",
        "snippet": "  int sourceCursor;",
        "begin_line": 478,
        "end_line": 478,
        "comment": " sliding window of the source stream."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.cursor",
        "snippet": "  int cursor;",
        "begin_line": 483,
        "end_line": 483,
        "comment": " Its value is the index of the next character to be scanned."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenBeg",
        "snippet": "  int tokenBeg;",
        "begin_line": 486,
        "end_line": 486,
        "comment": " Record start and end positions of last scanned token."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.JsDocTokenStream",
        "src_path": "src/com/google/javascript/jscomp/parsing/JsDocTokenStream.java",
        "signature": "com.google.javascript.jscomp.parsing.JsDocTokenStream.tokenEnd",
        "snippet": "  int tokenEnd;",
        "begin_line": 487,
        "end_line": 487,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.RenameLabels.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.RenameLabels.nameSupplier",
        "snippet": "  private final Supplier<String> nameSupplier;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.RenameLabels.removeUnused",
        "snippet": "  private final boolean removeUnused;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultNameSupplier",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.DefaultNameSupplier.nameGenerator",
        "snippet": "    final NameGenerator nameGenerator =\n        new NameGenerator(new HashSet<String>(), \"\", null);",
        "begin_line": 91,
        "end_line": 92,
        "comment": " NameGenerator is used to create safe label names."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.ProcessLabels.namespaceStack",
        "snippet": "    final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList();",
        "begin_line": 112,
        "end_line": 112,
        "comment": " inner scope, so a new namespace is created each time a scope is entered."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessLabels",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.ProcessLabels.names",
        "snippet": "    final ArrayList<String> names = new ArrayList<String>();",
        "begin_line": 116,
        "end_line": 116,
        "comment": " the second \"b\", etc."
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelInfo",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelInfo.referenced",
        "snippet": "    boolean referenced = false;",
        "begin_line": 263,
        "end_line": 263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelInfo",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelInfo.id",
        "snippet": "    final int id;",
        "begin_line": 264,
        "end_line": 264,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LabelNamespace",
        "src_path": "src/com/google/javascript/jscomp/RenameLabels.java",
        "signature": "com.google.javascript.jscomp.LabelNamespace.renameMap",
        "snippet": "    final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo>();",
        "begin_line": 273,
        "end_line": 273,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.ARGUMENTS",
        "snippet": "  public static final String ARGUMENTS = \"arguments\";",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.nameStack",
        "snippet": "  private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MakeDeclaredNamesUnique",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.MakeDeclaredNamesUnique.rootRenamer",
        "snippet": "  private final Renamer rootRenamer;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 238,
        "end_line": 238,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referencedNames",
        "snippet": "    private Set<String> referencedNames = ImmutableSet.of();",
        "begin_line": 241,
        "end_line": 241,
        "comment": " The set of names referenced in the current scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.referenceStack",
        "snippet": "    private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();",
        "begin_line": 244,
        "end_line": 244,
        "comment": " Stack reference sets."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenameInverter",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenameInverter.nameMap",
        "snippet": "    private Map<String, List<Node>> nameMap = Maps.newHashMap();",
        "begin_line": 247,
        "end_line": 247,
        "comment": " Name are globally unique initially, so we don't need a per-scope map."
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.nameUsage",
        "snippet": "    private final Multiset<String> nameUsage;",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 404,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.global",
        "snippet": "    private final boolean global;",
        "begin_line": 405,
        "end_line": 405,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ContextualRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.ContextualRenamer.UNIQUE_ID_SEPARATOR",
        "snippet": "    final static String UNIQUE_ID_SEPARATOR = \"$$\";",
        "begin_line": 407,
        "end_line": 407,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.declarations",
        "snippet": "    private final Map<String, String> declarations = Maps.newHashMap();",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.uniqueIdSupplier",
        "snippet": "    private final Supplier<String> uniqueIdSupplier;",
        "begin_line": 489,
        "end_line": 489,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.idPrefix",
        "snippet": "    private final String idPrefix;",
        "begin_line": 490,
        "end_line": 490,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.InlineRenamer.removeConstness",
        "snippet": "    private final boolean removeConstness;",
        "begin_line": 491,
        "end_line": 491,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BoilerplateRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.BoilerplateRenamer.uniqueIdSupplier",
        "snippet": "    private final Supplier<String> uniqueIdSupplier;",
        "begin_line": 550,
        "end_line": 550,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BoilerplateRenamer",
        "src_path": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "signature": "com.google.javascript.jscomp.BoilerplateRenamer.idPrefix",
        "snippet": "    private final String idPrefix;",
        "begin_line": 551,
        "end_line": 551,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollapseAnonymousFunctions",
        "src_path": "src/com/google/javascript/jscomp/CollapseAnonymousFunctions.java",
        "signature": "com.google.javascript.jscomp.CollapseAnonymousFunctions.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.SYNTHETIC_VARS_DECLAR",
        "snippet": "  static final String SYNTHETIC_VARS_DECLAR = \"{SyntheticVarsDeclar}\";",
        "begin_line": 37,
        "end_line": 37,
        "comment": " Name of the synthetic script that holds undefined variables. "
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.UNDEFINED_VAR_ERROR",
        "snippet": "  static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error(\n      \"JSC_UNDEFINED_VARIABLE\",\n      \"variable {0} is undefined\");",
        "begin_line": 39,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error(\n      \"JSC_VIOLATED_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}, since {1} loads after {0}\");",
        "begin_line": 43,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.MISSING_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning(\n      \"JSC_MISSING_MODULE_DEPENDENCY\",\n      \"missing module dependency; module {0} should depend \" +\n      \"on module {1} because it references {2}\");",
        "begin_line": 48,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.STRICT_MODULE_DEP_ERROR",
        "snippet": "  static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled(\n      \"JSC_STRICT_MODULE_DEPENDENCY\",\n      \"module {0} cannot reference {2}, defined in \" +\n      \"module {1}\");",
        "begin_line": 53,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR",
        "snippet": "  static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR =\n    DiagnosticType.warning(\n      \"JSC_NAME_REFERENCE_IN_EXTERNS\",\n      \"accessing name {0} in externs has no effect\");",
        "begin_line": 58,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.UNDEFINED_EXTERN_VAR_ERROR",
        "snippet": "  static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR =\n    DiagnosticType.warning(\n      \"JSC_UNDEFINED_EXTERN_VAR_ERROR\",\n      \"name {0} is not undefined in the externs.\");",
        "begin_line": 63,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.INVALID_FUNCTION_DECL",
        "snippet": "  static final DiagnosticType INVALID_FUNCTION_DECL =\n    DiagnosticType.error(\"JSC_INVALID_FUNCTION_DECL\",\n        \"Syntax error: function declaration must have a name\");",
        "begin_line": 68,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.synthesizedExternsInput",
        "snippet": "  private CompilerInput synthesizedExternsInput = null;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.synthesizedExternsRoot",
        "snippet": "  private Node synthesizedExternsRoot = null;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.varsToDeclareInExterns",
        "snippet": "  private final Set<String> varsToDeclareInExterns = Sets.newHashSet();",
        "begin_line": 78,
        "end_line": 78,
        "comment": " in the normal code."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.sanityCheck",
        "snippet": "  private final boolean sanityCheck;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Whether this is the post-processing sanity check."
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCheck",
        "src_path": "src/com/google/javascript/jscomp/VarCheck.java",
        "signature": "com.google.javascript.jscomp.VarCheck.strictExternCheck",
        "snippet": "  private final boolean strictExternCheck;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " Whether extern checks emit error."
    },
    {
        "class_name": "com.google.javascript.jscomp.DevirtualizePrototypeMethods",
        "src_path": "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "signature": "com.google.javascript.jscomp.DevirtualizePrototypeMethods.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DevirtualizePrototypeMethods",
        "src_path": "src/com/google/javascript/jscomp/DevirtualizePrototypeMethods.java",
        "signature": "com.google.javascript.jscomp.DevirtualizePrototypeMethods.specializationState",
        "snippet": "  private SpecializeModule.SpecializationState specializationState;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentInfo",
        "snippet": "  private JSDocInfo currentInfo;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " the current JSDoc which is being populated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.populated",
        "snippet": "  private boolean populated = false;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " whether the current JSDocInfo has valuable information"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.parseDocumentation",
        "snippet": "  private boolean parseDocumentation = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " whether to include the documentation itself when parsing the JsDoc"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfoBuilder",
        "src_path": "src/com/google/javascript/rhino/JSDocInfoBuilder.java",
        "signature": "com.google.javascript.rhino.JSDocInfoBuilder.currentMarker",
        "snippet": "  private JSDocInfo.Marker currentMarker = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " the current marker, if any."
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.callbacks",
        "snippet": "  private final CallbackWrapper[] callbacks;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The callbacks that this pass combines. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CombinedCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CombinedCompilerPass.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.callback",
        "snippet": "    private final Callback callback;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The callback being wrapped. Never null. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.scopedCallback",
        "snippet": "    private final ScopedCallback scopedCallback;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\n     * if (callback instanceof ScopedCallback), then scopedCallback points\n     * to an instance of ScopedCallback, otherwise scopedCallback points to null\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CallbackWrapper",
        "src_path": "src/com/google/javascript/jscomp/CombinedCompilerPass.java",
        "signature": "com.google.javascript.jscomp.CallbackWrapper.waiting",
        "snippet": "    private Node waiting = null;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\n     * The node that {@link Callback#shouldTraverse(NodeTraversal, Node, Node)}\n     * returned false for. The wrapped callback doesn't receive messages until\n     * after this node is revisited in the post-order traversal.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.DefaultCodingConvention",
        "src_path": "src/com/google/javascript/jscomp/DefaultCodingConvention.java",
        "signature": "com.google.javascript.jscomp.DefaultCodingConvention.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.externMethods",
        "snippet": "  final Set<String> externMethods = Sets.newHashSet();",
        "begin_line": 38,
        "end_line": 38,
        "comment": " List of methods defined in externs "
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.externMethodsWithoutSignatures",
        "snippet": "  final Set<String> externMethodsWithoutSignatures = Sets.newHashSet();",
        "begin_line": 41,
        "end_line": 41,
        "comment": " List of extern methods without signatures that we can't warn about "
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.nonMethodProperties",
        "snippet": "  final Set<String> nonMethodProperties = Sets.newHashSet();",
        "begin_line": 44,
        "end_line": 44,
        "comment": " List of property names that may not be methods "
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.methodDefinitions",
        "snippet": "  final Multimap<String, Node> methodDefinitions =\n      LinkedHashMultimap.create();",
        "begin_line": 49,
        "end_line": 50,
        "comment": " are found which causes problems in the source maps."
    },
    {
        "class_name": "com.google.javascript.jscomp.MethodCompilerPass",
        "src_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
        "signature": "com.google.javascript.jscomp.MethodCompilerPass.compiler",
        "snippet": "  final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.reporter",
        "snippet": "  private final transient ErrorReporter reporter;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nativeTypes",
        "snippet": "  private final JSType[] nativeTypes;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " CPU time on bounds checking inside get()."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namesToTypes",
        "snippet": "  private final Map<String, JSType> namesToTypes;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.namespaces",
        "snippet": "  private final Set<String> namespaces = new HashSet<String>();",
        "begin_line": 93,
        "end_line": 93,
        "comment": " Set of namespaces in which types (or other namespaces) exist."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.nonNullableTypeNames",
        "snippet": "  private final Set<String> nonNullableTypeNames = new HashSet<String>();",
        "begin_line": 108,
        "end_line": 108,
        "comment": " nullable or not."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.forwardDeclaredTypes",
        "snippet": "  private final Set<String> forwardDeclaredTypes = new HashSet<String>();",
        "begin_line": 113,
        "end_line": 113,
        "comment": " try to type-check them at all."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.typesIndexedByProperty",
        "snippet": "  private final Map<String, UnionTypeBuilder> typesIndexedByProperty =\n      Maps.newHashMap();",
        "begin_line": 117,
        "end_line": 118,
        "comment": " declared."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.eachRefTypeIndexedByProperty",
        "snippet": "  private final Map<String, Map<String, ObjectType>>\n      eachRefTypeIndexedByProperty = Maps.newHashMap();",
        "begin_line": 123,
        "end_line": 124,
        "comment": " for de-duping."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.greatestSubtypeByProperty",
        "snippet": "  private final Map<String, JSType> greatestSubtypeByProperty =\n      Maps.newHashMap();",
        "begin_line": 129,
        "end_line": 130,
        "comment": " typesIndexedByProperty."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.interfaceToImplementors",
        "snippet": "  private final Multimap<String, FunctionType> interfaceToImplementors =\n      LinkedHashMultimap.create();",
        "begin_line": 133,
        "end_line": 134,
        "comment": " A map from interface name to types that implement it."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.unresolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 137,
        "end_line": 138,
        "comment": " All the unresolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolvedNamedTypes",
        "snippet": "  private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =\n      ArrayListMultimap.create();",
        "begin_line": 141,
        "end_line": 142,
        "comment": " All the resolved named types."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.lastGeneration",
        "snippet": "  private boolean lastGeneration = true;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " NamedType warns about unresolved types in the last generation."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The template type name."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.templateType",
        "snippet": "  private TemplateType templateType;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The template type."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.tolerateUndefinedValues",
        "snippet": "  private final boolean tolerateUndefinedValues;",
        "begin_line": 153,
        "end_line": 153,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.resolveMode",
        "snippet": "  private ResolveMode resolveMode = ResolveMode.LAZY_NAMES;",
        "begin_line": 183,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.JSTypeRegistry",
        "src_path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
        "signature": "com.google.javascript.rhino.jstype.JSTypeRegistry.serialVersionUID",
        "snippet": "          private static final long serialVersionUID = 1L;",
        "begin_line": 510,
        "end_line": 510,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeCalls",
        "src_path": "src/com/google/javascript/jscomp/OptimizeCalls.java",
        "signature": "com.google.javascript.jscomp.OptimizeCalls.passes",
        "snippet": "  List<CallGraphCompilerPass> passes = Lists.newArrayList();",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeCalls",
        "src_path": "src/com/google/javascript/jscomp/OptimizeCalls.java",
        "signature": "com.google.javascript.jscomp.OptimizeCalls.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.StringType",
        "src_path": "src/com/google/javascript/rhino/jstype/StringType.java",
        "signature": "com.google.javascript.rhino.jstype.StringType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "signature": "com.google.javascript.jscomp.JSSourceFile.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSSourceFile",
        "src_path": "src/com/google/javascript/jscomp/JSSourceFile.java",
        "signature": "com.google.javascript.jscomp.JSSourceFile.referenced",
        "snippet": "  private SourceFile referenced;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.NoObjectType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.configResource",
        "snippet": "  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.annotationNames",
        "snippet": "  private static Set<String> annotationNames = null;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.ParserRunner",
        "src_path": "src/com/google/javascript/jscomp/parsing/ParserRunner.java",
        "signature": "com.google.javascript.jscomp.parsing.ParserRunner.suppressionNames",
        "snippet": "  private static Set<String> suppressionNames = null;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableNameGenerator",
        "src_path": "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "signature": "com.google.javascript.jscomp.VariableNameGenerator.names",
        "snippet": "  private final NameGenerator names;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableNameGenerator",
        "src_path": "src/com/google/javascript/jscomp/VariableNameGenerator.java",
        "signature": "com.google.javascript.jscomp.VariableNameGenerator.scope",
        "snippet": "  private final Scope scope;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.GLOBAL_THIS",
        "snippet": "  static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckGlobalThis",
        "src_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
        "signature": "com.google.javascript.jscomp.CheckGlobalThis.assignLhsChild",
        "snippet": "  private Node assignLhsChild = null;",
        "begin_line": 69,
        "end_line": 69,
        "comment": "\n   * If {@code assignLhsChild != null}, then the node being traversed is\n   * a descendant of the first child of an ASSIGN node. assignLhsChild's\n   * parent is this ASSIGN node.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_NULL_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called without an argument\");",
        "begin_line": 42,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR",
        "snippet": "  static final DiagnosticType EXPECTED_OBJECTLIT_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_OBJECTLIT_ERROR\",\n      \"method \\\"{0}\\\" expected an object literal argument\");",
        "begin_line": 46,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR",
        "snippet": "  static final DiagnosticType EXPECTED_STRING_ERROR = DiagnosticType.error(\n      \"JSC_EXPECTED_STRING_ERROR\",\n      \"method \\\"{0}\\\" expected an object string argument\");",
        "begin_line": 50,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR",
        "snippet": "  static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_ARGUMENT_ERROR\",\n      \"method \\\"{0}\\\" called with invalid argument\");",
        "begin_line": 54,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_STYLE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR\",\n      \"Invalid CSS name map style {0}\");",
        "begin_line": 58,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(\n      \"JSC_TOO_MANY_ARGUMENTS_ERROR\",\n      \"method \\\"{0}\\\" called with more than one argument\");",
        "begin_line": 62,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_DUPLICATE_NAMESPACE_ERROR\",\n      \"namespace \\\"{0}\\\" cannot be provided twice\");",
        "begin_line": 66,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR",
        "snippet": "  static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(\n      \"JSC_FUNCTION_NAMESPACE_ERROR\",\n      \"\\\"{0}\\\" cannot be both provided and declared as a function\");",
        "begin_line": 70,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_MISSING_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace never provided\");",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_LATE_PROVIDE_ERROR\",\n      \"required \\\"{0}\\\" namespace not provided yet\");",
        "begin_line": 78,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(\n      \"JSC_INVALID_PROVIDE_ERROR\",\n      \"\\\"{0}\\\" is not a valid JS property name\");",
        "begin_line": 82,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR",
        "snippet": "  static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(\n      \"JSC_XMODULE_REQUIRE_ERROR\",\n      \"namespace \\\"{0}\\\" provided in module {1} \" +\n      \"but required in module {2}\");",
        "begin_line": 86,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",
        "snippet": "  static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR\",\n      \"goog.setCssNameMapping only takes an object literal with string values\");",
        "begin_line": 91,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP",
        "snippet": "  static final DiagnosticType INVALID_CSS_RENAMING_MAP = DiagnosticType.warning(\n      \"INVALID_CSS_RENAMING_MAP\",\n      \"Invalid entries in css renaming map: {0}\");",
        "begin_line": 96,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR",
        "snippet": "  static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(\n      \"JSC_BASE_CLASS_ERROR\",\n      \"incorrect use of goog.base: {0}\");",
        "begin_line": 100,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG",
        "snippet": "  static final String GOOG = \"goog\";",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The root Closure namespace "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 107,
        "end_line": 107,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.providedNames",
        "snippet": "  private final Map<String, ProvidedName> providedNames =\n      Maps.newTreeMap();",
        "begin_line": 111,
        "end_line": 112,
        "comment": " The goog.provides must be processed in a deterministic order."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.unrecognizedRequires",
        "snippet": "  private final List<UnrecognizedRequire> unrecognizedRequires =\n      Lists.newArrayList();",
        "begin_line": 114,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.exportedVariables",
        "snippet": "  private final Set<String> exportedVariables = Sets.newHashSet();",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.requiresLevel",
        "snippet": "  private final CheckLevel requiresLevel;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessClosurePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProcessClosurePrimitives.rewriteNewDateGoogNow",
        "snippet": "  private final boolean rewriteNewDateGoogNow;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.namespace",
        "snippet": "    private final String namespace;",
        "begin_line": 787,
        "end_line": 787,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstNode",
        "snippet": "    private final Node firstNode;",
        "begin_line": 791,
        "end_line": 791,
        "comment": " goog.provided."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.firstModule",
        "snippet": "    private final JSModule firstModule;",
        "begin_line": 792,
        "end_line": 792,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.explicitNode",
        "snippet": "    private Node explicitNode = null;",
        "begin_line": 796,
        "end_line": 796,
        "comment": " if the namespace is always provided implicitly."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.explicitModule",
        "snippet": "    private JSModule explicitModule = null;",
        "begin_line": 797,
        "end_line": 797,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.candidateDefinition",
        "snippet": "    private Node candidateDefinition = null;",
        "begin_line": 800,
        "end_line": 800,
        "comment": " The candidate definition."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.minimumModule",
        "snippet": "    private JSModule minimumModule = null;",
        "begin_line": 803,
        "end_line": 803,
        "comment": " The minimum module where the provide must appear."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProvidedName",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.ProvidedName.replacementNode",
        "snippet": "    private Node replacementNode = null;",
        "begin_line": 806,
        "end_line": 806,
        "comment": " The replacement declaration."
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.requireNode",
        "snippet": "    final Node requireNode;",
        "begin_line": 1083,
        "end_line": 1083,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.namespace",
        "snippet": "    final String namespace;",
        "begin_line": 1084,
        "end_line": 1084,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnrecognizedRequire",
        "src_path": "src/com/google/javascript/jscomp/ProcessClosurePrimitives.java",
        "signature": "com.google.javascript.jscomp.UnrecognizedRequire.inputName",
        "snippet": "    final String inputName;",
        "begin_line": 1085,
        "end_line": 1085,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.type",
        "snippet": "  private final DiagnosticType type;",
        "begin_line": 29,
        "end_line": 29,
        "comment": " A type of the error "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.description",
        "snippet": "  public final String description;",
        "begin_line": 32,
        "end_line": 32,
        "comment": " Description of the error "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.sourceName",
        "snippet": "  public final String sourceName;",
        "begin_line": 35,
        "end_line": 35,
        "comment": " Name of the source "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.node",
        "snippet": "  final Node node;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Node where the warning occurred. "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.lineNumber",
        "snippet": "  public final int lineNumber;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Line number of the source "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.level",
        "snippet": "  public final CheckLevel level;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Level "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSError",
        "src_path": "src/com/google/javascript/jscomp/JSError.java",
        "signature": "com.google.javascript.jscomp.JSError.charno",
        "snippet": "  private final int charno;",
        "begin_line": 47,
        "end_line": 47,
        "comment": " character number"
    },
    {
        "class_name": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy",
        "src_path": "src/com/google/javascript/jscomp/AnonymousFunctionNamingPolicy.java",
        "signature": "com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnknownType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnknownType.java",
        "signature": "com.google.javascript.rhino.jstype.UnknownType.isChecked",
        "snippet": "  private final boolean isChecked;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " See the explanation of checked unknown types in JSTypeNative."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.call",
        "snippet": "  private ArrowType call;",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n   * {@code [[Call]]} property.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.prototype",
        "snippet": "  private FunctionPrototypeType prototype;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n   * The {@code prototype} property. This field is lazily initialized by\n   * {@code #getPrototype()}. The most important reason for lazily\n   * initializing this field is that there are cycles in the native types\n   * graph, so some prototypes must temporarily be {@code null} during\n   * the construction of the graph.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.kind",
        "snippet": "  private final Kind kind;",
        "begin_line": 92,
        "end_line": 92,
        "comment": "\n   * Whether a function is a constructor, an interface, or just an ordinary\n   * function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.typeOfThis",
        "snippet": "  private ObjectType typeOfThis;",
        "begin_line": 97,
        "end_line": 97,
        "comment": "\n   * The type of {@code this} in the scope of this function.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.source",
        "snippet": "  private Node source;",
        "begin_line": 102,
        "end_line": 102,
        "comment": "\n   * The function node which this type represents. It may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.implementedInterfaces",
        "snippet": "  private List<ObjectType> implementedInterfaces = ImmutableList.of();",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n   * The interfaces directly implemented by this function (for constructors)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.extendedInterfaces",
        "snippet": "  private List<ObjectType> extendedInterfaces = ImmutableList.of();",
        "begin_line": 114,
        "end_line": 114,
        "comment": "\n   * The interfaces directly extendeded by this function (for interfaces)\n   * It is only relevant for constructors. May not be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.subTypes",
        "snippet": "  private List<FunctionType> subTypes;",
        "begin_line": 120,
        "end_line": 120,
        "comment": "\n   * The types which are subtypes of this function. It is only relevant for\n   * constructors and may be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionType.templateTypeName",
        "snippet": "  private String templateTypeName;",
        "begin_line": 125,
        "end_line": 125,
        "comment": "\n   * The template type name. May be {@code null}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RecentChange",
        "src_path": "src/com/google/javascript/jscomp/CodeChangeHandler.java",
        "signature": "com.google.javascript.jscomp.RecentChange.hasChanged",
        "snippet": "    private boolean hasChanged = false;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntheticAst",
        "src_path": "src/com/google/javascript/jscomp/SyntheticAst.java",
        "signature": "com.google.javascript.jscomp.SyntheticAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntheticAst",
        "src_path": "src/com/google/javascript/jscomp/SyntheticAst.java",
        "signature": "com.google.javascript.jscomp.SyntheticAst.sourceFile",
        "snippet": "  private final SourceFile sourceFile;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntheticAst",
        "src_path": "src/com/google/javascript/jscomp/SyntheticAst.java",
        "signature": "com.google.javascript.jscomp.SyntheticAst.root",
        "snippet": "  private Node root;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warningGuardSpec",
        "snippet": "    private static final WarningGuardSpec warningGuardSpec =\n        new WarningGuardSpec();",
        "begin_line": 94,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.display_help",
        "snippet": "    @Option(name = \"--help\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Displays this message\")\n    private boolean display_help = false;",
        "begin_line": 97,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_tree",
        "snippet": "    @Option(name = \"--print_tree\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints out the parse tree and exits\")\n    private boolean print_tree = false;",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_ast",
        "snippet": "    @Option(name = \"--print_ast\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the internal abstract syntax\"\n        + \" tree and exits\")\n    private boolean print_ast = false;",
        "begin_line": 107,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.print_pass_graph",
        "snippet": "    @Option(name = \"--print_pass_graph\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints a dot file describing the passes that will get run\"\n        + \" and exits\")\n    private boolean print_pass_graph = false;",
        "begin_line": 113,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_dev_mode",
        "snippet": "    @Option(name = \"--jscomp_dev_mode\",\n        // hidden, no usage\n        aliases = {\"--dev_mode\"})\n    private CompilerOptions.DevMode jscomp_dev_mode =\n        CompilerOptions.DevMode.OFF;",
        "begin_line": 121,
        "end_line": 125,
        "comment": " compiler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.logging_level",
        "snippet": "    @Option(name = \"--logging_level\",\n        usage = \"The logging level (standard java.util.logging.Level\"\n        + \" values) for Compiler progress. Does not control errors or\"\n        + \" warnings for the JavaScript code under compilation\")\n    private String logging_level = Level.WARNING.getName();",
        "begin_line": 127,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.externs",
        "snippet": "    @Option(name = \"--externs\",\n        usage = \"The file containing javascript externs. You may specify\"\n        + \" multiple\")\n    private List<String> externs = Lists.newArrayList();",
        "begin_line": 133,
        "end_line": 136,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.js",
        "snippet": "    @Option(name = \"--js\",\n        usage = \"The javascript filename. You may specify multiple\")\n    private List<String> js = Lists.newArrayList();",
        "begin_line": 138,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.js_output_file",
        "snippet": "    @Option(name = \"--js_output_file\",\n        usage = \"Primary output filename. If not specified, output is \" +\n        \"written to stdout\")\n    private String js_output_file = \"\";",
        "begin_line": 142,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module",
        "snippet": "    @Option(name = \"--module\",\n        usage = \"A javascript module specification. The format is \"\n        + \"<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be \"\n        + \"unique. Each dep is the name of a module that this module \"\n        + \"depends on. Modules must be listed in dependency order, and js \"\n        + \"source files must be listed in the corresponding order. Where \"\n        + \"--module flags occur in relation to --js flags is unimportant\")\n    private List<String> module = Lists.newArrayList();",
        "begin_line": 147,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variable_map_input_file",
        "snippet": "    @Option(name = \"--variable_map_input_file\",\n        usage = \"File containing the serialized version of the variable \"\n        + \"renaming map produced by a previous compilation\")\n    private String variable_map_input_file = \"\";",
        "begin_line": 156,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.property_map_input_file",
        "snippet": "    @Option(name = \"--property_map_input_file\",\n        usage = \"File containing the serialized version of the property \"\n        + \"renaming map produced by a previous compilation\")\n    private String property_map_input_file = \"\";",
        "begin_line": 161,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.variable_map_output_file",
        "snippet": "    @Option(name = \"--variable_map_output_file\",\n        usage = \"File where the serialized version of the variable \"\n        + \"renaming map produced should be saved\")\n    private String variable_map_output_file = \"\";",
        "begin_line": 166,
        "end_line": 169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.create_name_map_files",
        "snippet": "    @Option(name = \"--create_name_map_files\",\n        handler = BooleanOptionHandler.class,\n        usage = \"If true, variable renaming and property renaming map \"\n        + \"files will be produced as {binary name}_vars_map.out and \"\n        + \"{binary name}_props_map.out. Note that this flag cannot be used \"\n        + \"in conjunction with either variable_map_output_file or \"\n        + \"property_map_output_file\")\n    private boolean create_name_map_files = false;",
        "begin_line": 171,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.property_map_output_file",
        "snippet": "    @Option(name = \"--property_map_output_file\",\n        usage = \"File where the serialized version of the property \"\n        + \"renaming map produced should be saved\")\n    private String property_map_output_file = \"\";",
        "begin_line": 180,
        "end_line": 183,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.third_party",
        "snippet": "    @Option(name = \"--third_party\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Check source validity but do not enforce Closure style \"\n        + \"rules and conventions\")\n    private boolean third_party = false;",
        "begin_line": 185,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.summary_detail_level",
        "snippet": "    @Option(name = \"--summary_detail_level\",\n        usage = \"Controls how detailed the compilation summary is. Values:\"\n        + \" 0 (never print summary), 1 (print summary only if there are \"\n        + \"errors or warnings), 2 (print summary if type checking is on, \"\n        + \"see --check_types), 3 (always print summary). The default level \"\n        + \"is 1\")\n    private int summary_detail_level = 1;",
        "begin_line": 192,
        "end_line": 198,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.output_wrapper",
        "snippet": "    @Option(name = \"--output_wrapper\",\n        usage = \"Interpolate output into this string at the place denoted\"\n        + \" by the marker token %output%. See --output_wrapper_marker\")\n    private String output_wrapper = \"\";",
        "begin_line": 200,
        "end_line": 203,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module_wrapper",
        "snippet": "    @Option(name = \"--module_wrapper\",\n        usage = \"An output wrapper for a javascript module (optional). \"\n        + \"The format is <name>:<wrapper>. The module name must correspond \"\n        + \"with a module specified using --module. The wrapper must \"\n        + \"contain %s as the code placeholder\")\n    private List<String> module_wrapper = Lists.newArrayList();",
        "begin_line": 205,
        "end_line": 210,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.module_output_path_prefix",
        "snippet": "    @Option(name = \"--module_output_path_prefix\",\n        usage = \"Prefix for filenames of compiled js modules. \"\n        + \"<module-name>.js will be appended to this prefix. Directories \"\n        + \"will be created as needed. Use with --module\")\n    private String module_output_path_prefix = \"./\";",
        "begin_line": 212,
        "end_line": 216,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.create_source_map",
        "snippet": "    @Option(name = \"--create_source_map\",\n        usage = \"If specified, a source map file mapping the generated \" +\n        \"source files back to the original source file will be \" +\n        \"output to the specified path. The %outname% placeholder will \" +\n        \"expand to the name of the output file that the source map \" +\n        \"corresponds to.\")\n    private String create_source_map = \"\";",
        "begin_line": 218,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_error",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_error\",\n        handler = WarningGuardErrorOptionHandler.class,\n        usage = \"Make the named class of warnings an error. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_error = Lists.newArrayList();",
        "begin_line": 227,
        "end_line": 232,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_warning",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_warning\",\n        handler = WarningGuardWarningOptionHandler.class,\n        usage = \"Make the named class of warnings a normal warning. \" +\n        \"Options:\" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_warning = Lists.newArrayList();",
        "begin_line": 235,
        "end_line": 240,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.jscomp_off",
        "snippet": "    @SuppressWarnings(\"unused\")\n    @Option(name = \"--jscomp_off\",\n        handler = WarningGuardOffOptionHandler.class,\n        usage = \"Turn off the named class of warnings. Options:\" +\n        DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)\n    private List<String> jscomp_off = Lists.newArrayList();",
        "begin_line": 243,
        "end_line": 248,
        "comment": " Used to define the flag, values are stored by the handler."
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.define",
        "snippet": "    @Option(name = \"--define\",\n        aliases = {\"--D\", \"-D\"},\n        usage = \"Override the value of a variable annotated @define. \" +\n        \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n        \"variable and <val> is a boolean, number, or a single-quoted string \" +\n        \"that contains no single quotes. If [=<val>] is omitted, \" +\n        \"the variable is marked true\")\n    private List<String> define = Lists.newArrayList();",
        "begin_line": 250,
        "end_line": 257,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.charset",
        "snippet": "    @Option(name = \"--charset\",\n        usage = \"Input and output charset for all files. By default, we \" +\n                \"accept UTF-8 as input and output US_ASCII\")\n    private String charset = \"\";",
        "begin_line": 259,
        "end_line": 262,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.compilation_level",
        "snippet": "    @Option(name = \"--compilation_level\",\n        usage = \"Specifies the compilation level to use. Options: \" +\n        \"WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS\")\n    private CompilationLevel compilation_level =\n        CompilationLevel.SIMPLE_OPTIMIZATIONS;",
        "begin_line": 264,
        "end_line": 268,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.warning_level",
        "snippet": "    @Option(name = \"--warning_level\",\n        usage = \"Specifies the warning level to use. Options: \" +\n        \"QUIET, DEFAULT, VERBOSE\")\n    private WarningLevel warning_level = WarningLevel.DEFAULT;",
        "begin_line": 270,
        "end_line": 273,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.use_only_custom_externs",
        "snippet": "    @Option(name = \"--use_only_custom_externs\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Specifies whether the default externs should be excluded\")\n    private boolean use_only_custom_externs = false;",
        "begin_line": 275,
        "end_line": 278,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.debug",
        "snippet": "    @Option(name = \"--debug\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Enable debugging options\")\n    private boolean debug = false;",
        "begin_line": 280,
        "end_line": 283,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.generate_exports",
        "snippet": "    @Option(name = \"--generate_exports\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Generates export code for those marked with @export\")\n    private boolean generate_exports = false;",
        "begin_line": 285,
        "end_line": 288,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.formatting",
        "snippet": "    @Option(name = \"--formatting\",\n        usage = \"Specifies which formatting options, if any, should be \"\n        + \"applied to the output JS. Options: \"\n        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n    private List<FormattingOption> formatting = Lists.newArrayList();",
        "begin_line": 290,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.process_closure_primitives",
        "snippet": "    @Option(name = \"--process_closure_primitives\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Processes built-ins from the Closure library, such as \"\n        + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n    private boolean process_closure_primitives = true;",
        "begin_line": 296,
        "end_line": 300,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.manage_closure_dependencies",
        "snippet": "    @Option(name = \"--manage_closure_dependencies\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Automatically sort dependencies so that a file that \"\n        + \"goog.provides symbol X will always come before a file that \"\n        + \"goog.requires symbol X. If an input provides symbols, and \"\n        + \"those symbols are never required, then that input will not \"\n        + \"be included in the compilation.\")\n    private boolean manage_closure_dependencies = false;",
        "begin_line": 302,
        "end_line": 309,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.closure_entry_point",
        "snippet": "    @Option(name = \"--closure_entry_point\",\n        usage = \"Entry points to the program. Must be goog.provide'd \"\n        + \"symbols. Any goog.provide'd symbols that are not a transitive \"\n        + \"dependency of the entry points will be removed. Files without \"\n        + \"goog.provides, and their dependencies, will always be left in. \"\n        + \"If any entry points are specified, then the \"\n        + \"manage_closure_dependencies option will be set to true and \"\n        + \"all files will be sorted in dependency order.\")\n    private List<String> closure_entry_point = Lists.newArrayList();",
        "begin_line": 311,
        "end_line": 319,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.output_manifest",
        "snippet": "    @Option(name = \"--output_manifest\",\n        usage = \"Prints out a list of all the files in the compilation. \"\n        + \"If --manage_closure_dependencies is on, this will not include \"\n        + \"files that got dropped because they were not required. \"\n        + \"The %outname% placeholder expands to the js output file. \"\n        + \"If you're using modularization, using %outname% will create \"\n        + \"a manifest for each module.\")\n    private String output_manifest = \"\";",
        "begin_line": 321,
        "end_line": 328,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.accept_const_keyword",
        "snippet": "    @Option(name = \"--accept_const_keyword\",\n        usage = \"Allows usage of const keyword.\")\n    private boolean accept_const_keyword = false;",
        "begin_line": 330,
        "end_line": 332,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.language_in",
        "snippet": "    @Option(name = \"--language_in\",\n        usage = \"Sets what language spec that input sources conform. \"\n        + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5, ECMASCRIPT5_STRICT\")\n    private String language_in = \"ECMASCRIPT3\";",
        "begin_line": 334,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.version",
        "snippet": "    @Option(name = \"--version\",\n        handler = BooleanOptionHandler.class,\n        usage = \"Prints the compiler version to stderr.\")\n    private boolean version = false;",
        "begin_line": 339,
        "end_line": 342,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Flags",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Flags.flag_file",
        "snippet": "    @Option(name = \"--flagfile\",\n        usage = \"A file containing additional command-line options.\")\n    private String flag_file = \"\";",
        "begin_line": 344,
        "end_line": 346,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.TRUES",
        "snippet": "      private static final Set<String> TRUES =\n          Sets.newHashSet(\"true\", \"on\", \"yes\", \"1\");",
        "begin_line": 351,
        "end_line": 352,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BooleanOptionHandler",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.BooleanOptionHandler.FALSES",
        "snippet": "      private static final Set<String> FALSES =\n          Sets.newHashSet(\"false\", \"off\", \"no\", \"0\");",
        "begin_line": 353,
        "end_line": 354,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSetter",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSetter.proxy",
        "snippet": "      private final Setter proxy;",
        "begin_line": 423,
        "end_line": 423,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSetter",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSetter.level",
        "snippet": "      private final CheckLevel level;",
        "begin_line": 424,
        "end_line": 424,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.flags",
        "snippet": "  private final Flags flags = new Flags();",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.configResource",
        "snippet": "  private static final String configResource =\n      \"com.google.javascript.jscomp.parsing.ParserConfig\";",
        "begin_line": 466,
        "end_line": 467,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.isConfigValid",
        "snippet": "  private boolean isConfigValid = false;",
        "begin_line": 469,
        "end_line": 469,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/CommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineRunner.DEFAULT_EXTERNS_NAMES",
        "snippet": "  private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(\n    // JS externs\n    \"es3.js\",\n    \"es5.js\",\n\n    // Event APIs\n    \"w3c_event.js\",\n    \"w3c_event3.js\",\n    \"gecko_event.js\",\n    \"ie_event.js\",\n    \"webkit_event.js\",\n\n    // DOM apis\n    \"w3c_dom1.js\",\n    \"w3c_dom2.js\",\n    \"w3c_dom3.js\",\n    \"gecko_dom.js\",\n    \"ie_dom.js\",\n    \"webkit_dom.js\",\n\n    // CSS apis\n    \"w3c_css.js\",\n    \"gecko_css.js\",\n    \"ie_css.js\",\n    \"webkit_css.js\",\n\n    // Top-level namespaces\n    \"google.js\",\n\n    \"deprecated.js\",\n    \"fileapi.js\",\n    \"flash.js\",\n    \"gears_symbols.js\",\n    \"gears_types.js\",\n    \"gecko_xml.js\",\n    \"html5.js\",\n    \"ie_vml.js\",\n    \"iphone.js\",\n    \"webstorage.js\",\n    \"w3c_css3d.js\",\n    \"w3c_elementtraversal.js\",\n    \"w3c_geolocation.js\",\n    \"w3c_indexeddb.js\",\n    \"w3c_range.js\",\n    \"w3c_selectors.js\",\n    \"w3c_xml.js\",\n    \"window.js\",\n    \"webkit_notifications.js\",\n    \"webgl.js\");",
        "begin_line": 651,
        "end_line": 699,
        "comment": " The externs expected in externs.zip, in sorted order."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER",
        "snippet": "  private static final String ESTIMATED_IDENTIFIER = \"ab\";",
        "begin_line": 29,
        "end_line": 29,
        "comment": " For now simply assume identifiers are 2 characters."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineCostEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.InlineCostEstimator.ESTIMATED_IDENTIFIER_COST",
        "snippet": "  static final int ESTIMATED_IDENTIFIER_COST = ESTIMATED_IDENTIFIER.length();",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.maxCost",
        "snippet": "    private int maxCost;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.cost",
        "snippet": "    private int cost = 0;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.last",
        "snippet": "    private char last = '\\0';",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompiledSizeEstimator",
        "src_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
        "signature": "com.google.javascript.jscomp.CompiledSizeEstimator.continueProcessing",
        "snippet": "    private boolean continueProcessing = true;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.logger",
        "snippet": "  private static final Logger logger =\n    Logger.getLogger(CrossModuleMethodMotion.class.getName());",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.NULL_COMMON_MODULE_ERROR",
        "snippet": "  static final DiagnosticType NULL_COMMON_MODULE_ERROR = DiagnosticType.error(\n      \"JSC_INTERNAL_ERROR_MODULE_DEPEND\",\n      \"null deepest common module\");",
        "begin_line": 41,
        "end_line": 43,
        "comment": " Internal errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.idGenerator",
        "snippet": "  private final IdGenerator idGenerator;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.analyzer",
        "snippet": "  private final AnalyzePrototypeProperties analyzer;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.STUB_METHOD_NAME",
        "snippet": "  static final String STUB_METHOD_NAME = \"JSCompiler_stubMethod\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.UNSTUB_METHOD_NAME",
        "snippet": "  static final String UNSTUB_METHOD_NAME = \"JSCompiler_unstubMethod\";",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleMethodMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleMethodMotion.STUB_DECLARATIONS",
        "snippet": "  static final String STUB_DECLARATIONS =\n      \"var JSCompiler_stubMap = [];\" +\n      \"function JSCompiler_stubMethod(JSCompiler_stubMethod_id) {\" +\n      \"  return function() {\" +\n      \"    return JSCompiler_stubMap[JSCompiler_stubMethod_id].apply(\" +\n      \"        this, arguments);\" +\n      \"  };\" +\n      \"}\" +\n      \"function JSCompiler_unstubMethod(\" +\n      \"    JSCompiler_unstubMethod_id, JSCompiler_unstubMethod_body) {\" +\n      \"  return JSCompiler_stubMap[JSCompiler_unstubMethod_id] = \" +\n      \"      JSCompiler_unstubMethod_body;\" +\n      \"}\";",
        "begin_line": 54,
        "end_line": 66,
        "comment": " Visible for testing"
    },
    {
        "class_name": "com.google.javascript.jscomp.IdGenerator",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.IdGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 0L;",
        "begin_line": 201,
        "end_line": 201,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IdGenerator",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleMethodMotion.java",
        "signature": "com.google.javascript.jscomp.IdGenerator.currentId",
        "snippet": "    private int currentId = 0;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n     * Ids for cross-module method stubbing, so that each method has\n     * a unique id.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.generatePseudoNames",
        "snippet": "  private final boolean generatePseudoNames;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.prevUsedPropertyMap",
        "snippet": "  private final VariableMap prevUsedPropertyMap;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Property renaming map from a previous compilation. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.stringNodesToRename",
        "snippet": "  private final List<Node> stringNodesToRename = new ArrayList<Node>();",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.callNodeToParentMap",
        "snippet": "  private final Map<Node, Node> callNodeToParentMap =\n      new HashMap<Node, Node>();",
        "begin_line": 75,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.propertyMap",
        "snippet": "  private final Map<String, Property> propertyMap =\n      new HashMap<String, Property>();",
        "begin_line": 80,
        "end_line": 81,
        "comment": " Map from property name to Property object"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.affinityGraph",
        "snippet": "  private final UndiGraph<Property, PropertyAffinity> affinityGraph;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n   * A graph of property affinity information.\n   *\n   * Suppose property X and Y are access in the same function N times.\n   *\n   * The graph would have X -> Y with the edge of N.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.externedNames",
        "snippet": "  private final Set<String> externedNames = new HashSet<String>(\n      Arrays.asList(\"prototype\"));",
        "begin_line": 93,
        "end_line": 94,
        "comment": " Property names that don't get renamed"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.quotedNames",
        "snippet": "  private final Set<String> quotedNames = new HashSet<String>();",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Names to which properties shouldn't be renamed, to avoid name conflicts"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.FREQUENCY_COMPARATOR",
        "snippet": "  private static final Comparator<Property> FREQUENCY_COMPARATOR =\n    new Comparator<Property>() {\n      public int compare(Property p1, Property p2) {\n\n        /**\n         * First a frequently used names would always be picked first.\n         */\n        if (p1.numOccurrences != p2.numOccurrences) {\n          return p2.numOccurrences - p1.numOccurrences;\n\n        /**\n         * If both properties are used equally frequent. We'll let the property\n         * with a high affinity score get a name first.\n         *\n         * see #computeAffinityScores() for how the score is computed.\n         */\n        } else if (p1.affinityScore != p2.affinityScore) {\n          return p2.affinityScore - p1.affinityScore;\n        }\n\n        /**\n         * Finally, for determinism, we compare them based on the old name.\n         */\n        return p1.oldName.compareTo(p2.oldName);\n       }\n    };",
        "begin_line": 99,
        "end_line": 124,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME",
        "snippet": "  static final String RENAME_PROPERTY_FUNCTION_NAME =\n      \"JSCompiler_renameProperty\";",
        "begin_line": 134,
        "end_line": 135,
        "comment": "\n   * The name of a special function that this pass replaces. It takes one\n   * argument: a string literal containing one or more dot-separated JS\n   * identifiers. This pass will replace them as though they were JS property\n   * references. Here are two examples:\n   *    JSCompiler_renameProperty('propertyName') -> 'jYq'\n   *    JSCompiler_renameProperty('myProp.nestedProp.innerProp') -> 'e4.sW.C$'\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.BAD_CALL",
        "snippet": "  static final DiagnosticType BAD_CALL = DiagnosticType.error(\n      \"JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_CALL\",\n      \"Bad \" + RENAME_PROPERTY_FUNCTION_NAME + \" call - \" +\n      \"argument must be a string literal\");",
        "begin_line": 137,
        "end_line": 140,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.RenameProperties.BAD_ARG",
        "snippet": "  static final DiagnosticType BAD_ARG = DiagnosticType.error(\n      \"JSC_BAD_RENAME_PROPERTY_FUNCTION_NAME_ARG\",\n      \"Bad \" + RENAME_PROPERTY_FUNCTION_NAME + \" argument - \" +\n      \"'{0}' is not a valid JavaScript identifier\");",
        "begin_line": 142,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessProperties",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.ProcessProperties.currentHighAffinityProperties",
        "snippet": "    private Set<Property> currentHighAffinityProperties = null;",
        "begin_line": 402,
        "end_line": 402,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.oldName",
        "snippet": "    final String oldName;",
        "begin_line": 567,
        "end_line": 567,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.newName",
        "snippet": "    String newName;",
        "begin_line": 568,
        "end_line": 568,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.numOccurrences",
        "snippet": "    int numOccurrences;",
        "begin_line": 569,
        "end_line": 569,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Property",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.Property.affinityScore",
        "snippet": "    int affinityScore = 0;",
        "begin_line": 570,
        "end_line": 570,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropertyAffinity",
        "src_path": "src/com/google/javascript/jscomp/RenameProperties.java",
        "signature": "com.google.javascript.jscomp.PropertyAffinity.affinity",
        "snippet": "    private int affinity = 0;",
        "begin_line": 579,
        "end_line": 579,
        "comment": " This will forever be zero if no affinity information was gathered."
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.logger",
        "snippet": "  private static final Logger logger =\n    Logger.getLogger(UnreachableCodeElimination.class.getName());",
        "begin_line": 49,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.removeNoOpStatements",
        "snippet": "  private final boolean removeNoOpStatements;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.cfgStack",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgStack =\n      new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 55,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.UnreachableCodeElimination",
        "src_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
        "signature": "com.google.javascript.jscomp.UnreachableCodeElimination.curCfg",
        "snippet": "  ControlFlowGraph<Node> curCfg = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_UNKNOWN",
        "snippet": "    public static final int VERSION_UNKNOWN =   -1;",
        "begin_line": 78,
        "end_line": 78,
        "comment": "\n     * The unknown version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_DEFAULT",
        "snippet": "    public static final int VERSION_DEFAULT =    0;",
        "begin_line": 83,
        "end_line": 83,
        "comment": "\n     * The default version.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_0",
        "snippet": "    public static final int VERSION_1_0 =      100;",
        "begin_line": 88,
        "end_line": 88,
        "comment": "\n     * JavaScript 1.0\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_1",
        "snippet": "    public static final int VERSION_1_1 =      110;",
        "begin_line": 93,
        "end_line": 93,
        "comment": "\n     * JavaScript 1.1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_2",
        "snippet": "    public static final int VERSION_1_2 =      120;",
        "begin_line": 98,
        "end_line": 98,
        "comment": "\n     * JavaScript 1.2\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_3",
        "snippet": "    public static final int VERSION_1_3 =      130;",
        "begin_line": 103,
        "end_line": 103,
        "comment": "\n     * JavaScript 1.3\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_4",
        "snippet": "    public static final int VERSION_1_4 =      140;",
        "begin_line": 108,
        "end_line": 108,
        "comment": "\n     * JavaScript 1.4\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_5",
        "snippet": "    public static final int VERSION_1_5 =      150;",
        "begin_line": 113,
        "end_line": 113,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.VERSION_1_6",
        "snippet": "    public static final int VERSION_1_6 =      160;",
        "begin_line": 118,
        "end_line": 118,
        "comment": "\n     * JavaScript 1.5\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_NON_ECMA_GET_YEAR",
        "snippet": "    public static final int FEATURE_NON_ECMA_GET_YEAR = 1;",
        "begin_line": 127,
        "end_line": 127,
        "comment": "\n     * Controls behaviour of <tt>Date.prototype.getYear()</tt>.\n     * If <tt>hasFeature(FEATURE_NON_ECMA_GET_YEAR)</tt> returns true,\n     * Date.prototype.getYear subtructs 1900 only if 1900 <= date < 2000.\n     * The default behavior of {@link #hasFeature(int)} is always to subtruct\n     * 1900 as rquired by ECMAScript B.2.4.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME",
        "snippet": "    public static final int FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME = 2;",
        "begin_line": 138,
        "end_line": 138,
        "comment": "\n     * Control if member expression as function name extension is available.\n     * If <tt>hasFeature(FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME)</tt> returns\n     * true, allow <tt>function memberExpression(args) { body }</tt> to be\n     * syntax sugar for <tt>memberExpression = function(args) { body }</tt>,\n     * when memberExpression is not a simple identifier.\n     * See ECMAScript-262, section 11.2 for definition of memberExpression.\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER",
        "snippet": "    public static final int FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER = 3;",
        "begin_line": 148,
        "end_line": 148,
        "comment": "\n     * Control if reserved keywords are treated as identifiers.\n     * If <tt>hasFeature(RESERVED_KEYWORD_AS_IDENTIFIER)</tt> returns true,\n     * treat future reserved keyword (see  Ecma-262, section 7.5.3) as ordinary\n     * identifiers but warn about this usage.\n     *\n     * By default {@link #hasFeature(int)} returns false.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_TO_STRING_AS_SOURCE",
        "snippet": "    public static final int FEATURE_TO_STRING_AS_SOURCE = 4;",
        "begin_line": 161,
        "end_line": 161,
        "comment": "\n     * Control if <tt>toString()</tt> should returns the same result\n     * as  <tt>toSource()</tt> when applied to objects and arrays.\n     * If <tt>hasFeature(FEATURE_TO_STRING_AS_SOURCE)</tt> returns true,\n     * calling <tt>toString()</tt> on JS objects gives the same result as\n     * calling <tt>toSource()</tt>. That is it returns JS source with code\n     * to create an object with all enumeratable fields of the original object.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true only if\n     * the current JS version is set to {@link #VERSION_1_2}.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_PARENT_PROTO_PROPRTIES",
        "snippet": "    public static final int FEATURE_PARENT_PROTO_PROPRTIES = 5;",
        "begin_line": 179,
        "end_line": 179,
        "comment": "\n     * Control if properties <tt>__proto__</tt> and <tt>__parent__</tt>\n     * are treated specially.\n     * If <tt>hasFeature(FEATURE_PARENT_PROTO_PROPRTIES)</tt> returns true,\n     * treat <tt>__parent__</tt> and <tt>__proto__</tt> as special properties.\n     * <p>\n     * The properties allow to query and set scope and prototype chains for the\n     * objects. The special meaning of the properties is available\n     * only when they are used as the right hand side of the dot operator.\n     * For example, while <tt>x.__proto__ = y</tt> changes the prototype\n     * chain of the object <tt>x</tt> to point to <tt>y</tt>,\n     * <tt>x[\"__proto__\"] = y</tt> simply assigns a new value to the property\n     * <tt>__proto__</tt> in <tt>x</tt> even when the feature is on.\n     *\n     * By default {@link #hasFeature(int)} returns true.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_E4X",
        "snippet": "    public static final int FEATURE_E4X = 6;",
        "begin_line": 190,
        "end_line": 190,
        "comment": "\n     * Control if support for E4X(ECMAScript for XML) extension is available.\n     * If hasFeature(FEATURE_E4X) returns true, the XML syntax is available.\n     * <p>\n     * By default {@link #hasFeature(int)} returns true if\n     * the current JS version is set to {@link #VERSION_DEFAULT}\n     * or is greater then {@link #VERSION_1_6}.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_DYNAMIC_SCOPE",
        "snippet": "    public static final int FEATURE_DYNAMIC_SCOPE = 7;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n     * Control if dynamic scope should be used for name access.\n     * If hasFeature(FEATURE_DYNAMIC_SCOPE) returns true, then the name lookup\n     * during name resolution will use the top scope of the script or function\n     * which is at the top of JS execution stack instead of the top scope of the\n     * script or function from the current stack frame if the top scope of\n     * the top stack frame contains the top scope of the current stack frame\n     * on its prototype chain.\n     * <p>\n     * This is useful to define shared scope containing functions that can\n     * be called from scripts and functions using private scopes.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_VARS",
        "snippet": "    public static final int FEATURE_STRICT_VARS = 8;",
        "begin_line": 219,
        "end_line": 219,
        "comment": "\n     * Control if strict variable mode is enabled.\n     * When the feature is on Rhino reports runtime errors if assignment\n     * to a global variable that does not exist is executed. When the feature\n     * is off such assignments creates new variable in the global scope  as\n     * required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_EVAL",
        "snippet": "    public static final int FEATURE_STRICT_EVAL = 9;",
        "begin_line": 231,
        "end_line": 231,
        "comment": "\n     * Control if strict eval mode is enabled.\n     * When the feature is on Rhino reports runtime errors if non-string\n     * argument is passed to the eval function. When the feature is off\n     * eval simply return non-string argument as is without performing any\n     * evaluation as required by ECMA 262.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 1\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_LOCATION_INFORMATION_IN_ERROR",
        "snippet": "    public static final int FEATURE_LOCATION_INFORMATION_IN_ERROR = 10;",
        "begin_line": 248,
        "end_line": 248,
        "comment": "\n     * When the feature is on Rhino will add a \"fileName\" and \"lineNumber\"\n     * properties to Error objects automatically. When the feature is off, you\n     * have to explicitly pass them as the second and third argument to the\n     * Error constructor. Note that neither behaviour is fully ECMA 262\n     * compliant (as 262 doesn't specify a three-arg constructor), but keeping\n     * the feature off results in Error objects that don't have\n     * additional non-ECMA properties when constructed using the ECMA-defined\n     * single-arg constructor and is thus desirable if a stricter ECMA\n     * compliance is desired, specifically adherence to the point 15.11.5. of\n     * the standard.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_STRICT_MODE",
        "snippet": "    public static final int FEATURE_STRICT_MODE = 11;",
        "begin_line": 259,
        "end_line": 259,
        "comment": "\n     * Controls whether JS 1.5 'strict mode' is enabled.\n     * When the feature is on, Rhino reports more than a dozen different\n     * warnings.  When the feature is off, these warnings are not generated.\n     * FEATURE_STRICT_MODE implies FEATURE_STRICT_VARS and FEATURE_STRICT_EVAL.\n     * <p>\n     * By default {@link #hasFeature(int)} returns false.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.FEATURE_WARNING_AS_ERROR",
        "snippet": "    public static final int FEATURE_WARNING_AS_ERROR = 12;",
        "begin_line": 265,
        "end_line": 265,
        "comment": "\n     * Controls whether a warning should be treated as an error.\n     * @since 1.6 Release 6\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.languageVersionProperty",
        "snippet": "    public static final String languageVersionProperty = \"language version\";",
        "begin_line": 267,
        "end_line": 267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporterProperty",
        "snippet": "    public static final String errorReporterProperty   = \"error reporter\";",
        "begin_line": 268,
        "end_line": 268,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = ScriptRuntime.emptyArgs;",
        "begin_line": 273,
        "end_line": 273,
        "comment": "\n     * Convinient value to use as zero-length array of objects.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.threadContexts",
        "snippet": "    private static ThreadLocal<Context> threadContexts\n        = new ThreadLocal<Context>();",
        "begin_line": 407,
        "end_line": 408,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.implementationVersion",
        "snippet": "    private static String implementationVersion;",
        "begin_line": 1154,
        "end_line": 1154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.sealKey",
        "snippet": "    private Object sealKey;",
        "begin_line": 1157,
        "end_line": 1157,
        "comment": "     private boolean sealed;"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.iterating",
        "snippet": "    ObjToIntMap iterating;",
        "begin_line": 1162,
        "end_line": 1162,
        "comment": " Use ObjToIntMap instead of java.util.HashSet for JDK 1.1 compatibility"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.interpreterSecurityDomain",
        "snippet": "    Object interpreterSecurityDomain;",
        "begin_line": 1164,
        "end_line": 1164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.version",
        "snippet": "    int version;",
        "begin_line": 1166,
        "end_line": 1166,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.errorReporter",
        "snippet": "    private ErrorReporter errorReporter;",
        "begin_line": 1168,
        "end_line": 1168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.locale",
        "snippet": "    private Locale locale;",
        "begin_line": 1169,
        "end_line": 1169,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebug",
        "snippet": "    private boolean generatingDebug;",
        "begin_line": 1170,
        "end_line": 1170,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingDebugChanged",
        "snippet": "    private boolean generatingDebugChanged;",
        "begin_line": 1171,
        "end_line": 1171,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.generatingSource",
        "snippet": "    private boolean generatingSource=true;",
        "begin_line": 1172,
        "end_line": 1172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.compileFunctionsWithDynamicScopeFlag",
        "snippet": "    boolean compileFunctionsWithDynamicScopeFlag;",
        "begin_line": 1173,
        "end_line": 1173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.useDynamicScope",
        "snippet": "    boolean useDynamicScope;",
        "begin_line": 1174,
        "end_line": 1174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.debuggerData",
        "snippet": "    private Object debuggerData;",
        "begin_line": 1175,
        "end_line": 1175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.enterCount",
        "snippet": "    private int enterCount;",
        "begin_line": 1176,
        "end_line": 1176,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.optimizationLevel",
        "snippet": "    private int optimizationLevel;",
        "begin_line": 1177,
        "end_line": 1177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.propertyListeners",
        "snippet": "    private Object propertyListeners;",
        "begin_line": 1178,
        "end_line": 1178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.hashtable",
        "snippet": "    private Hashtable<Object, Object> hashtable;",
        "begin_line": 1179,
        "end_line": 1179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.activationNames",
        "snippet": "    Hashtable<Object, Object> activationNames;",
        "begin_line": 1185,
        "end_line": 1185,
        "comment": "\n     * This is the list of names of objects forcing the creation of\n     * function activation records.\n     "
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.lastInterpreterFrame",
        "snippet": "    Object lastInterpreterFrame;",
        "begin_line": 1188,
        "end_line": 1188,
        "comment": " For the interpreter to store the last frame for error reports etc."
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.previousInterpreterInvocations",
        "snippet": "    ObjArray previousInterpreterInvocations;",
        "begin_line": 1192,
        "end_line": 1192,
        "comment": " interpreter invocations"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionCount",
        "snippet": "    int instructionCount;",
        "begin_line": 1195,
        "end_line": 1195,
        "comment": " For instruction counting (interpreter only)"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.instructionThreshold",
        "snippet": "    int instructionThreshold;",
        "begin_line": 1196,
        "end_line": 1196,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchIndex",
        "snippet": "    int scratchIndex;",
        "begin_line": 1199,
        "end_line": 1199,
        "comment": " It can be used to return the second index-like result from function"
    },
    {
        "class_name": "com.google.javascript.rhino.Context",
        "src_path": "src/com/google/javascript/rhino/Context.java",
        "signature": "com.google.javascript.rhino.Context.scratchUint32",
        "snippet": "    long scratchUint32;",
        "begin_line": 1202,
        "end_line": 1202,
        "comment": " It can be used to return the second uint32 result from function"
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.nodes",
        "snippet": "    private final Map<Node, Node> nodes = Maps.newHashMap();",
        "begin_line": 80,
        "end_line": 80,
        "comment": " List of nodes to alias (e.g. all 'null' nodes). "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.isAliased",
        "snippet": "    private boolean isAliased = false;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n     * Have we declared the alias (e.g. did we inject var\n     * $$ALIAS_NULL=null; into the parse tree)?\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.aliasName",
        "snippet": "    private String aliasName;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSpecification",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasSpecification.tokenId",
        "snippet": "    private int tokenId;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_NULL",
        "snippet": "  static final String ALIAS_NULL = \"JSCompiler_alias_NULL\";",
        "begin_line": 300,
        "end_line": 300,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_TRUE",
        "snippet": "  static final String ALIAS_TRUE = \"JSCompiler_alias_TRUE\";",
        "begin_line": 301,
        "end_line": 301,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_FALSE",
        "snippet": "  static final String ALIAS_FALSE = \"JSCompiler_alias_FALSE\";",
        "begin_line": 302,
        "end_line": 302,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_THROW",
        "snippet": "  static final String ALIAS_THROW = \"JSCompiler_alias_THROW\";",
        "begin_line": 303,
        "end_line": 303,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.ALIAS_VOID",
        "snippet": "  static final String ALIAS_VOID = \"JSCompiler_alias_VOID\";",
        "begin_line": 304,
        "end_line": 304,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL",
        "snippet": "  static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL = 6;",
        "begin_line": 328,
        "end_line": 328,
        "comment": "\n   * Don't alias a keyword unless it's referenced at least\n   * MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL times. Aliasing a keyword has a\n   * cost (e.g. 'var XX=true;' costs 12 bytes). We make up for this\n   * cost by replacing references to the keyword with variables that\n   * have shorter names. If there are only a few references to a\n   * keyword, the cost outweighs the benefit. It is not possible to\n   * determine the exact break-even point without compiling twice\n   * (once with aliasing, another without) and comparing the\n   * post-gzipped size, so we define a minimum number of references\n   * required in order to alias. We choose 6 because the alias cost is\n   * ~7-12 bytes (12 bytes for 'var XX=true;', 7 bytes for a\n   * subsequent declaration that does not require its own 'var ' or\n   * semicolon, e.g. var XX=true,XY=null;), but each reference saves\n   * 2-3 bytes (2 for true and null, 3 for false). Thus, the break\n   * even point is 3 at best, and 6 at worst. We could use a\n   * CostEstimator to be precise, but requiring a constant number of\n   * occurrences is much simpler, and the added precision of a\n   * CostEstimator would save us <10 bytes for some unlikely edge\n   * cases (e.g. where false is referenced exactly 5 times, but does\n   * not get aliased).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW",
        "snippet": "  static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW =\n      estimateMinOccurrencesRequriedToAlias();",
        "begin_line": 334,
        "end_line": 335,
        "comment": "\n   * Don't alias throw statements unless throw is used at least\n   * MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW times.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 338,
        "end_line": 338,
        "comment": " Reference to JS Compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.aliasSpecifications",
        "snippet": "  private final List<AliasSpecification> aliasSpecifications;",
        "begin_line": 343,
        "end_line": 343,
        "comment": " List of alias specifications, stored in order which transformations\n   * should be applied. See {@link #createAliasSpecifications}.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.aliasTypes",
        "snippet": "  private final Map<Integer, AliasSpecification> aliasTypes;",
        "begin_line": 346,
        "end_line": 346,
        "comment": " Map from rhino nodes to the corresponding AliasSpecification "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasKeywords",
        "src_path": "src/com/google/javascript/jscomp/AliasKeywords.java",
        "signature": "com.google.javascript.jscomp.AliasKeywords.aliasNames",
        "snippet": "  private final Set<String> aliasNames;",
        "begin_line": 349,
        "end_line": 349,
        "comment": " Set of alias names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.UNREACHABLE_CODE",
        "snippet": "  static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error(\n      \"JSC_UNREACHABLE_CODE\", \"unreachable code\");",
        "begin_line": 36,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckUnreachableCode",
        "src_path": "src/com/google/javascript/jscomp/CheckUnreachableCode.java",
        "signature": "com.google.javascript.jscomp.CheckUnreachableCode.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.VoidType",
        "src_path": "src/com/google/javascript/rhino/jstype/VoidType.java",
        "signature": "com.google.javascript.rhino.jstype.VoidType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.source",
        "snippet": "  private final SourceExcerptProvider source;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.colorize",
        "snippet": "  private boolean colorize;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.SUPPORTED_COLOR_TERMINALS",
        "snippet": "  private static final Set<String> SUPPORTED_COLOR_TERMINALS =\n      ImmutableSet.of(\"xterm\",\n                      \"xterm-color\",\n                      \"xterm-256color\",\n                      \"screen-bce\");",
        "begin_line": 47,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractMessageFormatter",
        "src_path": "src/com/google/javascript/jscomp/AbstractMessageFormatter.java",
        "signature": "com.google.javascript.jscomp.AbstractMessageFormatter.controlCharacter",
        "snippet": "    private final String controlCharacter;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(CrossModuleCodeMotion.class.getName());",
        "begin_line": 42,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.graph",
        "snippet": "  private final JSModuleGraph graph;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.moduleVarParentMap",
        "snippet": "  private final Map<JSModule, Node> moduleVarParentMap =\n      new HashMap<JSModule, Node>();",
        "begin_line": 52,
        "end_line": 53,
        "comment": "\n   * Map from module to the node in that module that should parent any string\n   * variable declarations that have to be moved into that module\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CrossModuleCodeMotion",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.CrossModuleCodeMotion.namedInfo",
        "snippet": "  private final Map<Scope.Var, NamedInfo> namedInfo =\n      new LinkedHashMap<Var, NamedInfo>();",
        "begin_line": 59,
        "end_line": 60,
        "comment": "\n   * NOTE - I made this a LinkedHashMap to make testing easier. With a regular\n   * HashMap, the variables may not output in a consistent order\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.allowMove",
        "snippet": "    boolean allowMove = true;",
        "begin_line": 134,
        "end_line": 134,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.deepestModule",
        "snippet": "    private JSModule deepestModule = null;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " The deepest module where the variable is used. Starts at null"
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.declModule",
        "snippet": "    private JSModule declModule = null;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " The module where declarations appear"
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedInfo",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.NamedInfo.declarations",
        "snippet": "    private final Deque<Declaration> declarations =\n        new ArrayDeque<Declaration>();",
        "begin_line": 143,
        "end_line": 144,
        "comment": " information on the spot where the item was declared"
    },
    {
        "class_name": "com.google.javascript.jscomp.Declaration",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.Declaration.module",
        "snippet": "    final JSModule module;",
        "begin_line": 188,
        "end_line": 188,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Declaration",
        "src_path": "src/com/google/javascript/jscomp/CrossModuleCodeMotion.java",
        "signature": "com.google.javascript.jscomp.Declaration.node",
        "snippet": "    final Node node;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.AND_PRECEDENCE",
        "snippet": "  private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.OR_PRECEDENCE",
        "snippet": "  private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.NOT_PRECEDENCE",
        "snippet": "  private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.late",
        "snippet": "  private final boolean late;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.STRING_SPLIT_OVERHEAD",
        "snippet": "  private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.INVALID_REGULAR_EXPRESSION_FLAGS",
        "snippet": "  static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n    DiagnosticType.error(\n        \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n        \"Invalid flags to RegExp constructor: {0}\");",
        "begin_line": 47,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.DONT_TRAVERSE_FUNCTIONS_PREDICATE",
        "snippet": "  static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE\n      = new Predicate<Node>() {\n    @Override\n    public boolean apply(Node input) {\n      return input.getType() != Token.FUNCTION;\n    }\n  };",
        "begin_line": 52,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.STANDARD_OBJECT_CONSTRUCTORS",
        "snippet": "  private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =\n    // String, Number, and Boolean functions return non-object types, whereas\n    // new String, new Number, and new Boolean return object types, so don't\n    // include them here.\n    ImmutableSet.of(\n      \"Object\",\n      \"Array\",\n      \"RegExp\",\n      \"Error\"\n      );",
        "begin_line": 1206,
        "end_line": 1215,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax",
        "src_path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
        "signature": "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax.REGEXP_FLAGS_RE",
        "snippet": "  private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");",
        "begin_line": 1451,
        "end_line": 1451,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",
        "snippet": "  static final String SUSPICIOUS_COMMENT_WARNING =\n      \"Non-JSDoc comment has annotations. \" +\n      \"Did you mean to start it with '/**'?\";",
        "begin_line": 81,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceString",
        "snippet": "  private final String sourceString;",
        "begin_line": 85,
        "end_line": 85,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceFile",
        "snippet": "  private final StaticSourceFile sourceFile;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.config",
        "snippet": "  private final Config config;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.errorReporter",
        "snippet": "  private final ErrorReporter errorReporter;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.transformDispatcher",
        "snippet": "  private final TransformDispatcher transformDispatcher;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",
        "snippet": "  private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet(\"use strict\");",
        "begin_line": 93,
        "end_line": 93,
        "comment": " non-static for thread safety"
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",
        "snippet": "  private static final Set<String> ES5_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\");",
        "begin_line": 95,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",
        "snippet": "  private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =\n      ImmutableSet.of(\n          // From Section 7.6.1.2\n          \"class\", \"const\", \"enum\", \"export\", \"extends\", \"import\", \"super\",\n          \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\",\n          \"public\", \"static\", \"yield\");",
        "begin_line": 99,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.reservedKeywords",
        "snippet": "  private final Set<String> reservedKeywords;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.rootNodeJsDocHolder",
        "snippet": "  Node rootNodeJsDocHolder = new Node(Token.SCRIPT);",
        "begin_line": 110,
        "end_line": 110,
        "comment": " and stored in JSDocInfo for placeholder node."
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileLevelJsDocBuilder",
        "snippet": "  Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =\n      rootNodeJsDocHolder.getJsDocBuilderForNode();",
        "begin_line": 111,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.fileOverviewInfo",
        "snippet": "  JSDocInfo fileOverviewInfo = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.IRFactory",
        "src_path": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "signature": "com.google.javascript.jscomp.parsing.IRFactory.templateNode",
        "snippet": "  private Node templateNode;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " memory footprint associated with these."
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.graph",
        "snippet": "  private final DiGraph<N, E> graph;",
        "begin_line": 34,
        "end_line": 34,
        "comment": " FixedPointGraphTraversal accepts them."
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.edgePredicate",
        "snippet": "  private final Predicate<EdgeTuple<N, E>> edgePredicate;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.GraphReachability",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.GraphReachability.REACHABLE",
        "snippet": "  public static final Annotation REACHABLE = new Annotation() {};",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.sourceNode",
        "snippet": "    public final N sourceNode;",
        "begin_line": 89,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.edge",
        "snippet": "    public final E edge;",
        "begin_line": 90,
        "end_line": 90,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.EdgeTuple",
        "src_path": "src/com/google/javascript/jscomp/graph/GraphReachability.java",
        "signature": "com.google.javascript.jscomp.graph.EdgeTuple.destNode",
        "snippet": "    public final N destNode;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineSimpleMethods",
        "src_path": "src/com/google/javascript/jscomp/InlineSimpleMethods.java",
        "signature": "com.google.javascript.jscomp.InlineSimpleMethods.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(InlineSimpleMethods.class.getName());",
        "begin_line": 55,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineSimpleMethods",
        "src_path": "src/com/google/javascript/jscomp/InlineSimpleMethods.java",
        "signature": "com.google.javascript.jscomp.InlineSimpleMethods.DUMMY_SIGNATURE_STORE",
        "snippet": "  static final MethodCompilerPass.SignatureStore DUMMY_SIGNATURE_STORE =\n      new MethodCompilerPass.SignatureStore() {\n        @Override\n        public void addSignature(\n            String functionName, Node functionNode, String sourceFile) {\n        }\n\n        @Override\n        public void removeSignature(String functionName) {\n        }\n\n        @Override\n        public void reset() {\n        }\n      };",
        "begin_line": 282,
        "end_line": 296,
        "comment": "\n   * A do-nothing signature store.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 72,
        "end_line": 72,
        "comment": "\n   * Implementation:\n   *\n   * This pass first perform a traversal to gather a list of Candidates that\n   * could be inlined using {@link GatherCandiates}.\n   *\n   * The second step involves verifying that each candidate is actually safe\n   * to inline with {@link Candidate#canInline()} and finally perform inlining\n   * using {@link Candidate#inlineVariable()}.\n   *\n   * The reason for the delayed evaluation of the candidates is because we\n   * need two separate dataflow result.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.candidates",
        "snippet": "  private List<Candidate> candidates;",
        "begin_line": 77,
        "end_line": 77,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.reachingDef",
        "snippet": "  private MustBeReachingVariableDef reachingDef;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.reachingUses",
        "snippet": "  private MaybeReachingVariableUse reachingUses;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlowSensitiveInlineVariables",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.FlowSensitiveInlineVariables.SIDE_EFFECT_PREDICATE",
        "snippet": "  private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n    new Predicate<Node>() {\n      @Override\n      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-sideeffect free\n        // function.\n        if (NodeUtil.isCall(n) && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (NodeUtil.isNew(n) && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }\n  };",
        "begin_line": 81,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.varName",
        "snippet": "    private final String varName;",
        "begin_line": 221,
        "end_line": 221,
        "comment": " Name of the variable."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.def",
        "snippet": "    private Node def;",
        "begin_line": 224,
        "end_line": 224,
        "comment": " Nodes related to the definition."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.defCfgNode",
        "snippet": "    private final Node defCfgNode;",
        "begin_line": 225,
        "end_line": 225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.use",
        "snippet": "    private final Node use;",
        "begin_line": 228,
        "end_line": 228,
        "comment": " Nodes related to the use."
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.useCfgNode",
        "snippet": "    private final Node useCfgNode;",
        "begin_line": 229,
        "end_line": 229,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Candidate",
        "src_path": "src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java",
        "signature": "com.google.javascript.jscomp.Candidate.numUseWithinUseCfgNode",
        "snippet": "    private int numUseWithinUseCfgNode;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " use in the CFG."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.name",
        "snippet": "  private String name = null;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.sourceNode",
        "snippet": "  private Node sourceNode = null;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.parametersNode",
        "snippet": "  private Node parametersNode = null;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.returnType",
        "snippet": "  private JSType returnType = null;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.typeOfThis",
        "snippet": "  private ObjectType typeOfThis = null;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.templateTypeName",
        "snippet": "  private String templateTypeName = null;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.inferredReturnType",
        "snippet": "  private boolean inferredReturnType = false;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isConstructor",
        "snippet": "  private boolean isConstructor = false;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionBuilder.isNativeType",
        "snippet": "  private boolean isNativeType = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.node",
        "snippet": "  final Node node;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.definition",
        "snippet": "  final Definition definition;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.module",
        "snippet": "  final JSModule module;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.inGlobalScope",
        "snippet": "  final boolean inGlobalScope;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionSite",
        "src_path": "src/com/google/javascript/jscomp/DefinitionSite.java",
        "signature": "com.google.javascript.jscomp.DefinitionSite.inExterns",
        "snippet": "  final boolean inExterns;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.cfg",
        "snippet": "  private ControlFlowGraph<Node> cfg;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPosition",
        "snippet": "  private Map<Node, Integer> astPosition;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.nodePriorities",
        "snippet": "  private Map<DiGraphNode<Node, Branch>, Integer> nodePriorities;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " TODO(nicksantos): should these be node annotations?"
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityComparator",
        "snippet": "  private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =\n      new Comparator<DiGraphNode<Node, Branch>>() {\n    @Override\n    public int compare(\n        DiGraphNode<Node, Branch> a, DiGraphNode<Node, Branch> b) {\n      return astPosition.get(a.getValue()) - astPosition.get(b.getValue());\n    }\n  };",
        "begin_line": 70,
        "end_line": 77,
        "comment": " they will often be executed first in the source program."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.astPositionCounter",
        "snippet": "  private int astPositionCounter;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.priorityCounter",
        "snippet": "  private int priorityCounter;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.shouldTraverseFunctions",
        "snippet": "  private final boolean shouldTraverseFunctions;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.edgeAnnotations",
        "snippet": "  private final boolean edgeAnnotations;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.root",
        "snippet": "  private Node root;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " on only the externs."
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.exceptionHandler",
        "snippet": "  private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n   * This stack captures the structure of nested TRY blocks. The top of the\n   * stack is the inner most TRY block. A FUNCTION node in this stack implies\n   * that the handler is determined by the caller of the function at runtime.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowAnalysis",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.ControlFlowAnalysis.finallyMap",
        "snippet": "  private final Multimap<Node, Node> finallyMap = HashMultimap.create();",
        "begin_line": 126,
        "end_line": 126,
        "comment": "\n   * This map is used to handle the follow of FINALLY. For example:\n   *\n   * while(x) {\n   *  try {\n   *    try {\n   *      break;\n   *    } catch (a) {\n   *    } finally {\n   *      foo();\n   *    }\n   *    fooFollow();\n   *  } catch (b) {\n   *  } finally {\n   *    bar();\n   *  }\n   *  barFollow();\n   * }\n   * END();\n   *\n   * In this case finallyMap will contain a map from:\n   *    first FINALLY -> bar()\n   *    second FINALLY -> END()\n   *\n   * When we are connecting foo() and bar() to to their respective follow, we\n   * must also look up this map and connect:\n   *   foo() -> bar()\n   *   bar() -> END\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AstControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
        "signature": "com.google.javascript.jscomp.AstControlFlowGraph.priorities",
        "snippet": "    private final Map<DiGraphNode<Node, Branch>, Integer> priorities;",
        "begin_line": 995,
        "end_line": 995,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.logger_",
        "snippet": "  private static final Logger logger_ = Logger.getLogger(JsAst.class.getName());",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.sourceFile",
        "snippet": "  private transient SourceFile sourceFile;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.fileName",
        "snippet": "  private String fileName;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JsAst",
        "src_path": "src/com/google/javascript/jscomp/JsAst.java",
        "signature": "com.google.javascript.jscomp.JsAst.root",
        "snippet": "  private Node root;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",
        "snippet": "  static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",
        "snippet": "  final static String JSC_PROPERTY_NAME_FN = \"JSCompiler_renameProperty\";",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
        "snippet": "  private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =\n      new HashSet<String>(Arrays.asList(\n        \"Array\",\n        \"Date\",\n        \"Error\",\n        \"Object\",\n        \"RegExp\",\n        \"XMLHttpRequest\"));",
        "begin_line": 56,
        "end_line": 63,
        "comment": " the set of builtin constructors that don't have side effects. "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\n          \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");",
        "begin_line": 904,
        "end_line": 906,
        "comment": " TODO(johnlenz): consider adding an extern annotation for this."
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
        "snippet": "  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n      ImmutableSet.of(\"toString\", \"valueOf\");",
        "begin_line": 907,
        "end_line": 908,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",
        "snippet": "  private static final Set<String> REGEXP_METHODS =\n      ImmutableSet.of(\"test\", \"exec\");",
        "begin_line": 909,
        "end_line": 910,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",
        "snippet": "  private static final Set<String> STRING_REGEXP_METHODS =\n      ImmutableSet.of(\"match\", \"replace\", \"search\", \"split\");",
        "begin_line": 911,
        "end_line": 912,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",
        "snippet": "  static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =\n      new NumbericResultPredicate();",
        "begin_line": 1206,
        "end_line": 1207,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",
        "snippet": "  static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =\n      new BooleanResultPredicate();",
        "begin_line": 1258,
        "end_line": 1259,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",
        "snippet": "  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n      new MayBeStringResultPredicate();",
        "begin_line": 1319,
        "end_line": 1320,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarCollector",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.VarCollector.vars",
        "snippet": "    final Map<String, Node> vars = Maps.newLinkedHashMap();",
        "begin_line": 2483,
        "end_line": 2483,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNameNode",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNameNode.name",
        "snippet": "    final String name;",
        "begin_line": 2587,
        "end_line": 2587,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MatchNodeType",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.MatchNodeType.type",
        "snippet": "    final int type;",
        "begin_line": 2603,
        "end_line": 2603,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeUtil",
        "src_path": "src/com/google/javascript/jscomp/NodeUtil.java",
        "signature": "com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",
        "snippet": "  static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();",
        "begin_line": 2633,
        "end_line": 2633,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.referenceMap",
        "snippet": "  private final Map<Var, ReferenceCollection> referenceMap =\n      Maps.newHashMap();",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n   * Maps a given variable to a collection of references to that name. Note that\n   * Var objects are not stable across multiple traversals (unlike scope root or\n   * name).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.blockStack",
        "snippet": "  private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();",
        "begin_line": 66,
        "end_line": 66,
        "comment": "\n   * The stack of basic blocks and scopes the current traversal is in.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.behavior",
        "snippet": "  private final Behavior behavior;",
        "begin_line": 71,
        "end_line": 71,
        "comment": "\n   * Source of behavior at various points in the traversal.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 76,
        "end_line": 76,
        "comment": "\n   * Javascript compiler to use in traversing.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.varFilter",
        "snippet": "  private final Predicate<Var> varFilter;",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\n   * Only collect references for filtered variables.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceMapWrapper",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceMapWrapper.referenceMap",
        "snippet": "    private final Map<Var, ReferenceCollection> referenceMap;",
        "begin_line": 246,
        "end_line": 246,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollectingCallback",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR",
        "snippet": "  static Behavior DO_NOTHING_BEHAVIOR = new Behavior() {\n    @Override\n    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {}\n  };",
        "begin_line": 269,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReferenceCollection",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.ReferenceCollection.references",
        "snippet": "    List<Reference> references = Lists.newArrayList();",
        "begin_line": 280,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.DECLARATION_PARENTS",
        "snippet": "    private static final Set<Integer> DECLARATION_PARENTS =\n        ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH);",
        "begin_line": 478,
        "end_line": 479,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.nameNode",
        "snippet": "    private final Node nameNode;",
        "begin_line": 481,
        "end_line": 481,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.basicBlock",
        "snippet": "    private final BasicBlock basicBlock;",
        "begin_line": 482,
        "end_line": 482,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.scope",
        "snippet": "    private final Scope scope;",
        "begin_line": 483,
        "end_line": 483,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.Reference.sourceFile",
        "snippet": "    private final StaticSourceFile sourceFile;",
        "begin_line": 484,
        "end_line": 484,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.parent",
        "snippet": "    private final BasicBlock parent;",
        "begin_line": 620,
        "end_line": 620,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.isHoisted",
        "snippet": "    private final boolean isHoisted;",
        "begin_line": 626,
        "end_line": 626,
        "comment": "\n     * Determines whether the block may not be part of the normal control flow,\n     * but instead \"hoisted\" to the top of the scope.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.isFunction",
        "snippet": "    private final boolean isFunction;",
        "begin_line": 631,
        "end_line": 631,
        "comment": "\n     * Whether this block denotes a function scope.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicBlock",
        "src_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
        "signature": "com.google.javascript.jscomp.BasicBlock.isLoop",
        "snippet": "    private final boolean isLoop;",
        "begin_line": 636,
        "end_line": 636,
        "comment": "\n     * Whether this block denotes a loop.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.KNOWN_DEFINES",
        "snippet": "  private static final Set<String> KNOWN_DEFINES =\n      Sets.newHashSet(\"COMPILED\");",
        "begin_line": 54,
        "end_line": 55,
        "comment": "\n   * Defines in this set will not be flagged with \"unknown define\" warnings.\n   * There are legacy flags that always set these defines, even when they\n   * might not be in the binary.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.dominantReplacements",
        "snippet": "  private final Map<String, Node> dominantReplacements;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.namespace",
        "snippet": "  private GlobalNamespace namespace = null;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.UNKNOWN_DEFINE_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_DEFINE_WARNING = DiagnosticType.warning(\n      \"JSC_UNKNOWN_DEFINE_WARNING\",\n      \"unknown @define variable {0}\");",
        "begin_line": 63,
        "end_line": 65,
        "comment": " Warnings"
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.INVALID_DEFINE_TYPE_ERROR",
        "snippet": "  static final DiagnosticType INVALID_DEFINE_TYPE_ERROR =\n    DiagnosticType.error(\n        \"JSC_INVALID_DEFINE_TYPE_ERROR\",\n        \"@define tag only permits literal types\");",
        "begin_line": 68,
        "end_line": 71,
        "comment": " Errors"
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.INVALID_DEFINE_INIT_ERROR",
        "snippet": "  static final DiagnosticType INVALID_DEFINE_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_DEFINE_INIT_ERROR\",\n          \"illegal initialization of @define variable {0}\");",
        "begin_line": 73,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.NON_GLOBAL_DEFINE_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_DEFINE_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_DEFINE_INIT_ERROR\",\n          \"@define variable {0} assignment must be global\");",
        "begin_line": 78,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.DEFINE_NOT_ASSIGNABLE_ERROR",
        "snippet": "  static final DiagnosticType DEFINE_NOT_ASSIGNABLE_ERROR =\n      DiagnosticType.error(\n          \"JSC_DEFINE_NOT_ASSIGNABLE_ERROR\",\n          \"@define variable {0} cannot be reassigned due to code at {1}.\");",
        "begin_line": 83,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.ProcessDefines.REASON_DEFINE_NOT_ASSIGNABLE",
        "snippet": "  private static final MessageFormat REASON_DEFINE_NOT_ASSIGNABLE =\n      new MessageFormat(\"line {0} of {1}\");",
        "begin_line": 88,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 222,
        "end_line": 222,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.assignableDefines",
        "snippet": "    private final Map<String, DefineInfo> assignableDefines;",
        "begin_line": 223,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.allDefines",
        "snippet": "    private final Map<String, DefineInfo> allDefines;",
        "begin_line": 224,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.allRefInfo",
        "snippet": "    private final Map<Node, RefInfo> allRefInfo;",
        "begin_line": 225,
        "end_line": 225,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.lvalueToRemoveLater",
        "snippet": "    private Node lvalueToRemoveLater = null;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " we're currently visiting one of the children of the assign."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectDefines",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.CollectDefines.assignAllowed",
        "snippet": "    private final Deque<Integer> assignAllowed;",
        "begin_line": 234,
        "end_line": 234,
        "comment": " a define is allowed. Otherwise, it's not allowed."
    },
    {
        "class_name": "com.google.javascript.jscomp.RefInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.RefInfo.ref",
        "snippet": "      final Ref ref;",
        "begin_line": 473,
        "end_line": 473,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RefInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.RefInfo.name",
        "snippet": "      final Name name;",
        "begin_line": 474,
        "end_line": 474,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.initialValueParent",
        "snippet": "    public final Node initialValueParent;",
        "begin_line": 489,
        "end_line": 489,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.initialValue",
        "snippet": "    public final Node initialValue;",
        "begin_line": 490,
        "end_line": 490,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.lastValue",
        "snippet": "    private Node lastValue;",
        "begin_line": 491,
        "end_line": 491,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.isAssignable",
        "snippet": "    private boolean isAssignable;",
        "begin_line": 492,
        "end_line": 492,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefineInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessDefines.java",
        "signature": "com.google.javascript.jscomp.DefineInfo.reasonNotAssignable",
        "snippet": "    private String reasonNotAssignable;",
        "begin_line": 493,
        "end_line": 493,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.nodes",
        "snippet": "  protected final Map<N, LinkedDirectedGraphNode<N, E>> nodes =\n      Maps.newHashMap();",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useNodeAnnotations",
        "snippet": "  private final boolean useNodeAnnotations;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraph",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraph.useEdgeAnnotations",
        "snippet": "  private final boolean useEdgeAnnotations;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.inEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> inEdgeList = Lists.newArrayList();",
        "begin_line": 335,
        "end_line": 335,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.outEdgeList",
        "snippet": "    List<DiGraphEdge<N, E>> outEdgeList =\n        Lists.newArrayList();",
        "begin_line": 336,
        "end_line": 337,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphNode.value",
        "snippet": "    protected final N value;",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.in",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> in = inEdgeList.iterator();",
        "begin_line": 403,
        "end_line": 403,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.NeighborIterator",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.NeighborIterator.out",
        "snippet": "      private final Iterator<DiGraphEdge<N, E>> out = outEdgeList.iterator();",
        "begin_line": 404,
        "end_line": 404,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphNode.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.sourceNode",
        "snippet": "    private DiGraphNode<N, E> sourceNode;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.destNode",
        "snippet": "    private DiGraphNode<N, E> destNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.LinkedDirectedGraphEdge.value",
        "snippet": "    protected final E value;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge",
        "src_path": "src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java",
        "signature": "com.google.javascript.jscomp.graph.AnnotatedLinkedDirectedGraphEdge.annotation",
        "snippet": "    protected Annotation annotation;",
        "begin_line": 558,
        "end_line": 558,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.group",
        "snippet": "  final DiagnosticGroup group;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroupWarningsGuard.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroupWarningsGuard.level",
        "snippet": "  final CheckLevel level;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.stripTweaks",
        "snippet": "  private final boolean stripTweaks;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.compilerDefaultValueOverrides",
        "snippet": "  private final SortedMap<String, Node> compilerDefaultValueOverrides;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.ID_MATCHER",
        "snippet": "  private static final CharMatcher ID_MATCHER = CharMatcher.inRange('a', 'z').\n      or(CharMatcher.inRange('A', 'Z')).or(CharMatcher.anyOf(\"0123456789_.\"));",
        "begin_line": 55,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.UNKNOWN_TWEAK_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_TWEAK_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNKNOWN_TWEAK_WARNING\",\n          \"no tweak registered with ID {0}\");",
        "begin_line": 59,
        "end_line": 62,
        "comment": " Warnings and Errors."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_MULTIPLY_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_MULTIPLY_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_MULTIPLY_REGISTERED_ERROR\",\n          \"Tweak {0} has already been registered.\");",
        "begin_line": 64,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType NON_LITERAL_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_LITERAL_TWEAK_ID_ERROR\",\n          \"tweak ID must be a string literal\");",
        "begin_line": 69,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_DEFAULT_VALUE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_INVALID_TWEAK_DEFAULT_VALUE_WARNING\",\n          \"tweak {0} registered with {1} must have a default value that is a \" +\n          \"literal of type {2}\");",
        "begin_line": 74,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.NON_GLOBAL_TWEAK_INIT_ERROR",
        "snippet": "  static final DiagnosticType NON_GLOBAL_TWEAK_INIT_ERROR =\n      DiagnosticType.error(\n          \"JSC_NON_GLOBAL_TWEAK_INIT_ERROR\",\n          \"tweak declaration {0} must occur in the global scope\");",
        "begin_line": 80,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR",
        "snippet": "  static final DiagnosticType TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR =\n      DiagnosticType.error(\n          \"JSC_TWEAK_OVERRIDE_AFTER_REGISTERED_ERROR\",\n          \"Cannot override the default value of tweak {0} after it has been \" +\n          \"registered\");",
        "begin_line": 85,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING",
        "snippet": "  static final DiagnosticType TWEAK_WRONG_GETTER_TYPE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_TWEAK_WRONG_GETTER_TYPE_WARNING\",\n          \"tweak getter function {0} used for tweak registered using {1}\");",
        "begin_line": 91,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.INVALID_TWEAK_ID_ERROR",
        "snippet": "  static final DiagnosticType INVALID_TWEAK_ID_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_TWEAK_ID_ERROR\",\n          \"tweak ID contains illegal characters. Only letters, numbers, _ \" +\n          \"and . are allowed\");",
        "begin_line": 96,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.name",
        "snippet": "    final String name;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.expectedTypeName",
        "snippet": "    final String expectedTypeName;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeA",
        "snippet": "    final int validNodeTypeA;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.validNodeTypeB",
        "snippet": "    final int validNodeTypeB;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.registerFunction",
        "snippet": "    final TweakFunction registerFunction;",
        "begin_line": 120,
        "end_line": 120,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.ProcessTweaks.TWEAK_FUNCTIONS_MAP",
        "snippet": "  private static final Map<String, TweakFunction> TWEAK_FUNCTIONS_MAP;",
        "begin_line": 185,
        "end_line": 185,
        "comment": " A map of function name -> TweakFunction."
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.tweakInfos",
        "snippet": "    final Map<String, TweakInfo> tweakInfos;",
        "begin_line": 325,
        "end_line": 325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaksResult",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaksResult.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls;",
        "begin_line": 326,
        "end_line": 326,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.allTweaks",
        "snippet": "    final Map<String, TweakInfo> allTweaks = Maps.newHashMap();",
        "begin_line": 339,
        "end_line": 339,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CollectTweaks",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.CollectTweaks.getOverridesCalls",
        "snippet": "    final List<TweakFunctionCall> getOverridesCalls = Lists.newArrayList();",
        "begin_line": 340,
        "end_line": 340,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.sourceName",
        "snippet": "    final String sourceName;",
        "begin_line": 432,
        "end_line": 432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.tweakFunc",
        "snippet": "    final TweakFunction tweakFunc;",
        "begin_line": 433,
        "end_line": 433,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 434,
        "end_line": 434,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakFunctionCall",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakFunctionCall.valueNode",
        "snippet": "    final Node valueNode;",
        "begin_line": 435,
        "end_line": 435,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.tweakId",
        "snippet": "    final String tweakId;",
        "begin_line": 459,
        "end_line": 459,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.functionCalls",
        "snippet": "    final List<TweakFunctionCall> functionCalls;",
        "begin_line": 460,
        "end_line": 460,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.registerCall",
        "snippet": "    TweakFunctionCall registerCall;",
        "begin_line": 461,
        "end_line": 461,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.TweakInfo",
        "src_path": "src/com/google/javascript/jscomp/ProcessTweaks.java",
        "signature": "com.google.javascript.jscomp.TweakInfo.defaultValueNode",
        "snippet": "    Node defaultValueNode;",
        "begin_line": 462,
        "end_line": 462,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.safeNameIdSupplier",
        "snippet": "  private final Supplier<String> safeNameIdSupplier;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.allowDecomposition",
        "snippet": "  private final boolean allowDecomposition;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.knownConstants",
        "snippet": "  private Set<String> knownConstants = Sets.newHashSet();",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.assumeStrictThis",
        "snippet": "  private final boolean assumeStrictThis;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.Reference.callNode",
        "snippet": "    final Node callNode;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.Reference.module",
        "snippet": "    final JSModule module;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.Reference.mode",
        "snippet": "    final InliningMode mode;",
        "begin_line": 84,
        "end_line": 84,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.NAME_COST_ESTIMATE",
        "snippet": "  private static final int NAME_COST_ESTIMATE =\n      InlineCostEstimator.ESTIMATED_IDENTIFIER_COST;",
        "begin_line": 99,
        "end_line": 100,
        "comment": "\n   * In order to estimate the cost of lining, we make the assumption that\n   * Identifiers are reduced 2 characters. For the call arguments, the important\n   * thing is that the cost is assumed to be the same in the call and the\n   * function, so the actual length doesn't matter in most cases.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.COMMA_COST",
        "snippet": "  private static final int COMMA_COST = 1;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The cost of a argument separator (a comma). "
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInjector",
        "src_path": "src/com/google/javascript/jscomp/FunctionInjector.java",
        "signature": "com.google.javascript.jscomp.FunctionInjector.PAREN_COST",
        "snippet": "  private static final int PAREN_COST = 2;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The cost of the parentheses needed to make a call."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.READ_ERROR",
        "snippet": "  static final DiagnosticType READ_ERROR = DiagnosticType.error(\n      \"JSC_READ_ERROR\", \"Cannot read: {0}\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCompiler",
        "src_path": "src/com/google/javascript/jscomp/AbstractCompiler.java",
        "signature": "com.google.javascript.jscomp.AbstractCompiler.stage",
        "snippet": "  private LifeCycleStage stage = LifeCycleStage.RAW;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlStructureCheck",
        "src_path": "src/com/google/javascript/jscomp/ControlStructureCheck.java",
        "signature": "com.google.javascript.jscomp.ControlStructureCheck.USE_OF_WITH",
        "snippet": "  static final DiagnosticType USE_OF_WITH = DiagnosticType.warning(\n      \"JSC_USE_OF_WITH\",\n      \"The use of the 'with' structure should be avoided.\");",
        "begin_line": 31,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " Reference to the JS compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.ABSTRACT_METHOD_NAME",
        "snippet": "  static final String ABSTRACT_METHOD_NAME = \"goog.abstractMethod\";",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Name used to denote an abstract function "
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.removeAbstractMethods",
        "snippet": "  private final boolean removeAbstractMethods;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.removeAssertionCalls",
        "snippet": "  private final boolean removeAssertionCalls;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.abstractMethodAssignmentNodes",
        "snippet": "  private final List<RemovableAssignment> abstractMethodAssignmentNodes =\n      Lists.newArrayList();",
        "begin_line": 64,
        "end_line": 65,
        "comment": "\n   * List of names referenced in successive generations of finding referenced\n   * nodes.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureCodeRemoval",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.ClosureCodeRemoval.assertionCalls",
        "snippet": "  private final List<Node> assertionCalls = Lists.newArrayList();",
        "begin_line": 70,
        "end_line": 70,
        "comment": "\n   * List of assertion functions.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.node",
        "snippet": "    final Node node;",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * The node\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.parent",
        "snippet": "    final Node parent;",
        "begin_line": 85,
        "end_line": 85,
        "comment": "\n     * Its parent\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.assignAncestors",
        "snippet": "    final List<Node> assignAncestors = Lists.newArrayList();",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * Full chain of ASSIGN ancestors\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.RemovableAssignment",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.RemovableAssignment.lastAncestor",
        "snippet": "    final Node lastAncestor;",
        "begin_line": 95,
        "end_line": 95,
        "comment": "\n     * The last ancestor\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.FindAssertionCalls",
        "src_path": "src/com/google/javascript/jscomp/ClosureCodeRemoval.java",
        "signature": "com.google.javascript.jscomp.FindAssertionCalls.assertionNames",
        "snippet": "    Set<String> assertionNames = Sets.newHashSet();",
        "begin_line": 162,
        "end_line": 162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Definition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.Definition.isExtern",
        "snippet": "    private final boolean isExtern;",
        "begin_line": 97,
        "end_line": 97,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IncompleteDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.IncompleteDefinition.ALLOWED_TYPES",
        "snippet": "    private static final Set<Integer> ALLOWED_TYPES =\n        ImmutableSet.of(Token.NAME, Token.GETPROP, Token.GETELEM);",
        "begin_line": 153,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.IncompleteDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.IncompleteDefinition.lValue",
        "snippet": "    private final Node lValue;",
        "begin_line": 155,
        "end_line": 155,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.FunctionDefinition.function",
        "snippet": "    protected final Node function;",
        "begin_line": 232,
        "end_line": 232,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.AssignmentDefinition.assignment",
        "snippet": "    private final Node assignment;",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.literal",
        "snippet": "    private final Node literal;",
        "begin_line": 323,
        "end_line": 323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.name",
        "snippet": "    private final Node name;",
        "begin_line": 324,
        "end_line": 324,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralPropertyDefinition.value",
        "snippet": "    private final Node value;",
        "begin_line": 325,
        "end_line": 325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VarDefinition",
        "src_path": "src/com/google/javascript/jscomp/DefinitionsRemover.java",
        "signature": "com.google.javascript.jscomp.VarDefinition.name",
        "snippet": "    private final Node name;",
        "begin_line": 372,
        "end_line": 372,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.PROPERTY",
        "snippet": "  private final SymbolType PROPERTY = SymbolType.PROPERTY;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " Constants for symbol types, for easier readability."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.VAR",
        "snippet": "  private final SymbolType VAR = SymbolType.VAR;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.canModifyExterns",
        "snippet": "  private final boolean canModifyExterns;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.anchorUnusedVars",
        "snippet": "  private final boolean anchorUnusedVars;",
        "begin_line": 60,
        "end_line": 60,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.moduleGraph",
        "snippet": "  private final JSModuleGraph moduleGraph;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.firstModule",
        "snippet": "  private final JSModule firstModule;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.IMPLICITLY_USED_PROPERTIES",
        "snippet": "  private static final Set<String> IMPLICITLY_USED_PROPERTIES =\n      ImmutableSet.of(\"length\", \"toString\", \"valueOf\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Properties that are implicitly used as part of the JS language."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.symbolGraph",
        "snippet": "  private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
        "begin_line": 84,
        "end_line": 85,
        "comment": " from scotch to age."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.globalNode",
        "snippet": "  private final NameInfo globalNode = new NameInfo(\"[global]\");",
        "begin_line": 88,
        "end_line": 88,
        "comment": " A dummy node for representing global references."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.externNode",
        "snippet": "  private final NameInfo externNode = new NameInfo(\"[extern]\");",
        "begin_line": 91,
        "end_line": 91,
        "comment": " A dummy node for representing extern references."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.anonymousNode",
        "snippet": "  private final NameInfo anonymousNode = new NameInfo(\"[anonymous]\");",
        "begin_line": 94,
        "end_line": 94,
        "comment": " A dummy node for representing all anonymous functions with no names."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.propertyNameInfo",
        "snippet": "  private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap();",
        "begin_line": 98,
        "end_line": 98,
        "comment": " of the property that they represent."
    },
    {
        "class_name": "com.google.javascript.jscomp.AnalyzePrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AnalyzePrototypeProperties.varNameInfo",
        "snippet": "  private final Map<String, NameInfo> varNameInfo = Maps.newHashMap();",
        "begin_line": 102,
        "end_line": 102,
        "comment": " gloval variable that it's assigned to."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessProperties",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.ProcessProperties.symbolStack",
        "snippet": "    private Stack<NameContext> symbolStack = new Stack<NameContext>();",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalFunction",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.GlobalFunction.nameNode",
        "snippet": "    private final Node nameNode;",
        "begin_line": 463,
        "end_line": 463,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalFunction",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.GlobalFunction.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 464,
        "end_line": 464,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AssignmentProperty.exprNode",
        "snippet": "    private final Node exprNode;",
        "begin_line": 522,
        "end_line": 522,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssignmentProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.AssignmentProperty.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 523,
        "end_line": 523,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.key",
        "snippet": "    private final Node key;",
        "begin_line": 565,
        "end_line": 565,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.value",
        "snippet": "    private final Node value;",
        "begin_line": 566,
        "end_line": 566,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.map",
        "snippet": "    private final Node map;",
        "begin_line": 567,
        "end_line": 567,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.assign",
        "snippet": "    private final Node assign;",
        "begin_line": 568,
        "end_line": 568,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LiteralProperty",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.LiteralProperty.module",
        "snippet": "    private final JSModule module;",
        "begin_line": 569,
        "end_line": 569,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameContext",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameContext.name",
        "snippet": "    final NameInfo name;",
        "begin_line": 606,
        "end_line": 606,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameContext",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameContext.scope",
        "snippet": "    Scope scope;",
        "begin_line": 607,
        "end_line": 607,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.name",
        "snippet": "    final String name;",
        "begin_line": 618,
        "end_line": 618,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.referenced",
        "snippet": "    private boolean referenced = false;",
        "begin_line": 620,
        "end_line": 620,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.declarations",
        "snippet": "    private final Deque<Symbol> declarations = new ArrayDeque<Symbol>();",
        "begin_line": 621,
        "end_line": 621,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.deepestCommonModuleRef",
        "snippet": "    private JSModule deepestCommonModuleRef = null;",
        "begin_line": 622,
        "end_line": 622,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInfo",
        "src_path": "src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.NameInfo.readClosureVariables",
        "snippet": "    private boolean readClosureVariables = false;",
        "begin_line": 626,
        "end_line": 626,
        "comment": " outer scope which isn't the global scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Package protected for tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.callback",
        "snippet": "  private final Callback callback;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.curNode",
        "snippet": "  private Node curNode;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " Contains the current node"
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",
        "snippet": "  public static final DiagnosticType NODE_TRAVERSAL_ERROR =\n      DiagnosticType.error(\"JSC_NODE_TRAVERSAL_ERROR\", \"{0}\");",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopes",
        "snippet": "  private final Deque<Scope> scopes = new ArrayDeque<Scope>();",
        "begin_line": 53,
        "end_line": 53,
        "comment": "\n   * Stack containing the Scopes that have been created. The Scope objects\n   * are lazily created; so the {@code scopeRoots} stack contains the\n   * Nodes for all Scopes that have not been created yet.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeRoots",
        "snippet": "  private final Deque<Node> scopeRoots = new ArrayDeque<Node>();",
        "begin_line": 59,
        "end_line": 59,
        "comment": "\n   * A stack of scope roots. All scopes that have not been created\n   * are represented in this Deque.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.cfgs",
        "snippet": "  Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();",
        "begin_line": 68,
        "end_line": 68,
        "comment": "\n   * Stack of control flow graphs (CFG). There is one CFG per scope. CFGs\n   * are lazily populated: elements are {@code null} until requested by\n   * {@link #getControlFlowGraph()}. Note that {@link ArrayDeque} does not allow\n   * {@code null} elements, so {@link LinkedList} is used instead.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The current source file name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCreator",
        "snippet": "  private ScopeCreator scopeCreator;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The scope creator "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.scopeCallback",
        "snippet": "  private ScopedCallback scopeCallback;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Possible callback for scope entry and exist *"
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.nodeTypes",
        "snippet": "    private final Set<Integer> nodeTypes;",
        "begin_line": 164,
        "end_line": 164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.AbstractNodeTypePruningCallback.include",
        "snippet": "    private final boolean include;",
        "begin_line": 165,
        "end_line": 165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeTraversal",
        "src_path": "src/com/google/javascript/jscomp/NodeTraversal.java",
        "signature": "com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",
        "snippet": "  private static final String MISSING_SOURCE = \"[source unknown]\";",
        "begin_line": 284,
        "end_line": 284,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.assertOnChange",
        "snippet": "  private final boolean assertOnChange;",
        "begin_line": 66,
        "end_line": 66,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.CONVERT_WHILE_TO_FOR",
        "snippet": "  private static final boolean CONVERT_WHILE_TO_FOR = true;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.MAKE_LOCAL_NAMES_UNIQUE",
        "snippet": "  static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Normalize",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.Normalize.CATCH_BLOCK_VAR_ERROR",
        "snippet": "  public static final DiagnosticType CATCH_BLOCK_VAR_ERROR =\n    DiagnosticType.error(\n        \"JSC_CATCH_BLOCK_VAR_ERROR\",\n        \"The use of scope variable {0} is not allowed within a catch block \" +\n        \"with a catch exception of the same name.\");",
        "begin_line": 70,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 157,
        "end_line": 157,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.PropagateConstantAnnotationsOverVars.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 158,
        "end_line": 158,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.compiler",
        "snippet": "    final private AbstractCompiler compiler;",
        "begin_line": 211,
        "end_line": 211,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.checkUserDeclarations",
        "snippet": "    final private boolean checkUserDeclarations;",
        "begin_line": 212,
        "end_line": 212,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VerifyConstants",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.VerifyConstants.constantMap",
        "snippet": "    private Map<String, Boolean> constantMap = Maps.newHashMap();",
        "begin_line": 229,
        "end_line": 229,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 294,
        "end_line": 294,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NormalizeStatements",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.NormalizeStatements.assertOnChange",
        "snippet": "    private final boolean assertOnChange;",
        "begin_line": 295,
        "end_line": 295,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DuplicateDeclarationHandler",
        "src_path": "src/com/google/javascript/jscomp/Normalize.java",
        "signature": "com.google.javascript.jscomp.DuplicateDeclarationHandler.hasOkDuplicateDeclaration",
        "snippet": "    private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet();",
        "begin_line": 643,
        "end_line": 643,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMAL_ORDER",
        "snippet": "  @VisibleForTesting\n  static final List<String> OPTIMAL_ORDER = ImmutableList.of(\n     \"removeUnreachableCode\",\n     \"removeUnusedVars\",\n     \"foldConstants\",\n     \"deadAssignmentsElimination\",\n     \"inlineVariables\",\n     \"inlineFunctions\",\n     \"removeUnusedPrototypeProperties\",\n     \"minimizeExitPoints\");",
        "begin_line": 38,
        "end_line": 47,
        "comment": " This ordering is computed offline by running with compute_phase_ordering."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.MAX_LOOPS",
        "snippet": "  static final int MAX_LOOPS = 100;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.OPTIMIZE_LOOP_ERROR",
        "snippet": "  static final String OPTIMIZE_LOOP_ERROR =\n      \"Fixed point loop exceeded the maximum number of iterations.\";",
        "begin_line": 50,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.logger",
        "snippet": "  private static final Logger logger =\n      Logger.getLogger(PhaseOptimizer.class.getName());",
        "begin_line": 53,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.passes",
        "snippet": "  private List<CompilerPass> passes = Lists.newArrayList();",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.tracker",
        "snippet": "  private final PerformanceTracker tracker;",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.recentChange",
        "snippet": "  private final CodeChangeHandler.RecentChange recentChange =\n      new CodeChangeHandler.RecentChange();",
        "begin_line": 60,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.loopMutex",
        "snippet": "  private boolean loopMutex = false;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentTracer",
        "snippet": "  private Tracer currentTracer = null;",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.currentPassName",
        "snippet": "  private String currentPassName = null;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.sanityCheck",
        "snippet": "  private PassFactory sanityCheck = null;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.randomizeLoops",
        "snippet": "  private static boolean randomizeLoops = false;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " phase orderings. They should not be touched by normal compiler runs."
    },
    {
        "class_name": "com.google.javascript.jscomp.PhaseOptimizer",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PhaseOptimizer.loopsRun",
        "snippet": "  private static List<List<String>> loopsRun = Lists.newArrayList();",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedPass",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.NamedPass.name",
        "snippet": "    private final String name;",
        "begin_line": 239,
        "end_line": 239,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactoryDelegate",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PassFactoryDelegate.myCompiler",
        "snippet": "    private final AbstractCompiler myCompiler;",
        "begin_line": 259,
        "end_line": 259,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactoryDelegate",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.PassFactoryDelegate.factory",
        "snippet": "    private final PassFactory factory;",
        "begin_line": 260,
        "end_line": 260,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoopInternal",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.LoopInternal.myPasses",
        "snippet": "    private final List<NamedPass> myPasses = Lists.newArrayList();",
        "begin_line": 289,
        "end_line": 289,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoopInternal",
        "src_path": "src/com/google/javascript/jscomp/PhaseOptimizer.java",
        "signature": "com.google.javascript.jscomp.LoopInternal.myNames",
        "snippet": "    private final Set<String> myNames = Sets.newHashSet();",
        "begin_line": 290,
        "end_line": 290,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.logger",
        "snippet": "  private static final Logger logger =\n    Logger.getLogger(RemoveUnusedPrototypeProperties.class.getName());",
        "begin_line": 37,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.canModifyExterns",
        "snippet": "  private final boolean canModifyExterns;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.anchorUnusedVars",
        "snippet": "  private final boolean anchorUnusedVars;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties",
        "src_path": "src/com/google/javascript/jscomp/RemoveUnusedPrototypeProperties.java",
        "signature": "com.google.javascript.jscomp.RemoveUnusedPrototypeProperties.specializationState",
        "snippet": "  private SpecializeModule.SpecializationState specializationState;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherRawExports",
        "src_path": "src/com/google/javascript/jscomp/GatherRawExports.java",
        "signature": "com.google.javascript.jscomp.GatherRawExports.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherRawExports",
        "src_path": "src/com/google/javascript/jscomp/GatherRawExports.java",
        "signature": "com.google.javascript.jscomp.GatherRawExports.GLOBAL_THIS_NAME",
        "snippet": "  private static final String GLOBAL_THIS_NAME = \"window\";",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherRawExports",
        "src_path": "src/com/google/javascript/jscomp/GatherRawExports.java",
        "signature": "com.google.javascript.jscomp.GatherRawExports.exportedVariables",
        "snippet": "  private final Set<String> exportedVariables = Sets.newHashSet();",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.success",
        "snippet": "  public final boolean success;",
        "begin_line": 25,
        "end_line": 25,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.errors",
        "snippet": "  public final JSError[] errors;",
        "begin_line": 26,
        "end_line": 26,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.warnings",
        "snippet": "  public final JSError[] warnings;",
        "begin_line": 27,
        "end_line": 27,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.debugLog",
        "snippet": "  public final String debugLog;",
        "begin_line": 28,
        "end_line": 28,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.variableMap",
        "snippet": "  public final VariableMap variableMap;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.propertyMap",
        "snippet": "  public final VariableMap propertyMap;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.namedAnonFunctionMap",
        "snippet": "  public final VariableMap namedAnonFunctionMap;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.stringMap",
        "snippet": "  public final VariableMap stringMap;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.functionInformationMap",
        "snippet": "  public final FunctionInformationMap functionInformationMap;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.sourceMap",
        "snippet": "  public final SourceMap sourceMap;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.cssNames",
        "snippet": "  public final Map<String, Integer> cssNames;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.externExport",
        "snippet": "  public final String externExport;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Result",
        "src_path": "src/com/google/javascript/jscomp/Result.java",
        "signature": "com.google.javascript.jscomp.Result.idGeneratorMap",
        "snippet": "  public final String idGeneratorMap;",
        "begin_line": 37,
        "end_line": 37,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.name",
        "snippet": "  private final String name;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isOneTimePass",
        "snippet": "  private final boolean isOneTimePass;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassFactory",
        "src_path": "src/com/google/javascript/jscomp/PassFactory.java",
        "signature": "com.google.javascript.jscomp.PassFactory.isCreated",
        "snippet": "  private boolean isCreated = false;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.callback",
        "snippet": "  private final EdgeCallback<N, E> callback;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal",
        "src_path": "src/com/google/javascript/jscomp/graph/FixedPointGraphTraversal.java",
        "signature": "com.google.javascript.jscomp.graph.FixedPointGraphTraversal.NON_HALTING_ERROR_MSG",
        "snippet": "  public static final String NON_HALTING_ERROR_MSG =\n    \"Fixed point computation not halting\";",
        "begin_line": 45,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.mode",
        "snippet": "  private final Mode mode;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.inlineAllStrings",
        "snippet": "  private final boolean inlineAllStrings;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " Inlines all strings, even if they increase the size of the gzipped binary."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineVariables",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InlineVariables.identifyConstants",
        "snippet": "  private final IdentifyConstants identifyConstants = new IdentifyConstants();",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasCandidate",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.AliasCandidate.alias",
        "snippet": "    private final Var alias;",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasCandidate",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.AliasCandidate.refInfo",
        "snippet": "    private final ReferenceCollection refInfo;",
        "begin_line": 131,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.staleVars",
        "snippet": "    private final Set<Var> staleVars = Sets.newHashSet();",
        "begin_line": 150,
        "end_line": 150,
        "comment": "\n     * A list of variables that should not be inlined, because their\n     * reference information is out of sync with the state of the AST.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineVariables.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.aliasCandidates",
        "snippet": "    final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
        "begin_line": 157,
        "end_line": 157,
        "comment": "\n     * Stored possible aliases of variables that never change, with\n     * all the reference info about those variables. Hashed by the NAME\n     * node of the variable being aliased.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LoggerErrorManager",
        "src_path": "src/com/google/javascript/jscomp/LoggerErrorManager.java",
        "signature": "com.google.javascript.jscomp.LoggerErrorManager.logger",
        "snippet": "  private final Logger logger;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.root",
        "snippet": "  private final Node root;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The root of the AST. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSTypeExpression",
        "src_path": "src/com/google/javascript/rhino/JSTypeExpression.java",
        "signature": "com.google.javascript.rhino.JSTypeExpression.sourceName",
        "snippet": "  private final String sourceName;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The source name where the type expression appears. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.types",
        "snippet": "  private final Set<DiagnosticType> types;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " The set of types represented by this group, hashed by key."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.name",
        "snippet": "  private final String name;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " A human-readable name for the group."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroup",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroup.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroup.singletons",
        "snippet": "  private static final Map<DiagnosticType, DiagnosticGroup> singletons =\n      Maps.newHashMap();",
        "begin_line": 67,
        "end_line": 68,
        "comment": " DiagnosticGroups with only a single DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.ESCAPED_JS_STRINGS",
        "snippet": "  private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
        "begin_line": 39,
        "end_line": 39,
        "comment": " A memoizer for formatting strings as JS strings."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",
        "snippet": "  private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
        "begin_line": 41,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.cc",
        "snippet": "  private final CodeConsumer cc;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeGenerator",
        "src_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "signature": "com.google.javascript.jscomp.CodeGenerator.outputCharsetEncoder",
        "snippet": "  private final CharsetEncoder outputCharsetEncoder;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AstChangeProxy",
        "src_path": "src/com/google/javascript/jscomp/AstChangeProxy.java",
        "signature": "com.google.javascript.jscomp.AstChangeProxy.listeners",
        "snippet": "  private final List<ChangeListener> listeners;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.MAX_UNION_SIZE",
        "snippet": "  private static final int MAX_UNION_SIZE = 20;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " then we should just give up and admit that we have no clue."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.alternates",
        "snippet": "  private final List<JSType> alternates = Lists.newArrayList();",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isAllType",
        "snippet": "  private boolean isAllType = false;",
        "begin_line": 72,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.isNativeUnknownType",
        "snippet": "  private boolean isNativeUnknownType = false;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.areAllUnknownsChecked",
        "snippet": "  private boolean areAllUnknownsChecked = true;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.result",
        "snippet": "  private JSType result = null;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Memoize the result, in case build() is called multiple times."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionTypeBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.UnionTypeBuilder.typeSorter",
        "snippet": "  private static final Comparator<JSType> typeSorter =\n      new Comparator<JSType>() {\n    @Override public int compare(JSType a, JSType b) {\n      return b.hashCode() - a.hashCode();\n    }\n  };",
        "begin_line": 201,
        "end_line": 206,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.logger",
        "snippet": "  static final Logger logger =\n      Logger.getLogger(Tracer.class.getName());",
        "begin_line": 163,
        "end_line": 164,
        "comment": " package-private for access from unit tests"
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.defaultPrettyPrint",
        "snippet": "  private static volatile boolean defaultPrettyPrint;",
        "begin_line": 170,
        "end_line": 170,
        "comment": "\n   * Whether pretty printing is enabled. This is intended to be set once\n   * at application startup.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingStatistics",
        "snippet": "  private static List<TracingStatistic> extraTracingStatistics =\n      new CopyOnWriteArrayList<TracingStatistic>();",
        "begin_line": 176,
        "end_line": 177,
        "comment": " This list is guaranteed to only increase in length.  It contains\n   * a list of additional statistics that the user wants to keep track\n   * of.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.extraTracingValues",
        "snippet": "  private long[] extraTracingValues;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Values returned by extraTracingStatistics "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.type",
        "snippet": "  private final @Nullable String type;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " The type for grouping traces, may be null "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.comment",
        "snippet": "  private final String comment;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " A comment string for the report "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startTimeMs",
        "snippet": "  private final long startTimeMs;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Start time of the trace "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.stopTimeMs",
        "snippet": "  private long stopTimeMs;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Stop time of the trace, non-final "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.startThread",
        "snippet": "  final Thread startThread;",
        "begin_line": 198,
        "end_line": 198,
        "comment": "\n   * Record our starter thread in order to trap Traces that are started in one\n   * thread and stopped in another\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.MAX_TRACE_SIZE",
        "snippet": "  static final int MAX_TRACE_SIZE = 1000;",
        "begin_line": 207,
        "end_line": 207,
        "comment": "\n   * We limit the number of events in a Trace in order to catch memory\n   * leaks (a thread that keeps logging events and never clears them).\n   * This number is arbitrary and can be increased if necessary (though\n   * if there are more than 1000 events then the Tracer is probably being\n   * misused).\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.clock",
        "snippet": "  static InternalClock clock = new InternalClock() {\n    public long currentTimeMillis() {\n      return System.currentTimeMillis();\n    }\n  };",
        "begin_line": 221,
        "end_line": 225,
        "comment": "\n   * Default clock that calls through to the system clock. Can be overridden\n   * in unit tests.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.count",
        "snippet": "    private int count;",
        "begin_line": 540,
        "end_line": 540,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.silent",
        "snippet": "    private int silent;",
        "begin_line": 541,
        "end_line": 541,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.clockTime",
        "snippet": "    private int clockTime;",
        "begin_line": 542,
        "end_line": 542,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Stat",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Stat.extraInfo",
        "snippet": "    private int[] extraInfo;",
        "begin_line": 543,
        "end_line": 543,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToCountMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToCountMap;",
        "begin_line": 574,
        "end_line": 574,
        "comment": "\n   * This map tracks counts of tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToSilentMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToSilentMap;",
        "begin_line": 579,
        "end_line": 579,
        "comment": "\n   * This map tracks counts of silent tracers for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.typeToTimeMap",
        "snippet": "  private static @Nullable AtomicTracerStatMap typeToTimeMap;",
        "begin_line": 584,
        "end_line": 584,
        "comment": "\n   * This map tracks time (ms) for each type over all time.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.ZERO_STAT",
        "snippet": "  private static final Stat ZERO_STAT = new Stat();",
        "begin_line": 632,
        "end_line": 632,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.isStart",
        "snippet": "    boolean isStart;   // else is_stop",
        "begin_line": 643,
        "end_line": 643,
        "comment": " else is_stop"
    },
    {
        "class_name": "com.google.javascript.jscomp.Event",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Event.tracer",
        "snippet": "    Tracer tracer;",
        "begin_line": 644,
        "end_line": 644,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.defaultSilenceThreshold",
        "snippet": "    int defaultSilenceThreshold; // non-final",
        "begin_line": 704,
        "end_line": 704,
        "comment": " non-final"
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.events",
        "snippet": "    final ArrayList<Event> events = new ArrayList<Event>();",
        "begin_line": 707,
        "end_line": 707,
        "comment": " The Events corresponding to each startEvent/stopEvent "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.outstandingEvents",
        "snippet": "    final HashSet<Tracer> outstandingEvents = new HashSet<Tracer>();",
        "begin_line": 710,
        "end_line": 710,
        "comment": " Tracers that have not had their .stop() called "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.stats",
        "snippet": "    final Map<String, Stat> stats = new HashMap<String, Stat>();",
        "begin_line": 713,
        "end_line": 713,
        "comment": " Map from type to Stat object "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isOutstandingEventsTruncated",
        "snippet": "    boolean isOutstandingEventsTruncated = false;",
        "begin_line": 719,
        "end_line": 719,
        "comment": "\n     * True if {@code outstandingEvents} has been cleared because we exceeded\n     * the max trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isEventsTruncated",
        "snippet": "    boolean isEventsTruncated = false;",
        "begin_line": 725,
        "end_line": 725,
        "comment": "\n     * True if {@code events} has been cleared because we exceeded the max\n     * trace limit.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.isInitialized",
        "snippet": "    boolean isInitialized = false;",
        "begin_line": 731,
        "end_line": 731,
        "comment": "\n     * Set to true if {@link Tracer#initCurrentThreadTrace()} was called by\n     * the current thread.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.ThreadTrace",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.ThreadTrace.prettyPrint",
        "snippet": "    boolean prettyPrint = false;",
        "begin_line": 736,
        "end_line": 736,
        "comment": "\n     * Whether pretty printing is enabled for the trace.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Tracer",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.Tracer.traces",
        "snippet": "  private static ThreadLocal<ThreadTrace> traces =\n      new ThreadLocal<ThreadTrace>();",
        "begin_line": 951,
        "end_line": 952,
        "comment": " Holds the ThreadTrace for each thread.  "
    },
    {
        "class_name": "com.google.javascript.jscomp.AtomicTracerStatMap",
        "src_path": "src/com/google/javascript/jscomp/Tracer.java",
        "signature": "com.google.javascript.jscomp.AtomicTracerStatMap.map",
        "snippet": "    private ConcurrentMap<String, Long> map =\n        new ConcurrentHashMap<String, Long>();",
        "begin_line": 1032,
        "end_line": 1033,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.formatter",
        "snippet": "  private final MessageFormatter formatter;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.stream",
        "snippet": "  private final PrintStream stream;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrintStreamErrorManager",
        "src_path": "src/com/google/javascript/jscomp/PrintStreamErrorManager.java",
        "signature": "com.google.javascript.jscomp.PrintStreamErrorManager.summaryDetailLevel",
        "snippet": "  private int summaryDetailLevel = 1;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Denormalize",
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "signature": "com.google.javascript.jscomp.Denormalize.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StripConstantAnnotations",
        "src_path": "src/com/google/javascript/jscomp/Denormalize.java",
        "signature": "com.google.javascript.jscomp.StripConstantAnnotations.compiler",
        "snippet": "    private AbstractCompiler compiler;",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.PARSE_ERROR",
        "snippet": "  static final DiagnosticType PARSE_ERROR =\n      DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");",
        "begin_line": 35,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR",
        "snippet": "  static final DiagnosticType TYPE_PARSE_ERROR =\n      DiagnosticType.warning(\"JSC_TYPE_PARSE_ERROR\", \"{0}\");",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.EXTRA_FILEOVERVIEW",
        "snippet": "  static final DiagnosticType EXTRA_FILEOVERVIEW =\n      DiagnosticType.warning(\"JSC_EXTRA_FILEOVERVIEW\", \"Parse error. {0}\");",
        "begin_line": 43,
        "end_line": 44,
        "comment": " warnings API."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.TRAILING_COMMA",
        "snippet": "  static final DiagnosticType TRAILING_COMMA =\n      DiagnosticType.error(\"JSC_TRAILING_COMMA\",\n          \"Parse error. Internet Explorer has a non-standard \" +\n          \"intepretation of trailing commas. Arrays will have the wrong \" +\n          \"length and objects will not parse at all.\");",
        "begin_line": 46,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.DUPLICATE_PARAM",
        "snippet": "  static final DiagnosticType DUPLICATE_PARAM =\n      DiagnosticType.error(\"JSC_DUPLICATE_PARAM\", \"Parse error. {0}\");",
        "begin_line": 52,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.BAD_JSDOC_ANNOTATION",
        "snippet": "  static final DiagnosticType BAD_JSDOC_ANNOTATION =\n    DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");",
        "begin_line": 55,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.typeMap",
        "snippet": "  private final Map<Pattern, DiagnosticType> typeMap;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " A map of Rhino messages to their DiagnosticType."
    },
    {
        "class_name": "com.google.javascript.jscomp.RhinoErrorReporter",
        "src_path": "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "signature": "com.google.javascript.jscomp.RhinoErrorReporter.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSourceFile",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSourceFile.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSourceFile.name",
        "snippet": "  private final String name;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.SimpleSourceFile",
        "src_path": "src/com/google/javascript/rhino/jstype/SimpleSourceFile.java",
        "signature": "com.google.javascript.rhino.jstype.SimpleSourceFile.extern",
        "snippet": "  private final boolean extern;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.alternates",
        "snippet": "  Collection<JSType> alternates;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.UnionType",
        "src_path": "src/com/google/javascript/rhino/jstype/UnionType.java",
        "signature": "com.google.javascript.rhino.jstype.UnionType.hashcode",
        "snippet": "  private final int hashcode;",
        "begin_line": 74,
        "end_line": 74,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.BooleanType",
        "src_path": "src/com/google/javascript/rhino/jstype/BooleanType.java",
        "signature": "com.google.javascript.rhino.jstype.BooleanType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.map",
        "snippet": "  private final Map<String, String> map;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Maps original source name to new name "
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.reverseMap",
        "snippet": "  private Map<String, String> reverseMap = null;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " Maps new name to source name, lazily initialized "
    },
    {
        "class_name": "com.google.javascript.jscomp.VariableMap",
        "src_path": "src/com/google/javascript/jscomp/VariableMap.java",
        "signature": "com.google.javascript.jscomp.VariableMap.SEPARATOR",
        "snippet": "  private static final char SEPARATOR = ':';",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.registry",
        "snippet": "  private final JSTypeRegistry registry;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.FunctionParamBuilder",
        "src_path": "src/com/google/javascript/rhino/jstype/FunctionParamBuilder.java",
        "signature": "com.google.javascript.rhino.jstype.FunctionParamBuilder.root",
        "snippet": "  private final Node root = new Node(Token.LP);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.parameters",
        "snippet": "  final Node parameters;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnType",
        "snippet": "  JSType returnType;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ArrowType",
        "src_path": "src/com/google/javascript/rhino/jstype/ArrowType.java",
        "signature": "com.google.javascript.rhino.jstype.ArrowType.returnTypeInferred",
        "snippet": "  final boolean returnTypeInferred;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " Whether the return type is inferred."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 29,
        "end_line": 29,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.key",
        "snippet": "  public final String key;",
        "begin_line": 35,
        "end_line": 35,
        "comment": "\n   * The error type. Used as the BugPattern and BugInstance types by\n   * BugBot's XML\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.format",
        "snippet": "  public final MessageFormat format;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " The default way to format errors "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.defaultLevel",
        "snippet": "  public final CheckLevel defaultLevel;",
        "begin_line": 41,
        "end_line": 41,
        "comment": " Default level "
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticType",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticType.java",
        "signature": "com.google.javascript.jscomp.DiagnosticType.level",
        "snippet": "  public CheckLevel level;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " Reporting level, initially the defaultLevel but may be changed. "
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 49,
        "end_line": 49,
        "comment": " section 10.1.8"
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.PARAMETER_PREFIX",
        "snippet": "  private static final String PARAMETER_PREFIX =\n      \"JSCompiler_OptimizeArgumentsArray_p\";",
        "begin_line": 53,
        "end_line": 54,
        "comment": " use this string as prefix unless the caller specify a different prefix."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.paramPredix",
        "snippet": "  private final String paramPredix;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The prefix for the newly introduced parameter name."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.uniqueId",
        "snippet": "  private int uniqueId = 0;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " unique integer at the end."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " Reference to the compiler object to notify any changes to source code AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.argumentsAccessStack",
        "snippet": "  private final Deque<List<Node>> argumentsAccessStack = Lists.newLinkedList();",
        "begin_line": 67,
        "end_line": 67,
        "comment": " A stack of arguments access list to the corresponding outer functions."
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeArgumentsArray",
        "src_path": "src/com/google/javascript/jscomp/OptimizeArgumentsArray.java",
        "signature": "com.google.javascript.jscomp.OptimizeArgumentsArray.currentArgumentsAccess",
        "snippet": "  private List<Node> currentArgumentsAccess = null;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " This stores a list of argument access in the current scope."
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.visited",
        "snippet": "  private boolean visited;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.docInfo",
        "snippet": "  private JSDocInfo docInfo = null;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ObjectType",
        "src_path": "src/com/google/javascript/rhino/jstype/ObjectType.java",
        "signature": "com.google.javascript.rhino.jstype.ObjectType.unknown",
        "snippet": "  private boolean unknown = true;",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.fns",
        "snippet": "  private final Map<String, FunctionState> fns = Maps.newHashMap();",
        "begin_line": 62,
        "end_line": 62,
        "comment": " this needs a major refactor."
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.anonFns",
        "snippet": "  private final Map<Node, String> anonFns = Maps.newHashMap();",
        "begin_line": 63,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 65,
        "end_line": 65,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.injector",
        "snippet": "  private final FunctionInjector injector;",
        "begin_line": 67,
        "end_line": 67,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.blockFunctionInliningEnabled",
        "snippet": "  private final boolean blockFunctionInliningEnabled;",
        "begin_line": 69,
        "end_line": 69,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.inlineGlobalFunctions",
        "snippet": "  private final boolean inlineGlobalFunctions;",
        "begin_line": 70,
        "end_line": 70,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.inlineLocalFunctions",
        "snippet": "  private final boolean inlineLocalFunctions;",
        "begin_line": 71,
        "end_line": 71,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.InlineFunctions.specializationState",
        "snippet": "  private SpecializeModule.SpecializationState specializationState;",
        "begin_line": 73,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindCandidateFunctions",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FindCandidateFunctions.callsSeen",
        "snippet": "    private int callsSeen = 0;",
        "begin_line": 150,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallVisitor",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.CallVisitor.callback",
        "snippet": "    protected CallVisitorCallback callback;",
        "begin_line": 370,
        "end_line": 370,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallVisitor",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.CallVisitor.functionMap",
        "snippet": "    private Map<String, FunctionState> functionMap;",
        "begin_line": 371,
        "end_line": 371,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CallVisitor",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.CallVisitor.anonFunctionMap",
        "snippet": "    private Map<Node, String> anonFunctionMap;",
        "begin_line": 372,
        "end_line": 372,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Inline",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Inline.injector",
        "snippet": "    private final FunctionInjector injector;",
        "begin_line": 587,
        "end_line": 587,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Inline",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Inline.specializationState",
        "snippet": "    private final SpecializeModule.SpecializationState specializationState;",
        "begin_line": 588,
        "end_line": 588,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.fn",
        "snippet": "    private Function fn = null;",
        "begin_line": 849,
        "end_line": 849,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.safeFnNode",
        "snippet": "    private Node safeFnNode = null;",
        "begin_line": 850,
        "end_line": 850,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.inline",
        "snippet": "    private boolean inline = true;",
        "begin_line": 851,
        "end_line": 851,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.remove",
        "snippet": "    private boolean remove = true;",
        "begin_line": 852,
        "end_line": 852,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.inlineDirectly",
        "snippet": "    private boolean inlineDirectly = false;",
        "begin_line": 853,
        "end_line": 853,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.referencesThis",
        "snippet": "    private boolean referencesThis = false;",
        "begin_line": 854,
        "end_line": 854,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.hasInnerFunctions",
        "snippet": "    private boolean hasInnerFunctions = false;",
        "begin_line": 855,
        "end_line": 855,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.references",
        "snippet": "    private Map<Node, Reference> references = null;",
        "begin_line": 856,
        "end_line": 856,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.module",
        "snippet": "    private JSModule module = null;",
        "begin_line": 857,
        "end_line": 857,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionState",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionState.namesToAlias",
        "snippet": "    private Set<String> namesToAlias = null;",
        "begin_line": 858,
        "end_line": 858,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NamedFunction",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.NamedFunction.fn",
        "snippet": "    private final Node fn;",
        "begin_line": 1012,
        "end_line": 1012,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionVar",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionVar.var",
        "snippet": "    private final Node var;",
        "begin_line": 1038,
        "end_line": 1038,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionExpression",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionExpression.fn",
        "snippet": "    private final Node fn;",
        "begin_line": 1064,
        "end_line": 1064,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionExpression",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.FunctionExpression.fakeName",
        "snippet": "    private final String fakeName;",
        "begin_line": 1065,
        "end_line": 1065,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Reference.requiresDecomposition",
        "snippet": "    final boolean requiresDecomposition;",
        "begin_line": 1094,
        "end_line": 1094,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Reference",
        "src_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
        "signature": "com.google.javascript.jscomp.Reference.inlined",
        "snippet": "    boolean inlined = false;",
        "begin_line": 1095,
        "end_line": 1095,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaN",
        "snippet": "    public static final double\n        NaN = Double.longBitsToDouble(0x7ff8000000000000L);",
        "begin_line": 81,
        "end_line": 82,
        "comment": " So we use ScriptRuntime.NaN instead of Double.NaN."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.negativeZero",
        "snippet": "    public static final double\n        negativeZero = Double.longBitsToDouble(0x8000000000000000L);",
        "begin_line": 85,
        "end_line": 86,
        "comment": " A similar problem exists for negative zero."
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.NaNobj",
        "snippet": "    public static final Double NaNobj = new Double(NaN);",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyArgs",
        "snippet": "    public static final Object[] emptyArgs = new Object[0];",
        "begin_line": 608,
        "end_line": 608,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.ScriptRuntime",
        "src_path": "src/com/google/javascript/rhino/ScriptRuntime.java",
        "signature": "com.google.javascript.rhino.ScriptRuntime.emptyStrings",
        "snippet": "    public static final String[] emptyStrings = new String[0];",
        "begin_line": 609,
        "end_line": 609,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.INVALID_NO_SIDE_EFFECT_ANNOTATION",
        "snippet": "  static final DiagnosticType INVALID_NO_SIDE_EFFECT_ANNOTATION =\n      DiagnosticType.error(\n          \"JSC_INVALID_NO_SIDE_EFFECT_ANNOTATION\",\n          \"@nosideeffects may only appear in externs files.\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.INVALID_MODIFIES_ANNOTATION",
        "snippet": "  static final DiagnosticType INVALID_MODIFIES_ANNOTATION =\n    DiagnosticType.error(\n        \"JSC_INVALID_MODIFIES_ANNOTATION\",\n        \"@modifies may only appear in externs files.\");",
        "begin_line": 70,
        "end_line": 73,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 75,
        "end_line": 75,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.definitionProvider",
        "snippet": "  private final DefinitionProvider definitionProvider;",
        "begin_line": 76,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.functionSideEffectMap",
        "snippet": "  private final Map<Node, FunctionInformation> functionSideEffectMap;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Function node -> function side effects map"
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.allFunctionCalls",
        "snippet": "  private final List<Node> allFunctionCalls;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " List of all function call sites; used to iterate in markPureFunctionCalls."
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.externs",
        "snippet": "  private Node externs;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " fields are null until process is called."
    },
    {
        "class_name": "com.google.javascript.jscomp.PureFunctionIdentifier",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.PureFunctionIdentifier.root",
        "snippet": "  private Node root;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionAnalyzer.inExterns",
        "snippet": "    private final boolean inExterns;",
        "begin_line": 373,
        "end_line": 373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.extern",
        "snippet": "    private final boolean extern;",
        "begin_line": 879,
        "end_line": 879,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.callsInFunctionBody",
        "snippet": "    private final List<Node> callsInFunctionBody = Lists.newArrayList();",
        "begin_line": 880,
        "end_line": 880,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.blacklisted",
        "snippet": "    private Set<Var> blacklisted = Sets.newHashSet();",
        "begin_line": 881,
        "end_line": 881,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintedLocals",
        "snippet": "    private Set<Var> taintedLocals = Sets.newHashSet();",
        "begin_line": 882,
        "end_line": 882,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.knownLocals",
        "snippet": "    private Set<String> knownLocals = Sets.newHashSet();",
        "begin_line": 883,
        "end_line": 883,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.pureFunction",
        "snippet": "    private boolean pureFunction = false;",
        "begin_line": 884,
        "end_line": 884,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.functionThrows",
        "snippet": "    private boolean functionThrows = false;",
        "begin_line": 885,
        "end_line": 885,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsGlobalState",
        "snippet": "    private boolean taintsGlobalState = false;",
        "begin_line": 886,
        "end_line": 886,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsThis",
        "snippet": "    private boolean taintsThis = false;",
        "begin_line": 887,
        "end_line": 887,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsArguments",
        "snippet": "    private boolean taintsArguments = false;",
        "begin_line": 888,
        "end_line": 888,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsUnknown",
        "snippet": "    private boolean taintsUnknown = false;",
        "begin_line": 889,
        "end_line": 889,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FunctionInformation",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.FunctionInformation.taintsReturn",
        "snippet": "    private boolean taintsReturn = false;",
        "begin_line": 890,
        "end_line": 890,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Driver",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.Driver.compiler",
        "snippet": "    private final AbstractCompiler compiler;",
        "begin_line": 1076,
        "end_line": 1076,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Driver",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.Driver.reportPath",
        "snippet": "    private final String reportPath;",
        "begin_line": 1077,
        "end_line": 1077,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Driver",
        "src_path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
        "signature": "com.google.javascript.jscomp.Driver.useNameReferenceGraph",
        "snippet": "    private final boolean useNameReferenceGraph;",
        "begin_line": 1078,
        "end_line": 1078,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",
        "snippet": "  public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InlineObjectLiterals",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InlineObjectLiterals.safeNameIdSupplier",
        "snippet": "  private final Supplier<String> safeNameIdSupplier;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.InliningBehavior",
        "src_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
        "signature": "com.google.javascript.jscomp.InliningBehavior.staleVars",
        "snippet": "    private final Set<Var> staleVars = Sets.newHashSet();",
        "begin_line": 80,
        "end_line": 80,
        "comment": "\n     * A list of variables that should not be inlined, because their\n     * reference information is out of sync with the state of the AST.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementNeedsEnded",
        "snippet": "  boolean statementNeedsEnded = false;",
        "begin_line": 30,
        "end_line": 30,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.statementStarted",
        "snippet": "  boolean statementStarted = false;",
        "begin_line": 31,
        "end_line": 31,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CodeConsumer",
        "src_path": "src/com/google/javascript/jscomp/CodeConsumer.java",
        "signature": "com.google.javascript.jscomp.CodeConsumer.sawFunction",
        "snippet": "  boolean sawFunction = false;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.definitionSiteMap",
        "snippet": "  private final Map<Node, DefinitionSite> definitionSiteMap;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.nameDefinitionMultimap",
        "snippet": "  private final Multimap<String, Definition> nameDefinitionMultimap;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SimpleDefinitionFinder",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.SimpleDefinitionFinder.nameUseSiteMultimap",
        "snippet": "  private final Multimap<String, UseSite> nameUseSiteMultimap;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DefinitionGatheringCallback",
        "src_path": "src/com/google/javascript/jscomp/SimpleDefinitionFinder.java",
        "signature": "com.google.javascript.jscomp.DefinitionGatheringCallback.inExterns",
        "snippet": "    private boolean inExterns;",
        "begin_line": 152,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.GET_CSS_NAME_FUNCTION",
        "snippet": "  static final String GET_CSS_NAME_FUNCTION = \"goog.getCssName\";",
        "begin_line": 83,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.INVALID_NUM_ARGUMENTS_ERROR",
        "snippet": "  static final DiagnosticType INVALID_NUM_ARGUMENTS_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_NUM_ARGS\",\n          \"goog.getCssName called with \\\"{0}\\\" arguments, expected 1 or 2.\");",
        "begin_line": 85,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.STRING_LITERAL_EXPECTED_ERROR",
        "snippet": "  static final DiagnosticType STRING_LITERAL_EXPECTED_ERROR =\n      DiagnosticType.error(\"JSC_GETCSSNAME_STRING_LITERAL_EXPECTED\",\n          \"goog.getCssName called with invalid argument, string literal \" +\n          \"expected.  Was \\\"{0}\\\".\");",
        "begin_line": 89,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNEXPECTED_STRING_LITERAL_ERROR",
        "snippet": "  static final DiagnosticType UNEXPECTED_STRING_LITERAL_ERROR =\n    DiagnosticType.error(\"JSC_GETCSSNAME_UNEXPECTED_STRING_LITERAL\",\n        \"goog.getCssName called with invalid arguments, string literal \" +\n        \"passed as first of two arguments.  Did you mean \" +\n        \"goog.getCssName(\\\"{0}-{1}\\\")?\");",
        "begin_line": 94,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING",
        "snippet": "  static final DiagnosticType UNKNOWN_SYMBOL_WARNING =\n      DiagnosticType.warning(\"JSC_GETCSSNAME_UNKNOWN_CSS_SYMBOL\",\n         \"goog.getCssName called with unrecognized symbol \\\"{0}\\\" in class \" +\n         \"\\\"{1}\\\".\");",
        "begin_line": 100,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 106,
        "end_line": 106,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.cssNames",
        "snippet": "  private final Map<String, Integer> cssNames;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.symbolMap",
        "snippet": "  private CssRenamingMap symbolMap;",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ReplaceCssNames",
        "src_path": "src/com/google/javascript/jscomp/ReplaceCssNames.java",
        "signature": "com.google.javascript.jscomp.ReplaceCssNames.nativeStringType",
        "snippet": "  private final JSType nativeStringType;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.refMap",
        "snippet": "  private Map<String, ReferenceCollection> refMap = null;",
        "begin_line": 45,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalVarReferenceMap",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.GlobalVarReferenceMap.inputOrder",
        "snippet": "  private final Map<String, Integer> inputOrder;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceRefRange",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.SourceRefRange.lastBefore",
        "snippet": "    private final int lastBefore;",
        "begin_line": 177,
        "end_line": 177,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceRefRange",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.SourceRefRange.firstAfter",
        "snippet": "    private final int firstAfter;",
        "begin_line": 178,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SourceRefRange",
        "src_path": "src/com/google/javascript/jscomp/GlobalVarReferenceMap.java",
        "signature": "com.google.javascript.jscomp.SourceRefRange.refList",
        "snippet": "    private final List<Reference> refList;",
        "begin_line": 179,
        "end_line": 179,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NullType",
        "src_path": "src/com/google/javascript/rhino/jstype/NullType.java",
        "signature": "com.google.javascript.rhino.jstype.NullType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.globalNameNodes",
        "snippet": "  private final ArrayList<Node> globalNameNodes = new ArrayList<Node>();",
        "begin_line": 53,
        "end_line": 53,
        "comment": " List of global NAME nodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localNameNodes",
        "snippet": "  private final ArrayList<Node> localNameNodes = new ArrayList<Node>();",
        "begin_line": 56,
        "end_line": 56,
        "comment": " List of local NAME nodes "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.pseudoNameMap",
        "snippet": "  private final Map<Node, String> pseudoNameMap;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n   * Maps a name node to its pseudo name, null if we are not generating so\n   * there will not no overhead unless we are debugging.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.externNames",
        "snippet": "  private final Set<String> externNames = new HashSet<String>();",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Set of extern variable names "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.reservedNames",
        "snippet": "  private final Set<String> reservedNames;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " Set of reserved variable names "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.renameMap",
        "snippet": "  private final Map<String, String> renameMap = new HashMap<String, String>();",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The renaming map "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.prevUsedRenameMap",
        "snippet": "  private final VariableMap prevUsedRenameMap;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The previously used rename map. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.prefix",
        "snippet": "  private final String prefix;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The global name prefix "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignmentCount",
        "snippet": "  private int assignmentCount = 0;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " Counter for each assignment "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignmentLog",
        "snippet": "  private StringBuilder assignmentLog;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " Logs all name assignments "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localBleedingFunctions",
        "snippet": "  private Set<Var> localBleedingFunctions = Sets.newHashSet();",
        "begin_line": 87,
        "end_line": 87,
        "comment": " scope on IE but not on other browsers."
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localBleedingFunctionsPerScope",
        "snippet": "  private ArrayListMultimap<Scope, Var> localBleedingFunctionsPerScope =\n      ArrayListMultimap.create();",
        "begin_line": 88,
        "end_line": 89,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.oldName",
        "snippet": "    final String oldName;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.orderOfOccurrence",
        "snippet": "    final int orderOfOccurrence;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.newName",
        "snippet": "    String newName;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Assignment",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.Assignment.count",
        "snippet": "    int count; // Number of times this is referenced",
        "begin_line": 95,
        "end_line": 95,
        "comment": " Number of times this is referenced"
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.assignments",
        "snippet": "  private final SortedMap<String, Assignment> assignments =\n      new TreeMap<String, Assignment>();",
        "begin_line": 116,
        "end_line": 117,
        "comment": " Maps an old name to a new name assignment "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.localRenamingOnly",
        "snippet": "  private final boolean localRenamingOnly;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " Whether renaming should apply to local variables only. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.preserveFunctionExpressionNames",
        "snippet": "  private boolean preserveFunctionExpressionNames;",
        "begin_line": 128,
        "end_line": 128,
        "comment": "\n   * Whether function expression names should be preserved. Typically, for\n   * debugging purposes.\n   *\n   * @see NameAnonymousFunctions\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.shouldShadow",
        "snippet": "  private final boolean shouldShadow;",
        "begin_line": 130,
        "end_line": 130,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.reservedCharacters",
        "snippet": "  private final char[] reservedCharacters;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " Characters that shouldn't be used in variable names. "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.LOCAL_VAR_PREFIX",
        "snippet": "  public static final String LOCAL_VAR_PREFIX = \"L \";",
        "begin_line": 137,
        "end_line": 137,
        "comment": " TODO(user): No longer needs to be public when shadowing doesn't use it."
    },
    {
        "class_name": "com.google.javascript.jscomp.ProcessVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.ProcessVars.isExternsPass_",
        "snippet": "    private final boolean isExternsPass_;",
        "begin_line": 189,
        "end_line": 189,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.FREQUENCY_COMPARATOR",
        "snippet": "  private static final Comparator<Assignment> FREQUENCY_COMPARATOR =\n      new Comparator<Assignment>() {\n    public int compare(Assignment a1, Assignment a2) {\n      if (a1.count != a2.count) {\n        return a2.count - a1.count;\n      }\n      // Break a tie using the order in which the variable first appears in\n      // the source.\n      return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);\n    }\n  };",
        "begin_line": 301,
        "end_line": 311,
        "comment": "\n   * Sorts Assignment objects by their count, breaking ties by their order of\n   * occurrence in the source to ensure a deterministic total ordering.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.RenameVars",
        "src_path": "src/com/google/javascript/jscomp/RenameVars.java",
        "signature": "com.google.javascript.jscomp.RenameVars.ORDER_OF_OCCURRENCE_COMPARATOR",
        "snippet": "  private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR =\n      new Comparator<Assignment>() {\n        public int compare(Assignment a1, Assignment a2) {\n          return a1.orderOfOccurrence - a2.orderOfOccurrence;\n        }\n      };",
        "begin_line": 317,
        "end_line": 322,
        "comment": "\n   * Sorts Assignment objects by the order the variable name first appears in\n   * the source.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.USELESS_CODE_ERROR",
        "snippet": "  static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(\n      \"JSC_USELESS_CODE\",\n      \"Suspicious code. {0}\");",
        "begin_line": 37,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckSideEffects",
        "src_path": "src/com/google/javascript/jscomp/CheckSideEffects.java",
        "signature": "com.google.javascript.jscomp.CheckSideEffects.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.target",
        "snippet": "    final Node target;",
        "begin_line": 231,
        "end_line": 231,
        "comment": " The target of the bind action"
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.thisValue",
        "snippet": "    final Node thisValue;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " The node representing the \"this\" value, maybe null"
    },
    {
        "class_name": "com.google.javascript.jscomp.Bind",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.Bind.parameters",
        "snippet": "    final Node parameters;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " The head of a Node list representing the parameters"
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.type",
        "snippet": "    final SubclassType type;",
        "begin_line": 271,
        "end_line": 271,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.subclassName",
        "snippet": "    final String subclassName;",
        "begin_line": 272,
        "end_line": 272,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SubclassRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.SubclassRelationship.superclassName",
        "snippet": "    final String superclassName;",
        "begin_line": 273,
        "end_line": 273,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DelegateRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.DelegateRelationship.delegateBase",
        "snippet": "    final String delegateBase;",
        "begin_line": 291,
        "end_line": 291,
        "comment": " The subclass in the base code. "
    },
    {
        "class_name": "com.google.javascript.jscomp.DelegateRelationship",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.DelegateRelationship.delegator",
        "snippet": "    final String delegator;",
        "begin_line": 294,
        "end_line": 294,
        "comment": " The class in the base code. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.typeName",
        "snippet": "    final String typeName;",
        "begin_line": 308,
        "end_line": 308,
        "comment": " Type to cast to. "
    },
    {
        "class_name": "com.google.javascript.jscomp.ObjectLiteralCast",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.ObjectLiteralCast.objectNode",
        "snippet": "    final Node objectNode;",
        "begin_line": 311,
        "end_line": 311,
        "comment": " Object to cast. "
    },
    {
        "class_name": "com.google.javascript.jscomp.AssertionFunctionSpec",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.AssertionFunctionSpec.functionName",
        "snippet": "    private final String functionName;",
        "begin_line": 325,
        "end_line": 325,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AssertionFunctionSpec",
        "src_path": "src/com/google/javascript/jscomp/CodingConvention.java",
        "signature": "com.google.javascript.jscomp.AssertionFunctionSpec.assertedType",
        "snippet": "    private final JSTypeNative assertedType;",
        "begin_line": 326,
        "end_line": 326,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.UNKNOWN_VARIABLE",
        "snippet": "  static final DiagnosticType UNKNOWN_VARIABLE = DiagnosticType.warning(\n      \"JSC_UNKNOWN_VARIABLE\", \"unknown variable {0}\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.WITH_DISALLOWED",
        "snippet": "  static final DiagnosticType WITH_DISALLOWED = DiagnosticType.warning(\n      \"JSC_WITH_DISALLOWED\", \"\\\"with\\\" cannot be used in ES5 strict mode\");",
        "begin_line": 43,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.EVAL_USE",
        "snippet": "  static final DiagnosticType EVAL_USE = DiagnosticType.error(\n      \"JSC_EVAL_USE\", \"\\\"eval\\\" cannot be used in Caja\");",
        "begin_line": 46,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.EVAL_DECLARATION",
        "snippet": "  static final DiagnosticType EVAL_DECLARATION = DiagnosticType.warning(\n      \"JSC_EVAL_DECLARATION\",\n      \"\\\"eval\\\" cannot be redeclared in ES5 strict mode\");",
        "begin_line": 49,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.EVAL_ASSIGNMENT",
        "snippet": "  static final DiagnosticType EVAL_ASSIGNMENT = DiagnosticType.warning(\n      \"JSC_EVAL_ASSIGNMENT\",\n      \"the \\\"eval\\\" object cannot be reassigned in ES5 strict mode\");",
        "begin_line": 53,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.ARGUMENTS_DECLARATION",
        "snippet": "  static final DiagnosticType ARGUMENTS_DECLARATION = DiagnosticType.warning(\n      \"JSC_ARGUMENTS_DECLARATION\",\n      \"\\\"arguments\\\" cannot be redeclared in ES5 strict mode\");",
        "begin_line": 57,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.ARGUMENTS_ASSIGNMENT",
        "snippet": "  static final DiagnosticType ARGUMENTS_ASSIGNMENT = DiagnosticType.warning(\n      \"JSC_ARGUMENTS_ASSIGNMENT\",\n      \"the \\\"arguments\\\" object cannot be reassigned in ES5 strict mode\");",
        "begin_line": 61,
        "end_line": 63,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.DELETE_VARIABLE",
        "snippet": "  static final DiagnosticType DELETE_VARIABLE = DiagnosticType.warning(\n      \"JSC_DELETE_VARIABLE\",\n      \"variables, functions, and arguments cannot be deleted in \"\n      + \"ES5 strict mode\");",
        "begin_line": 65,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.ILLEGAL_NAME",
        "snippet": "  static final DiagnosticType ILLEGAL_NAME = DiagnosticType.error(\n      \"JSC_ILLEGAL_NAME\",\n      \"identifiers ending in '__' cannot be used in Caja\");",
        "begin_line": 70,
        "end_line": 72,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.DUPLICATE_OBJECT_KEY",
        "snippet": "  static final DiagnosticType DUPLICATE_OBJECT_KEY = DiagnosticType.warning(\n      \"JSC_DUPLICATE_OBJECT_KEY\",\n      \"object literals cannot contain duplicate keys in ES5 strict mode\");",
        "begin_line": 74,
        "end_line": 76,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.noVarCheck",
        "snippet": "  private final boolean noVarCheck;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.StrictModeCheck",
        "src_path": "src/com/google/javascript/jscomp/StrictModeCheck.java",
        "signature": "com.google.javascript.jscomp.StrictModeCheck.noCajaChecks",
        "snippet": "  private final boolean noCajaChecks;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.groupsByName",
        "snippet": "  private final static Map<String, DiagnosticGroup> groupsByName =\n      Maps.newHashMap();",
        "begin_line": 33,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES",
        "snippet": "  static final String DIAGNOSTIC_GROUP_NAMES =\n      \"accessControls, ambiguousFunctionDecl, checkRegExp,\" +\n      \"checkTypes, checkVars, constantProperty, deprecated, \" +\n      \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n      \"internetExplorerChecks, invalidCasts, missingProperties, \" +\n      \"nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, \" +\n      \"undefinedVars, unknownDefines, uselessCode, \" +\n      \"visibility\";",
        "begin_line": 72,
        "end_line": 79,
        "comment": " to parser/ParserConfig.properties"
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS",
        "snippet": "  public static DiagnosticGroup GLOBAL_THIS =\n      DiagnosticGroups.registerGroup(\"globalThis\",\n          CheckGlobalThis.GLOBAL_THIS);",
        "begin_line": 81,
        "end_line": 83,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.DEPRECATED",
        "snippet": "  public static DiagnosticGroup DEPRECATED =\n      DiagnosticGroups.registerGroup(\"deprecated\",\n          CheckAccessControls.DEPRECATED_NAME,\n          CheckAccessControls.DEPRECATED_NAME_REASON,\n          CheckAccessControls.DEPRECATED_PROP,\n          CheckAccessControls.DEPRECATED_PROP_REASON,\n          CheckAccessControls.DEPRECATED_CLASS,\n          CheckAccessControls.DEPRECATED_CLASS_REASON);",
        "begin_line": 85,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY",
        "snippet": "  public static DiagnosticGroup VISIBILITY =\n      DiagnosticGroups.registerGroup(\"visibility\",\n          CheckAccessControls.BAD_PRIVATE_GLOBAL_ACCESS,\n          CheckAccessControls.BAD_PRIVATE_PROPERTY_ACCESS,\n          CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n          CheckAccessControls.PRIVATE_OVERRIDE,\n          CheckAccessControls.VISIBILITY_MISMATCH);",
        "begin_line": 94,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY",
        "snippet": "  public static DiagnosticGroup CONSTANT_PROPERTY =\n      DiagnosticGroups.registerGroup(\"constantProperty\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);",
        "begin_line": 102,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC",
        "snippet": "  public static DiagnosticGroup NON_STANDARD_JSDOC =\n      DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n          RhinoErrorReporter.BAD_JSDOC_ANNOTATION);",
        "begin_line": 107,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS",
        "snippet": "  public static DiagnosticGroup ACCESS_CONTROLS =\n      DiagnosticGroups.registerGroup(\"accessControls\",\n          DEPRECATED, VISIBILITY);",
        "begin_line": 111,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS",
        "snippet": "  public static DiagnosticGroup INVALID_CASTS =\n      DiagnosticGroups.registerGroup(\"invalidCasts\",\n          TypeValidator.INVALID_CAST);",
        "begin_line": 115,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC",
        "snippet": "  public static DiagnosticGroup FILEOVERVIEW_JSDOC =\n      DiagnosticGroups.registerGroup(\"fileoverviewTags\",\n          RhinoErrorReporter.EXTRA_FILEOVERVIEW);",
        "begin_line": 119,
        "end_line": 121,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.STRICT_MODULE_DEP_CHECK",
        "snippet": "  public static DiagnosticGroup STRICT_MODULE_DEP_CHECK =\n      DiagnosticGroups.registerGroup(\"strictModuleDepCheck\",\n          VarCheck.STRICT_MODULE_DEP_ERROR,\n          CheckGlobalNames.STRICT_MODULE_DEP_QNAME);",
        "begin_line": 123,
        "end_line": 126,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.EXTERNS_VALIDATION",
        "snippet": "  public static DiagnosticGroup EXTERNS_VALIDATION =\n      DiagnosticGroups.registerGroup(\"externsValidation\",\n          VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR,\n          VarCheck.UNDEFINED_EXTERN_VAR_ERROR);",
        "begin_line": 128,
        "end_line": 131,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.AMBIGUOUS_FUNCTION_DECL",
        "snippet": "  public static DiagnosticGroup AMBIGUOUS_FUNCTION_DECL =\n      DiagnosticGroups.registerGroup(\"ambiguousFunctionDecl\",\n          VariableReferenceCheck.AMBIGUOUS_FUNCTION_DECL);",
        "begin_line": 133,
        "end_line": 135,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES",
        "snippet": "  public static DiagnosticGroup UNKNOWN_DEFINES =\n      DiagnosticGroups.registerGroup(\"unknownDefines\",\n          ProcessDefines.UNKNOWN_DEFINE_WARNING);",
        "begin_line": 137,
        "end_line": 139,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TWEAKS",
        "snippet": "  public static DiagnosticGroup TWEAKS =\n      DiagnosticGroups.registerGroup(\"tweakValidation\",\n          ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING,\n          ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING,\n          ProcessTweaks.UNKNOWN_TWEAK_WARNING);",
        "begin_line": 141,
        "end_line": 145,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES",
        "snippet": "  public static DiagnosticGroup MISSING_PROPERTIES =\n      DiagnosticGroups.registerGroup(\"missingProperties\",\n          TypeCheck.INEXISTENT_PROPERTY);",
        "begin_line": 147,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS",
        "snippet": "  public static DiagnosticGroup INTERNET_EXPLORER_CHECKS =\n      DiagnosticGroups.registerGroup(\"internetExplorerChecks\",\n          RhinoErrorReporter.TRAILING_COMMA);",
        "begin_line": 152,
        "end_line": 154,
        "comment": " TODO: add more IE specific checks here."
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES",
        "snippet": "  public static DiagnosticGroup UNDEFINED_VARIABLES =\n      DiagnosticGroups.registerGroup(\"undefinedVars\",\n          VarCheck.UNDEFINED_VAR_ERROR);",
        "begin_line": 156,
        "end_line": 158,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP",
        "snippet": "  public static DiagnosticGroup CHECK_REGEXP =\n      DiagnosticGroups.registerGroup(\"checkRegExp\",\n          CheckRegExp.REGEXP_REFERENCE,\n          CheckRegExp.MALFORMED_REGEXP);",
        "begin_line": 160,
        "end_line": 163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES",
        "snippet": "  public static DiagnosticGroup CHECK_TYPES =\n      DiagnosticGroups.registerGroup(\"checkTypes\",\n          TypeValidator.ALL_DIAGNOSTICS,\n          TypeCheck.ALL_DIAGNOSTICS);",
        "begin_line": 165,
        "end_line": 168,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES",
        "snippet": "  public static DiagnosticGroup CHECK_VARIABLES =\n      DiagnosticGroups.registerGroup(\"checkVars\",\n          VarCheck.UNDEFINED_VAR_ERROR,\n          SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);",
        "begin_line": 170,
        "end_line": 173,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CHECK_USELESS_CODE",
        "snippet": "  public static DiagnosticGroup CHECK_USELESS_CODE =\n      DiagnosticGroups.registerGroup(\"uselessCode\",\n          CheckSideEffects.USELESS_CODE_ERROR,\n          CheckUnreachableCode.UNREACHABLE_CODE);",
        "begin_line": 175,
        "end_line": 178,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.CONST",
        "snippet": "  public static DiagnosticGroup CONST =\n      DiagnosticGroups.registerGroup(\"const\",\n          CheckAccessControls.CONST_PROPERTY_DELETED,\n          CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE,\n          ConstCheck.CONST_REASSIGNED_VALUE_ERROR);",
        "begin_line": 180,
        "end_line": 184,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION",
        "snippet": "  public static DiagnosticGroup TYPE_INVALIDATION =\n      DiagnosticGroups.registerGroup(\"typeInvalidation\",\n          DisambiguateProperties.Warnings.INVALIDATION);",
        "begin_line": 186,
        "end_line": 188,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DiagnosticGroups",
        "src_path": "src/com/google/javascript/jscomp/DiagnosticGroups.java",
        "signature": "com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT",
        "snippet": "  public static DiagnosticGroup ES5_STRICT =\n      DiagnosticGroups.registerGroup(\"es5Strict\",\n          StrictModeCheck.UNKNOWN_VARIABLE,\n          StrictModeCheck.WITH_DISALLOWED,\n          StrictModeCheck.EVAL_DECLARATION,\n          StrictModeCheck.EVAL_ASSIGNMENT,\n          StrictModeCheck.ARGUMENTS_DECLARATION,\n          StrictModeCheck.ARGUMENTS_ASSIGNMENT,\n          StrictModeCheck.DELETE_VARIABLE,\n          StrictModeCheck.DUPLICATE_OBJECT_KEY);",
        "begin_line": 190,
        "end_line": 199,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractPeepholeOptimization",
        "src_path": "src/com/google/javascript/jscomp/AbstractPeepholeOptimization.java",
        "signature": "com.google.javascript.jscomp.AbstractPeepholeOptimization.currentTraversal",
        "snippet": "  private NodeTraversal currentTraversal;",
        "begin_line": 32,
        "end_line": 32,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningsGuard",
        "src_path": "src/com/google/javascript/jscomp/WarningsGuard.java",
        "signature": "com.google.javascript.jscomp.WarningsGuard.value",
        "snippet": "    final int value;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.parseJsDocDocumentation",
        "snippet": "  final boolean parseJsDocDocumentation;",
        "begin_line": 41,
        "end_line": 41,
        "comment": "\n   * Whether to parse the descriptions of jsdoc comments.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.isIdeMode",
        "snippet": "  final boolean isIdeMode;",
        "begin_line": 46,
        "end_line": 46,
        "comment": "\n   * Whether we're in ide mode.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.annotationNames",
        "snippet": "  final Map<String, Annotation> annotationNames;",
        "begin_line": 52,
        "end_line": 52,
        "comment": "\n   * Recognized JSDoc annotations, mapped from their name to their internal\n   * representation.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.suppressionNames",
        "snippet": "  final Set<String> suppressionNames;",
        "begin_line": 57,
        "end_line": 57,
        "comment": "\n   * Recognized names in a {@code @suppress} tag.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.languageMode",
        "snippet": "  final LanguageMode languageMode;",
        "begin_line": 62,
        "end_line": 62,
        "comment": "\n   * Accept ECMAScript5 syntax, such as getter/setter.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.parsing.Config",
        "src_path": "src/com/google/javascript/jscomp/parsing/Config.java",
        "signature": "com.google.javascript.jscomp.parsing.Config.acceptConstKeyword",
        "snippet": "  final boolean acceptConstKeyword;",
        "begin_line": 67,
        "end_line": 67,
        "comment": "\n   * Accept `const' keyword.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoType.java",
        "signature": "com.google.javascript.rhino.jstype.NoType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.scopeUpRefMap",
        "snippet": "  private final Multimap<Node, String> scopeUpRefMap = HashMultimap.create();",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Make sure of scope memorization to minimize scope creation cost."
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.varToNameUsage",
        "snippet": "  private final Multimap<Var, Node> varToNameUsage = HashMultimap.create();",
        "begin_line": 80,
        "end_line": 80,
        "comment": " in any scope."
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.varsByFrequency",
        "snippet": "  private final SortedSet<Assignment> varsByFrequency;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " All the information used for renaming."
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.assignments",
        "snippet": "  private final SortedMap<String, Assignment> assignments;",
        "begin_line": 86,
        "end_line": 86,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.oldPseudoNameMap",
        "snippet": "  private final Map<Node, String> oldPseudoNameMap;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ShadowVariables",
        "src_path": "src/com/google/javascript/jscomp/ShadowVariables.java",
        "signature": "com.google.javascript.jscomp.ShadowVariables.deltaPseudoNameMap",
        "snippet": "  private final Map<Node, String> deltaPseudoNameMap;",
        "begin_line": 88,
        "end_line": 88,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.root",
        "snippet": "  private final Node root;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.externsRoot",
        "snippet": "  private final Node externsRoot;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.inExterns",
        "snippet": "  private boolean inExterns;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.externsScope",
        "snippet": "  private Scope externsScope;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.generated",
        "snippet": "  private boolean generated = false;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.currentPreOrderIndex",
        "snippet": "  private int currentPreOrderIndex = 0;",
        "begin_line": 64,
        "end_line": 64,
        "comment": "\n   * Each reference has an index in post-order.\n   * Notice that some nodes are represented by 2 Ref objects, so\n   * this index is not necessarily unique.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.globalNames",
        "snippet": "  private List<Name> globalNames = new ArrayList<Name>();",
        "begin_line": 67,
        "end_line": 67,
        "comment": " Global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.GlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.GlobalNamespace.nameMap",
        "snippet": "  private Map<String, Name> nameMap = new HashMap<String, Name>();",
        "begin_line": 70,
        "end_line": 70,
        "comment": " Maps names (e.g. \"a.b.c\") to nodes in the global namespace tree "
    },
    {
        "class_name": "com.google.javascript.jscomp.NodeFilter",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.NodeFilter.newNodes",
        "snippet": "    private final Set<Node> newNodes;",
        "begin_line": 172,
        "end_line": 172,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BuildGlobalNamespace",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.BuildGlobalNamespace.nodeFilter",
        "snippet": "    private final Predicate<Node> nodeFilter;",
        "begin_line": 267,
        "end_line": 267,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.name",
        "snippet": "    private final String name;",
        "begin_line": 866,
        "end_line": 866,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.parent",
        "snippet": "    final Name parent;",
        "begin_line": 867,
        "end_line": 867,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.props",
        "snippet": "    List<Name> props;",
        "begin_line": 868,
        "end_line": 868,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.declaration",
        "snippet": "    Ref declaration;",
        "begin_line": 871,
        "end_line": 871,
        "comment": " The first global assignment to a name. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.refs",
        "snippet": "    private List<Ref> refs;",
        "begin_line": 874,
        "end_line": 874,
        "comment": " All references to a name. This must contain {@code declaration}. "
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.type",
        "snippet": "    Type type;",
        "begin_line": 876,
        "end_line": 876,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.isClassOrEnum",
        "snippet": "    private boolean isClassOrEnum = false;",
        "begin_line": 877,
        "end_line": 877,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.hasClassOrEnumDescendant",
        "snippet": "    private boolean hasClassOrEnumDescendant = false;",
        "begin_line": 878,
        "end_line": 878,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.globalSets",
        "snippet": "    int globalSets = 0;",
        "begin_line": 879,
        "end_line": 879,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.localSets",
        "snippet": "    int localSets = 0;",
        "begin_line": 880,
        "end_line": 880,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.aliasingGets",
        "snippet": "    int aliasingGets = 0;",
        "begin_line": 881,
        "end_line": 881,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.totalGets",
        "snippet": "    int totalGets = 0;",
        "begin_line": 882,
        "end_line": 882,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.callGets",
        "snippet": "    int callGets = 0;",
        "begin_line": 883,
        "end_line": 883,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.deleteProps",
        "snippet": "    int deleteProps = 0;",
        "begin_line": 884,
        "end_line": 884,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.inExterns",
        "snippet": "    boolean inExterns;",
        "begin_line": 885,
        "end_line": 885,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Name",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Name.docInfo",
        "snippet": "    JSDocInfo docInfo = null;",
        "begin_line": 887,
        "end_line": 887,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.node",
        "snippet": "    Node node;",
        "begin_line": 1160,
        "end_line": 1160,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.source",
        "snippet": "    final CompilerInput source;",
        "begin_line": 1161,
        "end_line": 1161,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.name",
        "snippet": "    final Name name;",
        "begin_line": 1162,
        "end_line": 1162,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.type",
        "snippet": "    final Type type;",
        "begin_line": 1163,
        "end_line": 1163,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.scope",
        "snippet": "    final Scope scope;",
        "begin_line": 1164,
        "end_line": 1164,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.preOrderIndex",
        "snippet": "    final int preOrderIndex;",
        "begin_line": 1165,
        "end_line": 1165,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Ref",
        "src_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
        "signature": "com.google.javascript.jscomp.Ref.twin",
        "snippet": "    private Ref twin = null;",
        "begin_line": 1174,
        "end_line": 1174,
        "comment": "\n     * Certain types of references are actually double-refs. For example,\n     * var a = b = 0;\n     * counts as both a \"set\" of b and an \"alias\" of b.\n     *\n     * We create two Refs for this node, and mark them as twins of each other.\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.FIRST_CHAR",
        "snippet": "  static final char[] FIRST_CHAR =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$\".toCharArray();",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Generate short name with this first character "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.NONFIRST_CHAR",
        "snippet": "  static final char[] NONFIRST_CHAR =\n    \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789$\"\n        .toCharArray();",
        "begin_line": 38,
        "end_line": 40,
        "comment": " These appear after after the first character "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.reservedNames",
        "snippet": "  private final Set<String> reservedNames;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.prefix",
        "snippet": "  private final String prefix;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.nameCount",
        "snippet": "  private int nameCount;",
        "begin_line": 44,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.firstChars",
        "snippet": "  private final char[] firstChars;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameGenerator",
        "src_path": "src/com/google/javascript/jscomp/NameGenerator.java",
        "signature": "com.google.javascript.jscomp.NameGenerator.nonFirstChars",
        "snippet": "  private final char[] nonFirstChars;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MinimizeExitPoints",
        "src_path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
        "signature": "com.google.javascript.jscomp.MinimizeExitPoints.compiler",
        "snippet": "  AbstractCompiler compiler;",
        "begin_line": 39,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR",
        "snippet": "  static final DiagnosticType CIRCULAR_DEPENDENCY_ERROR =\n      DiagnosticType.error(\"JSC_CIRCULAR_DEP\",\n          \"Circular dependency detected: {0}\");",
        "begin_line": 43,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.name",
        "snippet": "  private final String name;",
        "begin_line": 48,
        "end_line": 48,
        "comment": " Module name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.inputs",
        "snippet": "  private final List<CompilerInput> inputs = new ArrayList<CompilerInput>();",
        "begin_line": 51,
        "end_line": 51,
        "comment": " Source code inputs "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.deps",
        "snippet": "  private final List<JSModule> deps = new ArrayList<JSModule>();",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Modules that this module depends on "
    },
    {
        "class_name": "com.google.javascript.jscomp.JSModule",
        "src_path": "src/com/google/javascript/jscomp/JSModule.java",
        "signature": "com.google.javascript.jscomp.JSModule.depth",
        "snippet": "  private int depth;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " Reference to the JS compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.allNames",
        "snippet": "  private final Map<String, JsName> allNames = Maps.newTreeMap();",
        "begin_line": 81,
        "end_line": 81,
        "comment": " Map of all JS names found "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.referenceGraph",
        "snippet": "  private DiGraph<JsName, RefType> referenceGraph =\n      LinkedDirectedGraph.createWithoutAnnotations();",
        "begin_line": 84,
        "end_line": 85,
        "comment": " Reference dependency graph "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.scopes",
        "snippet": "  private final Map<Node, NameInformation> scopes = Maps.newHashMap();",
        "begin_line": 94,
        "end_line": 94,
        "comment": "\n   * Map of name scopes - all children of the Node key have a dependency on the\n   * name value.\n   *\n   * If scopes.get(node).equals(name) && node2 is a child of node, then node2\n   * will not get executed unless name is referenced via a get operation\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING",
        "snippet": "  private static final String PROTOTYPE_SUBSTRING = \".prototype.\";",
        "begin_line": 97,
        "end_line": 97,
        "comment": " Used to parse prototype names "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUBSTRING_LEN",
        "snippet": "  private static final int PROTOTYPE_SUBSTRING_LEN =\n      PROTOTYPE_SUBSTRING.length();",
        "begin_line": 99,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.PROTOTYPE_SUFFIX_LEN",
        "snippet": "  private static final int PROTOTYPE_SUFFIX_LEN = \".prototype\".length();",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.WINDOW",
        "snippet": "  private static final String WINDOW = \"window\";",
        "begin_line": 105,
        "end_line": 105,
        "comment": " Window root "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.FUNCTION",
        "snippet": "  private static final String FUNCTION = \"Function\";",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Function class name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.DEFAULT_GLOBAL_NAMES",
        "snippet": "  static final Set<String> DEFAULT_GLOBAL_NAMES = ImmutableSet.of(\n      \"window\", \"goog.global\");",
        "begin_line": 111,
        "end_line": 112,
        "comment": " All of these refer to global scope. These can be moved to config "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.removeUnreferenced",
        "snippet": "  private final boolean removeUnreferenced;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " Whether to remove unreferenced variables in main pass "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.globalNames",
        "snippet": "  private final Set<String> globalNames;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " Names that refer to the global scope "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.changeProxy",
        "snippet": "  private final AstChangeProxy changeProxy;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " Ast change helper "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.externalNames",
        "snippet": "  private final Set<String> externalNames = Sets.newHashSet();",
        "begin_line": 124,
        "end_line": 124,
        "comment": " Names that are externally defined "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.refNodes",
        "snippet": "  private final List<RefNode> refNodes = Lists.newArrayList();",
        "begin_line": 127,
        "end_line": 127,
        "comment": " Name declarations or assignments, in post-order traversal order "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.aliases",
        "snippet": "  private final Map<String, AliasSet> aliases = Maps.newHashMap();",
        "begin_line": 133,
        "end_line": 133,
        "comment": "\n   * When multiple names in the global scope point to the same object, we\n   * call them aliases. Store a map from each alias name to the alias set.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.AliasSet",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.AliasSet.names",
        "snippet": "    Set<String> names = Sets.newHashSet();",
        "begin_line": 144,
        "end_line": 144,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.name",
        "snippet": "    String name;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " Fully qualified name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.isExternallyReferenceable",
        "snippet": "    boolean isExternallyReferenceable = false;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " Whether the name is guaranteed to be externally referenceable "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.isPrototype",
        "snippet": "    boolean isPrototype = false;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " Whether this name is a prototype function "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.prototypeClass",
        "snippet": "    String prototypeClass = null;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " Name of the prototype class, i.e. \"a\" if name is \"a.prototype.b\" "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.prototypeProperty",
        "snippet": "    String prototypeProperty = null;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " Local name of prototype property i.e. \"b\" if name is \"a.prototype.b\" "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.superclass",
        "snippet": "    String superclass = null;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Name of the super class of name "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameInformation",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameInformation.onlyAffectsClassDef",
        "snippet": "    boolean onlyAffectsClassDef = false;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " Whether this is a call that only affects the class definition "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.name",
        "snippet": "    String name;",
        "begin_line": 212,
        "end_line": 212,
        "comment": " Fully qualified name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.prototypeNames",
        "snippet": "    List<String> prototypeNames = Lists.newArrayList();",
        "begin_line": 215,
        "end_line": 215,
        "comment": " Name of prototype functions attached to this name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.externallyDefined",
        "snippet": "    boolean externallyDefined = false;",
        "begin_line": 218,
        "end_line": 218,
        "comment": " Whether this is an externally defined name "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.referenced",
        "snippet": "    boolean referenced = false;",
        "begin_line": 221,
        "end_line": 221,
        "comment": " Whether this node is referenced "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.hasWrittenDescendants",
        "snippet": "    boolean hasWrittenDescendants = false;",
        "begin_line": 224,
        "end_line": 224,
        "comment": " Whether the name has descendants that are written to. "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsName",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsName.hasInstanceOfReference",
        "snippet": "    boolean hasInstanceOfReference = false;",
        "begin_line": 227,
        "end_line": 227,
        "comment": " Whether the name is used in a instanceof check "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsNameRefNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsNameRefNode.name",
        "snippet": "    JsName name;",
        "begin_line": 274,
        "end_line": 274,
        "comment": " JsName node for this reference "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsNameRefNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsNameRefNode.node",
        "snippet": "    Node node;",
        "begin_line": 280,
        "end_line": 280,
        "comment": "\n     * Top GETPROP or NAME or STRING [objlit key] node defining the name of\n     * this node\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.JsNameRefNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.JsNameRefNode.parent",
        "snippet": "    Node parent;",
        "begin_line": 286,
        "end_line": 286,
        "comment": "\n     * Parent node of the name access\n     * (ASSIGN, VAR, FUNCTION, OBJECTLIT, or CALL)\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecialReferenceNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.SpecialReferenceNode.name",
        "snippet": "    JsName name;",
        "begin_line": 368,
        "end_line": 368,
        "comment": " JsName node for the function "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecialReferenceNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.SpecialReferenceNode.node",
        "snippet": "    Node node;",
        "begin_line": 371,
        "end_line": 371,
        "comment": " The CALL node "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecialReferenceNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.SpecialReferenceNode.parent",
        "snippet": "    Node parent;",
        "begin_line": 374,
        "end_line": 374,
        "comment": " The parent of {@code node} "
    },
    {
        "class_name": "com.google.javascript.jscomp.SpecialReferenceNode",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.SpecialReferenceNode.gramps",
        "snippet": "    Node gramps;",
        "begin_line": 377,
        "end_line": 377,
        "comment": " The parent of {@code parent} "
    },
    {
        "class_name": "com.google.javascript.jscomp.NameAnalyzer",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.NameAnalyzer.NON_LOCAL_RESULT_PREDICATE",
        "snippet": "  private static final Predicate<Node> NON_LOCAL_RESULT_PREDICATE =\n      new Predicate<Node>() {\n        @Override\n        public boolean apply(Node input) {\n          if (input.getType() == Token.CALL) {\n            return false;\n          }\n          // TODO(johnlenz): handle NEW calls that record their 'this'\n          // in global scope and effectly return an alias.\n          // Other non-local references are handled by this pass.\n          return true;\n        }\n      };",
        "begin_line": 693,
        "end_line": 705,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FindReferences",
        "src_path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
        "signature": "com.google.javascript.jscomp.FindReferences.nodesToKeep",
        "snippet": "    Set<Node> nodesToKeep;",
        "begin_line": 716,
        "end_line": 716,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 87,
        "end_line": 87,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.baseType",
        "snippet": "    JSTypeExpression baseType = null;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Function information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.extendedInterfaces",
        "snippet": "    List<JSTypeExpression> extendedInterfaces = null;",
        "begin_line": 91,
        "end_line": 91,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.implementedInterfaces",
        "snippet": "    List<JSTypeExpression> implementedInterfaces = null;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.parameters",
        "snippet": "    Map<String, JSTypeExpression> parameters = null;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.thrownTypes",
        "snippet": "    List<JSTypeExpression> thrownTypes = null;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.templateTypeName",
        "snippet": "    String templateTypeName = null;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.description",
        "snippet": "    String description = null;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " Other information"
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.meaning",
        "snippet": "    String meaning = null;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.deprecated",
        "snippet": "    String deprecated = null;",
        "begin_line": 100,
        "end_line": 100,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.license",
        "snippet": "    String license = null;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.suppressions",
        "snippet": "    Set<String> suppressions = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.modifies",
        "snippet": "    Set<String> modifies = null;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedInfo.lendsName",
        "snippet": "    String lendsName = null;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sourceComment",
        "snippet": "    String sourceComment = null;",
        "begin_line": 108,
        "end_line": 108,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.markers",
        "snippet": "    List<Marker> markers = null;",
        "begin_line": 109,
        "end_line": 109,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.parameters",
        "snippet": "    Map<String, String> parameters = null;",
        "begin_line": 111,
        "end_line": 111,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.throwsDescriptions",
        "snippet": "    Map<JSTypeExpression, String> throwsDescriptions = null;",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.blockDescription",
        "snippet": "    String blockDescription = null;",
        "begin_line": 113,
        "end_line": 113,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.fileOverview",
        "snippet": "    String fileOverview = null;",
        "begin_line": 114,
        "end_line": 114,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.returnDescription",
        "snippet": "    String returnDescription = null;",
        "begin_line": 115,
        "end_line": 115,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.version",
        "snippet": "    String version = null;",
        "begin_line": 116,
        "end_line": 116,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.authors",
        "snippet": "    List<String> authors = null;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.LazilyInitializedDocumentation",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.LazilyInitializedDocumentation.sees",
        "snippet": "    List<String> sees = null;",
        "begin_line": 119,
        "end_line": 119,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.TypePosition",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.TypePosition.hasBrackets",
        "snippet": "    public boolean hasBrackets = false;",
        "begin_line": 132,
        "end_line": 132,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.annotation",
        "snippet": "    public StringPosition annotation = null;",
        "begin_line": 146,
        "end_line": 146,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.name",
        "snippet": "    public StringPosition name = null;",
        "begin_line": 147,
        "end_line": 147,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.description",
        "snippet": "    public StringPosition description = null;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.Marker",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.Marker.type",
        "snippet": "    public TypePosition type = null;",
        "begin_line": 149,
        "end_line": 149,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.info",
        "snippet": "  private LazilyInitializedInfo info = null;",
        "begin_line": 152,
        "end_line": 152,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.documentation",
        "snippet": "  private LazilyInitializedDocumentation documentation = null;",
        "begin_line": 154,
        "end_line": 154,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.sourceName",
        "snippet": "  private String sourceName = null;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " The source file containing the JSDoc. "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.visibility",
        "snippet": "  private Visibility visibility = null;",
        "begin_line": 159,
        "end_line": 159,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.bitset",
        "snippet": "  private int bitset = 0x00;",
        "begin_line": 172,
        "end_line": 172,
        "comment": "\n   * The {@link #isConstant()}, {@link #isConstructor()}, {@link #isInterface},\n   * {@link #isHidden()} and {@link #shouldPreserveTry()} flags as well as\n   * whether the {@link #type} field stores a value for {@link #getType()},\n   * {@link #getReturnType()} or {@link #getEnumParameterType()}.\n   *\n   * @see #setFlag(boolean, int)\n   * @see #getFlag(int)\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.type",
        "snippet": "  private JSTypeExpression type = null;",
        "begin_line": 182,
        "end_line": 182,
        "comment": "\n   * The type for {@link #getType()}, {@link #getReturnType()} or\n   * {@link #getEnumParameterType()}. The knowledge of which one is recorded is\n   * stored in the {@link #bitset} field.\n   *\n   * @see #setType(JSTypeExpression, int)\n   * @see #getType(int)\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.thisType",
        "snippet": "  private JSTypeExpression thisType = null;",
        "begin_line": 187,
        "end_line": 187,
        "comment": "\n   * The type for {@link #getThisType()}.\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.includeDocumentation",
        "snippet": "  private boolean includeDocumentation = false;",
        "begin_line": 194,
        "end_line": 194,
        "comment": "\n   * Whether to include documentation.\n   *\n   * @see JSDocInfo.LazilyInitializedDocumentation\n   "
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FLAGS",
        "snippet": "  private static final int MASK_FLAGS       = 0x3FFFFFFF;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " Mask all the boolean annotation types"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTANT",
        "snippet": "  private static final int MASK_CONSTANT      = 0x00000001; // @const",
        "begin_line": 203,
        "end_line": 203,
        "comment": " @const"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_CONSTRUCTOR",
        "snippet": "  private static final int MASK_CONSTRUCTOR   = 0x00000002; // @constructor",
        "begin_line": 204,
        "end_line": 204,
        "comment": " @constructor"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEFINE",
        "snippet": "  private static final int MASK_DEFINE        = 0x00000004; // @define",
        "begin_line": 205,
        "end_line": 205,
        "comment": " @define"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_HIDDEN",
        "snippet": "  private static final int MASK_HIDDEN        = 0x00000008; // @hidden",
        "begin_line": 206,
        "end_line": 206,
        "comment": " @hidden"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_PRESERVETRY",
        "snippet": "  private static final int MASK_PRESERVETRY   = 0x00000010; // @preserveTry",
        "begin_line": 207,
        "end_line": 207,
        "comment": " @preserveTry"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCHECK",
        "snippet": "  private static final int MASK_NOCHECK       = 0x00000020; // @notypecheck",
        "begin_line": 208,
        "end_line": 208,
        "comment": " @notypecheck"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_OVERRIDE",
        "snippet": "  private static final int MASK_OVERRIDE      = 0x00000040; // @override",
        "begin_line": 209,
        "end_line": 209,
        "comment": " @override"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOALIAS",
        "snippet": "  private static final int MASK_NOALIAS       = 0x00000080; // @noalias",
        "begin_line": 210,
        "end_line": 210,
        "comment": " @noalias"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_DEPRECATED",
        "snippet": "  private static final int MASK_DEPRECATED    = 0x00000100; // @deprecated",
        "begin_line": 211,
        "end_line": 211,
        "comment": " @deprecated"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_INTERFACE",
        "snippet": "  private static final int MASK_INTERFACE     = 0x00000200; // @interface",
        "begin_line": 212,
        "end_line": 212,
        "comment": " @interface"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXPORT",
        "snippet": "  private static final int MASK_EXPORT        = 0x00000400; // @export",
        "begin_line": 213,
        "end_line": 213,
        "comment": " @export"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSHADOW",
        "snippet": "  private static final int MASK_NOSHADOW      = 0x00000800; // @noshadow",
        "begin_line": 214,
        "end_line": 214,
        "comment": " @noshadow"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_FILEOVERVIEW",
        "snippet": "  private static final int MASK_FILEOVERVIEW  = 0x00001000; // @fileoverview",
        "begin_line": 215,
        "end_line": 215,
        "comment": " @fileoverview"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_IMPLICITCAST",
        "snippet": "  private static final int MASK_IMPLICITCAST  = 0x00002000; // @implicitCast",
        "begin_line": 216,
        "end_line": 216,
        "comment": " @implicitCast"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOSIDEEFFECTS",
        "snippet": "  private static final int MASK_NOSIDEEFFECTS = 0x00004000; // @nosideeffects",
        "begin_line": 217,
        "end_line": 217,
        "comment": " @nosideeffects"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_EXTERNS",
        "snippet": "  private static final int MASK_EXTERNS       = 0x00008000; // @externs",
        "begin_line": 218,
        "end_line": 218,
        "comment": " @externs"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_JAVADISPATCH",
        "snippet": "  private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispath",
        "begin_line": 219,
        "end_line": 219,
        "comment": " @javadispath"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_NOCOMPILE",
        "snippet": "  private static final int MASK_NOCOMPILE     = 0x00020000; // @nocompile",
        "begin_line": 220,
        "end_line": 220,
        "comment": " @nocompile"
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.MASK_TYPEFIELD",
        "snippet": "  private static final int MASK_TYPEFIELD    = 0xE0000000; // 1110...",
        "begin_line": 224,
        "end_line": 224,
        "comment": " 1110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPE",
        "snippet": "  private static final int TYPEFIELD_TYPE    = 0x20000000; // 0010...",
        "begin_line": 225,
        "end_line": 225,
        "comment": " 0010..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_RETURN",
        "snippet": "  private static final int TYPEFIELD_RETURN  = 0x40000000; // 0100...",
        "begin_line": 226,
        "end_line": 226,
        "comment": " 0100..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_ENUM",
        "snippet": "  private static final int TYPEFIELD_ENUM    = 0x60000000; // 0110...",
        "begin_line": 227,
        "end_line": 227,
        "comment": " 0110..."
    },
    {
        "class_name": "com.google.javascript.rhino.JSDocInfo",
        "src_path": "src/com/google/javascript/rhino/JSDocInfo.java",
        "signature": "com.google.javascript.rhino.JSDocInfo.TYPEFIELD_TYPEDEF",
        "snippet": "  private static final int TYPEFIELD_TYPEDEF = 0x80000000; // 1000...",
        "begin_line": 228,
        "end_line": 228,
        "comment": " 1000..."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.config",
        "snippet": "  private final CommandLineConfig config;",
        "begin_line": 92,
        "end_line": 92,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.jsOutput",
        "snippet": "  private Appendable jsOutput;",
        "begin_line": 94,
        "end_line": 94,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.err",
        "snippet": "  private final PrintStream err;",
        "begin_line": 95,
        "end_line": 95,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.compiler",
        "snippet": "  private A compiler;",
        "begin_line": 96,
        "end_line": 96,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.inputCharset",
        "snippet": "  private Charset inputCharset;",
        "begin_line": 98,
        "end_line": 98,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.outputCharset",
        "snippet": "  private String outputCharset;",
        "begin_line": 99,
        "end_line": 99,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.testMode",
        "snippet": "  private boolean testMode = false;",
        "begin_line": 101,
        "end_line": 101,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.externsSupplierForTesting",
        "snippet": "  private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;",
        "begin_line": 102,
        "end_line": 102,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.inputsSupplierForTesting",
        "snippet": "  private Supplier<List<JSSourceFile>> inputsSupplierForTesting = null;",
        "begin_line": 103,
        "end_line": 103,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.modulesSupplierForTesting",
        "snippet": "  private Supplier<List<JSModule>> modulesSupplierForTesting = null;",
        "begin_line": 104,
        "end_line": 104,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.exitCodeReceiverForTesting",
        "snippet": "  private Function<Integer, Boolean> exitCodeReceiverForTesting = null;",
        "begin_line": 105,
        "end_line": 105,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER",
        "snippet": "  private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " Bookkeeping to measure optimal phase orderings."
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.OUTPUT_WRAPPER_MARKER",
        "snippet": "  private static final String OUTPUT_WRAPPER_MARKER = \"%output%\";",
        "begin_line": 110,
        "end_line": 110,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.AbstractCommandLineRunner",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.AbstractCommandLineRunner.runTimeStats",
        "snippet": "  private final RunTimeStats runTimeStats = new RunTimeStats();",
        "begin_line": 112,
        "end_line": 112,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.FlagUsageException",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.FlagUsageException.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 336,
        "end_line": 336,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.bestRunTime",
        "snippet": "    private long bestRunTime = Long.MAX_VALUE;",
        "begin_line": 1260,
        "end_line": 1260,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.worstRunTime",
        "snippet": "    private long worstRunTime = Long.MIN_VALUE;",
        "begin_line": 1261,
        "end_line": 1261,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.lastStartTime",
        "snippet": "    private long lastStartTime = 0;",
        "begin_line": 1262,
        "end_line": 1262,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.RunTimeStats",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.RunTimeStats.loopedPassesInBestRun",
        "snippet": "    private List<List<String>> loopedPassesInBestRun = null;",
        "begin_line": 1263,
        "end_line": 1263,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printTree",
        "snippet": "    private boolean printTree = false;",
        "begin_line": 1315,
        "end_line": 1315,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.computePhaseOrdering",
        "snippet": "    private boolean computePhaseOrdering = false;",
        "begin_line": 1323,
        "end_line": 1323,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printAst",
        "snippet": "    private boolean printAst = false;",
        "begin_line": 1334,
        "end_line": 1334,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.printPassGraph",
        "snippet": "    private boolean printPassGraph = false;",
        "begin_line": 1345,
        "end_line": 1345,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jscompDevMode",
        "snippet": "    private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
        "begin_line": 1353,
        "end_line": 1353,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.loggingLevel",
        "snippet": "    private String loggingLevel = Level.WARNING.getName();",
        "begin_line": 1361,
        "end_line": 1361,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.externs",
        "snippet": "    private final List<String> externs = Lists.newArrayList();",
        "begin_line": 1373,
        "end_line": 1373,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.js",
        "snippet": "    private final List<String> js = Lists.newArrayList();",
        "begin_line": 1384,
        "end_line": 1384,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.jsOutputFile",
        "snippet": "    private String jsOutputFile = \"\";",
        "begin_line": 1395,
        "end_line": 1395,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.module",
        "snippet": "    private final List<String> module = Lists.newArrayList();",
        "begin_line": 1405,
        "end_line": 1405,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapInputFile",
        "snippet": "    private String variableMapInputFile = \"\";",
        "begin_line": 1421,
        "end_line": 1421,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapInputFile",
        "snippet": "    private String propertyMapInputFile = \"\";",
        "begin_line": 1432,
        "end_line": 1432,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.variableMapOutputFile",
        "snippet": "    private String variableMapOutputFile = \"\";",
        "begin_line": 1443,
        "end_line": 1443,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createNameMapFiles",
        "snippet": "    private boolean createNameMapFiles = false;",
        "begin_line": 1454,
        "end_line": 1454,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.propertyMapOutputFile",
        "snippet": "    private String propertyMapOutputFile = \"\";",
        "begin_line": 1468,
        "end_line": 1468,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.codingConvention",
        "snippet": "    private CodingConvention codingConvention = new DefaultCodingConvention();",
        "begin_line": 1479,
        "end_line": 1479,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.summaryDetailLevel",
        "snippet": "    private int summaryDetailLevel = 1;",
        "begin_line": 1489,
        "end_line": 1489,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputWrapper",
        "snippet": "    private String outputWrapper = \"\";",
        "begin_line": 1503,
        "end_line": 1503,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleWrapper",
        "snippet": "    private final List<String> moduleWrapper = Lists.newArrayList();",
        "begin_line": 1514,
        "end_line": 1514,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.moduleOutputPathPrefix",
        "snippet": "    private String moduleOutputPathPrefix = \"\";",
        "begin_line": 1528,
        "end_line": 1528,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.createSourceMap",
        "snippet": "    private String createSourceMap = \"\";",
        "begin_line": 1540,
        "end_line": 1540,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.sourceMapDetailLevel",
        "snippet": "    private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
        "begin_line": 1554,
        "end_line": 1555,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.sourceMapFormat",
        "snippet": "    private SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
        "begin_line": 1565,
        "end_line": 1566,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.warningGuards",
        "snippet": "    private WarningGuardSpec warningGuards = null;",
        "begin_line": 1576,
        "end_line": 1576,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.define",
        "snippet": "    private final List<String> define = Lists.newArrayList();",
        "begin_line": 1586,
        "end_line": 1586,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.tweak",
        "snippet": "    private final List<String> tweak = Lists.newArrayList();",
        "begin_line": 1601,
        "end_line": 1601,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.tweakProcessing",
        "snippet": "    private TweakProcessing tweakProcessing = TweakProcessing.OFF;",
        "begin_line": 1615,
        "end_line": 1615,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.charset",
        "snippet": "    private String charset = \"\";",
        "begin_line": 1625,
        "end_line": 1625,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.manageClosureDependencies",
        "snippet": "    private boolean manageClosureDependencies = false;",
        "begin_line": 1635,
        "end_line": 1635,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.closureEntryPoints",
        "snippet": "    private List<String> closureEntryPoints = ImmutableList.of();",
        "begin_line": 1646,
        "end_line": 1646,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputManifests",
        "snippet": "    private List<String> outputManifests = ImmutableList.of();",
        "begin_line": 1658,
        "end_line": 1658,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.outputBundles",
        "snippet": "    private List<String> outputBundles = ImmutableList.of();",
        "begin_line": 1668,
        "end_line": 1668,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.acceptConstKeyword",
        "snippet": "    private boolean acceptConstKeyword = false;",
        "begin_line": 1678,
        "end_line": 1678,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.languageIn",
        "snippet": "    private String languageIn = \"\";",
        "begin_line": 1688,
        "end_line": 1688,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CommandLineConfig",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.CommandLineConfig.skipNormalOutputs",
        "snippet": "    private boolean skipNormalOutputs = false;",
        "begin_line": 1702,
        "end_line": 1702,
        "comment": "\n     * Set whether the normal outputs of compilation should be skipped\n     "
    },
    {
        "class_name": "com.google.javascript.jscomp.Entry",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Entry.level",
        "snippet": "      private final CheckLevel level;",
        "begin_line": 1716,
        "end_line": 1716,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Entry",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.Entry.groupName",
        "snippet": "      private final String groupName;",
        "begin_line": 1717,
        "end_line": 1717,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.WarningGuardSpec",
        "src_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
        "signature": "com.google.javascript.jscomp.WarningGuardSpec.entries",
        "snippet": "    private final List<Entry> entries = Lists.newArrayList();",
        "begin_line": 1726,
        "end_line": 1726,
        "comment": " The entries, in the order that they were added."
    },
    {
        "class_name": "com.google.javascript.jscomp.ClosureOptimizePrimitives",
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "signature": "com.google.javascript.jscomp.ClosureOptimizePrimitives.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Reference to the JS compiler "
    },
    {
        "class_name": "com.google.javascript.jscomp.FindObjectCreateCalls",
        "src_path": "src/com/google/javascript/jscomp/ClosureOptimizePrimitives.java",
        "signature": "com.google.javascript.jscomp.FindObjectCreateCalls.callNodes",
        "snippet": "    List<Node> callNodes = Lists.newArrayList();",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NoResolvedType",
        "src_path": "src/com/google/javascript/rhino/jstype/NoResolvedType.java",
        "signature": "com.google.javascript.rhino.jstype.NoResolvedType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.options",
        "snippet": "  final CompilerOptions options;",
        "begin_line": 38,
        "end_line": 38,
        "comment": " Used by subclasses in this package."
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.typedScopeCreator",
        "snippet": "  private MemoizedScopeCreator typedScopeCreator;",
        "begin_line": 45,
        "end_line": 45,
        "comment": "\n   * A memoized version of scopeCreator. It must be memoized so that\n   * we can make two separate passes over the AST, one for inferring types\n   * and one for checking types.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.internalScopeCreator",
        "snippet": "  private TypedScopeCreator internalScopeCreator;",
        "begin_line": 50,
        "end_line": 50,
        "comment": "\n   * This is the scope creator that {@code TypedScopeCreator} delegates to.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfig",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfig.topScope",
        "snippet": "  Scope topScope = null;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The global typed scope. "
    },
    {
        "class_name": "com.google.javascript.jscomp.PassConfigDelegate",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.PassConfigDelegate.delegate",
        "snippet": "    private final PassConfig delegate;",
        "begin_line": 241,
        "end_line": 241,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1L;",
        "begin_line": 277,
        "end_line": 277,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.cssNames",
        "snippet": "    final Map<String, Integer> cssNames;",
        "begin_line": 279,
        "end_line": 279,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.exportedNames",
        "snippet": "    final Set<String> exportedNames;",
        "begin_line": 280,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.crossModuleIdGenerator",
        "snippet": "    final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;",
        "begin_line": 281,
        "end_line": 281,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.variableMap",
        "snippet": "    final VariableMap variableMap;",
        "begin_line": 282,
        "end_line": 282,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.propertyMap",
        "snippet": "    final VariableMap propertyMap;",
        "begin_line": 283,
        "end_line": 283,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.anonymousFunctionNameMap",
        "snippet": "    final VariableMap anonymousFunctionNameMap;",
        "begin_line": 284,
        "end_line": 284,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.stringMap",
        "snippet": "    final VariableMap stringMap;",
        "begin_line": 285,
        "end_line": 285,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.functionNames",
        "snippet": "    final FunctionNames functionNames;",
        "begin_line": 286,
        "end_line": 286,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.State",
        "src_path": "src/com/google/javascript/jscomp/PassConfig.java",
        "signature": "com.google.javascript.jscomp.State.idGeneratorMap",
        "snippet": "    final String idGeneratorMap;",
        "begin_line": 287,
        "end_line": 287,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.GLOBAL_VAR_DECL_OVERHEAD",
        "snippet": "  private static final int GLOBAL_VAR_DECL_OVERHEAD = \"var t;\".length();",
        "begin_line": 78,
        "end_line": 78,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.PER_EXTRACTION_INSTANCE_OVERHEAD",
        "snippet": "  private static final int PER_EXTRACTION_INSTANCE_OVERHEAD =\n      \"t=y.prototype;\".length();",
        "begin_line": 82,
        "end_line": 83,
        "comment": " the prototype object."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.PER_PROTOTYPE_MEMBER_DELTA",
        "snippet": "  private static final int PER_PROTOTYPE_MEMBER_DELTA =\n      \"t.y=\".length() - \"x[p].y=\".length();",
        "begin_line": 86,
        "end_line": 87,
        "comment": " The gain we get per prototype declaration. Assuming it can be aliased."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.prototypeAlias",
        "snippet": "  private String prototypeAlias = \"JSCompiler_prototypeAlias\";",
        "begin_line": 91,
        "end_line": 91,
        "comment": " object. Of cause, we assume that it'll be renamed by RenameVars."
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractPrototypeMemberDeclarations.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 93,
        "end_line": 93,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherExtractionInfo.instances",
        "snippet": "    private List<ExtractionInstance> instances = Lists.newLinkedList();",
        "begin_line": 192,
        "end_line": 192,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.GatherExtractionInfo",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.GatherExtractionInfo.totalDelta",
        "snippet": "    private int totalDelta = GLOBAL_VAR_DECL_OVERHEAD;",
        "begin_line": 193,
        "end_line": 193,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.declarations",
        "snippet": "    LinkedList<PrototypeMemberDeclaration> declarations = Lists.newLinkedList();",
        "begin_line": 234,
        "end_line": 234,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.delta",
        "snippet": "    private int delta = 0;",
        "begin_line": 235,
        "end_line": 235,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ExtractionInstance",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.ExtractionInstance.parent",
        "snippet": "    private final Node parent;",
        "begin_line": 236,
        "end_line": 236,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.memberName",
        "snippet": "    final String memberName;",
        "begin_line": 278,
        "end_line": 278,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.node",
        "snippet": "    final Node node;",
        "begin_line": 279,
        "end_line": 279,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.qualifiedClassName",
        "snippet": "    final String qualifiedClassName;",
        "begin_line": 280,
        "end_line": 280,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrototypeMemberDeclaration",
        "src_path": "src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java",
        "signature": "com.google.javascript.jscomp.PrototypeMemberDeclaration.lhs",
        "snippet": "    final Node lhs;",
        "begin_line": 281,
        "end_line": 281,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.implicitReturn",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> implicitReturn;",
        "begin_line": 40,
        "end_line": 40,
        "comment": "\n   * A special node marked by the node value key null to a singleton\n   * \"return\" when control is transfered outside of the current control flow\n   * graph.\n   "
    },
    {
        "class_name": "com.google.javascript.jscomp.ControlFlowGraph",
        "src_path": "src/com/google/javascript/jscomp/ControlFlowGraph.java",
        "signature": "com.google.javascript.jscomp.ControlFlowGraph.entry",
        "snippet": "  private final DiGraphNode<N, ControlFlowGraph.Branch> entry;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 33,
        "end_line": 33,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.scope",
        "snippet": "  private Scope scope;",
        "begin_line": 34,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.sourceName",
        "snippet": "  private String sourceName;",
        "begin_line": 35,
        "end_line": 35,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.redeclarationHandler",
        "snippet": "  private final RedeclarationHandler redeclarationHandler;",
        "begin_line": 36,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.ARGUMENTS",
        "snippet": "  private static final String ARGUMENTS = \"arguments\";",
        "begin_line": 40,
        "end_line": 40,
        "comment": " scope, but not explicitly declared."
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_MULTIPLY_DECLARED_ERROR =\n      DiagnosticType.error(\n          \"JSC_VAR_MULTIPLY_DECLARED_ERROR\",\n          \"Variable {0} first declared in {1}\");",
        "begin_line": 42,
        "end_line": 45,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.SyntacticScopeCreator",
        "src_path": "src/com/google/javascript/jscomp/SyntacticScopeCreator.java",
        "signature": "com.google.javascript.jscomp.SyntacticScopeCreator.VAR_ARGUMENTS_SHADOWED_ERROR",
        "snippet": "  public static final DiagnosticType VAR_ARGUMENTS_SHADOWED_ERROR =\n    DiagnosticType.error(\n        \"JSC_VAR_ARGUMENTS_SHADOWED_ERROR\",\n        \"Shadowing \\\"arguments\\\" is not allowed\");",
        "begin_line": 47,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.module",
        "snippet": "  private JSModule module;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Info about where the file lives."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.name",
        "snippet": "  final private String name;",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.ast",
        "snippet": "  private final SourceAst ast;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The AST."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.lineOffsets",
        "snippet": "  private int[] lineOffsets = null;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " Source Line Information"
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.provides",
        "snippet": "  private final Set<String> provides = Sets.newHashSet();",
        "begin_line": 56,
        "end_line": 56,
        "comment": " Provided and required symbols."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.requires",
        "snippet": "  private final Set<String> requires = Sets.newHashSet();",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.generatedDependencyInfoFromSource",
        "snippet": "  private boolean generatedDependencyInfoFromSource = false;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.errorManager",
        "snippet": "  private ErrorManager errorManager;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " provides/requires."
    },
    {
        "class_name": "com.google.javascript.jscomp.CompilerInput",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.CompilerInput.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " An AbstractCompiler for doing parsing."
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.provides",
        "snippet": "    private final List<String> provides = Lists.newArrayList();",
        "begin_line": 223,
        "end_line": 223,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.requires",
        "snippet": "    private final List<String> requires = Lists.newArrayList();",
        "begin_line": 224,
        "end_line": 224,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DepsFinder",
        "src_path": "src/com/google/javascript/jscomp/CompilerInput.java",
        "signature": "com.google.javascript.jscomp.DepsFinder.codingConvention",
        "snippet": "    private final CodingConvention codingConvention =\n        new ClosureCodingConvention();",
        "begin_line": 225,
        "end_line": 226,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeParameters",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.OptimizeParameters.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 46,
        "end_line": 46,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OptimizeParameters",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.OptimizeParameters.removedNodes",
        "snippet": "  private List<Node> removedNodes = Lists.newArrayList();",
        "begin_line": 47,
        "end_line": 47,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.arg",
        "snippet": "    private final Node arg;",
        "begin_line": 409,
        "end_line": 409,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.shouldRemove",
        "snippet": "    private boolean shouldRemove;",
        "begin_line": 410,
        "end_line": 410,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.hasSideEffects",
        "snippet": "    private boolean hasSideEffects;",
        "begin_line": 411,
        "end_line": 411,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Parameter",
        "src_path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
        "signature": "com.google.javascript.jscomp.Parameter.canBeSideEffected",
        "snippet": "    private boolean canBeSideEffected;",
        "begin_line": 412,
        "end_line": 412,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.messages",
        "snippet": "  private final SortedSet<ErrorWithLevel> messages =\n      Sets.newTreeSet(new LeveledJSErrorComparator());",
        "begin_line": 38,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.errorCount",
        "snippet": "  private int errorCount = 0;",
        "begin_line": 40,
        "end_line": 40,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.warningCount",
        "snippet": "  private int warningCount = 0;",
        "begin_line": 41,
        "end_line": 41,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.BasicErrorManager",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.BasicErrorManager.typedPercent",
        "snippet": "  private double typedPercent = 0.0;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_LT_P2",
        "snippet": "    private static final int P1_LT_P2 = -1;",
        "begin_line": 117,
        "end_line": 117,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.LeveledJSErrorComparator",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.LeveledJSErrorComparator.P1_GT_P2",
        "snippet": "    private static final int P1_GT_P2 = 1;",
        "begin_line": 118,
        "end_line": 118,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.error",
        "snippet": "    final JSError error;",
        "begin_line": 174,
        "end_line": 174,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.ErrorWithLevel",
        "src_path": "src/com/google/javascript/jscomp/BasicErrorManager.java",
        "signature": "com.google.javascript.jscomp.ErrorWithLevel.level",
        "snippet": "    final CheckLevel level;",
        "begin_line": 175,
        "end_line": 175,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.AllType",
        "src_path": "src/com/google/javascript/rhino/jstype/AllType.java",
        "signature": "com.google.javascript.rhino.jstype.AllType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.ErrorFunctionType",
        "src_path": "src/com/google/javascript/rhino/jstype/ErrorFunctionType.java",
        "signature": "com.google.javascript.rhino.jstype.ErrorFunctionType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.compiler",
        "snippet": "  private final AbstractCompiler compiler;",
        "begin_line": 42,
        "end_line": 42,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.liveness",
        "snippet": "  private LiveVariablesAnalysis liveness;",
        "begin_line": 43,
        "end_line": 43,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.DeadAssignmentsElimination",
        "src_path": "src/com/google/javascript/jscomp/DeadAssignmentsElimination.java",
        "signature": "com.google.javascript.jscomp.DeadAssignmentsElimination.matchRemovableAssigns",
        "snippet": "  private static final Predicate<Node> matchRemovableAssigns =\n      new Predicate<Node>() {\n    @Override\n    public boolean apply(Node n) {\n      return (NodeUtil.isAssignmentOp(n) &&\n              n.getFirstChild().getType() == Token.NAME) ||\n          n.getType() == Token.INC || n.getType() == Token.DEC;\n    }\n  };",
        "begin_line": 48,
        "end_line": 56,
        "comment": " will already remove variables that are initialized but unused."
    },
    {
        "class_name": "com.google.javascript.jscomp.CodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD",
        "snippet": "  static final int DEFAULT_LINE_LENGTH_THRESHOLD = 500;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.mappings",
        "snippet": "    final private Deque<Mapping> mappings;",
        "begin_line": 48,
        "end_line": 48,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.allMappings",
        "snippet": "    final private List<Mapping> allMappings;",
        "begin_line": 49,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.createSrcMap",
        "snippet": "    final private boolean createSrcMap;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.sourceMapDetailLevel",
        "snippet": "    final private SourceMap.DetailLevel sourceMapDetailLevel;",
        "begin_line": 51,
        "end_line": 51,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.code",
        "snippet": "    protected final StringBuilder code = new StringBuilder(1024);",
        "begin_line": 52,
        "end_line": 52,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLengthThreshold",
        "snippet": "    protected final int lineLengthThreshold;",
        "begin_line": 53,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineLength",
        "snippet": "    protected int lineLength = 0;",
        "begin_line": 54,
        "end_line": 54,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.MappedCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.MappedCodePrinter.lineIndex",
        "snippet": "    protected int lineIndex = 0;",
        "begin_line": 55,
        "end_line": 55,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.node",
        "snippet": "      Node node;",
        "begin_line": 80,
        "end_line": 80,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.start",
        "snippet": "      FilePosition start;",
        "begin_line": 81,
        "end_line": 81,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Mapping",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Mapping.end",
        "snippet": "      FilePosition end;",
        "begin_line": 82,
        "end_line": 82,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.INDENT",
        "snippet": "    static final String INDENT = \"  \";",
        "begin_line": 199,
        "end_line": 199,
        "comment": " The number of characters after which we insert a line break in the code"
    },
    {
        "class_name": "com.google.javascript.jscomp.PrettyCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.PrettyCodePrinter.indent",
        "snippet": "    private int indent = 0;",
        "begin_line": 201,
        "end_line": 201,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineBreak",
        "snippet": "    private final boolean lineBreak;",
        "begin_line": 392,
        "end_line": 392,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.lineStartPosition",
        "snippet": "    private int lineStartPosition = 0;",
        "begin_line": 393,
        "end_line": 393,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CompactCodePrinter",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.CompactCodePrinter.preferredBreakPosition",
        "snippet": "    private int preferredBreakPosition = 0;",
        "begin_line": 394,
        "end_line": 394,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.root",
        "snippet": "    private final Node root;",
        "begin_line": 484,
        "end_line": 484,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.prettyPrint",
        "snippet": "    private boolean prettyPrint = false;",
        "begin_line": 485,
        "end_line": 485,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineBreak",
        "snippet": "    private boolean lineBreak = false;",
        "begin_line": 486,
        "end_line": 486,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputTypes",
        "snippet": "    private boolean outputTypes = false;",
        "begin_line": 487,
        "end_line": 487,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.lineLengthThreshold",
        "snippet": "    private int lineLengthThreshold = DEFAULT_LINE_LENGTH_THRESHOLD;",
        "begin_line": 488,
        "end_line": 488,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMap",
        "snippet": "    private SourceMap sourceMap = null;",
        "begin_line": 489,
        "end_line": 489,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.sourceMapDetailLevel",
        "snippet": "    private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
        "begin_line": 490,
        "end_line": 491,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.outputCharset",
        "snippet": "    private Charset outputCharset = null;",
        "begin_line": 494,
        "end_line": 494,
        "comment": " then just output ASCII."
    },
    {
        "class_name": "com.google.javascript.jscomp.Builder",
        "src_path": "src/com/google/javascript/jscomp/CodePrinter.java",
        "signature": "com.google.javascript.jscomp.Builder.tagAsStrict",
        "snippet": "    private boolean tagAsStrict;",
        "begin_line": 495,
        "end_line": 495,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.INVALID_GETELEM_INDEX_ERROR",
        "snippet": "  static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
        "begin_line": 31,
        "end_line": 34,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.INDEX_OUT_OF_BOUNDS_ERROR",
        "snippet": "  static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
        "begin_line": 36,
        "end_line": 39,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.NEGATING_A_NON_NUMBER_ERROR",
        "snippet": "  static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
        "begin_line": 41,
        "end_line": 44,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE",
        "snippet": "  static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
        "begin_line": 46,
        "end_line": 49,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS",
        "snippet": "  static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
        "begin_line": 51,
        "end_line": 53,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND",
        "snippet": "  static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
        "begin_line": 55,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeFoldConstants",
        "src_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
        "signature": "com.google.javascript.jscomp.PeepholeFoldConstants.MAX_FOLD_NUMBER",
        "snippet": "  private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
        "begin_line": 59,
        "end_line": 59,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccidentalSemicolon",
        "src_path": "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "signature": "com.google.javascript.jscomp.CheckAccidentalSemicolon.SUSPICIOUS_SEMICOLON",
        "snippet": "  static final DiagnosticType SUSPICIOUS_SEMICOLON = DiagnosticType.warning(\n      \"JSC_SUSPICIOUS_SEMICOLON\",\n      \"If this if/for/while really shouldn't have a body, use {}\");",
        "begin_line": 34,
        "end_line": 36,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.CheckAccidentalSemicolon",
        "src_path": "src/com/google/javascript/jscomp/CheckAccidentalSemicolon.java",
        "signature": "com.google.javascript.jscomp.CheckAccidentalSemicolon.level",
        "snippet": "  private final CheckLevel level;",
        "begin_line": 38,
        "end_line": 38,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OperaCompoundAssignFix",
        "src_path": "src/com/google/javascript/jscomp/OperaCompoundAssignFix.java",
        "signature": "com.google.javascript.jscomp.OperaCompoundAssignFix.compiler",
        "snippet": "  private AbstractCompiler compiler;",
        "begin_line": 57,
        "end_line": 57,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.OperaCompoundAssignFix",
        "src_path": "src/com/google/javascript/jscomp/OperaCompoundAssignFix.java",
        "signature": "com.google.javascript.jscomp.OperaCompoundAssignFix.names",
        "snippet": "  private final Deque<VariableNameGenerator> names;",
        "begin_line": 58,
        "end_line": 58,
        "comment": ""
    },
    {
        "class_name": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods",
        "src_path": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
        "signature": "com.google.javascript.jscomp.PeepholeReplaceKnownMethods.ROOT_LOCALE",
        "snippet": "  private static final Locale ROOT_LOCALE = new Locale(\"\");",
        "begin_line": 34,
        "end_line": 34,
        "comment": " The LOCALE independent \"locale\""
    },
    {
        "class_name": "com.google.javascript.rhino.jstype.NumberType",
        "src_path": "src/com/google/javascript/rhino/jstype/NumberType.java",
        "signature": "com.google.javascript.rhino.jstype.NumberType.serialVersionUID",
        "snippet": "  private static final long serialVersionUID = 1L;",
        "begin_line": 50,
        "end_line": 50,
        "comment": ""
    }
]