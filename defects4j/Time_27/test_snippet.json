[
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "",
        "child_ranges": [
            "(line 63,col 9)-(line 63,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestPeriodFormatterBuilder.class);\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "",
        "child_ranges": [
            "(line 67,col 9)-(line 67,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.TestPeriodFormatterBuilder(java.lang.String)",
        "snippet": "    public TestPeriodFormatterBuilder(String name) {\n        super(name);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n        originalDateTimeZone = DateTimeZone.getDefault();\n        originalTimeZone = TimeZone.getDefault();\n        originalLocale = Locale.getDefault();\n        DateTimeZone.setDefault(LONDON);\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n        Locale.setDefault(Locale.UK);\n        \n        builder = new PeriodFormatterBuilder();\n    }\n",
        "begin_line": 74,
        "end_line": 84,
        "comment": "",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 59)",
            "(line 76,col 9)-(line 76,col 57)",
            "(line 77,col 9)-(line 77,col 49)",
            "(line 78,col 9)-(line 78,col 45)",
            "(line 79,col 9)-(line 79,col 40)",
            "(line 80,col 9)-(line 80,col 67)",
            "(line 81,col 9)-(line 81,col 37)",
            "(line 83,col 9)-(line 83,col 47)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n        DateTimeUtils.setCurrentMillisSystem();\n        DateTimeZone.setDefault(originalDateTimeZone);\n        TimeZone.setDefault(originalTimeZone);\n        Locale.setDefault(originalLocale);\n        originalDateTimeZone = null;\n        originalTimeZone = null;\n        originalLocale = null;\n    }\n",
        "begin_line": 86,
        "end_line": 94,
        "comment": "",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 47)",
            "(line 88,col 9)-(line 88,col 54)",
            "(line 89,col 9)-(line 89,col 46)",
            "(line 90,col 9)-(line 90,col 42)",
            "(line 91,col 9)-(line 91,col 36)",
            "(line 92,col 9)-(line 92,col 32)",
            "(line 93,col 9)-(line 93,col 30)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testToFormatterPrinterParser()",
        "snippet": "    public void testToFormatterPrinterParser() {\n        builder.appendYears();\n        assertNotNull(builder.toFormatter());\n        assertNotNull(builder.toPrinter());\n        assertNotNull(builder.toParser());\n    }\n",
        "begin_line": 97,
        "end_line": 102,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 30)",
            "(line 99,col 9)-(line 99,col 45)",
            "(line 100,col 9)-(line 100,col 43)",
            "(line 101,col 9)-(line 101,col 42)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatYears()",
        "snippet": "    public void testFormatYears() {\n        PeriodFormatter f = builder.appendYears().toFormatter();\n        assertEquals(\"1\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 105,
        "end_line": 115,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 64)",
            "(line 107,col 9)-(line 107,col 43)",
            "(line 108,col 9)-(line 108,col 77)",
            "(line 109,col 9)-(line 109,col 92)",
            "(line 111,col 9)-(line 111,col 54)",
            "(line 112,col 9)-(line 112,col 38)",
            "(line 113,col 9)-(line 113,col 72)",
            "(line 114,col 9)-(line 114,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatMonths()",
        "snippet": "    public void testFormatMonths() {\n        PeriodFormatter f = builder.appendMonths().toFormatter();\n        assertEquals(\"2\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 117,
        "end_line": 127,
        "comment": "",
        "child_ranges": [
            "(line 118,col 9)-(line 118,col 65)",
            "(line 119,col 9)-(line 119,col 43)",
            "(line 120,col 9)-(line 120,col 77)",
            "(line 121,col 9)-(line 121,col 92)",
            "(line 123,col 9)-(line 123,col 54)",
            "(line 124,col 9)-(line 124,col 38)",
            "(line 125,col 9)-(line 125,col 72)",
            "(line 126,col 9)-(line 126,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatWeeks()",
        "snippet": "    public void testFormatWeeks() {\n        PeriodFormatter f = builder.appendWeeks().toFormatter();\n        assertEquals(\"3\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 129,
        "end_line": 139,
        "comment": "",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 64)",
            "(line 131,col 9)-(line 131,col 43)",
            "(line 132,col 9)-(line 132,col 77)",
            "(line 133,col 9)-(line 133,col 92)",
            "(line 135,col 9)-(line 135,col 54)",
            "(line 136,col 9)-(line 136,col 38)",
            "(line 137,col 9)-(line 137,col 72)",
            "(line 138,col 9)-(line 138,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatDays()",
        "snippet": "    public void testFormatDays() {\n        PeriodFormatter f = builder.appendDays().toFormatter();\n        assertEquals(\"4\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 141,
        "end_line": 151,
        "comment": "",
        "child_ranges": [
            "(line 142,col 9)-(line 142,col 63)",
            "(line 143,col 9)-(line 143,col 43)",
            "(line 144,col 9)-(line 144,col 77)",
            "(line 145,col 9)-(line 145,col 92)",
            "(line 147,col 9)-(line 147,col 54)",
            "(line 148,col 9)-(line 148,col 38)",
            "(line 149,col 9)-(line 149,col 72)",
            "(line 150,col 9)-(line 150,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatHours()",
        "snippet": "    public void testFormatHours() {\n        PeriodFormatter f = builder.appendHours().toFormatter();\n        assertEquals(\"5\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 153,
        "end_line": 163,
        "comment": "",
        "child_ranges": [
            "(line 154,col 9)-(line 154,col 64)",
            "(line 155,col 9)-(line 155,col 43)",
            "(line 156,col 9)-(line 156,col 77)",
            "(line 157,col 9)-(line 157,col 92)",
            "(line 159,col 9)-(line 159,col 54)",
            "(line 160,col 9)-(line 160,col 38)",
            "(line 161,col 9)-(line 161,col 72)",
            "(line 162,col 9)-(line 162,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatMinutes()",
        "snippet": "    public void testFormatMinutes() {\n        PeriodFormatter f = builder.appendMinutes().toFormatter();\n        assertEquals(\"6\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 165,
        "end_line": 175,
        "comment": "",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 66)",
            "(line 167,col 9)-(line 167,col 43)",
            "(line 168,col 9)-(line 168,col 77)",
            "(line 169,col 9)-(line 169,col 92)",
            "(line 171,col 9)-(line 171,col 54)",
            "(line 172,col 9)-(line 172,col 38)",
            "(line 173,col 9)-(line 173,col 72)",
            "(line 174,col 9)-(line 174,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSeconds()",
        "snippet": "    public void testFormatSeconds() {\n        PeriodFormatter f = builder.appendSeconds().toFormatter();\n        assertEquals(\"7\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 177,
        "end_line": 187,
        "comment": "",
        "child_ranges": [
            "(line 178,col 9)-(line 178,col 66)",
            "(line 179,col 9)-(line 179,col 43)",
            "(line 180,col 9)-(line 180,col 77)",
            "(line 181,col 9)-(line 181,col 92)",
            "(line 183,col 9)-(line 183,col 54)",
            "(line 184,col 9)-(line 184,col 38)",
            "(line 185,col 9)-(line 185,col 72)",
            "(line 186,col 9)-(line 186,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSecondsWithMillis()",
        "snippet": "    public void testFormatSecondsWithMillis() {\n        PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter();\n        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n        assertEquals(\"7.000\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n        assertEquals(\"7.001\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n        assertEquals(\"7.999\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n        assertEquals(\"8.000\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n        assertEquals(\"8.001\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n        assertEquals(\"6.999\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n        assertEquals(\"-6.999\", f.print(p));\n        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n        assertEquals(\"-7.001\", f.print(p));\n        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0.000\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 189,
        "end_line": 235,
        "comment": "",
        "child_ranges": [
            "(line 190,col 9)-(line 190,col 76)",
            "(line 191,col 9)-(line 191,col 54)",
            "(line 192,col 9)-(line 192,col 42)",
            "(line 193,col 9)-(line 193,col 72)",
            "(line 194,col 9)-(line 194,col 87)",
            "(line 196,col 9)-(line 196,col 47)",
            "(line 197,col 9)-(line 197,col 42)",
            "(line 198,col 9)-(line 198,col 72)",
            "(line 199,col 9)-(line 199,col 87)",
            "(line 201,col 9)-(line 201,col 49)",
            "(line 202,col 9)-(line 202,col 42)",
            "(line 203,col 9)-(line 203,col 72)",
            "(line 204,col 9)-(line 204,col 87)",
            "(line 206,col 9)-(line 206,col 50)",
            "(line 207,col 9)-(line 207,col 42)",
            "(line 208,col 9)-(line 208,col 72)",
            "(line 209,col 9)-(line 209,col 87)",
            "(line 211,col 9)-(line 211,col 50)",
            "(line 212,col 9)-(line 212,col 42)",
            "(line 213,col 9)-(line 213,col 72)",
            "(line 214,col 9)-(line 214,col 87)",
            "(line 216,col 9)-(line 216,col 48)",
            "(line 217,col 9)-(line 217,col 42)",
            "(line 218,col 9)-(line 218,col 72)",
            "(line 219,col 9)-(line 219,col 87)",
            "(line 221,col 9)-(line 221,col 48)",
            "(line 222,col 9)-(line 222,col 43)",
            "(line 223,col 9)-(line 223,col 72)",
            "(line 224,col 9)-(line 224,col 87)",
            "(line 226,col 9)-(line 226,col 49)",
            "(line 227,col 9)-(line 227,col 43)",
            "(line 228,col 9)-(line 228,col 72)",
            "(line 229,col 9)-(line 229,col 87)",
            "(line 231,col 9)-(line 231,col 47)",
            "(line 232,col 9)-(line 232,col 42)",
            "(line 233,col 9)-(line 233,col 72)",
            "(line 234,col 9)-(line 234,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSecondsWithOptionalMillis()",
        "snippet": "    public void testFormatSecondsWithOptionalMillis() {\n        PeriodFormatter f = builder.appendSecondsWithOptionalMillis().toFormatter();\n        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n        assertEquals(\"7\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n        assertEquals(\"7.001\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n        assertEquals(\"7.999\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n        assertEquals(\"8\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n        assertEquals(\"8.001\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n        assertEquals(\"6.999\", f.print(p));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n        assertEquals(\"-6.999\", f.print(p));\n        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n        assertEquals(\"-7.001\", f.print(p));\n        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n        \n        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 237,
        "end_line": 283,
        "comment": "",
        "child_ranges": [
            "(line 238,col 9)-(line 238,col 84)",
            "(line 239,col 9)-(line 239,col 54)",
            "(line 240,col 9)-(line 240,col 38)",
            "(line 241,col 9)-(line 241,col 72)",
            "(line 242,col 9)-(line 242,col 87)",
            "(line 244,col 9)-(line 244,col 47)",
            "(line 245,col 9)-(line 245,col 42)",
            "(line 246,col 9)-(line 246,col 72)",
            "(line 247,col 9)-(line 247,col 87)",
            "(line 249,col 9)-(line 249,col 49)",
            "(line 250,col 9)-(line 250,col 42)",
            "(line 251,col 9)-(line 251,col 72)",
            "(line 252,col 9)-(line 252,col 87)",
            "(line 254,col 9)-(line 254,col 50)",
            "(line 255,col 9)-(line 255,col 38)",
            "(line 256,col 9)-(line 256,col 72)",
            "(line 257,col 9)-(line 257,col 87)",
            "(line 259,col 9)-(line 259,col 50)",
            "(line 260,col 9)-(line 260,col 42)",
            "(line 261,col 9)-(line 261,col 72)",
            "(line 262,col 9)-(line 262,col 87)",
            "(line 264,col 9)-(line 264,col 48)",
            "(line 265,col 9)-(line 265,col 42)",
            "(line 266,col 9)-(line 266,col 72)",
            "(line 267,col 9)-(line 267,col 87)",
            "(line 269,col 9)-(line 269,col 48)",
            "(line 270,col 9)-(line 270,col 43)",
            "(line 271,col 9)-(line 271,col 72)",
            "(line 272,col 9)-(line 272,col 87)",
            "(line 274,col 9)-(line 274,col 49)",
            "(line 275,col 9)-(line 275,col 43)",
            "(line 276,col 9)-(line 276,col 72)",
            "(line 277,col 9)-(line 277,col 87)",
            "(line 279,col 9)-(line 279,col 47)",
            "(line 280,col 9)-(line 280,col 38)",
            "(line 281,col 9)-(line 281,col 72)",
            "(line 282,col 9)-(line 282,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatMillis()",
        "snippet": "    public void testFormatMillis() {\n        PeriodFormatter f = builder.appendMillis().toFormatter();\n        assertEquals(\"8\", f.print(PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0\", f.print(p));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 285,
        "end_line": 295,
        "comment": "",
        "child_ranges": [
            "(line 286,col 9)-(line 286,col 65)",
            "(line 287,col 9)-(line 287,col 43)",
            "(line 288,col 9)-(line 288,col 77)",
            "(line 289,col 9)-(line 289,col 92)",
            "(line 291,col 9)-(line 291,col 54)",
            "(line 292,col 9)-(line 292,col 38)",
            "(line 293,col 9)-(line 293,col 72)",
            "(line 294,col 9)-(line 294,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatMillis3Digit()",
        "snippet": "    public void testFormatMillis3Digit() {\n        PeriodFormatter f = builder.appendMillis3Digit().toFormatter();\n        assertEquals(\"008\", f.print(PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"000\", f.print(p));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 297,
        "end_line": 307,
        "comment": "",
        "child_ranges": [
            "(line 298,col 9)-(line 298,col 71)",
            "(line 299,col 9)-(line 299,col 45)",
            "(line 300,col 9)-(line 300,col 77)",
            "(line 301,col 9)-(line 301,col 92)",
            "(line 303,col 9)-(line 303,col 54)",
            "(line 304,col 9)-(line 304,col 40)",
            "(line 305,col 9)-(line 305,col 72)",
            "(line 306,col 9)-(line 306,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrefixSimple1()",
        "snippet": "    public void testFormatPrefixSimple1() {\n        PeriodFormatter f = builder.appendPrefix(\"Years:\").appendYears().toFormatter();\n        assertEquals(\"Years:1\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"Years:0\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 310,
        "end_line": 320,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 311,col 9)-(line 311,col 87)",
            "(line 312,col 9)-(line 312,col 49)",
            "(line 313,col 9)-(line 313,col 77)",
            "(line 314,col 9)-(line 314,col 92)",
            "(line 316,col 9)-(line 316,col 54)",
            "(line 317,col 9)-(line 317,col 44)",
            "(line 318,col 9)-(line 318,col 72)",
            "(line 319,col 9)-(line 319,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrefixSimple2()",
        "snippet": "    public void testFormatPrefixSimple2() {\n        PeriodFormatter f = builder.appendPrefix(\"Hours:\").appendHours().toFormatter();\n        assertEquals(\"Hours:5\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"Hours:0\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 322,
        "end_line": 332,
        "comment": "",
        "child_ranges": [
            "(line 323,col 9)-(line 323,col 87)",
            "(line 324,col 9)-(line 324,col 49)",
            "(line 325,col 9)-(line 325,col 77)",
            "(line 326,col 9)-(line 326,col 92)",
            "(line 328,col 9)-(line 328,col 54)",
            "(line 329,col 9)-(line 329,col 44)",
            "(line 330,col 9)-(line 330,col 72)",
            "(line 331,col 9)-(line 331,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrefixSimple3()",
        "snippet": "    public void testFormatPrefixSimple3() {\n        try {\n            builder.appendPrefix(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 334,
        "end_line": 339,
        "comment": "",
        "child_ranges": [
            "(line 335,col 9)-(line 338,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrefixPlural1()",
        "snippet": "    public void testFormatPrefixPlural1() {\n        PeriodFormatter f = builder.appendPrefix(\"Year:\", \"Years:\").appendYears().toFormatter();\n        assertEquals(\"Year:1\", f.print(PERIOD));\n        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"Years:0\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 341,
        "end_line": 351,
        "comment": "",
        "child_ranges": [
            "(line 342,col 9)-(line 342,col 96)",
            "(line 343,col 9)-(line 343,col 48)",
            "(line 344,col 9)-(line 344,col 77)",
            "(line 345,col 9)-(line 345,col 92)",
            "(line 347,col 9)-(line 347,col 54)",
            "(line 348,col 9)-(line 348,col 44)",
            "(line 349,col 9)-(line 349,col 72)",
            "(line 350,col 9)-(line 350,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrefixPlural2()",
        "snippet": "    public void testFormatPrefixPlural2() {\n        PeriodFormatter f = builder.appendPrefix(\"Hour:\", \"Hours:\").appendHours().toFormatter();\n        assertEquals(\"Hours:5\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"Hours:0\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 353,
        "end_line": 363,
        "comment": "",
        "child_ranges": [
            "(line 354,col 9)-(line 354,col 96)",
            "(line 355,col 9)-(line 355,col 49)",
            "(line 356,col 9)-(line 356,col 77)",
            "(line 357,col 9)-(line 357,col 92)",
            "(line 359,col 9)-(line 359,col 54)",
            "(line 360,col 9)-(line 360,col 44)",
            "(line 361,col 9)-(line 361,col 72)",
            "(line 362,col 9)-(line 362,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrefixPlural3()",
        "snippet": "    public void testFormatPrefixPlural3() {\n        try {\n            builder.appendPrefix(null, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            builder.appendPrefix(\"\", null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            builder.appendPrefix(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 365,
        "end_line": 378,
        "comment": "",
        "child_ranges": [
            "(line 366,col 9)-(line 369,col 48)",
            "(line 370,col 9)-(line 373,col 48)",
            "(line 374,col 9)-(line 377,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixSimple1()",
        "snippet": "    public void testFormatSuffixSimple1() {\n        PeriodFormatter f = builder.appendYears().appendSuffix(\" years\").toFormatter();\n        assertEquals(\"1 years\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0 years\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 381,
        "end_line": 391,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 382,col 9)-(line 382,col 87)",
            "(line 383,col 9)-(line 383,col 49)",
            "(line 384,col 9)-(line 384,col 77)",
            "(line 385,col 9)-(line 385,col 92)",
            "(line 387,col 9)-(line 387,col 54)",
            "(line 388,col 9)-(line 388,col 44)",
            "(line 389,col 9)-(line 389,col 72)",
            "(line 390,col 9)-(line 390,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixSimple2()",
        "snippet": "    public void testFormatSuffixSimple2() {\n        PeriodFormatter f = builder.appendHours().appendSuffix(\" hours\").toFormatter();\n        assertEquals(\"5 hours\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0 hours\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 393,
        "end_line": 403,
        "comment": "",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 87)",
            "(line 395,col 9)-(line 395,col 49)",
            "(line 396,col 9)-(line 396,col 77)",
            "(line 397,col 9)-(line 397,col 92)",
            "(line 399,col 9)-(line 399,col 54)",
            "(line 400,col 9)-(line 400,col 44)",
            "(line 401,col 9)-(line 401,col 72)",
            "(line 402,col 9)-(line 402,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixSimple3()",
        "snippet": "    public void testFormatSuffixSimple3() {\n        try {\n            builder.appendSuffix(null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 405,
        "end_line": 410,
        "comment": "",
        "child_ranges": [
            "(line 406,col 9)-(line 409,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixSimple4()",
        "snippet": "    public void testFormatSuffixSimple4() {\n        try {\n            builder.appendSuffix(\" hours\");\n            fail();\n        } catch (IllegalStateException ex) {}\n    }\n",
        "begin_line": 412,
        "end_line": 417,
        "comment": "",
        "child_ranges": [
            "(line 413,col 9)-(line 416,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixPlural1()",
        "snippet": "    public void testFormatSuffixPlural1() {\n        PeriodFormatter f = builder.appendYears().appendSuffix(\" year\", \" years\").toFormatter();\n        assertEquals(\"1 year\", f.print(PERIOD));\n        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0 years\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 419,
        "end_line": 429,
        "comment": "",
        "child_ranges": [
            "(line 420,col 9)-(line 420,col 96)",
            "(line 421,col 9)-(line 421,col 48)",
            "(line 422,col 9)-(line 422,col 77)",
            "(line 423,col 9)-(line 423,col 92)",
            "(line 425,col 9)-(line 425,col 54)",
            "(line 426,col 9)-(line 426,col 44)",
            "(line 427,col 9)-(line 427,col 72)",
            "(line 428,col 9)-(line 428,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixPlural2()",
        "snippet": "    public void testFormatSuffixPlural2() {\n        PeriodFormatter f = builder.appendHours().appendSuffix(\" hour\", \" hours\").toFormatter();\n        assertEquals(\"5 hours\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"0 hours\", f.print(p));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 431,
        "end_line": 441,
        "comment": "",
        "child_ranges": [
            "(line 432,col 9)-(line 432,col 96)",
            "(line 433,col 9)-(line 433,col 49)",
            "(line 434,col 9)-(line 434,col 77)",
            "(line 435,col 9)-(line 435,col 92)",
            "(line 437,col 9)-(line 437,col 54)",
            "(line 438,col 9)-(line 438,col 44)",
            "(line 439,col 9)-(line 439,col 72)",
            "(line 440,col 9)-(line 440,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixPlural3()",
        "snippet": "    public void testFormatSuffixPlural3() {\n        try {\n            builder.appendSuffix(null, \"\");\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            builder.appendSuffix(\"\", null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n        try {\n            builder.appendSuffix(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 443,
        "end_line": 456,
        "comment": "",
        "child_ranges": [
            "(line 444,col 9)-(line 447,col 48)",
            "(line 448,col 9)-(line 451,col 48)",
            "(line 452,col 9)-(line 455,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSuffixPlural4()",
        "snippet": "    public void testFormatSuffixPlural4() {\n        try {\n            builder.appendSuffix(\" hour\", \" hours\");\n            fail();\n        } catch (IllegalStateException ex) {}\n    }\n",
        "begin_line": 458,
        "end_line": 463,
        "comment": "",
        "child_ranges": [
            "(line 459,col 9)-(line 462,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrefixSuffix()",
        "snippet": "    public void testFormatPrefixSuffix() {\n        PeriodFormatter f = builder.appendPrefix(\"P\").appendYears().appendSuffix(\"Y\").toFormatter();\n        assertEquals(\"P1Y\", f.print(PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n        assertEquals(\"P0Y\", f.print(p));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 466,
        "end_line": 476,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 467,col 9)-(line 467,col 100)",
            "(line 468,col 9)-(line 468,col 45)",
            "(line 469,col 9)-(line 469,col 77)",
            "(line 470,col 9)-(line 470,col 92)",
            "(line 472,col 9)-(line 472,col 54)",
            "(line 473,col 9)-(line 473,col 40)",
            "(line 474,col 9)-(line 474,col 72)",
            "(line 475,col 9)-(line 475,col 87)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSeparatorSimple()",
        "snippet": "    public void testFormatSeparatorSimple() {\n        PeriodFormatter f = builder.appendYears().appendSeparator(\"T\").appendHours().toFormatter();\n        assertEquals(\"1T5\", f.print(PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"5\", f.print(TIME_PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1\", f.print(DATE_PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 479,
        "end_line": 492,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 480,col 9)-(line 480,col 99)",
            "(line 481,col 9)-(line 481,col 45)",
            "(line 482,col 9)-(line 482,col 77)",
            "(line 483,col 9)-(line 483,col 92)",
            "(line 485,col 9)-(line 485,col 48)",
            "(line 486,col 9)-(line 486,col 82)",
            "(line 487,col 9)-(line 487,col 97)",
            "(line 489,col 9)-(line 489,col 48)",
            "(line 490,col 9)-(line 490,col 82)",
            "(line 491,col 9)-(line 491,col 97)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSeparatorComplex()",
        "snippet": "    public void testFormatSeparatorComplex() {\n        PeriodFormatter f = builder\n            .appendYears().appendSeparator(\", \", \" and \")\n            .appendHours().appendSeparator(\", \", \" and \")\n            .appendMinutes().appendSeparator(\", \", \" and \")\n            .toFormatter();\n        assertEquals(\"1, 5 and 6\", f.print(PERIOD));\n        assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"5 and 6\", f.print(TIME_PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1\", f.print(DATE_PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 494,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 495,col 9)-(line 499,col 27)",
            "(line 500,col 9)-(line 500,col 52)",
            "(line 501,col 9)-(line 501,col 78)",
            "(line 502,col 9)-(line 502,col 92)",
            "(line 504,col 9)-(line 504,col 54)",
            "(line 505,col 9)-(line 505,col 82)",
            "(line 506,col 9)-(line 506,col 97)",
            "(line 508,col 9)-(line 508,col 48)",
            "(line 509,col 9)-(line 509,col 82)",
            "(line 510,col 9)-(line 510,col 97)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSeparatorIfFieldsAfter()",
        "snippet": "    public void testFormatSeparatorIfFieldsAfter() {\n        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter(\"T\").appendHours().toFormatter();\n        assertEquals(\"1T5\", f.print(PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"T5\", f.print(TIME_PERIOD));\n        assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1\", f.print(DATE_PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 513,
        "end_line": 526,
        "comment": "",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 112)",
            "(line 515,col 9)-(line 515,col 45)",
            "(line 516,col 9)-(line 516,col 77)",
            "(line 517,col 9)-(line 517,col 92)",
            "(line 519,col 9)-(line 519,col 49)",
            "(line 520,col 9)-(line 520,col 82)",
            "(line 521,col 9)-(line 521,col 97)",
            "(line 523,col 9)-(line 523,col 48)",
            "(line 524,col 9)-(line 524,col 82)",
            "(line 525,col 9)-(line 525,col 97)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatSeparatorIfFieldsBefore()",
        "snippet": "    public void testFormatSeparatorIfFieldsBefore() {\n        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore(\"T\").appendHours().toFormatter();\n        assertEquals(\"1T5\", f.print(PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"5\", f.print(TIME_PERIOD));\n        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1T\", f.print(DATE_PERIOD));\n        assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 528,
        "end_line": 541,
        "comment": "",
        "child_ranges": [
            "(line 529,col 9)-(line 529,col 113)",
            "(line 530,col 9)-(line 530,col 45)",
            "(line 531,col 9)-(line 531,col 77)",
            "(line 532,col 9)-(line 532,col 92)",
            "(line 534,col 9)-(line 534,col 48)",
            "(line 535,col 9)-(line 535,col 82)",
            "(line 536,col 9)-(line 536,col 97)",
            "(line 538,col 9)-(line 538,col 49)",
            "(line 539,col 9)-(line 539,col 82)",
            "(line 540,col 9)-(line 540,col 97)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatLiteral()",
        "snippet": "    public void testFormatLiteral() {\n        PeriodFormatter f = builder.appendLiteral(\"HELLO\").toFormatter();\n        assertEquals(\"HELLO\", f.print(PERIOD));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(0, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 544,
        "end_line": 549,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 545,col 9)-(line 545,col 73)",
            "(line 546,col 9)-(line 546,col 47)",
            "(line 547,col 9)-(line 547,col 77)",
            "(line 548,col 9)-(line 548,col 92)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatAppendFormatter()",
        "snippet": "    public void testFormatAppendFormatter() {\n        PeriodFormatter base = builder.appendYears().appendLiteral(\"-\").toFormatter();\n        PeriodFormatter f = new PeriodFormatterBuilder().append(base).appendYears().toFormatter();\n        assertEquals(\"1-1\", f.print(PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 551,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 552,col 9)-(line 552,col 86)",
            "(line 553,col 9)-(line 553,col 98)",
            "(line 554,col 9)-(line 554,col 45)",
            "(line 555,col 9)-(line 555,col 77)",
            "(line 556,col 9)-(line 556,col 92)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatMinDigits()",
        "snippet": "    public void testFormatMinDigits() {\n        PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter();\n        assertEquals(\"0001\", f.print(PERIOD));\n        assertEquals(4, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 559,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 109)",
            "(line 561,col 9)-(line 561,col 46)",
            "(line 562,col 9)-(line 562,col 77)",
            "(line 563,col 9)-(line 563,col 92)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroDefault()",
        "snippet": "    public void testFormatPrintZeroDefault() {\n        PeriodFormatter f =\n            new PeriodFormatterBuilder()\n                .appendYears().appendLiteral(\"-\")\n                .appendMonths().appendLiteral(\"-\")\n                .appendWeeks().appendLiteral(\"-\")\n                .appendDays().toFormatter();\n        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n        \n        // test only last instance of same field is output\n        f = new PeriodFormatterBuilder()\n                .appendYears().appendLiteral(\"-\")\n                .appendYears().toFormatter();\n        assertEquals(\"-0\", f.print(EMPTY_PERIOD));\n        assertEquals(2, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 567,
        "end_line": 597,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 568,col 9)-(line 573,col 44)",
            "(line 574,col 9)-(line 574,col 49)",
            "(line 575,col 9)-(line 575,col 77)",
            "(line 576,col 9)-(line 576,col 92)",
            "(line 578,col 9)-(line 578,col 61)",
            "(line 579,col 9)-(line 579,col 92)",
            "(line 580,col 9)-(line 580,col 107)",
            "(line 582,col 9)-(line 582,col 56)",
            "(line 583,col 9)-(line 583,col 86)",
            "(line 584,col 9)-(line 584,col 101)",
            "(line 586,col 9)-(line 586,col 52)",
            "(line 587,col 9)-(line 587,col 83)",
            "(line 588,col 9)-(line 588,col 98)",
            "(line 591,col 9)-(line 593,col 45)",
            "(line 594,col 9)-(line 594,col 50)",
            "(line 595,col 9)-(line 595,col 83)",
            "(line 596,col 9)-(line 596,col 98)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyLast()",
        "snippet": "    public void testFormatPrintZeroRarelyLast() {\n        PeriodFormatter f =\n            new PeriodFormatterBuilder()\n                .printZeroRarelyLast()\n                .appendYears().appendLiteral(\"-\")\n                .appendMonths().appendLiteral(\"-\")\n                .appendWeeks().appendLiteral(\"-\")\n                .appendDays().toFormatter();\n        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 599,
        "end_line": 622,
        "comment": "",
        "child_ranges": [
            "(line 600,col 9)-(line 606,col 44)",
            "(line 607,col 9)-(line 607,col 49)",
            "(line 608,col 9)-(line 608,col 77)",
            "(line 609,col 9)-(line 609,col 92)",
            "(line 611,col 9)-(line 611,col 61)",
            "(line 612,col 9)-(line 612,col 92)",
            "(line 613,col 9)-(line 613,col 107)",
            "(line 615,col 9)-(line 615,col 56)",
            "(line 616,col 9)-(line 616,col 86)",
            "(line 617,col 9)-(line 617,col 101)",
            "(line 619,col 9)-(line 619,col 52)",
            "(line 620,col 9)-(line 620,col 83)",
            "(line 621,col 9)-(line 621,col 98)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirst()",
        "snippet": "    public void testFormatPrintZeroRarelyFirst() {\n        PeriodFormatter f =\n            new PeriodFormatterBuilder()\n                .printZeroRarelyFirst()\n                .appendYears().appendLiteral(\"-\")\n                .appendMonths().appendLiteral(\"-\")\n                .appendWeeks().appendLiteral(\"-\")\n                .appendDays().toFormatter();\n        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"0---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"0---\", f.print(EMPTY_PERIOD));\n        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 624,
        "end_line": 647,
        "comment": "",
        "child_ranges": [
            "(line 625,col 9)-(line 631,col 44)",
            "(line 632,col 9)-(line 632,col 49)",
            "(line 633,col 9)-(line 633,col 77)",
            "(line 634,col 9)-(line 634,col 92)",
            "(line 636,col 9)-(line 636,col 61)",
            "(line 637,col 9)-(line 637,col 92)",
            "(line 638,col 9)-(line 638,col 107)",
            "(line 640,col 9)-(line 640,col 56)",
            "(line 641,col 9)-(line 641,col 86)",
            "(line 642,col 9)-(line 642,col 101)",
            "(line 644,col 9)-(line 644,col 52)",
            "(line 645,col 9)-(line 645,col 83)",
            "(line 646,col 9)-(line 646,col 98)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirstYears()",
        "snippet": "    public void testFormatPrintZeroRarelyFirstYears() {\n        PeriodFormatter f = new PeriodFormatterBuilder()\n            .printZeroRarelyFirst()\n            .appendYears().toFormatter();\n        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n    }\n",
        "begin_line": 649,
        "end_line": 654,
        "comment": "",
        "child_ranges": [
            "(line 650,col 9)-(line 652,col 41)",
            "(line 653,col 9)-(line 653,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirstMonths()",
        "snippet": "    public void testFormatPrintZeroRarelyFirstMonths() {\n        PeriodFormatter f = new PeriodFormatterBuilder()\n            .printZeroRarelyFirst()\n            .appendMonths().toFormatter();\n        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n    }\n",
        "begin_line": 656,
        "end_line": 661,
        "comment": "",
        "child_ranges": [
            "(line 657,col 9)-(line 659,col 42)",
            "(line 660,col 9)-(line 660,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirstWeeks()",
        "snippet": "    public void testFormatPrintZeroRarelyFirstWeeks() {\n        PeriodFormatter f = new PeriodFormatterBuilder()\n            .printZeroRarelyFirst()\n            .appendWeeks().toFormatter();\n        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n    }\n",
        "begin_line": 663,
        "end_line": 668,
        "comment": "",
        "child_ranges": [
            "(line 664,col 9)-(line 666,col 41)",
            "(line 667,col 9)-(line 667,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirstDays()",
        "snippet": "    public void testFormatPrintZeroRarelyFirstDays() {\n        PeriodFormatter f = new PeriodFormatterBuilder()\n            .printZeroRarelyFirst()\n            .appendDays().toFormatter();\n        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n    }\n",
        "begin_line": 670,
        "end_line": 675,
        "comment": "",
        "child_ranges": [
            "(line 671,col 9)-(line 673,col 40)",
            "(line 674,col 9)-(line 674,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirstHours()",
        "snippet": "    public void testFormatPrintZeroRarelyFirstHours() {\n        PeriodFormatter f = new PeriodFormatterBuilder()\n            .printZeroRarelyFirst()\n            .appendHours().toFormatter();\n        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n    }\n",
        "begin_line": 677,
        "end_line": 682,
        "comment": "",
        "child_ranges": [
            "(line 678,col 9)-(line 680,col 41)",
            "(line 681,col 9)-(line 681,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirstMinutes()",
        "snippet": "    public void testFormatPrintZeroRarelyFirstMinutes() {\n        PeriodFormatter f = new PeriodFormatterBuilder()\n            .printZeroRarelyFirst()\n            .appendMinutes().toFormatter();\n        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n    }\n",
        "begin_line": 684,
        "end_line": 689,
        "comment": "",
        "child_ranges": [
            "(line 685,col 9)-(line 687,col 43)",
            "(line 688,col 9)-(line 688,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroRarelyFirstSeconds()",
        "snippet": "    public void testFormatPrintZeroRarelyFirstSeconds() {\n        PeriodFormatter f = new PeriodFormatterBuilder()\n            .printZeroRarelyFirst()\n            .appendSeconds().toFormatter();\n        assertEquals(\"0\", f.print(EMPTY_PERIOD));\n    }\n",
        "begin_line": 691,
        "end_line": 696,
        "comment": "",
        "child_ranges": [
            "(line 692,col 9)-(line 694,col 43)",
            "(line 695,col 9)-(line 695,col 49)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroIfSupported()",
        "snippet": "    public void testFormatPrintZeroIfSupported() {\n        PeriodFormatter f =\n            new PeriodFormatterBuilder()\n                .printZeroIfSupported()\n                .appendYears().appendLiteral(\"-\")\n                .appendMonths().appendLiteral(\"-\")\n                .appendWeeks().appendLiteral(\"-\")\n                .appendDays().toFormatter();\n        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"0---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 698,
        "end_line": 721,
        "comment": "",
        "child_ranges": [
            "(line 699,col 9)-(line 705,col 44)",
            "(line 706,col 9)-(line 706,col 49)",
            "(line 707,col 9)-(line 707,col 77)",
            "(line 708,col 9)-(line 708,col 92)",
            "(line 710,col 9)-(line 710,col 62)",
            "(line 711,col 9)-(line 711,col 92)",
            "(line 712,col 9)-(line 712,col 107)",
            "(line 714,col 9)-(line 714,col 56)",
            "(line 715,col 9)-(line 715,col 86)",
            "(line 716,col 9)-(line 716,col 101)",
            "(line 718,col 9)-(line 718,col 55)",
            "(line 719,col 9)-(line 719,col 83)",
            "(line 720,col 9)-(line 720,col 98)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroAlways()",
        "snippet": "    public void testFormatPrintZeroAlways() {\n        PeriodFormatter f =\n            new PeriodFormatterBuilder()\n                .printZeroAlways()\n                .appendYears().appendLiteral(\"-\")\n                .appendMonths().appendLiteral(\"-\")\n                .appendWeeks().appendLiteral(\"-\")\n                .appendDays().toFormatter();\n        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"0-0-0-0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1-0-0-4\", f.print(YEAR_DAY_PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 723,
        "end_line": 746,
        "comment": "",
        "child_ranges": [
            "(line 724,col 9)-(line 730,col 44)",
            "(line 731,col 9)-(line 731,col 49)",
            "(line 732,col 9)-(line 732,col 77)",
            "(line 733,col 9)-(line 733,col 92)",
            "(line 735,col 9)-(line 735,col 64)",
            "(line 736,col 9)-(line 736,col 92)",
            "(line 737,col 9)-(line 737,col 107)",
            "(line 739,col 9)-(line 739,col 58)",
            "(line 740,col 9)-(line 740,col 86)",
            "(line 741,col 9)-(line 741,col 101)",
            "(line 743,col 9)-(line 743,col 55)",
            "(line 744,col 9)-(line 744,col 83)",
            "(line 745,col 9)-(line 745,col 98)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatPrintZeroNever()",
        "snippet": "    public void testFormatPrintZeroNever() {\n        PeriodFormatter f =\n            new PeriodFormatterBuilder()\n                .printZeroNever()\n                .appendYears().appendLiteral(\"-\")\n                .appendMonths().appendLiteral(\"-\")\n                .appendWeeks().appendLiteral(\"-\")\n                .appendDays().toFormatter();\n        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n        \n        assertEquals(\"---\", f.print(EMPTY_PERIOD));\n        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n    }\n",
        "begin_line": 748,
        "end_line": 771,
        "comment": "",
        "child_ranges": [
            "(line 749,col 9)-(line 755,col 44)",
            "(line 756,col 9)-(line 756,col 49)",
            "(line 757,col 9)-(line 757,col 77)",
            "(line 758,col 9)-(line 758,col 92)",
            "(line 760,col 9)-(line 760,col 60)",
            "(line 761,col 9)-(line 761,col 92)",
            "(line 762,col 9)-(line 762,col 107)",
            "(line 764,col 9)-(line 764,col 56)",
            "(line 765,col 9)-(line 765,col 86)",
            "(line 766,col 9)-(line 766,col 101)",
            "(line 768,col 9)-(line 768,col 51)",
            "(line 769,col 9)-(line 769,col 83)",
            "(line 770,col 9)-(line 770,col 98)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatAppend_PrinterParser_null_null()",
        "snippet": "    public void testFormatAppend_PrinterParser_null_null() {\n        try {\n            new PeriodFormatterBuilder().append(null, null);\n            fail();\n        } catch (IllegalArgumentException ex) {}\n    }\n",
        "begin_line": 774,
        "end_line": 779,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 775,col 9)-(line 778,col 48)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatAppend_PrinterParser_Printer_null()",
        "snippet": "    public void testFormatAppend_PrinterParser_Printer_null() {\n        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).appendMonths();\n        assertNotNull(bld.toPrinter());\n        assertNull(bld.toParser());\n        \n        PeriodFormatter f = bld.toFormatter();\n        assertEquals(\"1-2\", f.print(PERIOD));\n        try {\n            f.parsePeriod(\"1-2\");\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n    }\n",
        "begin_line": 781,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 782,col 9)-(line 782,col 106)",
            "(line 783,col 9)-(line 783,col 103)",
            "(line 784,col 9)-(line 784,col 39)",
            "(line 785,col 9)-(line 785,col 35)",
            "(line 787,col 9)-(line 787,col 46)",
            "(line 788,col 9)-(line 788,col 45)",
            "(line 789,col 9)-(line 792,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatAppend_PrinterParser_null_Parser()",
        "snippet": "    public void testFormatAppend_PrinterParser_null_Parser() {\n        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(null, parser).appendMonths();\n        assertNull(bld.toPrinter());\n        assertNotNull(bld.toParser());\n        \n        PeriodFormatter f = bld.toFormatter();\n        try {\n            f.print(PERIOD);\n            fail();\n        } catch (UnsupportedOperationException ex) {}\n        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod(\"1-2\"));\n    }\n",
        "begin_line": 795,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 796,col 9)-(line 796,col 103)",
            "(line 797,col 9)-(line 797,col 102)",
            "(line 798,col 9)-(line 798,col 36)",
            "(line 799,col 9)-(line 799,col 38)",
            "(line 801,col 9)-(line 801,col 46)",
            "(line 802,col 9)-(line 805,col 53)",
            "(line 806,col 9)-(line 806,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatAppend_PrinterParser_PrinterParser()",
        "snippet": "    public void testFormatAppend_PrinterParser_PrinterParser() {\n        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, parser).appendMonths();\n        assertNotNull(bld.toPrinter());\n        assertNotNull(bld.toParser());\n        \n        PeriodFormatter f = bld.toFormatter();\n        assertEquals(\"1-2\", f.print(PERIOD));\n        assertEquals(new Period(0, 2, 1, 0, 0, 0, 0, 0), f.parsePeriod(\"1-2\"));\n    }\n",
        "begin_line": 809,
        "end_line": 819,
        "comment": "",
        "child_ranges": [
            "(line 810,col 9)-(line 810,col 106)",
            "(line 811,col 9)-(line 811,col 103)",
            "(line 812,col 9)-(line 812,col 105)",
            "(line 813,col 9)-(line 813,col 39)",
            "(line 814,col 9)-(line 814,col 38)",
            "(line 816,col 9)-(line 816,col 46)",
            "(line 817,col 9)-(line 817,col 45)",
            "(line 818,col 9)-(line 818,col 79)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatAppend_PrinterParser_Printer_null_null_Parser()",
        "snippet": "    public void testFormatAppend_PrinterParser_Printer_null_null_Parser() {\n        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);\n        assertNull(bld.toPrinter());\n        assertNull(bld.toParser());\n        \n        try {\n            bld.toFormatter();\n            fail();\n        } catch (IllegalStateException ex) {}\n    }\n",
        "begin_line": 821,
        "end_line": 832,
        "comment": "",
        "child_ranges": [
            "(line 822,col 9)-(line 822,col 106)",
            "(line 823,col 9)-(line 823,col 103)",
            "(line 824,col 9)-(line 824,col 109)",
            "(line 825,col 9)-(line 825,col 36)",
            "(line 826,col 9)-(line 826,col 35)",
            "(line 828,col 9)-(line 831,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testFormatAppend_PrinterParserThenClear()",
        "snippet": "    public void testFormatAppend_PrinterParserThenClear() {\n        PeriodPrinter printer = new PeriodFormatterBuilder().appendYears().appendLiteral(\"-\").toPrinter();\n        PeriodParser parser = new PeriodFormatterBuilder().appendWeeks().appendLiteral(\"-\").toParser();\n        PeriodFormatterBuilder bld = new PeriodFormatterBuilder().append(printer, null).append(null, parser);\n        assertNull(bld.toPrinter());\n        assertNull(bld.toParser());\n        bld.clear();\n        bld.appendMonths();\n        assertNotNull(bld.toPrinter());\n        assertNotNull(bld.toParser());\n    }\n",
        "begin_line": 834,
        "end_line": 844,
        "comment": "",
        "child_ranges": [
            "(line 835,col 9)-(line 835,col 106)",
            "(line 836,col 9)-(line 836,col 103)",
            "(line 837,col 9)-(line 837,col 109)",
            "(line 838,col 9)-(line 838,col 36)",
            "(line 839,col 9)-(line 839,col 35)",
            "(line 840,col 9)-(line 840,col 20)",
            "(line 841,col 9)-(line 841,col 27)",
            "(line 842,col 9)-(line 842,col 39)",
            "(line 843,col 9)-(line 843,col 38)"
        ]
    },
    {
        "class_name": "org.joda.time.format.TestPeriodFormatterBuilder",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/format/TestPeriodFormatterBuilder.java",
        "signature": "org.joda.time.format.TestPeriodFormatterBuilder.testBug2495455()",
        "snippet": "    public void testBug2495455() {\n        PeriodFormatter pfmt1 = new PeriodFormatterBuilder()\n            .appendLiteral(\"P\")\n            .appendYears()\n            .appendSuffix(\"Y\")\n            .appendMonths()\n            .appendSuffix(\"M\")\n            .appendWeeks()\n            .appendSuffix(\"W\")\n            .appendDays()\n            .appendSuffix(\"D\")\n            .appendSeparatorIfFieldsAfter(\"T\")\n            .appendHours()\n            .appendSuffix(\"H\")\n            .appendMinutes()\n            .appendSuffix(\"M\")\n            .appendSecondsWithOptionalMillis()\n            .appendSuffix(\"S\")\n            .toFormatter();\n        PeriodFormatter pfmt2 = new PeriodFormatterBuilder()\n            .append(ISOPeriodFormat.standard())\n            .toFormatter();\n        pfmt1.parsePeriod(\"PT1003199059S\");\n        pfmt2.parsePeriod(\"PT1003199059S\");\n    }\n",
        "begin_line": 846,
        "end_line": 870,
        "comment": "",
        "child_ranges": [
            "(line 847,col 9)-(line 864,col 27)",
            "(line 865,col 9)-(line 867,col 27)",
            "(line 868,col 9)-(line 868,col 43)",
            "(line 869,col 9)-(line 869,col 43)"
        ]
    }
]