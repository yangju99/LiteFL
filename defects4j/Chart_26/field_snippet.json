[
    {
        "class_name": "org.jfree.chart.ui.OptionalLibraryHolder",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.OptionalLibraryHolder.libraryClass",
        "snippet": "        private String libraryClass;",
        "begin_line": 61,
        "end_line": 61,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.ui.OptionalLibraryHolder",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.OptionalLibraryHolder.library",
        "snippet": "        private transient Library library;",
        "begin_line": 62,
        "end_line": 62,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.copyright",
        "snippet": "    private String copyright;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " The project copyright statement. "
    },
    {
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.libraries",
        "snippet": "    private List libraries;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " A list of libraries used by the project. "
    },
    {
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.optionalLibraries",
        "snippet": "    private List optionalLibraries;",
        "begin_line": 142,
        "end_line": 142,
        "comment": ""
    },
    {
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "signature": "org.jfree.data.general.DatasetChangeEvent.dataset",
        "snippet": "    private Dataset dataset;",
        "begin_line": 60,
        "end_line": 60,
        "comment": "\r\n     * The dataset that generated the change event.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2604142742210173810L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.START",
        "snippet": "    public static final CategoryAnchor START \n        = new CategoryAnchor(\"CategoryAnchor.START\");",
        "begin_line": 58,
        "end_line": 59,
        "comment": " Start of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.MIDDLE",
        "snippet": "    public static final CategoryAnchor MIDDLE \n        = new CategoryAnchor(\"CategoryAnchor.MIDDLE\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " Middle of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.END",
        "snippet": "    public static final CategoryAnchor END \n        = new CategoryAnchor(\"CategoryAnchor.END\");",
        "begin_line": 66,
        "end_line": 67,
        "comment": " End of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "signature": "org.jfree.chart.axis.CategoryAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 632027470694481177L;",
        "begin_line": 121,
        "end_line": 121,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.artifactPaint",
        "snippet": "    private transient Paint artifactPaint;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " The color used to paint the median line and average marker. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.fillBox",
        "snippet": "    private boolean fillBox;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " A flag that controls whether or not the box is filled. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The margin between items (boxes) within a category. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "signature": "org.jfree.data.DefaultKeyedValue.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7388924517460437712L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "signature": "org.jfree.data.DefaultKeyedValue.key",
        "snippet": "    private Comparable key;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The key. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "signature": "org.jfree.data.DefaultKeyedValue.value",
        "snippet": "    private Number value;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6000649414965887481L;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.DEFAULT_ITEM_MARGIN",
        "snippet": "    public static final double DEFAULT_ITEM_MARGIN = 0.20;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The default item margin percentage. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.BAR_OUTLINE_WIDTH_THRESHOLD",
        "snippet": "    public static final double BAR_OUTLINE_WIDTH_THRESHOLD = 3.0;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " \r\n     * Constant that controls the minimum width before a bar has an outline \r\n     * drawn. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " The margin between items (bars) within a category. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.drawBarOutline",
        "snippet": "    private boolean drawBarOutline;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " A flag that controls whether or not bar outlines are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.maximumBarWidth",
        "snippet": "    private double maximumBarWidth;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " The maximum bar width as a percentage of the available space. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.minimumBarLength",
        "snippet": "    private double minimumBarLength;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The minimum bar length (in Java2D units). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.gradientPaintTransformer",
        "snippet": "    private GradientPaintTransformer gradientPaintTransformer;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " \r\n     * An optional class used to transform gradient paint objects to fit each \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.positiveItemLabelPositionFallback",
        "snippet": "    private ItemLabelPosition positiveItemLabelPositionFallback;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " \r\n     * The fallback position if a positive item label doesn't fit inside the \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.negativeItemLabelPositionFallback",
        "snippet": "    private ItemLabelPosition negativeItemLabelPositionFallback;",
        "begin_line": 171,
        "end_line": 171,
        "comment": " \r\n     * The fallback position if a negative item label doesn't fit inside the \r\n     * bar. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.upperClip",
        "snippet": "    private double upperClip;  ",
        "begin_line": 174,
        "end_line": 174,
        "comment": " The upper clip (axis) value for the axis. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.lowerClip",
        "snippet": "    private double lowerClip;  ",
        "begin_line": 178,
        "end_line": 178,
        "comment": " The lower clip (axis) value for the axis. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.base",
        "snippet": "    private double base;",
        "begin_line": 182,
        "end_line": 182,
        "comment": " The base value for the bars (defaults to 0.0). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.includeBaseInRange",
        "snippet": "    private boolean includeBaseInRange;",
        "begin_line": 188,
        "end_line": 188,
        "comment": " \r\n     * A flag that controls whether the base value is included in the range\r\n     * returned by the findRangeBounds() method.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8831571430103671324L;",
        "begin_line": 191,
        "end_line": 191,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.ZERO",
        "snippet": "    public static final Number ZERO = new Integer(0);",
        "begin_line": 194,
        "end_line": 194,
        "comment": " Useful constant representing zero. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_INSETS",
        "snippet": "    public static final RectangleInsets DEFAULT_INSETS \n        = new RectangleInsets(4.0, 8.0, 4.0, 8.0);",
        "begin_line": 197,
        "end_line": 198,
        "comment": " The default insets. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_OUTLINE_STROKE = new BasicStroke(0.5f);",
        "begin_line": 201,
        "end_line": 201,
        "comment": " The default outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_OUTLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_OUTLINE_PAINT = Color.gray;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " The default outline color. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_FOREGROUND_ALPHA",
        "snippet": "    public static final float DEFAULT_FOREGROUND_ALPHA = 1.0f;",
        "begin_line": 207,
        "end_line": 207,
        "comment": " The default foreground alpha transparency. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_ALPHA",
        "snippet": "    public static final float DEFAULT_BACKGROUND_ALPHA = 1.0f;",
        "begin_line": 210,
        "end_line": 210,
        "comment": " The default background alpha transparency. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_BACKGROUND_PAINT",
        "snippet": "    public static final Paint DEFAULT_BACKGROUND_PAINT = Color.white;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " The default background color. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.MINIMUM_WIDTH_TO_DRAW",
        "snippet": "    public static final int MINIMUM_WIDTH_TO_DRAW = 10;",
        "begin_line": 216,
        "end_line": 216,
        "comment": " The minimum width at which the plot should be drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.MINIMUM_HEIGHT_TO_DRAW",
        "snippet": "    public static final int MINIMUM_HEIGHT_TO_DRAW = 10;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " The minimum height at which the plot should be drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_BOX",
        "snippet": "    public static final Shape DEFAULT_LEGEND_ITEM_BOX \n        = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);",
        "begin_line": 222,
        "end_line": 223,
        "comment": " A default box shape for legend items. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.DEFAULT_LEGEND_ITEM_CIRCLE",
        "snippet": "    public static final Shape DEFAULT_LEGEND_ITEM_CIRCLE \n        = new Ellipse2D.Double(-4.0, -4.0, 8.0, 8.0);",
        "begin_line": 226,
        "end_line": 227,
        "comment": " A default circle shape for legend items. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.parent",
        "snippet": "    private Plot parent;",
        "begin_line": 230,
        "end_line": 230,
        "comment": " The parent plot (<code>null</code> if this is the root plot). "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.datasetGroup",
        "snippet": "    private DatasetGroup datasetGroup;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " The dataset group (to be used for thread synchronisation). "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.noDataMessage",
        "snippet": "    private String noDataMessage;",
        "begin_line": 236,
        "end_line": 236,
        "comment": " The message to display if no data is available. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.noDataMessageFont",
        "snippet": "    private Font noDataMessageFont;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " The font used to display the 'no data' message. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.noDataMessagePaint",
        "snippet": "    private transient Paint noDataMessagePaint;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " The paint used to draw the 'no data' message. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.insets",
        "snippet": "    private RectangleInsets insets;",
        "begin_line": 245,
        "end_line": 245,
        "comment": " Amount of blank space around the plot area. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.outlineVisible",
        "snippet": "    private boolean outlineVisible;",
        "begin_line": 252,
        "end_line": 252,
        "comment": " \r\n     * A flag that controls whether or not the plot outline is drawn. \r\n     *\r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 255,
        "end_line": 255,
        "comment": " The Stroke used to draw an outline around the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 258,
        "end_line": 258,
        "comment": " The Paint used to draw an outline around the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " An optional color used to fill the plot background. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundImage",
        "snippet": "    private transient Image backgroundImage;  // not currently serialized",
        "begin_line": 264,
        "end_line": 264,
        "comment": " not currently serialized"
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundImageAlignment",
        "snippet": "    private int backgroundImageAlignment = Align.FIT;",
        "begin_line": 267,
        "end_line": 267,
        "comment": " The alignment for the background image. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundImageAlpha",
        "snippet": "    private float backgroundImageAlpha = 0.5f;",
        "begin_line": 270,
        "end_line": 270,
        "comment": " The alpha value used to draw the background image. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.foregroundAlpha",
        "snippet": "    private float foregroundAlpha;",
        "begin_line": 273,
        "end_line": 273,
        "comment": " The alpha-transparency for the plot. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.backgroundAlpha",
        "snippet": "    private float backgroundAlpha;",
        "begin_line": 276,
        "end_line": 276,
        "comment": " The alpha transparency for the background paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.drawingSupplier",
        "snippet": "    private DrawingSupplier drawingSupplier;",
        "begin_line": 279,
        "end_line": 279,
        "comment": " The drawing supplier. "
    },
    {
        "class_name": "org.jfree.chart.plot.Plot",
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "signature": "org.jfree.chart.plot.Plot.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 282,
        "end_line": 282,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7339847061039422538L;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_PAINT_SEQUENCE",
        "snippet": "    public static final Paint[] DEFAULT_PAINT_SEQUENCE \n            = ChartColor.createDefaultPaintArray();",
        "begin_line": 85,
        "end_line": 86,
        "comment": " The default fill paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_PAINT_SEQUENCE",
        "snippet": "    public static final Paint[] DEFAULT_OUTLINE_PAINT_SEQUENCE = new Paint[] {\n            Color.lightGray};",
        "begin_line": 89,
        "end_line": 90,
        "comment": " The default outline paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_FILL_PAINT_SEQUENCE",
        "snippet": "    public static final Paint[] DEFAULT_FILL_PAINT_SEQUENCE = new Paint[] {\n            Color.white};",
        "begin_line": 93,
        "end_line": 94,
        "comment": " The default fill paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE",
        "snippet": "    public static final Stroke[] DEFAULT_STROKE_SEQUENCE = new Stroke[] {\n            new BasicStroke(1.0f, BasicStroke.CAP_SQUARE, \n                    BasicStroke.JOIN_BEVEL)};",
        "begin_line": 97,
        "end_line": 99,
        "comment": " The default stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE",
        "snippet": "    public static final Stroke[] DEFAULT_OUTLINE_STROKE_SEQUENCE \n            = new Stroke[] {new BasicStroke(1.0f, BasicStroke.CAP_SQUARE, \n                    BasicStroke.JOIN_BEVEL)};",
        "begin_line": 102,
        "end_line": 104,
        "comment": " The default outline stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE",
        "snippet": "    public static final Shape[] DEFAULT_SHAPE_SEQUENCE \n            = createStandardSeriesShapes();",
        "begin_line": 107,
        "end_line": 108,
        "comment": " The default shape sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.paintSequence",
        "snippet": "    private transient Paint[] paintSequence;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.paintIndex",
        "snippet": "    private int paintIndex;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The current paint index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlinePaintSequence",
        "snippet": "    private transient Paint[] outlinePaintSequence;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " The outline paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlinePaintIndex",
        "snippet": "    private int outlinePaintIndex;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " The current outline paint index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.fillPaintSequence",
        "snippet": "    private transient Paint[] fillPaintSequence;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " The fill paint sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.fillPaintIndex",
        "snippet": "    private int fillPaintIndex;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " The current fill paint index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.strokeSequence",
        "snippet": "    private transient Stroke[] strokeSequence;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.strokeIndex",
        "snippet": "    private int strokeIndex;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The current stroke index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlineStrokeSequence",
        "snippet": "    private transient Stroke[] outlineStrokeSequence;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The outline stroke sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.outlineStrokeIndex",
        "snippet": "    private int outlineStrokeIndex;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The current outline stroke index. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.shapeSequence",
        "snippet": "    private transient Shape[] shapeSequence;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The shape sequence. "
    },
    {
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.shapeIndex",
        "snippet": "    private int shapeIndex;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " The current shape index. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8219158940496719660L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.TOP_LEFT",
        "snippet": "    public static final TextAnchor TOP_LEFT = new TextAnchor(\n            \"TextAnchor.TOP_LEFT\");",
        "begin_line": 60,
        "end_line": 61,
        "comment": " Top/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.TOP_CENTER",
        "snippet": "    public static final TextAnchor TOP_CENTER = new TextAnchor(\n            \"TextAnchor.TOP_CENTER\");",
        "begin_line": 64,
        "end_line": 65,
        "comment": " Top/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.TOP_RIGHT",
        "snippet": "    public static final TextAnchor TOP_RIGHT = new TextAnchor(\n            \"TextAnchor.TOP_RIGHT\");",
        "begin_line": 68,
        "end_line": 69,
        "comment": " Top/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_LEFT",
        "snippet": "    public static final TextAnchor HALF_ASCENT_LEFT = new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_LEFT\");",
        "begin_line": 72,
        "end_line": 73,
        "comment": " Half-ascent/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_CENTER",
        "snippet": "    public static final TextAnchor HALF_ASCENT_CENTER = new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_CENTER\");",
        "begin_line": 76,
        "end_line": 77,
        "comment": " Half-ascent/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.HALF_ASCENT_RIGHT",
        "snippet": "    public static final TextAnchor HALF_ASCENT_RIGHT = new TextAnchor(\n            \"TextAnchor.HALF_ASCENT_RIGHT\");",
        "begin_line": 80,
        "end_line": 81,
        "comment": " Half-ascent/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.CENTER_LEFT",
        "snippet": "    public static final TextAnchor CENTER_LEFT = new TextAnchor(\n            \"TextAnchor.CENTER_LEFT\");",
        "begin_line": 84,
        "end_line": 85,
        "comment": " Middle/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.CENTER",
        "snippet": "    public static final TextAnchor CENTER = new TextAnchor(\"TextAnchor.CENTER\");",
        "begin_line": 88,
        "end_line": 88,
        "comment": " Middle/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.CENTER_RIGHT",
        "snippet": "    public static final TextAnchor CENTER_RIGHT = new TextAnchor(\n            \"TextAnchor.CENTER_RIGHT\");",
        "begin_line": 91,
        "end_line": 92,
        "comment": " Middle/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BASELINE_LEFT",
        "snippet": "    public static final TextAnchor BASELINE_LEFT = new TextAnchor(\n            \"TextAnchor.BASELINE_LEFT\");",
        "begin_line": 95,
        "end_line": 96,
        "comment": " Baseline/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BASELINE_CENTER",
        "snippet": "    public static final TextAnchor BASELINE_CENTER = new TextAnchor(\n            \"TextAnchor.BASELINE_CENTER\");",
        "begin_line": 99,
        "end_line": 100,
        "comment": " Baseline/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BASELINE_RIGHT",
        "snippet": "    public static final TextAnchor BASELINE_RIGHT = new TextAnchor(\n            \"TextAnchor.BASELINE_RIGHT\");",
        "begin_line": 103,
        "end_line": 104,
        "comment": " Baseline/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_LEFT",
        "snippet": "    public static final TextAnchor BOTTOM_LEFT = new TextAnchor(\n            \"TextAnchor.BOTTOM_LEFT\");",
        "begin_line": 107,
        "end_line": 108,
        "comment": " Bottom/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_CENTER",
        "snippet": "    public static final TextAnchor BOTTOM_CENTER = new TextAnchor(\n            \"TextAnchor.BOTTOM_CENTER\");",
        "begin_line": 111,
        "end_line": 112,
        "comment": " Bottom/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.BOTTOM_RIGHT",
        "snippet": "    public static final TextAnchor BOTTOM_RIGHT = new TextAnchor(\n            \"TextAnchor.BOTTOM_RIGHT\");",
        "begin_line": 115,
        "end_line": 116,
        "comment": " Bottom/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextAnchor",
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "signature": "org.jfree.chart.text.TextAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2805933088476185789L;",
        "begin_line": 140,
        "end_line": 140,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_AUTO_RANGE_INCLUDES_ZERO",
        "snippet": "    public static final boolean DEFAULT_AUTO_RANGE_INCLUDES_ZERO = true;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " The default value for the autoRangeIncludesZero flag. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_AUTO_RANGE_STICKY_ZERO",
        "snippet": "    public static final boolean DEFAULT_AUTO_RANGE_STICKY_ZERO = true;",
        "begin_line": 146,
        "end_line": 146,
        "comment": " The default value for the autoRangeStickyZero flag. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_TICK_UNIT",
        "snippet": "    public static final NumberTickUnit DEFAULT_TICK_UNIT = new NumberTickUnit(\n            1.0, new DecimalFormat(\"0\"));",
        "begin_line": 149,
        "end_line": 150,
        "comment": " The default tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.DEFAULT_VERTICAL_TICK_LABELS",
        "snippet": "    public static final boolean DEFAULT_VERTICAL_TICK_LABELS = false;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The default setting for the vertical tick labels flag. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.rangeType",
        "snippet": "    private RangeType rangeType;",
        "begin_line": 159,
        "end_line": 159,
        "comment": " \r\n     * The range type (can be used to force the axis to display only positive\r\n     * values or only negative values).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.autoRangeIncludesZero",
        "snippet": "    private boolean autoRangeIncludesZero;",
        "begin_line": 166,
        "end_line": 166,
        "comment": "\r\n     * A flag that affects the axis range when the range is determined\r\n     * automatically.  If the auto range does NOT include zero and this flag\r\n     * is TRUE, then the range is changed to include zero.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.autoRangeStickyZero",
        "snippet": "    private boolean autoRangeStickyZero;",
        "begin_line": 173,
        "end_line": 173,
        "comment": "\r\n     * A flag that affects the size of the margins added to the axis range when\r\n     * the range is determined automatically.  If the value 0 falls within the\r\n     * margin and this flag is TRUE, then the margin is truncated at zero.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.tickUnit",
        "snippet": "    private NumberTickUnit tickUnit;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " The tick unit for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.numberFormatOverride",
        "snippet": "    private NumberFormat numberFormatOverride;",
        "begin_line": 179,
        "end_line": 179,
        "comment": " The override number format. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "signature": "org.jfree.chart.axis.NumberAxis.markerBand",
        "snippet": "    private MarkerAxisBand markerBand;",
        "begin_line": 182,
        "end_line": 182,
        "comment": " An optional band for marking regions on the axis. "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.THREAD_CONTEXT",
        "snippet": "    public static final String THREAD_CONTEXT = \"ThreadContext\";",
        "begin_line": 73,
        "end_line": 73,
        "comment": "\n     * A constant for using the TheadContext as source for the classloader.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.CLASS_CONTEXT",
        "snippet": "    public static final String CLASS_CONTEXT = \"ClassContext\";",
        "begin_line": 77,
        "end_line": 77,
        "comment": "\n     * A constant for using the ClassContext as source for the classloader.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.classLoaderSource",
        "snippet": "    private static String classLoaderSource = THREAD_CONTEXT;",
        "begin_line": 82,
        "end_line": 82,
        "comment": "\n     * By default use the thread context.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "signature": "org.jfree.chart.util.ObjectUtilities.classLoader",
        "snippet": "    private static ClassLoader classLoader;",
        "begin_line": 86,
        "end_line": 86,
        "comment": "\n     * The custom classloader to be used (if not null).\n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -293716040467423637L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS",
        "snippet": "    public static final DateFormatSymbols\n        DATE_FORMAT_SYMBOLS = new SimpleDateFormat().getDateFormatSymbols();",
        "begin_line": 93,
        "end_line": 94,
        "comment": " Date format symbols. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND",
        "snippet": "    public static final int SERIAL_LOWER_BOUND = 2;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The serial number for 1 January 1900. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",
        "snippet": "    public static final int SERIAL_UPPER_BOUND = 2958465;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The serial number for 31 December 9999. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED",
        "snippet": "    public static final int MINIMUM_YEAR_SUPPORTED = 1900;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The lowest year value supported by this date format. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED",
        "snippet": "    public static final int MAXIMUM_YEAR_SUPPORTED = 9999;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The highest year value supported by this date format. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.MONDAY",
        "snippet": "    public static final int MONDAY = Calendar.MONDAY;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " Useful constant for Monday. Equivalent to java.util.Calendar.MONDAY. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.TUESDAY",
        "snippet": "    public static final int TUESDAY = Calendar.TUESDAY;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " \n     * Useful constant for Tuesday. Equivalent to java.util.Calendar.TUESDAY. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.WEDNESDAY",
        "snippet": "    public static final int WEDNESDAY = Calendar.WEDNESDAY;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " \n     * Useful constant for Wednesday. Equivalent to \n     * java.util.Calendar.WEDNESDAY. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.THURSDAY",
        "snippet": "    public static final int THURSDAY = Calendar.THURSDAY;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " \n     * Useful constant for Thrusday. Equivalent to java.util.Calendar.THURSDAY. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FRIDAY",
        "snippet": "    public static final int FRIDAY = Calendar.FRIDAY;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " Useful constant for Friday. Equivalent to java.util.Calendar.FRIDAY. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SATURDAY",
        "snippet": "    public static final int SATURDAY = Calendar.SATURDAY;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " \n     * Useful constant for Saturday. Equivalent to java.util.Calendar.SATURDAY.\n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SUNDAY",
        "snippet": "    public static final int SUNDAY = Calendar.SUNDAY;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " Useful constant for Sunday. Equivalent to java.util.Calendar.SUNDAY. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH",
        "snippet": "    static final int[] LAST_DAY_OF_MONTH =\n        {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};",
        "begin_line": 139,
        "end_line": 140,
        "comment": " The number of days in each month in non leap years. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH",
        "snippet": "    static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH =\n        {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};",
        "begin_line": 143,
        "end_line": 144,
        "comment": " The number of days in a (non-leap) year up to the end of each month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",
        "snippet": "    static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n        {0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365};",
        "begin_line": 147,
        "end_line": 148,
        "comment": " The number of days in a year up to the end of the preceding month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH",
        "snippet": "    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH =\n        {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};",
        "begin_line": 151,
        "end_line": 152,
        "comment": " The number of days in a leap year up to the end of each month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",
        "snippet": "    static final int[] \n        LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH =\n            {0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366};",
        "begin_line": 157,
        "end_line": 159,
        "comment": " \n     * The number of days in a leap year up to the end of the preceding month. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH",
        "snippet": "    public static final int FIRST_WEEK_IN_MONTH = 1;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " A useful constant for referring to the first week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH",
        "snippet": "    public static final int SECOND_WEEK_IN_MONTH = 2;",
        "begin_line": 165,
        "end_line": 165,
        "comment": " A useful constant for referring to the second week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH",
        "snippet": "    public static final int THIRD_WEEK_IN_MONTH = 3;",
        "begin_line": 168,
        "end_line": 168,
        "comment": " A useful constant for referring to the third week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH",
        "snippet": "    public static final int FOURTH_WEEK_IN_MONTH = 4;",
        "begin_line": 171,
        "end_line": 171,
        "comment": " A useful constant for referring to the fourth week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH",
        "snippet": "    public static final int LAST_WEEK_IN_MONTH = 0;",
        "begin_line": 174,
        "end_line": 174,
        "comment": " A useful constant for referring to the last week in a month. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_NONE",
        "snippet": "    public static final int INCLUDE_NONE = 0;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_FIRST",
        "snippet": "    public static final int INCLUDE_FIRST = 1;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_SECOND",
        "snippet": "    public static final int INCLUDE_SECOND = 2;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.INCLUDE_BOTH",
        "snippet": "    public static final int INCLUDE_BOTH = 3;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " Useful range constant. "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.PRECEDING",
        "snippet": "    public static final int PRECEDING = -1;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " \n     * Useful constant for specifying a day of the week relative to a fixed \n     * date. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.NEAREST",
        "snippet": "    public static final int NEAREST = 0;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " \n     * Useful constant for specifying a day of the week relative to a fixed \n     * date. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.FOLLOWING",
        "snippet": "    public static final int FOLLOWING = 1;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " \n     * Useful constant for specifying a day of the week relative to a fixed \n     * date. \n     "
    },
    {
        "class_name": "org.jfree.data.time.SerialDate",
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "signature": "org.jfree.data.time.SerialDate.description",
        "snippet": "    private String description;",
        "begin_line": 207,
        "end_line": 207,
        "comment": " A description for the date. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "signature": "org.jfree.chart.axis.CategoryTick.category",
        "snippet": "    private Comparable category;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The category. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "signature": "org.jfree.chart.axis.CategoryTick.label",
        "snippet": "    private TextBlock label;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "signature": "org.jfree.chart.axis.CategoryTick.labelAnchor",
        "snippet": "    private TextBlockAnchor labelAnchor;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The label anchor. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4465945952903143262L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.DEFAULT_FONT",
        "snippet": "    public static final Font DEFAULT_FONT = new Font(\"Serif\", Font.PLAIN, 12);",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The default font. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.black;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The default text color. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.text",
        "snippet": "    private String text;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The text. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.font",
        "snippet": "    private Font font;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The text color. "
    },
    {
        "class_name": "org.jfree.chart.text.TextFragment",
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "signature": "org.jfree.chart.text.TextFragment.baselineOffset",
        "snippet": "    private float baselineOffset;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " \n     * The baseline offset (can be used to simulate subscripts and \n     * superscripts). \n     "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.data",
        "snippet": "    protected KeyedObjects2D data;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.minimumRangeValue",
        "snippet": "    private Number minimumRangeValue;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The minimum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.maximumRangeValue",
        "snippet": "    private Number maximumRangeValue;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The maximum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.rangeBounds",
        "snippet": "    private Range rangeBounds;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The range of values. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8446720134379617220L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.owner",
        "snippet": "    private ChartRenderingInfo owner;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The owner of this info. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.plotArea",
        "snippet": "    private transient Rectangle2D plotArea;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The plot area. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.dataArea",
        "snippet": "    private transient Rectangle2D dataArea;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The data area. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.subplotInfo",
        "snippet": "    private List subplotInfo;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\r\n     * Storage for the plot rendering info objects belonging to the subplots. \r\n     "
    },
    {
        "class_name": "org.jfree.data.general.DatasetGroup",
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "signature": "org.jfree.data.general.DatasetGroup.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3640642179674185688L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.DatasetGroup",
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "signature": "org.jfree.data.general.DatasetGroup.id",
        "snippet": "    private String id;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The group id. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer.serialVersionUID",
        "snippet": "    static final long serialVersionUID = 6402943811500067531L;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer.renderAsPercentages",
        "snippet": "    private boolean renderAsPercentages;",
        "begin_line": 133,
        "end_line": 133,
        "comment": " A flag that controls whether the bars display values or percentages. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlock",
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "signature": "org.jfree.chart.text.TextBlock.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4333175719424385526L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlock",
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "signature": "org.jfree.chart.text.TextBlock.lines",
        "snippet": "    private List lines;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Storage for the lines of text. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlock",
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "signature": "org.jfree.chart.text.TextBlock.lineAlignment",
        "snippet": "    private HorizontalAlignment lineAlignment;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The alignment of the lines. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6668230383875149773L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.text",
        "snippet": "    private String text;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " A text version of the tick value. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.textAnchor",
        "snippet": "    private TextAnchor textAnchor;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The text anchor for the tick label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The rotation anchor for the tick label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Tick",
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "signature": "org.jfree.chart.axis.Tick.angle",
        "snippet": "    private double angle;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "signature": "org.jfree.chart.ui.ProjectInfo.logo",
        "snippet": "    private Image logo;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " An optional project logo. "
    },
    {
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "signature": "org.jfree.chart.ui.ProjectInfo.licenceText",
        "snippet": "    private String licenceText;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " The licence text. "
    },
    {
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "signature": "org.jfree.chart.ui.ProjectInfo.contributors",
        "snippet": "    private List contributors;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " A list of contributors. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.IntervalBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/IntervalBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.IntervalBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5068857361615528725L;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.DateRange",
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "signature": "org.jfree.data.time.DateRange.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4705682568375418157L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.DateRange",
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "signature": "org.jfree.data.time.DateRange.lowerDate",
        "snippet": "    private Date lowerDate;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The lower bound for the range. "
    },
    {
        "class_name": "org.jfree.data.time.DateRange",
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "signature": "org.jfree.data.time.DateRange.upperDate",
        "snippet": "    private Date upperDate;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The upper bound for the range. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1015873563138522374L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.rowKeys",
        "snippet": "    private List rowKeys;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The row keys. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.columnKeys",
        "snippet": "    private List columnKeys;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The column keys. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects2D",
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "signature": "org.jfree.data.KeyedObjects2D.rows",
        "snippet": "    private List rows;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The row data. "
    },
    {
        "class_name": "org.jfree.chart.event.AxisChangeEvent",
        "src_path": "source/org/jfree/chart/event/AxisChangeEvent.java",
        "signature": "org.jfree.chart.event.AxisChangeEvent.axis",
        "snippet": "    private Axis axis;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The axis that generated the change event. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LayeredBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LayeredBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LayeredBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8716572894780469487L;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LayeredBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LayeredBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LayeredBarRenderer.seriesBarWidthList",
        "snippet": "    protected ObjectList seriesBarWidthList;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " A list of the width of each series bar. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2490732595134766305L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.top",
        "snippet": "    private double top;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The top space. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.bottom",
        "snippet": "    private double bottom;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The bottom space. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.left",
        "snippet": "    private double left;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The left space. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "signature": "org.jfree.chart.axis.AxisSpace.right",
        "snippet": "    private double right;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The right space. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3595635038460823663L;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedAreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.renderAsPercentages",
        "snippet": "    private boolean renderAsPercentages;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " A flag that controls whether the areas display values or percentages. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2935615937671064911L;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.plotLines",
        "snippet": "    private boolean plotLines = false;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " A flag indicating whether or not lines are drawn between XY points. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.groupPaint",
        "snippet": "    private transient Paint groupPaint = Color.black;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " \r\n     * The paint of the line between the minimum value and the maximum value.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.groupStroke",
        "snippet": "    private transient Stroke groupStroke = new BasicStroke(1.0f);",
        "begin_line": 117,
        "end_line": 117,
        "comment": " \r\n     * The stroke of the line between the minimum value and the maximum value.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.minIcon",
        "snippet": "    private transient Icon minIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0,\n            360, Arc2D.OPEN), null, Color.black);",
        "begin_line": 120,
        "end_line": 121,
        "comment": " The icon used to indicate the minimum value."
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.maxIcon",
        "snippet": "    private transient Icon maxIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0,\n            360, Arc2D.OPEN), null, Color.black);",
        "begin_line": 124,
        "end_line": 125,
        "comment": " The icon used to indicate the maximum value."
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.objectIcon",
        "snippet": "    private transient Icon objectIcon = getIcon(new Line2D.Double(-4, 0, 4, 0),\n            false, true);",
        "begin_line": 128,
        "end_line": 129,
        "comment": " The icon used to indicate the values."
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.lastCategory",
        "snippet": "    private int lastCategory = -1;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The last category. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.min",
        "snippet": "    private double min;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The minimum. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.max",
        "snippet": "    private double max;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The maximum. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5514169970951994748L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.rowKeys",
        "snippet": "    private List rowKeys;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The row keys. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.columnKeys",
        "snippet": "    private List columnKeys;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The column keys. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.rows",
        "snippet": "    private List rows;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The row data. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "signature": "org.jfree.data.DefaultKeyedValues2D.sortRowKeys",
        "snippet": "    private boolean sortRowKeys;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " If the row keys should be sorted by their comparable order. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberAxis3D",
        "src_path": "source/org/jfree/chart/axis/NumberAxis3D.java",
        "signature": "org.jfree.chart.axis.NumberAxis3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1790205852569123512L;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7719289504573298271L;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_AXIS_VISIBLE = true;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " The default axis visibility. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_AXIS_LABEL_FONT = new Font(\n            \"SansSerif\", Font.PLAIN, 12);",
        "begin_line": 137,
        "end_line": 138,
        "comment": " The default axis label font. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_AXIS_LABEL_PAINT = Color.black;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The default axis label paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LABEL_INSETS",
        "snippet": "    public static final RectangleInsets DEFAULT_AXIS_LABEL_INSETS \n            = new RectangleInsets(3.0, 3.0, 3.0, 3.0);",
        "begin_line": 144,
        "end_line": 145,
        "comment": " The default axis label insets. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_AXIS_LINE_PAINT = Color.gray;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The default axis line paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_AXIS_LINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_AXIS_LINE_STROKE = new BasicStroke(1.0f);",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The default axis line stroke. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABELS_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_TICK_LABELS_VISIBLE = true;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " The default tick labels visibility. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_TICK_LABEL_FONT = new Font(\"SansSerif\", \n            Font.PLAIN, 10);",
        "begin_line": 157,
        "end_line": 158,
        "comment": " The default tick label font. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_TICK_LABEL_PAINT = Color.black;",
        "begin_line": 161,
        "end_line": 161,
        "comment": " The default tick label paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_LABEL_INSETS",
        "snippet": "    public static final RectangleInsets DEFAULT_TICK_LABEL_INSETS \n            = new RectangleInsets(2.0, 4.0, 2.0, 4.0);",
        "begin_line": 164,
        "end_line": 165,
        "comment": " The default tick label insets. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARKS_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_TICK_MARKS_VISIBLE = true;",
        "begin_line": 168,
        "end_line": 168,
        "comment": " The default tick marks visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_STROKE",
        "snippet": "    public static final Stroke DEFAULT_TICK_MARK_STROKE = new BasicStroke(1);",
        "begin_line": 171,
        "end_line": 171,
        "comment": " The default tick stroke. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_PAINT",
        "snippet": "    public static final Paint DEFAULT_TICK_MARK_PAINT = Color.gray;",
        "begin_line": 174,
        "end_line": 174,
        "comment": " The default tick paint. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_INSIDE_LENGTH",
        "snippet": "    public static final float DEFAULT_TICK_MARK_INSIDE_LENGTH = 0.0f;",
        "begin_line": 177,
        "end_line": 177,
        "comment": " The default tick mark inside length. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.DEFAULT_TICK_MARK_OUTSIDE_LENGTH",
        "snippet": "    public static final float DEFAULT_TICK_MARK_OUTSIDE_LENGTH = 2.0f;",
        "begin_line": 180,
        "end_line": 180,
        "comment": " The default tick mark outside length. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.visible",
        "snippet": "    private boolean visible;",
        "begin_line": 183,
        "end_line": 183,
        "comment": " A flag indicating whether or not the axis is visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.label",
        "snippet": "    private String label;",
        "begin_line": 186,
        "end_line": 186,
        "comment": " The label for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 189,
        "end_line": 189,
        "comment": " The font for displaying the axis label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelPaint",
        "snippet": "    private transient Paint labelPaint;",
        "begin_line": 192,
        "end_line": 192,
        "comment": " The paint for drawing the axis label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelInsets",
        "snippet": "    private RectangleInsets labelInsets;",
        "begin_line": 195,
        "end_line": 195,
        "comment": " The insets for the axis label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelAngle",
        "snippet": "    private double labelAngle;",
        "begin_line": 198,
        "end_line": 198,
        "comment": " The label angle. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelToolTip",
        "snippet": "    private String labelToolTip;",
        "begin_line": 205,
        "end_line": 205,
        "comment": "\r\n     * The tool tip text for the label (<code>null</code> is permitted).\r\n     * \r\n     * @since 1.2.0\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.labelURL",
        "snippet": "    private String labelURL;",
        "begin_line": 212,
        "end_line": 212,
        "comment": "\r\n     * The URL for the label (<code>null</code> is permitted).\r\n     * \r\n     * @since 1.2.0.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.axisLineVisible",
        "snippet": "    private boolean axisLineVisible;",
        "begin_line": 215,
        "end_line": 215,
        "comment": " A flag that controls whether or not the axis line is visible. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.axisLineStroke",
        "snippet": "    private transient Stroke axisLineStroke;",
        "begin_line": 218,
        "end_line": 218,
        "comment": " The stroke used for the axis line. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.axisLinePaint",
        "snippet": "    private transient Paint axisLinePaint;",
        "begin_line": 221,
        "end_line": 221,
        "comment": " The paint used for the axis line. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelsVisible",
        "snippet": "    private boolean tickLabelsVisible;",
        "begin_line": 227,
        "end_line": 227,
        "comment": " \r\n     * A flag that indicates whether or not tick labels are visible for the \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelFont",
        "snippet": "    private Font tickLabelFont;",
        "begin_line": 230,
        "end_line": 230,
        "comment": " The font used to display the tick labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelPaint",
        "snippet": "    private transient Paint tickLabelPaint;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " The color used to display the tick labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickLabelInsets",
        "snippet": "    private RectangleInsets tickLabelInsets;",
        "begin_line": 236,
        "end_line": 236,
        "comment": " The blank space around each tick label. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarksVisible",
        "snippet": "    private boolean tickMarksVisible;",
        "begin_line": 242,
        "end_line": 242,
        "comment": " \r\n     * A flag that indicates whether or not tick marks are visible for the \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkInsideLength",
        "snippet": "    private float tickMarkInsideLength;",
        "begin_line": 245,
        "end_line": 245,
        "comment": " The length of the tick mark inside the data area (zero permitted). "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkOutsideLength",
        "snippet": "    private float tickMarkOutsideLength;",
        "begin_line": 248,
        "end_line": 248,
        "comment": " The length of the tick mark outside the data area (zero permitted). "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkStroke",
        "snippet": "    private transient Stroke tickMarkStroke;",
        "begin_line": 251,
        "end_line": 251,
        "comment": " The stroke used to draw tick marks. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.tickMarkPaint",
        "snippet": "    private transient Paint tickMarkPaint;",
        "begin_line": 254,
        "end_line": 254,
        "comment": " The paint used to draw tick marks. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.fixedDimension",
        "snippet": "    private double fixedDimension;",
        "begin_line": 257,
        "end_line": 257,
        "comment": " The fixed (horizontal or vertical) dimension for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.plot",
        "snippet": "    private transient Plot plot;",
        "begin_line": 263,
        "end_line": 263,
        "comment": " \r\n     * A reference back to the plot that the axis is assigned to (can be \r\n     * <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.Axis",
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "signature": "org.jfree.chart.axis.Axis.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 266,
        "end_line": 266,
        "comment": " Storage for registered listeners. "
    },
    {
        "class_name": "org.jfree.chart.util.BooleanList",
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "signature": "org.jfree.chart.util.BooleanList.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8543170333219422042L;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.Range",
        "src_path": "source/org/jfree/data/Range.java",
        "signature": "org.jfree.data.Range.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -906333695431863380L;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.Range",
        "src_path": "source/org/jfree/data/Range.java",
        "signature": "org.jfree.data.Range.lower",
        "snippet": "    private double lower;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The lower bound of the range. "
    },
    {
        "class_name": "org.jfree.data.Range",
        "src_path": "source/org/jfree/data/Range.java",
        "signature": "org.jfree.data.Range.upper",
        "snippet": "    private double upper;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The upper bound of the range. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis3D",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis3D.java",
        "signature": "org.jfree.chart.axis.CategoryAxis3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4114732251353700972L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6976024792582949656L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.CATEGORY",
        "snippet": "    public static final CategoryLabelWidthType \n        CATEGORY = new CategoryLabelWidthType(\n            \"CategoryLabelWidthType.CATEGORY\"\n        );",
        "begin_line": 57,
        "end_line": 60,
        "comment": " Percentage of category. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.RANGE",
        "snippet": "    public static final CategoryLabelWidthType \n        RANGE = new CategoryLabelWidthType(\"CategoryLabelWidthType.RANGE\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Percentage of range. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.name",
        "snippet": "    private String name;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.seriesKeys",
        "snippet": "    private Comparable[] seriesKeys;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The series keys. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.categoryKeys",
        "snippet": "    private Comparable[] categoryKeys;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The category keys. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.startData",
        "snippet": "    private Number[][] startData;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Storage for the start value data. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.endData",
        "snippet": "    private Number[][] endData;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Storage for the end value data. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7329649623148167423L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.mean",
        "snippet": "    private Number mean;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The mean. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.median",
        "snippet": "    private Number median;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The median. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.q1",
        "snippet": "    private Number q1;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The first quarter. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.q3",
        "snippet": "    private Number q3;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The third quarter. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.minRegularValue",
        "snippet": "    private Number minRegularValue;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The minimum regular value. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.maxRegularValue",
        "snippet": "    private Number maxRegularValue;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The maximum regular value. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.minOutlier",
        "snippet": "    private Number minOutlier;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The minimum outlier. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.maxOutlier",
        "snippet": "    private Number maxOutlier;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The maximum outlier. "
    },
    {
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.outliers",
        "snippet": "    private List outliers;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The outliers. "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2228169345475318082L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.defaultGroup",
        "snippet": "    private Comparable defaultGroup;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The default group. "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.groups",
        "snippet": "    private List groups;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The groups. "
    },
    {
        "class_name": "org.jfree.data.KeyToGroupMap",
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "signature": "org.jfree.data.KeyToGroupMap.keyToGroupMap",
        "snippet": "    private Map keyToGroupMap;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " A mapping between keys and groups. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -197749519869226398L;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.seriesLinesVisible",
        "snippet": "    private BooleanList seriesLinesVisible;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " \r\n     * A table of flags that control (per series) whether or not lines are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.baseLinesVisible",
        "snippet": "    private boolean baseLinesVisible;",
        "begin_line": 137,
        "end_line": 137,
        "comment": " \r\n     * A flag indicating whether or not lines are drawn between non-null \r\n     * points. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.seriesShapesVisible",
        "snippet": "    private BooleanList seriesShapesVisible;",
        "begin_line": 143,
        "end_line": 143,
        "comment": " \r\n     * A table of flags that control (per series) whether or not shapes are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.baseShapesVisible",
        "snippet": "    private boolean baseShapesVisible;",
        "begin_line": 146,
        "end_line": 146,
        "comment": " The default value returned by the getShapeVisible() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.seriesShapesFilled",
        "snippet": "    private BooleanList seriesShapesFilled;",
        "begin_line": 152,
        "end_line": 152,
        "comment": " \r\n     * A table of flags that control (per series) whether or not shapes are \r\n     * filled. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.baseShapesFilled",
        "snippet": "    private boolean baseShapesFilled;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " The default value returned by the getShapeFilled() method. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.useFillPaint",
        "snippet": "    private boolean useFillPaint;",
        "begin_line": 161,
        "end_line": 161,
        "comment": " \r\n     * A flag that controls whether the fill paint is used for filling \r\n     * shapes. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.drawOutlines",
        "snippet": "    private boolean drawOutlines;",
        "begin_line": 164,
        "end_line": 164,
        "comment": " A flag that controls whether outlines are drawn for shapes. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.useOutlinePaint",
        "snippet": "    private boolean useOutlinePaint;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " \r\n     * A flag that controls whether the outline paint is used for drawing shape \r\n     * outlines - if not, the regular series paint is used. \r\n     "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "signature": "org.jfree.data.DefaultKeyedValues.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8468154364608194797L;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "signature": "org.jfree.data.DefaultKeyedValues.data",
        "snippet": "    private List data;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3276922179323563410L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.TOP_OR_LEFT",
        "snippet": "    public static final AxisLocation TOP_OR_LEFT = new AxisLocation(\n            \"AxisLocation.TOP_OR_LEFT\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Axis at the top or left. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.TOP_OR_RIGHT",
        "snippet": "    public static final AxisLocation TOP_OR_RIGHT = new AxisLocation(\n            \"AxisLocation.TOP_OR_RIGHT\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": " Axis at the top or right. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.BOTTOM_OR_LEFT",
        "snippet": "    public static final AxisLocation BOTTOM_OR_LEFT = new AxisLocation(\n            \"AxisLocation.BOTTOM_OR_LEFT\");",
        "begin_line": 71,
        "end_line": 72,
        "comment": " Axis at the bottom or left. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.BOTTOM_OR_RIGHT",
        "snippet": "    public static final AxisLocation BOTTOM_OR_RIGHT = new AxisLocation(\n            \"AxisLocation.BOTTOM_OR_RIGHT\");",
        "begin_line": 75,
        "end_line": 76,
        "comment": " Axis at the bottom or right. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "signature": "org.jfree.chart.axis.AxisLocation.name",
        "snippet": "    private String name;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4010349116350119512L;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.completePaint",
        "snippet": "    private transient Paint completePaint;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " The paint for displaying the percentage complete. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.incompletePaint",
        "snippet": "    private transient Paint incompletePaint;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " The paint for displaying the incomplete part of a task. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.startPercent",
        "snippet": "    private double startPercent;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " \r\n     * Controls the starting edge of the progress indicator (expressed as a \r\n     * percentage of the overall bar width).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.endPercent",
        "snippet": "    private double endPercent;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\r\n     * Controls the ending edge of the progress indicator (expressed as a \r\n     * percentage of the overall bar width). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_RED",
        "snippet": "    public static final Color VERY_DARK_RED = new Color(0x80, 0x00, 0x00);",
        "begin_line": 61,
        "end_line": 61,
        "comment": " A very dark red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_RED",
        "snippet": "    public static final Color DARK_RED = new Color(0xc0, 0x00, 0x00);",
        "begin_line": 64,
        "end_line": 64,
        "comment": " A dark red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_RED",
        "snippet": "    public static final Color LIGHT_RED = new Color(0xFF, 0x40, 0x40);",
        "begin_line": 67,
        "end_line": 67,
        "comment": " A light red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_RED",
        "snippet": "    public static final Color VERY_LIGHT_RED = new Color(0xFF, 0x80, 0x80);",
        "begin_line": 70,
        "end_line": 70,
        "comment": " A very light red color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_YELLOW",
        "snippet": "    public static final Color VERY_DARK_YELLOW = new Color(0x80, 0x80, 0x00);",
        "begin_line": 73,
        "end_line": 73,
        "comment": " A very dark yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_YELLOW",
        "snippet": "    public static final Color DARK_YELLOW = new Color(0xC0, 0xC0, 0x00);",
        "begin_line": 76,
        "end_line": 76,
        "comment": " A dark yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_YELLOW",
        "snippet": "    public static final Color LIGHT_YELLOW = new Color(0xFF, 0xFF, 0x40);",
        "begin_line": 79,
        "end_line": 79,
        "comment": " A light yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_YELLOW",
        "snippet": "    public static final Color VERY_LIGHT_YELLOW = new Color(0xFF, 0xFF, 0x80);",
        "begin_line": 82,
        "end_line": 82,
        "comment": " A very light yellow color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_GREEN",
        "snippet": "    public static final Color VERY_DARK_GREEN = new Color(0x00, 0x80, 0x00);",
        "begin_line": 85,
        "end_line": 85,
        "comment": " A very dark green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_GREEN",
        "snippet": "    public static final Color DARK_GREEN = new Color(0x00, 0xC0, 0x00);",
        "begin_line": 88,
        "end_line": 88,
        "comment": " A dark green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_GREEN",
        "snippet": "    public static final Color LIGHT_GREEN = new Color(0x40, 0xFF, 0x40);",
        "begin_line": 91,
        "end_line": 91,
        "comment": " A light green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_GREEN",
        "snippet": "    public static final Color VERY_LIGHT_GREEN = new Color(0x80, 0xFF, 0x80);",
        "begin_line": 94,
        "end_line": 94,
        "comment": " A very light green color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_CYAN",
        "snippet": "    public static final Color VERY_DARK_CYAN = new Color(0x00, 0x80, 0x80);",
        "begin_line": 97,
        "end_line": 97,
        "comment": " A very dark cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_CYAN",
        "snippet": "    public static final Color DARK_CYAN = new Color(0x00, 0xC0, 0xC0);",
        "begin_line": 100,
        "end_line": 100,
        "comment": " A dark cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_CYAN",
        "snippet": "    public static final Color LIGHT_CYAN = new Color(0x40, 0xFF, 0xFF);",
        "begin_line": 103,
        "end_line": 103,
        "comment": " A light cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_CYAN",
        "snippet": "    public static final Color VERY_LIGHT_CYAN = new Color(0x80, 0xFF, 0xFF);",
        "begin_line": 106,
        "end_line": 106,
        "comment": " Aa very light cyan color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_BLUE",
        "snippet": "    public static final Color VERY_DARK_BLUE = new Color(0x00, 0x00, 0x80);",
        "begin_line": 109,
        "end_line": 109,
        "comment": " A very dark blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_BLUE",
        "snippet": "    public static final Color DARK_BLUE = new Color(0x00, 0x00, 0xC0);",
        "begin_line": 112,
        "end_line": 112,
        "comment": " A dark blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_BLUE",
        "snippet": "    public static final Color LIGHT_BLUE = new Color(0x40, 0x40, 0xFF);",
        "begin_line": 115,
        "end_line": 115,
        "comment": " A light blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_BLUE",
        "snippet": "    public static final Color VERY_LIGHT_BLUE = new Color(0x80, 0x80, 0xFF);",
        "begin_line": 118,
        "end_line": 118,
        "comment": " A very light blue color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_DARK_MAGENTA",
        "snippet": "    public static final Color VERY_DARK_MAGENTA = new Color(0x80, 0x00, 0x80);",
        "begin_line": 121,
        "end_line": 121,
        "comment": " A very dark magenta/purple color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.DARK_MAGENTA",
        "snippet": "    public static final Color DARK_MAGENTA = new Color(0xC0, 0x00, 0xC0);",
        "begin_line": 124,
        "end_line": 124,
        "comment": " A dark magenta color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.LIGHT_MAGENTA",
        "snippet": "    public static final Color LIGHT_MAGENTA = new Color(0xFF, 0x40, 0xFF);",
        "begin_line": 127,
        "end_line": 127,
        "comment": " A light magenta color. "
    },
    {
        "class_name": "org.jfree.chart.ChartColor",
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "signature": "org.jfree.chart.ChartColor.VERY_LIGHT_MAGENTA",
        "snippet": "    public static final Color VERY_LIGHT_MAGENTA = new Color(0xFF, 0x80, 0xFF);",
        "begin_line": 130,
        "end_line": 130,
        "comment": " A very light magenta color. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5168681143844183864L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.categoryAnchor",
        "snippet": "    private RectangleAnchor categoryAnchor;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The category anchor point. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.labelAnchor",
        "snippet": "    private TextBlockAnchor labelAnchor;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The text block anchor. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.angle",
        "snippet": "    private double angle;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The rotation angle (in radians). "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.widthType",
        "snippet": "    private CategoryLabelWidthType widthType;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The width calculation type. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.widthRatio",
        "snippet": "    private float widthRatio;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " \r\n     * The maximum label width as a percentage of the category space or the \r\n     * range space. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8204856624355025117L;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.DEFAULT_ITEM_MARGIN",
        "snippet": "    public static final double DEFAULT_ITEM_MARGIN = 0.20;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The default item margin percentage. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.itemMargin",
        "snippet": "    private double itemMargin;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The margin between items within a category. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.maxItemWidth",
        "snippet": "    private double maxItemWidth;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The maximum item width as a percentage of the available space. "
    },
    {
        "class_name": "org.jfree.chart.ui.Licences",
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "signature": "org.jfree.chart.ui.Licences.GPL",
        "snippet": "    public static final String GPL = \"GNU GENERAL PUBLIC LICENSE\\n\"\n        + \"\\n\"\n        + \"Version 2, June 1991\\n\"\n        + \"\\n\"\n        + \"Copyright (C) 1989, 1991 Free Software Foundation, Inc. 675 Mass Ave, Cambridge, \"\n        + \"MA 02139, USA. Everyone is permitted to copy and distribute verbatim copies of this \"\n        + \"license document, but changing it is not allowed.\\n\"\n        + \"\\n\"\n        + \"Preamble\\n\"\n        + \"The licenses for most software are designed to take away your freedom to share and \"\n        + \"change it. By contrast, the GNU General Public License is intended to guarantee your \"\n        + \"freedom to share and change free software--to make sure the software is free for all \"\n        + \"its users. This General Public License applies to most of the Free Software \"\n        + \"Foundation's software and to any other program whose authors commit to using it. (Some \"\n        + \"other Free Software Foundation software is covered by the GNU Library General Public \"\n        + \"License instead.) You can apply it to your programs, too.\\n\"\n        + \"\\n\"\n        + \"When we speak of free software, we are referring to freedom, not price. Our General \"\n        + \"Public Licenses are designed to make sure that you have the freedom to distribute \"\n        + \"copies of free software (and charge for this service if you wish), that you receive \"\n        + \"source code or can get it if you want it, that you can change the software or use \"\n        + \"pieces of it in new free programs; and that you know you can do these things.\"\n        + \"\\n\"\n        + \"To protect your rights, we need to make restrictions that forbid anyone to deny you \"\n        + \"these rights or to ask you to surrender the rights. These restrictions translate to \"\n        + \"certain responsibilities for you if you distribute copies of the software, or if you \"\n        + \"modify it.\\n\"\n        + \"\\n\"\n        + \"For example, if you distribute copies of such a program, whether gratis or for a fee, \"\n        + \"you must give the recipients all the rights that you have. You must make sure that \"\n        + \"they, too, receive or can get the source code. And you must show them these terms so \"\n        + \"they know their rights.\\n\"\n        + \"\\n\"\n        + \"We protect your rights with two steps: (1) copyright the software, and (2) offer you \"\n        + \"this license which gives you legal permission to copy, distribute and/or modify the \"\n        + \"software.\\n\"\n        + \"\\n\"\n        + \"Also, for each author's protection and ours, we want to make certain that everyone \"\n        + \"understands that there is no warranty for this free software. If the software is \"\n        + \"modified by someone else and passed on, we want its recipients to know that what they \"\n        + \"have is not the original, so that any problems introduced by others will not reflect \"\n        + \"on the original authors' reputations.\\n\"\n        + \"\\n\"\n        + \"Finally, any free program is threatened constantly by software patents. We wish to \"\n        + \"avoid the danger that redistributors of a free program will individually obtain patent \"\n        + \"licenses, in effect making the program proprietary. To prevent this, we have made it \"\n        + \"clear that any patent must be licensed for everyone's free use or not licensed at \"\n        + \"all.\\n\"\n        + \"\\n\"\n        + \"The precise terms and conditions for copying, distribution and modification follow.\\n\"\n        + \"\\n\"\n        + \"GNU GENERAL PUBLIC LICENSE\\n\"\n        + \"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\\n\"\n        + \"\\n\"\n        + \"0. This License applies to any program or other work which contains a notice placed by \"\n        + \"the copyright holder saying it may be distributed under the terms of this General \"\n        + \"Public License. The \\\"Program\\\", below, refers to any such program or work, and a \"\n        + \"\\\"work based on the Program\\\" means either the Program or any derivative work under \"\n        + \"copyright law: that is to say, a work containing the Program or a portion of it, \"\n        + \"either verbatim or with modifications and/or translated into another language. \"\n        + \"(Hereinafter, translation is included without limitation in the term \"\n        + \"\\\"modification\\\".) Each licensee is addressed as \\\"you\\\".\\n\"\n        + \"\\n\"\n        + \"Activities other than copying, distribution and modification are not covered by this \"\n        + \"License; they are outside its scope. The act of running the Program is not restricted, \"\n        + \"and the output from the Program is covered only if its contents constitute a work \"\n        + \"based on the Program (independent of having been made by running the Program). Whether \"\n        + \"that is true depends on what the Program does.\\n\"\n        + \"\\n\"\n        + \"1. You may copy and distribute verbatim copies of the Program's source code as you \"\n        + \"receive it, in any medium, provided that you conspicuously and appropriately publish \"\n        + \"on each copy an appropriate copyright notice and disclaimer of warranty; keep intact \"\n        + \"all the notices that refer to this License and to the absence of any warranty; and \"\n        + \"give any other recipients of the Program a copy of this License along with the \"\n        + \"Program.\\n\"\n        + \"\\n\"\n        + \"You may charge a fee for the physical act of transferring a copy, and you may at your \"\n        + \"option offer warranty protection in exchange for a fee.\\n\"\n        + \"\\n\"\n        + \"2. You may modify your copy or copies of the Program or any portion of it, thus \"\n        + \"forming a work based on the Program, and copy and distribute such modifications or \"\n        + \"work under the terms of Section 1 above, provided that you also meet all of these \"\n        + \"conditions:\\n\"\n        + \"\\n\"\n        + \"a) You must cause the modified files to carry prominent notices stating that you \"\n        + \"changed the files and the date of any change.\\n\"\n        + \"\\n\"\n        + \"b) You must cause any work that you distribute or publish, that in whole or in part \"\n        + \"contains or is derived from the Program or any part thereof, to be licensed as a whole \"\n        + \"at no charge to all third parties under the terms of this License.\\n\"\n        + \"\\n\"\n        + \"c) If the modified program normally reads commands interactively when run, you must \"\n        + \"cause it, when started running for such interactive use in the most ordinary way, to \"\n        + \"print or display an announcement including an appropriate copyright notice and a \"\n        + \"notice that there is no warranty (or else, saying that you provide a warranty) and \"\n        + \"that users may redistribute the program under these conditions, and telling the user \"\n        + \"how to view a copy of this License. (Exception: if the Program itself is interactive \"\n        + \"but does not normally print such an announcement, your work based on the Program is \"\n        + \"not required to print an announcement.)\\n\"\n        + \"\\n\"\n        + \"These requirements apply to the modified work as a whole. If identifiable sections of \"\n        + \"that work are not derived from the Program, and can be reasonably considered \"\n        + \"independent and separate works in themselves, then this License, and its terms, do not \"\n        + \"apply to those sections when you distribute them as separate works. But when you \"\n        + \"distribute the same sections as part of a whole which is a work based on the Program, \"\n        + \"the distribution of the whole must be on the terms of this License, whose permissions \"\n        + \"for other licensees extend to the entire whole, and thus to each and every part \"\n        + \"regardless of who wrote it.\\n\"\n        + \"\\n\"\n        + \"Thus, it is not the intent of this section to claim rights or contest your rights to \"\n        + \"work written entirely by you; rather, the intent is to exercise the right to control \"\n        + \"the distribution of derivative or collective works based on the Program.\\n\"\n        + \"\\n\"\n        + \"In addition, mere aggregation of another work not based on the Program with the \"\n        + \"Program (or with a work based on the Program) on a volume of a storage or distribution \"\n        + \"medium does not bring the other work under the scope of this License.\\n\"\n        + \"\\n\"\n        + \"3. You may copy and distribute the Program (or a work based on it, under Section 2) in \"\n        + \"object code or executable form under the terms of Sections 1 and 2 above provided that \"\n        + \"you also do one of the following:\\n\"\n        + \"\\n\"\n        + \"a) Accompany it with the complete corresponding machine-readable source code, which \"\n        + \"must be distributed under the terms of Sections 1 and 2 above on a medium customarily \"\n        + \"used for software interchange; or,\\n\"\n        + \"b) Accompany it with a written offer, valid for at least three years, to give any \"\n        + \"third party, for a charge no more than your cost of physically performing source \"\n        + \"distribution, a complete machine-readable copy of the corresponding source code, to be \"\n        + \"distributed under the terms of Sections 1 and 2 above on a medium customarily used for \"\n        + \"software interchange; or,\\n\"\n        + \"c) Accompany it with the information you received as to the offer to distribute \"\n        + \"corresponding source code. (This alternative is allowed only for noncommercial \"\n        + \"distribution and only if you received the program in object code or executable form \"\n        + \"with such an offer, in accord with Subsection b above.)\\n\"\n        + \"\\n\"\n        + \"The source code for a work means the preferred form of the work for making \"\n        + \"modifications to it. For an executable work, complete source code means all the source \"\n        + \"code for all modules it contains, plus any associated interface definition files, plus \"\n        + \"the scripts used to control compilation and installation of the executable. However, \"\n        + \"as a special exception, the source code distributed need not include anything that is \"\n        + \"normally distributed (in either source or binary form) with the major components \"\n        + \"(compiler, kernel, and so on) of the operating system on which the executable runs, \"\n        + \"unless that component itself accompanies the executable.\\n\"\n        + \"\\n\"\n        + \"If distribution of executable or object code is made by offering access to copy from a \"\n        + \"designated place, then offering equivalent access to copy the source code from the \"\n        + \"same place counts as distribution of the source code, even though third parties are \"\n        + \"not compelled to copy the source along with the object code.\\n\"\n        + \"\\n\"\n        + \"4. You may not copy, modify, sublicense, or distribute the Program except as expressly \"\n        + \"provided under this License. Any attempt otherwise to copy, modify, sublicense or \"\n        + \"distribute the Program is void, and will automatically terminate your rights under \"\n        + \"this License. However, parties who have received copies, or rights, from you under \"\n        + \"this License will not have their licenses terminated so long as such parties remain in \"\n        + \"full compliance.\"\n        + \"\\n\"\n        + \"5. You are not required to accept this License, since you have not signed it. However, \"\n        + \"nothing else grants you permission to modify or distribute the Program or its \"\n        + \"derivative works. These actions are prohibited by law if you do not accept this \"\n        + \"License. Therefore, by modifying or distributing the Program (or any work based on the \"\n        + \"Program), you indicate your acceptance of this License to do so, and all its terms and \"\n        + \"conditions for copying, distributing or modifying the Program or works based on it.\\n\"\n        + \"\\n\"\n        + \"6. Each time you redistribute the Program (or any work based on the Program), the \"\n        + \"recipient automatically receives a license from the original licensor to copy, \"\n        + \"distribute or modify the Program subject to these terms and conditions. You may not \"\n        + \"impose any further restrictions on the recipients' exercise of the rights granted \"\n        + \"herein. You are not responsible for enforcing compliance by third parties to this \"\n        + \"License.\"\n        + \"\\n\"\n        + \"7. If, as a consequence of a court judgment or allegation of patent infringement or \"\n        + \"for any other reason (not limited to patent issues), conditions are imposed on you \"\n        + \"(whether by court order, agreement or otherwise) that contradict the conditions of \"\n        + \"this License, they do not excuse you from the conditions of this License. If you \"\n        + \"cannot distribute so as to satisfy simultaneously your obligations under this License \"\n        + \"and any other pertinent obligations, then as a consequence you may not distribute the \"\n        + \"Program at all. For example, if a patent license would not permit royalty-free \"\n        + \"redistribution of the Program by all those who receive copies directly or indirectly \"\n        + \"through you, then the only way you could satisfy both it and this License would be to \"\n        + \"refrain entirely from distribution of the Program.\\n\"\n        + \"\\n\"\n        + \"If any portion of this section is held invalid or unenforceable under any particular \"\n        + \"circumstance, the balance of the section is intended to apply and the section as a \"\n        + \"whole is intended to apply in other circumstances.\\n\"\n        + \"\\n\"\n        + \"It is not the purpose of this section to induce you to infringe any patents or other \"\n        + \"property right claims or to contest validity of any such claims; this section has the \"\n        + \"sole purpose of protecting the integrity of the free software distribution system, \"\n        + \"which is implemented by public license practices. Many people have made generous \"\n        + \"contributions to the wide range of software distributed through that system in \"\n        + \"reliance on consistent application of that system; it is up to the author/donor to \"\n        + \"decide if he or she is willing to distribute software through any other system and a \"\n        + \"licensee cannot impose that choice.\\n\"\n        + \"\\n\"\n        + \"This section is intended to make thoroughly clear what is believed to be a consequence \"\n        + \"of the rest of this License.\\n\"\n        + \"\\n\"\n        + \"8. If the distribution and/or use of the Program is restricted in certain countries \"\n        + \"either by patents or by copyrighted interfaces, the original copyright holder who \"\n        + \"places the Program under this License may add an explicit geographical distribution \"\n        + \"limitation excluding those countries, so that distribution is permitted only in or \"\n        + \"among countries not thus excluded. In such case, this License incorporates the \"\n        + \"limitation as if written in the body of this License.\\n\"\n        + \"\\n\"\n        + \"9. The Free Software Foundation may publish revised and/or new versions of the General \"\n        + \"Public License from time to time. Such new versions will be similar in spirit to the \"\n        + \"present version, but may differ in detail to address new problems or concerns.\\n\"\n        + \"\\n\"\n        + \"Each version is given a distinguishing version number. If the Program specifies a \"\n        + \"version number of this License which applies to it and \\\"any later version\\\", you have \"\n        + \"the option of following the terms and conditions either of that version or of any \"\n        + \"later version published by the Free Software Foundation. If the Program does not \"\n        + \"specify a version number of this License, you may choose any version ever published by \"\n        + \"the Free Software Foundation.\\n\"\n        + \"\\n\"\n        + \"10. If you wish to incorporate parts of the Program into other free programs whose \"\n        + \"distribution conditions are different, write to the author to ask for permission. For \"\n        + \"software which is copyrighted by the Free Software Foundation, write to the Free \"\n        + \"Software Foundation; we sometimes make exceptions for this. Our decision will be \"\n        + \"guided by the two goals of preserving the free status of all derivatives of our free \"\n        + \"software and of promoting the sharing and reuse of software generally.\\n\"\n        + \"\\n\"\n        + \"NO WARRANTY\\n\"\n        + \"\\n\"\n        + \"11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE \"\n        + \"PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN \"\n        + \"WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \\\"AS IS\\\" \"\n        + \"WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED \"\n        + \"TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. \"\n        + \"THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD \"\n        + \"THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \"\n        + \"CORRECTION.\\n\"\n        + \"\\n\"\n        + \"12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY \"\n        + \"COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS \"\n        + \"PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, \"\n        + \"INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE \"\n        + \"PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE \"\n        + \"OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE \"\n        + \"WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \"\n        + \"POSSIBILITY OF SUCH DAMAGES.\\n\"\n        + \"\\n\"\n        + \"END OF TERMS AND CONDITIONS\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"How to Apply These Terms to Your New Programs\\n\"\n        + \"\\n\"\n        + \"If you develop a new program, and you want it to be of the greatest possible use to \"\n        + \"the public, the best way to achieve this is to make it free software which everyone \"\n        + \"can redistribute and change under these terms.\\n\"\n        + \"\\n\"\n        + \"To do so, attach the following notices to the program.  It is safest to attach them to \"\n        + \"the start of each source file to most effectively convey the exclusion of warranty; \"\n        + \"and each file should have at least the \\\"copyright\\\" line and a pointer to where the \"\n        + \"full notice is found.\\n\"\n        + \"\\n\"\n        + \"<one line to give the program's name and a brief idea of what it does.>\\n\"\n        + \"Copyright (C) <year>  <name of author>\\n\"\n        + \"\\n\"\n        + \"This program is free software; you can redistribute it and/or modify it under the \"\n        + \"terms of the GNU General Public License as published by the Free Software Foundation; \"\n        + \"either version 2 of the License, or (at your option) any later version.\\n\"\n        + \"\\n\"\n        + \"This program is distributed in the hope that it will be useful, but WITHOUT ANY \"\n        + \"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \"\n        + \"PARTICULAR PURPOSE.  See the GNU General Public License for more details.\\n\"\n        + \"\\n\"\n        + \"You should have received a copy of the GNU General Public License along with this \"\n        + \"program; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite \"\n        + \"330, Boston, MA  02111-1307  USA\\n\"\n        + \"\\n\"\n        + \"Also add information on how to contact you by electronic and paper mail.\\n\"\n        + \"\\n\"\n        + \"If the program is interactive, make it output a short notice like this when it starts \"\n        + \"in an interactive mode:\\n\"\n        + \"\\n\"\n        + \"Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with \"\n        + \"ABSOLUTELY NO WARRANTY; for details type `show w'.\\n\"\n        + \"This is free software, and you are welcome to redistribute it under certain \"\n        + \"conditions; type `show c' for details.\\n\"\n        + \"\\n\"\n        + \"The hypothetical commands `show w' and `show c' should show the appropriate parts of \"\n        + \"the General Public License.  Of course, the commands you use may be called something \"\n        + \"other than `show w' and `show c'; they could even be mouse-clicks or menu items\"\n        + \"--whatever suits your program.\\n\"\n        + \"\\n\"\n        + \"You should also get your employer (if you work as a programmer) or your school, if \"\n        + \"any, to sign a \\\"copyright disclaimer\\\" for the program, if necessary.  Here is a \"\n        + \"sample; alter the names:\\n\"\n        + \"\\n\"\n        + \"Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' \"\n        + \"(which makes passes at compilers) written by James Hacker.\\n\"\n        + \"\\n\"\n        + \"<signature of Ty Coon>, 1 April 1989\\n\"\n        + \"Ty Coon, President of Vice\\n\"\n        + \"\\n\"\n        + \"This General Public License does not permit incorporating your program into \"\n        + \"proprietary programs.  If your program is a subroutine library, you may consider it \"\n        + \"more useful to permit linking proprietary applications with the library.  If this is \"\n        + \"what you want to do, use the GNU Library General Public License instead of this \"\n        + \"License.\\n\";",
        "begin_line": 57,
        "end_line": 356,
        "comment": " The GNU General Public Licence. "
    },
    {
        "class_name": "org.jfree.chart.ui.Licences",
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "signature": "org.jfree.chart.ui.Licences.LGPL",
        "snippet": "    public static final String LGPL = \"GNU LESSER GENERAL PUBLIC LICENSE\\n\"\n        + \"\\n\"\n        + \"Version 2.1, February 1999\\n\"\n        + \"\\n\"\n        + \"Copyright (C) 1991, 1999 Free Software Foundation, Inc.\\n\"\n        + \"59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\\n\"\n        + \"Everyone is permitted to copy and distribute verbatim copies of this license document, \"\n        + \"but changing it is not allowed.\\n\"\n        + \"\\n\"\n        + \"[This is the first released version of the Lesser GPL.  It also counts as the \"\n        + \"successor of the GNU Library Public License, version 2, hence the version number \"\n        + \"2.1.]\\n\"\n        + \"\\n\"\n        + \"Preamble\\n\"\n        + \"\\n\"\n        + \"The licenses for most software are designed to take away your freedom to share and \"\n        + \"change it. By contrast, the GNU General Public Licenses are intended to guarantee your \"\n        + \"freedom to share and change free software--to make sure the software is free for all \"\n        + \"its users.\\n\"\n        + \"\\n\"\n        + \"This license, the Lesser General Public License, applies to some specially designated \"\n        + \"software packages--typically libraries--of the Free Software Foundation and other \"\n        + \"authors who decide to use it. You can use it too, but we suggest you first think \"\n        + \"carefully about whether this license or the ordinary General Public License is the \"\n        + \"better strategy to use in any particular case, based on the explanations below.\\n\"\n        + \"\\n\"\n        + \"When we speak of free software, we are referring to freedom of use, not price. Our \"\n        + \"General Public Licenses are designed to make sure that you have the freedom to \"\n        + \"distribute copies of free software (and charge for this service if you wish); that you \"\n        + \"receive source code or can get it if you want it; that you can change the software and \"\n        + \"use pieces of it in new free programs; and that you are informed that you can do these \"\n        + \"things.\\n\"\n        + \"\\n\"\n        + \"To protect your rights, we need to make restrictions that forbid distributors to deny \"\n        + \"you these rights or to ask you to surrender these rights. These restrictions translate \"\n        + \"to certain responsibilities for you if you distribute copies of the library or if you \"\n        + \"modify it.\\n\"\n        + \"\\n\"\n        + \"For example, if you distribute copies of the library, whether gratis or for a fee, you \"\n        + \"must give the recipients all the rights that we gave you. You must make sure that \"\n        + \"they, too, receive or can get the source code. If you link other code with the \"\n        + \"library, you must provide complete object files to the recipients, so that they can \"\n        + \"relink them with the library after making changes to the library and recompiling it. \"\n        + \"And you must show them these terms so they know their rights.\\n\"\n        + \"\\n\"\n        + \"We protect your rights with a two-step method: (1) we copyright the library, and (2) \"\n        + \"we offer you this license, which gives you legal permission to copy, distribute and/or \"\n        + \"modify the library.\\n\"\n        + \"\\n\"\n        + \"To protect each distributor, we want to make it very clear that there is no warranty \"\n        + \"for the free library. Also, if the library is modified by someone else and passed on, \"\n        + \"the recipients should know that what they have is not the original version, so that \"\n        + \"the original author's reputation will not be affected by problems that might be \"\n        + \"introduced by others.\\n\"\n        + \"\\n\"\n        + \"Finally, software patents pose a constant threat to the existence of any free program. \"\n        + \"We wish to make sure that a company cannot effectively restrict the users of a free \"\n        + \"program by obtaining a restrictive license from a patent holder. Therefore, we insist \"\n        + \"that any patent license obtained for a version of the library must be consistent with \"\n        + \"the full freedom of use specified in this license.\\n\"\n        + \"\\n\"\n        + \"Most GNU software, including some libraries, is covered by the ordinary GNU General \"\n        + \"Public License. This license, the GNU Lesser General Public License, applies to \"\n        + \"certain designated libraries, and is quite different from the ordinary General Public \"\n        + \"License. We use this license for certain libraries in order to permit linking those \"\n        + \"libraries into non-free programs.\\n\"\n        + \"\\n\"\n        + \"When a program is linked with a library, whether statically or using a shared library, \"\n        + \"the combination of the two is legally speaking a combined work, a derivative of the \"\n        + \"original library. The ordinary General Public License therefore permits such linking \"\n        + \"only if the entire combination fits its criteria of freedom. The Lesser General Public \"\n        + \"License permits more lax criteria for linking other code with the library.\\n\"\n        + \"\\n\"\n        + \"We call this license the \\\"Lesser\\\" General Public License because it does Less to \"\n        + \"protect the user's freedom than the ordinary General Public License. It also provides \"\n        + \"other free software developers Less of an advantage over competing non-free programs. \"\n        + \"These disadvantages are the reason we use the ordinary General Public License for many \"\n        + \"libraries. However, the Lesser license provides advantages in certain special \"\n        + \"circumstances.\\n\"\n        + \"\\n\"\n        + \"For example, on rare occasions, there may be a special need to encourage the widest \"\n        + \"possible use of a certain library, so that it becomes a de-facto standard. To achieve \"\n        + \"this, non-free programs must be allowed to use the library. A more frequent case is \"\n        + \"that a free library does the same job as widely used non-free libraries. In this case, \"\n        + \"there is little to gain by limiting the free library to free software only, so we use \"\n        + \"the Lesser General Public License.\\n\"\n        + \"\\n\"\n        + \"In other cases, permission to use a particular library in non-free programs enables a \"\n        + \"greater number of people to use a large body of free software. For example, permission \"\n        + \"to use the GNU C Library in non-free programs enables many more people to use the \"\n        + \"whole GNU operating system, as well as its variant, the GNU/Linux operating system.\\n\"\n        + \"\\n\"\n        + \"Although the Lesser General Public License is Less protective of the users' freedom, \"\n        + \"it does ensure that the user of a program that is linked with the Library has the \"\n        + \"freedom and the wherewithal to run that program using a modified version of the \"\n        + \"Library.\\n\"\n        + \"\\n\"\n        + \"The precise terms and conditions for copying, distribution and modification follow. \"\n        + \"Pay close attention to the difference between a \\\"work based on the library\\\" and a \"\n        + \"\\\"work that uses the library\\\". The former contains code derived from the library, \"\n        + \"whereas the latter must be combined with the library in order to run.\\n\"\n        + \"\\n\"\n        + \"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\\n\"\n        + \"\\n\"\n        + \"0. This License Agreement applies to any software library or other program which \"\n        + \"contains a notice placed by the copyright holder or other authorized party saying it \"\n        + \"may be distributed under the terms of this Lesser General Public License (also called \"\n        + \"\\\"this License\\\"). Each licensee is addressed as \\\"you\\\".\"\n        + \"\\n\"\n        + \"A \\\"library\\\" means a collection of software functions and/or data prepared so as to \"\n        + \"be conveniently linked with application programs (which use some of those functions \"\n        + \"and data) to form executables.\\n\"\n        + \"\\n\"\n        + \"The \\\"Library\\\", below, refers to any such software library or work which has been \"\n        + \"distributed under these terms. A \\\"work based on the Library\\\" means either the \"\n        + \"Library or any derivative work under copyright law: that is to say, a work containing \"\n        + \"the Library or a portion of it, either verbatim or with modifications and/or \"\n        + \"translated straightforwardly into another language. (Hereinafter, translation is \"\n        + \"included without limitation in the term \\\"modification\\\".)\\n\"\n        + \"\\n\"\n        + \"\\\"Source code\\\" for a work means the preferred form of the work for making \"\n        + \"modifications to it. For a library, complete source code means all the source code for \"\n        + \"all modules it contains, plus any associated interface definition files, plus the \"\n        + \"scripts used to control compilation and installation of the library.\\n\"\n        + \"\\n\"\n        + \"Activities other than copying, distribution and modification are not covered by this \"\n        + \"License; they are outside its scope. The act of running a program using the Library is \"\n        + \"not restricted, and output from such a program is covered only if its contents \"\n        + \"constitute a work based on the Library (independent of the use of the Library in a \"\n        + \"tool for writing it). Whether that is true depends on what the Library does and what \"\n        + \"the program that uses the Library does.\"\n        + \"\\n\"\n        + \"1. You may copy and distribute verbatim copies of the Library's complete source code \"\n        + \"as you receive it, in any medium, provided that you conspicuously and appropriately \"\n        + \"publish on each copy an appropriate copyright notice and disclaimer of warranty; keep \"\n        + \"intact all the notices that refer to this License and to the absence of any warranty; \"\n        + \"and distribute a copy of this License along with the Library.\\n\"\n        + \"\\n\"\n        + \"You may charge a fee for the physical act of transferring a copy, and you may at your \"\n        + \"option offer warranty protection in exchange for a fee.\\n\"\n        + \"\\n\"\n        + \"2. You may modify your copy or copies of the Library or any portion of it, thus \"\n        + \"forming a work based on the Library, and copy and distribute such modifications or \"\n        + \"work under the terms of Section 1 above, provided that you also meet all of these \"\n        + \"conditions:\\n\"\n        + \"\\n\"\n        + \"*    a) The modified work must itself be a software library.\\n\"\n        + \"*    b) You must cause the files modified to carry prominent notices stating that you \"\n        + \"changed the files and the date of any change.\\n\"\n        + \"*    c) You must cause the whole of the work to be licensed at no charge to all third \"\n        + \"parties under the terms of this License.\\n\"\n        + \"*    d) If a facility in the modified Library refers to a function or a table of data \"\n        + \"to be supplied by an application program that uses the facility, other than as an \"\n        + \"argument passed when the facility is invoked, then you must make a good faith effort \"\n        + \"to ensure that, in the event an application does not supply such function or table, \"\n        + \"the facility still operates, and performs whatever part of its purpose remains \"\n        + \"meaningful.\\n\"\n        + \"\\n\"\n        + \"(For example, a function in a library to compute square roots has a purpose that is \"\n        + \"entirely well-defined independent of the application. Therefore, Subsection 2d \"\n        + \"requires that any application-supplied function or table used by this function must be \"\n        + \"optional: if the application does not supply it, the square root function must still \"\n        + \"compute square roots.)\\n\"\n        + \"\\n\"\n        + \"These requirements apply to the modified work as a whole. If identifiable sections of \"\n        + \"that work are not derived from the Library, and can be reasonably considered \"\n        + \"independent and separate works in themselves, then this License, and its terms, do not \"\n        + \"apply to those sections when you distribute them as separate works. But when you \"\n        + \"distribute the same sections as part of a whole which is a work based on the Library, \"\n        + \"the distribution of the whole must be on the terms of this License, whose permissions \"\n        + \"for other licensees extend to the entire whole, and thus to each and every part \"\n        + \"regardless of who wrote it.\\n\"\n        + \"\\n\"\n        + \"Thus, it is not the intent of this section to claim rights or contest your rights to \"\n        + \"work written entirely by you; rather, the intent is to exercise the right to control \"\n        + \"the distribution of derivative or collective works based on the Library.\\n\"\n        + \"\\n\"\n        + \"In addition, mere aggregation of another work not based on the Library with the \"\n        + \"Library (or with a work based on the Library) on a volume of a storage or distribution \"\n        + \"medium does not bring the other work under the scope of this License.\\n\"\n        + \"\\n\"\n        + \"3. You may opt to apply the terms of the ordinary GNU General Public License instead \"\n        + \"of this License to a given copy of the Library. To do this, you must alter all the \"\n        + \"notices that refer to this License, so that they refer to the ordinary GNU General \"\n        + \"Public License, version 2, instead of to this License. (If a newer version than \"\n        + \"version 2 of the ordinary GNU General Public License has appeared, then you can \"\n        + \"specify that version instead if you wish.) Do not make any other change in these \"\n        + \"notices.\\n\"\n        + \"\\n\"\n        + \"Once this change is made in a given copy, it is irreversible for that copy, so the \"\n        + \"ordinary GNU General Public License applies to all subsequent copies and derivative \"\n        + \"works made from that copy.\\n\"\n        + \"\\n\"\n        + \"This option is useful when you wish to copy part of the code of the Library into a \"\n        + \"program that is not a library.\\n\"\n        + \"\\n\"\n        + \"4. You may copy and distribute the Library (or a portion or derivative of it, under \"\n        + \"Section 2) in object code or executable form under the terms of Sections 1 and 2 above \"\n        + \"provided that you accompany it with the complete corresponding machine-readable source \"\n        + \"code, which must be distributed under the terms of Sections 1 and 2 above on a medium \"\n        + \"customarily used for software interchange.\\n\"\n        + \"\\n\"\n        + \"If distribution of object code is made by offering access to copy from a designated \"\n        + \"place, then offering equivalent access to copy the source code from the same place \"\n        + \"satisfies the requirement to distribute the source code, even though third parties are \"\n        + \"not compelled to copy the source along with the object code.\\n\"\n        + \"\\n\"\n        + \"5. A program that contains no derivative of any portion of the Library, but is \"\n        + \"designed to work with the Library by being compiled or linked with it, is called a \"\n        + \"\\\"work that uses the Library\\\". Such a work, in isolation, is not a derivative work of \"\n        + \"the Library, and therefore falls outside the scope of this License.\\n\"\n        + \"\\n\"\n        + \"However, linking a \\\"work that uses the Library\\\" with the Library creates an \"\n        + \"executable that is a derivative of the Library (because it contains portions of the \"\n        + \"Library), rather than a \\\"work that uses the library\\\". The executable is therefore \"\n        + \"covered by this License. Section 6 states terms for distribution of such executables.\\n\"\n        + \"\\n\"\n        + \"When a \\\"work that uses the Library\\\" uses material from a header file that is part of \"\n        + \"the Library, the object code for the work may be a derivative work of the Library even \"\n        + \"though the source code is not. Whether this is true is especially significant if the \"\n        + \"work can be linked without the Library, or if the work is itself a library. The \"\n        + \"threshold for this to be true is not precisely defined by law.\\n\"\n        + \"\\n\"\n        + \"If such an object file uses only numerical parameters, data structure layouts and \"\n        + \"accessors, and small macros and small inline functions (ten lines or less in length), \"\n        + \"then the use of the object file is unrestricted, regardless of whether it is legally a \"\n        + \"derivative work. (Executables containing this object code plus portions of the Library \"\n        + \"will still fall under Section 6.)\\n\"\n        + \"\\n\"\n        + \"Otherwise, if the work is a derivative of the Library, you may distribute the object \"\n        + \"code for the work under the terms of Section 6. Any executables containing that work \"\n        + \"also fall under Section 6, whether or not they are linked directly with the Library \"\n        + \"itself.\\n\"\n        + \"\\n\"\n        + \"6. As an exception to the Sections above, you may also combine or link a \\\"work that \"\n        + \"uses the Library\\\" with the Library to produce a work containing portions of the \"\n        + \"Library, and distribute that work under terms of your choice, provided that the terms \"\n        + \"permit modification of the work for the customer's own use and reverse engineering for \"\n        + \"debugging such modifications.\\n\"\n        + \"\\n\"\n        + \"You must give prominent notice with each copy of the work that the Library is used in \"\n        + \"it and that the Library and its use are covered by this License. You must supply a \"\n        + \"copy of this License. If the work during execution displays copyright notices, you \"\n        + \"must include the copyright notice for the Library among them, as well as a reference \"\n        + \"directing the user to the copy of this License. Also, you must do one of these \"\n        + \"things:\\n\"\n        + \"\\n\"\n        + \"*    a) Accompany the work with the complete corresponding machine-readable source \"\n        + \"code for the Library including whatever changes were used in the work (which must be \"\n        + \"distributed under Sections 1 and 2 above); and, if the work is an executable linked \"\n        + \"with the Library, with the complete machine-readable \\\"work that uses the Library\\\", \"\n        + \"as object code and/or source code, so that the user can modify the Library and then \"\n        + \"relink to produce a modified executable containing the modified Library. (It is \"\n        + \"understood that the user who changes the contents of definitions files in the Library \"\n        + \"will not necessarily be able to recompile the application to use the modified \"\n        + \"definitions.)\\n\"\n        + \"*    b) Use a suitable shared library mechanism for linking with the Library. A \"\n        + \"suitable mechanism is one that (1) uses at run time a copy of the library already \"\n        + \"present on the user's computer system, rather than copying library functions into the \"\n        + \"executable, and (2) will operate properly with a modified version of the library, if \"\n        + \"the user installs one, as long as the modified version is interface-compatible with \"\n        + \"the version that the work was made with.\\n\"\n        + \"*    c) Accompany the work with a written offer, valid for at least three years, to \"\n        + \"give the same user the materials specified in Subsection 6a, above, for a charge no \"\n        + \"more than the cost of performing this distribution.\\n\"\n        + \"*    d) If distribution of the work is made by offering access to copy from a \"\n        + \"designated place, offer equivalent access to copy the above specified materials from \"\n        + \"the same place.\\n\"\n        + \"*    e) Verify that the user has already received a copy of these materials or that \"\n        + \"you have already sent this user a copy.\\n\"\n        + \"\\n\"\n        + \"For an executable, the required form of the \\\"work that uses the Library\\\" must \"\n        + \"include any data and utility programs needed for reproducing the executable from it. \"\n        + \"However, as a special exception, the materials to be distributed need not include \"\n        + \"anything that is normally distributed (in either source or binary form) with the major \"\n        + \"components (compiler, kernel, and so on) of the operating system on which the \"\n        + \"executable runs, unless that component itself accompanies the executable.\\n\"\n        + \"\\n\"\n        + \"It may happen that this requirement contradicts the license restrictions of other \"\n        + \"proprietary libraries that do not normally accompany the operating system. Such a \"\n        + \"contradiction means you cannot use both them and the Library together in an executable \"\n        + \"that you distribute.\\n\"\n        + \"\\n\"\n        + \"7. You may place library facilities that are a work based on the Library side-by-side \"\n        + \"in a single library together with other library facilities not covered by this \"\n        + \"License, and distribute such a combined library, provided that the separate \"\n        + \"distribution of the work based on the Library and of the other library facilities is \"\n        + \"otherwise permitted, and provided that you do these two things:\\n\"\n        + \"\\n\"\n        + \"*    a) Accompany the combined library with a copy of the same work based on the \"\n        + \"Library, uncombined with any other library facilities. This must be distributed under \"\n        + \"the terms of the Sections above.\\n\"\n        + \"*    b) Give prominent notice with the combined library of the fact that part of it is \"\n        + \"a work based on the Library, and explaining where to find the accompanying uncombined \"\n        + \"form of the same work.\\n\"\n        + \"\\n\"\n        + \"8. You may not copy, modify, sublicense, link with, or distribute the Library except \"\n        + \"as expressly provided under this License. Any attempt otherwise to copy, modify, \"\n        + \"sublicense, link with, or distribute the Library is void, and will automatically \"\n        + \"terminate your rights under this License. However, parties who have received copies, \"\n        + \"or rights, from you under this License will not have their licenses terminated so \"\n        + \"long as such parties remain in full compliance.\\n\"\n        + \"\\n\"\n        + \"9. You are not required to accept this License, since you have not signed it. However, \"\n        + \"nothing else grants you permission to modify or distribute the Library or its \"\n        + \"derivative works. These actions are prohibited by law if you do not accept this \"\n        + \"License. Therefore, by modifying or distributing the Library (or any work based on the \"\n        + \"Library), you indicate your acceptance of this License to do so, and all its terms and \"\n        + \"conditions for copying, distributing or modifying the Library or works based on it.\\n\"\n        + \"\\n\"\n        + \"10. Each time you redistribute the Library (or any work based on the Library), the \"\n        + \"recipient automatically receives a license from the original licensor to copy, \"\n        + \"distribute, link with or modify the Library subject to these terms and conditions. You \"\n        + \"may not impose any further restrictions on the recipients' exercise of the rights \"\n        + \"granted herein. You are not responsible for enforcing compliance by third parties with \"\n        + \"this License.\\n\"\n        + \"\\n\"\n        + \"11. If, as a consequence of a court judgment or allegation of patent infringement or \"\n        + \"for any other reason (not limited to patent issues), conditions are imposed on you \"\n        + \"(whether by court order, agreement or otherwise) that contradict the conditions of \"\n        + \"this License, they do not excuse you from the conditions of this License. If you \"\n        + \"cannot distribute so as to satisfy simultaneously your obligations under this License \"\n        + \"and any other pertinent obligations, then as a consequence you may not distribute the \"\n        + \"Library at all. For example, if a patent license would not permit royalty-free \"\n        + \"redistribution of the Library by all those who receive copies directly or indirectly \"\n        + \"through you, then the only way you could satisfy both it and this License would be to \"\n        + \"refrain entirely from distribution of the Library.\\n\"\n        + \"\\n\"\n        + \"If any portion of this section is held invalid or unenforceable under any particular \"\n        + \"circumstance, the balance of the section is intended to apply, and the section as a \"\n        + \"whole is intended to apply in other circumstances.\\n\"\n        + \"\\n\"\n        + \"It is not the purpose of this section to induce you to infringe any patents or other \"\n        + \"property right claims or to contest validity of any such claims; this section has the \"\n        + \"sole purpose of protecting the integrity of the free software distribution system \"\n        + \"which is implemented by public license practices. Many people have made generous \"\n        + \"contributions to the wide range of software distributed through that system in \"\n        + \"reliance on consistent application of that system; it is up to the author/donor to \"\n        + \"decide if he or she is willing to distribute software through any other system and a \"\n        + \"licensee cannot impose that choice.\\n\"\n        + \"\\n\"\n        + \"This section is intended to make thoroughly clear what is believed to be a consequence \"\n        + \"of the rest of this License.\\n\"\n        + \"\\n\"\n        + \"12. If the distribution and/or use of the Library is restricted in certain countries \"\n        + \"either by patents or by copyrighted interfaces, the original copyright holder who \"\n        + \"places the Library under this License may add an explicit geographical distribution \"\n        + \"limitation excluding those countries, so that distribution is permitted only in or \"\n        + \"among countries not thus excluded. In such case, this License incorporates the \"\n        + \"limitation as if written in the body of this License.\\n\"\n        + \"\\n\"\n        + \"13. The Free Software Foundation may publish revised and/or new versions of the Lesser \"\n        + \"General Public License from time to time. Such new versions will be similar in spirit \"\n        + \"to the present version, but may differ in detail to address new problems or concerns.\\n\"\n        + \"\\n\"\n        + \"Each version is given a distinguishing version number. If the Library specifies a \"\n        + \"version number of this License which applies to it and \\\"any later version\\\", you have \"\n        + \"the option of following the terms and conditions either of that version or of any \"\n        + \"later version published by the Free Software Foundation. If the Library does not \"\n        + \"specify a license version number, you may choose any version ever published by the \"\n        + \"Free Software Foundation.\\n\"\n        + \"\\n\"\n        + \"14. If you wish to incorporate parts of the Library into other free programs whose \"\n        + \"distribution conditions are incompatible with these, write to the author to ask for \"\n        + \"permission. For software which is copyrighted by the Free Software Foundation, write \"\n        + \"to the Free Software Foundation; we sometimes make exceptions for this. Our decision \"\n        + \"will be guided by the two goals of preserving the free status of all derivatives of \"\n        + \"our free software and of promoting the sharing and reuse of software generally.\\n\"\n        + \"\\n\"\n        + \"NO WARRANTY\\n\"\n        + \"\\n\"\n        + \"15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE \"\n        + \"LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN \"\n        + \"WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE LIBRARY \\\"AS IS\\\" \"\n        + \"WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED \"\n        + \"TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. \"\n        + \"THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE LIBRARY IS WITH YOU. SHOULD \"\n        + \"THE LIBRARY PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR \"\n        + \"CORRECTION.\\n\"\n        + \"\\n\"\n        + \"16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY \"\n        + \"COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE LIBRARY AS \"\n        + \"PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, \"\n        + \"INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE \"\n        + \"LIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE \"\n        + \"OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE LIBRARY TO OPERATE \"\n        + \"WITH ANY OTHER SOFTWARE), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE \"\n        + \"POSSIBILITY OF SUCH DAMAGES.\\n\"\n        + \"\\n\"\n        + \"END OF TERMS AND CONDITIONS\\n\"\n        + \"\\n\"\n        + \"\\n\"\n        + \"How to Apply These Terms to Your New Libraries\\n\"\n        + \"\\n\"\n        + \"If you develop a new library, and you want it to be of the greatest possible use to \"\n        + \"the public, we recommend making it free software that everyone can redistribute and \"\n        + \"change. You can do so by permitting redistribution under these terms (or, \"\n        + \"alternatively, under the terms of the ordinary General Public License).\\n\"\n        + \"\\n\"\n        + \"To apply these terms, attach the following notices to the library.  It is safest to \"\n        + \"attach them to the start of each source file to most effectively convey the exclusion \"\n        + \"of warranty; and each file should have at least the \\\"copyright\\\" line and a pointer \"\n        + \"to where the full notice is found.\\n\"\n        + \"\\n\"\n        + \"<one line to give the library's name and a brief idea of what it does.>\\n\"\n        + \"Copyright (C) <year>  <name of author>\\n\"\n        + \"\\n\"\n        + \"This library is free software; you can redistribute it and/or modify it under the \"\n        + \"terms of the GNU Lesser General Public License as published by the Free Software \"\n        + \"Foundation; either version 2.1 of the License, or (at your option) any later version.\\n\"\n        + \"\\n\"\n        + \"This library is distributed in the hope that it will be useful, but WITHOUT ANY \"\n        + \"WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A \"\n        + \"PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.\\n\"\n        + \"\\n\"\n        + \"You should have received a copy of the GNU Lesser General Public License along with \"\n        + \"this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, \"\n        + \"Suite 330, Boston, MA  02111-1307  USA\\n\"\n        + \"\\n\"\n        + \"Also add information on how to contact you by electronic and paper mail.\\n\"\n        + \"\\n\"\n        + \"You should also get your employer (if you work as a programmer) or your school, if \"\n        + \"any, to sign a \\\"copyright disclaimer\\\" for the library, if necessary.  Here is a \"\n        + \"sample; alter the names:\\n\"\n        + \"\\n\"\n        + \"Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a \"\n        + \"library for tweaking knobs) written by James Random Hacker.\\n\"\n        + \"\\n\"\n        + \"<signature of Ty Coon>, 1 April 1990\\n\"\n        + \"Ty Coon, President of Vice\\n\"\n        + \"\\n\"\n        + \"That's all there is to it!\\n\";",
        "begin_line": 359,
        "end_line": 790,
        "comment": " The GNU Lesser General Public Licence. "
    },
    {
        "class_name": "org.jfree.chart.ui.Licences",
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "signature": "org.jfree.chart.ui.Licences.singleton",
        "snippet": "    private static Licences singleton;",
        "begin_line": 793,
        "end_line": 793,
        "comment": " The singleton instance of this class. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5886554608114265863L;",
        "begin_line": 134,
        "end_line": 134,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.DEFAULT_AXIS_MARGIN",
        "snippet": "    public static final double DEFAULT_AXIS_MARGIN = 0.05;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " \r\n     * The default margin for the axis (used for both lower and upper margins).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.DEFAULT_CATEGORY_MARGIN",
        "snippet": "    public static final double DEFAULT_CATEGORY_MARGIN = 0.20;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " \r\n     * The default margin between categories (a percentage of the overall axis\r\n     * length). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.lowerMargin",
        "snippet": "    private double lowerMargin;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The amount of space reserved at the start of the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.upperMargin",
        "snippet": "    private double upperMargin;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The amount of space reserved at the end of the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryMargin",
        "snippet": "    private double categoryMargin;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " The amount of space reserved between categories. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.maximumCategoryLabelLines",
        "snippet": "    private int maximumCategoryLabelLines;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " The maximum number of lines for category labels. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.maximumCategoryLabelWidthRatio",
        "snippet": "    private float maximumCategoryLabelWidthRatio;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " \r\n     * A ratio that is multiplied by the width of one category to determine the \r\n     * maximum label width. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryLabelPositionOffset",
        "snippet": "    private int categoryLabelPositionOffset; ",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The category label offset. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryLabelPositions",
        "snippet": "    private CategoryLabelPositions categoryLabelPositions;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " \r\n     * A structure defining the category label positions for each axis \r\n     * location. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.tickLabelFontMap",
        "snippet": "    private Map tickLabelFontMap;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " Storage for tick label font overrides (if any). "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.tickLabelPaintMap",
        "snippet": "    private transient Map tickLabelPaintMap;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " Storage for tick label paint overrides (if any). "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "signature": "org.jfree.chart.axis.CategoryAxis.categoryLabelToolTips",
        "snippet": "    private Map categoryLabelToolTips;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " Storage for the category label tooltips (if any). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -828267569428206075L;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.ZERO",
        "snippet": "    public static final Double ZERO = new Double(0.0);",
        "begin_line": 135,
        "end_line": 135,
        "comment": " Zero represented as a <code>Double</code>. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.blue;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The default paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_OUTLINE_PAINT = Color.gray;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The default outline paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_STROKE",
        "snippet": "    public static final Stroke DEFAULT_STROKE = new BasicStroke(1.0f);",
        "begin_line": 144,
        "end_line": 144,
        "comment": " The default stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_OUTLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_OUTLINE_STROKE = new BasicStroke(1.0f);",
        "begin_line": 147,
        "end_line": 147,
        "comment": " The default outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_SHAPE",
        "snippet": "    public static final Shape DEFAULT_SHAPE \n            = new Rectangle2D.Double(-3.0, -3.0, 6.0, 6.0);",
        "begin_line": 150,
        "end_line": 151,
        "comment": " The default shape. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_VALUE_LABEL_FONT \n            = new Font(\"SansSerif\", Font.PLAIN, 10);",
        "begin_line": 154,
        "end_line": 155,
        "comment": " The default value label font. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT",
        "snippet": "    public static final Paint DEFAULT_VALUE_LABEL_PAINT = Color.black;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " The default value label paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.seriesVisibleList",
        "snippet": "    private BooleanList seriesVisibleList;",
        "begin_line": 161,
        "end_line": 161,
        "comment": " A list of flags that controls whether or not each series is visible. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseSeriesVisible",
        "snippet": "    private boolean baseSeriesVisible;",
        "begin_line": 164,
        "end_line": 164,
        "comment": " The default visibility for each series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.seriesVisibleInLegendList",
        "snippet": "    private BooleanList seriesVisibleInLegendList;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " \r\n     * A list of flags that controls whether or not each series is visible in \r\n     * the legend. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseSeriesVisibleInLegend",
        "snippet": "    private boolean baseSeriesVisibleInLegend;",
        "begin_line": 173,
        "end_line": 173,
        "comment": " The default visibility for each series in the legend. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.paintList",
        "snippet": "    private PaintList paintList;",
        "begin_line": 176,
        "end_line": 176,
        "comment": " The paint list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesPaint",
        "snippet": "    private boolean autoPopulateSeriesPaint;",
        "begin_line": 184,
        "end_line": 184,
        "comment": "\r\n     * A flag that controls whether or not the paintList is auto-populated\r\n     * in the {@link #lookupSeriesPaint(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.basePaint",
        "snippet": "    private transient Paint basePaint;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " The base paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.fillPaintList",
        "snippet": "    private PaintList fillPaintList;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " The fill paint list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesFillPaint",
        "snippet": "    private boolean autoPopulateSeriesFillPaint;",
        "begin_line": 198,
        "end_line": 198,
        "comment": "\r\n     * A flag that controls whether or not the fillPaintList is auto-populated\r\n     * in the {@link #lookupSeriesFillPaint(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseFillPaint",
        "snippet": "    private transient Paint baseFillPaint;",
        "begin_line": 201,
        "end_line": 201,
        "comment": " The base fill paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.outlinePaintList",
        "snippet": "    private PaintList outlinePaintList;",
        "begin_line": 204,
        "end_line": 204,
        "comment": " The outline paint list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesOutlinePaint",
        "snippet": "    private boolean autoPopulateSeriesOutlinePaint;",
        "begin_line": 212,
        "end_line": 212,
        "comment": "\r\n     * A flag that controls whether or not the outlinePaintList is auto-populated\r\n     * in the {@link #lookupSeriesOutlinePaint(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseOutlinePaint",
        "snippet": "    private transient Paint baseOutlinePaint;",
        "begin_line": 215,
        "end_line": 215,
        "comment": " The base outline paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.strokeList",
        "snippet": "    private StrokeList strokeList;",
        "begin_line": 218,
        "end_line": 218,
        "comment": " The stroke list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesStroke",
        "snippet": "    private boolean autoPopulateSeriesStroke;",
        "begin_line": 226,
        "end_line": 226,
        "comment": "\r\n     * A flag that controls whether or not the strokeList is auto-populated\r\n     * in the {@link #lookupSeriesStroke(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseStroke",
        "snippet": "    private transient Stroke baseStroke;",
        "begin_line": 229,
        "end_line": 229,
        "comment": " The base stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.outlineStrokeList",
        "snippet": "    private StrokeList outlineStrokeList;",
        "begin_line": 232,
        "end_line": 232,
        "comment": " The outline stroke list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseOutlineStroke",
        "snippet": "    private transient Stroke baseOutlineStroke;",
        "begin_line": 235,
        "end_line": 235,
        "comment": " The base outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesOutlineStroke",
        "snippet": "    private boolean autoPopulateSeriesOutlineStroke;",
        "begin_line": 243,
        "end_line": 243,
        "comment": "\r\n     * A flag that controls whether or not the outlineStrokeList is \r\n     * auto-populated in the {@link #lookupSeriesOutlineStroke(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.shapeList",
        "snippet": "    private ShapeList shapeList;",
        "begin_line": 246,
        "end_line": 246,
        "comment": " A shape list. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.autoPopulateSeriesShape",
        "snippet": "    private boolean autoPopulateSeriesShape;",
        "begin_line": 254,
        "end_line": 254,
        "comment": "\r\n     * A flag that controls whether or not the shapeList is auto-populated\r\n     * in the {@link #lookupSeriesShape(int)} method.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseShape",
        "snippet": "    private transient Shape baseShape;",
        "begin_line": 257,
        "end_line": 257,
        "comment": " The base shape. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelsVisibleList",
        "snippet": "    private BooleanList itemLabelsVisibleList;",
        "begin_line": 260,
        "end_line": 260,
        "comment": " Visibility of the item labels PER series. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelsVisible",
        "snippet": "    private boolean baseItemLabelsVisible;",
        "begin_line": 263,
        "end_line": 263,
        "comment": " The base item labels visible. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelFontList",
        "snippet": "    private ObjectList itemLabelFontList;",
        "begin_line": 266,
        "end_line": 266,
        "comment": " The item label font list (one font per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelFont",
        "snippet": "    private Font baseItemLabelFont;",
        "begin_line": 269,
        "end_line": 269,
        "comment": " The base item label font. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelPaintList",
        "snippet": "    private PaintList itemLabelPaintList;",
        "begin_line": 272,
        "end_line": 272,
        "comment": " The item label paint list (one paint per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseItemLabelPaint",
        "snippet": "    private transient Paint baseItemLabelPaint;",
        "begin_line": 275,
        "end_line": 275,
        "comment": " The base item label paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.positiveItemLabelPositionList",
        "snippet": "    private ObjectList positiveItemLabelPositionList;",
        "begin_line": 278,
        "end_line": 278,
        "comment": " The positive item label position (per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.basePositiveItemLabelPosition",
        "snippet": "    private ItemLabelPosition basePositiveItemLabelPosition;",
        "begin_line": 281,
        "end_line": 281,
        "comment": " The fallback positive item label position. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.negativeItemLabelPositionList",
        "snippet": "    private ObjectList negativeItemLabelPositionList;",
        "begin_line": 284,
        "end_line": 284,
        "comment": " The negative item label position (per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseNegativeItemLabelPosition",
        "snippet": "    private ItemLabelPosition baseNegativeItemLabelPosition;",
        "begin_line": 287,
        "end_line": 287,
        "comment": " The fallback negative item label position. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.itemLabelAnchorOffset",
        "snippet": "    private double itemLabelAnchorOffset = 2.0;",
        "begin_line": 290,
        "end_line": 290,
        "comment": " The item label anchor offset. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.createEntitiesList",
        "snippet": "    private BooleanList createEntitiesList;",
        "begin_line": 296,
        "end_line": 296,
        "comment": " \r\n     * Flags that control whether or not entities are generated for each \r\n     * series.  This will be overridden by 'createEntities'. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.baseCreateEntities",
        "snippet": "    private boolean baseCreateEntities;",
        "begin_line": 302,
        "end_line": 302,
        "comment": "\r\n     * The default flag that controls whether or not entities are generated.\r\n     * This flag is used when both the above flags return null. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 305,
        "end_line": 305,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.event",
        "snippet": "    private transient RendererChangeEvent event;",
        "begin_line": 308,
        "end_line": 308,
        "comment": " An event for re-use. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.ADJ",
        "snippet": "    private static final double ADJ = Math.cos(Math.PI / 6.0);",
        "begin_line": 2151,
        "end_line": 2151,
        "comment": " The adjacent offset. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.OPP",
        "snippet": "    private static final double OPP = Math.sin(Math.PI / 6.0);",
        "begin_line": 2154,
        "end_line": 2154,
        "comment": " The opposite offset. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2644010518533854633L;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_FONT",
        "snippet": "    public static final Font DEFAULT_ITEM_FONT \n        = new Font(\"SansSerif\", Font.PLAIN, 12);",
        "begin_line": 110,
        "end_line": 111,
        "comment": " The default item font. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.DEFAULT_ITEM_PAINT",
        "snippet": "    public static final Paint DEFAULT_ITEM_PAINT = Color.black;",
        "begin_line": 114,
        "end_line": 114,
        "comment": " The default item paint. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.sources",
        "snippet": "    private LegendItemSource[] sources;",
        "begin_line": 117,
        "end_line": 117,
        "comment": " The sources for legend items. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 120,
        "end_line": 120,
        "comment": " The background paint (possibly <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicEdge",
        "snippet": "    private RectangleEdge legendItemGraphicEdge;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " The edge for the legend item graphic relative to the text. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicAnchor",
        "snippet": "    private RectangleAnchor legendItemGraphicAnchor;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " The anchor point for the legend item graphic. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicLocation",
        "snippet": "    private RectangleAnchor legendItemGraphicLocation;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The legend item graphic location. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.legendItemGraphicPadding",
        "snippet": "    private RectangleInsets legendItemGraphicPadding;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The padding for the legend item graphic. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.itemFont",
        "snippet": "    private Font itemFont;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The item font. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.itemPaint",
        "snippet": "    private transient Paint itemPaint;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The item paint. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.itemLabelPadding",
        "snippet": "    private RectangleInsets itemLabelPadding;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The padding for the item labels. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.items",
        "snippet": "    private BlockContainer items;",
        "begin_line": 146,
        "end_line": 146,
        "comment": "\r\n     * A container that holds and displays the legend items.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.hLayout",
        "snippet": "    private Arrangement hLayout;",
        "begin_line": 148,
        "end_line": 148,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.vLayout",
        "snippet": "    private Arrangement vLayout;",
        "begin_line": 150,
        "end_line": 150,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.title.LegendTitle",
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "signature": "org.jfree.chart.title.LegendTitle.wrapper",
        "snippet": "    private BlockContainer wrapper;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " \r\n     * An optional container for wrapping the legend items (allows for adding\r\n     * a title or other text to the legend). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategoryToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6768806592218710764L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategoryToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT_STRING",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT_STRING \n        = \"({0}, {1}) = {2}\";",
        "begin_line": 65,
        "end_line": 66,
        "comment": " The default format string. "
    },
    {
        "class_name": "org.jfree.chart.text.TextLine",
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "signature": "org.jfree.chart.text.TextLine.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7100085690160465444L;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextLine",
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "signature": "org.jfree.chart.text.TextLine.fragments",
        "snippet": "    private List fragments;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " Storage for the text fragments that make up the line. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberTick",
        "src_path": "source/org/jfree/chart/axis/NumberTick.java",
        "signature": "org.jfree.chart.axis.NumberTick.number",
        "snippet": "    private Number number;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The number. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtTop",
        "snippet": "    private List axesAtTop;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The axes that need to be drawn at the top of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtBottom",
        "snippet": "    private List axesAtBottom;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The axes that need to be drawn at the bottom of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtLeft",
        "snippet": "    private List axesAtLeft;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The axes that need to be drawn at the left of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "signature": "org.jfree.chart.axis.AxisCollection.axesAtRight",
        "snippet": "    private List axesAtRight;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The axes that need to be drawn at the right of the plot area. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeVisible",
        "snippet": "    private boolean shapeVisible;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " \r\n     * A flag that controls whether or not the shape is visible - see also \r\n     * lineVisible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shape",
        "snippet": "    private transient Shape shape;",
        "begin_line": 96,
        "end_line": 96,
        "comment": " \r\n     * The shape to display.  To allow for accurate positioning, the center\r\n     * of the shape should be at (0, 0). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeLocation",
        "snippet": "    private RectangleAnchor shapeLocation;",
        "begin_line": 101,
        "end_line": 101,
        "comment": "\r\n     * Defines the location within the block to which the shape will be aligned.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeAnchor",
        "snippet": "    private RectangleAnchor shapeAnchor;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " \r\n     * Defines the point on the shape's bounding rectangle that will be \r\n     * aligned to the drawing location when the shape is rendered.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeFilled",
        "snippet": "    private boolean shapeFilled;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " A flag that controls whether or not the shape is filled. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The fill paint for the shape. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.fillPaintTransformer",
        "snippet": "    private GradientPaintTransformer fillPaintTransformer;",
        "begin_line": 121,
        "end_line": 121,
        "comment": "\r\n     * The fill paint transformer (used if the fillPaint is an instance of\r\n     * GradientPaint).\r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.shapeOutlineVisible",
        "snippet": "    private boolean shapeOutlineVisible;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " A flag that controls whether or not the shape outline is visible. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " The outline paint for the shape. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 130,
        "end_line": 130,
        "comment": " The outline stroke for the shape. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.lineVisible",
        "snippet": "    private boolean lineVisible;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " \r\n     * A flag that controls whether or not the line is visible - see also \r\n     * shapeVisible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.line",
        "snippet": "    private transient Shape line;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " The line. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.lineStroke",
        "snippet": "    private transient Stroke lineStroke;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " The line stroke. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "signature": "org.jfree.chart.title.LegendGraphic.linePaint",
        "snippet": "    private transient Paint linePaint;",
        "begin_line": 145,
        "end_line": 145,
        "comment": " The line paint. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8331561784933982450L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.VERTICAL",
        "snippet": "    public static final GradientPaintTransformType VERTICAL \n        = new GradientPaintTransformType(\"GradientPaintTransformType.VERTICAL\");",
        "begin_line": 58,
        "end_line": 59,
        "comment": " Vertical. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.HORIZONTAL",
        "snippet": "    public static final GradientPaintTransformType HORIZONTAL \n        = new GradientPaintTransformType(\n                \"GradientPaintTransformType.HORIZONTAL\");",
        "begin_line": 62,
        "end_line": 64,
        "comment": " Horizontal. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.CENTER_VERTICAL",
        "snippet": "    public static final GradientPaintTransformType CENTER_VERTICAL \n        = new GradientPaintTransformType(\n                \"GradientPaintTransformType.CENTER_VERTICAL\");",
        "begin_line": 67,
        "end_line": 69,
        "comment": " Center/vertical. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.CENTER_HORIZONTAL",
        "snippet": "    public static final GradientPaintTransformType CENTER_HORIZONTAL \n        = new GradientPaintTransformType(\n                \"GradientPaintTransformType.CENTER_HORIZONTAL\");",
        "begin_line": 72,
        "end_line": 74,
        "comment": " Center/horizontal. "
    },
    {
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.name",
        "snippet": "    private String name;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2508771828190337782L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.HORIZONTAL",
        "snippet": "    public static final PlotOrientation HORIZONTAL\n        = new PlotOrientation(\"PlotOrientation.HORIZONTAL\");",
        "begin_line": 58,
        "end_line": 59,
        "comment": " For a plot where the range axis is horizontal. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.VERTICAL",
        "snippet": "    public static final PlotOrientation VERTICAL\n        = new PlotOrientation(\"PlotOrientation.VERTICAL\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " For a plot where the range axis is vertical. "
    },
    {
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "signature": "org.jfree.chart.plot.PlotOrientation.name",
        "snippet": "    private String name;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7789833772597351595L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.DEFAULT_INITIAL_CAPACITY",
        "snippet": "    public static final int DEFAULT_INITIAL_CAPACITY = 8;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The default initial capacity of the list. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.objects",
        "snippet": "    private transient Object[] objects;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " Storage for the objects. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.size",
        "snippet": "    private int size = 0;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The current list size. "
    },
    {
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "signature": "org.jfree.chart.util.AbstractObjectList.increment",
        "snippet": "    private int increment = DEFAULT_INITIAL_CAPACITY;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The default increment. "
    },
    {
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "signature": "org.jfree.data.time.SimpleTimePeriod.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8684672361131829554L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "signature": "org.jfree.data.time.SimpleTimePeriod.start",
        "snippet": "    private Date start;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The start date/time. "
    },
    {
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "signature": "org.jfree.data.time.SimpleTimePeriod.end",
        "snippet": "    private Date end;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The end date/time. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1233101616128695658L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.CENTER",
        "snippet": "    public static final ItemLabelAnchor CENTER \n        = new ItemLabelAnchor(\"ItemLabelAnchor.CENTER\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " CENTER. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE1",
        "snippet": "    public static final ItemLabelAnchor INSIDE1 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE1\");",
        "begin_line": 66,
        "end_line": 67,
        "comment": " INSIDE1. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE2",
        "snippet": "    public static final ItemLabelAnchor INSIDE2 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE2\");",
        "begin_line": 70,
        "end_line": 71,
        "comment": " INSIDE2. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE3",
        "snippet": "    public static final ItemLabelAnchor INSIDE3 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE3\");",
        "begin_line": 74,
        "end_line": 75,
        "comment": " INSIDE3. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE4",
        "snippet": "    public static final ItemLabelAnchor INSIDE4 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE4\");",
        "begin_line": 78,
        "end_line": 79,
        "comment": " INSIDE4. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE5",
        "snippet": "    public static final ItemLabelAnchor INSIDE5 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE5\");",
        "begin_line": 82,
        "end_line": 83,
        "comment": " INSIDE5. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE6",
        "snippet": "    public static final ItemLabelAnchor INSIDE6 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE6\");",
        "begin_line": 86,
        "end_line": 87,
        "comment": " INSIDE6. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE7",
        "snippet": "    public static final ItemLabelAnchor INSIDE7 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE7\");",
        "begin_line": 90,
        "end_line": 91,
        "comment": " INSIDE7. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE8",
        "snippet": "    public static final ItemLabelAnchor INSIDE8 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE8\");",
        "begin_line": 94,
        "end_line": 95,
        "comment": " INSIDE8. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE9",
        "snippet": "    public static final ItemLabelAnchor INSIDE9 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE9\");",
        "begin_line": 98,
        "end_line": 99,
        "comment": " INSIDE9. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE10",
        "snippet": "    public static final ItemLabelAnchor INSIDE10 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE10\");",
        "begin_line": 102,
        "end_line": 103,
        "comment": " INSIDE10. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE11",
        "snippet": "    public static final ItemLabelAnchor INSIDE11 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE11\");",
        "begin_line": 106,
        "end_line": 107,
        "comment": " INSIDE11. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.INSIDE12",
        "snippet": "    public static final ItemLabelAnchor INSIDE12 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.INSIDE12\");",
        "begin_line": 110,
        "end_line": 111,
        "comment": " INSIDE12. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE1",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE1 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE1\");",
        "begin_line": 114,
        "end_line": 115,
        "comment": " OUTSIDE1. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE2",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE2 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE2\");",
        "begin_line": 118,
        "end_line": 119,
        "comment": " OUTSIDE2. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE3",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE3 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE3\");",
        "begin_line": 122,
        "end_line": 123,
        "comment": " OUTSIDE3. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE4",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE4 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE4\");",
        "begin_line": 126,
        "end_line": 127,
        "comment": " OUTSIDE4. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE5",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE5 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE5\");",
        "begin_line": 130,
        "end_line": 131,
        "comment": " OUTSIDE5. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE6",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE6 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE6\");",
        "begin_line": 134,
        "end_line": 135,
        "comment": " OUTSIDE6. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE7",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE7 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE7\");",
        "begin_line": 138,
        "end_line": 139,
        "comment": " OUTSIDE7. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE8",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE8 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE8\");",
        "begin_line": 142,
        "end_line": 143,
        "comment": " OUTSIDE8. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE9",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE9 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE9\");",
        "begin_line": 146,
        "end_line": 147,
        "comment": " OUTSIDE9. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE10",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE10 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE10\");",
        "begin_line": 150,
        "end_line": 151,
        "comment": " OUTSIDE10. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE11",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE11 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE11\");",
        "begin_line": 154,
        "end_line": 155,
        "comment": " OUTSIDE11. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.OUTSIDE12",
        "snippet": "    public static final ItemLabelAnchor OUTSIDE12 \n        = new ItemLabelAnchor(\"ItemLabelAnchor.OUTSIDE12\");",
        "begin_line": 158,
        "end_line": 159,
        "comment": " OUTSIDE12. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisState",
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "signature": "org.jfree.chart.axis.AxisState.cursor",
        "snippet": "    private double cursor;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The cursor position. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisState",
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "signature": "org.jfree.chart.axis.AxisState.ticks",
        "snippet": "    private List ticks;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The axis ticks. "
    },
    {
        "class_name": "org.jfree.chart.axis.AxisState",
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "signature": "org.jfree.chart.axis.AxisState.max",
        "snippet": "    private double max;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The maximum width/height. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7289292157229621901L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.YEAR",
        "snippet": "    public static final int YEAR = 0;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " A constant for years. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.MONTH",
        "snippet": "    public static final int MONTH = 1;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " A constant for months. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.DAY",
        "snippet": "    public static final int DAY = 2;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " A constant for days. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.HOUR",
        "snippet": "    public static final int HOUR = 3;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " A constant for hours. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.MINUTE",
        "snippet": "    public static final int MINUTE = 4;",
        "begin_line": 88,
        "end_line": 88,
        "comment": " A constant for minutes. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.SECOND",
        "snippet": "    public static final int SECOND = 5;",
        "begin_line": 91,
        "end_line": 91,
        "comment": " A constant for seconds. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.MILLISECOND",
        "snippet": "    public static final int MILLISECOND = 6;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " A constant for milliseconds. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.unit",
        "snippet": "    private int unit;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.count",
        "snippet": "    private int count;",
        "begin_line": 100,
        "end_line": 100,
        "comment": " The unit count. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.rollUnit",
        "snippet": "    private int rollUnit;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " The roll unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.rollCount",
        "snippet": "    private int rollCount;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " The roll count. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.formatter",
        "snippet": "    private DateFormat formatter;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The date formatter. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "signature": "org.jfree.chart.axis.DateTickUnit.units",
        "snippet": "    private static final String[] units = {\"YEAR\", \"MONTH\", \"DAY\", \"HOUR\", \n            \"MINUTE\", \"SECOND\", \"MILLISECOND\"};",
        "begin_line": 425,
        "end_line": 426,
        "comment": "\r\n     * Strings for use by the toString() method.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5315388482898581555L;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.horizontalAlignment",
        "snippet": "    private HorizontalAlignment horizontalAlignment;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The horizontal alignment of blocks. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.verticalAlignment",
        "snippet": "    private VerticalAlignment verticalAlignment;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The vertical alignment of blocks within each row. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.horizontalGap",
        "snippet": "    private double horizontalGap;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The horizontal gap between columns. "
    },
    {
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "signature": "org.jfree.chart.block.ColumnArrangement.verticalGap",
        "snippet": "    private double verticalGap;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The vertical gap between items in a column. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -9073319010650549239L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.FULL",
        "snippet": "    public static final RangeType FULL = new RangeType(\"RangeType.FULL\");",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Full range (positive and negative). "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.POSITIVE",
        "snippet": "    public static final RangeType POSITIVE \n        = new RangeType(\"RangeType.POSITIVE\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Positive range. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.NEGATIVE",
        "snippet": "    public static final RangeType NEGATIVE \n        = new RangeType(\"RangeType.NEGATIVE\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " Negative range. "
    },
    {
        "class_name": "org.jfree.data.RangeType",
        "src_path": "source/org/jfree/data/RangeType.java",
        "signature": "org.jfree.data.RangeType.name",
        "snippet": "    private String name;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.name",
        "snippet": "    private String name;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.version",
        "snippet": "    private String version;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The version. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.licenceName",
        "snippet": "    private String licenceName;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The licenceName. "
    },
    {
        "class_name": "org.jfree.chart.ui.Library",
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "signature": "org.jfree.chart.ui.Library.info",
        "snippet": "    private String info;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The version. "
    },
    {
        "class_name": "org.jfree.chart.event.TitleChangeEvent",
        "src_path": "source/org/jfree/chart/event/TitleChangeEvent.java",
        "signature": "org.jfree.chart.event.TitleChangeEvent.title",
        "snippet": "    private Title title;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The chart title that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.event.MarkerChangeEvent",
        "src_path": "source/org/jfree/chart/event/MarkerChangeEvent.java",
        "signature": "org.jfree.chart.event.MarkerChangeEvent.marker",
        "snippet": "    private Marker marker;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The plot that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4986038395414039117L;",
        "begin_line": 94,
        "end_line": 94,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.errorIndicatorPaint",
        "snippet": "    private transient Paint errorIndicatorPaint;",
        "begin_line": 97,
        "end_line": 97,
        "comment": " The paint used to show the error indicator. "
    },
    {
        "class_name": "org.jfree.chart.ui.Contributor",
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "signature": "org.jfree.chart.ui.Contributor.name",
        "snippet": "    private String name;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.ui.Contributor",
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "signature": "org.jfree.chart.ui.Contributor.email",
        "snippet": "    private String email;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " The e-mail address. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockParams",
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "signature": "org.jfree.chart.block.BlockParams.generateEntities",
        "snippet": "    private boolean generateEntities;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " \r\n     * A flag that controls whether or not the block should generate and \r\n     * return chart entities for the items it draws.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.BlockParams",
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "signature": "org.jfree.chart.block.BlockParams.translateX",
        "snippet": "    private double translateX;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " \r\n     * The x-translation (used to enable chart entities to use global \r\n     * coordinates rather than coordinates that are local to the container\r\n     * they are within).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.BlockParams",
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "signature": "org.jfree.chart.block.BlockParams.translateY",
        "snippet": "    private double translateY;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " \r\n     * The y-translation (used to enable chart entities to use global \r\n     * coordinates rather than coordinates that are local to the container\r\n     * they are within).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "signature": "org.jfree.chart.event.ChartChangeEvent.type",
        "snippet": "    private ChartChangeEventType type;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " The type of event. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "signature": "org.jfree.chart.event.ChartChangeEvent.chart",
        "snippet": "    private JFreeChart chart;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The chart that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5832945916493247123L;",
        "begin_line": 124,
        "end_line": 124,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.renderAsPercentages",
        "snippet": "    private boolean renderAsPercentages;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " A flag that controls whether the bars display values or percentages. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTick",
        "src_path": "source/org/jfree/chart/axis/DateTick.java",
        "signature": "org.jfree.chart.axis.DateTick.date",
        "snippet": "    private Date date;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The date. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4543632485478613800L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.horizontalAlignment",
        "snippet": "    private HorizontalAlignment horizontalAlignment;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The horizontal alignment of blocks. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.verticalAlignment",
        "snippet": "    private VerticalAlignment verticalAlignment;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The vertical alignment of blocks within each row. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.horizontalGap",
        "snippet": "    private double horizontalGap;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The horizontal gap between items within rows. "
    },
    {
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "signature": "org.jfree.chart.block.FlowArrangement.verticalGap",
        "snippet": "    private double verticalGap;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The vertical gap between rows. "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.dataset",
        "snippet": "    private Dataset dataset;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " \r\n     * The dataset. \r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 81,
        "end_line": 81,
        "comment": "\r\n     * The series key.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The tool tip text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The URL text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2065799050738449903L;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.keys",
        "snippet": "    private List keys;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " \r\n     * Storage for aggregate task keys (the task description is used as the \r\n     * key). \r\n     "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.data",
        "snippet": "    private List data;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " Storage for the series. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnits",
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "signature": "org.jfree.chart.axis.TickUnits.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1134174035901467545L;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnits",
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "signature": "org.jfree.chart.axis.TickUnits.tickUnits",
        "snippet": "    private List tickUnits;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " Storage for the tick units. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5481917022435735602L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.GENERAL",
        "snippet": "    public static final ChartChangeEventType GENERAL \n        = new ChartChangeEventType(\"ChartChangeEventType.GENERAL\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " GENERAL. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.NEW_DATASET",
        "snippet": "    public static final ChartChangeEventType NEW_DATASET \n        = new ChartChangeEventType(\"ChartChangeEventType.NEW_DATASET\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " NEW_DATASET. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.DATASET_UPDATED",
        "snippet": "    public static final ChartChangeEventType DATASET_UPDATED\n        = new ChartChangeEventType(\"ChartChangeEventType.DATASET_UPDATED\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " DATASET_UPDATED. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "signature": "org.jfree.chart.event.ChartChangeEventType.name",
        "snippet": "    private String name;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -5090216912548722570L;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.month",
        "snippet": "    private int month;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The month (1-12). "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.year",
        "snippet": "    private int year;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " The year in which the month falls. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.firstMillisecond",
        "snippet": "    private long firstMillisecond;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The first millisecond. "
    },
    {
        "class_name": "org.jfree.data.time.Month",
        "src_path": "source/org/jfree/data/time/Month.java",
        "signature": "org.jfree.data.time.Month.lastMillisecond",
        "snippet": "    private long lastMillisecond;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " The last millisecond. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1156658804028142978L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.NONE",
        "snippet": "    public static final LengthConstraintType NONE \n        = new LengthConstraintType(\"LengthConstraintType.NONE\");",
        "begin_line": 57,
        "end_line": 58,
        "comment": " NONE. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.RANGE",
        "snippet": "    public static final LengthConstraintType RANGE \n        = new LengthConstraintType(\"RectangleConstraintType.RANGE\");",
        "begin_line": 61,
        "end_line": 62,
        "comment": " Range. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.FIXED",
        "snippet": "    public static final LengthConstraintType FIXED \n        = new LengthConstraintType(\"LengthConstraintType.FIXED\");",
        "begin_line": 65,
        "end_line": 66,
        "comment": " FIXED. "
    },
    {
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "signature": "org.jfree.chart.block.LengthConstraintType.name",
        "snippet": "    private String name;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.resources.DataPackageResources",
        "src_path": "source/org/jfree/data/resources/DataPackageResources.java",
        "signature": "org.jfree.data.resources.DataPackageResources.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n\n        {\"series.default-prefix\",     \"Series\"},\n        {\"categories.default-prefix\", \"Category\"},\n\n    };",
        "begin_line": 64,
        "end_line": 69,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7108591260223293197L;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.labelFormat",
        "snippet": "    private String labelFormat;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " \r\n     * The label format string used by a <code>MessageFormat</code> object to \r\n     * combine the standard items:  {0} = series name, {1} = category, \r\n     * {2} = value, {3} = value as a percentage of the column total.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.nullValueString",
        "snippet": "    private String nullValueString;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The string used to represent a null value. "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.numberFormat",
        "snippet": "    private NumberFormat numberFormat;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " \r\n     * A number formatter used to preformat the value before it is passed to \r\n     * the MessageFormat object. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.dateFormat",
        "snippet": "    private DateFormat dateFormat;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\r\n     * A date formatter used to preformat the value before it is passed to the\r\n     * MessageFormat object.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.percentFormat",
        "snippet": "    private NumberFormat percentFormat;",
        "begin_line": 96,
        "end_line": 96,
        "comment": "\r\n     * A number formatter used to preformat the percentage value before it is \r\n     * passed to the MessageFormat object.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "signature": "org.jfree.chart.axis.NumberTickUnit.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3849459506627654442L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "signature": "org.jfree.chart.axis.NumberTickUnit.formatter",
        "snippet": "    private NumberFormat formatter;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " A formatter for the tick unit. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5845390630157034499L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.itemLabelAnchor",
        "snippet": "    private ItemLabelAnchor itemLabelAnchor;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The item label anchor point. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.textAnchor",
        "snippet": "    private TextAnchor textAnchor;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " The text anchor. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.rotationAnchor",
        "snippet": "    private TextAnchor rotationAnchor;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The rotation anchor. "
    },
    {
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.angle",
        "snippet": "    private double angle;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The rotation angle. "
    },
    {
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "signature": "org.jfree.chart.plot.ValueMarker.value",
        "snippet": "    private double value;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.NONE",
        "snippet": "    public static final RectangleConstraint NONE = new RectangleConstraint(\n        0.0, null, LengthConstraintType.NONE, \n        0.0, null, LengthConstraintType.NONE\n    );",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * An instance representing no constraint. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.width",
        "snippet": "    private double width;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The width. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.widthRange",
        "snippet": "    private Range widthRange;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The width range. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.widthConstraintType",
        "snippet": "    private LengthConstraintType widthConstraintType;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The width constraint type. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.height",
        "snippet": "    private double height;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The fixed or maximum height. "
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.heightRange",
        "snippet": "    private Range heightRange;",
        "begin_line": 79,
        "end_line": 79,
        "comment": ""
    },
    {
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "signature": "org.jfree.chart.block.RectangleConstraint.heightConstraintType",
        "snippet": "    private LengthConstraintType heightConstraintType;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The constraint type. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 506071142274883745L;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.centerBlock",
        "snippet": "    private Block centerBlock;",
        "begin_line": 69,
        "end_line": 69,
        "comment": " The block (if any) at the center of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.topBlock",
        "snippet": "    private Block topBlock;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The block (if any) at the top of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.bottomBlock",
        "snippet": "    private Block bottomBlock;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The block (if any) at the bottom of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.leftBlock",
        "snippet": "    private Block leftBlock;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The block (if any) at the left of the layout. "
    },
    {
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "signature": "org.jfree.chart.block.BorderArrangement.rightBlock",
        "snippet": "    private Block rightBlock;",
        "begin_line": 81,
        "end_line": 81,
        "comment": " The block (if any) at the right of the layout. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7686976503536003636L;",
        "begin_line": 152,
        "end_line": 152,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_X_OFFSET",
        "snippet": "    public static final double DEFAULT_X_OFFSET = 12.0;",
        "begin_line": 155,
        "end_line": 155,
        "comment": " The default x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_Y_OFFSET",
        "snippet": "    public static final double DEFAULT_Y_OFFSET = 8.0;",
        "begin_line": 158,
        "end_line": 158,
        "comment": " The default y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.DEFAULT_WALL_PAINT",
        "snippet": "    public static final Paint DEFAULT_WALL_PAINT = new Color(0xDD, 0xDD, 0xDD);",
        "begin_line": 161,
        "end_line": 161,
        "comment": " The default wall paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.xOffset",
        "snippet": "    private double xOffset;",
        "begin_line": 164,
        "end_line": 164,
        "comment": " The size of x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.yOffset",
        "snippet": "    private double yOffset;",
        "begin_line": 167,
        "end_line": 167,
        "comment": " The size of y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.wallPaint",
        "snippet": "    private transient Paint wallPaint;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " The paint used to shade the left and lower 3D wall. "
    },
    {
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7413468697315721515L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.mean",
        "snippet": "    private Number mean;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " The mean. "
    },
    {
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.standardDeviation",
        "snippet": "    private Number standardDeviation;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The standard deviation. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8168173757291644622L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.data",
        "snippet": "    private DefaultKeyedValues2D data;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " A storage structure for the data. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6675162505277817221L;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_POSITION",
        "snippet": "    public static final RectangleEdge DEFAULT_POSITION = RectangleEdge.TOP;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The default title position. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_HORIZONTAL_ALIGNMENT",
        "snippet": "    public static final HorizontalAlignment \n            DEFAULT_HORIZONTAL_ALIGNMENT = HorizontalAlignment.CENTER;",
        "begin_line": 101,
        "end_line": 102,
        "comment": " The default horizontal alignment. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_VERTICAL_ALIGNMENT",
        "snippet": "    public static final VerticalAlignment \n            DEFAULT_VERTICAL_ALIGNMENT = VerticalAlignment.CENTER;",
        "begin_line": 105,
        "end_line": 106,
        "comment": " The default vertical alignment. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.DEFAULT_PADDING",
        "snippet": "    public static final RectangleInsets DEFAULT_PADDING = new RectangleInsets(\n            1, 1, 1, 1);",
        "begin_line": 109,
        "end_line": 110,
        "comment": " Default title padding. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.position",
        "snippet": "    private RectangleEdge position;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The title position. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.horizontalAlignment",
        "snippet": "    private HorizontalAlignment horizontalAlignment;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " The horizontal alignment of the title content. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.verticalAlignment",
        "snippet": "    private VerticalAlignment verticalAlignment;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " The vertical alignment of the title content. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.title.Title",
        "src_path": "source/org/jfree/chart/title/Title.java",
        "signature": "org.jfree.chart.title.Title.notify",
        "snippet": "    private boolean notify;",
        "begin_line": 127,
        "end_line": 127,
        "comment": " \r\n     * A flag that can be used to temporarily disable the listener mechanism. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -797214582948827144L;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.dataset",
        "snippet": "    private Dataset dataset;",
        "begin_line": 99,
        "end_line": 99,
        "comment": "\r\n     * The dataset.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.seriesKey",
        "snippet": "    private Comparable seriesKey;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\r\n     * The series key.\r\n     * \r\n     * @since 1.0.6\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.datasetIndex",
        "snippet": "    private int datasetIndex;",
        "begin_line": 109,
        "end_line": 109,
        "comment": " The dataset index. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.series",
        "snippet": "    private int series;",
        "begin_line": 112,
        "end_line": 112,
        "comment": " The series index. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.label",
        "snippet": "    private String label;",
        "begin_line": 115,
        "end_line": 115,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.attributedLabel",
        "snippet": "    private transient AttributedString attributedLabel;",
        "begin_line": 118,
        "end_line": 118,
        "comment": " The attributed label (if null, fall back to the regular label). "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.description",
        "snippet": "    private String description;",
        "begin_line": 123,
        "end_line": 123,
        "comment": " \r\n     * The description (not currently used - could be displayed as a tool tip). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 126,
        "end_line": 126,
        "comment": " The tool tip text. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 129,
        "end_line": 129,
        "comment": " The url text. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shapeVisible",
        "snippet": "    private boolean shapeVisible;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " A flag that controls whether or not the shape is visible. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shape",
        "snippet": "    private transient Shape shape;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The shape. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shapeFilled",
        "snippet": "    private boolean shapeFilled;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " A flag that controls whether or not the shape is filled. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.fillPaint",
        "snippet": "    private transient Paint fillPaint;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.fillPaintTransformer",
        "snippet": "    private GradientPaintTransformer fillPaintTransformer;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " \r\n     * A gradient paint transformer. \r\n     * \r\n     * @since 1.0.4\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.shapeOutlineVisible",
        "snippet": "    private boolean shapeOutlineVisible;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " A flag that controls whether or not the shape outline is visible. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " The outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.lineVisible",
        "snippet": "    private boolean lineVisible;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " A flag that controls whether or not the line is visible. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.line",
        "snippet": "    private transient Shape line;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " The line. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.lineStroke",
        "snippet": "    private transient Stroke lineStroke;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The stroke. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.linePaint",
        "snippet": "    private transient Paint linePaint;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " The line paint. "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.UNUSED_SHAPE",
        "snippet": "    private static final Shape UNUSED_SHAPE = new Line2D.Float();",
        "begin_line": 175,
        "end_line": 175,
        "comment": "\r\n     * The shape must be non-null for a LegendItem - if no shape is required,\r\n     * use this.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.LegendItem",
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "signature": "org.jfree.chart.LegendItem.UNUSED_STROKE",
        "snippet": "    private static final Stroke UNUSED_STROKE = new BasicStroke(0.0f);",
        "begin_line": 181,
        "end_line": 181,
        "comment": "\r\n     * The stroke must be non-null for a LegendItem - if no stroke is required,\r\n     * use this.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1762344775267627916L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.startValue",
        "snippet": "    private double startValue;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The start value. "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.endValue",
        "snippet": "    private double endValue;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " The end value. "
    },
    {
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "signature": "org.jfree.chart.plot.IntervalMarker.gradientPaintTransformer",
        "snippet": "    private GradientPaintTransformer gradientPaintTransformer;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The gradient paint transformer (optional). "
    },
    {
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "signature": "org.jfree.chart.event.PlotChangeEvent.plot",
        "snippet": "    private Plot plot;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The plot that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.text",
        "snippet": "    private String text;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " \r\n     * The text for the label - retained in case the label needs \r\n     * regenerating (for example, to change the font). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.label",
        "snippet": "    private TextBlock label;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.font",
        "snippet": "    private Font font;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " The font. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The tool tip text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The URL text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.DEFAULT_PAINT",
        "snippet": "    public static final Paint DEFAULT_PAINT = Color.black;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The default color. "
    },
    {
        "class_name": "org.jfree.chart.block.LabelBlock",
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "signature": "org.jfree.chart.block.LabelBlock.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1902273207559319996L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.ZERO_INSETS",
        "snippet": "    public static final RectangleInsets ZERO_INSETS = new RectangleInsets(\n            UnitType.ABSOLUTE, 0.0, 0.0, 0.0, 0.0);",
        "begin_line": 42,
        "end_line": 43,
        "comment": "\n     * A useful constant representing zero insets.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.unitType",
        "snippet": "    private UnitType unitType;",
        "begin_line": 46,
        "end_line": 46,
        "comment": " Absolute or relative units. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.top",
        "snippet": "    private double top;",
        "begin_line": 49,
        "end_line": 49,
        "comment": " The top insets. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.left",
        "snippet": "    private double left;",
        "begin_line": 52,
        "end_line": 52,
        "comment": " The left insets. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.bottom",
        "snippet": "    private double bottom;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The bottom insets. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "signature": "org.jfree.chart.util.RectangleInsets.right",
        "snippet": "    private double right;",
        "begin_line": 58,
        "end_line": 58,
        "comment": " The right insets. "
    },
    {
        "class_name": "org.jfree.data.general.AbstractDataset",
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "signature": "org.jfree.data.general.AbstractDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1918768939869230744L;",
        "begin_line": 84,
        "end_line": 84,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.AbstractDataset",
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "signature": "org.jfree.data.general.AbstractDataset.group",
        "snippet": "    private DatasetGroup group;",
        "begin_line": 87,
        "end_line": 87,
        "comment": " The group that the dataset belongs to. "
    },
    {
        "class_name": "org.jfree.data.general.AbstractDataset",
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "signature": "org.jfree.data.general.AbstractDataset.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 6531925392288519884L;    ",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.ABSOLUTE",
        "snippet": "    public static final UnitType ABSOLUTE = new UnitType(\"UnitType.ABSOLUTE\");",
        "begin_line": 58,
        "end_line": 58,
        "comment": " Absolute. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.RELATIVE",
        "snippet": "    public static final UnitType RELATIVE = new UnitType(\"UnitType.RELATIVE\");",
        "begin_line": 61,
        "end_line": 61,
        "comment": " Relative. "
    },
    {
        "class_name": "org.jfree.chart.util.UnitType",
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "signature": "org.jfree.chart.util.UnitType.name",
        "snippet": "    private String name;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "signature": "org.jfree.data.general.SeriesChangeEvent.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1593866085210089052L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2276668053074881909L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.prefix",
        "snippet": "    private String prefix = \"index.html\";",
        "begin_line": 79,
        "end_line": 79,
        "comment": " Prefix to the URL "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.seriesParameterName",
        "snippet": "    private String seriesParameterName = \"series\";",
        "begin_line": 82,
        "end_line": 82,
        "comment": " Series parameter name to go in each URL "
    },
    {
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.categoryParameterName",
        "snippet": "    private String categoryParameterName = \"category\";",
        "begin_line": 85,
        "end_line": 85,
        "comment": " Category parameter name to go in each URL "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7272397034325429853L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.TOP",
        "snippet": "    public static final VerticalAlignment TOP \n            = new VerticalAlignment(\"VerticalAlignment.TOP\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Top alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.BOTTOM",
        "snippet": "    public static final VerticalAlignment BOTTOM \n            = new VerticalAlignment(\"VerticalAlignment.BOTTOM\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Bottom alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.CENTER",
        "snippet": "    public static final VerticalAlignment CENTER \n            = new VerticalAlignment(\"VerticalAlignment.CENTER\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": " Center alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "signature": "org.jfree.chart.util.VerticalAlignment.name",
        "snippet": "    private String name;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3470703747817429120L;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.INFO",
        "snippet": "    public static final ProjectInfo INFO = new JFreeChartInfo();",
        "begin_line": 242,
        "end_line": 242,
        "comment": " Information about the project. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_TITLE_FONT",
        "snippet": "    public static final Font DEFAULT_TITLE_FONT \n            = new Font(\"SansSerif\", Font.BOLD, 18);",
        "begin_line": 245,
        "end_line": 246,
        "comment": " The default font for titles. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_PAINT",
        "snippet": "    public static final Paint DEFAULT_BACKGROUND_PAINT \n            = UIManager.getColor(\"Panel.background\");",
        "begin_line": 249,
        "end_line": 250,
        "comment": " The default background color. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE",
        "snippet": "    public static final Image DEFAULT_BACKGROUND_IMAGE = null;",
        "begin_line": 253,
        "end_line": 253,
        "comment": " The default background image. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALIGNMENT",
        "snippet": "    public static final int DEFAULT_BACKGROUND_IMAGE_ALIGNMENT = Align.FIT;",
        "begin_line": 256,
        "end_line": 256,
        "comment": " The default background image alignment. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.DEFAULT_BACKGROUND_IMAGE_ALPHA",
        "snippet": "    public static final float DEFAULT_BACKGROUND_IMAGE_ALPHA = 0.5f;",
        "begin_line": 259,
        "end_line": 259,
        "comment": " The default background image alpha. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.renderingHints",
        "snippet": "    private transient RenderingHints renderingHints;",
        "begin_line": 265,
        "end_line": 265,
        "comment": " \r\n     * Rendering hints that will be used for chart drawing.  This should never\r\n     * be <code>null</code>. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.borderVisible",
        "snippet": "    private boolean borderVisible;",
        "begin_line": 268,
        "end_line": 268,
        "comment": " A flag that controls whether or not the chart border is drawn. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.borderStroke",
        "snippet": "    private transient Stroke borderStroke;",
        "begin_line": 271,
        "end_line": 271,
        "comment": " The stroke used to draw the chart border (if visible). "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.borderPaint",
        "snippet": "    private transient Paint borderPaint;",
        "begin_line": 274,
        "end_line": 274,
        "comment": " The paint used to draw the chart border (if visible). "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.padding",
        "snippet": "    private RectangleInsets padding;",
        "begin_line": 277,
        "end_line": 277,
        "comment": " The padding between the chart border and the chart drawing area. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.title",
        "snippet": "    private TextTitle title;",
        "begin_line": 280,
        "end_line": 280,
        "comment": " The chart title (optional). "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.subtitles",
        "snippet": "    private List subtitles;",
        "begin_line": 286,
        "end_line": 286,
        "comment": " \r\n     * The chart subtitles (zero, one or many).  This field should never be\r\n     * <code>null</code>.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.plot",
        "snippet": "    private Plot plot;",
        "begin_line": 289,
        "end_line": 289,
        "comment": " Draws the visual representation of the data. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " Paint used to draw the background of the chart. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundImage",
        "snippet": "    private transient Image backgroundImage;  // todo: not serialized yet",
        "begin_line": 295,
        "end_line": 295,
        "comment": " todo: not serialized yet"
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundImageAlignment",
        "snippet": "    private int backgroundImageAlignment = Align.FIT;",
        "begin_line": 298,
        "end_line": 298,
        "comment": " The alignment for the background image. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.backgroundImageAlpha",
        "snippet": "    private float backgroundImageAlpha = 0.5f;",
        "begin_line": 301,
        "end_line": 301,
        "comment": " The alpha transparency for the background image. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.changeListeners",
        "snippet": "    private transient EventListenerList changeListeners;",
        "begin_line": 304,
        "end_line": 304,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.progressListeners",
        "snippet": "    private transient EventListenerList progressListeners;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Storage for registered progress listeners. "
    },
    {
        "class_name": "org.jfree.chart.JFreeChart",
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "signature": "org.jfree.chart.JFreeChart.notify",
        "snippet": "    private boolean notify;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " \r\n     * A flag that can be used to enable/disable notification of chart change \r\n     * events. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -734389651405327166L;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.outlinePaint",
        "snippet": "    private transient Paint outlinePaint;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The outline paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.outlineStroke",
        "snippet": "    private transient Stroke outlineStroke;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The outline stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.alpha",
        "snippet": "    private float alpha;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The alpha transparency. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.label",
        "snippet": "    private String label = null;",
        "begin_line": 116,
        "end_line": 116,
        "comment": " The label. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelFont",
        "snippet": "    private Font labelFont;",
        "begin_line": 119,
        "end_line": 119,
        "comment": " The label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelPaint",
        "snippet": "    private transient Paint labelPaint;",
        "begin_line": 122,
        "end_line": 122,
        "comment": " The label paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelAnchor",
        "snippet": "    private RectangleAnchor labelAnchor;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " The label position. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelTextAnchor",
        "snippet": "    private TextAnchor labelTextAnchor;",
        "begin_line": 128,
        "end_line": 128,
        "comment": " The text anchor for the label. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelOffset",
        "snippet": "    private RectangleInsets labelOffset;",
        "begin_line": 131,
        "end_line": 131,
        "comment": " The label offset from the marker rectangle. "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.labelOffsetType",
        "snippet": "    private LengthAdjustmentType labelOffsetType;",
        "begin_line": 136,
        "end_line": 136,
        "comment": " \r\n     * The offset type for the domain or range axis (never <code>null</code>). \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.Marker",
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "signature": "org.jfree.chart.plot.Marker.listenerList",
        "snippet": "    private transient EventListenerList listenerList;",
        "begin_line": 139,
        "end_line": 139,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8372008692127477443L;",
        "begin_line": 125,
        "end_line": 125,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.DEFAULT_FONT",
        "snippet": "    public static final Font DEFAULT_FONT = new Font(\"SansSerif\", Font.BOLD, \n            12);",
        "begin_line": 128,
        "end_line": 129,
        "comment": " The default font. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.DEFAULT_TEXT_PAINT",
        "snippet": "    public static final Paint DEFAULT_TEXT_PAINT = Color.black;",
        "begin_line": 132,
        "end_line": 132,
        "comment": " The default text color. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.text",
        "snippet": "    private String text;",
        "begin_line": 135,
        "end_line": 135,
        "comment": " The title text. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.font",
        "snippet": "    private Font font;",
        "begin_line": 138,
        "end_line": 138,
        "comment": " The font used to display the title. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.textAlignment",
        "snippet": "    private HorizontalAlignment textAlignment;",
        "begin_line": 141,
        "end_line": 141,
        "comment": " The text alignment. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 144,
        "end_line": 144,
        "comment": " The paint used to display the title text. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.backgroundPaint",
        "snippet": "    private transient Paint backgroundPaint;",
        "begin_line": 147,
        "end_line": 147,
        "comment": " The background paint. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.toolTipText",
        "snippet": "    private String toolTipText;",
        "begin_line": 150,
        "end_line": 150,
        "comment": " The tool tip text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.urlText",
        "snippet": "    private String urlText;",
        "begin_line": 153,
        "end_line": 153,
        "comment": " The URL text (can be <code>null</code>). "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.content",
        "snippet": "    private TextBlock content;",
        "begin_line": 156,
        "end_line": 156,
        "comment": " The content. "
    },
    {
        "class_name": "org.jfree.chart.title.TextTitle",
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "signature": "org.jfree.chart.title.TextTitle.expandToFitSpace",
        "snippet": "    private boolean expandToFitSpace = false;",
        "begin_line": 162,
        "end_line": 162,
        "comment": " \r\n     * A flag that controls whether the title expands to fit the available\r\n     * space..\r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1247553218442497391L;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.plot",
        "snippet": "    private CategoryPlot plot;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The plot that the renderer is assigned to. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.itemLabelGeneratorList",
        "snippet": "    private ObjectList itemLabelGeneratorList;",
        "begin_line": 169,
        "end_line": 169,
        "comment": " A list of item label generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.baseItemLabelGenerator",
        "snippet": "    private CategoryItemLabelGenerator baseItemLabelGenerator;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " The base item label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.toolTipGeneratorList",
        "snippet": "    private ObjectList toolTipGeneratorList;",
        "begin_line": 175,
        "end_line": 175,
        "comment": " A list of tool tip generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.baseToolTipGenerator",
        "snippet": "    private CategoryToolTipGenerator baseToolTipGenerator;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " The base tool tip generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.urlGeneratorList",
        "snippet": "    private ObjectList urlGeneratorList;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " A list of label generators (one per series). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.baseURLGenerator",
        "snippet": "    private CategoryURLGenerator baseURLGenerator;",
        "begin_line": 184,
        "end_line": 184,
        "comment": " The base label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.legendItemLabelGenerator",
        "snippet": "    private CategorySeriesLabelGenerator legendItemLabelGenerator;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " The legend item label generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.legendItemToolTipGenerator",
        "snippet": "    private CategorySeriesLabelGenerator legendItemToolTipGenerator;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " The legend item tool tip generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.legendItemURLGenerator",
        "snippet": "    private CategorySeriesLabelGenerator legendItemURLGenerator;",
        "begin_line": 193,
        "end_line": 193,
        "comment": " The legend item URL generator. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.rowCount",
        "snippet": "    private transient int rowCount;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " The number of rows in the dataset (temporary record). "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.columnCount",
        "snippet": "    private transient int columnCount;",
        "begin_line": 199,
        "end_line": 199,
        "comment": " The number of columns in the dataset (temporary record). "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 7689852412141274563L;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.id",
        "snippet": "    private String id;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The id for the block. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.margin",
        "snippet": "    private RectangleInsets margin;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The margin around the outside of the block. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.frame",
        "snippet": "    private BlockFrame frame;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " The frame (or border) for the block. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.padding",
        "snippet": "    private RectangleInsets padding;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " The padding between the block content and the border. "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.width",
        "snippet": "    private double width;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " \r\n     * The natural width of the block (may be overridden if there are \r\n     * constraints in sizing).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.height",
        "snippet": "    private double height;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " \r\n     * The natural height of the block (may be overridden if there are \r\n     * constraints in sizing).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "signature": "org.jfree.chart.block.AbstractBlock.bounds",
        "snippet": "    private transient Rectangle2D bounds;",
        "begin_line": 106,
        "end_line": 106,
        "comment": "\r\n     * The current bounds for the block (position of the block in Java2D space).\r\n     "
    },
    {
        "class_name": "org.jfree.data.gantt.TaskSeries",
        "src_path": "source/org/jfree/data/gantt/TaskSeries.java",
        "signature": "org.jfree.data.gantt.TaskSeries.tasks",
        "snippet": "    private List tasks;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " Storage for the tasks in the series. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockContainer",
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "signature": "org.jfree.chart.block.BlockContainer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 8199508075695195293L;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockContainer",
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "signature": "org.jfree.chart.block.BlockContainer.blocks",
        "snippet": "    private List blocks;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The blocks within the container. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockContainer",
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "signature": "org.jfree.chart.block.BlockContainer.arrangement",
        "snippet": "    private Arrangement arrangement;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The object responsible for laying out the blocks. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.DRAWING_STARTED",
        "snippet": "    public static final int DRAWING_STARTED = 1;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " Indicates drawing has started. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.DRAWING_FINISHED",
        "snippet": "    public static final int DRAWING_FINISHED = 2;",
        "begin_line": 57,
        "end_line": 57,
        "comment": " Indicates drawing has finished. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.type",
        "snippet": "    private int type;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " The type of event. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.percent",
        "snippet": "    private int percent;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The percentage of completion. "
    },
    {
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "signature": "org.jfree.chart.event.ChartProgressEvent.chart",
        "snippet": "    private JFreeChart chart;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The chart that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueTick",
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "signature": "org.jfree.chart.axis.ValueTick.value",
        "snippet": "    private double value;",
        "begin_line": 53,
        "end_line": 53,
        "comment": " The value. "
    },
    {
        "class_name": "org.jfree.chart.text.TextUtilities",
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "signature": "org.jfree.chart.text.TextUtilities.useDrawRotatedStringWorkaround",
        "snippet": "    private static boolean useDrawRotatedStringWorkaround;",
        "begin_line": 84,
        "end_line": 84,
        "comment": "\n     * A flag that controls whether or not the rotated string workaround is\n     * used.\n     "
    },
    {
        "class_name": "org.jfree.chart.text.TextUtilities",
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "signature": "org.jfree.chart.text.TextUtilities.useFontMetricsGetStringBounds",
        "snippet": "    private static boolean useFontMetricsGetStringBounds;",
        "begin_line": 90,
        "end_line": 90,
        "comment": "\n     * A flag that controls whether the FontMetrics.getStringBounds() method\n     * is used or a workaround is applied.\n     "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6097408511380545010L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.NO_CHANGE",
        "snippet": "    public static final LengthAdjustmentType NO_CHANGE \n            = new LengthAdjustmentType(\"NO_CHANGE\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " NO_CHANGE. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.EXPAND",
        "snippet": "    public static final LengthAdjustmentType EXPAND \n            = new LengthAdjustmentType(\"EXPAND\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " EXPAND. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.CONTRACT",
        "snippet": "    public static final LengthAdjustmentType CONTRACT \n            = new LengthAdjustmentType(\"CONTRACT\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": " CONTRACT. "
    },
    {
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.name",
        "snippet": "    private String name;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AreaRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -4231878281385812757L;",
        "begin_line": 103,
        "end_line": 103,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.AreaRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/AreaRenderer.java",
        "signature": "org.jfree.chart.renderer.category.AreaRenderer.endType",
        "snippet": "    private AreaRendererEndType endType;",
        "begin_line": 106,
        "end_line": 106,
        "comment": " A flag that controls how the ends of the areas are drawn. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2725921399005922939L;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.seriesToGroupMap",
        "snippet": "    private KeyToGroupMap seriesToGroupMap;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " A map used to assign each series to a group. "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -600593412366385072L;    ",
        "begin_line": 57,
        "end_line": 57,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.FORWARD",
        "snippet": "    public static final DatasetRenderingOrder FORWARD\n        = new DatasetRenderingOrder(\"DatasetRenderingOrder.FORWARD\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " \r\n     * Render datasets in the order 0, 1, 2, ..., N-1, where N is the number \r\n     * of datasets. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.REVERSE",
        "snippet": "    public static final DatasetRenderingOrder REVERSE\n        = new DatasetRenderingOrder(\"DatasetRenderingOrder.REVERSE\");",
        "begin_line": 70,
        "end_line": 71,
        "comment": " \r\n     * Render datasets in the order N-1, N-2, ..., 2, 1, 0, where N is the \r\n     * number of datasets. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.name",
        "snippet": "    private String name;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1774146392916359839L;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.TAPER",
        "snippet": "    public static final AreaRendererEndType TAPER = new AreaRendererEndType(\n        \"AreaRendererEndType.TAPER\"\n    );",
        "begin_line": 59,
        "end_line": 61,
        "comment": " \r\n     * The area tapers from the first or last value down to zero. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.TRUNCATE",
        "snippet": "    public static final AreaRendererEndType TRUNCATE = new AreaRendererEndType(\n        \"AreaRendererEndType.TRUNCATE\"\n    );",
        "begin_line": 66,
        "end_line": 68,
        "comment": " \r\n     * The area is truncated at the first or last value. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.LEVEL",
        "snippet": "    public static final AreaRendererEndType LEVEL = new AreaRendererEndType(\n        \"AreaRendererEndType.LEVEL\"\n    );",
        "begin_line": 73,
        "end_line": 75,
        "comment": " \r\n     * The area is levelled at the first or last value. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.name",
        "snippet": "    private String name;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3045058380983401544L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TOP_LEFT",
        "snippet": "    public static final TextBlockAnchor TOP_LEFT \n            = new TextBlockAnchor(\"TextBlockAnchor.TOP_LEFT\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Top/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TOP_CENTER",
        "snippet": "    public static final TextBlockAnchor TOP_CENTER = new TextBlockAnchor(\n            \"TextBlockAnchor.TOP_CENTER\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Top/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TOP_RIGHT",
        "snippet": "    public static final TextBlockAnchor TOP_RIGHT = new TextBlockAnchor(\n           \"TextBlockAnchor.TOP_RIGHT\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": " Top/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.CENTER_LEFT",
        "snippet": "    public static final TextBlockAnchor CENTER_LEFT = new TextBlockAnchor(\n            \"TextBlockAnchor.CENTER_LEFT\");",
        "begin_line": 71,
        "end_line": 72,
        "comment": " Middle/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.CENTER",
        "snippet": "    public static final TextBlockAnchor CENTER = new TextBlockAnchor(\n            \"TextBlockAnchor.CENTER\");",
        "begin_line": 75,
        "end_line": 76,
        "comment": " Middle/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.CENTER_RIGHT",
        "snippet": "    public static final TextBlockAnchor CENTER_RIGHT = new TextBlockAnchor(\n            \"TextBlockAnchor.CENTER_RIGHT\");",
        "begin_line": 79,
        "end_line": 80,
        "comment": " Middle/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.BOTTOM_LEFT",
        "snippet": "    public static final TextBlockAnchor BOTTOM_LEFT \n        = new TextBlockAnchor(\"TextBlockAnchor.BOTTOM_LEFT\");",
        "begin_line": 83,
        "end_line": 84,
        "comment": " Bottom/left. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.BOTTOM_CENTER",
        "snippet": "    public static final TextBlockAnchor BOTTOM_CENTER \n            = new TextBlockAnchor(\"TextBlockAnchor.BOTTOM_CENTER\");",
        "begin_line": 87,
        "end_line": 88,
        "comment": " Bottom/center. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.BOTTOM_RIGHT",
        "snippet": "    public static final TextBlockAnchor BOTTOM_RIGHT \n            = new TextBlockAnchor(\"TextBlockAnchor.BOTTOM_RIGHT\");",
        "begin_line": 91,
        "end_line": 92,
        "comment": " Bottom/right. "
    },
    {
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "signature": "org.jfree.chart.text.TextBlockAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3557517173697777579L;",
        "begin_line": 90,
        "end_line": 90,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java",
        "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.errorIndicatorPaint",
        "snippet": "    private transient Paint errorIndicatorPaint;",
        "begin_line": 93,
        "end_line": 93,
        "comment": " The paint used to show the error indicator. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.data",
        "snippet": "    private KeyedObjects2D data;",
        "begin_line": 73,
        "end_line": 73,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValue",
        "snippet": "    private double minimumRangeValue;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The minimum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.minimumRangeValueIncStdDev",
        "snippet": "    private double minimumRangeValueIncStdDev;",
        "begin_line": 79,
        "end_line": 79,
        "comment": " The minimum range value including the standard deviation. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValue",
        "snippet": "    private double maximumRangeValue;",
        "begin_line": 82,
        "end_line": 82,
        "comment": " The maximum range value. "
    },
    {
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.maximumRangeValueIncStdDev",
        "snippet": "    private double maximumRangeValueIncStdDev;",
        "begin_line": 85,
        "end_line": 85,
        "comment": " The maximum range value including the standard deviation. "
    },
    {
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "signature": "org.jfree.chart.block.CenterArrangement.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -353308149220382047L; ",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnit",
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "signature": "org.jfree.chart.axis.TickUnit.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 510179855057013974L;",
        "begin_line": 67,
        "end_line": 67,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.TickUnit",
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "signature": "org.jfree.chart.axis.TickUnit.size",
        "snippet": "    private double size;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The size of the tick unit. "
    },
    {
        "class_name": "org.jfree.chart.resources.JFreeChartResources",
        "src_path": "source/org/jfree/chart/resources/JFreeChartResources.java",
        "signature": "org.jfree.chart.resources.JFreeChartResources.CONTENTS",
        "snippet": "    private static final Object[][] CONTENTS = {\n        {\"project.name\",      \"JFreeChart\"},\n        {\"project.version\",   \"1.0.6\"},\n        {\"project.info\",      \"http://www.jfree.org/jfreechart/index.html\"},\n        {\"project.copyright\", \n         \"(C)opyright 2000-2007, by Object Refinery Limited and Contributors\"}\n    };",
        "begin_line": 58,
        "end_line": 64,
        "comment": " The resources to be localised. "
    },
    {
        "class_name": "org.jfree.data.KeyedObject",
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "signature": "org.jfree.data.KeyedObject.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2677930479256885863L;",
        "begin_line": 60,
        "end_line": 60,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyedObject",
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "signature": "org.jfree.data.KeyedObject.key",
        "snippet": "    private Comparable key;",
        "begin_line": 63,
        "end_line": 63,
        "comment": " The key. "
    },
    {
        "class_name": "org.jfree.data.KeyedObject",
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "signature": "org.jfree.data.KeyedObject.object",
        "snippet": "    private Object object;",
        "begin_line": 66,
        "end_line": 66,
        "comment": " The object. "
    },
    {
        "class_name": "org.jfree.chart.util.Size2D",
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "signature": "org.jfree.chart.util.Size2D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2558191683786418168L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.Size2D",
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "signature": "org.jfree.chart.util.Size2D.width",
        "snippet": "    public double width;",
        "begin_line": 40,
        "end_line": 40,
        "comment": " The width. "
    },
    {
        "class_name": "org.jfree.chart.util.Size2D",
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "signature": "org.jfree.chart.util.Size2D.height",
        "snippet": "    public double height;",
        "begin_line": 43,
        "end_line": 43,
        "comment": " The height. "
    },
    {
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8155025776964678320L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.type",
        "snippet": "    private GradientPaintTransformType type;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " The transform type. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3537691700434728188L;",
        "begin_line": 227,
        "end_line": 227,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_DOMAIN_GRIDLINES_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false;",
        "begin_line": 233,
        "end_line": 233,
        "comment": " \r\n     * The default visibility of the grid lines plotted against the domain \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_RANGE_GRIDLINES_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true;",
        "begin_line": 239,
        "end_line": 239,
        "comment": " \r\n     * The default visibility of the grid lines plotted against the range \r\n     * axis. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_STROKE",
        "snippet": "    public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,\n        BasicStroke.CAP_BUTT,\n        BasicStroke.JOIN_BEVEL,\n        0.0f,\n        new float[] {2.0f, 2.0f},\n        0.0f);",
        "begin_line": 242,
        "end_line": 247,
        "comment": " The default grid line stroke. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_GRIDLINE_PAINT",
        "snippet": "    public static final Paint DEFAULT_GRIDLINE_PAINT = Color.lightGray;",
        "begin_line": 250,
        "end_line": 250,
        "comment": " The default grid line paint. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_VALUE_LABEL_FONT",
        "snippet": "    public static final Font DEFAULT_VALUE_LABEL_FONT \n            = new Font(\"SansSerif\", Font.PLAIN, 10);",
        "begin_line": 253,
        "end_line": 254,
        "comment": " The default value label font. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_VISIBLE",
        "snippet": "    public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false;",
        "begin_line": 261,
        "end_line": 261,
        "comment": " \r\n     * The default crosshair visibility. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_STROKE",
        "snippet": "    public static final Stroke DEFAULT_CROSSHAIR_STROKE\n            = DEFAULT_GRIDLINE_STROKE;",
        "begin_line": 268,
        "end_line": 269,
        "comment": " \r\n     * The default crosshair stroke. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.DEFAULT_CROSSHAIR_PAINT",
        "snippet": "    public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;",
        "begin_line": 276,
        "end_line": 276,
        "comment": " \r\n     * The default crosshair paint. \r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.localizationResources",
        "snippet": "    protected static ResourceBundle localizationResources \n        = ResourceBundle.getBundle(\"org.jfree.chart.plot.LocalizationBundle\");",
        "begin_line": 279,
        "end_line": 280,
        "comment": " The resourceBundle for the localization. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.orientation",
        "snippet": "    private PlotOrientation orientation;",
        "begin_line": 283,
        "end_line": 283,
        "comment": " The plot orientation. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.axisOffset",
        "snippet": "    private RectangleInsets axisOffset;",
        "begin_line": 286,
        "end_line": 286,
        "comment": " The offset between the data area and the axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainAxes",
        "snippet": "    private ObjectList domainAxes;",
        "begin_line": 289,
        "end_line": 289,
        "comment": " Storage for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainAxisLocations",
        "snippet": "    private ObjectList domainAxisLocations;",
        "begin_line": 292,
        "end_line": 292,
        "comment": " Storage for the domain axis locations. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawSharedDomainAxis",
        "snippet": "    private boolean drawSharedDomainAxis;",
        "begin_line": 298,
        "end_line": 298,
        "comment": "\r\n     * A flag that controls whether or not the shared domain axis is drawn \r\n     * (only relevant when the plot is being used as a subplot).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeAxes",
        "snippet": "    private ObjectList rangeAxes;",
        "begin_line": 301,
        "end_line": 301,
        "comment": " Storage for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeAxisLocations",
        "snippet": "    private ObjectList rangeAxisLocations;",
        "begin_line": 304,
        "end_line": 304,
        "comment": " Storage for the range axis locations. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasets",
        "snippet": "    private ObjectList datasets;",
        "begin_line": 307,
        "end_line": 307,
        "comment": " Storage for the datasets. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetToDomainAxisMap",
        "snippet": "    private ObjectList datasetToDomainAxisMap;",
        "begin_line": 310,
        "end_line": 310,
        "comment": " Storage for keys that map datasets to domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetToRangeAxisMap",
        "snippet": "    private ObjectList datasetToRangeAxisMap;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " Storage for keys that map datasets to range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.renderers",
        "snippet": "    private ObjectList renderers;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Storage for the renderers. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.renderingOrder",
        "snippet": "    private DatasetRenderingOrder renderingOrder \n            = DatasetRenderingOrder.REVERSE;",
        "begin_line": 319,
        "end_line": 320,
        "comment": " The dataset rendering order. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.columnRenderingOrder",
        "snippet": "    private SortOrder columnRenderingOrder = SortOrder.ASCENDING;",
        "begin_line": 326,
        "end_line": 326,
        "comment": " \r\n     * Controls the order in which the columns are traversed when rendering the \r\n     * data items. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rowRenderingOrder",
        "snippet": "    private SortOrder rowRenderingOrder = SortOrder.ASCENDING;",
        "begin_line": 332,
        "end_line": 332,
        "comment": " \r\n     * Controls the order in which the rows are traversed when rendering the \r\n     * data items. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlinesVisible",
        "snippet": "    private boolean domainGridlinesVisible;",
        "begin_line": 338,
        "end_line": 338,
        "comment": " \r\n     * A flag that controls whether the grid-lines for the domain axis are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlinePosition",
        "snippet": "    private CategoryAnchor domainGridlinePosition;",
        "begin_line": 341,
        "end_line": 341,
        "comment": " The position of the domain gridlines relative to the category. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlineStroke",
        "snippet": "    private transient Stroke domainGridlineStroke;",
        "begin_line": 344,
        "end_line": 344,
        "comment": " The stroke used to draw the domain grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.domainGridlinePaint",
        "snippet": "    private transient Paint domainGridlinePaint;",
        "begin_line": 347,
        "end_line": 347,
        "comment": " The paint used to draw the domain  grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeGridlinesVisible",
        "snippet": "    private boolean rangeGridlinesVisible;",
        "begin_line": 353,
        "end_line": 353,
        "comment": " \r\n     * A flag that controls whether the grid-lines for the range axis are \r\n     * visible. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeGridlineStroke",
        "snippet": "    private transient Stroke rangeGridlineStroke;",
        "begin_line": 356,
        "end_line": 356,
        "comment": " The stroke used to draw the range axis grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeGridlinePaint",
        "snippet": "    private transient Paint rangeGridlinePaint;",
        "begin_line": 359,
        "end_line": 359,
        "comment": " The paint used to draw the range axis grid-lines. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.anchorValue",
        "snippet": "    private double anchorValue;",
        "begin_line": 362,
        "end_line": 362,
        "comment": " The anchor value. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairVisible",
        "snippet": "    private boolean rangeCrosshairVisible;",
        "begin_line": 365,
        "end_line": 365,
        "comment": " A flag that controls whether or not a range crosshair is drawn. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairValue",
        "snippet": "    private double rangeCrosshairValue;",
        "begin_line": 368,
        "end_line": 368,
        "comment": " The range crosshair value. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairStroke",
        "snippet": "    private transient Stroke rangeCrosshairStroke;",
        "begin_line": 371,
        "end_line": 371,
        "comment": " The pen/brush used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairPaint",
        "snippet": "    private transient Paint rangeCrosshairPaint;",
        "begin_line": 374,
        "end_line": 374,
        "comment": " The color used to draw the crosshair (if any). "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.rangeCrosshairLockedOnData",
        "snippet": "    private boolean rangeCrosshairLockedOnData = true;",
        "begin_line": 380,
        "end_line": 380,
        "comment": " \r\n     * A flag that controls whether or not the crosshair locks onto actual \r\n     * data points. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.foregroundDomainMarkers",
        "snippet": "    private Map foregroundDomainMarkers;",
        "begin_line": 383,
        "end_line": 383,
        "comment": " A map containing lists of markers for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.backgroundDomainMarkers",
        "snippet": "    private Map backgroundDomainMarkers;",
        "begin_line": 386,
        "end_line": 386,
        "comment": " A map containing lists of markers for the domain axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.foregroundRangeMarkers",
        "snippet": "    private Map foregroundRangeMarkers;",
        "begin_line": 389,
        "end_line": 389,
        "comment": " A map containing lists of markers for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.backgroundRangeMarkers",
        "snippet": "    private Map backgroundRangeMarkers;",
        "begin_line": 392,
        "end_line": 392,
        "comment": " A map containing lists of markers for the range axes. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.annotations",
        "snippet": "    private List annotations;",
        "begin_line": 399,
        "end_line": 399,
        "comment": " \r\n     * A (possibly empty) list of annotations for the plot.  The list should\r\n     * be initialised in the constructor and never allowed to be \r\n     * <code>null</code>.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.weight",
        "snippet": "    private int weight;",
        "begin_line": 405,
        "end_line": 405,
        "comment": "\r\n     * The weight for the plot (only relevant when the plot is used as a subplot\r\n     * within a combined plot).\r\n     "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.fixedDomainAxisSpace",
        "snippet": "    private AxisSpace fixedDomainAxisSpace;",
        "begin_line": 408,
        "end_line": 408,
        "comment": " The fixed space for the domain axis. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.fixedRangeAxisSpace",
        "snippet": "    private AxisSpace fixedRangeAxisSpace;",
        "begin_line": 411,
        "end_line": 411,
        "comment": " The fixed space for the range axis. "
    },
    {
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "signature": "org.jfree.chart.plot.CategoryPlot.fixedLegendItems",
        "snippet": "    private LegendItemCollection fixedLegendItems;",
        "begin_line": 417,
        "end_line": 417,
        "comment": " \r\n     * An optional collection of legend items that can be returned by the \r\n     * getLegendItems() method. \r\n     "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1094303785346988894L;",
        "begin_line": 65,
        "end_line": 65,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.description",
        "snippet": "    private String description;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The task description. "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.duration",
        "snippet": "    private TimePeriod duration;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The time period for the task (estimated or actual). "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.percentComplete",
        "snippet": "    private Double percentComplete;",
        "begin_line": 74,
        "end_line": 74,
        "comment": " The percent complete (<code>null</code> is permitted). "
    },
    {
        "class_name": "org.jfree.data.gantt.Task",
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "signature": "org.jfree.data.gantt.Task.subtasks",
        "snippet": "    private List subtasks;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " Storage for the sub-tasks (if any). "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2457494205644416327L;",
        "begin_line": 37,
        "end_line": 37,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.CENTER",
        "snippet": "    public static final RectangleAnchor CENTER \n        = new RectangleAnchor(\"RectangleAnchor.CENTER\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": " Center. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.TOP",
        "snippet": "    public static final RectangleAnchor TOP \n        = new RectangleAnchor(\"RectangleAnchor.TOP\");",
        "begin_line": 44,
        "end_line": 45,
        "comment": " Top. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.TOP_LEFT",
        "snippet": "    public static final RectangleAnchor TOP_LEFT \n        = new RectangleAnchor(\"RectangleAnchor.TOP_LEFT\");",
        "begin_line": 48,
        "end_line": 49,
        "comment": " Top-Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.TOP_RIGHT",
        "snippet": "    public static final RectangleAnchor TOP_RIGHT \n        = new RectangleAnchor(\"RectangleAnchor.TOP_RIGHT\");",
        "begin_line": 52,
        "end_line": 53,
        "comment": " Top-Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM",
        "snippet": "    public static final RectangleAnchor BOTTOM \n        = new RectangleAnchor(\"RectangleAnchor.BOTTOM\");",
        "begin_line": 56,
        "end_line": 57,
        "comment": " Bottom. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM_LEFT",
        "snippet": "    public static final RectangleAnchor BOTTOM_LEFT \n        = new RectangleAnchor(\"RectangleAnchor.BOTTOM_LEFT\");",
        "begin_line": 60,
        "end_line": 61,
        "comment": " Bottom-Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.BOTTOM_RIGHT",
        "snippet": "    public static final RectangleAnchor BOTTOM_RIGHT \n        = new RectangleAnchor(\"RectangleAnchor.BOTTOM_RIGHT\");",
        "begin_line": 64,
        "end_line": 65,
        "comment": " Bottom-Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.LEFT",
        "snippet": "    public static final RectangleAnchor LEFT \n        = new RectangleAnchor(\"RectangleAnchor.LEFT\");",
        "begin_line": 68,
        "end_line": 69,
        "comment": " Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.RIGHT",
        "snippet": "    public static final RectangleAnchor RIGHT \n        = new RectangleAnchor(\"RectangleAnchor.RIGHT\");",
        "begin_line": 72,
        "end_line": 73,
        "comment": " Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "signature": "org.jfree.chart.util.RectangleAnchor.name",
        "snippet": "    private String name;",
        "begin_line": 76,
        "end_line": 76,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2482910643727230911L;",
        "begin_line": 99,
        "end_line": 99,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.firstBarPaint",
        "snippet": "    private transient Paint firstBarPaint;",
        "begin_line": 102,
        "end_line": 102,
        "comment": " The paint used to draw the first bar. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.lastBarPaint",
        "snippet": "    private transient Paint lastBarPaint;",
        "begin_line": 105,
        "end_line": 105,
        "comment": " The paint used to draw the last bar. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.positiveBarPaint",
        "snippet": "    private transient Paint positiveBarPaint;",
        "begin_line": 108,
        "end_line": 108,
        "comment": " The paint used to draw bars having positive values. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.negativeBarPaint",
        "snippet": "    private transient Paint negativeBarPaint;",
        "begin_line": 111,
        "end_line": 111,
        "comment": " The paint used to draw bars having negative values. "
    },
    {
        "class_name": "org.jfree.chart.LegendItemCollection",
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "signature": "org.jfree.chart.LegendItemCollection.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1365215565589815953L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.LegendItemCollection",
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "signature": "org.jfree.chart.LegendItemCollection.items",
        "snippet": "    private List items;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Storage for the legend items. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1470104570733183430L;",
        "begin_line": 30,
        "end_line": 30,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.FOREGROUND",
        "snippet": "    public static final Layer FOREGROUND = new Layer(\"Layer.FOREGROUND\");",
        "begin_line": 33,
        "end_line": 33,
        "comment": " Foreground. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.BACKGROUND",
        "snippet": "    public static final Layer BACKGROUND = new Layer(\"Layer.BACKGROUND\");",
        "begin_line": 36,
        "end_line": 36,
        "comment": " Background. "
    },
    {
        "class_name": "org.jfree.chart.util.Layer",
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "signature": "org.jfree.chart.util.Layer.name",
        "snippet": "    private String name;",
        "begin_line": 39,
        "end_line": 39,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.data.general.AbstractSeriesDataset",
        "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
        "signature": "org.jfree.data.general.AbstractSeriesDataset.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6074996219705033171L;",
        "begin_line": 61,
        "end_line": 61,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "signature": "org.jfree.chart.text.G2TextMeasurer.g2",
        "snippet": "    private Graphics2D g2;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " The graphics device. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -7400988293691093548L;",
        "begin_line": 31,
        "end_line": 31,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.TOP",
        "snippet": "    public static final RectangleEdge TOP = new RectangleEdge(\n            \"RectangleEdge.TOP\");",
        "begin_line": 34,
        "end_line": 35,
        "comment": " Top. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.BOTTOM",
        "snippet": "    public static final RectangleEdge BOTTOM = new RectangleEdge(\n            \"RectangleEdge.BOTTOM\");",
        "begin_line": 38,
        "end_line": 39,
        "comment": " Bottom. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.LEFT",
        "snippet": "    public static final RectangleEdge LEFT = new RectangleEdge(\n            \"RectangleEdge.LEFT\");",
        "begin_line": 42,
        "end_line": 43,
        "comment": " Left. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.RIGHT",
        "snippet": "    public static final RectangleEdge RIGHT = new RectangleEdge(\n            \"RectangleEdge.RIGHT\");",
        "begin_line": 46,
        "end_line": 47,
        "comment": " Right. "
    },
    {
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "signature": "org.jfree.chart.util.RectangleEdge.name",
        "snippet": "    private String name;",
        "begin_line": 50,
        "end_line": 50,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 2540750672764537240L;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.START",
        "snippet": "    public static final DateTickMarkPosition START\n        = new DateTickMarkPosition(\"DateTickMarkPosition.START\");",
        "begin_line": 58,
        "end_line": 59,
        "comment": " Start of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.MIDDLE",
        "snippet": "    public static final DateTickMarkPosition MIDDLE\n        = new DateTickMarkPosition(\"DateTickMarkPosition.MIDDLE\");",
        "begin_line": 62,
        "end_line": 63,
        "comment": " Middle of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.END",
        "snippet": "    public static final DateTickMarkPosition END\n        = new DateTickMarkPosition(\"DateTickMarkPosition.END\");",
        "begin_line": 66,
        "end_line": 67,
        "comment": " End of period. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.name",
        "snippet": "    private String name;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "signature": "org.jfree.chart.util.ShapeUtilities.SQRT2",
        "snippet": "    private static final float SQRT2 = (float) Math.pow(2.0, 0.5);",
        "begin_line": 391,
        "end_line": 391,
        "comment": " A useful constant used internally. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 3698345477322391456L;",
        "begin_line": 142,
        "end_line": 142,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_RANGE",
        "snippet": "    public static final Range DEFAULT_RANGE = new Range(0.0, 1.0);",
        "begin_line": 145,
        "end_line": 145,
        "comment": " The default axis range. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_RANGE",
        "snippet": "    public static final boolean DEFAULT_AUTO_RANGE = true;",
        "begin_line": 148,
        "end_line": 148,
        "comment": " The default auto-range value. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_INVERTED",
        "snippet": "    public static final boolean DEFAULT_INVERTED = false;",
        "begin_line": 151,
        "end_line": 151,
        "comment": " The default inverted flag setting. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE",
        "snippet": "    public static final double DEFAULT_AUTO_RANGE_MINIMUM_SIZE = 0.00000001;",
        "begin_line": 154,
        "end_line": 154,
        "comment": " The default minimum auto range. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_LOWER_MARGIN",
        "snippet": "    public static final double DEFAULT_LOWER_MARGIN = 0.05;",
        "begin_line": 157,
        "end_line": 157,
        "comment": " The default value for the lower margin (0.05 = 5%). "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_UPPER_MARGIN",
        "snippet": "    public static final double DEFAULT_UPPER_MARGIN = 0.05;",
        "begin_line": 160,
        "end_line": 160,
        "comment": " The default value for the upper margin (0.05 = 5%). "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.DEFAULT_AUTO_TICK_UNIT_SELECTION",
        "snippet": "    public static final boolean DEFAULT_AUTO_TICK_UNIT_SELECTION = true;",
        "begin_line": 163,
        "end_line": 163,
        "comment": " The default auto-tick-unit-selection value. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.MAXIMUM_TICK_COUNT",
        "snippet": "    public static final int MAXIMUM_TICK_COUNT = 500;",
        "begin_line": 166,
        "end_line": 166,
        "comment": " The maximum tick count. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.positiveArrowVisible",
        "snippet": "    private boolean positiveArrowVisible;",
        "begin_line": 172,
        "end_line": 172,
        "comment": " \r\n     * A flag that controls whether an arrow is drawn at the positive end of \r\n     * the axis line. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.negativeArrowVisible",
        "snippet": "    private boolean negativeArrowVisible;",
        "begin_line": 178,
        "end_line": 178,
        "comment": " \r\n     * A flag that controls whether an arrow is drawn at the negative end of \r\n     * the axis line. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.upArrow",
        "snippet": "    private transient Shape upArrow;",
        "begin_line": 181,
        "end_line": 181,
        "comment": " The shape used for an up arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.downArrow",
        "snippet": "    private transient Shape downArrow;",
        "begin_line": 184,
        "end_line": 184,
        "comment": " The shape used for a down arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.leftArrow",
        "snippet": "    private transient Shape leftArrow;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " The shape used for a left arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.rightArrow",
        "snippet": "    private transient Shape rightArrow;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " The shape used for a right arrow. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.inverted",
        "snippet": "    private boolean inverted;",
        "begin_line": 193,
        "end_line": 193,
        "comment": " A flag that affects the orientation of the values on the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.range",
        "snippet": "    private Range range;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " The axis range. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoRange",
        "snippet": "    private boolean autoRange;",
        "begin_line": 202,
        "end_line": 202,
        "comment": " \r\n     * Flag that indicates whether the axis automatically scales to fit the \r\n     * chart data. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoRangeMinimumSize",
        "snippet": "    private double autoRangeMinimumSize;",
        "begin_line": 205,
        "end_line": 205,
        "comment": " The minimum size for the 'auto' axis range (excluding margins). "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.defaultAutoRange",
        "snippet": "    private Range defaultAutoRange;",
        "begin_line": 213,
        "end_line": 213,
        "comment": "\r\n     * The default range is used when the dataset is empty and the axis needs\r\n     * to determine the auto range.\r\n     * \r\n     * @since 1.0.5\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.upperMargin",
        "snippet": "    private double upperMargin;",
        "begin_line": 220,
        "end_line": 220,
        "comment": "\r\n     * The upper margin percentage.  This indicates the amount by which the \r\n     * maximum axis value exceeds the maximum data value (as a percentage of \r\n     * the range on the axis) when the axis range is determined automatically.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.lowerMargin",
        "snippet": "    private double lowerMargin;",
        "begin_line": 227,
        "end_line": 227,
        "comment": "\r\n     * The lower margin.  This is a percentage that indicates the amount by\r\n     * which the minimum axis value is \"less than\" the minimum data value when\r\n     * the axis range is determined automatically.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.fixedAutoRange",
        "snippet": "    private double fixedAutoRange;",
        "begin_line": 234,
        "end_line": 234,
        "comment": "\r\n     * If this value is positive, the amount is subtracted from the maximum\r\n     * data value to determine the lower axis range.  This can be used to\r\n     * provide a fixed \"window\" on dynamic data.\r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoTickUnitSelection",
        "snippet": "    private boolean autoTickUnitSelection;",
        "begin_line": 240,
        "end_line": 240,
        "comment": " \r\n     * Flag that indicates whether or not the tick unit is selected \r\n     * automatically. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.standardTickUnits",
        "snippet": "    private TickUnitSource standardTickUnits;",
        "begin_line": 243,
        "end_line": 243,
        "comment": " The standard tick units for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.autoTickIndex",
        "snippet": "    private int autoTickIndex;",
        "begin_line": 246,
        "end_line": 246,
        "comment": " An index into an array of standard tick values. "
    },
    {
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "signature": "org.jfree.chart.axis.ValueAxis.verticalTickLabels",
        "snippet": "    private boolean verticalTickLabels;",
        "begin_line": 249,
        "end_line": 249,
        "comment": " A flag indicating whether or not tick labels are rotated to vertical. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8249740987565309567L;",
        "begin_line": 56,
        "end_line": 56,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.LEFT",
        "snippet": "    public static final HorizontalAlignment LEFT \n            = new HorizontalAlignment(\"HorizontalAlignment.LEFT\");",
        "begin_line": 59,
        "end_line": 60,
        "comment": " Left alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.RIGHT",
        "snippet": "    public static final HorizontalAlignment RIGHT \n            = new HorizontalAlignment(\"HorizontalAlignment.RIGHT\");",
        "begin_line": 63,
        "end_line": 64,
        "comment": " Right alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.CENTER",
        "snippet": "    public static final HorizontalAlignment CENTER \n            = new HorizontalAlignment(\"HorizontalAlignment.CENTER\");",
        "begin_line": 67,
        "end_line": 68,
        "comment": " Center alignment. "
    },
    {
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "signature": "org.jfree.chart.util.HorizontalAlignment.name",
        "snippet": "    private String name;",
        "begin_line": 71,
        "end_line": 71,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockResult",
        "src_path": "source/org/jfree/chart/block/BlockResult.java",
        "signature": "org.jfree.chart.block.BlockResult.entities",
        "snippet": "    private EntityCollection entities;",
        "begin_line": 54,
        "end_line": 54,
        "comment": " The entities from the block. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects",
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "signature": "org.jfree.data.KeyedObjects.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 1321582394193530984L;",
        "begin_line": 59,
        "end_line": 59,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.KeyedObjects",
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "signature": "org.jfree.data.KeyedObjects.data",
        "snippet": "    private List data;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " Storage for the data. "
    },
    {
        "class_name": "org.jfree.chart.event.RendererChangeEvent",
        "src_path": "source/org/jfree/chart/event/RendererChangeEvent.java",
        "signature": "org.jfree.chart.event.RendererChangeEvent.renderer",
        "snippet": "    private Object renderer;",
        "begin_line": 55,
        "end_line": 55,
        "comment": " The renderer that generated the event. "
    },
    {
        "class_name": "org.jfree.chart.block.LineBorder",
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "signature": "org.jfree.chart.block.LineBorder.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 72,
        "end_line": 72,
        "comment": " The line color. "
    },
    {
        "class_name": "org.jfree.chart.block.LineBorder",
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "signature": "org.jfree.chart.block.LineBorder.stroke",
        "snippet": "    private transient Stroke stroke;",
        "begin_line": 75,
        "end_line": 75,
        "comment": " The line stroke. "
    },
    {
        "class_name": "org.jfree.chart.block.LineBorder",
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "signature": "org.jfree.chart.block.LineBorder.insets",
        "snippet": "    private RectangleInsets insets;",
        "begin_line": 78,
        "end_line": 78,
        "comment": " The insets. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -1013460999649007604L;",
        "begin_line": 170,
        "end_line": 170,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_DATE_RANGE",
        "snippet": "    public static final DateRange DEFAULT_DATE_RANGE = new DateRange();",
        "begin_line": 173,
        "end_line": 173,
        "comment": " The default axis range. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS",
        "snippet": "    public static final double \n            DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS = 2.0;",
        "begin_line": 176,
        "end_line": 177,
        "comment": " The default minimum auto range size. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_DATE_TICK_UNIT",
        "snippet": "    public static final DateTickUnit DEFAULT_DATE_TICK_UNIT\n            = new DateTickUnit(DateTickUnit.DAY, 1, new SimpleDateFormat());",
        "begin_line": 180,
        "end_line": 181,
        "comment": " The default date tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_ANCHOR_DATE",
        "snippet": "    public static final Date DEFAULT_ANCHOR_DATE = new Date();",
        "begin_line": 184,
        "end_line": 184,
        "comment": " The default anchor date. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.tickUnit",
        "snippet": "    private DateTickUnit tickUnit;",
        "begin_line": 187,
        "end_line": 187,
        "comment": " The current tick unit. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.dateFormatOverride",
        "snippet": "    private DateFormat dateFormatOverride;",
        "begin_line": 190,
        "end_line": 190,
        "comment": " The override date format. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.tickMarkPosition",
        "snippet": "    private DateTickMarkPosition tickMarkPosition = DateTickMarkPosition.START;",
        "begin_line": 196,
        "end_line": 196,
        "comment": " \r\n     * Tick marks can be displayed at the start or the middle of the time \r\n     * period. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.DEFAULT_TIMELINE",
        "snippet": "    private static final Timeline DEFAULT_TIMELINE = new DefaultTimeline();",
        "begin_line": 310,
        "end_line": 310,
        "comment": " A static default timeline shared by all standard DateAxis "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.timeZone",
        "snippet": "    private TimeZone timeZone;",
        "begin_line": 313,
        "end_line": 313,
        "comment": " The time zone for the axis. "
    },
    {
        "class_name": "org.jfree.chart.axis.DateAxis",
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "signature": "org.jfree.chart.axis.DateAxis.timeline",
        "snippet": "    private Timeline timeline;",
        "begin_line": 316,
        "end_line": 316,
        "comment": " Our underlying timeline. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -2124469847758108312L;",
        "begin_line": 33,
        "end_line": 33,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.ASCENDING",
        "snippet": "    public static final SortOrder ASCENDING = new SortOrder(\n            \"SortOrder.ASCENDING\");",
        "begin_line": 36,
        "end_line": 37,
        "comment": " Ascending order. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.DESCENDING",
        "snippet": "    public static final SortOrder DESCENDING = new SortOrder(\n            \"SortOrder.DESCENDING\");",
        "begin_line": 40,
        "end_line": 41,
        "comment": " Descending order. "
    },
    {
        "class_name": "org.jfree.chart.util.SortOrder",
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "signature": "org.jfree.chart.util.SortOrder.name",
        "snippet": "    private String name;",
        "begin_line": 44,
        "end_line": 44,
        "comment": " The name. "
    },
    {
        "class_name": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -3853824986520333437L;",
        "begin_line": 64,
        "end_line": 64,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator",
        "src_path": "source/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.java",
        "signature": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator.DEFAULT_TOOL_TIP_FORMAT_STRING",
        "snippet": "    public static final String DEFAULT_TOOL_TIP_FORMAT_STRING \n        = \"({0}, {1}) = {3} - {4}\";",
        "begin_line": 67,
        "end_line": 68,
        "comment": " The default format string. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 5467931468380928736L;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.DEFAULT_X_OFFSET",
        "snippet": "    public static final double DEFAULT_X_OFFSET = 12.0;",
        "begin_line": 98,
        "end_line": 98,
        "comment": " The default x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.DEFAULT_Y_OFFSET",
        "snippet": "    public static final double DEFAULT_Y_OFFSET = 8.0;",
        "begin_line": 101,
        "end_line": 101,
        "comment": " The default y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.DEFAULT_WALL_PAINT",
        "snippet": "    public static final Paint DEFAULT_WALL_PAINT = new Color(0xDD, 0xDD, 0xDD);",
        "begin_line": 104,
        "end_line": 104,
        "comment": " The default wall paint. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.xOffset",
        "snippet": "    private double xOffset;",
        "begin_line": 107,
        "end_line": 107,
        "comment": " The size of x-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.yOffset",
        "snippet": "    private double yOffset;",
        "begin_line": 110,
        "end_line": 110,
        "comment": " The size of y-offset for the 3D effect. "
    },
    {
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.wallPaint",
        "snippet": "    private transient Paint wallPaint;",
        "begin_line": 113,
        "end_line": 113,
        "comment": " The paint used to shade the left and lower 3D wall. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4630760091523940820L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.DEFAULT_LABEL_FORMAT",
        "snippet": "    public static final String DEFAULT_LABEL_FORMAT = \"{0}\";",
        "begin_line": 65,
        "end_line": 65,
        "comment": " The default item label format. "
    },
    {
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.formatPattern",
        "snippet": "    private String formatPattern;",
        "begin_line": 68,
        "end_line": 68,
        "comment": " The format pattern. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -6906561437538683581L;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.key",
        "snippet": "    private Comparable key;",
        "begin_line": 83,
        "end_line": 83,
        "comment": " The key for the series. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.description",
        "snippet": "    private String description;",
        "begin_line": 86,
        "end_line": 86,
        "comment": " A description of the series. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.listeners",
        "snippet": "    private EventListenerList listeners;",
        "begin_line": 89,
        "end_line": 89,
        "comment": " Storage for registered change listeners. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.propertyChangeSupport",
        "snippet": "    private PropertyChangeSupport propertyChangeSupport;",
        "begin_line": 92,
        "end_line": 92,
        "comment": " Object to support property change notification. "
    },
    {
        "class_name": "org.jfree.data.general.Series",
        "src_path": "source/org/jfree/data/general/Series.java",
        "signature": "org.jfree.data.general.Series.notify",
        "snippet": "    private boolean notify;",
        "begin_line": 95,
        "end_line": 95,
        "comment": " A flag that controls whether or not changes are notified. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = -8999557901920364580L;",
        "begin_line": 62,
        "end_line": 62,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.STANDARD",
        "snippet": "    public static final CategoryLabelPositions \n        STANDARD = new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_CENTER\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_CENTER\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.CENTER_RIGHT, \n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.CENTER_LEFT, \n                CategoryLabelWidthType.RANGE, 0.30f\n            ) // RIGHT\n        );",
        "begin_line": 65,
        "end_line": 81,
        "comment": " STANDARD category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.UP_90",
        "snippet": "    public static final CategoryLabelPositions \n        UP_90 = new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.CENTER_LEFT, \n                TextAnchor.CENTER_LEFT, -Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.CENTER_RIGHT, \n                TextAnchor.CENTER_RIGHT, -Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.BOTTOM_CENTER, \n                TextAnchor.BOTTOM_CENTER, -Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.9f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.TOP_CENTER, \n                TextAnchor.TOP_CENTER, -Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.90f\n            ) // RIGHT\n        );",
        "begin_line": 84,
        "end_line": 106,
        "comment": " UP_90 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.DOWN_90",
        "snippet": "    public static final CategoryLabelPositions \n        DOWN_90 = new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.CENTER_RIGHT, \n                TextAnchor.CENTER_RIGHT, Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.CENTER_LEFT, \n                TextAnchor.CENTER_LEFT, Math.PI / 2.0,\n                CategoryLabelWidthType.RANGE, 0.30f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.TOP_CENTER, \n                TextAnchor.TOP_CENTER, Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.90f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.BOTTOM_CENTER, \n                TextAnchor.BOTTOM_CENTER, Math.PI / 2.0,\n                CategoryLabelWidthType.CATEGORY, 0.90f\n            ) // RIGHT\n        );",
        "begin_line": 109,
        "end_line": 131,
        "comment": " DOWN_90 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.UP_45",
        "snippet": "    public static final CategoryLabelPositions UP_45 \n        = createUpRotationLabelPositions(Math.PI / 4.0);",
        "begin_line": 134,
        "end_line": 135,
        "comment": " UP_45 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.DOWN_45",
        "snippet": "    public static final CategoryLabelPositions DOWN_45 \n        = createDownRotationLabelPositions(Math.PI / 4.0);",
        "begin_line": 138,
        "end_line": 139,
        "comment": " DOWN_45 category label positions. "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtTop",
        "snippet": "    private CategoryLabelPosition positionForAxisAtTop;",
        "begin_line": 213,
        "end_line": 213,
        "comment": " \r\n     * The label positioning details used when an axis is at the top of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtBottom",
        "snippet": "    private CategoryLabelPosition positionForAxisAtBottom;",
        "begin_line": 219,
        "end_line": 219,
        "comment": " \r\n     * The label positioning details used when an axis is at the bottom of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtLeft",
        "snippet": "    private CategoryLabelPosition positionForAxisAtLeft;",
        "begin_line": 225,
        "end_line": 225,
        "comment": " \r\n     * The label positioning details used when an axis is at the left of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.positionForAxisAtRight",
        "snippet": "    private CategoryLabelPosition positionForAxisAtRight;",
        "begin_line": 231,
        "end_line": 231,
        "comment": " \r\n     * The label positioning details used when an axis is at the right of a \r\n     * chart. \r\n     "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.serialVersionUID",
        "snippet": "    private static final long serialVersionUID = 4961579220410228283L;",
        "begin_line": 70,
        "end_line": 70,
        "comment": " For serialization. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.NONE",
        "snippet": "    public static final BlockBorder NONE = new BlockBorder(\n            RectangleInsets.ZERO_INSETS, Color.white);",
        "begin_line": 73,
        "end_line": 74,
        "comment": " An empty border. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.insets",
        "snippet": "    private RectangleInsets insets;",
        "begin_line": 77,
        "end_line": 77,
        "comment": " The space reserved for the border. "
    },
    {
        "class_name": "org.jfree.chart.block.BlockBorder",
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "signature": "org.jfree.chart.block.BlockBorder.paint",
        "snippet": "    private transient Paint paint;",
        "begin_line": 80,
        "end_line": 80,
        "comment": " The border color. "
    }
]