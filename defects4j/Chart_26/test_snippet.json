[
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(AreaChartTests.class);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.AreaChartTests(java.lang.String)",
        "snippet": "    public AreaChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 93,col 9)-(line 93,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createAreaChart();\n    }\n",
        "begin_line": 99,
        "end_line": 101,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 100,col 9)-(line 100,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 107,
        "end_line": 115,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 108,col 9)-(line 108,col 64)",
            "(line 109,col 9)-(line 109,col 59)",
            "(line 110,col 9)-(line 111,col 57)",
            "(line 112,col 9)-(line 112,col 50)",
            "(line 113,col 9)-(line 113,col 74)",
            "(line 114,col 9)-(line 114,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 121,
        "end_line": 129,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 122,col 9)-(line 122,col 64)",
            "(line 123,col 9)-(line 123,col 59)",
            "(line 124,col 9)-(line 125,col 53)",
            "(line 126,col 9)-(line 126,col 48)",
            "(line 127,col 9)-(line 127,col 67)",
            "(line 128,col 9)-(line 128,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 135,
        "end_line": 150,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 136,col 9)-(line 136,col 32)",
            "(line 137,col 9)-(line 148,col 9)",
            "(line 149,col 9)-(line 149,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\n                \"S\", \"C\", data);\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 155,
        "end_line": 175,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 159,col 49)",
            "(line 161,col 9)-(line 162,col 32)",
            "(line 163,col 9)-(line 163,col 46)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 165,col 9)-(line 165,col 64)",
            "(line 166,col 9)-(line 166,col 33)",
            "(line 167,col 9)-(line 167,col 35)",
            "(line 168,col 9)-(line 168,col 45)",
            "(line 169,col 9)-(line 169,col 38)",
            "(line 170,col 9)-(line 171,col 74)",
            "(line 172,col 9)-(line 173,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.createAreaChart()",
        "snippet": "    private static JFreeChart createAreaChart() {\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n        return ChartFactory.createAreaChart(\"Area Chart\", \"Domain\", \"Range\",\n                dataset, PlotOrientation.HORIZONTAL, true, true, true);\n\n    }\n",
        "begin_line": 182,
        "end_line": 192,
        "comment": "\n     * Create an area chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 183,col 9)-(line 186,col 47)",
            "(line 187,col 9)-(line 188,col 27)",
            "(line 189,col 9)-(line 190,col 71)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.AreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/AreaChartTests.java",
        "signature": "org.jfree.chart.junit.AreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 208,col 13)-(line 208,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BarChart3DTests.class);\n    }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.BarChart3DTests(java.lang.String)",
        "snippet": "    public BarChart3DTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createBarChart3D();\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 111,
        "end_line": 126,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 32)",
            "(line 113,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 131,
        "end_line": 154,
        "comment": "\n     * Replaces the dataset and checks that the data range is as expected.\n     ",
        "child_ranges": [
            "(line 134,col 9)-(line 137,col 49)",
            "(line 139,col 9)-(line 140,col 27)",
            "(line 142,col 9)-(line 142,col 46)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 144,col 9)-(line 144,col 64)",
            "(line 145,col 9)-(line 145,col 33)",
            "(line 146,col 9)-(line 146,col 35)",
            "(line 147,col 9)-(line 147,col 45)",
            "(line 148,col 9)-(line 148,col 38)",
            "(line 149,col 9)-(line 150,col 71)",
            "(line 151,col 9)-(line 152,col 70)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 160,
        "end_line": 168,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 161,col 9)-(line 161,col 64)",
            "(line 162,col 9)-(line 162,col 59)",
            "(line 163,col 9)-(line 164,col 57)",
            "(line 165,col 9)-(line 165,col 50)",
            "(line 166,col 9)-(line 166,col 74)",
            "(line 167,col 9)-(line 167,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 174,
        "end_line": 182,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 175,col 9)-(line 175,col 64)",
            "(line 176,col 9)-(line 176,col 59)",
            "(line 177,col 9)-(line 178,col 53)",
            "(line 179,col 9)-(line 179,col 48)",
            "(line 180,col 9)-(line 180,col 67)",
            "(line 181,col 9)-(line 181,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.createBarChart3D()",
        "snippet": "    private static JFreeChart createBarChart3D() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createBarChart3D(\"Bar Chart 3D\", \"Domain\", \"Range\",\n                dataset, PlotOrientation.HORIZONTAL, true, true, true);\n\n    }\n",
        "begin_line": 189,
        "end_line": 204,
        "comment": "\n     * Create a horizontal bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 192,col 9)-(line 195,col 47)",
            "(line 197,col 9)-(line 198,col 27)",
            "(line 201,col 9)-(line 202,col 71)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChart3DTests.java",
        "signature": "org.jfree.chart.junit.BarChart3DTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 220,
        "end_line": 222,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 221,col 13)-(line 221,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BarChartTests.class);\n    }\n",
        "begin_line": 87,
        "end_line": 89,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 88,col 9)-(line 88,col 50)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.BarChartTests(java.lang.String)",
        "snippet": "    public BarChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createBarChart();\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 104,col 9)-(line 104,col 38)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }\n",
        "begin_line": 111,
        "end_line": 130,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 113,col 9)-(line 113,col 32)",
            "(line 115,col 9)-(line 126,col 9)",
            "(line 128,col 9)-(line 128,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 135,
        "end_line": 158,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 138,col 9)-(line 141,col 49)",
            "(line 143,col 9)-(line 144,col 27)",
            "(line 146,col 9)-(line 146,col 46)",
            "(line 147,col 9)-(line 147,col 40)",
            "(line 148,col 9)-(line 148,col 64)",
            "(line 149,col 9)-(line 149,col 33)",
            "(line 150,col 9)-(line 150,col 35)",
            "(line 151,col 9)-(line 151,col 45)",
            "(line 152,col 9)-(line 152,col 38)",
            "(line 153,col 9)-(line 154,col 74)",
            "(line 155,col 9)-(line 156,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 164,
        "end_line": 172,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 165,col 9)-(line 165,col 64)",
            "(line 166,col 9)-(line 166,col 59)",
            "(line 167,col 9)-(line 168,col 57)",
            "(line 169,col 9)-(line 169,col 50)",
            "(line 170,col 9)-(line 170,col 74)",
            "(line 171,col 9)-(line 171,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 178,
        "end_line": 186,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 64)",
            "(line 180,col 9)-(line 180,col 59)",
            "(line 181,col 9)-(line 182,col 53)",
            "(line 183,col 9)-(line 183,col 48)",
            "(line 184,col 9)-(line 184,col 67)",
            "(line 185,col 9)-(line 185,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.createBarChart()",
        "snippet": "    private static JFreeChart createBarChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createBarChart(\n            \"Bar Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 193,
        "end_line": 215,
        "comment": "\n     * Create a bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 196,col 9)-(line 199,col 47)",
            "(line 201,col 9)-(line 202,col 27)",
            "(line 205,col 9)-(line 213,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.BarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/BarChartTests.java",
        "signature": "org.jfree.chart.junit.BarChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 232,col 13)-(line 232,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(GanttChartTests.class);\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 87,col 9)-(line 87,col 52)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.GanttChartTests(java.lang.String)",
        "snippet": "    public GanttChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 96,col 9)-(line 96,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createGanttChart();\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 103,col 9)-(line 103,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 110,
        "end_line": 125,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 32)",
            "(line 112,col 9)-(line 123,col 9)",
            "(line 124,col 9)-(line 124,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo2()",
        "snippet": "    public void testDrawWithNullInfo2() {\n        boolean success = false;\n        try {\n            JFreeChart chart = createGanttChart();\n            CategoryPlot plot = (CategoryPlot) chart.getPlot();\n            plot.setDataset(createDataset());\n            /* BufferedImage img =*/ chart.createBufferedImage(300, 200, null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 131,
        "end_line": 144,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 132,col 9)-(line 132,col 32)",
            "(line 133,col 9)-(line 142,col 9)",
            "(line 143,col 9)-(line 143,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(null);\n        assertEquals(true, l.flag);\n    }\n",
        "begin_line": 149,
        "end_line": 155,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 150,col 9)-(line 150,col 46)",
            "(line 151,col 9)-(line 151,col 40)",
            "(line 152,col 9)-(line 152,col 64)",
            "(line 153,col 9)-(line 153,col 30)",
            "(line 154,col 9)-(line 154,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 161,
        "end_line": 169,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 64)",
            "(line 163,col 9)-(line 163,col 59)",
            "(line 164,col 9)-(line 165,col 57)",
            "(line 166,col 9)-(line 166,col 50)",
            "(line 167,col 9)-(line 167,col 74)",
            "(line 168,col 9)-(line 168,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 175,
        "end_line": 183,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 176,col 9)-(line 176,col 64)",
            "(line 177,col 9)-(line 177,col 59)",
            "(line 178,col 9)-(line 179,col 53)",
            "(line 180,col 9)-(line 180,col 48)",
            "(line 181,col 9)-(line 181,col 67)",
            "(line 182,col 9)-(line 182,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.createGanttChart()",
        "snippet": "    private static JFreeChart createGanttChart() {\n\n        // create the chart...\n        return ChartFactory.createGanttChart(\n            \"Gantt Chart\",\n            \"Domain\", \"Range\",\n            null,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 190,
        "end_line": 202,
        "comment": "\n     * Create a Gantt chart.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 193,col 9)-(line 200,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.createDataset()",
        "snippet": "    public static IntervalCategoryDataset createDataset() {\n\n        TaskSeries s1 = new TaskSeries(\"Scheduled\");\n        s1.add(new Task(\"Write Proposal\",\n               new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),\n                                    date(5, Calendar.APRIL, 2001))));\n        s1.add(new Task(\"Obtain Approval\",\n               new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),\n                                    date(9, Calendar.APRIL, 2001))));\n        s1.add(new Task(\"Requirements Analysis\",\n               new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),\n                                    date(5, Calendar.MAY, 2001))));\n        s1.add(new Task(\"Design Phase\",\n               new SimpleTimePeriod(date(6, Calendar.MAY, 2001),\n                                    date(30, Calendar.MAY, 2001))));\n        s1.add(new Task(\"Design Signoff\",\n               new SimpleTimePeriod(date(2, Calendar.JUNE, 2001),\n                                    date(2, Calendar.JUNE, 2001))));\n        s1.add(new Task(\"Alpha Implementation\",\n               new SimpleTimePeriod(date(3, Calendar.JUNE, 2001),\n                                    date(31, Calendar.JULY, 2001))));\n        s1.add(new Task(\"Design Review\",\n               new SimpleTimePeriod(date(1, Calendar.AUGUST, 2001),\n                                    date(8, Calendar.AUGUST, 2001))));\n        s1.add(new Task(\"Revised Design Signoff\",\n               new SimpleTimePeriod(date(10, Calendar.AUGUST, 2001),\n                                    date(10, Calendar.AUGUST, 2001))));\n        s1.add(new Task(\"Beta Implementation\",\n               new SimpleTimePeriod(date(12, Calendar.AUGUST, 2001),\n                                    date(12, Calendar.SEPTEMBER, 2001))));\n        s1.add(new Task(\"Testing\",\n               new SimpleTimePeriod(date(13, Calendar.SEPTEMBER, 2001),\n                                    date(31, Calendar.OCTOBER, 2001))));\n        s1.add(new Task(\"Final Implementation\",\n               new SimpleTimePeriod(date(1, Calendar.NOVEMBER, 2001),\n                                    date(15, Calendar.NOVEMBER, 2001))));\n        s1.add(new Task(\"Signoff\",\n               new SimpleTimePeriod(date(28, Calendar.NOVEMBER, 2001),\n                                    date(30, Calendar.NOVEMBER, 2001))));\n\n        TaskSeries s2 = new TaskSeries(\"Actual\");\n        s2.add(new Task(\"Write Proposal\",\n               new SimpleTimePeriod(date(1, Calendar.APRIL, 2001),\n                                    date(5, Calendar.APRIL, 2001))));\n        s2.add(new Task(\"Obtain Approval\",\n               new SimpleTimePeriod(date(9, Calendar.APRIL, 2001),\n                                    date(9, Calendar.APRIL, 2001))));\n        s2.add(new Task(\"Requirements Analysis\",\n               new SimpleTimePeriod(date(10, Calendar.APRIL, 2001),\n                                    date(15, Calendar.MAY, 2001))));\n        s2.add(new Task(\"Design Phase\",\n               new SimpleTimePeriod(date(15, Calendar.MAY, 2001),\n                                    date(17, Calendar.JUNE, 2001))));\n        s2.add(new Task(\"Design Signoff\",\n               new SimpleTimePeriod(date(30, Calendar.JUNE, 2001),\n                                    date(30, Calendar.JUNE, 2001))));\n        s2.add(new Task(\"Alpha Implementation\",\n               new SimpleTimePeriod(date(1, Calendar.JULY, 2001),\n                                    date(12, Calendar.SEPTEMBER, 2001))));\n        s2.add(new Task(\"Design Review\",\n               new SimpleTimePeriod(date(12, Calendar.SEPTEMBER, 2001),\n                                    date(22, Calendar.SEPTEMBER, 2001))));\n        s2.add(new Task(\"Revised Design Signoff\",\n               new SimpleTimePeriod(date(25, Calendar.SEPTEMBER, 2001),\n                                    date(27, Calendar.SEPTEMBER, 2001))));\n        s2.add(new Task(\"Beta Implementation\",\n               new SimpleTimePeriod(date(27, Calendar.SEPTEMBER, 2001),\n                                    date(30, Calendar.OCTOBER, 2001))));\n        s2.add(new Task(\"Testing\",\n               new SimpleTimePeriod(date(31, Calendar.OCTOBER, 2001),\n                                    date(17, Calendar.NOVEMBER, 2001))));\n        s2.add(new Task(\"Final Implementation\",\n               new SimpleTimePeriod(date(18, Calendar.NOVEMBER, 2001),\n                                    date(5, Calendar.DECEMBER, 2001))));\n        s2.add(new Task(\"Signoff\",\n               new SimpleTimePeriod(date(10, Calendar.DECEMBER, 2001),\n                                    date(11, Calendar.DECEMBER, 2001))));\n\n        TaskSeriesCollection collection = new TaskSeriesCollection();\n        collection.add(s1);\n        collection.add(s2);\n\n        return collection;\n    }\n",
        "begin_line": 209,
        "end_line": 292,
        "comment": "\n     * Creates a sample dataset for a Gantt chart.\n     *\n     * @return The dataset.\n     ",
        "child_ranges": [
            "(line 211,col 9)-(line 211,col 52)",
            "(line 212,col 9)-(line 214,col 69)",
            "(line 215,col 9)-(line 217,col 69)",
            "(line 218,col 9)-(line 220,col 67)",
            "(line 221,col 9)-(line 223,col 68)",
            "(line 224,col 9)-(line 226,col 68)",
            "(line 227,col 9)-(line 229,col 69)",
            "(line 230,col 9)-(line 232,col 70)",
            "(line 233,col 9)-(line 235,col 71)",
            "(line 236,col 9)-(line 238,col 74)",
            "(line 239,col 9)-(line 241,col 72)",
            "(line 242,col 9)-(line 244,col 73)",
            "(line 245,col 9)-(line 247,col 73)",
            "(line 249,col 9)-(line 249,col 49)",
            "(line 250,col 9)-(line 252,col 69)",
            "(line 253,col 9)-(line 255,col 69)",
            "(line 256,col 9)-(line 258,col 68)",
            "(line 259,col 9)-(line 261,col 69)",
            "(line 262,col 9)-(line 264,col 69)",
            "(line 265,col 9)-(line 267,col 74)",
            "(line 268,col 9)-(line 270,col 74)",
            "(line 271,col 9)-(line 273,col 74)",
            "(line 274,col 9)-(line 276,col 72)",
            "(line 277,col 9)-(line 279,col 73)",
            "(line 280,col 9)-(line 282,col 72)",
            "(line 283,col 9)-(line 285,col 73)",
            "(line 287,col 9)-(line 287,col 69)",
            "(line 288,col 9)-(line 288,col 27)",
            "(line 289,col 9)-(line 289,col 27)",
            "(line 291,col 9)-(line 291,col 26)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.date(int, int, int)",
        "snippet": "    private static Date date(int day, int month, int year) {\n\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(year, month, day);\n        Date result = calendar.getTime();\n        return result;\n\n    }    /**\n",
        "begin_line": 303,
        "end_line": 310,
        "comment": "\n     * Utility method for creating <code>Date</code> objects.\n     *\n     * @param day  the date.\n     * @param month  the month.\n     * @param year  the year.\n     *\n     * @return a date.\n     ",
        "child_ranges": [
            "(line 305,col 9)-(line 305,col 51)",
            "(line 306,col 9)-(line 306,col 39)",
            "(line 307,col 9)-(line 307,col 41)",
            "(line 308,col 9)-(line 308,col 22)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.GanttChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/GanttChartTests.java",
        "signature": "org.jfree.chart.junit.GanttChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 325,col 13)-(line 325,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineChart3DTests.class);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 53)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.LineChart3DTests(java.lang.String)",
        "snippet": "    public LineChart3DTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createLineChart3D();\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 41)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 108,
        "end_line": 125,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 32)",
            "(line 111,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 136,col 49)",
            "(line 138,col 9)-(line 139,col 27)",
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 145,col 35)",
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 147,col 38)",
            "(line 148,col 9)-(line 149,col 74)",
            "(line 150,col 9)-(line 151,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 159,
        "end_line": 167,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 59)",
            "(line 162,col 9)-(line 163,col 57)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 166,col 9)-(line 166,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 173,
        "end_line": 181,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 64)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.createLineChart3D()",
        "snippet": "    private static JFreeChart createLineChart3D() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createLineChart3D(\n            \"Line Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 188,
        "end_line": 210,
        "comment": "\n     * Create a line chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 194,col 47)",
            "(line 196,col 9)-(line 197,col 27)",
            "(line 200,col 9)-(line 208,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChart3DTests.java",
        "signature": "org.jfree.chart.junit.LineChart3DTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 227,col 13)-(line 227,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LineChartTests.class);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 51)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.LineChartTests(java.lang.String)",
        "snippet": "    public LineChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createLineChart();\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 39)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 108,
        "end_line": 125,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 32)",
            "(line 111,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                   + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": "\n     * Replaces the chart's dataset and then checks that the new dataset is OK.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 136,col 49)",
            "(line 138,col 9)-(line 139,col 27)",
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 145,col 35)",
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 147,col 38)",
            "(line 148,col 9)-(line 149,col 74)",
            "(line 150,col 9)-(line 151,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 159,
        "end_line": 167,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 59)",
            "(line 162,col 9)-(line 163,col 57)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 166,col 9)-(line 166,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 173,
        "end_line": 181,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 64)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.createLineChart()",
        "snippet": "    private static JFreeChart createLineChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createLineChart(\n            \"Line Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 188,
        "end_line": 210,
        "comment": "\n     * Create a line chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 194,col 47)",
            "(line 196,col 9)-(line 197,col 27)",
            "(line 200,col 9)-(line 208,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.LineChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/LineChartTests.java",
        "signature": "org.jfree.chart.junit.LineChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 227,col 13)-(line 227,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedAreaChartTests.class);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 58)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.StackedAreaChartTests(java.lang.String)",
        "snippet": "    public StackedAreaChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 108,
        "end_line": 125,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 32)",
            "(line 111,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                    + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 136,col 49)",
            "(line 138,col 9)-(line 139,col 27)",
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 145,col 35)",
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 147,col 38)",
            "(line 148,col 9)-(line 149,col 75)",
            "(line 150,col 9)-(line 151,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n            = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 159,
        "end_line": 167,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 59)",
            "(line 162,col 9)-(line 163,col 53)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 166,col 9)-(line 166,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 173,
        "end_line": 181,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 64)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createStackedAreaChart(\n            \"Stacked Area Chart\",  // chart title\n            \"Domain\", \"Range\",\n            dataset,      // data\n            PlotOrientation.HORIZONTAL,\n            true,         // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 188,
        "end_line": 210,
        "comment": "\n     * Create a stacked bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 194,col 47)",
            "(line 196,col 9)-(line 197,col 27)",
            "(line 200,col 9)-(line 208,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedAreaChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "signature": "org.jfree.chart.junit.StackedAreaChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 225,
        "end_line": 227,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 226,col 13)-(line 226,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedBarChart3DTests.class);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 59)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.StackedBarChart3DTests(java.lang.String)",
        "snippet": "    public StackedBarChart3DTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 94,col 9)-(line 94,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 101,col 9)-(line 101,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n        }\n        assertTrue(success);\n\n    }\n",
        "begin_line": 108,
        "end_line": 125,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 110,col 9)-(line 110,col 32)",
            "(line 111,col 9)-(line 122,col 9)",
            "(line 123,col 9)-(line 123,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                    + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 130,
        "end_line": 153,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 136,col 49)",
            "(line 138,col 9)-(line 139,col 27)",
            "(line 141,col 9)-(line 141,col 46)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 64)",
            "(line 144,col 9)-(line 144,col 33)",
            "(line 145,col 9)-(line 145,col 35)",
            "(line 146,col 9)-(line 146,col 45)",
            "(line 147,col 9)-(line 147,col 38)",
            "(line 148,col 9)-(line 149,col 75)",
            "(line 150,col 9)-(line 151,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 159,
        "end_line": 167,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 160,col 9)-(line 160,col 64)",
            "(line 161,col 9)-(line 161,col 59)",
            "(line 162,col 9)-(line 163,col 57)",
            "(line 164,col 9)-(line 164,col 50)",
            "(line 165,col 9)-(line 165,col 74)",
            "(line 166,col 9)-(line 166,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 173,
        "end_line": 181,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 174,col 9)-(line 174,col 64)",
            "(line 175,col 9)-(line 175,col 59)",
            "(line 176,col 9)-(line 177,col 53)",
            "(line 178,col 9)-(line 178,col 48)",
            "(line 179,col 9)-(line 179,col 67)",
            "(line 180,col 9)-(line 180,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createStackedBarChart3D(\n            \"Stacked Bar Chart 3D\",  // chart title\n            \"Domain\", \"Range\",\n            dataset,      // data\n            PlotOrientation.HORIZONTAL,\n            true,         // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 188,
        "end_line": 210,
        "comment": "\n     * Create a stacked bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 191,col 9)-(line 194,col 47)",
            "(line 196,col 9)-(line 197,col 27)",
            "(line 200,col 9)-(line 208,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChart3DTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChart3DTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 225,
        "end_line": 227,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 226,col 13)-(line 226,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StackedBarChartTests.class);\n    }\n",
        "begin_line": 88,
        "end_line": 90,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 89,col 9)-(line 89,col 57)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.StackedBarChartTests(java.lang.String)",
        "snippet": "    public StackedBarChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 98,col 9)-(line 98,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createChart();\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 35)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n          success = false;\n        }\n\n        assertTrue(success);\n\n    }\n",
        "begin_line": 112,
        "end_line": 131,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 114,col 9)-(line 114,col 32)",
            "(line 116,col 9)-(line 127,col 9)",
            "(line 129,col 9)-(line 129,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testReplaceDataset()",
        "snippet": "    public void testReplaceDataset() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-30), new Integer(-20)},\n             {new Integer(-10), new Integer(10)},\n             {new Integer(20), new Integer(30)}};\n\n        CategoryDataset newData = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        plot.setDataset(newData);\n        assertEquals(true, l.flag);\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around -30: \"\n                    + range.getLowerBound(), range.getLowerBound() <= -30);\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n    }\n",
        "begin_line": 136,
        "end_line": 159,
        "comment": "\n     * Replaces the dataset and checks that it has changed as expected.\n     ",
        "child_ranges": [
            "(line 139,col 9)-(line 142,col 49)",
            "(line 144,col 9)-(line 145,col 27)",
            "(line 147,col 9)-(line 147,col 46)",
            "(line 148,col 9)-(line 148,col 40)",
            "(line 149,col 9)-(line 149,col 64)",
            "(line 150,col 9)-(line 150,col 33)",
            "(line 151,col 9)-(line 151,col 35)",
            "(line 152,col 9)-(line 152,col 45)",
            "(line 153,col 9)-(line 153,col 38)",
            "(line 154,col 9)-(line 155,col 75)",
            "(line 156,col 9)-(line 157,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 165,
        "end_line": 173,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 166,col 9)-(line 166,col 64)",
            "(line 167,col 9)-(line 167,col 59)",
            "(line 168,col 9)-(line 169,col 57)",
            "(line 170,col 9)-(line 170,col 50)",
            "(line 171,col 9)-(line 171,col 74)",
            "(line 172,col 9)-(line 172,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 179,
        "end_line": 187,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 180,col 9)-(line 180,col 64)",
            "(line 181,col 9)-(line 181,col 59)",
            "(line 182,col 9)-(line 183,col 53)",
            "(line 184,col 9)-(line 184,col 48)",
            "(line 185,col 9)-(line 185,col 67)",
            "(line 186,col 9)-(line 186,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.createChart()",
        "snippet": "    private static JFreeChart createChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createStackedBarChart(\n            \"Stacked Bar Chart\",  // chart title\n            \"Domain\", \"Range\",\n            dataset,      // data\n            PlotOrientation.HORIZONTAL,\n            true,         // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 194,
        "end_line": 216,
        "comment": "\n     * Create a stacked bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 200,col 47)",
            "(line 202,col 9)-(line 203,col 27)",
            "(line 206,col 9)-(line 214,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.StackedBarChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "signature": "org.jfree.chart.junit.StackedBarChartTests.LocalListener.chartChanged(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "        public void chartChanged(ChartChangeEvent event) {\n            this.flag = true;\n        }\n",
        "begin_line": 231,
        "end_line": 233,
        "comment": "\n         * Event handler.\n         *\n         * @param event  the event.\n         ",
        "child_ranges": [
            "(line 232,col 13)-(line 232,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(WaterfallChartTests.class);\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 81,col 9)-(line 81,col 56)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.WaterfallChartTests(java.lang.String)",
        "snippet": "    public WaterfallChartTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.setUp()",
        "snippet": "    protected void setUp() {\n        this.chart = createWaterfallChart();\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\n     * Common test setup.\n     ",
        "child_ranges": [
            "(line 97,col 9)-(line 97,col 44)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }\n",
        "begin_line": 104,
        "end_line": 123,
        "comment": "\n     * Draws the chart with a null info object to make sure that no exceptions \n     * are thrown (a problem that was occurring at one point).\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 32)",
            "(line 108,col 9)-(line 119,col 9)",
            "(line 121,col 9)-(line 121,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.testSetSeriesToolTipGenerator()",
        "snippet": "    public void testSetSeriesToolTipGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryToolTipGenerator tt\n                = new StandardCategoryToolTipGenerator();\n        renderer.setSeriesToolTipGenerator(0, tt);\n        CategoryToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0);\n        assertTrue(tt2 == tt);\n    }\n",
        "begin_line": 129,
        "end_line": 137,
        "comment": "\n     * Check that setting a tool tip generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 130,col 9)-(line 130,col 64)",
            "(line 131,col 9)-(line 131,col 59)",
            "(line 132,col 9)-(line 133,col 57)",
            "(line 134,col 9)-(line 134,col 50)",
            "(line 135,col 9)-(line 135,col 74)",
            "(line 136,col 9)-(line 136,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.testSetSeriesURLGenerator()",
        "snippet": "    public void testSetSeriesURLGenerator() {\n        CategoryPlot plot = (CategoryPlot) this.chart.getPlot();\n        CategoryItemRenderer renderer = plot.getRenderer();\n        StandardCategoryURLGenerator url1\n                = new StandardCategoryURLGenerator();\n        renderer.setSeriesURLGenerator(0, url1);\n        CategoryURLGenerator url2 = renderer.getURLGenerator(0, 0);\n        assertTrue(url2 == url1);\n    }\n",
        "begin_line": 143,
        "end_line": 151,
        "comment": "\n     * Check that setting a URL generator for a series does override the\n     * default generator.\n     ",
        "child_ranges": [
            "(line 144,col 9)-(line 144,col 64)",
            "(line 145,col 9)-(line 145,col 59)",
            "(line 146,col 9)-(line 147,col 53)",
            "(line 148,col 9)-(line 148,col 48)",
            "(line 149,col 9)-(line 149,col 67)",
            "(line 150,col 9)-(line 150,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.junit.WaterfallChartTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "signature": "org.jfree.chart.junit.WaterfallChartTests.createWaterfallChart()",
        "snippet": "    private static JFreeChart createWaterfallChart() {\n\n        // create a dataset...\n        Number[][] data = new Integer[][]\n            {{new Integer(-3), new Integer(-2)},\n             {new Integer(-1), new Integer(1)},\n             {new Integer(2), new Integer(3)}};\n\n        CategoryDataset dataset = DatasetUtilities.createCategoryDataset(\"S\", \n                \"C\", data);\n\n        // create the chart...\n        return ChartFactory.createWaterfallChart(\n            \"Waterfall Chart\",\n            \"Domain\", \"Range\",\n            dataset,\n            PlotOrientation.HORIZONTAL,\n            true,     // include legend\n            true,\n            true\n        );\n\n    }\n",
        "begin_line": 158,
        "end_line": 180,
        "comment": "\n     * Create a bar chart with sample data in the range -3 to +3.\n     *\n     * @return The chart.\n     ",
        "child_ranges": [
            "(line 161,col 9)-(line 164,col 47)",
            "(line 166,col 9)-(line 167,col 27)",
            "(line 170,col 9)-(line 178,col 10)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(CategoryPlotTests.class);\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 107,col 9)-(line 107,col 54)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.CategoryPlotTests(java.lang.String)",
        "snippet": "    public CategoryPlotTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 116,col 9)-(line 116,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAxisRange()",
        "snippet": "    public void testAxisRange() {\n        DefaultCategoryDataset datasetA = new DefaultCategoryDataset();\n        DefaultCategoryDataset datasetB = new DefaultCategoryDataset();\n        datasetB.addValue(50.0, \"R1\", \"C1\");\n        datasetB.addValue(80.0, \"R1\", \"C1\");\n        CategoryPlot plot = new CategoryPlot(datasetA, new CategoryAxis(null), \n                new NumberAxis(null), new LineAndShapeRenderer());\n        plot.setDataset(1, datasetB);\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        Range r = plot.getRangeAxis().getRange();\n        assertEquals(84.0, r.getUpperBound(), 0.00001);\n    }\n",
        "begin_line": 122,
        "end_line": 133,
        "comment": "\n     * A test for a bug reported in the forum.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 123,col 71)",
            "(line 124,col 9)-(line 124,col 71)",
            "(line 125,col 9)-(line 125,col 44)",
            "(line 126,col 9)-(line 126,col 44)",
            "(line 127,col 9)-(line 128,col 66)",
            "(line 129,col 9)-(line 129,col 37)",
            "(line 130,col 9)-(line 130,col 56)",
            "(line 131,col 9)-(line 131,col 49)",
            "(line 132,col 9)-(line 132,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testEquals()",
        "snippet": "    public void testEquals() {\n        \n        CategoryPlot plot1 = new CategoryPlot();\n        CategoryPlot plot2 = new CategoryPlot();\n        assertTrue(plot1.equals(plot2));    \n        assertTrue(plot2.equals(plot1));\n        \n        // orientation...\n        plot1.setOrientation(PlotOrientation.HORIZONTAL);\n        assertFalse(plot1.equals(plot2));\n        plot2.setOrientation(PlotOrientation.HORIZONTAL);\n        assertTrue(plot1.equals(plot2));\n        \n        // axisOffset...\n        plot1.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertFalse(plot1.equals(plot2));\n        plot2.setAxisOffset(new RectangleInsets(0.05, 0.05, 0.05, 0.05));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxis - no longer a separate field but test anyway...\n        plot1.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(new CategoryAxis(\"Category Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxes...\n        plot1.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxis(11, new CategoryAxis(\"Secondary Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocation - no longer a separate field but test anyway...\n        plot1.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // domainAxisLocations...\n        plot1.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // draw shared domain axis...\n        plot1.setDrawSharedDomainAxis(!plot1.getDrawSharedDomainAxis());\n        assertFalse(plot1.equals(plot2));\n        plot2.setDrawSharedDomainAxis(!plot2.getDrawSharedDomainAxis());\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeAxis - no longer a separate field but test anyway...\n        plot1.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(new NumberAxis(\"Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxes...\n        plot1.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxis(11, new NumberAxis(\"Secondary Range Axis\"));\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocation - no longer a separate field but test anyway...\n        plot1.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeAxisLocations...\n        plot1.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeAxisLocation(11, AxisLocation.TOP_OR_RIGHT);\n        assertTrue(plot1.equals(plot2));\n        \n        // datasetToDomainAxisMap...\n        plot1.mapDatasetToDomainAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToDomainAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n\n        // datasetToRangeAxisMap...\n        plot1.mapDatasetToRangeAxis(11, 11);\n        assertFalse(plot1.equals(plot2));\n        plot2.mapDatasetToRangeAxis(11, 11);\n        assertTrue(plot1.equals(plot2));\n        \n        // renderer - no longer a separate field but test anyway...\n        plot1.setRenderer(new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // renderers...\n        plot1.setRenderer(11, new AreaRenderer());\n        assertFalse(plot1.equals(plot2));\n        plot2.setRenderer(11, new AreaRenderer());\n        assertTrue(plot1.equals(plot2));\n        \n        // rendering order...\n        plot1.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDatasetRenderingOrder(DatasetRenderingOrder.FORWARD);\n        assertTrue(plot1.equals(plot2));\n\n        // columnRenderingOrder...\n        plot1.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setColumnRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // rowRenderingOrder...\n        plot1.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRowRenderingOrder(SortOrder.DESCENDING);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinesVisible\n        plot1.setDomainGridlinesVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinesVisible(true);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlinePosition\n        plot1.setDomainGridlinePosition(CategoryAnchor.END);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePosition(CategoryAnchor.END);\n        assertTrue(plot1.equals(plot2));\n\n        // domainGridlineStroke\n        Stroke stroke = new BasicStroke(2.0f);\n        plot1.setDomainGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // domainGridlinePaint\n        plot1.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setDomainGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.blue, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinesVisible\n        plot1.setRangeGridlinesVisible(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinesVisible(false);\n        assertTrue(plot1.equals(plot2));\n\n        // rangeGridlineStroke\n        plot1.setRangeGridlineStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlineStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeGridlinePaint\n        plot1.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeGridlinePaint(new GradientPaint(1.0f, 2.0f, Color.green, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // anchorValue\n        plot1.setAnchorValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setAnchorValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairVisible\n        plot1.setRangeCrosshairVisible(true);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairVisible(true);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairValue\n        plot1.setRangeCrosshairValue(100.0);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairValue(100.0);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairStroke\n        plot1.setRangeCrosshairStroke(stroke);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairStroke(stroke);\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairPaint\n        plot1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        assertTrue(plot1.equals(plot2));\n        \n        // rangeCrosshairLockedOnData\n        plot1.setRangeCrosshairLockedOnData(false);\n        assertFalse(plot1.equals(plot2));\n        plot2.setRangeCrosshairLockedOnData(false);\n        assertTrue(plot1.equals(plot2));\n        \n        // range markers - no longer separate fields but test anyway...\n        plot1.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        plot1.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // foreground range markers...\n        plot1.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(4.0), Layer.FOREGROUND);\n        assertTrue(plot1.equals(plot2));\n        \n        // background range markers...\n        plot1.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertFalse(plot1.equals(plot2));\n        plot2.addRangeMarker(1, new ValueMarker(5.0), Layer.BACKGROUND);\n        assertTrue(plot1.equals(plot2));\n\n        // annotations\n        plot1.addAnnotation(\n            new CategoryTextAnnotation(\"Text\", \"Category\", 43.0)\n        );\n        assertFalse(plot1.equals(plot2));\n        plot2.addAnnotation(new CategoryTextAnnotation(\"Text\", \"Category\", \n                43.0));\n        assertTrue(plot1.equals(plot2));\n        \n        // weight\n        plot1.setWeight(3);\n        assertFalse(plot1.equals(plot2));\n        plot2.setWeight(3);\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed domain axis space...\n        plot1.setFixedDomainAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedDomainAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n        \n        // fixed range axis space...\n        plot1.setFixedRangeAxisSpace(new AxisSpace());\n        assertFalse(plot1.equals(plot2));\n        plot2.setFixedRangeAxisSpace(new AxisSpace());\n        assertTrue(plot1.equals(plot2));\n\n    }\n",
        "begin_line": 138,
        "end_line": 388,
        "comment": "\n     * Test that the equals() method differentiates all the required fields.\n     ",
        "child_ranges": [
            "(line 140,col 9)-(line 140,col 48)",
            "(line 141,col 9)-(line 141,col 48)",
            "(line 142,col 9)-(line 142,col 40)",
            "(line 143,col 9)-(line 143,col 40)",
            "(line 146,col 9)-(line 146,col 57)",
            "(line 147,col 9)-(line 147,col 41)",
            "(line 148,col 9)-(line 148,col 57)",
            "(line 149,col 9)-(line 149,col 40)",
            "(line 152,col 9)-(line 152,col 73)",
            "(line 153,col 9)-(line 153,col 41)",
            "(line 154,col 9)-(line 154,col 73)",
            "(line 155,col 9)-(line 155,col 40)",
            "(line 158,col 9)-(line 158,col 63)",
            "(line 159,col 9)-(line 159,col 41)",
            "(line 160,col 9)-(line 160,col 63)",
            "(line 161,col 9)-(line 161,col 40)",
            "(line 164,col 9)-(line 164,col 68)",
            "(line 165,col 9)-(line 165,col 41)",
            "(line 166,col 9)-(line 166,col 68)",
            "(line 167,col 9)-(line 167,col 40)",
            "(line 170,col 9)-(line 170,col 63)",
            "(line 171,col 9)-(line 171,col 41)",
            "(line 172,col 9)-(line 172,col 63)",
            "(line 173,col 9)-(line 173,col 40)",
            "(line 176,col 9)-(line 176,col 67)",
            "(line 177,col 9)-(line 177,col 41)",
            "(line 178,col 9)-(line 178,col 67)",
            "(line 179,col 9)-(line 179,col 40)",
            "(line 182,col 9)-(line 182,col 72)",
            "(line 183,col 9)-(line 183,col 41)",
            "(line 184,col 9)-(line 184,col 72)",
            "(line 185,col 9)-(line 185,col 40)",
            "(line 188,col 9)-(line 188,col 57)",
            "(line 189,col 9)-(line 189,col 41)",
            "(line 190,col 9)-(line 190,col 57)",
            "(line 191,col 9)-(line 191,col 40)",
            "(line 194,col 9)-(line 194,col 71)",
            "(line 195,col 9)-(line 195,col 41)",
            "(line 196,col 9)-(line 196,col 71)",
            "(line 197,col 9)-(line 197,col 40)",
            "(line 200,col 9)-(line 200,col 62)",
            "(line 201,col 9)-(line 201,col 41)",
            "(line 202,col 9)-(line 202,col 62)",
            "(line 203,col 9)-(line 203,col 40)",
            "(line 206,col 9)-(line 206,col 66)",
            "(line 207,col 9)-(line 207,col 41)",
            "(line 208,col 9)-(line 208,col 66)",
            "(line 209,col 9)-(line 209,col 40)",
            "(line 212,col 9)-(line 212,col 45)",
            "(line 213,col 9)-(line 213,col 41)",
            "(line 214,col 9)-(line 214,col 45)",
            "(line 215,col 9)-(line 215,col 40)",
            "(line 218,col 9)-(line 218,col 44)",
            "(line 219,col 9)-(line 219,col 41)",
            "(line 220,col 9)-(line 220,col 44)",
            "(line 221,col 9)-(line 221,col 40)",
            "(line 224,col 9)-(line 224,col 46)",
            "(line 225,col 9)-(line 225,col 41)",
            "(line 226,col 9)-(line 226,col 46)",
            "(line 227,col 9)-(line 227,col 40)",
            "(line 230,col 9)-(line 230,col 50)",
            "(line 231,col 9)-(line 231,col 41)",
            "(line 232,col 9)-(line 232,col 50)",
            "(line 233,col 9)-(line 233,col 40)",
            "(line 236,col 9)-(line 236,col 70)",
            "(line 237,col 9)-(line 237,col 41)",
            "(line 238,col 9)-(line 238,col 70)",
            "(line 239,col 9)-(line 239,col 40)",
            "(line 242,col 9)-(line 242,col 60)",
            "(line 243,col 9)-(line 243,col 41)",
            "(line 244,col 9)-(line 244,col 60)",
            "(line 245,col 9)-(line 245,col 40)",
            "(line 248,col 9)-(line 248,col 57)",
            "(line 249,col 9)-(line 249,col 41)",
            "(line 250,col 9)-(line 250,col 57)",
            "(line 251,col 9)-(line 251,col 40)",
            "(line 254,col 9)-(line 254,col 46)",
            "(line 255,col 9)-(line 255,col 41)",
            "(line 256,col 9)-(line 256,col 46)",
            "(line 257,col 9)-(line 257,col 40)",
            "(line 260,col 9)-(line 260,col 60)",
            "(line 261,col 9)-(line 261,col 41)",
            "(line 262,col 9)-(line 262,col 60)",
            "(line 263,col 9)-(line 263,col 40)",
            "(line 266,col 9)-(line 266,col 46)",
            "(line 267,col 9)-(line 267,col 46)",
            "(line 268,col 9)-(line 268,col 41)",
            "(line 269,col 9)-(line 269,col 46)",
            "(line 270,col 9)-(line 270,col 40)",
            "(line 273,col 9)-(line 274,col 43)",
            "(line 275,col 9)-(line 275,col 41)",
            "(line 276,col 9)-(line 277,col 43)",
            "(line 278,col 9)-(line 278,col 40)",
            "(line 281,col 9)-(line 281,col 46)",
            "(line 282,col 9)-(line 282,col 41)",
            "(line 283,col 9)-(line 283,col 46)",
            "(line 284,col 9)-(line 284,col 40)",
            "(line 287,col 9)-(line 287,col 45)",
            "(line 288,col 9)-(line 288,col 41)",
            "(line 289,col 9)-(line 289,col 45)",
            "(line 290,col 9)-(line 290,col 40)",
            "(line 293,col 9)-(line 294,col 43)",
            "(line 295,col 9)-(line 295,col 41)",
            "(line 296,col 9)-(line 297,col 43)",
            "(line 298,col 9)-(line 298,col 40)",
            "(line 301,col 9)-(line 301,col 36)",
            "(line 302,col 9)-(line 302,col 41)",
            "(line 303,col 9)-(line 303,col 36)",
            "(line 304,col 9)-(line 304,col 40)",
            "(line 307,col 9)-(line 307,col 45)",
            "(line 308,col 9)-(line 308,col 41)",
            "(line 309,col 9)-(line 309,col 45)",
            "(line 310,col 9)-(line 310,col 40)",
            "(line 313,col 9)-(line 313,col 44)",
            "(line 314,col 9)-(line 314,col 41)",
            "(line 315,col 9)-(line 315,col 44)",
            "(line 316,col 9)-(line 316,col 40)",
            "(line 319,col 9)-(line 319,col 46)",
            "(line 320,col 9)-(line 320,col 41)",
            "(line 321,col 9)-(line 321,col 46)",
            "(line 322,col 9)-(line 322,col 40)",
            "(line 325,col 9)-(line 326,col 43)",
            "(line 327,col 9)-(line 327,col 41)",
            "(line 328,col 9)-(line 329,col 43)",
            "(line 330,col 9)-(line 330,col 40)",
            "(line 333,col 9)-(line 333,col 51)",
            "(line 334,col 9)-(line 334,col 41)",
            "(line 335,col 9)-(line 335,col 51)",
            "(line 336,col 9)-(line 336,col 40)",
            "(line 339,col 9)-(line 339,col 69)",
            "(line 340,col 9)-(line 340,col 41)",
            "(line 341,col 9)-(line 341,col 69)",
            "(line 342,col 9)-(line 342,col 40)",
            "(line 344,col 9)-(line 344,col 69)",
            "(line 345,col 9)-(line 345,col 41)",
            "(line 346,col 9)-(line 346,col 69)",
            "(line 347,col 9)-(line 347,col 40)",
            "(line 350,col 9)-(line 350,col 72)",
            "(line 351,col 9)-(line 351,col 41)",
            "(line 352,col 9)-(line 352,col 72)",
            "(line 353,col 9)-(line 353,col 40)",
            "(line 356,col 9)-(line 356,col 72)",
            "(line 357,col 9)-(line 357,col 41)",
            "(line 358,col 9)-(line 358,col 72)",
            "(line 359,col 9)-(line 359,col 40)",
            "(line 362,col 9)-(line 364,col 10)",
            "(line 365,col 9)-(line 365,col 41)",
            "(line 366,col 9)-(line 367,col 23)",
            "(line 368,col 9)-(line 368,col 40)",
            "(line 371,col 9)-(line 371,col 27)",
            "(line 372,col 9)-(line 372,col 41)",
            "(line 373,col 9)-(line 373,col 27)",
            "(line 374,col 9)-(line 374,col 40)",
            "(line 377,col 9)-(line 377,col 55)",
            "(line 378,col 9)-(line 378,col 41)",
            "(line 379,col 9)-(line 379,col 55)",
            "(line 380,col 9)-(line 380,col 40)",
            "(line 383,col 9)-(line 383,col 54)",
            "(line 384,col 9)-(line 384,col 41)",
            "(line 385,col 9)-(line 385,col 54)",
            "(line 386,col 9)-(line 386,col 40)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testCloning()",
        "snippet": "    public void testCloning() {\n        CategoryPlot p1 = new CategoryPlot();\n        p1.setRangeCrosshairPaint(new GradientPaint(1.0f, 2.0f, Color.white, \n                3.0f, 4.0f, Color.yellow));\n        CategoryPlot p2 = null;\n        try {\n            p2 = (CategoryPlot) p1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(p1 != p2);\n        assertTrue(p1.getClass() == p2.getClass());\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 393,
        "end_line": 408,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 394,col 9)-(line 394,col 45)",
            "(line 395,col 9)-(line 396,col 43)",
            "(line 397,col 9)-(line 397,col 31)",
            "(line 398,col 9)-(line 404,col 9)",
            "(line 405,col 9)-(line 405,col 29)",
            "(line 406,col 9)-(line 406,col 51)",
            "(line 407,col 9)-(line 407,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.HORIZONTAL);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertTrue(p1.equals(p2));\n    }\n",
        "begin_line": 413,
        "end_line": 438,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 70)",
            "(line 416,col 9)-(line 416,col 61)",
            "(line 417,col 9)-(line 417,col 55)",
            "(line 418,col 9)-(line 418,col 49)",
            "(line 419,col 9)-(line 420,col 26)",
            "(line 421,col 9)-(line 421,col 54)",
            "(line 422,col 9)-(line 422,col 31)",
            "(line 423,col 9)-(line 436,col 9)",
            "(line 437,col 9)-(line 437,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization2()",
        "snippet": "    public void testSerialization2() {\n\n        DefaultCategoryDataset data = new DefaultCategoryDataset();\n        CategoryAxis domainAxis = new CategoryAxis(\"Domain\");\n        NumberAxis rangeAxis = new NumberAxis(\"Range\");\n        BarRenderer renderer = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(data, domainAxis, rangeAxis, \n                renderer);\n        p1.setOrientation(PlotOrientation.VERTICAL);\n        CategoryPlot p2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n\n    }\n",
        "begin_line": 443,
        "end_line": 470,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 445,col 9)-(line 445,col 67)",
            "(line 446,col 9)-(line 446,col 61)",
            "(line 447,col 9)-(line 447,col 55)",
            "(line 448,col 9)-(line 448,col 49)",
            "(line 449,col 9)-(line 450,col 26)",
            "(line 451,col 9)-(line 451,col 52)",
            "(line 452,col 9)-(line 452,col 31)",
            "(line 454,col 9)-(line 467,col 9)",
            "(line 468,col 9)-(line 468,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3()",
        "snippet": "    public void testSerialization3() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n\n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 475,
        "end_line": 515,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 476,col 9)-(line 476,col 70)",
            "(line 477,col 9)-(line 486,col 10)",
            "(line 487,col 9)-(line 487,col 33)",
            "(line 490,col 9)-(line 503,col 9)",
            "(line 506,col 9)-(line 506,col 30)",
            "(line 507,col 9)-(line 513,col 9)",
            "(line 514,col 9)-(line 514,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4()",
        "snippet": "    public void testSerialization4() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createBarChart(\n            \"Test Chart\",\n            \"Category Axis\",\n            \"Value Axis\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            true,\n            true,\n            false\n        );\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n        JFreeChart chart2 = null;\n        \n        // serialize and deserialize the chart....\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(chart);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            chart2 = (JFreeChart) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(chart, chart2);\n        \n        // now check that the chart is usable...\n        boolean passed = true;\n        try {\n            chart2.createBufferedImage(300, 200);\n        }\n        catch (Exception e) {\n            passed = false;  \n            e.printStackTrace();            \n        }\n        assertTrue(passed);\n    }\n",
        "begin_line": 520,
        "end_line": 564,
        "comment": "\n     * This test ensures that a plot with markers is serialized correctly.\n     ",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 70)",
            "(line 522,col 9)-(line 531,col 10)",
            "(line 532,col 9)-(line 532,col 59)",
            "(line 533,col 9)-(line 533,col 68)",
            "(line 534,col 9)-(line 534,col 76)",
            "(line 535,col 9)-(line 535,col 33)",
            "(line 538,col 9)-(line 551,col 9)",
            "(line 552,col 9)-(line 552,col 36)",
            "(line 555,col 9)-(line 555,col 30)",
            "(line 556,col 9)-(line 562,col 9)",
            "(line 563,col 9)-(line 563,col 27)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization5()",
        "snippet": "    public void testSerialization5() {\n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        CategoryAxis domainAxis1 = new CategoryAxis(\"Domain 1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Range 1\");\n        BarRenderer renderer1 = new BarRenderer();\n        CategoryPlot p1 = new CategoryPlot(dataset1, domainAxis1, rangeAxis1, \n                renderer1);\n        CategoryAxis domainAxis2 = new CategoryAxis(\"Domain 2\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Range 2\");\n        BarRenderer renderer2 = new BarRenderer();\n        DefaultCategoryDataset dataset2 = new DefaultCategoryDataset();\n        p1.setDataset(1, dataset2);\n        p1.setDomainAxis(1, domainAxis2);\n        p1.setRangeAxis(1, rangeAxis2);\n        p1.setRenderer(1, renderer2);\n        CategoryPlot p2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(p1);\n            out.close();\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            p2 = (CategoryPlot) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            fail(e.toString());\n        }\n        assertEquals(p1, p2);\n        \n        // now check that all datasets, renderers and axes are being listened \n        // too...\n        CategoryAxis domainAxisA = p2.getDomainAxis(0);\n        NumberAxis rangeAxisA = (NumberAxis) p2.getRangeAxis(0);\n        DefaultCategoryDataset datasetA \n                = (DefaultCategoryDataset) p2.getDataset(0);\n        BarRenderer rendererA = (BarRenderer) p2.getRenderer(0);\n        CategoryAxis domainAxisB = p2.getDomainAxis(1);\n        NumberAxis rangeAxisB = (NumberAxis) p2.getRangeAxis(1);\n        DefaultCategoryDataset datasetB \n                = (DefaultCategoryDataset) p2.getDataset(1);\n        BarRenderer rendererB  = (BarRenderer) p2.getRenderer(1);\n        assertTrue(datasetA.hasListener(p2));\n        assertTrue(domainAxisA.hasListener(p2));\n        assertTrue(rangeAxisA.hasListener(p2));\n        assertTrue(rendererA.hasListener(p2));\n        assertTrue(datasetB.hasListener(p2));\n        assertTrue(domainAxisB.hasListener(p2));\n        assertTrue(rangeAxisB.hasListener(p2));\n        assertTrue(rendererB.hasListener(p2));\n    }\n",
        "begin_line": 571,
        "end_line": 622,
        "comment": "\n     * Tests a bug where the plot is no longer registered as a listener\n     * with the dataset(s) and axes after deserialization.  See patch 1209475\n     * at SourceForge.\n     ",
        "child_ranges": [
            "(line 572,col 9)-(line 572,col 71)",
            "(line 573,col 9)-(line 573,col 64)",
            "(line 574,col 9)-(line 574,col 58)",
            "(line 575,col 9)-(line 575,col 50)",
            "(line 576,col 9)-(line 577,col 27)",
            "(line 578,col 9)-(line 578,col 64)",
            "(line 579,col 9)-(line 579,col 58)",
            "(line 580,col 9)-(line 580,col 50)",
            "(line 581,col 9)-(line 581,col 71)",
            "(line 582,col 9)-(line 582,col 35)",
            "(line 583,col 9)-(line 583,col 41)",
            "(line 584,col 9)-(line 584,col 39)",
            "(line 585,col 9)-(line 585,col 37)",
            "(line 586,col 9)-(line 586,col 31)",
            "(line 587,col 9)-(line 599,col 9)",
            "(line 600,col 9)-(line 600,col 29)",
            "(line 604,col 9)-(line 604,col 55)",
            "(line 605,col 9)-(line 605,col 64)",
            "(line 606,col 9)-(line 607,col 60)",
            "(line 608,col 9)-(line 608,col 64)",
            "(line 609,col 9)-(line 609,col 55)",
            "(line 610,col 9)-(line 610,col 64)",
            "(line 611,col 9)-(line 612,col 60)",
            "(line 613,col 9)-(line 613,col 65)",
            "(line 614,col 9)-(line 614,col 45)",
            "(line 615,col 9)-(line 615,col 48)",
            "(line 616,col 9)-(line 616,col 47)",
            "(line 617,col 9)-(line 617,col 46)",
            "(line 618,col 9)-(line 618,col 45)",
            "(line 619,col 9)-(line 619,col 48)",
            "(line 620,col 9)-(line 620,col 47)",
            "(line 621,col 9)-(line 621,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testSetRenderer()",
        "snippet": "    public void testSetRenderer() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryItemRenderer renderer = new LineAndShapeRenderer();\n        plot.setRenderer(renderer);\n        // now make a change to the renderer and see if it triggers a plot\n        // change event...\n        MyPlotChangeListener listener = new MyPlotChangeListener();\n        plot.addChangeListener(listener);\n        renderer.setSeriesPaint(0, Color.black);\n        assertTrue(listener.getEvent() != null);\n    }\n",
        "begin_line": 628,
        "end_line": 638,
        "comment": "\n     * A test for a bug where setting the renderer doesn't register the plot\n     * as a RendererChangeListener.\n     ",
        "child_ranges": [
            "(line 629,col 9)-(line 629,col 47)",
            "(line 630,col 9)-(line 630,col 67)",
            "(line 631,col 9)-(line 631,col 35)",
            "(line 634,col 9)-(line 634,col 67)",
            "(line 635,col 9)-(line 635,col 41)",
            "(line 636,col 9)-(line 636,col 48)",
            "(line 637,col 9)-(line 637,col 48)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1169972()",
        "snippet": "    public void test1169972() {\n        CategoryPlot plot = new CategoryPlot(null, null, null, null);\n        plot.setDomainAxis(new CategoryAxis(\"C\"));\n        plot.setRangeAxis(new NumberAxis(\"Y\"));\n        plot.setRenderer(new BarRenderer());\n        plot.setDataset(new DefaultCategoryDataset());\n        assertTrue(plot != null);\n    }\n",
        "begin_line": 643,
        "end_line": 650,
        "comment": "\n     * A test for bug report 1169972.\n     ",
        "child_ranges": [
            "(line 644,col 9)-(line 644,col 69)",
            "(line 645,col 9)-(line 645,col 50)",
            "(line 646,col 9)-(line 646,col 47)",
            "(line 647,col 9)-(line 647,col 44)",
            "(line 648,col 9)-(line 648,col 54)",
            "(line 649,col 9)-(line 649,col 33)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddDomainMarker()",
        "snippet": "    public void testAddDomainMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        CategoryMarker m = new CategoryMarker(\"C1\");\n        plot.addDomainMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearDomainMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }    \n",
        "begin_line": 655,
        "end_line": 665,
        "comment": "\n     * Some tests for the addDomainMarker() method(s).\n     ",
        "child_ranges": [
            "(line 656,col 9)-(line 656,col 47)",
            "(line 657,col 9)-(line 657,col 52)",
            "(line 658,col 9)-(line 658,col 32)",
            "(line 659,col 9)-(line 660,col 45)",
            "(line 661,col 9)-(line 661,col 45)",
            "(line 662,col 9)-(line 662,col 34)",
            "(line 663,col 9)-(line 663,col 78)",
            "(line 664,col 9)-(line 664,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.testAddRangeMarker()",
        "snippet": "    public void testAddRangeMarker() {\n        CategoryPlot plot = new CategoryPlot();\n        Marker m = new ValueMarker(1.0);\n        plot.addRangeMarker(m);\n        List listeners = Arrays.asList(m.getListeners(\n                MarkerChangeListener.class));\n        assertTrue(listeners.contains(plot));\n        plot.clearRangeMarkers();\n        listeners = Arrays.asList(m.getListeners(MarkerChangeListener.class));\n        assertFalse(listeners.contains(plot));\n    }\n",
        "begin_line": 670,
        "end_line": 680,
        "comment": "\n     * Some tests for the addRangeMarker() method(s).\n     ",
        "child_ranges": [
            "(line 671,col 9)-(line 671,col 47)",
            "(line 672,col 9)-(line 672,col 40)",
            "(line 673,col 9)-(line 673,col 31)",
            "(line 674,col 9)-(line 675,col 45)",
            "(line 676,col 9)-(line 676,col 45)",
            "(line 677,col 9)-(line 677,col 33)",
            "(line 678,col 9)-(line 678,col 78)",
            "(line 679,col 9)-(line 679,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.plot.junit.CategoryPlotTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "signature": "org.jfree.chart.plot.junit.CategoryPlotTests.test1654215()",
        "snippet": "    public void test1654215() {\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n        JFreeChart chart = ChartFactory.createLineChart(\"Title\", \"X\", \"Y\",\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n        plot.setRenderer(1, new LineAndShapeRenderer());\n        boolean success = false;\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 686,
        "end_line": 706,
        "comment": "\n     * A test for bug 1654215 (where a renderer is added to the plot without\n     * a corresponding dataset and it throws an exception at drawing time).\n     ",
        "child_ranges": [
            "(line 687,col 9)-(line 687,col 70)",
            "(line 688,col 9)-(line 689,col 71)",
            "(line 690,col 9)-(line 690,col 59)",
            "(line 691,col 9)-(line 691,col 56)",
            "(line 692,col 9)-(line 692,col 32)",
            "(line 693,col 9)-(line 704,col 9)",
            "(line 705,col 9)-(line 705,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(BoxAndWhiskerRendererTests.class);\n    }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 63)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.BoxAndWhiskerRendererTests(java.lang.String)",
        "snippet": "    public BoxAndWhiskerRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = new BoxAndWhiskerRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setArtifactPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.blue));\n        assertFalse(r1.equals(r2));\n        r2.setArtifactPaint(new GradientPaint(1.0f, 2.0f, Color.yellow, \n                3.0f, 4.0f, Color.blue));\n        assertEquals(r1, r2);\n        \n        r1.setFillBox(!r1.getFillBox());\n        assertFalse(r1.equals(r2));\n        r2.setFillBox(!r2.getFillBox());\n        assertEquals(r1, r2);\n        \n        r1.setItemMargin(0.11);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.11);\n        assertEquals(r1, r2);\n        \n    }\n",
        "begin_line": 105,
        "end_line": 127,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 63)",
            "(line 107,col 9)-(line 107,col 63)",
            "(line 108,col 9)-(line 108,col 29)",
            "(line 110,col 9)-(line 111,col 41)",
            "(line 112,col 9)-(line 112,col 35)",
            "(line 113,col 9)-(line 114,col 41)",
            "(line 115,col 9)-(line 115,col 29)",
            "(line 117,col 9)-(line 117,col 40)",
            "(line 118,col 9)-(line 118,col 35)",
            "(line 119,col 9)-(line 119,col 40)",
            "(line 120,col 9)-(line 120,col 29)",
            "(line 122,col 9)-(line 122,col 31)",
            "(line 123,col 9)-(line 123,col 35)",
            "(line 124,col 9)-(line 124,col 31)",
            "(line 125,col 9)-(line 125,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = new BoxAndWhiskerRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 132,
        "end_line": 139,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 133,col 9)-(line 133,col 63)",
            "(line 134,col 9)-(line 134,col 63)",
            "(line 135,col 9)-(line 135,col 34)",
            "(line 136,col 9)-(line 136,col 31)",
            "(line 137,col 9)-(line 137,col 31)",
            "(line 138,col 9)-(line 138,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = null;\n        try {\n            r2 = (BoxAndWhiskerRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 144,
        "end_line": 156,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 145,col 9)-(line 145,col 63)",
            "(line 146,col 9)-(line 146,col 40)",
            "(line 147,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)",
            "(line 154,col 9)-(line 154,col 51)",
            "(line 155,col 9)-(line 155,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        BoxAndWhiskerRenderer r1 = new BoxAndWhiskerRenderer();\n        BoxAndWhiskerRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (BoxAndWhiskerRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 161,
        "end_line": 182,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 163,col 9)-(line 163,col 63)",
            "(line 164,col 9)-(line 164,col 40)",
            "(line 166,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 180,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n                    new Double(0.0), new Double(4.0), new Double(0.5), \n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n                    null), \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new BoxAndWhiskerRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 188,
        "end_line": 209,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 32)",
            "(line 190,col 9)-(line 207,col 9)",
            "(line 208,col 9)-(line 208,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testBug1572478Vertical()",
        "snippet": "    public void testBug1572478Vertical() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset() {\n                \n            public Number getQ1Value(int row, int column) {\n                return null;\n            }\n\n            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }\n        };\n        List values = new ArrayList();\n        values.add(new Double(1.0));\n        values.add(new Double(10.0));\n        values.add(new Double(100.0));\n        dataset.add(values, \"row\", \"column\");\n        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), new BoxAndWhiskerRenderer());\n        JFreeChart chart = new JFreeChart(plot);\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    new ChartRenderingInfo());\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }\n",
        "begin_line": 214,
        "end_line": 251,
        "comment": "\n     * A check for bug 1572478 (for the vertical orientation).\n     ",
        "child_ranges": [
            "(line 215,col 9)-(line 225,col 10)",
            "(line 226,col 9)-(line 226,col 38)",
            "(line 227,col 9)-(line 227,col 36)",
            "(line 228,col 9)-(line 228,col 37)",
            "(line 229,col 9)-(line 229,col 38)",
            "(line 230,col 9)-(line 230,col 45)",
            "(line 231,col 9)-(line 232,col 66)",
            "(line 233,col 9)-(line 233,col 48)",
            "(line 234,col 9)-(line 234,col 32)",
            "(line 236,col 9)-(line 247,col 9)",
            "(line 249,col 9)-(line 249,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-8c4d3fa7-be00-4ee9-b23d-d23d5d4ca39b.getQ1Value(int, int)",
        "snippet": "            public Number getQ1Value(int row, int column) {\n                return null;\n            }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 219,col 17)-(line 219,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-5d4ef7b9-4d7f-47f9-95ea-c755bccc255d.getQ1Value(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "",
        "child_ranges": [
            "(line 223,col 17)-(line 223,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testBug1572478Horizontal()",
        "snippet": "    public void testBug1572478Horizontal() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset() {\n                \n            public Number getQ1Value(int row, int column) {\n                return null;\n            }\n\n            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }\n        };\n        List values = new ArrayList();\n        values.add(new Double(1.0));\n        values.add(new Double(10.0));\n        values.add(new Double(100.0));\n        dataset.add(values, \"row\", \"column\");\n        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), new BoxAndWhiskerRenderer());\n        plot.setOrientation(PlotOrientation.HORIZONTAL);\n        JFreeChart chart = new JFreeChart(plot);\n        boolean success = false;\n\n        try {\n            BufferedImage image = new BufferedImage(200 , 100, \n                    BufferedImage.TYPE_INT_RGB);\n            Graphics2D g2 = image.createGraphics();\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n                    new ChartRenderingInfo());\n            g2.dispose();\n            success = true;\n        }\n        catch (Exception e) {\n            success = false;\n        }\n\n        assertTrue(success);\n\n    }\n",
        "begin_line": 256,
        "end_line": 294,
        "comment": "\n     * A check for bug 1572478 (for the horizontal orientation).\n     ",
        "child_ranges": [
            "(line 257,col 9)-(line 267,col 10)",
            "(line 268,col 9)-(line 268,col 38)",
            "(line 269,col 9)-(line 269,col 36)",
            "(line 270,col 9)-(line 270,col 37)",
            "(line 271,col 9)-(line 271,col 38)",
            "(line 272,col 9)-(line 272,col 45)",
            "(line 273,col 9)-(line 274,col 66)",
            "(line 275,col 9)-(line 275,col 56)",
            "(line 276,col 9)-(line 276,col 48)",
            "(line 277,col 9)-(line 277,col 32)",
            "(line 279,col 9)-(line 290,col 9)",
            "(line 292,col 9)-(line 292,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-cd35244f-7c0a-4e5e-acee-00dba28b0dd0.getQ1Value(int, int)",
        "snippet": "            public Number getQ1Value(int row, int column) {\n                return null;\n            }\n",
        "begin_line": 260,
        "end_line": 262,
        "comment": "",
        "child_ranges": [
            "(line 261,col 17)-(line 261,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.Anonymous-cf37e12f-8149-446c-bc5c-c89d4f44d786.getQ1Value(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "            public Number getQ1Value(Comparable rowKey, Comparable columnKey) {\n                return null;\n            }\n",
        "begin_line": 264,
        "end_line": 266,
        "comment": "",
        "child_ranges": [
            "(line 265,col 17)-(line 265,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testGetLegendItem()",
        "snippet": "    public void testGetLegendItem() {\n        DefaultBoxAndWhiskerCategoryDataset dataset \n                = new DefaultBoxAndWhiskerCategoryDataset();\n        List values = new ArrayList();\n        values.add(new Double(1.10));\n        values.add(new Double(1.45));\n        values.add(new Double(1.33));\n        values.add(new Double(1.23));\n        dataset.add(values, \"R1\", \"C1\");\n        BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(0, 0);\n        assertNotNull(li);\n        r.setSeriesVisibleInLegend(0, Boolean.FALSE);\n        li = r.getLegendItem(0, 0);\n        assertNull(li);\n    }\n",
        "begin_line": 299,
        "end_line": 317,
        "comment": "\n     * Some checks for the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 300,col 9)-(line 301,col 60)",
            "(line 302,col 9)-(line 302,col 38)",
            "(line 303,col 9)-(line 303,col 37)",
            "(line 304,col 9)-(line 304,col 37)",
            "(line 305,col 9)-(line 305,col 37)",
            "(line 306,col 9)-(line 306,col 37)",
            "(line 307,col 9)-(line 307,col 40)",
            "(line 308,col 9)-(line 308,col 62)",
            "(line 309,col 9)-(line 310,col 40)",
            "(line 311,col 32)-(line 311,col 52)",
            "(line 312,col 9)-(line 312,col 46)",
            "(line 313,col 9)-(line 313,col 26)",
            "(line 314,col 9)-(line 314,col 53)",
            "(line 315,col 9)-(line 315,col 35)",
            "(line 316,col 9)-(line 316,col 23)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        BoxAndWhiskerRenderer r = new BoxAndWhiskerRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }\n",
        "begin_line": 323,
        "end_line": 340,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 324,col 9)-(line 324,col 71)",
            "(line 325,col 9)-(line 325,col 44)",
            "(line 326,col 9)-(line 326,col 44)",
            "(line 327,col 9)-(line 327,col 71)",
            "(line 328,col 9)-(line 328,col 44)",
            "(line 329,col 9)-(line 329,col 44)",
            "(line 330,col 9)-(line 330,col 44)",
            "(line 331,col 9)-(line 331,col 62)",
            "(line 332,col 9)-(line 333,col 40)",
            "(line 334,col 9)-(line 334,col 37)",
            "(line 335,col 32)-(line 335,col 52)",
            "(line 336,col 9)-(line 336,col 46)",
            "(line 337,col 9)-(line 337,col 42)",
            "(line 338,col 9)-(line 338,col 46)",
            "(line 339,col 9)-(line 339,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(GroupedStackedBarRendererTests.class);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 67)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.GroupedStackedBarRendererTests(java.lang.String)",
        "snippet": "    public GroupedStackedBarRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer();\n        GroupedStackedBarRenderer r2 = new GroupedStackedBarRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        // map\n        KeyToGroupMap m1 = new KeyToGroupMap(\"G1\");\n        m1.mapKeyToGroup(\"S1\", \"G2\");\n        r1.setSeriesToGroupMap(m1);\n        assertFalse(r1.equals(r2));\n        KeyToGroupMap m2 = new KeyToGroupMap(\"G1\");\n        m2.mapKeyToGroup(\"S1\", \"G2\");\n        r2.setSeriesToGroupMap(m2);\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 90,
        "end_line": 105,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 71)",
            "(line 92,col 9)-(line 92,col 71)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 97,col 9)-(line 97,col 51)",
            "(line 98,col 9)-(line 98,col 37)",
            "(line 99,col 9)-(line 99,col 35)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 51)",
            "(line 102,col 9)-(line 102,col 37)",
            "(line 103,col 9)-(line 103,col 35)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer();\n        GroupedStackedBarRenderer r2 = null;\n        try {\n            r2 = (GroupedStackedBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 110,
        "end_line": 122,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 71)",
            "(line 112,col 9)-(line 112,col 44)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        GroupedStackedBarRenderer r1 = new GroupedStackedBarRenderer();\n        GroupedStackedBarRenderer r2 = null;\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (GroupedStackedBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 127,
        "end_line": 148,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 71)",
            "(line 130,col 9)-(line 130,col 44)",
            "(line 131,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            dataset.addValue(2.0, \"S1\", \"C2\");\n            dataset.addValue(3.0, \"S2\", \"C1\");\n            dataset.addValue(4.0, \"S2\", \"C2\");\n            GroupedStackedBarRenderer renderer \n                = new GroupedStackedBarRenderer();\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    renderer);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 154,
        "end_line": 177,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 32)",
            "(line 156,col 9)-(line 175,col 9)",
            "(line 176,col 9)-(line 176,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(IntervalBarRendererTests.class);\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 61)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.IntervalBarRendererTests(java.lang.String)",
        "snippet": "    public IntervalBarRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = new IntervalBarRenderer();\n        assertEquals(r1, r2);\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": "\n     * Problem that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 59)",
            "(line 91,col 9)-(line 91,col 59)",
            "(line 92,col 9)-(line 92,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = new IntervalBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 59)",
            "(line 100,col 9)-(line 100,col 59)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = null;\n        try {\n            r2 = (IntervalBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 110,
        "end_line": 122,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 59)",
            "(line 112,col 9)-(line 112,col 38)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        IntervalBarRenderer r1 = new IntervalBarRenderer();\n        IntervalBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (IntervalBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 127,
        "end_line": 149,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 59)",
            "(line 130,col 9)-(line 130,col 38)",
            "(line 132,col 9)-(line 146,col 9)",
            "(line 147,col 9)-(line 147,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            double[][] starts = new double[][] {{0.1, 0.2, 0.3}, \n                    {0.3, 0.4, 0.5}};\n            double[][] ends = new double[][] {{0.5, 0.6, 0.7}, {0.7, 0.8, 0.9}};\n            DefaultIntervalCategoryDataset dataset \n                = new DefaultIntervalCategoryDataset(starts, ends);        \n            IntervalBarRenderer renderer = new IntervalBarRenderer();\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    renderer);\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 155,
        "end_line": 177,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 32)",
            "(line 157,col 9)-(line 175,col 9)",
            "(line 176,col 9)-(line 176,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LayeredBarRendererTests.class);\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 60)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.LayeredBarRendererTests(java.lang.String)",
        "snippet": "    public LayeredBarRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = new LayeredBarRenderer();\n        assertEquals(r1, r2);\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 57)",
            "(line 91,col 9)-(line 91,col 57)",
            "(line 92,col 9)-(line 92,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = new LayeredBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 57)",
            "(line 100,col 9)-(line 100,col 57)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = null;\n        try {\n            r2 = (LayeredBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 110,
        "end_line": 122,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 57)",
            "(line 112,col 9)-(line 112,col 37)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LayeredBarRenderer r1 = new LayeredBarRenderer();\n        LayeredBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (LayeredBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 127,
        "end_line": 149,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 57)",
            "(line 130,col 9)-(line 130,col 37)",
            "(line 132,col 9)-(line 146,col 9)",
            "(line 147,col 9)-(line 147,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new LayeredBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 155,
        "end_line": 173,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 156,col 9)-(line 156,col 32)",
            "(line 157,col 9)-(line 171,col 9)",
            "(line 172,col 9)-(line 172,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(LevelRendererTests.class);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 55)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.LevelRendererTests(java.lang.String)",
        "snippet": "    public LevelRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        r1.setItemMargin(0.123);\n        assertFalse(r1.equals(r2));\n        r2.setItemMargin(0.123);\n        assertTrue(r1.equals(r2));\n\n        r1.setMaximumItemWidth(0.234);\n        assertFalse(r1.equals(r2));\n        r2.setMaximumItemWidth(0.234);\n        assertTrue(r1.equals(r2));\n    \n    }\n",
        "begin_line": 90,
        "end_line": 106,
        "comment": "\n     * Test that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 47)",
            "(line 92,col 9)-(line 92,col 47)",
            "(line 93,col 9)-(line 93,col 34)",
            "(line 94,col 9)-(line 94,col 34)",
            "(line 96,col 9)-(line 96,col 32)",
            "(line 97,col 9)-(line 97,col 35)",
            "(line 98,col 9)-(line 98,col 32)",
            "(line 99,col 9)-(line 99,col 34)",
            "(line 101,col 9)-(line 101,col 38)",
            "(line 102,col 9)-(line 102,col 35)",
            "(line 103,col 9)-(line 103,col 38)",
            "(line 104,col 9)-(line 104,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = new LevelRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 111,
        "end_line": 118,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 112,col 9)-(line 112,col 47)",
            "(line 113,col 9)-(line 113,col 47)",
            "(line 114,col 9)-(line 114,col 34)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 31)",
            "(line 117,col 9)-(line 117,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        LevelRenderer r1 = new LevelRenderer();\n        r1.setItemMargin(0.123);\n        r1.setMaximumItemWidth(0.234);\n        LevelRenderer r2 = null;\n        try {\n            r2 = (LevelRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n        \n        assertTrue(checkIndependence(r1, r2));\n        \n    }\n",
        "begin_line": 123,
        "end_line": 140,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 124,col 9)-(line 124,col 47)",
            "(line 125,col 9)-(line 125,col 32)",
            "(line 126,col 9)-(line 126,col 38)",
            "(line 127,col 9)-(line 127,col 32)",
            "(line 128,col 9)-(line 133,col 9)",
            "(line 134,col 9)-(line 134,col 29)",
            "(line 135,col 9)-(line 135,col 51)",
            "(line 136,col 9)-(line 136,col 34)",
            "(line 138,col 9)-(line 138,col 46)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.checkIndependence(org.jfree.chart.renderer.category.LevelRenderer, org.jfree.chart.renderer.category.LevelRenderer)",
        "snippet": "    private boolean checkIndependence(LevelRenderer r1, LevelRenderer r2) {\n\n        // should be equal...\n        boolean b0 = r1.equals(r2);\n        \n        // and independent...\n        r1.setItemMargin(0.0);\n        boolean b1 = !r1.equals(r2);\n        r2.setItemMargin(0.0);\n        boolean b2 = r1.equals(r2);\n        \n        return b0 && b1 && b2;\n    \n    }\n",
        "begin_line": 150,
        "end_line": 163,
        "comment": "\n     * Checks that the two renderers are equal but independent of one another.\n     * \n     * @param r1  renderer 1.\n     * @param r2  renderer 2.\n     * \n     * @return A boolean.\n     ",
        "child_ranges": [
            "(line 153,col 9)-(line 153,col 35)",
            "(line 156,col 9)-(line 156,col 30)",
            "(line 157,col 9)-(line 157,col 36)",
            "(line 158,col 9)-(line 158,col 30)",
            "(line 159,col 9)-(line 159,col 35)",
            "(line 161,col 9)-(line 161,col 30)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        LevelRenderer r1 = new LevelRenderer();\n        LevelRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (LevelRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            e.printStackTrace();\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 168,
        "end_line": 190,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 170,col 9)-(line 170,col 47)",
            "(line 171,col 9)-(line 171,col 32)",
            "(line 173,col 9)-(line 187,col 9)",
            "(line 188,col 9)-(line 188,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new LevelRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 196,
        "end_line": 214,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 197,col 9)-(line 197,col 32)",
            "(line 198,col 9)-(line 212,col 9)",
            "(line 213,col 9)-(line 213,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.LevelRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.LevelRendererTests.testGetLegendItemSeriesIndex()",
        "snippet": "    public void testGetLegendItemSeriesIndex() {\n        DefaultCategoryDataset dataset0 = new DefaultCategoryDataset();\n        dataset0.addValue(21.0, \"R1\", \"C1\");\n        dataset0.addValue(22.0, \"R2\", \"C1\");        \n        DefaultCategoryDataset dataset1 = new DefaultCategoryDataset();\n        dataset1.addValue(23.0, \"R3\", \"C1\");\n        dataset1.addValue(24.0, \"R4\", \"C1\");        \n        dataset1.addValue(25.0, \"R5\", \"C1\");        \n        LevelRenderer r = new LevelRenderer();\n        CategoryPlot plot = new CategoryPlot(dataset0, new CategoryAxis(\"x\"),\n                new NumberAxis(\"y\"), r);\n        plot.setDataset(1, dataset1);\n        /*JFreeChart chart =*/ new JFreeChart(plot);\n        LegendItem li = r.getLegendItem(1, 2);\n        assertEquals(\"R5\", li.getLabel());\n        assertEquals(1, li.getDatasetIndex());\n        assertEquals(2, li.getSeriesIndex());\n    }\n",
        "begin_line": 220,
        "end_line": 237,
        "comment": "\n     * A check for the datasetIndex and seriesIndex fields in the LegendItem\n     * returned by the getLegendItem() method.\n     ",
        "child_ranges": [
            "(line 221,col 9)-(line 221,col 71)",
            "(line 222,col 9)-(line 222,col 44)",
            "(line 223,col 9)-(line 223,col 44)",
            "(line 224,col 9)-(line 224,col 71)",
            "(line 225,col 9)-(line 225,col 44)",
            "(line 226,col 9)-(line 226,col 44)",
            "(line 227,col 9)-(line 227,col 44)",
            "(line 228,col 9)-(line 228,col 46)",
            "(line 229,col 9)-(line 230,col 40)",
            "(line 231,col 9)-(line 231,col 37)",
            "(line 232,col 32)-(line 232,col 52)",
            "(line 233,col 9)-(line 233,col 46)",
            "(line 234,col 9)-(line 234,col 42)",
            "(line 235,col 9)-(line 235,col 46)",
            "(line 236,col 9)-(line 236,col 45)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(MinMaxCategoryRendererTests.class);\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 74,col 9)-(line 74,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.MinMaxCategoryRendererTests(java.lang.String)",
        "snippet": "    public MinMaxCategoryRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 83,col 9)-(line 83,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n        assertEquals(r1, r2);\n    }\n",
        "begin_line": 89,
        "end_line": 93,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 90,col 9)-(line 90,col 65)",
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = new MinMaxCategoryRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 65)",
            "(line 100,col 9)-(line 100,col 65)",
            "(line 101,col 9)-(line 101,col 34)",
            "(line 102,col 9)-(line 102,col 31)",
            "(line 103,col 9)-(line 103,col 31)",
            "(line 104,col 9)-(line 104,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = null;\n        try {\n            r2 = (MinMaxCategoryRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 110,
        "end_line": 122,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 111,col 9)-(line 111,col 65)",
            "(line 112,col 9)-(line 112,col 41)",
            "(line 113,col 9)-(line 118,col 9)",
            "(line 119,col 9)-(line 119,col 29)",
            "(line 120,col 9)-(line 120,col 51)",
            "(line 121,col 9)-(line 121,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        MinMaxCategoryRenderer r1 = new MinMaxCategoryRenderer();\n        MinMaxCategoryRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (MinMaxCategoryRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 127,
        "end_line": 148,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 129,col 9)-(line 129,col 65)",
            "(line 130,col 9)-(line 130,col 41)",
            "(line 132,col 9)-(line 145,col 9)",
            "(line 146,col 9)-(line 146,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n            dataset.addValue(1.0, \"S1\", \"C1\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new MinMaxCategoryRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 154,
        "end_line": 172,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 155,col 9)-(line 155,col 32)",
            "(line 156,col 9)-(line 170,col 9)",
            "(line 171,col 9)-(line 171,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StatisticalBarRendererTests.class);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 75,col 9)-(line 75,col 64)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.StatisticalBarRendererTests(java.lang.String)",
        "snippet": "    public StatisticalBarRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 84,col 9)-(line 84,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = new StatisticalBarRenderer();\n        assertEquals(r1, r2);\n        \n        r1.setErrorIndicatorPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setErrorIndicatorPaint(Color.red);\n        assertTrue(r2.equals(r1));\n    }\n",
        "begin_line": 90,
        "end_line": 99,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 91,col 9)-(line 91,col 65)",
            "(line 92,col 9)-(line 92,col 65)",
            "(line 93,col 9)-(line 93,col 29)",
            "(line 95,col 9)-(line 95,col 45)",
            "(line 96,col 9)-(line 96,col 35)",
            "(line 97,col 9)-(line 97,col 45)",
            "(line 98,col 9)-(line 98,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = new StatisticalBarRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 104,
        "end_line": 111,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 105,col 9)-(line 105,col 65)",
            "(line 106,col 9)-(line 106,col 65)",
            "(line 107,col 9)-(line 107,col 34)",
            "(line 108,col 9)-(line 108,col 31)",
            "(line 109,col 9)-(line 109,col 31)",
            "(line 110,col 9)-(line 110,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = null;\n        try {\n            r2 = (StatisticalBarRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 116,
        "end_line": 128,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 65)",
            "(line 118,col 9)-(line 118,col 41)",
            "(line 119,col 9)-(line 124,col 9)",
            "(line 125,col 9)-(line 125,col 29)",
            "(line 126,col 9)-(line 126,col 51)",
            "(line 127,col 9)-(line 127,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StatisticalBarRenderer r1 = new StatisticalBarRenderer();\n        StatisticalBarRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                new ByteArrayInputStream(buffer.toByteArray())\n            );\n            r2 = (StatisticalBarRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 133,
        "end_line": 155,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 65)",
            "(line 136,col 9)-(line 136,col 41)",
            "(line 138,col 9)-(line 152,col 9)",
            "(line 153,col 9)-(line 153,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(3.0, 4.0, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalBarRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 161,
        "end_line": 181,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 162,col 9)-(line 162,col 32)",
            "(line 163,col 9)-(line 179,col 9)",
            "(line 180,col 9)-(line 180,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.suite()",
        "snippet": "    public static Test suite() {\n        return new TestSuite(StatisticalLineAndShapeRendererTests.class);\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\n     * Returns the tests as a test suite.\n     *\n     * @return The test suite.\n     ",
        "child_ranges": [
            "(line 76,col 9)-(line 76,col 73)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.StatisticalLineAndShapeRendererTests(java.lang.String)",
        "snippet": "    public StatisticalLineAndShapeRendererTests(String name) {\n        super(name);\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Constructs a new set of tests.\n     *\n     * @param name  the name of the tests.\n     ",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 20)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testEquals()",
        "snippet": "    public void testEquals() {\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 \n            = new StatisticalLineAndShapeRenderer();\n        assertTrue(r1.equals(r2));\n        assertTrue(r2.equals(r1));\n        \n        r1.setErrorIndicatorPaint(Color.red);\n        assertFalse(r1.equals(r2));\n        r2.setErrorIndicatorPaint(Color.red);\n        assertTrue(r2.equals(r1));\n    }\n",
        "begin_line": 91,
        "end_line": 103,
        "comment": "\n     * Check that the equals() method distinguishes all fields.\n     ",
        "child_ranges": [
            "(line 92,col 9)-(line 93,col 52)",
            "(line 94,col 9)-(line 95,col 52)",
            "(line 96,col 9)-(line 96,col 34)",
            "(line 97,col 9)-(line 97,col 34)",
            "(line 99,col 9)-(line 99,col 45)",
            "(line 100,col 9)-(line 100,col 35)",
            "(line 101,col 9)-(line 101,col 45)",
            "(line 102,col 9)-(line 102,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testHashcode()",
        "snippet": "    public void testHashcode() {\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 \n            = new StatisticalLineAndShapeRenderer();\n        assertTrue(r1.equals(r2));\n        int h1 = r1.hashCode();\n        int h2 = r2.hashCode();\n        assertEquals(h1, h2);\n    }\n",
        "begin_line": 108,
        "end_line": 117,
        "comment": "\n     * Two objects that are equal are required to return the same hashCode. \n     ",
        "child_ranges": [
            "(line 109,col 9)-(line 110,col 52)",
            "(line 111,col 9)-(line 112,col 52)",
            "(line 113,col 9)-(line 113,col 34)",
            "(line 114,col 9)-(line 114,col 31)",
            "(line 115,col 9)-(line 115,col 31)",
            "(line 116,col 9)-(line 116,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testCloning()",
        "snippet": "    public void testCloning() {\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 = null;\n        try {\n            r2 = (StatisticalLineAndShapeRenderer) r1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            System.err.println(\"Failed to clone.\");\n        }\n        assertTrue(r1 != r2);\n        assertTrue(r1.getClass() == r2.getClass());\n        assertTrue(r1.equals(r2));\n    }\n",
        "begin_line": 122,
        "end_line": 135,
        "comment": "\n     * Confirm that cloning works.\n     ",
        "child_ranges": [
            "(line 123,col 9)-(line 124,col 52)",
            "(line 125,col 9)-(line 125,col 50)",
            "(line 126,col 9)-(line 131,col 9)",
            "(line 132,col 9)-(line 132,col 29)",
            "(line 133,col 9)-(line 133,col 51)",
            "(line 134,col 9)-(line 134,col 34)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testSerialization()",
        "snippet": "    public void testSerialization() {\n\n        StatisticalLineAndShapeRenderer r1 \n            = new StatisticalLineAndShapeRenderer();\n        StatisticalLineAndShapeRenderer r2 = null;\n\n        try {\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n            ObjectOutput out = new ObjectOutputStream(buffer);\n            out.writeObject(r1);\n            out.close();\n\n            ObjectInput in = new ObjectInputStream(\n                    new ByteArrayInputStream(buffer.toByteArray()));\n            r2 = (StatisticalLineAndShapeRenderer) in.readObject();\n            in.close();\n        }\n        catch (Exception e) {\n            System.out.println(e.toString());\n        }\n        assertEquals(r1, r2);\n\n    }\n",
        "begin_line": 140,
        "end_line": 162,
        "comment": "\n     * Serialize an instance, restore it, and check for equality.\n     ",
        "child_ranges": [
            "(line 142,col 9)-(line 143,col 52)",
            "(line 144,col 9)-(line 144,col 50)",
            "(line 146,col 9)-(line 159,col 9)",
            "(line 160,col 9)-(line 160,col 29)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testDrawWithNullInfo()",
        "snippet": "    public void testDrawWithNullInfo() {\n        boolean success = false;\n        try {\n            DefaultStatisticalCategoryDataset dataset \n                = new DefaultStatisticalCategoryDataset();\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n            dataset.add(3.0, 4.0, \"S1\", \"C2\");\n            CategoryPlot plot = new CategoryPlot(dataset, \n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n                    new StatisticalLineAndShapeRenderer());\n            JFreeChart chart = new JFreeChart(plot);\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n                    null);\n            success = true;\n        }\n        catch (NullPointerException e) {\n            e.printStackTrace();\n            success = false;\n        }\n        assertTrue(success);\n    }\n",
        "begin_line": 168,
        "end_line": 188,
        "comment": "\n     * Draws the chart with a <code>null</code> info object to make sure that \n     * no exceptions are thrown (particularly by code in the renderer).\n     ",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 32)",
            "(line 170,col 9)-(line 186,col 9)",
            "(line 187,col 9)-(line 187,col 28)"
        ]
    },
    {
        "class_name": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests",
        "child_classes": [],
        "src_path": "tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "signature": "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.test1562759()",
        "snippet": "    public void test1562759() {\n        StatisticalLineAndShapeRenderer r \n            = new StatisticalLineAndShapeRenderer(true, false);\n        assertTrue(r.getBaseLinesVisible());\n        assertFalse(r.getBaseShapesVisible());\n        \n        r = new StatisticalLineAndShapeRenderer(false, true);\n        assertFalse(r.getBaseLinesVisible());\n        assertTrue(r.getBaseShapesVisible());\n    }\n",
        "begin_line": 193,
        "end_line": 202,
        "comment": "\n     * A simple test for bug report 1562759.\n     ",
        "child_ranges": [
            "(line 194,col 9)-(line 195,col 63)",
            "(line 196,col 9)-(line 196,col 44)",
            "(line 197,col 9)-(line 197,col 46)",
            "(line 199,col 9)-(line 199,col 61)",
            "(line 200,col 9)-(line 200,col 45)",
            "(line 201,col 9)-(line 201,col 45)"
        ]
    }
]