[
    {
        "name": "CategoryPlot.draw#2530",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.plot.PlotState, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area, \n                     Point2D anchor,\n                     PlotState parentState,\n                     PlotRenderingInfo state) {\n\n        // if the plot area is too small, just return...\n        boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW);\n        boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW);\n        if (b1 || b2) {\n            return;\n        }\n\n        // record the plot area...\n        if (state == null) {\n            // if the incoming state is null, no information will be passed\n            // back to the caller - but we create a temporary state to record\n            // the plot area, since that is used later by the axes\n            state = new PlotRenderingInfo(null);\n        }\n        state.setPlotArea(area);\n\n        // adjust the drawing area for the plot insets (if any)...\n        RectangleInsets insets = getInsets();\n        insets.trim(area);\n\n        // calculate the data area...\n        AxisSpace space = calculateAxisSpace(g2, area);\n        Rectangle2D dataArea = space.shrink(area, null);\n        this.axisOffset.trim(dataArea);\n\n        state.setDataArea(dataArea);\n\n        // if there is a renderer, it draws the background, otherwise use the \n        // default background...\n        if (getRenderer() != null) {\n            getRenderer().drawBackground(g2, this, dataArea);\n        }\n        else {\n            drawBackground(g2, dataArea);\n        }\n       \n        Map axisStateMap = drawAxes(g2, area, dataArea, state);\n\n        // don't let anyone draw outside the data area\n        Shape savedClip = g2.getClip();\n        g2.clip(dataArea);\n\n        drawDomainGridlines(g2, dataArea);\n\n        AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis());\n        if (rangeAxisState == null) {\n            if (parentState != null) {\n                rangeAxisState = (AxisState) parentState.getSharedAxisStates()\n                        .get(getRangeAxis());\n            }\n        }\n        if (rangeAxisState != null) {\n            drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks());\n        }\n        \n        // draw the markers...\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND);\n        }        \n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND);\n        }\n\n        // now render data items...\n        boolean foundData = false;\n\n        // set up the alpha-transparency...\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(\n                AlphaComposite.SRC_OVER, getForegroundAlpha()));\n\n        DatasetRenderingOrder order = getDatasetRenderingOrder();\n        if (order == DatasetRenderingOrder.FORWARD) {\n            for (int i = 0; i < this.datasets.size(); i++) {\n                foundData = render(g2, dataArea, i, state) || foundData;\n            }\n        }\n        else {  // DatasetRenderingOrder.REVERSE\n            for (int i = this.datasets.size() - 1; i >= 0; i--) {\n                foundData = render(g2, dataArea, i, state) || foundData;   \n            }\n        }\n        // draw the foreground markers...\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n        for (int i = 0; i < this.renderers.size(); i++) {\n            drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND);\n        }\n\n        // draw the annotations (if any)...\n        drawAnnotations(g2, dataArea);\n\n        g2.setClip(savedClip);\n        g2.setComposite(originalComposite);\n\n        if (!foundData) {\n            drawNoDataMessage(g2, dataArea);\n        }\n\n        // draw range crosshair if required...\n        if (isRangeCrosshairVisible()) {\n            // FIXME: this doesn't handle multiple range axes\n            drawRangeCrosshair(g2, dataArea, getOrientation(), \n                    getRangeCrosshairValue(), getRangeAxis(),\n                    getRangeCrosshairStroke(), getRangeCrosshairPaint());\n        }\n\n        // draw an outline around the plot area...\n        if (getRenderer() != null) {\n            getRenderer().drawOutline(g2, this, dataArea);\n        }\n        else {\n            drawOutline(g2, dataArea);\n        }\n\n    }\n",
        "begin_line": 2530,
        "end_line": 2651,
        "comment": "\r\n     * Draws the plot on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     * <P>\r\n     * At your option, you may supply an instance of {@link PlotRenderingInfo}.\r\n     * If you do, it will be populated with information about the drawing,\r\n     * including various plot dimensions and tooltip info.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param area  the area within which the plot (including axes) should \r\n     *              be drawn.\r\n     * @param anchor  the anchor point (<code>null</code> permitted).\r\n     * @param parentState  the state from the parent plot, if there is one.\r\n     * @param state  collects info as the chart is drawn (possibly \r\n     *               <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 1.0
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.resolveRangeAxisLocation#1364",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.resolveRangeAxisLocation(org.jfree.chart.axis.AxisLocation, org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    public static RectangleEdge resolveRangeAxisLocation(\n            AxisLocation location, PlotOrientation orientation) {\n\n        if (location == null) {\n            throw new IllegalArgumentException(\"Null 'location' argument.\");   \n        }\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        RectangleEdge result = null;\n        \n        if (location == AxisLocation.TOP_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.TOP;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.RIGHT;\n            }\n        }\n        else if (location == AxisLocation.TOP_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.TOP;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.LEFT;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.RIGHT;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.LEFT;\n            }\n        }\n\n        // the above should cover all the options...\n        if (result == null) {\n            throw new IllegalStateException(\"resolveRangeAxisLocation()\");\n        }\n        return result;\n        \n    }\n",
        "begin_line": 1364,
        "end_line": 1415,
        "comment": "\r\n     * Resolves a range axis location for a given plot orientation.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param orientation  the orientation (<code>null</code> not permitted).\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getDomainAxisLocation#707",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation()",
        "snippet": "    public AxisLocation getDomainAxisLocation() {\n        return getDomainAxisLocation(0);\n    }\n",
        "begin_line": 707,
        "end_line": 709,
        "comment": "\r\n     * Returns the domain axis location for the primary domain axis.\r\n     *\r\n     * @return The location (never <code>null</code>).\r\n     * \r\n     * @see #getRangeAxisLocation()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getDomainAxisLocation#720",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisLocation(int)",
        "snippet": "    public AxisLocation getDomainAxisLocation(int index) {\n        AxisLocation result = null;\n        if (index < this.domainAxisLocations.size()) {\n            result = (AxisLocation) this.domainAxisLocations.get(index);\n        }\n        if (result == null) {\n            result = AxisLocation.getOpposite(getDomainAxisLocation(0));\n        }\n        return result;\n    }\n",
        "begin_line": 720,
        "end_line": 729,
        "comment": "\r\n     * Returns the location for a domain axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The location.\r\n     * \r\n     * @see #setDomainAxisLocation(int, AxisLocation)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getDomainAxisEdge#814",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDomainAxisEdge(int)",
        "snippet": "    public RectangleEdge getDomainAxisEdge(int index) {\n        RectangleEdge result = null;\n        AxisLocation location = getDomainAxisLocation(index);\n        if (location != null) {\n            result = Plot.resolveDomainAxisLocation(location, this.orientation);\n        }\n        else {\n            result = RectangleEdge.opposite(getDomainAxisEdge(0));\n        }\n        return result;\n    }\n",
        "begin_line": 814,
        "end_line": 824,
        "comment": "\r\n     * Returns the edge for a domain axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getRangeAxisLocation#975",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisLocation(int)",
        "snippet": "    public AxisLocation getRangeAxisLocation(int index) {\n        AxisLocation result = null;\n        if (index < this.rangeAxisLocations.size()) {\n            result = (AxisLocation) this.rangeAxisLocations.get(index);\n        }\n        if (result == null) {\n            result = AxisLocation.getOpposite(getRangeAxisLocation(0));\n        }\n        return result;\n    }\n",
        "begin_line": 975,
        "end_line": 984,
        "comment": "\r\n     * Returns the location for a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The location.\r\n     * \r\n     * @see #setRangeAxisLocation(int, AxisLocation)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getRangeAxisEdge#1066",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxisEdge(int)",
        "snippet": "    public RectangleEdge getRangeAxisEdge(int index) {\n        AxisLocation location = getRangeAxisLocation(index);\n        RectangleEdge result = Plot.resolveRangeAxisLocation(location, \n                this.orientation);\n        if (result == null) {\n            result = RectangleEdge.opposite(getRangeAxisEdge(0));\n        }\n        return result;\n    }\n",
        "begin_line": 1066,
        "end_line": 1074,
        "comment": "\r\n     * Returns the edge for a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The edge.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getLegendItems#1726",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getLegendItems()",
        "snippet": "    public LegendItemCollection getLegendItems() {\n        LegendItemCollection result = this.fixedLegendItems;\n        if (result == null) {\n            result = new LegendItemCollection();\n            // get the legend items for the datasets...\n            int count = this.datasets.size();\n            for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) {\n                CategoryDataset dataset = getDataset(datasetIndex);\n                if (dataset != null) {\n                    CategoryItemRenderer renderer = getRenderer(datasetIndex);\n                    if (renderer != null) {\n                        int seriesCount = dataset.getRowCount();\n                        for (int i = 0; i < seriesCount; i++) {\n                            LegendItem item = renderer.getLegendItem(\n                                    datasetIndex, i);\n                            if (item != null) {\n                                result.add(item);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1726,
        "end_line": 1750,
        "comment": "\r\n     * Returns the legend items for the plot.  By default, this method creates \r\n     * a legend item for each series in each of the datasets.  You can change \r\n     * this behaviour by overriding this method.\r\n     *\r\n     * @return The legend items.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.calculateDomainAxisSpace#2406",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.calculateDomainAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, \n                                                 Rectangle2D plotArea, \n                                                 AxisSpace space) {\n                                                     \n        if (space == null) {\n            space = new AxisSpace();\n        }\n        \n        // reserve some space for the domain axis...\n        if (this.fixedDomainAxisSpace != null) {\n            if (this.orientation == PlotOrientation.HORIZONTAL) {\n                space.ensureAtLeast(\n                    this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT);\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), \n                        RectangleEdge.RIGHT);\n            }\n            else if (this.orientation == PlotOrientation.VERTICAL) {\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), \n                        RectangleEdge.TOP);\n                space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), \n                        RectangleEdge.BOTTOM);\n            }\n        }\n        else {\n            // reserve space for the primary domain axis...\n            RectangleEdge domainEdge = Plot.resolveDomainAxisLocation(\n                    getDomainAxisLocation(), this.orientation);\n            if (this.drawSharedDomainAxis) {\n                space = getDomainAxis().reserveSpace(g2, this, plotArea, \n                        domainEdge, space);\n            }\n            \n            // reserve space for any domain axes...\n            for (int i = 0; i < this.domainAxes.size(); i++) {\n                Axis xAxis = (Axis) this.domainAxes.get(i);\n                if (xAxis != null) {\n                    RectangleEdge edge = getDomainAxisEdge(i);\n                    space = xAxis.reserveSpace(g2, this, plotArea, edge, space);\n                }\n            }\n        }\n\n        return space;\n                                                     \n    }\n",
        "begin_line": 2406,
        "end_line": 2450,
        "comment": "\r\n     * Calculates the space required for the domain axis/axes.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param space  a carrier for the result (<code>null</code> permitted).\r\n     * \r\n     * @return The required space.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.calculateRangeAxisSpace#2461",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.calculateRangeAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, \n                                                Rectangle2D plotArea, \n                                                AxisSpace space) {\n                                                  \n        if (space == null) {\n            space = new AxisSpace(); \n        }\n        \n        // reserve some space for the range axis...\n        if (this.fixedRangeAxisSpace != null) {\n            if (this.orientation == PlotOrientation.HORIZONTAL) {\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), \n                        RectangleEdge.TOP);\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), \n                        RectangleEdge.BOTTOM);\n            }\n            else if (this.orientation == PlotOrientation.VERTICAL) {\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), \n                        RectangleEdge.LEFT);\n                space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), \n                        RectangleEdge.RIGHT);\n            }\n        }\n        else {\n            // reserve space for the range axes (if any)...\n            for (int i = 0; i < this.rangeAxes.size(); i++) {\n                Axis yAxis = (Axis) this.rangeAxes.get(i);\n                if (yAxis != null) {\n                    RectangleEdge edge = getRangeAxisEdge(i);\n                    space = yAxis.reserveSpace(g2, this, plotArea, edge, space);\n                }\n            }\n        }\n        return space;\n                                                    \n    }\n",
        "begin_line": 2461,
        "end_line": 2496,
        "comment": "\r\n     * Calculates the space required for the range axis/axes.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param space  a carrier for the result (<code>null</code> permitted).\r\n     * \r\n     * @return The required space.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.calculateAxisSpace#2506",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.calculateAxisSpace(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected AxisSpace calculateAxisSpace(Graphics2D g2, \n                                           Rectangle2D plotArea) {\n        AxisSpace space = new AxisSpace();\n        space = calculateRangeAxisSpace(g2, plotArea, space);\n        space = calculateDomainAxisSpace(g2, plotArea, space);\n        return space;\n    }\n",
        "begin_line": 2506,
        "end_line": 2512,
        "comment": "\r\n     * Calculates the space required for the axes.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     *\r\n     * @return The space required for the axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.drawAxes#2679",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawAxes(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected Map drawAxes(Graphics2D g2, \n                           Rectangle2D plotArea, \n                           Rectangle2D dataArea,\n                           PlotRenderingInfo plotState) {\n\n        AxisCollection axisCollection = new AxisCollection();\n\n        // add domain axes to lists...\n        for (int index = 0; index < this.domainAxes.size(); index++) {\n            CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(index);\n            if (xAxis != null) {\n                axisCollection.add(xAxis, getDomainAxisEdge(index));\n            }\n        }\n\n        // add range axes to lists...\n        for (int index = 0; index < this.rangeAxes.size(); index++) {\n            ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index);\n            if (yAxis != null) {\n                axisCollection.add(yAxis, getRangeAxisEdge(index));\n            }\n        }\n\n        Map axisStateMap = new HashMap();\n        \n        // draw the top axes\n        double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset(\n                dataArea.getHeight());\n        Iterator iterator = axisCollection.getAxesAtTop().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, \n                        RectangleEdge.TOP, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n        // draw the bottom axes\n        cursor = dataArea.getMaxY() \n                 + this.axisOffset.calculateBottomOutset(dataArea.getHeight());\n        iterator = axisCollection.getAxesAtBottom().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.BOTTOM, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n        // draw the left axes\n        cursor = dataArea.getMinX() \n                 - this.axisOffset.calculateLeftOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtLeft().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,\n                        RectangleEdge.LEFT, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n\n        // draw the right axes\n        cursor = dataArea.getMaxX() \n                 + this.axisOffset.calculateRightOutset(dataArea.getWidth());\n        iterator = axisCollection.getAxesAtRight().iterator();\n        while (iterator.hasNext()) {\n            Axis axis = (Axis) iterator.next();\n            if (axis != null) {\n                AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, \n                        RectangleEdge.RIGHT, plotState);\n                cursor = axisState.getCursor();\n                axisStateMap.put(axis, axisState);\n            }\n        }\n        \n        return axisStateMap;\n        \n    }\n",
        "begin_line": 2679,
        "end_line": 2762,
        "comment": "\r\n     * A utility method for drawing the plot's axes.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param dataArea  the data area.\r\n     * @param plotState  collects information about the plot (<code>null</code>\r\n     *                   permitted).\r\n     * \r\n     * @return A map containing the axis states.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.datasetsMappedToDomainAxis#3103",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetsMappedToDomainAxis(int)",
        "snippet": "    private List datasetsMappedToDomainAxis(int axisIndex) {\n        List result = new ArrayList();\n        for (int datasetIndex = 0; datasetIndex < this.datasets.size(); \n                datasetIndex++) {\n            Object dataset = this.datasets.get(datasetIndex);\n            if (dataset != null) {\n                Integer m = (Integer) this.datasetToDomainAxisMap.get(\n                        datasetIndex);\n                if (m == null) {  // a dataset with no mapping is assigned to \n                                  // axis 0\n                    if (axisIndex == 0) {\n                        result.add(dataset);\n                    }\n                }\n                else {\n                    if (m.intValue() == axisIndex) {\n                        result.add(dataset);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 3103,
        "end_line": 3125,
        "comment": "\r\n     * Returns a list of the datasets that are mapped to the axis with the\r\n     * specified index.\r\n     * \r\n     * @param axisIndex  the axis index.\r\n     * \r\n     * @return The list (possibly empty, but never <code>null</code>).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getCategoriesForAxis#3252",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getCategoriesForAxis(org.jfree.chart.axis.CategoryAxis)",
        "snippet": "    public List getCategoriesForAxis(CategoryAxis axis) {\n        List result = new ArrayList();\n        int axisIndex = this.domainAxes.indexOf(axis);\n        List datasets = datasetsMappedToDomainAxis(axisIndex);\n        Iterator iterator = datasets.iterator();\n        while (iterator.hasNext()) {\n            CategoryDataset dataset = (CategoryDataset) iterator.next();\n            // add the unique categories from this dataset\n            for (int i = 0; i < dataset.getColumnCount(); i++) {\n                Comparable category = dataset.getColumnKey(i);\n                if (!result.contains(category)) {\n                    result.add(category);\n                }\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 3252,
        "end_line": 3268,
        "comment": "\r\n     * Returns a list of the categories that should be displayed for the\r\n     * specified axis.\r\n     * \r\n     * @param axis  the axis (<code>null</code> not permitted)\r\n     * \r\n     * @return The categories.\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPositions.getLabelPosition#288",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.getLabelPosition(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public CategoryLabelPosition getLabelPosition(RectangleEdge edge) {\n        CategoryLabelPosition result = null;\n        if (edge == RectangleEdge.TOP) {\n            result = this.positionForAxisAtTop;\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            result = this.positionForAxisAtBottom;\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            result = this.positionForAxisAtLeft;\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            result = this.positionForAxisAtRight;\n        }\n        return result;\n    }\n",
        "begin_line": 288,
        "end_line": 303,
        "comment": "\r\n     * Returns the category label position specification for an axis at the \r\n     * given location.\r\n     * \r\n     * @param edge  the axis location.\r\n     * \r\n     * @return The category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPosition.getWidthType#218",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getWidthType()",
        "snippet": "    public CategoryLabelWidthType getWidthType() {\n        return this.widthType;   \n    }\n",
        "begin_line": 218,
        "end_line": 220,
        "comment": "\r\n     * Returns the width calculation type.\r\n     * \r\n     * @return The width calculation type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPosition.getWidthRatio#227",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getWidthRatio()",
        "snippet": "    public float getWidthRatio() {\n        return this.widthRatio;   \n    }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\r\n     * Returns the ratio used to calculate the maximum category label width.\r\n     * \r\n     * @return The ratio.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryAxis.reserveSpace#731",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    public AxisSpace reserveSpace(Graphics2D g2, Plot plot, \n                                  Rectangle2D plotArea, \n                                  RectangleEdge edge, AxisSpace space) {\n\n        // create a new space object if one wasn't supplied...\n        if (space == null) {\n            space = new AxisSpace();\n        }\n        \n        // if the axis is not visible, no additional space is required...\n        if (!isVisible()) {\n            return space;\n        }\n\n        // calculate the max size of the tick labels (if visible)...\n        double tickLabelHeight = 0.0;\n        double tickLabelWidth = 0.0;\n        if (isTickLabelsVisible()) {\n            g2.setFont(getTickLabelFont());\n            AxisState state = new AxisState();\n            // we call refresh ticks just to get the maximum width or height\n            refreshTicks(g2, state, plotArea, edge);\n            if (edge == RectangleEdge.TOP) {\n                tickLabelHeight = state.getMax();\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                tickLabelHeight = state.getMax();\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                tickLabelWidth = state.getMax(); \n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                tickLabelWidth = state.getMax(); \n            }\n        }\n        \n        // get the axis label size and update the space object...\n        Rectangle2D labelEnclosure = getLabelEnclosure(g2, edge);\n        double labelHeight = 0.0;\n        double labelWidth = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            labelHeight = labelEnclosure.getHeight();\n            space.add(labelHeight + tickLabelHeight \n                    + this.categoryLabelPositionOffset, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            labelWidth = labelEnclosure.getWidth();\n            space.add(labelWidth + tickLabelWidth \n                    + this.categoryLabelPositionOffset, edge);\n        }\n        return space;\n\n    }\n",
        "begin_line": 731,
        "end_line": 783,
        "comment": "\r\n     * Estimates the space required for the axis, given a specific drawing area.\r\n     *\r\n     * @param g2  the graphics device (used to obtain font information).\r\n     * @param plot  the plot that the axis belongs to.\r\n     * @param plotArea  the area within which the axis should be drawn.\r\n     * @param edge  the axis location (top or bottom).\r\n     * @param space  the space already reserved.\r\n     *\r\n     * @return The space required to draw the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryAxis.refreshTicks#968",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public List refreshTicks(Graphics2D g2, \n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge) {\n\n        List ticks = new java.util.ArrayList();\n        \n        // sanity check for data area...\n        if (dataArea.getHeight() <= 0.0 || dataArea.getWidth() < 0.0) {\n            return ticks;\n        }\n\n        CategoryPlot plot = (CategoryPlot) getPlot();\n        List categories = plot.getCategoriesForAxis(this);\n        double max = 0.0;\n                \n        if (categories != null) {\n            CategoryLabelPosition position \n                    = this.categoryLabelPositions.getLabelPosition(edge);\n            float r = this.maximumCategoryLabelWidthRatio;\n            if (r <= 0.0) {\n                r = position.getWidthRatio();   \n            }\n                  \n            float l = 0.0f;\n            if (position.getWidthType() == CategoryLabelWidthType.CATEGORY) {\n                l = (float) calculateCategorySize(categories.size(), dataArea, \n                        edge);  \n            }\n            else {\n                if (RectangleEdge.isLeftOrRight(edge)) {\n                    l = (float) dataArea.getWidth();   \n                }\n                else {\n                    l = (float) dataArea.getHeight();   \n                }\n            }\n            int categoryIndex = 0;\n            Iterator iterator = categories.iterator();\n            while (iterator.hasNext()) {\n                Comparable category = (Comparable) iterator.next();\n                TextBlock label = createLabel(category, l * r, edge, g2);\n                if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n                    max = Math.max(max, calculateTextBlockHeight(label, \n                            position, g2));\n                }\n                else if (edge == RectangleEdge.LEFT \n                        || edge == RectangleEdge.RIGHT) {\n                    max = Math.max(max, calculateTextBlockWidth(label, \n                            position, g2));\n                }\n                Tick tick = new CategoryTick(category, label, \n                        position.getLabelAnchor(), position.getRotationAnchor(), \n                        position.getAngle());\n                ticks.add(tick);\n                categoryIndex = categoryIndex + 1;\n            }\n        }\n        state.setMax(max);\n        return ticks;\n        \n    }\n",
        "begin_line": 968,
        "end_line": 1029,
        "comment": "\r\n     * Creates a temporary list of ticks that can be used when drawing the axis.\r\n     *\r\n     * @param g2  the graphics device (used to get font measurements).\r\n     * @param state  the axis state.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisState.getMax#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.getMax()",
        "snippet": "    public double getMax() {\n        return this.max;\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\r\n     * Returns the maximum width/height.\r\n     * \r\n     * @return The maximum width/height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisState.setMax#192",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.setMax(double)",
        "snippet": "    public void setMax(double max) {\n        this.max = max;\n    }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\r\n     * Sets the maximum width/height.\r\n     * \r\n     * @param max the maximum width/height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9574
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotRenderingInfo.getOwner#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.getOwner()",
        "snippet": "    public ChartRenderingInfo getOwner() {\n        return this.owner;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\r\n     * Returns the owner (as specified in the constructor).\r\n     * \r\n     * @return The owner (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9381
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotRenderingInfo.setPlotArea#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.setPlotArea(java.awt.geom.Rectangle2D)",
        "snippet": "    public void setPlotArea(Rectangle2D area) {\n        this.plotArea = area;\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\r\n     * Sets the plot area.\r\n     * \r\n     * @param area  the plot area (in Java2D space, <code>null</code> \r\n     *     permitted but discouraged)\r\n     * \r\n     * @see #getPlotArea()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9381
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotRenderingInfo.setDataArea#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.setDataArea(java.awt.geom.Rectangle2D)",
        "snippet": "    public void setDataArea(Rectangle2D area) {\n        this.dataArea = area;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\r\n     * Sets the data area.\r\n     * \r\n     * @param area  the data area (in Java2D space, <code>null</code> permitted\r\n     *     but discouraged).\r\n     * \r\n     * @see #getDataArea()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9381
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.drawLabel#1092",
        "is_bug": true,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.drawLabel(java.lang.String, java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisState, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected AxisState drawLabel(String label, Graphics2D g2, \n            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n            AxisState state, PlotRenderingInfo plotState) {\n\n        // it is unlikely that 'state' will be null, but check anyway...\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n        \n        if ((label == null) || (label.equals(\"\"))) {\n            return state;\n        }\n\n        Font font = getLabelFont();\n        RectangleInsets insets = getLabelInsets();\n        g2.setFont(font);\n        g2.setPaint(getLabelPaint());\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n        Shape hotspot = null;\n        \n        if (edge == RectangleEdge.TOP) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() - insets.getBottom() \n                    - h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle(), labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) dataArea.getCenterX();\n            float labely = (float) (state.getCursor() + insets.getTop() \n                    + h / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                    + insets.getBottom());\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                    labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() - insets.getRight() \n                    - w / 2.0);\n            float labely = (float) dataArea.getCenterY();\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n\n            AffineTransform t = AffineTransform.getRotateInstance(\n                    getLabelAngle() + Math.PI / 2.0, \n                    labelBounds.getCenterX(), labelBounds.getCenterY());\n            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n            labelBounds = rotatedLabelBounds.getBounds2D();\n            float w = (float) labelBounds.getWidth();\n            float h = (float) labelBounds.getHeight();\n            float labelx = (float) (state.getCursor() \n                            + insets.getLeft() + w / 2.0);\n            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                    / 2.0);\n            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                    TextAnchor.CENTER);\n            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                    labely - h / 2.0f, w, h);\n            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                    + insets.getRight());\n\n        }\n        if (plotState != null && hotspot != null) {\n            ChartRenderingInfo owner = plotState.getOwner();\n                EntityCollection entities = owner.getEntityCollection();\n                if (entities != null) {\n                    entities.add(new AxisLabelEntity(this, hotspot, \n                            this.labelToolTip, this.labelURL));\n                }\n        }\n        return state;\n\n    }\n",
        "begin_line": 1092,
        "end_line": 1200,
        "comment": "\r\n     * Draws the axis label.\r\n     *\r\n     * @param label  the label text.\r\n     * @param g2  the graphics device.\r\n     * @param plotArea  the plot area.\r\n     * @param dataArea  the area inside the axes.\r\n     * @param edge  the location of the axis.\r\n     * @param state  the axis state (<code>null</code> not permitted).\r\n     * @param plotState  the plot state (<code>null</code> permitted).\r\n     *\r\n     * @return Information about the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.9381
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotRenderingInfo.PlotRenderingInfo#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotRenderingInfo.java",
        "class_name": "org.jfree.chart.plot.PlotRenderingInfo",
        "signature": "org.jfree.chart.plot.PlotRenderingInfo.PlotRenderingInfo(org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public PlotRenderingInfo(ChartRenderingInfo owner) {\n        this.owner = owner;        \n        this.dataArea = new Rectangle2D.Double();\n        this.subplotInfo = new java.util.ArrayList();    \n    }\n",
        "begin_line": 91,
        "end_line": 95,
        "comment": "\r\n     * Creates a new instance.\r\n     * \r\n     * @param owner  the owner (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8864
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractCategoryItemRenderer.drawBackground#685",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.drawBackground(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackground(Graphics2D g2,\n                               CategoryPlot plot,\n                               Rectangle2D dataArea) {\n\n        plot.drawBackground(g2, dataArea);\n\n    }\n",
        "begin_line": 685,
        "end_line": 691,
        "comment": "\r\n     * Draws a background for the data area.  The default implementation just\r\n     * gets the plot to draw the background, but some renderers will override \r\n     * this behaviour.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot.\r\n     * @param dataArea  the data area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.884
        },
        "num_failing_tests": 19
    },
    {
        "name": "CategoryPlot.drawBackground#2663",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.drawBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackground(Graphics2D g2, Rectangle2D area) {\n        fillBackground(g2, area, this.orientation);\n        drawBackgroundImage(g2, area);\n    }\n",
        "begin_line": 2663,
        "end_line": 2666,
        "comment": "\r\n     * Draws the plot background (the background color and/or image).\r\n     * <P>\r\n     * This method will be called during the chart drawing process and is \r\n     * declared public so that it can be accessed by the renderers used by \r\n     * certain subclasses.  You shouldn't need to call this method directly.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param area  the area within which the plot should be drawn.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.884
        },
        "num_failing_tests": 19
    },
    {
        "name": "ShapeUtilities.rotateShape#360",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "signature": "org.jfree.chart.util.ShapeUtilities.rotateShape(java.awt.Shape, double, float, float)",
        "snippet": "    public static Shape rotateShape(Shape base, double angle,\n                                    float x, float y) {\n        if (base == null) {\n            return null;\n        }\n        AffineTransform rotate = AffineTransform.getRotateInstance(angle, x, y);\n        Shape result = rotate.createTransformedShape(base);\n        return result;\n    }\n",
        "begin_line": 360,
        "end_line": 368,
        "comment": "\n     * Rotates a shape about the specified coordinates.\n     * \n     * @param base  the shape (<code>null</code> permitted, returns \n     *              <code>null</code>).\n     * @param angle  the angle (in radians).\n     * @param x  the x coordinate for the rotation point (in Java2D space).\n     * @param y  the y coordinate for the rotation point (in Java2D space).\n     * \n     * @return the rotated shape.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryTick.CategoryTick#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "signature": "org.jfree.chart.axis.CategoryTick.CategoryTick(java.lang.Comparable, org.jfree.chart.text.TextBlock, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public CategoryTick(Comparable category,\n                        TextBlock label,\n                        TextBlockAnchor labelAnchor,\n                        TextAnchor rotationAnchor,\n                        double angle) {\n                            \n        super(\"\", TextAnchor.CENTER, rotationAnchor, angle);\n        this.category = category;\n        this.label = label;\n        this.labelAnchor = labelAnchor;\n        \n    }\n",
        "begin_line": 75,
        "end_line": 86,
        "comment": "\r\n     * Creates a new tick.\r\n     * \r\n     * @param category  the category.\r\n     * @param label  the label.\r\n     * @param labelAnchor  the label anchor.\r\n     * @param rotationAnchor  the rotation anchor.\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryLabelPosition.getLabelAnchor#191",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getLabelAnchor()",
        "snippet": "    public TextBlockAnchor getLabelAnchor() {\n        return this.labelAnchor;\n    }\n",
        "begin_line": 191,
        "end_line": 193,
        "comment": "\r\n     * Returns the text block anchor.\r\n     * \r\n     * @return The text block anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryLabelPosition.getRotationAnchor#200",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getRotationAnchor()",
        "snippet": "    public TextAnchor getRotationAnchor() {\n        return this.rotationAnchor;\n    }\n",
        "begin_line": 200,
        "end_line": 202,
        "comment": "\r\n     * Returns the rotation anchor point.\r\n     * \r\n     * @return The rotation anchor point (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryLabelPosition.getAngle#209",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getAngle()",
        "snippet": "    public double getAngle() {\n        return this.angle;\n    }\n",
        "begin_line": 209,
        "end_line": 211,
        "comment": "\r\n     * Returns the angle of rotation for the label.\r\n     * \r\n     * @return The angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryAxis.getTickLabelFont#403",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getTickLabelFont(java.lang.Comparable)",
        "snippet": "    public Font getTickLabelFont(Comparable category) {\n        if (category == null) {\n            throw new IllegalArgumentException(\"Null 'category' argument.\");\n        }\n        Font result = (Font) this.tickLabelFontMap.get(category);\n        // if there is no specific font, use the general one...\n        if (result == null) {\n            result = getTickLabelFont();\n        }\n        return result;\n    }\n",
        "begin_line": 403,
        "end_line": 413,
        "comment": "\r\n     * Returns the font for the tick label for the given category.\r\n     * \r\n     * @param category  the category (<code>null</code> not permitted).\r\n     * \r\n     * @return The font (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelFont(Comparable, Font)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryAxis.getTickLabelPaint#446",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getTickLabelPaint(java.lang.Comparable)",
        "snippet": "    public Paint getTickLabelPaint(Comparable category) {\n        if (category == null) {\n            throw new IllegalArgumentException(\"Null 'category' argument.\");\n        }\n        Paint result = (Paint) this.tickLabelPaintMap.get(category);\n        // if there is no specific paint, use the general one...\n        if (result == null) {\n            result = getTickLabelPaint();\n        }\n        return result;\n    }\n",
        "begin_line": 446,
        "end_line": 456,
        "comment": "\r\n     * Returns the paint for the tick label for the given category.\r\n     * \r\n     * @param category  the category (<code>null</code> not permitted).\r\n     * \r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryAxis.createLabel#1041",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.createLabel(java.lang.Comparable, float, org.jfree.chart.util.RectangleEdge, java.awt.Graphics2D)",
        "snippet": "    protected TextBlock createLabel(Comparable category, float width, \n                                    RectangleEdge edge, Graphics2D g2) {\n        TextBlock label = TextUtilities.createTextBlock(category.toString(), \n                getTickLabelFont(category), getTickLabelPaint(category), width,\n                this.maximumCategoryLabelLines, new G2TextMeasurer(g2));  \n        return label; \n    }\n",
        "begin_line": 1041,
        "end_line": 1047,
        "comment": "\r\n     * Creates a label.\r\n     *\r\n     * @param category  the category.\r\n     * @param width  the available width. \r\n     * @param edge  the edge on which the axis appears.\r\n     * @param g2  the graphics device.\r\n     *\r\n     * @return A label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.8581
        },
        "num_failing_tests": 18
    },
    {
        "name": "DefaultCategoryDataset.getColumnKey#162",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n",
        "begin_line": 162,
        "end_line": 164,
        "comment": "\r\n     * Returns a column key.\r\n     *\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The column key.\r\n     * \r\n     * @see #getColumnIndex(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7687
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValues2D.getColumnKey#216",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return (Comparable) this.columnKeys.get(column);\n    }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "\r\n     * Returns the key for a given column.\r\n     *\r\n     * @param column  the column (in the range 0 to {@link #getColumnCount()} \r\n     *     - 1).\r\n     *\r\n     * @return The key.\r\n     * \r\n     * @see #getColumnIndex(Comparable)\r\n     * @see #getRowKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7687
        },
        "num_failing_tests": 13
    },
    {
        "name": "TextBlock.calculateOffsets#266",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateOffsets(org.jfree.chart.text.TextBlockAnchor, double, double)",
        "snippet": "    private float[] calculateOffsets(TextBlockAnchor anchor, \n                                     double width, double height) {\n        float[] result = new float[2];\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextBlockAnchor.TOP_CENTER\n                || anchor == TextBlockAnchor.CENTER\n                || anchor == TextBlockAnchor.BOTTOM_CENTER) {\n                    \n            xAdj = (float) -width / 2.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.TOP_RIGHT\n                || anchor == TextBlockAnchor.CENTER_RIGHT\n                || anchor == TextBlockAnchor.BOTTOM_RIGHT) {\n                    \n            xAdj = (float) -width;\n            \n        }\n\n        if (anchor == TextBlockAnchor.TOP_LEFT\n                || anchor == TextBlockAnchor.TOP_CENTER\n                || anchor == TextBlockAnchor.TOP_RIGHT) {\n                    \n            yAdj = 0.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.CENTER_LEFT\n                || anchor == TextBlockAnchor.CENTER\n                || anchor == TextBlockAnchor.CENTER_RIGHT) {\n                    \n            yAdj = (float) -height / 2.0f;\n            \n        }\n        else if (anchor == TextBlockAnchor.BOTTOM_LEFT\n                || anchor == TextBlockAnchor.BOTTOM_CENTER\n                || anchor == TextBlockAnchor.BOTTOM_RIGHT) {\n                    \n            yAdj = (float) -height;\n            \n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n    }   \n",
        "begin_line": 266,
        "end_line": 311,
        "comment": "\n     * Calculates the x and y offsets required to align the text block with the\n     * specified anchor point.  This assumes that the top left of the text \n     * block is at (0.0, 0.0).\n     * \n     * @param anchor  the anchor position.\n     * @param width  the width of the text block.\n     * @param height  the height of the text block.\n     * \n     * @return The offsets (float[0] = x offset, float[1] = y offset).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7511
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.createTextBlock#185",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, int, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    public static TextBlock createTextBlock(String text, Font font,\n            Paint paint, float maxWidth, int maxLines, TextMeasurer measurer) {\n        \n        TextBlock result = new TextBlock();\n        BreakIterator iterator = BreakIterator.getLineInstance();\n        iterator.setText(text);\n        int current = 0;\n        int lines = 0;\n        int length = text.length();\n        while (current < length && lines < maxLines) {\n            int next = nextLineBreak(text, current, maxWidth, iterator, \n                    measurer);\n            if (next == BreakIterator.DONE) {\n                result.addLine(text.substring(current), font, paint);\n                return result;\n            }\n            result.addLine(text.substring(current, next), font, paint);\n            lines++;\n            current = next;\n            while (current < text.length()&& text.charAt(current) == '\\n') {\n                current++;\n            }\n        }\n        if (current < length) {\n            TextLine lastLine = result.getLastLine();\n            TextFragment lastFragment = lastLine.getLastTextFragment();\n            String oldStr = lastFragment.getText();\n            String newStr = \"...\";\n            if (oldStr.length() > 3) {\n                newStr = oldStr.substring(0, oldStr.length() - 3) + \"...\";\n            }\n\n            lastLine.removeFragment(lastFragment);\n            TextFragment newFragment = new TextFragment(newStr, \n                    lastFragment.getFont(), lastFragment.getPaint());\n            lastLine.addFragment(newFragment);\n        }\n        return result;\n    }\n",
        "begin_line": 185,
        "end_line": 223,
        "comment": "\n     * Creates a new text block from the given string, breaking the\n     * text into lines so that the <code>maxWidth</code> value is\n     * respected.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * @param maxWidth  the maximum width for each line.\n     * @param maxLines  the maximum number of lines.\n     * @param measurer  the text measurer.\n     * \n     * @return A text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7416
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.nextLineBreak#236",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.nextLineBreak(java.lang.String, int, float, java.text.BreakIterator, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    private static int nextLineBreak(String text, int start,\n            float width, BreakIterator iterator, TextMeasurer measurer) {\n        \n        // this method is (loosely) based on code in JFreeReport's \n        // TextParagraph class\n        int current = start;\n        int end;\n        float x = 0.0f;\n        boolean firstWord = true;\n        int newline = text.indexOf('\\n', start);\n        if (newline < 0) {\n            newline = Integer.MAX_VALUE;\n        }\n        while (((end = iterator.next()) != BreakIterator.DONE)) {\n            if (end > newline) {\n                return newline;\n            }\n            x += measurer.getStringWidth(text, current, end);\n            if (x > width) {\n                if (firstWord) {\n                    while (measurer.getStringWidth(text, start, end) > width) {\n                        end--;\n                        if (end <= start) {\n                            return end;\n                        }\n                    }\n                    return end;\n                }\n                else {\n                    end = iterator.previous();\n                    return end;\n                }\n            }\n            // we found at least one word that fits ...\n            firstWord = false;\n            current = end;\n        }\n        return BreakIterator.DONE;\n    }\n",
        "begin_line": 236,
        "end_line": 274,
        "comment": "\n     * Returns the character index of the next line break.\n     * \n     * @param text  the text.\n     * @param start  the start index.\n     * @param width  the target display width.\n     * @param iterator  the word break iterator.\n     * @param measurer  the text measurer.\n     * \n     * @return The index of the next line break.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7416
        },
        "num_failing_tests": 22
    },
    {
        "name": "G2TextMeasurer.G2TextMeasurer#63",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "signature": "org.jfree.chart.text.G2TextMeasurer.G2TextMeasurer(java.awt.Graphics2D)",
        "snippet": "    public G2TextMeasurer(Graphics2D g2) {\n        this.g2 = g2;\n    }\n",
        "begin_line": 63,
        "end_line": 65,
        "comment": "\n     * Creates a new text measurer.\n     * \n     * @param g2  the graphics device.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7416
        },
        "num_failing_tests": 22
    },
    {
        "name": "G2TextMeasurer.getStringWidth#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/G2TextMeasurer.java",
        "class_name": "org.jfree.chart.text.G2TextMeasurer",
        "signature": "org.jfree.chart.text.G2TextMeasurer.getStringWidth(java.lang.String, int, int)",
        "snippet": "    public float getStringWidth(String text, int start, int end) {\n        FontMetrics fm = this.g2.getFontMetrics();\n        Rectangle2D bounds = TextUtilities.getTextBounds(text.substring(start, \n                end), this.g2, fm);\n        float result = (float) bounds.getWidth();\n        return result;\n    }\n",
        "begin_line": 76,
        "end_line": 82,
        "comment": "\n     * Returns the string width.\n     * \n     * @param text  the text.\n     * @param start  the index of the first character to measure.\n     * @param end  the index of the last character to measure.\n     * \n     * @return The string width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7416
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendGraphic.draw#527",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        \n        area = trimMargin(area);\n        drawBorder(g2, area);\n        area = trimBorder(area);\n        area = trimPadding(area);\n        \n        if (this.lineVisible) {\n            Point2D location = RectangleAnchor.coordinates(\n                area, this.shapeLocation\n            );\n            Shape aLine = ShapeUtilities.createTranslatedShape(\n                getLine(), this.shapeAnchor, location.getX(), location.getY()\n            );\n            g2.setPaint(this.linePaint);\n            g2.setStroke(this.lineStroke);\n            g2.draw(aLine);\n        }\n        \n        if (this.shapeVisible) {\n            Point2D location = RectangleAnchor.coordinates(\n                area, this.shapeLocation\n            );\n            \n            Shape s = ShapeUtilities.createTranslatedShape(\n                this.shape, this.shapeAnchor, location.getX(), location.getY()\n            );\n            if (this.shapeFilled) {\n                Paint p = this.fillPaint;\n                if (p instanceof GradientPaint) {\n                    GradientPaint gp = (GradientPaint) this.fillPaint;\n                    p = this.fillPaintTransformer.transform(gp, s);\n                }\n                g2.setPaint(p);\n                g2.fill(s);\n            }\n            if (this.shapeOutlineVisible) {\n                g2.setPaint(this.outlinePaint);\n                g2.setStroke(this.outlineStroke);\n                g2.draw(s);\n            }\n        }\n        \n    }\n",
        "begin_line": 527,
        "end_line": 570,
        "comment": "\r\n     * Draws the graphic item within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7273
        },
        "num_failing_tests": 18
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.generateLabel#98",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.generateLabel(org.jfree.data.category.CategoryDataset, int)",
        "snippet": "    public String generateLabel(CategoryDataset dataset, int series) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        String label = MessageFormat.format(this.formatPattern, \n                createItemArray(dataset, series));\n        return label;\n    }\n",
        "begin_line": 98,
        "end_line": 105,
        "comment": "\r\n     * Generates a label for the specified series.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param series  the series.\r\n     * \r\n     * @return A series label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7252
        },
        "num_failing_tests": 18
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.createItemArray#116",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.createItemArray(org.jfree.data.category.CategoryDataset, int)",
        "snippet": "    protected Object[] createItemArray(CategoryDataset dataset, int series) {\n        Object[] result = new Object[1];\n        result[0] = dataset.getRowKey(series).toString();\n        return result;\n    }\n",
        "begin_line": 116,
        "end_line": 120,
        "comment": "\r\n     * Creates the array of items that can be passed to the \r\n     * {@link MessageFormat} class for creating labels.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The items (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7252
        },
        "num_failing_tests": 18
    },
    {
        "name": "Plot.resolveDomainAxisLocation#1304",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.resolveDomainAxisLocation(org.jfree.chart.axis.AxisLocation, org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    public static RectangleEdge resolveDomainAxisLocation(\n            AxisLocation location, PlotOrientation orientation) {\n        \n        if (location == null) {\n            throw new IllegalArgumentException(\"Null 'location' argument.\");   \n        }\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        RectangleEdge result = null;\n        \n        if (location == AxisLocation.TOP_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.RIGHT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.TOP;\n            }\n        }\n        else if (location == AxisLocation.TOP_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.LEFT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.TOP;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_RIGHT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.RIGHT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n        }\n        else if (location == AxisLocation.BOTTOM_OR_LEFT) {\n            if (orientation == PlotOrientation.HORIZONTAL) {\n                result = RectangleEdge.LEFT;\n            }\n            else if (orientation == PlotOrientation.VERTICAL) {\n                result = RectangleEdge.BOTTOM;\n            }\n        }\n        // the above should cover all the options...\n        if (result == null) {\n            throw new IllegalStateException(\"resolveDomainAxisLocation()\");\n        }\n        return result;\n        \n    }\n",
        "begin_line": 1304,
        "end_line": 1354,
        "comment": "\r\n     * Resolves a domain axis location for a given plot orientation.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param orientation  the orientation (<code>null</code> not permitted).\r\n     *\r\n     * @return The edge (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisCollection.AxisCollection#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.AxisCollection()",
        "snippet": "    public AxisCollection() {\n        this.axesAtTop = new java.util.ArrayList();\n        this.axesAtBottom = new java.util.ArrayList();\n        this.axesAtLeft = new java.util.ArrayList();\n        this.axesAtRight = new java.util.ArrayList();\n    }\n",
        "begin_line": 71,
        "end_line": 76,
        "comment": "\r\n     * Creates a new empty collection.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisCollection.getAxesAtTop#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.getAxesAtTop()",
        "snippet": "    public List getAxesAtTop() {\n        return this.axesAtTop;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Returns a list of the axes (if any) that need to be drawn at the top of \r\n     * the plot area.\r\n     * \r\n     * @return A list of axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisCollection.add#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.add(org.jfree.chart.axis.Axis, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void add(Axis axis, RectangleEdge edge) {\n        if (axis == null) {\n            throw new IllegalArgumentException(\"Null 'axis' argument.\");   \n        }\n        if (edge == null) {\n            throw new IllegalArgumentException(\"Null 'edge' argument.\");   \n        }\n        if (edge == RectangleEdge.TOP) {\n            this.axesAtTop.add(axis);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            this.axesAtBottom.add(axis);\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            this.axesAtLeft.add(axis);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            this.axesAtRight.add(axis);\n        }\n    }\n",
        "begin_line": 125,
        "end_line": 144,
        "comment": "\r\n     * Adds an axis to the collection.\r\n     * \r\n     * @param axis  the axis (<code>null</code> not permitted).\r\n     * @param edge  the edge of the plot that the axis should be drawn on \r\n     *              (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.7071
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.getTop#119",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getTop()",
        "snippet": "    public double getTop() {\n        return this.top;\n    }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\n     * Returns the top insets.\n     * \n     * @return The top insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.getBottom#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getBottom()",
        "snippet": "    public double getBottom() {\n        return this.bottom;\n    }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\n     * Returns the bottom insets.\n     * \n     * @return The bottom insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.getLeft#137",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getLeft()",
        "snippet": "    public double getLeft() {\n        return this.left;\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\n     * Returns the left insets.\n     * \n     * @return The left insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.getRight#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.getRight()",
        "snippet": "    public double getRight() {\n        return this.right;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\n     * Returns the right insets.\n     * \n     * @return The right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.createOutsetRectangle#311",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle(java.awt.geom.Rectangle2D)",
        "snippet": "    public Rectangle2D createOutsetRectangle(Rectangle2D base) {\n        return createOutsetRectangle(base, true, true);\n    }\n",
        "begin_line": 311,
        "end_line": 313,
        "comment": "\n     * Creates an outset rectangle.\n     * \n     * @param base  the base rectangle (<code>null</code> not permitted).\n     * \n     * @return An outset rectangle.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.createOutsetRectangle#324",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.createOutsetRectangle(java.awt.geom.Rectangle2D, boolean, boolean)",
        "snippet": "    public Rectangle2D createOutsetRectangle(Rectangle2D base,\n                                             boolean horizontal, \n                                             boolean vertical) {\n        if (base == null) {\n            throw new IllegalArgumentException(\"Null 'base' argument.\");\n        }\n        double topMargin = 0.0;\n        double bottomMargin = 0.0;\n        if (vertical) {\n            topMargin = calculateTopOutset(base.getHeight());\n            bottomMargin = calculateBottomOutset(base.getHeight());\n        }\n        double leftMargin = 0.0;\n        double rightMargin = 0.0;\n        if (horizontal) {\n            leftMargin = calculateLeftOutset(base.getWidth());\n            rightMargin = calculateRightOutset(base.getWidth());\n        }\n        return new Rectangle2D.Double(\n            base.getX() - leftMargin, \n            base.getY() - topMargin,\n            base.getWidth() + leftMargin + rightMargin,\n            base.getHeight() + topMargin + bottomMargin\n        );\n    }\n",
        "begin_line": 324,
        "end_line": 348,
        "comment": "\n     * Creates an outset rectangle.\n     * \n     * @param base  the base rectangle (<code>null</code> not permitted).\n     * @param horizontal  apply horizontal insets?\n     * @param vertical  apply vertical insets? \n     * \n     * @return An outset rectangle.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendTitle.fetchLegendItems#389",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.fetchLegendItems()",
        "snippet": "    protected void fetchLegendItems() {\n        this.items.clear();\n        RectangleEdge p = getPosition();\n        if (RectangleEdge.isTopOrBottom(p)) {\n            this.items.setArrangement(this.hLayout);   \n        }\n        else {\n            this.items.setArrangement(this.vLayout);   \n        }\n        for (int s = 0; s < this.sources.length; s++) {\n            LegendItemCollection legendItems = this.sources[s].getLegendItems();\n            if (legendItems != null) {\n                for (int i = 0; i < legendItems.getItemCount(); i++) {\n                    LegendItem item = legendItems.get(i);\n                    Block block = createLegendItemBlock(item);\n                    this.items.add(block);\n                }\n            }\n        }\n    }\n",
        "begin_line": 389,
        "end_line": 408,
        "comment": "\r\n     * Fetches the latest legend items.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.drawRotatedString#540",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2,\n            float x, float y, TextAnchor textAnchor,\n            double angle, TextAnchor rotationAnchor) {\n\n        if (text == null || text.equals(\"\")) {\n            return;\n        }\n        float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor);\n        float[] rotateAdj = deriveRotationAnchorOffsets(g2, text, \n                rotationAnchor);\n        drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1],\n                angle, x + textAdj[0] + rotateAdj[0], \n                y + textAdj[1] + rotateAdj[1]);\n\n    }\n",
        "begin_line": 540,
        "end_line": 554,
        "comment": "\n     * Draws a string that is aligned by one anchor point and rotated about \n     * another anchor point.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for positioning the text.\n     * @param y  the y-coordinate for positioning the text.\n     * @param textAnchor  the text anchor.\n     * @param angle  the rotation angle (in radians).\n     * @param rotationAnchor  the rotation anchor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.deriveTextBoundsAnchorOffsets#601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.deriveTextBoundsAnchorOffsets(java.awt.Graphics2D, java.lang.String, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private static float[] deriveTextBoundsAnchorOffsets(Graphics2D g2,\n            String text, TextAnchor anchor) {\n\n        float[] result = new float[2];\n        FontRenderContext frc = g2.getFontRenderContext();\n        Font f = g2.getFont();\n        FontMetrics fm = g2.getFontMetrics(f);\n        Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm);\n        LineMetrics metrics = f.getLineMetrics(text, frc);\n        float ascent = metrics.getAscent();\n        float halfAscent = ascent / 2.0f;\n        float descent = metrics.getDescent();\n        float leading = metrics.getLeading();\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_CENTER) {\n\n            xAdj = (float) -bounds.getWidth() / 2.0f;\n\n        }\n        else if (anchor == TextAnchor.TOP_RIGHT\n                || anchor == TextAnchor.CENTER_RIGHT\n                || anchor == TextAnchor.BOTTOM_RIGHT\n                || anchor == TextAnchor.BASELINE_RIGHT\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            xAdj = (float) -bounds.getWidth();\n\n        }\n\n        if (anchor == TextAnchor.TOP_LEFT\n                || anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.TOP_RIGHT) {\n\n            yAdj = -descent - leading + (float) bounds.getHeight();\n\n        }\n        else if (anchor == TextAnchor.HALF_ASCENT_LEFT\n                || anchor == TextAnchor.HALF_ASCENT_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            yAdj = halfAscent;\n\n        }\n        else if (anchor == TextAnchor.CENTER_LEFT\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.CENTER_RIGHT) {\n\n            yAdj = -descent - leading + (float) (bounds.getHeight() / 2.0);\n\n        }\n        else if (anchor == TextAnchor.BASELINE_LEFT\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.BASELINE_RIGHT) {\n\n            yAdj = 0.0f;\n\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n\n            yAdj = -metrics.getDescent() - metrics.getLeading();\n\n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n\n    }\n",
        "begin_line": 601,
        "end_line": 675,
        "comment": "\n     * A utility method that calculates the anchor offsets for a string.  \n     * Normally, the (x, y) coordinate for drawing text is a point on the \n     * baseline at the left of the text string.  If you add these offsets to \n     * (x, y) and draw the string, then the anchor point should coincide with \n     * the (x, y) point.\n     *\n     * @param g2  the graphics device (not <code>null</code>).\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return  The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.deriveRotationAnchorOffsets#688",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.deriveRotationAnchorOffsets(java.awt.Graphics2D, java.lang.String, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private static float[] deriveRotationAnchorOffsets(Graphics2D g2,\n            String text, TextAnchor anchor) {\n\n        float[] result = new float[2];\n        FontRenderContext frc = g2.getFontRenderContext();\n        LineMetrics metrics = g2.getFont().getLineMetrics(text, frc);\n        FontMetrics fm = g2.getFontMetrics();\n        Rectangle2D bounds = TextUtilities.getTextBounds(text, g2, fm);\n        float ascent = metrics.getAscent();\n        float halfAscent = ascent / 2.0f;\n        float descent = metrics.getDescent();\n        float leading = metrics.getLeading();\n        float xAdj = 0.0f;\n        float yAdj = 0.0f;\n\n        if (anchor == TextAnchor.TOP_LEFT\n                || anchor == TextAnchor.CENTER_LEFT\n                || anchor == TextAnchor.BOTTOM_LEFT\n                || anchor == TextAnchor.BASELINE_LEFT\n                || anchor == TextAnchor.HALF_ASCENT_LEFT) {\n\n            xAdj = 0.0f;\n\n        }\n        else if (anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_CENTER) {\n\n            xAdj = (float) bounds.getWidth() / 2.0f;\n\n        }\n        else if (anchor == TextAnchor.TOP_RIGHT\n                || anchor == TextAnchor.CENTER_RIGHT\n                || anchor == TextAnchor.BOTTOM_RIGHT\n                || anchor == TextAnchor.BASELINE_RIGHT\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            xAdj = (float) bounds.getWidth();\n\n        }\n\n        if (anchor == TextAnchor.TOP_LEFT\n                || anchor == TextAnchor.TOP_CENTER\n                || anchor == TextAnchor.TOP_RIGHT) {\n\n            yAdj = descent + leading - (float) bounds.getHeight();\n\n        }\n        else if (anchor == TextAnchor.CENTER_LEFT\n                || anchor == TextAnchor.CENTER\n                || anchor == TextAnchor.CENTER_RIGHT) {\n\n            yAdj = descent + leading - (float) (bounds.getHeight() / 2.0);\n\n        }\n        else if (anchor == TextAnchor.HALF_ASCENT_LEFT\n                || anchor == TextAnchor.HALF_ASCENT_CENTER\n                || anchor == TextAnchor.HALF_ASCENT_RIGHT) {\n\n            yAdj = -halfAscent;\n\n        }\n        else if (anchor == TextAnchor.BASELINE_LEFT\n                || anchor == TextAnchor.BASELINE_CENTER\n                || anchor == TextAnchor.BASELINE_RIGHT) {\n\n            yAdj = 0.0f;\n\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT\n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n\n            yAdj = metrics.getDescent() + metrics.getLeading();\n\n        }\n        result[0] = xAdj;\n        result[1] = yAdj;\n        return result;\n\n    }\n",
        "begin_line": 688,
        "end_line": 770,
        "comment": "\n     * A utility method that calculates the rotation anchor offsets for a \n     * string.  These offsets are relative to the text starting coordinate \n     * (BASELINE_LEFT).\n     *\n     * @param g2  the graphics device.\n     * @param text  the text.\n     * @param anchor  the anchor point.\n     *\n     * @return  The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getRenderer#1264",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRenderer()",
        "snippet": "    public CategoryItemRenderer getRenderer() {\n        return getRenderer(0);\n    }\n",
        "begin_line": 1264,
        "end_line": 1266,
        "comment": "\r\n     * Returns a reference to the renderer for the plot.\r\n     *\r\n     * @return The renderer.\r\n     * \r\n     * @see #setRenderer(CategoryItemRenderer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.isVerticalTickLabels#320",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isVerticalTickLabels()",
        "snippet": "    public boolean isVerticalTickLabels() {\n        return this.verticalTickLabels;\n    }\n",
        "begin_line": 320,
        "end_line": 322,
        "comment": "\r\n     * Returns <code>true</code> if the tick labels should be rotated (to \r\n     * vertical), and <code>false</code> otherwise.\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     * \r\n     * @see #setVerticalTickLabels(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.reserveSpace#748",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.reserveSpace(java.awt.Graphics2D, org.jfree.chart.plot.Plot, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisSpace)",
        "snippet": "    public AxisSpace reserveSpace(Graphics2D g2, Plot plot,\n                                  Rectangle2D plotArea, \n                                  RectangleEdge edge, AxisSpace space) {\n\n        // create a new space object if one wasn't supplied...\n        if (space == null) {\n            space = new AxisSpace();\n        }\n        \n        // if the axis is not visible, no additional space is required...\n        if (!isVisible()) {\n            return space;\n        }\n\n        // if the axis has a fixed dimension, return it...\n        double dimension = getFixedDimension();\n        if (dimension > 0.0) {\n            space.ensureAtLeast(dimension, edge);\n        }\n\n        // calculate the max size of the tick labels (if visible)...\n        double tickLabelHeight = 0.0;\n        double tickLabelWidth = 0.0;\n        if (isTickLabelsVisible()) {\n            g2.setFont(getTickLabelFont());\n            List ticks = refreshTicks(g2, new AxisState(), plotArea, edge);\n            if (RectangleEdge.isTopOrBottom(edge)) {\n                tickLabelHeight = findMaximumTickLabelHeight(ticks, g2, \n                        plotArea, isVerticalTickLabels());\n            }\n            else if (RectangleEdge.isLeftOrRight(edge)) {\n                tickLabelWidth = findMaximumTickLabelWidth(ticks, g2, plotArea,\n                        isVerticalTickLabels());\n            }\n        }\n\n        // get the axis label size and update the space object...\n        Rectangle2D labelEnclosure = getLabelEnclosure(g2, edge);\n        double labelHeight = 0.0;\n        double labelWidth = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            labelHeight = labelEnclosure.getHeight();\n            space.add(labelHeight + tickLabelHeight, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            labelWidth = labelEnclosure.getWidth();\n            space.add(labelWidth + tickLabelWidth, edge);\n        }\n\n        return space;\n\n    }\n",
        "begin_line": 748,
        "end_line": 799,
        "comment": "\r\n     * Returns the space required to draw the axis.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot that the axis belongs to.\r\n     * @param plotArea  the area within which the plot should be drawn.\r\n     * @param edge  the axis location.\r\n     * @param space  the space already reserved (for other axes).\r\n     *\r\n     * @return The space required to draw the axis (including pre-reserved \r\n     *         space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.isAutoTickUnitSelection#1327",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isAutoTickUnitSelection()",
        "snippet": "    public boolean isAutoTickUnitSelection() {\n        return this.autoTickUnitSelection;\n    }\n",
        "begin_line": 1327,
        "end_line": 1329,
        "comment": "\r\n     * Returns a flag indicating whether or not the tick unit is automatically\r\n     * selected from a range of standard tick units.\r\n     *\r\n     * @return A flag indicating whether or not the tick unit is automatically\r\n     *         selected.\r\n     *         \r\n     * @see #setAutoTickUnitSelection(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.getStandardTickUnits#1370",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getStandardTickUnits()",
        "snippet": "    public TickUnitSource getStandardTickUnits() {\n        return this.standardTickUnits;\n    }\n",
        "begin_line": 1370,
        "end_line": 1372,
        "comment": "\r\n     * Returns the source for obtaining standard tick units for the axis.\r\n     *\r\n     * @return The source (possibly <code>null</code>).\r\n     * \r\n     * @see #setStandardTickUnits(TickUnitSource)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnits.getCeilingTickUnit#157",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.getCeilingTickUnit(org.jfree.chart.axis.TickUnit)",
        "snippet": "    public TickUnit getCeilingTickUnit(TickUnit unit) {\n\n        int index = Collections.binarySearch(this.tickUnits, unit);\n        if (index >= 0) {\n            return (TickUnit) this.tickUnits.get(index);\n        }\n        else {\n            index = -(index + 1);\n            return (TickUnit) this.tickUnits.get(\n                Math.min(index, this.tickUnits.size() - 1)\n            );\n        }\n\n    }\n",
        "begin_line": 157,
        "end_line": 170,
        "comment": "\r\n     * Returns the tick unit in the collection that is greater than or equal\r\n     * to (in size) the specified unit.\r\n     *\r\n     * @param unit  the unit.\r\n     *\r\n     * @return A unit from the collection.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnits.getCeilingTickUnit#180",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.getCeilingTickUnit(double)",
        "snippet": "    public TickUnit getCeilingTickUnit(double size) {\n        return getCeilingTickUnit(new NumberTickUnit(size, \n                NumberFormat.getInstance()));\n    }\n",
        "begin_line": 180,
        "end_line": 183,
        "comment": "\r\n     * Returns the tick unit in the collection that is greater than or equal\r\n     * to the specified size.\r\n     *\r\n     * @param size  the size.\r\n     *\r\n     * @return A unit from the collection.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnit.compareTo#112",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.compareTo(java.lang.Object)",
        "snippet": "    public int compareTo(Object object) {\n\n        if (object instanceof TickUnit) {\n            TickUnit other = (TickUnit) object;\n            if (this.size > other.getSize()) {\n                return 1;\n            }\n            else if (this.size < other.getSize()) {\n                return -1;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            return -1;\n        }\n\n    }\n",
        "begin_line": 112,
        "end_line": 130,
        "comment": "\r\n     * Compares this tick unit to an arbitrary object.\r\n     *\r\n     * @param object  the object to compare against.\r\n     *\r\n     * @return <code>1</code> if the size of the other object is less than this,\r\n     *      <code>0</code> if both have the same size and <code>-1</code> this\r\n     *      size is less than the others.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Tick.getText#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getText()",
        "snippet": "    public String getText() {\n        return this.text;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\r\n     * Returns the text version of the tick value.\r\n     *\r\n     * @return A string (possibly <code>null</code>;\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisState.AxisState#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.AxisState()",
        "snippet": "    public AxisState() {\n        this(0.0);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\r\n     * Creates a new axis state.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisState.AxisState#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.AxisState(double)",
        "snippet": "    public AxisState(double cursor) {\n        this.cursor = cursor;\n        this.ticks = new java.util.ArrayList();\n    }\n",
        "begin_line": 80,
        "end_line": 83,
        "comment": "\r\n     * Creates a new axis state.\r\n     * \r\n     * @param cursor  the cursor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisState.getCursor#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.getCursor()",
        "snippet": "    public double getCursor() {\n        return this.cursor;\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\r\n     * Returns the cursor position.\r\n     * \r\n     * @return The cursor position.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisState.setTicks#174",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.setTicks(java.util.List)",
        "snippet": "    public void setTicks(List ticks) {\n        this.ticks = ticks;\n    }\n",
        "begin_line": 174,
        "end_line": 176,
        "comment": "\r\n     * Sets the list of ticks.\r\n     * \r\n     * @param ticks  the ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisSpace.add#166",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "signature": "org.jfree.chart.axis.AxisSpace.add(double, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void add(double space, RectangleEdge edge) {\n        if (edge == null) {\n            throw new IllegalArgumentException(\"Null 'edge' argument.\");\n        }\n        if (edge == RectangleEdge.TOP) {     \n            this.top += space;\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            this.bottom += space;\n        }\n        else if (edge == RectangleEdge.LEFT) {\n            this.left += space;\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            this.right += space;\n        }\n        else {\n            throw new IllegalStateException(\"Unrecognised 'edge' argument.\");\n        }\n    }\n",
        "begin_line": 166,
        "end_line": 185,
        "comment": "\r\n     * Adds space to the top, bottom, left or right edge of the plot area.\r\n     * \r\n     * @param space  the space (in Java2D units).\r\n     * @param edge  the edge (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisSpace.shrink#242",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "signature": "org.jfree.chart.axis.AxisSpace.shrink(java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public Rectangle2D shrink(Rectangle2D area, Rectangle2D result) {\n        if (result == null) {\n            result = new Rectangle2D.Double();\n        }\n        result.setRect(\n            area.getX() + this.left, \n            area.getY() + this.top,\n            area.getWidth() - this.left - this.right,\n            area.getHeight() - this.top - this.bottom\n        );\n        return result;\n    }\n",
        "begin_line": 242,
        "end_line": 253,
        "comment": "\r\n     * Shrinks an area by the space attributes.\r\n     * \r\n     * @param area  the area to shrink.\r\n     * @param result  an optional carrier for the result.\r\n     * \r\n     * @return The result.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.isVisible#313",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isVisible()",
        "snippet": "    public boolean isVisible() {\n        return this.visible;\n    }\n",
        "begin_line": 313,
        "end_line": 315,
        "comment": "\r\n     * Returns <code>true</code> if the axis is visible, and \r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @return A boolean.\r\n     * \r\n     * @see #setVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getLabelFont#380",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelFont()",
        "snippet": "    public Font getLabelFont() {\n        return this.labelFont;\n    }\n",
        "begin_line": 380,
        "end_line": 382,
        "comment": "\r\n     * Returns the font for the axis label.\r\n     *\r\n     * @return The font (never <code>null</code>).\r\n     * \r\n     * @see #setLabelFont(Font)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getLabelPaint#409",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelPaint()",
        "snippet": "    public Paint getLabelPaint() {\n        return this.labelPaint;\n    }\n",
        "begin_line": 409,
        "end_line": 411,
        "comment": "\r\n     * Returns the color/shade used to draw the axis label.\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setLabelPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getLabelInsets#437",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelInsets()",
        "snippet": "    public RectangleInsets getLabelInsets() {\n        return this.labelInsets;\n    }\n",
        "begin_line": 437,
        "end_line": 439,
        "comment": "\r\n     * Returns the insets for the label (that is, the amount of blank space\r\n     * that should be left around the label).\r\n     *\r\n     * @return The label insets (never <code>null</code>).\r\n     * \r\n     * @see #setLabelInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getLabelAngle#466",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelAngle()",
        "snippet": "    public double getLabelAngle() {\n        return this.labelAngle;\n    }\n",
        "begin_line": 466,
        "end_line": 468,
        "comment": "\r\n     * Returns the angle of the axis label.\r\n     *\r\n     * @return The angle (in radians).\r\n     * \r\n     * @see #setLabelAngle(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.isAxisLineVisible#548",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isAxisLineVisible()",
        "snippet": "    public boolean isAxisLineVisible() {\n        return this.axisLineVisible;\n    }\n",
        "begin_line": 548,
        "end_line": 550,
        "comment": "\r\n     * A flag that controls whether or not the axis line is drawn.\r\n     * \r\n     * @return A boolean.\r\n     * \r\n     * @see #getAxisLinePaint()\r\n     * @see #getAxisLineStroke()\r\n     * @see #setAxisLineVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.isTickLabelsVisible#630",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isTickLabelsVisible()",
        "snippet": "    public boolean isTickLabelsVisible() {\n        return this.tickLabelsVisible;\n    }\n",
        "begin_line": 630,
        "end_line": 632,
        "comment": "\r\n     * Returns a flag indicating whether or not the tick labels are visible.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #getTickLabelFont()\r\n     * @see #getTickLabelPaint()\r\n     * @see #setTickLabelsVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getTickLabelFont#661",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickLabelFont()",
        "snippet": "    public Font getTickLabelFont() {\n        return this.tickLabelFont;\n    }\n",
        "begin_line": 661,
        "end_line": 663,
        "comment": "\r\n     * Returns the font used for the tick labels (if showing).\r\n     *\r\n     * @return The font (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelFont(Font)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getTickLabelInsets#720",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickLabelInsets()",
        "snippet": "    public RectangleInsets getTickLabelInsets() {\n        return this.tickLabelInsets;\n    }\n",
        "begin_line": 720,
        "end_line": 722,
        "comment": "\r\n     * Returns the insets for the tick labels.\r\n     *\r\n     * @return The insets (never <code>null</code>).\r\n     * \r\n     * @see #setTickLabelInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getFixedDimension#910",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getFixedDimension()",
        "snippet": "    public double getFixedDimension() {\n        return this.fixedDimension;\n    }\n",
        "begin_line": 910,
        "end_line": 912,
        "comment": "\r\n     * Returns the fixed dimension for the axis.\r\n     *\r\n     * @return The fixed dimension.\r\n     * \r\n     * @see #setFixedDimension(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getLabelEnclosure#1054",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabelEnclosure(java.awt.Graphics2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected Rectangle2D getLabelEnclosure(Graphics2D g2, RectangleEdge edge) {\n\n        Rectangle2D result = new Rectangle2D.Double();\n        String axisLabel = getLabel();\n        if (axisLabel != null && !axisLabel.equals(\"\")) {\n            FontMetrics fm = g2.getFontMetrics(getLabelFont());\n            Rectangle2D bounds = TextUtilities.getTextBounds(axisLabel, g2, fm);\n            RectangleInsets insets = getLabelInsets();\n            bounds = insets.createOutsetRectangle(bounds);\n            double angle = getLabelAngle();\n            if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {\n                angle = angle - Math.PI / 2.0;\n            }\n            double x = bounds.getCenterX();\n            double y = bounds.getCenterY();\n            AffineTransform transformer \n                = AffineTransform.getRotateInstance(angle, x, y);\n            Shape labelBounds = transformer.createTransformedShape(bounds);\n            result = labelBounds.getBounds2D();\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 1054,
        "end_line": 1077,
        "comment": "\r\n     * Returns a rectangle that encloses the axis label.  This is typically \r\n     * used for layout purposes (it gives the maximum dimensions of the label).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param edge  the edge of the plot area along which the axis is measuring.\r\n     *\r\n     * @return The enclosing rectangle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6992
        },
        "num_failing_tests": 22
    },
    {
        "name": "Size2D.Size2D#48",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.Size2D()",
        "snippet": "    public Size2D() {\n        this(0.0, 0.0);\n    }\n",
        "begin_line": 48,
        "end_line": 50,
        "comment": "\n     * Creates a new instance with zero width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "Size2D.getWidth#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\n     * Returns the width.\n     *\n     * @return The width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "Size2D.getHeight#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\n     * Returns the height.\n     *\n     * @return The height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.trimWidth#477",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimWidth(double)",
        "snippet": "    public double trimWidth(double width) {\n        return width - calculateLeftInset(width) - calculateRightInset(width);   \n    }\n",
        "begin_line": 477,
        "end_line": 479,
        "comment": "\n     * Trims the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The trimmed width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.extendWidth#488",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendWidth(double)",
        "snippet": "    public double extendWidth(double width) {\n        return width + calculateLeftOutset(width) + calculateRightOutset(width);   \n    }\n",
        "begin_line": 488,
        "end_line": 490,
        "comment": "\n     * Extends the given width to allow for the insets.\n     * \n     * @param width  the width.\n     * \n     * @return The extended width.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.trimHeight#499",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trimHeight(double)",
        "snippet": "    public double trimHeight(double height) {\n        return height \n               - calculateTopInset(height) - calculateBottomInset(height);   \n    }\n",
        "begin_line": 499,
        "end_line": 502,
        "comment": "\n     * Trims the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The trimmed height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.extendHeight#511",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.extendHeight(double)",
        "snippet": "    public double extendHeight(double height) {\n        return height \n               + calculateTopOutset(height) + calculateBottomOutset(height);   \n    }\n",
        "begin_line": 511,
        "end_line": 514,
        "comment": "\n     * Extends the given height to allow for the insets.\n     * \n     * @param height  the height.\n     * \n     * @return The extended height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendTitle.arrange#470",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        Size2D result = new Size2D();\n        fetchLegendItems();\n        if (this.items.isEmpty()) {\n            return result;   \n        }\n        BlockContainer container = this.wrapper;\n        if (container == null) {\n            container = this.items;\n        }\n        RectangleConstraint c = toContentConstraint(constraint);\n        Size2D size = container.arrange(g2, c);\n        result.height = calculateTotalHeight(size.height);\n        result.width = calculateTotalWidth(size.width);\n        return result;\n    }\n",
        "begin_line": 470,
        "end_line": 485,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendTitle.draw#508",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        Rectangle2D target = (Rectangle2D) area.clone();\n        target = trimMargin(target);\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(target);\n        }\n        BlockFrame border = getFrame();\n        border.draw(g2, target);\n        border.getInsets().trim(target);\n        BlockContainer container = this.wrapper;\n        if (container == null) {\n            container = this.items; \n        }\n        target = trimPadding(target);\n        return container.draw(g2, target, params);   \n    }\n",
        "begin_line": 508,
        "end_line": 524,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  ignored (<code>null</code> permitted).\r\n     * \r\n     * @return An {@link org.jfree.chart.block.EntityBlockResult} or \r\n     *         <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.drawRotatedString#516",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, double, float, float)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2, float x, \n            float y, TextAnchor textAnchor, double angle, float rotationX, \n            float rotationY) {\n\n        if (text == null || text.equals(\"\")) {\n            return;\n        }\n        float[] textAdj = deriveTextBoundsAnchorOffsets(g2, text, textAnchor);\n        drawRotatedString(text, g2, x + textAdj[0], y + textAdj[1], angle, \n                rotationX, rotationY);\n    }\n",
        "begin_line": 516,
        "end_line": 526,
        "comment": "\n     * Draws a string that is aligned by one anchor point and rotated about \n     * another anchor point.\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for positioning the text.\n     * @param y  the y-coordinate for positioning the text.\n     * @param textAnchor  the text anchor.\n     * @param angle  the rotation angle.\n     * @param rotationX  the x-coordinate for the rotation anchor point.\n     * @param rotationY  the y-coordinate for the rotation anchor point.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextLine.TextLine#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.TextLine(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public TextLine(String text, Font font, Paint paint) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");   \n        }\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");   \n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.fragments = new java.util.ArrayList();\n        TextFragment fragment = new TextFragment(text, font, paint);\n        this.fragments.add(fragment);\n    }\n",
        "begin_line": 109,
        "end_line": 122,
        "comment": "\n     * Creates a new text line.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the text font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextLine.draw#154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, float anchorY, \n                     TextAnchor anchor, float rotateX, float rotateY, \n                     double angle) {\n    \n        float x = anchorX;\n        float yOffset = calculateBaselineOffset(g2, anchor);\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            Size2D d = fragment.calculateDimensions(g2);\n            fragment.draw(g2, x, anchorY + yOffset, TextAnchor.BASELINE_LEFT, \n                    rotateX, rotateY, angle);\n            x = x + (float) d.getWidth();\n        }\n    \n    }\n",
        "begin_line": 154,
        "end_line": 169,
        "comment": "\n     * Draws the text line.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text line that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * @param angle  the rotation angle (in radians).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextLine.calculateDimensions#178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        double width = 0.0;\n        double height = 0.0;\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            Size2D dimension = fragment.calculateDimensions(g2);\n            width = width + dimension.getWidth();\n            height = Math.max(height, dimension.getHeight());\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 178,
        "end_line": 189,
        "comment": "\n     * Calculates the width and height of the text line.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextLine.calculateBaselineOffset#227",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor)",
        "snippet": "    private float calculateBaselineOffset(Graphics2D g2, \n                                          TextAnchor anchor) {\n        float result = 0.0f;\n        Iterator iterator = this.fragments.iterator();\n        while (iterator.hasNext()) {\n            TextFragment fragment = (TextFragment) iterator.next();\n            result = Math.max(result, \n                    fragment.calculateBaselineOffset(g2, anchor));\n        }\n        return result;\n    }\n",
        "begin_line": 227,
        "end_line": 237,
        "comment": "\n     * Calculate the offsets required to translate from the specified anchor \n     * position to the left baseline position.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor position.\n     * \n     * @return The offsets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextFragment.TextFragment#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public TextFragment(String text, Font font, Paint paint) {\n        this(text, font, paint, 0.0f);\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * Creates a new text fragment.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextFragment.TextFragment#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.TextFragment(java.lang.String, java.awt.Font, java.awt.Paint, float)",
        "snippet": "    public TextFragment(String text, Font font, Paint paint,\n                        float baselineOffset) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");  \n        }\n        if (font == null) {\n            throw new IllegalArgumentException(\"Null 'font' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.text = text;\n        this.font = font;\n        this.paint = paint;\n        this.baselineOffset = baselineOffset;\n    }\n",
        "begin_line": 138,
        "end_line": 153,
        "comment": "\n     * Creates a new text fragment.\n     * \n     * @param text  the text (<code>null</code> not permitted).\n     * @param font  the font (<code>null</code> not permitted).\n     * @param paint  the text color (<code>null</code> not permitted).\n     * @param baselineOffset  the baseline offset.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextFragment.draw#203",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, \n                     float anchorY, TextAnchor anchor,\n                     float rotateX, float rotateY, \n                     double angle) {\n    \n        g2.setFont(this.font);\n        g2.setPaint(this.paint);\n        TextUtilities.drawRotatedString(this.text, g2, anchorX, anchorY \n                + this.baselineOffset, anchor, angle, rotateX, rotateY);\n    \n    }\n",
        "begin_line": 203,
        "end_line": 213,
        "comment": "\n     * Draws the text fragment.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate of the anchor point.\n     * @param anchorY  the y-coordinate of the anchor point.\n     * @param anchor  the location of the text that is aligned to the anchor \n     *                point.\n     * @param rotateX  the x-coordinate of the rotation point.\n     * @param rotateY  the y-coordinate of the rotation point.\n     * @param angle  the angle.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextFragment.calculateDimensions#222",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        FontMetrics fm = g2.getFontMetrics(this.font);\n        Rectangle2D bounds = TextUtilities.getTextBounds(this.text, g2, fm);\n        Size2D result = new Size2D(bounds.getWidth(), bounds.getHeight());\n        return result;\n    }\n",
        "begin_line": 222,
        "end_line": 227,
        "comment": "\n     * Calculates the dimensions of the text fragment.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height of the text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextFragment.calculateBaselineOffset#238",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.calculateBaselineOffset(java.awt.Graphics2D, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public float calculateBaselineOffset(Graphics2D g2, TextAnchor anchor) {\n        float result = 0.0f;\n        FontMetrics fm = g2.getFontMetrics(this.font);\n        LineMetrics lm = fm.getLineMetrics(\"ABCxyz\", g2);\n        if (anchor == TextAnchor.TOP_LEFT || anchor == TextAnchor.TOP_CENTER\n                                          || anchor == TextAnchor.TOP_RIGHT) {\n            result = lm.getAscent();\n        }\n        else if (anchor == TextAnchor.BOTTOM_LEFT \n                || anchor == TextAnchor.BOTTOM_CENTER\n                || anchor == TextAnchor.BOTTOM_RIGHT) {\n            result = -lm.getDescent() - lm.getLeading();\n        }\n        return result;                                             \n    }\n",
        "begin_line": 238,
        "end_line": 252,
        "comment": "\n     * Calculates the vertical offset between the baseline and the specified \n     * text anchor.\n     * \n     * @param g2  the graphics device.\n     * @param anchor  the anchor.\n     * \n     * @return the offset.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextBlock.TextBlock#87",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.TextBlock()",
        "snippet": "    public TextBlock() {\n        this.lines = new java.util.ArrayList();\n        this.lineAlignment = HorizontalAlignment.CENTER;\n    }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "\n     * Creates a new empty text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextBlock.addLine#120",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.addLine(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public void addLine(String text, Font font, Paint paint) {\n        addLine(new TextLine(text, font, paint));\n    }\n",
        "begin_line": 120,
        "end_line": 122,
        "comment": "\n     * Adds a line of text that will be displayed using the specified font.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextBlock.addLine#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.addLine(org.jfree.chart.text.TextLine)",
        "snippet": "    public void addLine(TextLine line) {\n        this.lines.add(line);    \n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * Adds a {@link TextLine} to the block.\n     * \n     * @param line  the line.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextBlock.calculateDimensions#163",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateDimensions(java.awt.Graphics2D)",
        "snippet": "    public Size2D calculateDimensions(Graphics2D g2) {\n        double width = 0.0;\n        double height = 0.0;\n        Iterator iterator = this.lines.iterator();\n        while (iterator.hasNext()) {\n            TextLine line = (TextLine) iterator.next();\n            Size2D dimension = line.calculateDimensions(g2);\n            width = Math.max(width, dimension.getWidth());\n            height = height + dimension.getHeight();\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 163,
        "end_line": 174,
        "comment": "\n     * Returns the width and height of the text block.\n     * \n     * @param g2  the graphics device.\n     * \n     * @return The width and height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextBlock.draw#211",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor)",
        "snippet": "    public void draw(Graphics2D g2, float x, float y, TextBlockAnchor anchor) {\n        draw(g2, x, y, anchor, 0.0f, 0.0f, 0.0);\n    }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\n     * Draws the text block at a specific location.\n     * \n     * @param g2  the graphics device.\n     * @param x  the x-coordinate for the anchor point.\n     * @param y  the y-coordinate for the anchor point.\n     * @param anchor  the anchor point.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextBlock.draw#228",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.draw(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor, float, float, double)",
        "snippet": "    public void draw(Graphics2D g2, float anchorX, float anchorY, \n                     TextBlockAnchor anchor, float rotateX, float rotateY, \n                     double angle) {\n    \n        Size2D d = calculateDimensions(g2);\n        float[] offsets = calculateOffsets(anchor, d.getWidth(), d.getHeight());\n        Iterator iterator = this.lines.iterator();\n        float yCursor = 0.0f;\n        while (iterator.hasNext()) {\n            TextLine line = (TextLine) iterator.next();\n            Size2D dimension = line.calculateDimensions(g2);\n            float lineOffset = 0.0f;\n            if (this.lineAlignment == HorizontalAlignment.CENTER) {\n                lineOffset = (float) (d.getWidth() - dimension.getWidth()) \n                    / 2.0f;   \n            }\n            else if (this.lineAlignment == HorizontalAlignment.RIGHT) {\n                lineOffset = (float) (d.getWidth() - dimension.getWidth());   \n            }\n            line.draw(g2, anchorX + offsets[0] + lineOffset, anchorY \n                    + offsets[1] + yCursor, TextAnchor.TOP_LEFT, rotateX, \n                    rotateY, angle);\n            yCursor = yCursor + (float) dimension.getHeight();\n        }\n        \n    }\n",
        "begin_line": 228,
        "end_line": 253,
        "comment": "\n     * Draws the text block, aligning it with the specified anchor point and \n     * rotating it about the specified rotation point.\n     * \n     * @param g2  the graphics device.\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the point on the text block that is aligned to the \n     *                anchor point.\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the x-coordinate for the rotation point.\n     * @param angle  the rotation (in radians).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getRenderer#1277",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRenderer(int)",
        "snippet": "    public CategoryItemRenderer getRenderer(int index) {\n        CategoryItemRenderer result = null;\n        if (this.renderers.size() > index) {\n            result = (CategoryItemRenderer) this.renderers.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1277,
        "end_line": 1283,
        "comment": "\r\n     * Returns the renderer at the given index.\r\n     *\r\n     * @param index  the renderer index.\r\n     *\r\n     * @return The renderer (possibly <code>null</code>).\r\n     * \r\n     * @see #setRenderer(int, CategoryItemRenderer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleConstraint.getWidth#171",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidth()",
        "snippet": "    public double getWidth() {\n        return this.width;\n    }\n",
        "begin_line": 171,
        "end_line": 173,
        "comment": "\r\n     * Returns the fixed width.\r\n     * \r\n     * @return The width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleConstraint.getWidthRange#180",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthRange()",
        "snippet": "    public Range getWidthRange() {\n        return this.widthRange;   \n    }\n",
        "begin_line": 180,
        "end_line": 182,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleConstraint.getWidthConstraintType#189",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getWidthConstraintType()",
        "snippet": "    public LengthConstraintType getWidthConstraintType() {\n        return this.widthConstraintType;\n    }\n",
        "begin_line": 189,
        "end_line": 191,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleConstraint.getHeight#198",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeight()",
        "snippet": "    public double getHeight() {\n        return this.height;\n    }\n",
        "begin_line": 198,
        "end_line": 200,
        "comment": "\r\n     * Returns the fixed height.\r\n     * \r\n     * @return The height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleConstraint.getHeightRange#207",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightRange()",
        "snippet": "    public Range getHeightRange() {\n        return this.heightRange;   \n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\r\n     * Returns the width range.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleConstraint.getHeightConstraintType#216",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.getHeightConstraintType()",
        "snippet": "    public LengthConstraintType getHeightConstraintType() {\n        return this.heightConstraintType;\n    }\n",
        "begin_line": 216,
        "end_line": 218,
        "comment": "\r\n     * Returns the constraint type.\r\n     * \r\n     * @return The constraint type (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "LineBorder.getInsets#124",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 124,
        "end_line": 126,
        "comment": "\r\n     * Returns the insets.\r\n     * \r\n     * @return The insets (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "LineBorder.draw#143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        double w = area.getWidth();\n        double h = area.getHeight();\n        // if the area has zero height or width, we shouldn't draw anything\n        if (w <= 0.0 || h <= 0.0) {\n            return;\n        }\n        double t = this.insets.calculateTopInset(h);\n        double b = this.insets.calculateBottomInset(h);\n        double l = this.insets.calculateLeftInset(w);\n        double r = this.insets.calculateRightInset(w);\n        double x = area.getX();\n        double y = area.getY();\n        double x0 = x + l / 2.0;\n        double x1 = x + w - r / 2.0;\n        double y0 = y + h - b / 2.0;\n        double y1 = y + t / 2.0;\n        g2.setPaint(getPaint());\n        g2.setStroke(getStroke());\n        Line2D line = new Line2D.Double();\n        if (t > 0.0) {\n            line.setLine(x0, y1, x1, y1);\n            g2.draw(line);\n        }\n        if (b > 0.0) {\n            line.setLine(x0, y0, x1, y0);\n            g2.draw(line);\n        }\n        if (l > 0.0) {\n            line.setLine(x0, y0, x0, y1);\n            g2.draw(line);\n        }\n        if (r > 0.0) {\n            line.setLine(x1, y0, x1, y1);\n            g2.draw(line);\n        }        \n    }    \n",
        "begin_line": 143,
        "end_line": 179,
        "comment": "\r\n     * Draws the border by filling in the reserved space (in black).\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "FlowArrangement.clear#416",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.clear()",
        "snippet": "    public void clear() {\n        // no action required.\n    }\n",
        "begin_line": 416,
        "end_line": 418,
        "comment": "\r\n     * Clears any cached information.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockResult.BlockResult#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockResult.java",
        "class_name": "org.jfree.chart.block.BlockResult",
        "signature": "org.jfree.chart.block.BlockResult.BlockResult()",
        "snippet": "    public BlockResult() {\n        this.entities = null;    \n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\r\n     * Creates a new result instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockContainer.setArrangement#119",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.setArrangement(org.jfree.chart.block.Arrangement)",
        "snippet": "    public void setArrangement(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;   \n    }\n",
        "begin_line": 119,
        "end_line": 124,
        "comment": "\r\n     * Sets the arrangement (layout) manager.\r\n     * \r\n     * @param arrangement  the arrangement (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockContainer.isEmpty#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.isEmpty()",
        "snippet": "    public boolean isEmpty() {\n        return this.blocks.isEmpty();   \n    }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\r\n     * Returns <code>true</code> if there are no blocks in the container, and\r\n     * <code>false</code> otherwise.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockContainer.clear#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.clear()",
        "snippet": "    public void clear() {\n        this.blocks.clear();\n        this.arrangement.clear();\n    }\n",
        "begin_line": 169,
        "end_line": 172,
        "comment": "\r\n     * Clears all the blocks from the container.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockContainer.draw#207",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        // check if we need to collect chart entities from the container\n        EntityBlockParams ebp = null;\n        StandardEntityCollection sec = null;\n        if (params instanceof EntityBlockParams) {\n            ebp = (EntityBlockParams) params;\n            if (ebp.getGenerateEntities()) {\n                sec = new StandardEntityCollection();   \n            }\n        }\n        Rectangle2D contentArea = (Rectangle2D) area.clone();\n        contentArea = trimMargin(contentArea);\n        drawBorder(g2, contentArea);\n        contentArea = trimBorder(contentArea);\n        contentArea = trimPadding(contentArea);\n        Iterator iterator = this.blocks.iterator();\n        while (iterator.hasNext()) {\n            Block block = (Block) iterator.next();\n            Rectangle2D bounds = block.getBounds();\n            Rectangle2D drawArea = new Rectangle2D.Double(bounds.getX() \n                    + area.getX(), bounds.getY() + area.getY(), \n                    bounds.getWidth(), bounds.getHeight());\n            Object r = block.draw(g2, drawArea, params);\n            if (sec != null) {\n                if (r instanceof EntityBlockResult) {\n                    EntityBlockResult ebr = (EntityBlockResult) r;\n                    EntityCollection ec = ebr.getEntityCollection();\n                    sec.addAll(ec);\n                }\n            }\n        }\n        BlockResult result = null;\n        if (sec != null) {\n            result = new BlockResult();\n            result.setEntityCollection(sec);\n        }\n        return result;\n    }\n",
        "begin_line": 207,
        "end_line": 244,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  passed on to blocks within the container \r\n     *                (<code>null</code> permitted).\r\n     * \r\n     * @return An instance of {@link EntityBlockResult}, or <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.getFrame#240",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.getFrame()",
        "snippet": "    public BlockFrame getFrame() {\n        return this.frame;\n    }\n",
        "begin_line": 240,
        "end_line": 242,
        "comment": "\r\n     * Returns the current frame (border).\r\n     * \r\n     * @return The frame.\r\n     * \r\n     * @since 1.0.5\r\n     * @see #setFrame(BlockFrame)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.trimToContentWidth#384",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(double)",
        "snippet": "    protected double trimToContentWidth(double fixedWidth) {\n        double result = this.margin.trimWidth(fixedWidth);\n        result = this.frame.getInsets().trimWidth(result);\n        result = this.padding.trimWidth(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 384,
        "end_line": 389,
        "comment": "\r\n     * Calculate the width available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * width.\r\n     * \r\n     * @param fixedWidth  the fixed width.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentHeight(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.trimToContentHeight#402",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(double)",
        "snippet": "    protected double trimToContentHeight(double fixedHeight) {\n        double result = this.margin.trimHeight(fixedHeight);\n        result = this.frame.getInsets().trimHeight(result);\n        result = this.padding.trimHeight(result);\n        return Math.max(result, 0.0);\n    }\n",
        "begin_line": 402,
        "end_line": 407,
        "comment": "\r\n     * Calculate the height available for content after subtracting \r\n     * the margin, border and padding space from the specified fixed \r\n     * height.\r\n     * \r\n     * @param fixedHeight  the fixed height.\r\n     * \r\n     * @return The available space.\r\n     * \r\n     * @see #trimToContentWidth(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.toContentConstraint#417",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.toContentConstraint(org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    protected RectangleConstraint toContentConstraint(RectangleConstraint c) {\n        if (c == null) {\n            throw new IllegalArgumentException(\"Null 'c' argument.\");\n        }\n        if (c.equals(RectangleConstraint.NONE)) {\n            return c;\n        }\n        double w = c.getWidth();\n        Range wr = c.getWidthRange();\n        double h = c.getHeight();\n        Range hr = c.getHeightRange();\n        double ww = trimToContentWidth(w);\n        double hh = trimToContentHeight(h);\n        Range wwr = trimToContentWidth(wr);\n        Range hhr = trimToContentHeight(hr);\n        return new RectangleConstraint(\n            ww, wwr, c.getWidthConstraintType(), \n            hh, hhr, c.getHeightConstraintType()\n        );\n    }\n",
        "begin_line": 417,
        "end_line": 436,
        "comment": "\r\n     * Returns a constraint for the content of this block that will result in\r\n     * the bounds of the block matching the specified constraint.\r\n     * \r\n     * @param c  the outer constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The content constraint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.trimToContentWidth#438",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentWidth(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentWidth(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentWidth(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentWidth(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 438,
        "end_line": 451,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.trimToContentHeight#453",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimToContentHeight(org.jfree.data.Range)",
        "snippet": "    private Range trimToContentHeight(Range r) {\n        if (r == null) {\n            return null;   \n        }\n        double lowerBound = 0.0;\n        double upperBound = Double.POSITIVE_INFINITY;\n        if (r.getLowerBound() > 0.0) {\n            lowerBound = trimToContentHeight(r.getLowerBound());   \n        }\n        if (r.getUpperBound() < Double.POSITIVE_INFINITY) {\n            upperBound = trimToContentHeight(r.getUpperBound());\n        }\n        return new Range(lowerBound, upperBound);\n    }\n",
        "begin_line": 453,
        "end_line": 466,
        "comment": "",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.calculateTotalWidth#475",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalWidth(double)",
        "snippet": "    protected double calculateTotalWidth(double contentWidth) {\n        double result = contentWidth;\n        result = this.padding.extendWidth(result);\n        result = this.frame.getInsets().extendWidth(result);\n        result = this.margin.extendWidth(result);\n        return result;\n    }\n",
        "begin_line": 475,
        "end_line": 481,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content width.\r\n     * \r\n     * @param contentWidth  the content width.\r\n     * \r\n     * @return The adjusted width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.calculateTotalHeight#490",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.calculateTotalHeight(double)",
        "snippet": "    protected double calculateTotalHeight(double contentHeight) {\n        double result = contentHeight;\n        result = this.padding.extendHeight(result);\n        result = this.frame.getInsets().extendHeight(result);\n        result = this.margin.extendHeight(result);\n        return result;\n    }\n",
        "begin_line": 490,
        "end_line": 496,
        "comment": "\r\n     * Adds the margin, border and padding to the specified content height.\r\n     * \r\n     * @param contentHeight  the content height.\r\n     * \r\n     * @return The adjusted height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisSpace.AxisSpace#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisSpace.java",
        "class_name": "org.jfree.chart.axis.AxisSpace",
        "signature": "org.jfree.chart.axis.AxisSpace.AxisSpace()",
        "snippet": "    public AxisSpace() {\n        this.top = 0.0;\n        this.bottom = 0.0;\n        this.left = 0.0;\n        this.right = 0.0;\n    }\n",
        "begin_line": 81,
        "end_line": 86,
        "comment": "\r\n     * Creates a new axis space record.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChart.draw#1126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public void draw(Graphics2D g2, \n                     Rectangle2D chartArea, Point2D anchor, \n                     ChartRenderingInfo info) {\n\n        notifyListeners(new ChartProgressEvent(this, this, \n                ChartProgressEvent.DRAWING_STARTED, 0));\n\n        // record the chart area, if info is requested...\n        if (info != null) {\n            info.clear();\n            info.setChartArea(chartArea);\n        }\n\n        // ensure no drawing occurs outside chart area...\n        Shape savedClip = g2.getClip();\n        g2.clip(chartArea);\n\n        g2.addRenderingHints(this.renderingHints);\n\n        // draw the chart background...\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(chartArea);\n        }\n\n        if (this.backgroundImage != null) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \n                    this.backgroundImageAlpha));\n            Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0, \n                    this.backgroundImage.getWidth(null), \n                    this.backgroundImage.getHeight(null));\n            Align.align(dest, chartArea, this.backgroundImageAlignment);\n            g2.drawImage(this.backgroundImage, (int) dest.getX(), \n                    (int) dest.getY(), (int) dest.getWidth(), \n                    (int) dest.getHeight(), null);\n            g2.setComposite(originalComposite);\n        }\n\n        if (isBorderVisible()) {\n            Paint paint = getBorderPaint();\n            Stroke stroke = getBorderStroke();\n            if (paint != null && stroke != null) {\n                Rectangle2D borderArea = new Rectangle2D.Double(\n                        chartArea.getX(), chartArea.getY(), \n                        chartArea.getWidth() - 1.0, chartArea.getHeight() \n                        - 1.0);\n                g2.setPaint(paint);\n                g2.setStroke(stroke);\n                g2.draw(borderArea);\n            }\n        }\n\n        // draw the title and subtitles...\n        Rectangle2D nonTitleArea = new Rectangle2D.Double();\n        nonTitleArea.setRect(chartArea);\n        this.padding.trim(nonTitleArea);\n        \n        EntityCollection entities = null;\n        if (info != null) {\n            entities = info.getEntityCollection();   \n        }\n        if (this.title != null) {\n            EntityCollection e = drawTitle(this.title, g2, nonTitleArea, \n                    (entities != null));\n            if (e != null) {\n                entities.addAll(e);   \n            }\n        }\n\n        Iterator iterator = this.subtitles.iterator();\n        while (iterator.hasNext()) {\n            Title currentTitle = (Title) iterator.next();\n            EntityCollection e = drawTitle(currentTitle, g2, nonTitleArea, \n                    (entities != null));\n            if (e != null) {\n                entities.addAll(e);   \n            }\n        }\n\n        Rectangle2D plotArea = nonTitleArea;\n \n        // draw the plot (axes and data visualisation)\n        PlotRenderingInfo plotInfo = null;\n        if (info != null) {\n            plotInfo = info.getPlotInfo();\n        }\n        this.plot.draw(g2, plotArea, anchor, null, plotInfo);\n\n        g2.setClip(savedClip);\n\n        notifyListeners(new ChartProgressEvent(this, this, \n                ChartProgressEvent.DRAWING_FINISHED, 100));\n    }\n",
        "begin_line": 1126,
        "end_line": 1219,
        "comment": "\r\n     * Draws the chart on a Java 2D graphics device (such as the screen or a\r\n     * printer).\r\n     * <P>\r\n     * This method is the focus of the entire JFreeChart library.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param chartArea  the area within which the chart should be drawn.\r\n     * @param anchor  the anchor point (in Java2D space) for the chart \r\n     *                (<code>null</code> permitted).\r\n     * @param info  records info about the drawing (null means collect no info).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChart.createAlignedRectangle2D#1231",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createAlignedRectangle2D(org.jfree.chart.util.Size2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment)",
        "snippet": "    private Rectangle2D createAlignedRectangle2D(Size2D dimensions, \n            Rectangle2D frame, HorizontalAlignment hAlign, \n            VerticalAlignment vAlign) {\n        double x = Double.NaN;\n        double y = Double.NaN;\n        if (hAlign == HorizontalAlignment.LEFT) {\n            x = frame.getX();   \n        }\n        else if (hAlign == HorizontalAlignment.CENTER) {\n            x = frame.getCenterX() - (dimensions.width / 2.0);   \n        }\n        else if (hAlign == HorizontalAlignment.RIGHT) {\n            x = frame.getMaxX() - dimensions.width;   \n        }\n        if (vAlign == VerticalAlignment.TOP) {\n            y = frame.getY();   \n        }\n        else if (vAlign == VerticalAlignment.CENTER) {\n            y = frame.getCenterY() - (dimensions.height / 2.0);   \n        }\n        else if (vAlign == VerticalAlignment.BOTTOM) {\n            y = frame.getMaxY() - dimensions.height;   \n        }\n        \n        return new Rectangle2D.Double(x, y, dimensions.width, \n                dimensions.height);\n    }\n",
        "begin_line": 1231,
        "end_line": 1257,
        "comment": "\r\n     * Creates a rectangle that is aligned to the frame.\r\n     * \r\n     * @param dimensions\r\n     * @param frame\r\n     * @param hAlign\r\n     * @param vAlign\r\n     * \r\n     * @return A rectangle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChart.drawTitle#1273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.drawTitle(org.jfree.chart.title.Title, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
        "snippet": "    protected EntityCollection drawTitle(Title t, Graphics2D g2, \n                                         Rectangle2D area, boolean entities) {\n\n        if (t == null) {\n            throw new IllegalArgumentException(\"Null 't' argument.\");   \n        }\n        if (area == null) {\n            throw new IllegalArgumentException(\"Null 'area' argument.\");   \n        }\n        Rectangle2D titleArea = new Rectangle2D.Double();\n        RectangleEdge position = t.getPosition();\n        double ww = area.getWidth();\n        if (ww <= 0.0) {\n            return null;\n        }\n        double hh = area.getHeight();\n        if (hh <= 0.0) {\n            return null;\n        }\n        RectangleConstraint constraint = new RectangleConstraint(ww, \n                new Range(0.0, ww), LengthConstraintType.RANGE, hh, \n                new Range(0.0, hh), LengthConstraintType.RANGE);\n        Object retValue = null;\n        BlockParams p = new BlockParams();\n        p.setGenerateEntities(entities);\n        if (position == RectangleEdge.TOP) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    t.getHorizontalAlignment(), VerticalAlignment.TOP);\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), Math.min(area.getY() + size.height, \n                    area.getMaxY()), area.getWidth(), Math.max(area.getHeight()\n                    - size.height, 0));\n        }\n        else if (position == RectangleEdge.BOTTOM) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    t.getHorizontalAlignment(), VerticalAlignment.BOTTOM);\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), area.getY(), area.getWidth(), \n                    area.getHeight() - size.height);\n        }\n        else if (position == RectangleEdge.RIGHT) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    HorizontalAlignment.RIGHT, t.getVerticalAlignment());\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX(), area.getY(), area.getWidth() \n                    - size.width, area.getHeight());\n        }\n\n        else if (position == RectangleEdge.LEFT) {\n            Size2D size = t.arrange(g2, constraint);\n            titleArea = createAlignedRectangle2D(size, area, \n                    HorizontalAlignment.LEFT, t.getVerticalAlignment());\n            retValue = t.draw(g2, titleArea, p);\n            area.setRect(area.getX() + size.width, area.getY(), area.getWidth() \n                    - size.width, area.getHeight());\n        }\n        else {\n            throw new RuntimeException(\"Unrecognised title position.\");\n        }\n        EntityCollection result = null;\n        if (retValue instanceof EntityBlockResult) {\n            EntityBlockResult ebr = (EntityBlockResult) retValue;\n            result = ebr.getEntityCollection();\n        }\n        return result;   \n    }\n",
        "begin_line": 1273,
        "end_line": 1341,
        "comment": "\r\n     * Draws a title.  The title should be drawn at the top, bottom, left or \r\n     * right of the specified area, and the area should be updated to reflect \r\n     * the amount of space used by the title.\r\n     *\r\n     * @param t  the title (<code>null</code> not permitted).\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param area  the chart area, excluding any existing titles \r\n     *              (<code>null</code> not permitted).\r\n     * @param entities  a flag that controls whether or not an entity \r\n     *                  collection is returned for the title.\r\n     * \r\n     * @return An entity collection for the title (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6916
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractCategoryItemRenderer.getPlot#236",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getPlot()",
        "snippet": "    public CategoryPlot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 236,
        "end_line": 238,
        "comment": "\r\n     * Returns the plot that the renderer has been assigned to (where\r\n     * <code>null</code> indicates that the renderer is not currently assigned\r\n     * to a plot).\r\n     *\r\n     * @return The plot (possibly <code>null</code>).\r\n     *\r\n     * @see #setPlot(CategoryPlot)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6893
        },
        "num_failing_tests": 18
    },
    {
        "name": "AbstractCategoryItemRenderer.getDrawingSupplier#1257",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getDrawingSupplier()",
        "snippet": "    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        CategoryPlot cp = getPlot();\n        if (cp != null) {\n            result = cp.getDrawingSupplier();\n        }\n        return result;\n    }\n",
        "begin_line": 1257,
        "end_line": 1264,
        "comment": "\r\n     * Returns the drawing supplier from the plot.\r\n     *\r\n     * @return The drawing supplier (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6893
        },
        "num_failing_tests": 18
    },
    {
        "name": "Size2D.Size2D#58",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Size2D.java",
        "class_name": "org.jfree.chart.util.Size2D",
        "signature": "org.jfree.chart.util.Size2D.Size2D(double, double)",
        "snippet": "    public Size2D(double width, double height) {\n        this.width = width;\n        this.height = height;\n    }\n",
        "begin_line": 58,
        "end_line": 61,
        "comment": "\n     * Creates a new instance with the specified width and height.\n     *\n     * @param width  the width.\n     * @param height  the height.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateTopInset#357",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopInset(double)",
        "snippet": "    public double calculateTopInset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.top * height);\n        }\n        return result;\n    }\n",
        "begin_line": 357,
        "end_line": 363,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateTopOutset#372",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateTopOutset(double)",
        "snippet": "    public double calculateTopOutset(double height) {\n        double result = this.top;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.top;\n        }\n        return result;\n    }\n",
        "begin_line": 372,
        "end_line": 378,
        "comment": "\n     * Returns the top margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The top margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateBottomInset#387",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomInset(double)",
        "snippet": "    public double calculateBottomInset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.bottom * height);\n        }\n        return result;\n    }\n",
        "begin_line": 387,
        "end_line": 393,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateBottomOutset#402",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateBottomOutset(double)",
        "snippet": "    public double calculateBottomOutset(double height) {\n        double result = this.bottom;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (height / (1 - this.top - this.bottom)) * this.bottom;\n        }\n        return result;\n    }\n",
        "begin_line": 402,
        "end_line": 408,
        "comment": "\n     * Returns the bottom margin.\n     * \n     * @param height  the height of the base rectangle.\n     * \n     * @return The bottom margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateLeftInset#417",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftInset(double)",
        "snippet": "    public double calculateLeftInset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.left * width);\n        }\n        return result;\n    }\n",
        "begin_line": 417,
        "end_line": 423,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateLeftOutset#432",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateLeftOutset(double)",
        "snippet": "    public double calculateLeftOutset(double width) {\n        double result = this.left;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.left;\n        }\n        return result;\n    }\n",
        "begin_line": 432,
        "end_line": 438,
        "comment": "\n     * Returns the left margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The left margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateRightInset#447",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightInset(double)",
        "snippet": "    public double calculateRightInset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (this.right * width);\n        }\n        return result;\n    }\n",
        "begin_line": 447,
        "end_line": 453,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.calculateRightOutset#462",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.calculateRightOutset(double)",
        "snippet": "    public double calculateRightOutset(double width) {\n        double result = this.right;\n        if (this.unitType == UnitType.RELATIVE) {\n            result = (width / (1 - this.left - this.right)) * this.right;\n        }\n        return result;\n    }\n",
        "begin_line": 462,
        "end_line": 468,
        "comment": "\n     * Returns the right margin.\n     * \n     * @param width  the width of the base rectangle.\n     * \n     * @return The right margin (in Java2D units).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.trim#521",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.trim(java.awt.geom.Rectangle2D)",
        "snippet": "    public void trim(Rectangle2D area) {\n        double w = area.getWidth();\n        double h = area.getHeight();\n        double l = calculateLeftInset(w);\n        double r = calculateRightInset(w);\n        double t = calculateTopInset(h);\n        double b = calculateBottomInset(h);\n        area.setRect(area.getX() + l, area.getY() + t, w - l - r, h - t - b);    \n    }\n",
        "begin_line": 521,
        "end_line": 529,
        "comment": "\n     * Shrinks the given rectangle by the amount of these insets.\n     * \n     * @param area  the area (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleEdge.isLeftOrRight#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.isLeftOrRight(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public static boolean isLeftOrRight(RectangleEdge edge) {\n        return (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT);    \n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\n     * Returns <code>true</code> if the edge is <code>LEFT</code> or \n     * <code>RIGHT</code>, and <code>false</code> otherwise.\n     * \n     * @param edge  the edge.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectUtilities.getClassLoader#256",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.getClassLoader(java.lang.Class)",
        "snippet": "    public synchronized static ClassLoader getClassLoader(final Class c) {\n        if (classLoader != null) {\n            return classLoader;\n        }\n        if (\"ThreadContext\".equals(classLoaderSource)) {\n            final ClassLoader threadLoader\n                = Thread.currentThread().getContextClassLoader();\n            if (threadLoader != null) {\n                return threadLoader;\n            }\n        }\n\n        // Context classloader - do not cache ..\n        final ClassLoader applicationCL = c.getClassLoader();\n        if (applicationCL == null) {\n            return ClassLoader.getSystemClassLoader();\n        }\n        else {\n            return applicationCL;\n        }\n    }\n",
        "begin_line": 256,
        "end_line": 276,
        "comment": "\n     * Returns the classloader, which was responsible for loading the given\n     * class.\n     *\n     * @param c the classloader, either an application class loader or the\n     *          boot loader.\n     * @return the classloader, never null.\n     * @throws SecurityException if the SecurityManager does not allow to grab\n     *                           the context classloader.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectUtilities.isJDK14#440",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.isJDK14()",
        "snippet": "    public static boolean isJDK14() {\n        ClassLoader loader = getClassLoader(ObjectUtilities.class);\n        if (loader != null) {\n            try {\n              loader.loadClass(\"java.util.RandomAccess\");\n              return true;\n            }\n            catch (ClassNotFoundException e) {\n              return false;\n            }\n            catch(Exception e) {\n              // do nothing, but do not crash ...\n            }\n        }\n        // OK, the quick and dirty, but secure way failed. Lets try it\n        // using the standard way.\n        try {\n            String version = System.getProperty(\n                    \"java.vm.specification.version\");\n            // parse the beast...\n            if (version == null) {\n                return false;\n            }\n\n            String[] versions = parseVersions(version);\n            String[] target = new String[]{ \"1\", \"4\" };\n            return (ArrayUtilities.compareVersionArrays(versions, target) >= 0);\n        }\n        catch(Exception e) {\n            return false;\n        }\n    }\n",
        "begin_line": 440,
        "end_line": 471,
        "comment": "\n     * Returns <code>true</code> if we are running on JRE 1.4 or later.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "Title.getPosition#207",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.getPosition()",
        "snippet": "    public RectangleEdge getPosition() {\n        return this.position;\n    }\n",
        "begin_line": 207,
        "end_line": 209,
        "comment": "\r\n     * Returns the position of the title.\r\n     *\r\n     * @return The title position (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "Title.getHorizontalAlignment#232",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.getHorizontalAlignment()",
        "snippet": "    public HorizontalAlignment getHorizontalAlignment() {\n        return this.horizontalAlignment;\n    }\n",
        "begin_line": 232,
        "end_line": 234,
        "comment": "\r\n     * Returns the horizontal alignment of the title.\r\n     *\r\n     * @return The horizontal alignment (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.getTextBounds#286",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.getTextBounds(java.lang.String, java.awt.Graphics2D, java.awt.FontMetrics)",
        "snippet": "    public static Rectangle2D getTextBounds(String text, Graphics2D g2, \n            FontMetrics fm) {\n        \n        final Rectangle2D bounds;\n        if (TextUtilities.useFontMetricsGetStringBounds) {\n            bounds = fm.getStringBounds(text, g2);\n            // getStringBounds() can return incorrect height for some Unicode\n            // characters...see bug parade 6183356, let's replace it with \n            // something correct\n            LineMetrics lm = fm.getFont().getLineMetrics(text,\n                    g2.getFontRenderContext());\n            bounds.setRect(bounds.getX(), bounds.getY(), bounds.getWidth(),\n                    lm.getHeight());\n        }\n        else {\n            double width = fm.stringWidth(text);\n            double height = fm.getHeight();\n            bounds = new Rectangle2D.Double(0.0, -fm.getAscent(), width, \n                    height);\n        }\n        return bounds;\n    }\n",
        "begin_line": 286,
        "end_line": 307,
        "comment": "\n     * Returns the bounds for the specified text.\n     * \n     * @param text  the text (<code>null</code> permitted).\n     * @param g2  the graphics context (not <code>null</code>).\n     * @param fm  the font metrics (not <code>null</code>).\n     * \n     * @return The text bounds (<code>null</code> if the <code>text</code> \n     *         argument is <code>null</code>).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextUtilities.drawRotatedString#474",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.drawRotatedString(java.lang.String, java.awt.Graphics2D, float, float, double, float, float)",
        "snippet": "    public static void drawRotatedString(String text, Graphics2D g2,\n            float textX, float textY, double angle,\n            float rotateX, float rotateY) {\n\n        if ((text == null) || (text.equals(\"\"))) {\n            return;\n        }\n\n        AffineTransform saved = g2.getTransform();\n\n        // apply the rotation...\n        AffineTransform rotate = AffineTransform.getRotateInstance(\n                angle, rotateX, rotateY);\n        g2.transform(rotate);\n\n        if (useDrawRotatedStringWorkaround) {\n            // workaround for JDC bug ID 4312117 and others...\n            TextLayout tl = new TextLayout(text, g2.getFont(), \n                    g2.getFontRenderContext());\n            tl.draw(g2, textX, textY);\n        }\n        else {\n            // replaces this code...\n            g2.drawString(text, textX, textY);\n        }\n        g2.setTransform(saved);\n\n    }\n",
        "begin_line": 474,
        "end_line": 501,
        "comment": "\n     * A utility method for drawing rotated text.\n     * <P>\n     * A common rotation is -Math.PI/2 which draws text 'vertically' (with the \n     * top of the characters on the left).\n     *\n     * @param text  the text.\n     * @param g2  the graphics device.\n     * @param textX  the x-coordinate for the text (before rotation).\n     * @param textY  the y-coordinate for the text (before rotation).\n     * @param angle  the angle of the (clockwise) rotation (in radians).\n     * @param rotateX  the point about which the text is rotated.\n     * @param rotateY  the point about which the text is rotated.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.getInsets#491",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 491,
        "end_line": 493,
        "comment": "\r\n     * Returns the insets for the plot area.\r\n     *\r\n     * @return The insets (never <code>null</code>).\r\n     * \r\n     * @see #setInsets(RectangleInsets)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartProgressEvent.ChartProgressEvent#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartProgressEvent.java",
        "class_name": "org.jfree.chart.event.ChartProgressEvent",
        "signature": "org.jfree.chart.event.ChartProgressEvent.ChartProgressEvent(java.lang.Object, org.jfree.chart.JFreeChart, int, int)",
        "snippet": "    public ChartProgressEvent(Object source, JFreeChart chart, int type, \n                              int percent) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 77,
        "end_line": 82,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an \r\n     *                axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     * @param percent  the percentage of completion.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleConstraint.RectangleConstraint#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/RectangleConstraint.java",
        "class_name": "org.jfree.chart.block.RectangleConstraint",
        "signature": "org.jfree.chart.block.RectangleConstraint.RectangleConstraint(double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType, double, org.jfree.data.Range, org.jfree.chart.block.LengthConstraintType)",
        "snippet": "    public RectangleConstraint(double w, Range widthRange, \n                               LengthConstraintType widthConstraintType,\n                               double h, Range heightRange, \n                               LengthConstraintType heightConstraintType) {\n        if (widthConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'widthType' argument.\");\n        }\n        if (heightConstraintType == null) {\n            throw new IllegalArgumentException(\"Null 'heightType' argument.\"); \n        }\n        this.width = w;\n        this.widthRange = widthRange;\n        this.widthConstraintType = widthConstraintType;\n        this.height = h;\n        this.heightRange = heightRange;\n        this.heightConstraintType = heightConstraintType;\n    }\n",
        "begin_line": 148,
        "end_line": 164,
        "comment": "\r\n     * Creates a new constraint.\r\n     * \r\n     * @param w  the fixed or maximum width.\r\n     * @param widthRange  the width range.\r\n     * @param widthConstraintType  the width type.\r\n     * @param h  the fixed or maximum height.\r\n     * @param heightRange  the height range.\r\n     * @param heightConstraintType  the height type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "LengthConstraintType.LengthConstraintType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LengthConstraintType.java",
        "class_name": "org.jfree.chart.block.LengthConstraintType",
        "signature": "org.jfree.chart.block.LengthConstraintType.LengthConstraintType(java.lang.String)",
        "snippet": "    private LengthConstraintType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockParams.BlockParams#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.BlockParams()",
        "snippet": "    public BlockParams() {\n        this.translateX = 0.0;\n        this.translateY = 0.0;\n        this.generateEntities = false;    \n    }\n",
        "begin_line": 74,
        "end_line": 78,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockParams.getGenerateEntities#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.getGenerateEntities()",
        "snippet": "    public boolean getGenerateEntities() {\n        return this.generateEntities;   \n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Returns the flag that controls whether or not chart entities are \r\n     * generated.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockParams.setGenerateEntities#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockParams.java",
        "class_name": "org.jfree.chart.block.BlockParams",
        "signature": "org.jfree.chart.block.BlockParams.setGenerateEntities(boolean)",
        "snippet": "    public void setGenerateEntities(boolean generate) {\n        this.generateEntities = generate;   \n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\r\n     * Sets the flag that controls whether or not chart entities are generated.\r\n     * \r\n     * @param generate  the flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockBorder.getInsets#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.getInsets()",
        "snippet": "    public RectangleInsets getInsets() {\n        return this.insets;\n    }\n",
        "begin_line": 146,
        "end_line": 148,
        "comment": "\r\n     * Returns the space reserved for the border.\r\n     * \r\n     * @return The space (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockBorder.draw#165",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void draw(Graphics2D g2, Rectangle2D area) {\n        // this default implementation will just fill the available\n        // border space with a single color\n        double t = this.insets.calculateTopInset(area.getHeight());\n        double b = this.insets.calculateBottomInset(area.getHeight());\n        double l = this.insets.calculateLeftInset(area.getWidth());\n        double r = this.insets.calculateRightInset(area.getWidth());\n        double x = area.getX();\n        double y = area.getY();\n        double w = area.getWidth();\n        double h = area.getHeight();\n        g2.setPaint(this.paint);\n        Rectangle2D rect = new Rectangle2D.Double();\n        if (t > 0.0) {\n            rect.setRect(x, y, w, t);\n            g2.fill(rect);\n        }\n        if (b > 0.0) {\n            rect.setRect(x, y + h - b, w, b);\n            g2.fill(rect);\n        }\n        if (l > 0.0) {\n            rect.setRect(x, y, l, h);\n            g2.fill(rect);\n        }\n        if (r > 0.0) {\n            rect.setRect(x + w - r, y, r, h);\n            g2.fill(rect);\n        }\n    }\n",
        "begin_line": 165,
        "end_line": 194,
        "comment": "\r\n     * Draws the border by filling in the reserved space.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.trimMargin#506",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimMargin(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimMargin(Rectangle2D area) {\n        // defer argument checking...\n        this.margin.trim(area);\n        return area;\n    }\n",
        "begin_line": 506,
        "end_line": 510,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the margin.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.trimBorder#520",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimBorder(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimBorder(Rectangle2D area) {\n        // defer argument checking...\n        this.frame.getInsets().trim(area);\n        return area;\n    }\n",
        "begin_line": 520,
        "end_line": 524,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the border.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.trimPadding#534",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.trimPadding(java.awt.geom.Rectangle2D)",
        "snippet": "    protected Rectangle2D trimPadding(Rectangle2D area) {\n        // defer argument checking...\n        this.padding.trim(area);\n        return area;\n    }\n",
        "begin_line": 534,
        "end_line": 538,
        "comment": "\r\n     * Reduces the specified area by the amount of space consumed \r\n     * by the padding.\r\n     * \r\n     * @param area  the area (<code>null</code> not permitted).\r\n     * \r\n     * @return The trimmed area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.drawBorder#546",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.drawBorder(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected void drawBorder(Graphics2D g2, Rectangle2D area) {\n        this.frame.draw(g2, area);\n    }\n",
        "begin_line": 546,
        "end_line": 548,
        "comment": "\r\n     * Draws the border around the perimeter of the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendItemCollection.LegendItemCollection#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.LegendItemCollection()",
        "snippet": "    public LegendItemCollection() {\n        this.items = new java.util.ArrayList();\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\r\n     * Constructs a new legend item collection, initially empty.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendItemCollection.getItemCount#105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.getItemCount()",
        "snippet": "    public int getItemCount() {\n        return this.items.size();\n    }\n",
        "begin_line": 105,
        "end_line": 107,
        "comment": "\r\n     * Returns the number of legend items in the collection.\r\n     *\r\n     * @return The item count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChart.isBorderVisible#456",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.isBorderVisible()",
        "snippet": "    public boolean isBorderVisible() {\n        return this.borderVisible;\n    }\n",
        "begin_line": 456,
        "end_line": 458,
        "comment": "\r\n     * Returns a flag that controls whether or not a border is drawn around the\r\n     * outside of the chart.\r\n     *\r\n     * @return A boolean.\r\n     * \r\n     * @see #setBorderVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChart.notifyListeners#1531",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartProgressEvent)",
        "snippet": "    protected void notifyListeners(ChartProgressEvent event) {\n\n        Object[] listeners = this.progressListeners.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == ChartProgressListener.class) {\n                ((ChartProgressListener) listeners[i + 1]).chartProgress(event);\n            }\n        }\n\n    }\n",
        "begin_line": 1531,
        "end_line": 1540,
        "comment": "\r\n     * Sends a {@link ChartProgressEvent} to all registered listeners.\r\n     *\r\n     * @param event  information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6842
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractCategoryItemRenderer.getLegendItemLabelGenerator#1462",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemLabelGenerator()",
        "snippet": "    public CategorySeriesLabelGenerator getLegendItemLabelGenerator() {\n        return this.legendItemLabelGenerator;\n    }\n",
        "begin_line": 1462,
        "end_line": 1464,
        "comment": "\r\n     * Returns the legend item label generator.\r\n     *\r\n     * @return The label generator (never <code>null</code>).\r\n     *\r\n     * @see #setLegendItemLabelGenerator(CategorySeriesLabelGenerator)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6822
        },
        "num_failing_tests": 16
    },
    {
        "name": "AbstractCategoryItemRenderer.getLegendItemToolTipGenerator#1490",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemToolTipGenerator()",
        "snippet": "    public CategorySeriesLabelGenerator getLegendItemToolTipGenerator() {\n        return this.legendItemToolTipGenerator;\n    }\n",
        "begin_line": 1490,
        "end_line": 1492,
        "comment": "\r\n     * Returns the legend item tool tip generator.\r\n     *\r\n     * @return The tool tip generator (possibly <code>null</code>).\r\n     *\r\n     * @see #setLegendItemToolTipGenerator(CategorySeriesLabelGenerator)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6822
        },
        "num_failing_tests": 16
    },
    {
        "name": "AbstractCategoryItemRenderer.getLegendItemURLGenerator#1515",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItemURLGenerator()",
        "snippet": "    public CategorySeriesLabelGenerator getLegendItemURLGenerator() {\n        return this.legendItemURLGenerator;\n    }\n",
        "begin_line": 1515,
        "end_line": 1517,
        "comment": "\r\n     * Returns the legend item URL generator.\r\n     *\r\n     * @return The URL generator (possibly <code>null</code>).\r\n     *\r\n     * @see #setLegendItemURLGenerator(CategorySeriesLabelGenerator)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6822
        },
        "num_failing_tests": 16
    },
    {
        "name": "ValueTick.ValueTick#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "class_name": "org.jfree.chart.axis.ValueTick",
        "signature": "org.jfree.chart.axis.ValueTick.ValueTick(double, java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ValueTick(double value, String label, \n                     TextAnchor textAnchor, TextAnchor rotationAnchor, \n                     double angle) {\n                          \n        super(label, textAnchor, rotationAnchor, angle);\n        this.value = value;\n        \n    }\n",
        "begin_line": 65,
        "end_line": 72,
        "comment": "\r\n     * Creates a new value tick.\r\n     * \r\n     * @param value  the value.\r\n     * @param label  the label.\r\n     * @param textAnchor  the part of the label that is aligned to the anchor \r\n     *                    point.\r\n     * @param rotationAnchor  defines the rotation point relative to the label.\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 22
    },
    {
        "name": "Tick.Tick#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.Tick(java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public Tick(String text, TextAnchor textAnchor, TextAnchor rotationAnchor, \n                double angle) {\n        if (textAnchor == null) {\n            throw new IllegalArgumentException(\"Null 'textAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                \"Null 'rotationAnchor' argument.\"\n            );   \n        }\n        this.text = text;\n        this.textAnchor = textAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n    }\n",
        "begin_line": 85,
        "end_line": 99,
        "comment": "\r\n     * Creates a new tick.\r\n     *\r\n     * @param text  the formatted version of the tick value.\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the angle. \r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleEdge.equals#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof RectangleEdge)) {\n            return false;\n        }\n\n        RectangleEdge order = (RectangleEdge) obj;\n        if (!this.name.equals(order.name)) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 78,
        "end_line": 94,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 11
    },
    {
        "name": "ValueAxis.calculateAnchorPoint#618",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.calculateAnchorPoint(org.jfree.chart.axis.ValueTick, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected float[] calculateAnchorPoint(ValueTick tick, \n                                           double cursor, \n                                           Rectangle2D dataArea, \n                                           RectangleEdge edge) {\n    \n        RectangleInsets insets = getTickLabelInsets();\n        float[] result = new float[2];\n        if (edge == RectangleEdge.TOP) {\n            result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n            result[1] = (float) (cursor - insets.getBottom() - 2.0);\n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            result[0] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n            result[1] = (float) (cursor + insets.getTop() + 2.0); \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            result[0] = (float) (cursor - insets.getLeft() - 2.0);    \n            result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            result[0] = (float) (cursor + insets.getRight() + 2.0);    \n            result[1] = (float) valueToJava2D(tick.getValue(), dataArea, edge);\n        }\n        return result;\n    }\n",
        "begin_line": 618,
        "end_line": 642,
        "comment": "\r\n     * Calculates the anchor point for a tick label.\r\n     * \r\n     * @param tick  the tick.\r\n     * @param cursor  the cursor.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge on which the axis is drawn.\r\n     * \r\n     * @return The x and y coordinates of the anchor point.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 11
    },
    {
        "name": "ValueAxis.drawTickMarksAndLabels#655",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.drawTickMarksAndLabels(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected AxisState drawTickMarksAndLabels(Graphics2D g2, \n                                               double cursor,\n                                               Rectangle2D plotArea,\n                                               Rectangle2D dataArea, \n                                               RectangleEdge edge) {\n                                              \n        AxisState state = new AxisState(cursor);\n\n        if (isAxisLineVisible()) {\n            drawAxisLine(g2, cursor, dataArea, edge);\n        }\n\n        double ol = getTickMarkOutsideLength();\n        double il = getTickMarkInsideLength();\n\n        List ticks = refreshTicks(g2, state, dataArea, edge);\n        state.setTicks(ticks);\n        g2.setFont(getTickLabelFont());\n        Iterator iterator = ticks.iterator();\n        while (iterator.hasNext()) {\n            ValueTick tick = (ValueTick) iterator.next();\n            if (isTickLabelsVisible()) {\n                g2.setPaint(getTickLabelPaint());\n                float[] anchorPoint = calculateAnchorPoint(tick, cursor, \n                        dataArea, edge);\n                TextUtilities.drawRotatedString(tick.getText(), g2, \n                        anchorPoint[0], anchorPoint[1], tick.getTextAnchor(), \n                        tick.getAngle(), tick.getRotationAnchor());\n            }\n\n            if (isTickMarksVisible()) {\n                float xx = (float) valueToJava2D(tick.getValue(), dataArea, \n                        edge);\n                Line2D mark = null;\n                g2.setStroke(getTickMarkStroke());\n                g2.setPaint(getTickMarkPaint());\n                if (edge == RectangleEdge.LEFT) {\n                    mark = new Line2D.Double(cursor - ol, xx, cursor + il, xx);\n                }\n                else if (edge == RectangleEdge.RIGHT) {\n                    mark = new Line2D.Double(cursor + ol, xx, cursor - il, xx);\n                }\n                else if (edge == RectangleEdge.TOP) {\n                    mark = new Line2D.Double(xx, cursor - ol, xx, cursor + il);\n                }\n                else if (edge == RectangleEdge.BOTTOM) {\n                    mark = new Line2D.Double(xx, cursor + ol, xx, cursor - il);\n                }\n                g2.draw(mark);\n            }\n        }\n        \n        // need to work out the space used by the tick labels...\n        // so we can update the cursor...\n        double used = 0.0;\n        if (isTickLabelsVisible()) {\n            if (edge == RectangleEdge.LEFT) {\n                used += findMaximumTickLabelWidth(ticks, g2, plotArea, \n                        isVerticalTickLabels());  \n                state.cursorLeft(used);      \n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                used = findMaximumTickLabelWidth(ticks, g2, plotArea, \n                        isVerticalTickLabels());\n                state.cursorRight(used);      \n            }\n            else if (edge == RectangleEdge.TOP) {\n                used = findMaximumTickLabelHeight(ticks, g2, plotArea, \n                        isVerticalTickLabels());\n                state.cursorUp(used);\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                used = findMaximumTickLabelHeight(ticks, g2, plotArea, \n                        isVerticalTickLabels());\n                state.cursorDown(used);\n            }\n        }\n       \n        return state;\n    }\n",
        "begin_line": 655,
        "end_line": 734,
        "comment": "\r\n     * Draws the axis line, tick marks and tick mark labels.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param cursor  the cursor.\r\n     * @param plotArea  the plot area.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge that the axis is aligned with.\r\n     * \r\n     * @return The width or height used to draw the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 11
    },
    {
        "name": "CategoryAxis.calculateCategorySize#662",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateCategorySize(int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected double calculateCategorySize(int categoryCount, Rectangle2D area,\n                                           RectangleEdge edge) {\n\n        double result = 0.0;\n        double available = 0.0;\n\n        if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {\n            available = area.getWidth();\n        }\n        else if ((edge == RectangleEdge.LEFT) \n                || (edge == RectangleEdge.RIGHT)) {\n            available = area.getHeight();\n        }\n        if (categoryCount > 1) {\n            result = available * (1 - getLowerMargin() - getUpperMargin() \n                     - getCategoryMargin());\n            result = result / categoryCount;\n        }\n        else {\n            result = available * (1 - getLowerMargin() - getUpperMargin());\n        }\n        return result;\n\n    }\n",
        "begin_line": 662,
        "end_line": 685,
        "comment": "\r\n     * Calculates the size (width or height, depending on the location of the \r\n     * axis) of a category.\r\n     *\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the area within which the categories will be drawn.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The category size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 11
    },
    {
        "name": "CategoryAxis.drawCategoryLabels#851",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.drawCategoryLabels(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.axis.AxisState, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    protected AxisState drawCategoryLabels(Graphics2D g2,\n                                           Rectangle2D plotArea,\n                                           Rectangle2D dataArea,\n                                           RectangleEdge edge,\n                                           AxisState state,\n                                           PlotRenderingInfo plotState) {\n\n        if (state == null) {\n            throw new IllegalArgumentException(\"Null 'state' argument.\");\n        }\n\n        if (isTickLabelsVisible()) {       \n            List ticks = refreshTicks(g2, state, plotArea, edge);       \n            state.setTicks(ticks);        \n          \n            int categoryIndex = 0;\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                \n                CategoryTick tick = (CategoryTick) iterator.next();\n                g2.setFont(getTickLabelFont(tick.getCategory()));\n                g2.setPaint(getTickLabelPaint(tick.getCategory()));\n\n                CategoryLabelPosition position \n                        = this.categoryLabelPositions.getLabelPosition(edge);\n                double x0 = 0.0;\n                double x1 = 0.0;\n                double y0 = 0.0;\n                double y1 = 0.0;\n                if (edge == RectangleEdge.TOP) {\n                    x0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    x1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge);\n                    y1 = state.getCursor() - this.categoryLabelPositionOffset;\n                    y0 = y1 - state.getMax();\n                }\n                else if (edge == RectangleEdge.BOTTOM) {\n                    x0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    x1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge); \n                    y0 = state.getCursor() + this.categoryLabelPositionOffset;\n                    y1 = y0 + state.getMax();\n                }\n                else if (edge == RectangleEdge.LEFT) {\n                    y0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    y1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge);\n                    x1 = state.getCursor() - this.categoryLabelPositionOffset;\n                    x0 = x1 - state.getMax();\n                }\n                else if (edge == RectangleEdge.RIGHT) {\n                    y0 = getCategoryStart(categoryIndex, ticks.size(), \n                            dataArea, edge);\n                    y1 = getCategoryEnd(categoryIndex, ticks.size(), dataArea, \n                            edge);\n                    x0 = state.getCursor() + this.categoryLabelPositionOffset;\n                    x1 = x0 - state.getMax();\n                }\n                Rectangle2D area = new Rectangle2D.Double(x0, y0, (x1 - x0), \n                        (y1 - y0));\n                Point2D anchorPoint = RectangleAnchor.coordinates(area, \n                        position.getCategoryAnchor());\n                TextBlock block = tick.getLabel();\n                block.draw(g2, (float) anchorPoint.getX(), \n                        (float) anchorPoint.getY(), position.getLabelAnchor(), \n                        (float) anchorPoint.getX(), (float) anchorPoint.getY(), \n                        position.getAngle());\n                Shape bounds = block.calculateBounds(g2, \n                        (float) anchorPoint.getX(), (float) anchorPoint.getY(), \n                        position.getLabelAnchor(), (float) anchorPoint.getX(), \n                        (float) anchorPoint.getY(), position.getAngle());\n                if (plotState != null && plotState.getOwner() != null) {\n                    EntityCollection entities \n                            = plotState.getOwner().getEntityCollection();\n                    if (entities != null) {\n                        String tooltip = getCategoryLabelToolTip(\n                                tick.getCategory());\n                        entities.add(new CategoryLabelEntity(tick.getCategory(),\n                                bounds, tooltip, null));\n                    }\n                }\n                categoryIndex++;\n            }\n\n            if (edge.equals(RectangleEdge.TOP)) {\n                double h = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorUp(h);\n            }\n            else if (edge.equals(RectangleEdge.BOTTOM)) {\n                double h = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorDown(h);\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                double w = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorLeft(w);\n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                double w = state.getMax() + this.categoryLabelPositionOffset;\n                state.cursorRight(w);\n            }\n        }\n        return state;\n    }\n",
        "begin_line": 851,
        "end_line": 956,
        "comment": "\r\n     * Draws the category labels and returns the updated axis state.\r\n     *\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param plotArea  the plot area (<code>null</code> not permitted).\r\n     * @param dataArea  the area inside the axes (<code>null</code> not \r\n     *                  permitted).\r\n     * @param edge  the axis location (<code>null</code> not permitted).\r\n     * @param state  the axis state (<code>null</code> not permitted).\r\n     * @param plotState  collects information about the plot (<code>null</code>\r\n     *                   permitted).\r\n     * \r\n     * @return The updated axis state (never <code>null</code>).\r\n     * \r\n     * @since 1.0.2\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 11
    },
    {
        "name": "AxisState.cursorUp#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.cursorUp(double)",
        "snippet": "    public void cursorUp(double units) {\n        this.cursor = this.cursor - units;\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\r\n     * Moves the cursor up by the specified number of Java 2D units.\r\n     * \r\n     * @param units  the units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 11
    },
    {
        "name": "Axis.drawAxisLine#1210",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void drawAxisLine(Graphics2D g2, double cursor,\n            Rectangle2D dataArea, RectangleEdge edge) {\n        \n        Line2D axisLine = null;\n        if (edge == RectangleEdge.TOP) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        g2.setPaint(this.axisLinePaint);\n        g2.setStroke(this.axisLineStroke);\n        g2.draw(axisLine);\n        \n    }\n",
        "begin_line": 1210,
        "end_line": 1234,
        "comment": "\r\n     * Draws an axis line at the current cursor position and edge.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param cursor  the cursor position.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.677
        },
        "num_failing_tests": 11
    },
    {
        "name": "ValueAxis.isInverted#898",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isInverted()",
        "snippet": "    public boolean isInverted() {\n        return this.inverted;\n    }\n",
        "begin_line": 898,
        "end_line": 900,
        "comment": "\r\n     * Returns a flag that controls the direction of values on the axis.\r\n     * <P>\r\n     * For a regular axis, values increase from left to right (for a horizontal\r\n     * axis) and bottom to top (for a vertical axis).  When the axis is\r\n     * 'inverted', the values increase in the opposite direction.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setInverted(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6701
        },
        "num_failing_tests": 22
    },
    {
        "name": "FlowArrangement.arrangeRR#281",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.arrangeRR(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    protected Size2D arrangeRR(BlockContainer container, Graphics2D g2,\n                               RectangleConstraint constraint) {\n\n        // first arrange without constraints, and see if this fits within\n        // the required ranges...\n        Size2D s1 = arrangeNN(container, g2);\n        if (constraint.getWidthRange().contains(s1.width)) {\n            return s1;  // TODO: we didn't check the height yet\n        }\n        else {\n            RectangleConstraint c = constraint.toFixedWidth(\n                constraint.getWidthRange().getUpperBound()\n            );\n            return arrangeFR(container, g2, c);\n        }\n    }\n",
        "begin_line": 281,
        "end_line": 296,
        "comment": "\r\n     * Arranges the blocks with the overall width and height to fit within \r\n     * specified ranges.\r\n     * \r\n     * @param container  the container.\r\n     * @param constraint  the constraint.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6581
        },
        "num_failing_tests": 18
    },
    {
        "name": "RectangleEdge.isTopOrBottom#113",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.isTopOrBottom(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public static boolean isTopOrBottom(RectangleEdge edge) {\n        return (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM);    \n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\n     * Returns <code>true</code> if the edge is <code>TOP</code> or \n     * <code>BOTTOM</code>, and <code>false</code> otherwise.\n     * \n     * @param edge  the edge.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6568
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getLabel#341",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getLabel()",
        "snippet": "    public String getLabel() {\n        return this.label;\n    }\n",
        "begin_line": 341,
        "end_line": 343,
        "comment": "\r\n     * Returns the label for the axis.\r\n     *\r\n     * @return The label for the axis (<code>null</code> possible).\r\n     * \r\n     * @see #getLabelFont()\r\n     * @see #getLabelPaint()\r\n     * @see #setLabel(String)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6504
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryAxis.getLowerMargin#223",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getLowerMargin()",
        "snippet": "    public double getLowerMargin() {\n        return this.lowerMargin;\n    }\n",
        "begin_line": 223,
        "end_line": 225,
        "comment": "\r\n     * Returns the lower margin for the axis.\r\n     *\r\n     * @return The margin.\r\n     * \r\n     * @see #getUpperMargin()\r\n     * @see #setLowerMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6504
        },
        "num_failing_tests": 11
    },
    {
        "name": "CategoryAxis.getUpperMargin#249",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getUpperMargin()",
        "snippet": "    public double getUpperMargin() {\n        return this.upperMargin;\n    }\n",
        "begin_line": 249,
        "end_line": 251,
        "comment": "\r\n     * Returns the upper margin for the axis.\r\n     *\r\n     * @return The margin.\r\n     * \r\n     * @see #getLowerMargin()\r\n     * @see #setUpperMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6504
        },
        "num_failing_tests": 11
    },
    {
        "name": "CategoryAxis.draw#808",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public AxisState draw(Graphics2D g2, \n                          double cursor, \n                          Rectangle2D plotArea, \n                          Rectangle2D dataArea,\n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState) {\n        \n        // if the axis is not visible, don't draw it...\n        if (!isVisible()) {\n            return new AxisState(cursor);\n        }\n        \n        if (isAxisLineVisible()) {\n            drawAxisLine(g2, cursor, dataArea, edge);\n        }\n\n        // draw the category labels and axis label\n        AxisState state = new AxisState(cursor);\n        state = drawCategoryLabels(g2, plotArea, dataArea, edge, state, \n                plotState);\n        state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state,\n                plotState);\n    \n        return state;\n\n    }\n",
        "begin_line": 808,
        "end_line": 833,
        "comment": "\r\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     *\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param cursor  the cursor location.\r\n     * @param plotArea  the area within which the axis should be drawn \r\n     *                  (<code>null</code> not permitted).\r\n     * @param dataArea  the area within which the plot is being drawn \r\n     *                  (<code>null</code> not permitted).\r\n     * @param edge  the location of the axis (<code>null</code> not permitted).\r\n     * @param plotState  collects information about the plot \r\n     *                   (<code>null</code> permitted).\r\n     * \r\n     * @return The axis state (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6504
        },
        "num_failing_tests": 11
    },
    {
        "name": "ValueAxis.lengthToJava2D#1418",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.lengthToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double lengthToJava2D(double length, Rectangle2D area, \n                                 RectangleEdge edge) {\n        double zero = valueToJava2D(0.0, area, edge);\n        double l = valueToJava2D(length, area, edge);\n        return Math.abs(l - zero);\n    }\n",
        "begin_line": 1418,
        "end_line": 1423,
        "comment": "\r\n     * Converts a length in data coordinates into the corresponding length in \r\n     * Java2D coordinates.\r\n     * \r\n     * @param length  the length.\r\n     * @param area  the plot area.\r\n     * @param edge  the edge along which the axis lies.\r\n     * \r\n     * @return The length in Java2D coordinates.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberTickUnit.valueToString#97",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.valueToString(double)",
        "snippet": "    public String valueToString(double value) {\n        return this.formatter.format(value);\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\r\n     * Converts a value to a string.\r\n     *\r\n     * @param value  the value.\r\n     *\r\n     * @return The formatted string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.getTickUnit#308",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getTickUnit()",
        "snippet": "    public NumberTickUnit getTickUnit() {\n        return this.tickUnit;\n    }\n",
        "begin_line": 308,
        "end_line": 310,
        "comment": "\r\n     * Returns the tick unit for the axis.  \r\n     * <p>\r\n     * Note: if the <code>autoTickUnitSelection</code> flag is \r\n     * <code>true</code> the tick unit may be changed while the axis is being \r\n     * drawn, so in that case the return value from this method may be\r\n     * irrelevant if the method is called before the axis has been drawn.\r\n     *\r\n     * @return The tick unit for the axis.\r\n     * \r\n     * @see #setTickUnit(NumberTickUnit)\r\n     * @see ValueAxis#isAutoTickUnitSelection()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.getNumberFormatOverride#364",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getNumberFormatOverride()",
        "snippet": "    public NumberFormat getNumberFormatOverride() {\n        return this.numberFormatOverride;\n    }\n",
        "begin_line": 364,
        "end_line": 366,
        "comment": "\r\n     * Returns the number format override.  If this is non-null, then it will \r\n     * be used to format the numbers on the axis.\r\n     *\r\n     * @return The number formatter (possibly <code>null</code>).\r\n     * \r\n     * @see #setNumberFormatOverride(NumberFormat)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.valueToJava2D#522",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.valueToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double valueToJava2D(double value, Rectangle2D area, \n                                RectangleEdge edge) {\n        \n        Range range = getRange();\n        double axisMin = range.getLowerBound();\n        double axisMax = range.getUpperBound();\n\n        double min = 0.0;\n        double max = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            min = area.getX();\n            max = area.getMaxX();\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            max = area.getMinY();\n            min = area.getMaxY();\n        }\n        if (isInverted()) {\n            return max \n                   - ((value - axisMin) / (axisMax - axisMin)) * (max - min);\n        }\n        else {\n            return min \n                   + ((value - axisMin) / (axisMax - axisMin)) * (max - min);\n        }\n\n    }\n",
        "begin_line": 522,
        "end_line": 548,
        "comment": "\r\n     * Converts a data value to a coordinate in Java2D space, assuming that the\r\n     * axis runs along one edge of the specified dataArea.\r\n     * <p>\r\n     * Note that it is possible for the coordinate to fall outside the plotArea.\r\n     *\r\n     * @param value  the data value.\r\n     * @param area  the area for plotting the data.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The Java2D coordinate.\r\n     * \r\n     * @see #java2DToValue(double, Rectangle2D, RectangleEdge)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.calculateLowestVisibleTickValue#597",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.calculateLowestVisibleTickValue()",
        "snippet": "    protected double calculateLowestVisibleTickValue() {\n\n        double unit = getTickUnit().getSize();\n        double index = Math.ceil(getRange().getLowerBound() / unit);\n        return index * unit;\n\n    }\n",
        "begin_line": 597,
        "end_line": 603,
        "comment": "\r\n     * Calculates the value of the lowest visible tick on the axis.\r\n     *\r\n     * @return The value of the lowest visible tick on the axis.\r\n     * \r\n     * @see #calculateHighestVisibleTickValue()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.calculateVisibleTickCount#625",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.calculateVisibleTickCount()",
        "snippet": "    protected int calculateVisibleTickCount() {\n\n        double unit = getTickUnit().getSize();\n        Range range = getRange();\n        return (int) (Math.floor(range.getUpperBound() / unit)\n                      - Math.ceil(range.getLowerBound() / unit) + 1);\n\n    }\n",
        "begin_line": 625,
        "end_line": 632,
        "comment": "\r\n     * Calculates the number of visible ticks.\r\n     *\r\n     * @return The number of visible ticks on the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.selectAutoTickUnit#1045",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.selectAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void selectAutoTickUnit(Graphics2D g2,\n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge) {\n\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            selectHorizontalAutoTickUnit(g2, dataArea, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            selectVerticalAutoTickUnit(g2, dataArea, edge);\n        }\n\n    }\n",
        "begin_line": 1045,
        "end_line": 1056,
        "comment": "\r\n     * Selects an appropriate tick value for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from an array of 'standard'\r\n     * tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area defined by the axes.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.refreshTicks#1144",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public List refreshTicks(Graphics2D g2, \n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            result = refreshTicksHorizontal(g2, dataArea, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            result = refreshTicksVertical(g2, dataArea, edge);\n        }\n        return result;\n\n    }\n",
        "begin_line": 1144,
        "end_line": 1158,
        "comment": "\r\n     * Calculates the positions of the tick labels for the axis, storing the \r\n     * results in the tick label list (ready for drawing).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the axis state.\r\n     * @param dataArea  the area in which the plot should be drawn.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6503
        },
        "num_failing_tests": 20
    },
    {
        "name": "ShapeUtilities.createTranslatedShape#332",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "signature": "org.jfree.chart.util.ShapeUtilities.createTranslatedShape(java.awt.Shape, org.jfree.chart.util.RectangleAnchor, double, double)",
        "snippet": "    public static Shape createTranslatedShape(Shape shape, \n                                              RectangleAnchor anchor, \n                                              double locationX,\n                                              double locationY) {\n        if (shape == null) {\n            throw new IllegalArgumentException(\"Null 'shape' argument.\");\n        }        \n        if (anchor == null) {\n            throw new IllegalArgumentException(\"Null 'anchor' argument.\");\n        }\n        Point2D anchorPoint = RectangleAnchor.coordinates(shape.getBounds2D(), \n                anchor);\n        AffineTransform transform = AffineTransform.getTranslateInstance(\n                locationX - anchorPoint.getX(), locationY - anchorPoint.getY());\n        return transform.createTransformedShape(shape);   \n    }\n",
        "begin_line": 332,
        "end_line": 347,
        "comment": "\n     * Translates a shape to a new location such that the anchor point \n     * (relative to the rectangular bounds of the shape) aligns with the \n     * specified (x, y) coordinate in Java2D space.\n     *  \n     * @param shape  the shape (<code>null</code> not permitted).\n     * @param anchor  the anchor (<code>null</code> not permitted).\n     * @param locationX  the x-coordinate (in Java2D space).\n     * @param locationY  the y-coordinate (in Java2D space).\n     * \n     * @return A new and translated shape.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "RectangleAnchor.coordinates#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.coordinates(java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleAnchor)",
        "snippet": "    public static Point2D coordinates(final Rectangle2D rectangle, \n                                      final RectangleAnchor anchor) {\n        Point2D result = new Point2D.Double();\n        if (anchor == RectangleAnchor.CENTER) {\n            result.setLocation(rectangle.getCenterX(), rectangle.getCenterY());\n        }\n        else if (anchor == RectangleAnchor.TOP) {\n            result.setLocation(rectangle.getCenterX(), rectangle.getMinY());\n        }\n        else if (anchor == RectangleAnchor.BOTTOM) {\n            result.setLocation(rectangle.getCenterX(), rectangle.getMaxY());\n        }\n        else if (anchor == RectangleAnchor.LEFT) {\n            result.setLocation(rectangle.getMinX(), rectangle.getCenterY());\n        }\n        else if (anchor == RectangleAnchor.RIGHT) {\n            result.setLocation(rectangle.getMaxX(), rectangle.getCenterY());\n        }\n        else if (anchor == RectangleAnchor.TOP_LEFT) {\n            result.setLocation(rectangle.getMinX(), rectangle.getMinY());\n        }\n        else if (anchor == RectangleAnchor.TOP_RIGHT) {\n            result.setLocation(rectangle.getMaxX(), rectangle.getMinY());\n        }\n        else if (anchor == RectangleAnchor.BOTTOM_LEFT) {\n            result.setLocation(rectangle.getMinX(), rectangle.getMaxY());\n        }\n        else if (anchor == RectangleAnchor.BOTTOM_RIGHT) {\n            result.setLocation(rectangle.getMaxX(), rectangle.getMaxY());\n        }\n        return result;\n    }\n",
        "begin_line": 138,
        "end_line": 169,
        "comment": "\n     * Returns the (x, y) coordinates of the specified anchor.\n     * \n     * @param rectangle  the rectangle.\n     * @param anchor  the anchor.\n     * \n     * @return The (x, y) coordinates.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendTitle.getLegendItemGraphicAnchor#262",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicAnchor()",
        "snippet": "    public RectangleAnchor getLegendItemGraphicAnchor() {\n        return this.legendItemGraphicAnchor;\n    }\n",
        "begin_line": 262,
        "end_line": 264,
        "comment": "\r\n     * Returns the legend item graphic anchor.\r\n     * \r\n     * @return The graphic anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendTitle.getLegendItemGraphicLocation#283",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.getLegendItemGraphicLocation()",
        "snippet": "    public RectangleAnchor getLegendItemGraphicLocation() {\n        return this.legendItemGraphicLocation;\n    }\n",
        "begin_line": 283,
        "end_line": 285,
        "comment": "\r\n     * Returns the legend item graphic location.\r\n     * \r\n     * @return The location (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendTitle.createLegendItemBlock#417",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.createLegendItemBlock(org.jfree.chart.LegendItem)",
        "snippet": "    protected Block createLegendItemBlock(LegendItem item) {\n        BlockContainer result = null;\n        LegendGraphic lg = new LegendGraphic(item.getShape(), \n                item.getFillPaint());\n        lg.setFillPaintTransformer(item.getFillPaintTransformer());\n        lg.setShapeFilled(item.isShapeFilled());\n        lg.setLine(item.getLine());\n        lg.setLineStroke(item.getLineStroke());\n        lg.setLinePaint(item.getLinePaint());\n        lg.setLineVisible(item.isLineVisible());\n        lg.setShapeVisible(item.isShapeVisible());\n        lg.setShapeOutlineVisible(item.isShapeOutlineVisible());\n        lg.setOutlinePaint(item.getOutlinePaint());\n        lg.setOutlineStroke(item.getOutlineStroke());\n        lg.setPadding(this.legendItemGraphicPadding);\n\n        LegendItemBlockContainer legendItem = new LegendItemBlockContainer(\n                new BorderArrangement(), item.getDataset(), \n                item.getSeriesKey());\n        lg.setShapeAnchor(getLegendItemGraphicAnchor());\n        lg.setShapeLocation(getLegendItemGraphicLocation());\n        legendItem.add(lg, this.legendItemGraphicEdge);\n        LabelBlock labelBlock = new LabelBlock(item.getLabel(), this.itemFont, \n                this.itemPaint);\n        labelBlock.setPadding(this.itemLabelPadding);\n        legendItem.add(labelBlock);\n        legendItem.setToolTipText(item.getToolTipText());\n        legendItem.setURLText(item.getURLText());\n        \n        result = new BlockContainer(new CenterArrangement());\n        result.add(legendItem);\n        \n        return result;\n    }\n",
        "begin_line": 417,
        "end_line": 450,
        "comment": "\r\n     * Creates a legend item block.\r\n     * \r\n     * @param item  the legend item.\r\n     * \r\n     * @return The block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItemBlockContainer.LegendItemBlockContainer#98",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.LegendItemBlockContainer(org.jfree.chart.block.Arrangement, org.jfree.data.general.Dataset, java.lang.Comparable)",
        "snippet": "    public LegendItemBlockContainer(Arrangement arrangement, Dataset dataset,\n            Comparable seriesKey) {\n        super(arrangement);\n        this.dataset = dataset;\n        this.seriesKey = seriesKey;\n    }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "\r\n     * Creates a new legend item block.\r\n     * \r\n     * @param arrangement  the arrangement.\r\n     * @param dataset  the dataset.\r\n     * @param seriesKey  the series key.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItemBlockContainer.setToolTipText#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.setToolTipText(java.lang.String)",
        "snippet": "    public void setToolTipText(String text) {\n        this.toolTipText = text;   \n    }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\r\n     * Sets the tool tip text.\r\n     * \r\n     * @param text  the text (<code>null</code> permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItemBlockContainer.setURLText#167",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.setURLText(java.lang.String)",
        "snippet": "    public void setURLText(String text) {\n        this.urlText = text;   \n    }\n",
        "begin_line": 167,
        "end_line": 169,
        "comment": "\r\n     * Sets the URL text.\r\n     * \r\n     * @param text  the text (<code>null</code> permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItemBlockContainer.draw#181",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendItemBlockContainer.java",
        "class_name": "org.jfree.chart.title.LegendItemBlockContainer",
        "signature": "org.jfree.chart.title.LegendItemBlockContainer.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        // draw the block without collecting entities\n        super.draw(g2, area, null);\n        EntityBlockParams ebp = null;\n        BlockResult r = new BlockResult();\n        if (params instanceof EntityBlockParams) {\n            ebp = (EntityBlockParams) params;\n            if (ebp.getGenerateEntities()) {\n                EntityCollection ec = new StandardEntityCollection();\n                LegendItemEntity entity = new LegendItemEntity(\n                        (Shape) area.clone());\n                entity.setSeriesKey(this.seriesKey);\n                entity.setDataset(this.dataset);\n                entity.setToolTipText(getToolTipText());\n                entity.setURLText(getURLText());\n                ec.add(entity);\n                r.setEntityCollection(ec);\n            }\n        }\n        return r;\n    }\n",
        "begin_line": 181,
        "end_line": 201,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  passed on to blocks within the container \r\n     *                (<code>null</code> permitted).\r\n     * \r\n     * @return An instance of {@link EntityBlockResult}, or <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.LegendGraphic#153",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.LegendGraphic(java.awt.Shape, java.awt.Paint)",
        "snippet": "    public LegendGraphic(Shape shape, Paint fillPaint) {\n        if (shape == null) {\n            throw new IllegalArgumentException(\"Null 'shape' argument.\");\n        }\n        if (fillPaint == null) {\n            throw new IllegalArgumentException(\"Null 'fillPaint' argument.\");\n        }\n        this.shapeVisible = true;\n        this.shape = shape;\n        this.shapeAnchor = RectangleAnchor.CENTER;\n        this.shapeLocation = RectangleAnchor.CENTER;\n        this.shapeFilled = true;\n        this.fillPaint = fillPaint;\n        this.fillPaintTransformer = new StandardGradientPaintTransformer();\n        setPadding(2.0, 2.0, 2.0, 2.0);\n    }\n",
        "begin_line": 153,
        "end_line": 168,
        "comment": "\r\n     * Creates a new legend graphic.\r\n     * \r\n     * @param shape  the shape (<code>null</code> not permitted).\r\n     * @param fillPaint  the fill paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setShapeVisible#186",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeVisible(boolean)",
        "snippet": "    public void setShapeVisible(boolean visible) {\n        this.shapeVisible = visible;\n    }\n",
        "begin_line": 186,
        "end_line": 188,
        "comment": "\r\n     * Sets a flag that controls whether or not the shape is \r\n     * visible.\r\n     * \r\n     * @param visible  the flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setShapeFilled#224",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeFilled(boolean)",
        "snippet": "    public void setShapeFilled(boolean filled) {\n        this.shapeFilled = filled;\n    }\n",
        "begin_line": 224,
        "end_line": 226,
        "comment": "\r\n     * Sets a flag that controls whether or not the shape is\r\n     * filled.\r\n     * \r\n     * @param filled  the flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setFillPaintTransformer#266",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
        "snippet": "    public void setFillPaintTransformer(GradientPaintTransformer transformer) {\n        if (transformer == null) {\n            throw new IllegalArgumentException(\"Null 'transformer' argument.\");\n        }\n        this.fillPaintTransformer = transformer;\n    }\n",
        "begin_line": 266,
        "end_line": 271,
        "comment": "\r\n     * Sets the transformer used when the fill paint is an instance of \r\n     * <code>GradientPaint</code>.\r\n     * \r\n     * @param transformer  the transformer (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.4\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setShapeOutlineVisible#288",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeOutlineVisible(boolean)",
        "snippet": "    public void setShapeOutlineVisible(boolean visible) {\n        this.shapeOutlineVisible = visible;\n    }\n",
        "begin_line": 288,
        "end_line": 290,
        "comment": "\r\n     * Sets a flag that controls whether or not the shape outline\r\n     * is visible.\r\n     * \r\n     * @param visible  the flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setOutlinePaint#306",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setOutlinePaint(java.awt.Paint)",
        "snippet": "    public void setOutlinePaint(Paint paint) {\n        this.outlinePaint = paint;\n    }\n",
        "begin_line": 306,
        "end_line": 308,
        "comment": "\r\n     * Sets the outline paint.\r\n     * \r\n     * @param paint  the paint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setOutlineStroke#324",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setOutlineStroke(java.awt.Stroke)",
        "snippet": "    public void setOutlineStroke(Stroke stroke) {\n        this.outlineStroke = stroke;\n    }\n",
        "begin_line": 324,
        "end_line": 326,
        "comment": "\r\n     * Sets the outline stroke.\r\n     * \r\n     * @param stroke  the stroke.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setShapeAnchor#343",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeAnchor(org.jfree.chart.util.RectangleAnchor)",
        "snippet": "    public void setShapeAnchor(RectangleAnchor anchor) {\n        if (anchor == null) {\n            throw new IllegalArgumentException(\"Null 'anchor' argument.\");\n        }\n        this.shapeAnchor = anchor;    \n    }\n",
        "begin_line": 343,
        "end_line": 348,
        "comment": "\r\n     * Sets the shape anchor.  This defines a point on the shapes bounding\r\n     * rectangle that will be used to align the shape to a location.\r\n     * \r\n     * @param anchor  the anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setShapeLocation#365",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setShapeLocation(org.jfree.chart.util.RectangleAnchor)",
        "snippet": "    public void setShapeLocation(RectangleAnchor location) {\n        if (location == null) {\n            throw new IllegalArgumentException(\"Null 'location' argument.\");\n        }\n        this.shapeLocation = location;\n    }\n",
        "begin_line": 365,
        "end_line": 370,
        "comment": "\r\n     * Sets the shape location.  This defines a point within the drawing\r\n     * area that will be used to align the shape to.\r\n     * \r\n     * @param location  the location (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setLineVisible#386",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLineVisible(boolean)",
        "snippet": "    public void setLineVisible(boolean visible) {\n        this.lineVisible = visible;\n    }\n",
        "begin_line": 386,
        "end_line": 388,
        "comment": "\r\n     * Sets the flag that controls whether or not the line is visible.\r\n     * \r\n     * @param visible  the flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setLine#405",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLine(java.awt.Shape)",
        "snippet": "    public void setLine(Shape line) {\n        this.line = line;\n    }\n",
        "begin_line": 405,
        "end_line": 407,
        "comment": "\r\n     * Sets the line.  A Shape is used here, because then you can use Line2D, \r\n     * GeneralPath or any other Shape to represent the line.\r\n     * \r\n     * @param line  the line.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setLinePaint#423",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLinePaint(java.awt.Paint)",
        "snippet": "    public void setLinePaint(Paint paint) {\n        this.linePaint = paint;\n    }\n",
        "begin_line": 423,
        "end_line": 425,
        "comment": "\r\n     * Sets the line paint.\r\n     * \r\n     * @param paint  the paint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.setLineStroke#441",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.setLineStroke(java.awt.Stroke)",
        "snippet": "    public void setLineStroke(Stroke stroke) {\n        this.lineStroke = stroke;\n    }\n",
        "begin_line": 441,
        "end_line": 443,
        "comment": "\r\n     * Sets the line stroke.\r\n     * \r\n     * @param stroke  the stroke.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.arrange#454",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint = toContentConstraint(constraint);\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        Size2D contentSize = null;\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(g2);\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\");\n            }\n            else if (h == LengthConstraintType.FIXED) {   \n                contentSize = new Size2D(\n                    contentConstraint.getWidth(),\n                    contentConstraint.getHeight()\n                );\n            }            \n        }\n        return new Size2D(\n            calculateTotalWidth(contentSize.getWidth()), \n            calculateTotalHeight(contentSize.getHeight())\n        );\n    }\n",
        "begin_line": 454,
        "end_line": 499,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.arrangeNN#510",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.arrangeNN(java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(Graphics2D g2) {\n        Rectangle2D contentSize = new Rectangle2D.Double();\n        if (this.line != null) {\n            contentSize.setRect(this.line.getBounds2D());\n        }\n        if (this.shape != null) {\n            contentSize = contentSize.createUnion(this.shape.getBounds2D());\n        }\n        return new Size2D(contentSize.getWidth(), contentSize.getHeight());\n    }\n",
        "begin_line": 510,
        "end_line": 519,
        "comment": "\r\n     * Performs the layout with no constraint, so the content size is \r\n     * determined by the bounds of the shape and/or line drawn to represent \r\n     * the series.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return  The content size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendGraphic.draw#581",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        draw(g2, area);\n        return null;\n    }\n",
        "begin_line": 581,
        "end_line": 584,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  ignored (<code>null</code> permitted).\r\n     * \r\n     * @return Always <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "TextUtilities.createTextBlock#114",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public static TextBlock createTextBlock(String text, Font font,\n                                            Paint paint) {\n        if (text == null) {\n            throw new IllegalArgumentException(\"Null 'text' argument.\");\n        }\n        TextBlock result = new TextBlock();\n        String input = text;\n        boolean moreInputToProcess = (text.length() > 0);\n        int start = 0;\n        while (moreInputToProcess) {\n            int index = input.indexOf(\"\\n\");\n            if (index > start) {\n                String line = input.substring(start, index);\n                if (index < input.length() - 1) {\n                    result.addLine(line, font, paint);\n                    input = input.substring(index + 1);\n                }\n                else {\n                    moreInputToProcess = false;\n                }\n            }\n            else if (index == start) {\n                if (index < input.length() - 1) {\n                    input = input.substring(index + 1);\n                }\n                else {\n                    moreInputToProcess = false;\n                }\n            }\n            else {\n                result.addLine(input, font, paint);\n                moreInputToProcess = false;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 114,
        "end_line": 149,
        "comment": "\n     * Creates a {@link TextBlock} from a <code>String</code>.  Line breaks \n     * are added where the <code>String</code> contains '\\n' characters.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * \n     * @return A text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LineBorder.getPaint#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.getPaint()",
        "snippet": "    public Paint getPaint() {\n        return this.paint;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\r\n     * Returns the paint.\r\n     * \r\n     * @return The paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LineBorder.getStroke#133",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.getStroke()",
        "snippet": "    public Stroke getStroke() {\n        return this.stroke;\n    }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\r\n     * Returns the stroke.\r\n     * \r\n     * @return The stroke (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LabelBlock.LabelBlock#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "class_name": "org.jfree.chart.block.LabelBlock",
        "signature": "org.jfree.chart.block.LabelBlock.LabelBlock(java.lang.String, java.awt.Font, java.awt.Paint)",
        "snippet": "    public LabelBlock(String text, Font font, Paint paint) {        \n        this.text = text;\n        this.paint = paint; \n        this.label = TextUtilities.createTextBlock(text, font, this.paint); \n        this.font = font;\n        this.toolTipText = null;\n        this.urlText = null;\n    }\n",
        "begin_line": 132,
        "end_line": 139,
        "comment": "\r\n     * Creates a new label block.\r\n     *\r\n     * @param text  the text for the label (<code>null</code> not permitted).\r\n     * @param font  the font (<code>null</code> not permitted).\r\n     * @param paint the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LabelBlock.arrange#247",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "class_name": "org.jfree.chart.block.LabelBlock",
        "signature": "org.jfree.chart.block.LabelBlock.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        g2.setFont(this.font);\n        Size2D s = this.label.calculateDimensions(g2);\n        return new Size2D(calculateTotalWidth(s.getWidth()), \n                calculateTotalHeight(s.getHeight()));\n    }\n",
        "begin_line": 247,
        "end_line": 252,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LabelBlock.draw#273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LabelBlock.java",
        "class_name": "org.jfree.chart.block.LabelBlock",
        "signature": "org.jfree.chart.block.LabelBlock.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        area = trimMargin(area);\n        drawBorder(g2, area);\n        area = trimBorder(area);\n        area = trimPadding(area);\n        \n        // check if we need to collect chart entities from the container\n        EntityBlockParams ebp = null;\n        StandardEntityCollection sec = null;\n        Shape entityArea = null;\n        if (params instanceof EntityBlockParams) {\n            ebp = (EntityBlockParams) params;\n            if (ebp.getGenerateEntities()) {\n                sec = new StandardEntityCollection();\n                entityArea = (Shape) area.clone();\n            }\n        }\n        g2.setPaint(this.paint);\n        g2.setFont(this.font);\n        this.label.draw(g2, (float) area.getX(), (float) area.getY(), \n                TextBlockAnchor.TOP_LEFT);\n        BlockResult result = null;\n        if (ebp != null && sec != null) {\n            if (this.toolTipText != null || this.urlText != null) {\n                ChartEntity entity = new ChartEntity(entityArea, \n                        this.toolTipText, this.urlText);   \n                sec.add(entity);\n                result = new BlockResult();\n                result.setEntityCollection(sec);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 273,
        "end_line": 305,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  ignored (<code>null</code> permitted).\r\n     * \r\n     * @return Always <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "FlowArrangement.add#109",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        // since the flow layout is relatively straightforward, \n        // no information needs to be recorded here\n    }\n",
        "begin_line": 109,
        "end_line": 112,
        "comment": "\r\n     * Adds a block to be managed by this instance.  This method is usually \r\n     * called by the {@link BlockContainer}, you shouldn't need to call it \r\n     * directly.\r\n     * \r\n     * @param block  the block.\r\n     * @param key  a key that controls the position of the block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "FlowArrangement.arrange#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint) {\n        \n        LengthConstraintType w = constraint.getWidthConstraintType();\n        LengthConstraintType h = constraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeNN(container, g2);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeNF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeFN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeFF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                return arrangeFR(container, g2, constraint);  \n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeRN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeRF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                return arrangeRR(container, g2, constraint);   \n            }\n        }\n        throw new RuntimeException(\"Unrecognised constraint type.\");\n        \n    }\n",
        "begin_line": 126,
        "end_line": 166,
        "comment": "\r\n     * Calculates and sets the bounds of all the items in the specified \r\n     * container, subject to the given constraint.  The <code>Graphics2D</code>\r\n     * can be used by some items (particularly items containing text) to \r\n     * calculate sizing parameters.\r\n     * \r\n     * @param container  the container whose items are being arranged.\r\n     * @param constraint  the size constraint.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size of the container after arrangement of the contents.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "FlowArrangement.arrangeNN#358",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double x = 0.0;\n        double width = 0.0;\n        double maxHeight = 0.0;\n        List blocks = container.getBlocks();\n        int blockCount = blocks.size();\n        if (blockCount > 0) {\n            Size2D[] sizes = new Size2D[blocks.size()];\n            for (int i = 0; i < blocks.size(); i++) {\n                Block block = (Block) blocks.get(i);\n                sizes[i] = block.arrange(g2, RectangleConstraint.NONE);\n                width = width + sizes[i].getWidth();\n                maxHeight = Math.max(sizes[i].height, maxHeight);\n                block.setBounds(\n                    new Rectangle2D.Double(\n                        x, 0.0, sizes[i].width, sizes[i].height\n                    )\n                );\n                x = x + sizes[i].width + this.horizontalGap;\n            }\n            if (blockCount > 1) {\n                width = width + this.horizontalGap * (blockCount - 1);   \n            }\n            if (this.verticalAlignment != VerticalAlignment.TOP) {\n                for (int i = 0; i < blocks.size(); i++) {\n                    //Block b = (Block) blocks.get(i);\n                    if (this.verticalAlignment == VerticalAlignment.CENTER) {\n                        //TODO: shift block down by half\n                    }\n                    else if (this.verticalAlignment \n                            == VerticalAlignment.BOTTOM) {\n                        //TODO: shift block down to bottom\n                    }\n                }            \n            }\n        }\n        return new Size2D(width, maxHeight);\n    }\n",
        "begin_line": 358,
        "end_line": 395,
        "comment": "\r\n     * Arranges the blocks without any constraints.  This puts all blocks\r\n     * into a single row.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "CenterArrangement.CenterArrangement#66",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.CenterArrangement()",
        "snippet": "    public CenterArrangement() {   \n    }\n",
        "begin_line": 66,
        "end_line": 67,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "CenterArrangement.add#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        // since the flow layout is relatively straightforward, \n        // no information needs to be recorded here\n    }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\r\n     * Adds a block to be managed by this instance.  This method is usually \r\n     * called by the {@link BlockContainer}, you shouldn't need to call it \r\n     * directly.\r\n     * \r\n     * @param block  the block.\r\n     * @param key  a key that controls the position of the block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "CenterArrangement.arrange#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(BlockContainer container, Graphics2D g2,\n                          RectangleConstraint constraint) {\n        \n        LengthConstraintType w = constraint.getWidthConstraintType();\n        LengthConstraintType h = constraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeNN(container, g2);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeFN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                return arrangeRN(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                return arrangeRF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                return arrangeRR(container, g2, constraint);   \n            }\n        }\n        throw new IllegalArgumentException(\"Unknown LengthConstraintType.\");\n        \n    }\n",
        "begin_line": 94,
        "end_line": 134,
        "comment": "\r\n     * Calculates and sets the bounds of all the items in the specified \r\n     * container, subject to the given constraint.  The <code>Graphics2D</code>\r\n     * can be used by some items (particularly items containing text) to \r\n     * calculate sizing parameters.\r\n     * \r\n     * @param container  the container whose items are being arranged.\r\n     * @param g2  the graphics device.\r\n     * @param constraint  the size constraint.\r\n     * \r\n     * @return The size of the container after arrangement of the contents.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "CenterArrangement.arrangeNN#284",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/CenterArrangement.java",
        "class_name": "org.jfree.chart.block.CenterArrangement",
        "signature": "org.jfree.chart.block.CenterArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        List blocks = container.getBlocks();\n        Block b = (Block) blocks.get(0);\n        Size2D s = b.arrange(g2, RectangleConstraint.NONE);\n        b.setBounds(new Rectangle2D.Double(0.0, 0.0, s.width, s.height));\n        return new Size2D(s.width, s.height);  \n    }\n",
        "begin_line": 284,
        "end_line": 290,
        "comment": "\r\n     * Arranges the blocks without any constraints.  This puts all blocks\r\n     * into a single row.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BorderArrangement.BorderArrangement#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.BorderArrangement()",
        "snippet": "    public BorderArrangement() {\n    }\n",
        "begin_line": 86,
        "end_line": 87,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BorderArrangement.add#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        \n        if (key == null) {\n            this.centerBlock = block;\n        }\n        else {\n            RectangleEdge edge = (RectangleEdge) key;\n            if (edge == RectangleEdge.TOP) {\n                this.topBlock = block;\n            }\n            else if (edge == RectangleEdge.BOTTOM) {\n                this.bottomBlock = block;\n            }\n            else if (edge == RectangleEdge.LEFT) {\n                this.leftBlock = block;\n            }\n            else if (edge == RectangleEdge.RIGHT) {\n                this.rightBlock = block;\n            }\n        }\n    }\n",
        "begin_line": 96,
        "end_line": 116,
        "comment": "\r\n     * Adds a block to the arrangement manager at the specified edge.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     * @param key  the edge (an instance of {@link RectangleEdge}) or \r\n     *             <code>null</code> for the center block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BorderArrangement.arrange#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.arrange(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(BlockContainer container, \n                          Graphics2D g2, \n                          RectangleConstraint constraint) {\n        RectangleConstraint contentConstraint \n            = container.toContentConstraint(constraint);\n        Size2D contentSize = null;\n        LengthConstraintType w = contentConstraint.getWidthConstraintType();\n        LengthConstraintType h = contentConstraint.getHeightConstraintType();\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeNN(container, g2);  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                contentSize = arrangeFN(container, g2, constraint.getWidth());  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                contentSize = arrangeFF(container, g2, constraint);  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeFR(container, g2, constraint);  \n            }\n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not implemented.\");  \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(\n                    container, constraint.getWidthRange(),\n                    constraint.getHeightRange(), g2\n                );  \n            }\n        }\n        return new Size2D(\n            container.calculateTotalWidth(contentSize.getWidth()),\n            container.calculateTotalHeight(contentSize.getHeight())\n        );\n    }\n",
        "begin_line": 128,
        "end_line": 176,
        "comment": "\r\n     * Arranges the items in the specified container, subject to the given \r\n     * constraint.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint.\r\n     * \r\n     * @return The block size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BorderArrangement.arrangeNN#186",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BorderArrangement.java",
        "class_name": "org.jfree.chart.block.BorderArrangement",
        "signature": "org.jfree.chart.block.BorderArrangement.arrangeNN(org.jfree.chart.block.BlockContainer, java.awt.Graphics2D)",
        "snippet": "    protected Size2D arrangeNN(BlockContainer container, Graphics2D g2) {\n        double[] w = new double[5];\n        double[] h = new double[5];\n        if (this.topBlock != null) {\n            Size2D size = this.topBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[0] = size.width;\n            h[0] = size.height;\n        }\n        if (this.bottomBlock != null) {\n            Size2D size = this.bottomBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[1] = size.width;\n            h[1] = size.height;\n        }\n        if (this.leftBlock != null) {\n            Size2D size = this.leftBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[2] = size.width;\n            h[2] = size.height;\n       }\n        if (this.rightBlock != null) {\n            Size2D size = this.rightBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[3] = size.width;\n            h[3] = size.height;\n        }\n        \n        h[2] = Math.max(h[2], h[3]);\n        h[3] = h[2];\n        \n        if (this.centerBlock != null) {\n            Size2D size = this.centerBlock.arrange(\n                g2, RectangleConstraint.NONE\n            );\n            w[4] = size.width;\n            h[4] = size.height;\n        }\n        double width = Math.max(w[0], Math.max(w[1], w[2] + w[4] + w[3]));\n        double centerHeight = Math.max(h[2], Math.max(h[3], h[4]));\n        double height = h[0] + h[1] + centerHeight;\n        if (this.topBlock != null) {\n            this.topBlock.setBounds(\n                new Rectangle2D.Double(0.0, 0.0, width, h[0])\n            );\n        }\n        if (this.bottomBlock != null) {\n            this.bottomBlock.setBounds(\n                new Rectangle2D.Double(0.0, height - h[1], width, h[1])\n            );\n        }\n        if (this.leftBlock != null) {\n            this.leftBlock.setBounds(\n                new Rectangle2D.Double(0.0, h[0], w[2], centerHeight)\n            );\n        }\n        if (this.rightBlock != null) {\n            this.rightBlock.setBounds(\n                new Rectangle2D.Double(width - w[3], h[0], w[3], centerHeight)\n            );\n        }\n        \n        if (this.centerBlock != null) {\n            this.centerBlock.setBounds(\n                new Rectangle2D.Double(\n                    w[2], h[0], width - w[2] - w[3], centerHeight\n                )\n            );\n        }\n        return new Size2D(width, height);\n    }\n",
        "begin_line": 186,
        "end_line": 260,
        "comment": "\r\n     * Performs an arrangement without constraints.\r\n     * \r\n     * @param container  the container.\r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The container size after the arrangement.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BlockContainer.getBlocks#142",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.getBlocks()",
        "snippet": "    public List getBlocks() {\n        return Collections.unmodifiableList(this.blocks);\n    }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "\r\n     * Returns an unmodifiable list of the {@link Block} objects managed by \r\n     * this arrangement.\r\n     * \r\n     * @return A list of blocks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BlockContainer.add#151",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block)",
        "snippet": "    public void add(Block block) {\n        add(block, null);\n    }\n",
        "begin_line": 151,
        "end_line": 153,
        "comment": "\r\n     * Adds a block to the container.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BlockContainer.add#161",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.add(org.jfree.chart.block.Block, java.lang.Object)",
        "snippet": "    public void add(Block block, Object key) {\n        this.blocks.add(block);\n        this.arrangement.add(block, key);\n    }\n",
        "begin_line": 161,
        "end_line": 164,
        "comment": "\r\n     * Adds a block to the container.\r\n     * \r\n     * @param block  the block (<code>null</code> permitted).\r\n     * @param key  the key (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "BlockContainer.arrange#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        return this.arrangement.arrange(this, g2, constraint);\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "AbstractBlock.setPadding#293",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setPadding(double, double, double, double)",
        "snippet": "    public void setPadding(double top, double left, double bottom, \n                           double right) {\n        setPadding(new RectangleInsets(top, left, bottom, right));\n    }\n",
        "begin_line": 293,
        "end_line": 296,
        "comment": "\r\n     * Sets the padding.\r\n     * \r\n     * @param top  the top padding.\r\n     * @param left  the left padding.\r\n     * @param bottom  the bottom padding.\r\n     * @param right  the right padding.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "AbstractBlock.getBounds#355",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.getBounds()",
        "snippet": "    public Rectangle2D getBounds() {\n        return this.bounds;\n    }\n",
        "begin_line": 355,
        "end_line": 357,
        "comment": "\r\n     * Returns the current bounds of the block.\r\n     * \r\n     * @return The bounds.\r\n     * \r\n     * @see #setBounds(Rectangle2D)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItemCollection.get#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.get(int)",
        "snippet": "    public LegendItem get(int index) {\n        return (LegendItem) this.items.get(index);\n    }\n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "\r\n     * Returns a legend item from the collection.\r\n     *\r\n     * @param index  the legend item index (zero-based).\r\n     *\r\n     * @return The legend item.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getDataset#506",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getDataset()",
        "snippet": "    public Dataset getDataset() {\n        return this.dataset;\n    }\n",
        "begin_line": 506,
        "end_line": 508,
        "comment": "\r\n     * Returns the dataset.\r\n     * \r\n     * @return The dataset.\r\n     * \r\n     * @since 1.0.6\r\n     * \r\n     * @see #setDatasetIndex(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getSeriesKey#557",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getSeriesKey()",
        "snippet": "    public Comparable getSeriesKey() {\n        return this.seriesKey;\n    }\n",
        "begin_line": 557,
        "end_line": 559,
        "comment": "\r\n     * Returns the series key.\r\n     * \r\n     * @return The series key.\r\n     * \r\n     * @since 1.0.6\r\n     * \r\n     * @see #setSeriesKey(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getToolTipText#626",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getToolTipText()",
        "snippet": "    public String getToolTipText() {\n        return this.toolTipText;   \n    }\n",
        "begin_line": 626,
        "end_line": 628,
        "comment": "\r\n     * Returns the tool tip text.\r\n     * \r\n     * @return The tool tip text (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getURLText#635",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getURLText()",
        "snippet": "    public String getURLText() {\n        return this.urlText; \n    }\n",
        "begin_line": 635,
        "end_line": 637,
        "comment": "\r\n     * Returns the URL text.\r\n     * \r\n     * @return The URL text (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.isShapeVisible#644",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isShapeVisible()",
        "snippet": "    public boolean isShapeVisible() {\n        return this.shapeVisible;\n    }\n",
        "begin_line": 644,
        "end_line": 646,
        "comment": "\r\n     * Returns a flag that indicates whether or not the shape is visible.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getShape#654",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getShape()",
        "snippet": "    public Shape getShape() {\n        return this.shape;\n    }\n",
        "begin_line": 654,
        "end_line": 656,
        "comment": "\r\n     * Returns the shape used to label the series represented by this legend \r\n     * item.\r\n     *\r\n     * @return The shape (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.isShapeFilled#663",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isShapeFilled()",
        "snippet": "    public boolean isShapeFilled() {\n        return this.shapeFilled;\n    }\n",
        "begin_line": 663,
        "end_line": 665,
        "comment": "\r\n     * Returns a flag that controls whether or not the shape is filled.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getFillPaint#672",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getFillPaint()",
        "snippet": "    public Paint getFillPaint() {\n        return this.fillPaint;\n    }\n",
        "begin_line": 672,
        "end_line": 674,
        "comment": "\r\n     * Returns the fill paint.\r\n     *\r\n     * @return The fill paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.isShapeOutlineVisible#682",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isShapeOutlineVisible()",
        "snippet": "    public boolean isShapeOutlineVisible() {\n        return this.shapeOutlineVisible;\n    }\n",
        "begin_line": 682,
        "end_line": 684,
        "comment": "\r\n     * Returns the flag that controls whether or not the shape outline\r\n     * is visible.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getLineStroke#691",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLineStroke()",
        "snippet": "    public Stroke getLineStroke() {\n        return this.lineStroke;\n    }\n",
        "begin_line": 691,
        "end_line": 693,
        "comment": "\r\n     * Returns the line stroke for the series.\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getLinePaint#700",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLinePaint()",
        "snippet": "    public Paint getLinePaint() {\n        return this.linePaint;\n    }\n",
        "begin_line": 700,
        "end_line": 702,
        "comment": "\r\n     * Returns the paint used for lines.\r\n     * \r\n     * @return The paint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getOutlinePaint#709",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getOutlinePaint()",
        "snippet": "    public Paint getOutlinePaint() {\n        return this.outlinePaint;\n    }\n",
        "begin_line": 709,
        "end_line": 711,
        "comment": "\r\n     * Returns the outline paint.\r\n     *\r\n     * @return The outline paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getOutlineStroke#718",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getOutlineStroke()",
        "snippet": "    public Stroke getOutlineStroke() {\n        return this.outlineStroke;\n    }\n",
        "begin_line": 718,
        "end_line": 720,
        "comment": "\r\n     * Returns the outline stroke.\r\n     *\r\n     * @return The outline stroke (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.isLineVisible#727",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.isLineVisible()",
        "snippet": "    public boolean isLineVisible() {\n        return this.lineVisible;\n    }\n",
        "begin_line": 727,
        "end_line": 729,
        "comment": "\r\n     * Returns a flag that indicates whether or not the line is visible.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getLine#736",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLine()",
        "snippet": "    public Shape getLine() {\n        return this.line;\n    }\n",
        "begin_line": 736,
        "end_line": 738,
        "comment": "\r\n     * Returns the line.\r\n     * \r\n     * @return The line.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getFillPaintTransformer#750",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getFillPaintTransformer()",
        "snippet": "    public GradientPaintTransformer getFillPaintTransformer() {\n        return this.fillPaintTransformer;\n    }\n",
        "begin_line": 750,
        "end_line": 752,
        "comment": "\r\n     * Returns the transformer used when the fill paint is an instance of \r\n     * <code>GradientPaint</code>.\r\n     * \r\n     * @return The transformer (never <code>null</code>).\r\n     * \r\n     * @since 1.0.4\r\n     * \r\n     * @see #setFillPaintTransformer(GradientPaintTransformer)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6487
        },
        "num_failing_tests": 18
    },
    {
        "name": "NumberAxis.setTickUnit#340",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.setTickUnit(org.jfree.chart.axis.NumberTickUnit, boolean, boolean)",
        "snippet": "    public void setTickUnit(NumberTickUnit unit, boolean notify, \n                            boolean turnOffAutoSelect) {\n\n        if (unit == null) {\n            throw new IllegalArgumentException(\"Null 'unit' argument.\");   \n        }\n        this.tickUnit = unit;\n        if (turnOffAutoSelect) {\n            setAutoTickUnitSelection(false, false);\n        }\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n",
        "begin_line": 340,
        "end_line": 354,
        "comment": "\r\n     * Sets the tick unit for the axis and, if requested, sends an \r\n     * {@link AxisChangeEvent} to all registered listeners.  In addition, an \r\n     * option is provided to turn off the \"auto-select\" feature for tick units \r\n     * (you can restore it using the \r\n     * {@link ValueAxis#setAutoTickUnitSelection(boolean)} method).\r\n     *\r\n     * @param unit  the new tick unit (<code>null</code> not permitted).\r\n     * @param notify  notify listeners?\r\n     * @param turnOffAutoSelect  turn off the auto-tick selection?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6428
        },
        "num_failing_tests": 20
    },
    {
        "name": "CategoryAxis.calculateTextBlockWidth#1058",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateTextBlockWidth(org.jfree.chart.text.TextBlock, org.jfree.chart.axis.CategoryLabelPosition, java.awt.Graphics2D)",
        "snippet": "    protected double calculateTextBlockWidth(TextBlock block, \n                                             CategoryLabelPosition position, \n                                             Graphics2D g2) {\n                                                    \n        RectangleInsets insets = getTickLabelInsets();\n        Size2D size = block.calculateDimensions(g2);\n        Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(), \n                size.getHeight());\n        Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),\n                0.0f, 0.0f);\n        double w = rotatedBox.getBounds2D().getWidth() + insets.getTop() \n                + insets.getBottom();\n        return w;\n        \n    }\n",
        "begin_line": 1058,
        "end_line": 1072,
        "comment": "\r\n     * A utility method for determining the width of a text block.\r\n     *\r\n     * @param block  the text block.\r\n     * @param position  the position.\r\n     * @param g2  the graphics device.\r\n     *\r\n     * @return The width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6428
        },
        "num_failing_tests": 10
    },
    {
        "name": "AbstractBlock.setBounds#366",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setBounds(java.awt.geom.Rectangle2D)",
        "snippet": "    public void setBounds(Rectangle2D bounds) {\n        if (bounds == null) {\n            throw new IllegalArgumentException(\"Null 'bounds' argument.\");\n        }\n        this.bounds = bounds;\n    }\n",
        "begin_line": 366,
        "end_line": 371,
        "comment": "\r\n     * Sets the bounds of the block.\r\n     * \r\n     * @param bounds  the bounds (<code>null</code> not permitted).\r\n     * \r\n     * @see #getBounds()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6396
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItemCollection.add#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItemCollection.java",
        "class_name": "org.jfree.chart.LegendItemCollection",
        "signature": "org.jfree.chart.LegendItemCollection.add(org.jfree.chart.LegendItem)",
        "snippet": "    public void add(LegendItem item) {\n        this.items.add(item);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Adds a legend item to the collection.\r\n     *\r\n     * @param item  the item to add.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6309
        },
        "num_failing_tests": 18
    },
    {
        "name": "NumberTick.NumberTick#66",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTick.java",
        "class_name": "org.jfree.chart.axis.NumberTick",
        "signature": "org.jfree.chart.axis.NumberTick.NumberTick(java.lang.Number, java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public NumberTick(Number number, String label,\n                      TextAnchor textAnchor, \n                      TextAnchor rotationAnchor, double angle) {\n                        \n        super(number.doubleValue(), label, textAnchor, rotationAnchor, angle);\n        this.number = number;\n            \n    }\n",
        "begin_line": 66,
        "end_line": 73,
        "comment": "\r\n     * Creates a new tick.\r\n     * \r\n     * @param number  the number.\r\n     * @param label  the label.\r\n     * @param textAnchor  the part of the label that is aligned with the anchor \r\n     *                    point.\r\n     * @param rotationAnchor  defines the rotation point relative to the text.\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6287
        },
        "num_failing_tests": 20
    },
    {
        "name": "Axis.getTickLabelPaint#693",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickLabelPaint()",
        "snippet": "    public Paint getTickLabelPaint() {\n        return this.tickLabelPaint;\n    }\n",
        "begin_line": 693,
        "end_line": 695,
        "comment": "\r\n     * Returns the color/shade used for the tick labels.\r\n     *\r\n     * @return The paint used for the tick labels.\r\n     * \r\n     * @see #setTickLabelPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6251
        },
        "num_failing_tests": 19
    },
    {
        "name": "BarRenderer.getLegendItem#656",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.getLegendItem(int, int)",
        "snippet": "    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot cp = getPlot();\n        if (cp == null) {\n            return null;\n        }\n\n        // check that a legend item needs to be displayed...\n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = cp.getDataset(datasetIndex);\n        String label = getLegendItemLabelGenerator().generateLabel(dataset, \n                series);\n        String description = label;\n        String toolTipText = null; \n        if (getLegendItemToolTipGenerator() != null) {\n            toolTipText = getLegendItemToolTipGenerator().generateLabel(\n                    dataset, series);   \n        }\n        String urlText = null;\n        if (getLegendItemURLGenerator() != null) {\n            urlText = getLegendItemURLGenerator().generateLabel(dataset, \n                    series);   \n        }\n        Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n\n        LegendItem result = new LegendItem(label, description, toolTipText, \n                urlText, true, shape, true, paint, isDrawBarOutline(), \n                outlinePaint, outlineStroke, false, new Line2D.Float(), \n                new BasicStroke(1.0f), Color.black);\n        result.setDataset(dataset);\n        result.setDatasetIndex(datasetIndex);\n        result.setSeriesKey(dataset.getRowKey(series));\n        result.setSeriesIndex(series);\n        if (this.gradientPaintTransformer != null) {\n            result.setFillPaintTransformer(this.gradientPaintTransformer);\n        }\n        return result;\n    }\n",
        "begin_line": 656,
        "end_line": 699,
        "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6155
        },
        "num_failing_tests": 10
    },
    {
        "name": "Plot.fillBackground#962",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.fillBackground(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    protected void fillBackground(Graphics2D g2, Rectangle2D area, \n            PlotOrientation orientation) {\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        if (this.backgroundPaint == null) {\n            return;\n        }\n        Paint p = this.backgroundPaint;\n        if (p instanceof GradientPaint) {\n            GradientPaint gp = (GradientPaint) p;\n            if (orientation == PlotOrientation.VERTICAL) {\n                p = new GradientPaint((float) area.getCenterX(), \n                        (float) area.getMaxY(), gp.getColor1(), \n                        (float) area.getCenterX(), (float) area.getMinY(), \n                        gp.getColor2());\n            }\n            else if (orientation == PlotOrientation.HORIZONTAL) {\n                p = new GradientPaint((float) area.getMinX(), \n                        (float) area.getCenterY(), gp.getColor1(), \n                        (float) area.getMaxX(), (float) area.getCenterY(), \n                        gp.getColor2());\n            }\n        }            \n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                this.backgroundAlpha));\n        g2.setPaint(p);\n        g2.fill(area);\n        g2.setComposite(originalComposite);        \n    }\n",
        "begin_line": 962,
        "end_line": 992,
        "comment": "\r\n     * Fills the specified area with the background paint.  If the background\r\n     * paint is an instance of <code>GradientPaint</code>, the gradient will\r\n     * run in the direction suggested by the plot's orientation.\r\n     * \r\n     * @param g2  the graphics target.\r\n     * @param area  the plot area.\r\n     * @param orientation  the plot orientation (<code>null</code> not \r\n     *         permitted).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6107
        },
        "num_failing_tests": 19
    },
    {
        "name": "Plot.drawBackgroundImage#1005",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.drawBackgroundImage(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackgroundImage(Graphics2D g2, Rectangle2D area) {\n        if (this.backgroundImage != null) {\n            Composite originalComposite = g2.getComposite();\n            g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \n                    this.backgroundImageAlpha));\n            Rectangle2D dest = new Rectangle2D.Double(0.0, 0.0,\n                    this.backgroundImage.getWidth(null), \n                    this.backgroundImage.getHeight(null));\n            Align.align(dest, area, this.backgroundImageAlignment);\n            g2.drawImage(this.backgroundImage, (int) dest.getX(), \n                    (int) dest.getY(), (int) dest.getWidth() + 1, \n                    (int) dest.getHeight() + 1, null);\n            g2.setComposite(originalComposite);\n        }\n    }\n",
        "begin_line": 1005,
        "end_line": 1019,
        "comment": "\r\n     * Draws the background image (if there is one) aligned within the \r\n     * specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * \r\n     * @see #getBackgroundImage()\r\n     * @see #getBackgroundImageAlignment()\r\n     * @see #getBackgroundImageAlpha()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6107
        },
        "num_failing_tests": 19
    },
    {
        "name": "NumberAxis.refreshTicksHorizontal#1170",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.refreshTicksHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        \n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n                TextAnchor anchor = null;\n                TextAnchor rotationAnchor = null;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n\n                Tick tick = new NumberTick(new Double(currentTickValue), \n                        tickLabel, anchor, rotationAnchor, angle);\n                result.add(tick);\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 1170,
        "end_line": 1229,
        "comment": "\r\n     * Calculates the positions of the tick labels for the axis, storing the \r\n     * results in the tick label list (ready for drawing).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the data should be drawn.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.6068
        },
        "num_failing_tests": 9
    },
    {
        "name": "AbstractRenderer.lookupSeriesOutlineStroke#1228",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlineStroke(int)",
        "snippet": "    public Stroke lookupSeriesOutlineStroke(int series) {\n\n        // look up the stroke table\n        Stroke result = this.outlineStrokeList.getStroke(series);\n        if (result == null && this.autoPopulateSeriesOutlineStroke) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                result = supplier.getNextOutlineStroke();\n                this.outlineStrokeList.setStroke(series, result);\n            }\n        }\n        if (result == null) {\n            result = this.baseOutlineStroke;\n        }\n        return result;\n\n    }\n",
        "begin_line": 1228,
        "end_line": 1244,
        "comment": "\r\n     * Returns the stroke used to outline the items in a series.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5922
        },
        "num_failing_tests": 18
    },
    {
        "name": "BarRenderer.isDrawBarOutline#266",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.isDrawBarOutline()",
        "snippet": "    public boolean isDrawBarOutline() {\n        return this.drawBarOutline;    \n    }\n",
        "begin_line": 266,
        "end_line": 268,
        "comment": "\r\n     * Returns a flag that controls whether or not bar outlines are drawn.\r\n     * \r\n     * @return A boolean.\r\n     * \r\n     * @see #setDrawBarOutline(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5913
        },
        "num_failing_tests": 10
    },
    {
        "name": "AbstractRenderer.isSeriesVisibleInLegend#502",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.isSeriesVisibleInLegend(int)",
        "snippet": "    public boolean isSeriesVisibleInLegend(int series) {\n        boolean result = this.baseSeriesVisibleInLegend;\n        Boolean b = this.seriesVisibleInLegendList.getBoolean(series);\n        if (b != null) {\n            result = b.booleanValue();   \n        }\n        return result;\n    }\n",
        "begin_line": 502,
        "end_line": 509,
        "comment": "\r\n     * Returns <code>true</code> if the series should be shown in the legend,\r\n     * and <code>false</code> otherwise.\r\n     * \r\n     * @param series  the series index.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5852
        },
        "num_failing_tests": 18
    },
    {
        "name": "AbstractRenderer.lookupSeriesOutlinePaint#935",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesOutlinePaint(int)",
        "snippet": "    public Paint lookupSeriesOutlinePaint(int series) {\n\n        // look up the paint table\n        Paint seriesOutlinePaint = this.outlinePaintList.getPaint(series);\n        if (seriesOutlinePaint == null && this.autoPopulateSeriesOutlinePaint) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                seriesOutlinePaint = supplier.getNextOutlinePaint();\n                this.outlinePaintList.setPaint(series, seriesOutlinePaint);\n            }\n        }\n        if (seriesOutlinePaint == null) {\n            seriesOutlinePaint = this.baseOutlinePaint;\n        }\n        return seriesOutlinePaint;\n\n    }\n",
        "begin_line": 935,
        "end_line": 951,
        "comment": "\r\n     * Returns the paint used to outline an item drawn by the renderer.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5744
        },
        "num_failing_tests": 15
    },
    {
        "name": "LegendItem.setFillPaintTransformer#764",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setFillPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
        "snippet": "    public void setFillPaintTransformer(GradientPaintTransformer transformer) {\n        if (transformer == null) { \n            throw new IllegalArgumentException(\"Null 'transformer' attribute.\");\n        }\n        this.fillPaintTransformer = transformer;\n    }\n",
        "begin_line": 764,
        "end_line": 769,
        "comment": "\r\n     * Sets the transformer used when the fill paint is an instance of \r\n     * <code>GradientPaint</code>.\r\n     * \r\n     * @param transformer  the transformer (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.4\r\n     * \r\n     * @see #getFillPaintTransformer()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5698
        },
        "num_failing_tests": 10
    },
    {
        "name": "ValueAxis.drawAxisLine#517",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.drawAxisLine(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void drawAxisLine(Graphics2D g2, double cursor,\n                                Rectangle2D dataArea, RectangleEdge edge) {\n        Line2D axisLine = null;\n        if (edge == RectangleEdge.TOP) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.BOTTOM) {\n            axisLine = new Line2D.Double(dataArea.getX(), cursor, \n                    dataArea.getMaxX(), cursor);  \n        }\n        else if (edge == RectangleEdge.LEFT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        else if (edge == RectangleEdge.RIGHT) {\n            axisLine = new Line2D.Double(cursor, dataArea.getY(), cursor, \n                    dataArea.getMaxY());  \n        }\n        g2.setPaint(getAxisLinePaint());\n        g2.setStroke(getAxisLineStroke());\n        g2.draw(axisLine);\n        \n        boolean drawUpOrRight = false;  \n        boolean drawDownOrLeft = false;\n        if (this.positiveArrowVisible) {\n            if (this.inverted) {\n                drawDownOrLeft = true;   \n            }\n            else {\n                drawUpOrRight = true;   \n            }\n        }\n        if (this.negativeArrowVisible) {\n            if (this.inverted) {\n                drawUpOrRight = true;   \n            }\n            else {\n                drawDownOrLeft = true;   \n            }\n        }\n        if (drawUpOrRight) {\n            double x = 0.0;\n            double y = 0.0;\n            Shape arrow = null;\n            if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n                x = dataArea.getMaxX();\n                y = cursor;\n                arrow = this.rightArrow; \n            }\n            else if (edge == RectangleEdge.LEFT \n                    || edge == RectangleEdge.RIGHT) {\n                x = cursor;\n                y = dataArea.getMinY();\n                arrow = this.upArrow; \n            }\n\n            // draw the arrow...\n            AffineTransform transformer = new AffineTransform();\n            transformer.setToTranslation(x, y);\n            Shape shape = transformer.createTransformedShape(arrow);\n            g2.fill(shape);\n            g2.draw(shape);\n        }\n        \n        if (drawDownOrLeft) {\n            double x = 0.0;\n            double y = 0.0;\n            Shape arrow = null;\n            if (edge == RectangleEdge.TOP || edge == RectangleEdge.BOTTOM) {\n                x = dataArea.getMinX();\n                y = cursor;\n                arrow = this.leftArrow; \n            }\n            else if (edge == RectangleEdge.LEFT \n                    || edge == RectangleEdge.RIGHT) {\n                x = cursor;\n                y = dataArea.getMaxY();\n                arrow = this.downArrow; \n            }\n\n            // draw the arrow...\n            AffineTransform transformer = new AffineTransform();\n            transformer.setToTranslation(x, y);\n            Shape shape = transformer.createTransformedShape(arrow);\n            g2.fill(shape);\n            g2.draw(shape);\n        }\n        \n    }\n",
        "begin_line": 517,
        "end_line": 606,
        "comment": "\r\n     * Draws an axis line at the current cursor position and edge.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param cursor  the cursor position.\r\n     * @param dataArea  the data area.\r\n     * @param edge  the edge.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5685
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryAxis.getCategoryStart#588",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getCategoryStart(int, int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double getCategoryStart(int category, int categoryCount, \n                                   Rectangle2D area,\n                                   RectangleEdge edge) {\n\n        double result = 0.0;\n        if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {\n            result = area.getX() + area.getWidth() * getLowerMargin();\n        }\n        else if ((edge == RectangleEdge.LEFT) \n                || (edge == RectangleEdge.RIGHT)) {\n            result = area.getMinY() + area.getHeight() * getLowerMargin();\n        }\n\n        double categorySize = calculateCategorySize(categoryCount, area, edge);\n        double categoryGapWidth = calculateCategoryGapSize(categoryCount, area,\n                edge);\n\n        result = result + category * (categorySize + categoryGapWidth);\n        return result;\n        \n    }\n",
        "begin_line": 588,
        "end_line": 608,
        "comment": "\r\n     * Returns the starting coordinate for the specified category.\r\n     *\r\n     * @param category  the category.\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the data area.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The coordinate.\r\n     * \r\n     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)\r\n     * @see #getCategoryEnd(int, int, Rectangle2D, RectangleEdge)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5685
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryAxis.calculateCategoryGapSize#697",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateCategoryGapSize(int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected double calculateCategoryGapSize(int categoryCount, \n                                              Rectangle2D area,\n                                              RectangleEdge edge) {\n\n        double result = 0.0;\n        double available = 0.0;\n\n        if ((edge == RectangleEdge.TOP) || (edge == RectangleEdge.BOTTOM)) {\n            available = area.getWidth();\n        }\n        else if ((edge == RectangleEdge.LEFT) \n                || (edge == RectangleEdge.RIGHT)) {\n            available = area.getHeight();\n        }\n\n        if (categoryCount > 1) {\n            result = available * getCategoryMargin() / (categoryCount - 1);\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 697,
        "end_line": 718,
        "comment": "\r\n     * Calculates the size (width or height, depending on the location of the \r\n     * axis) of a category gap.\r\n     *\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the area within which the categories will be drawn.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The category gap width.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5685
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryAxis.calculateTextBlockHeight#1083",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.calculateTextBlockHeight(org.jfree.chart.text.TextBlock, org.jfree.chart.axis.CategoryLabelPosition, java.awt.Graphics2D)",
        "snippet": "    protected double calculateTextBlockHeight(TextBlock block, \n                                              CategoryLabelPosition position, \n                                              Graphics2D g2) {\n                                                    \n        RectangleInsets insets = getTickLabelInsets();\n        Size2D size = block.calculateDimensions(g2);\n        Rectangle2D box = new Rectangle2D.Double(0.0, 0.0, size.getWidth(), \n                size.getHeight());\n        Shape rotatedBox = ShapeUtilities.rotateShape(box, position.getAngle(),\n                0.0f, 0.0f);\n        double h = rotatedBox.getBounds2D().getHeight() \n                   + insets.getTop() + insets.getBottom();\n        return h;\n        \n    }\n",
        "begin_line": 1083,
        "end_line": 1097,
        "comment": "\r\n     * A utility method for determining the height of a text block.\r\n     *\r\n     * @param block  the text block.\r\n     * @param position  the label position.\r\n     * @param g2  the graphics device.\r\n     *\r\n     * @return The height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5685
        },
        "num_failing_tests": 8
    },
    {
        "name": "Range.contains#139",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.contains(double)",
        "snippet": "    public boolean contains(double value) {\n        return (value >= this.lower && value <= this.upper);\n    }\n",
        "begin_line": 139,
        "end_line": 141,
        "comment": "\r\n     * Returns <code>true</code> if the range contains the specified value and \r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param value  the value to lookup.\r\n     *\r\n     * @return <code>true</code> if the range contains the specified value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5598
        },
        "num_failing_tests": 18
    },
    {
        "name": "BooleanList.getBoolean#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.getBoolean(int)",
        "snippet": "    public Boolean getBoolean(int index) {\n        return (Boolean) get(index);\n    }\n",
        "begin_line": 72,
        "end_line": 74,
        "comment": "\n     * Returns a {@link Boolean} from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return a {@link Boolean} from the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5539
        },
        "num_failing_tests": 18
    },
    {
        "name": "AbstractRenderer.isSeriesVisible#399",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible(int)",
        "snippet": "    public boolean isSeriesVisible(int series) {\n        boolean result = this.baseSeriesVisible;\n        Boolean b = this.seriesVisibleList.getBoolean(series);\n        if (b != null) {\n            result = b.booleanValue();   \n        }\n        return result;\n    }\n",
        "begin_line": 399,
        "end_line": 406,
        "comment": "\r\n     * Returns a boolean that indicates whether or not the specified series \r\n     * should be drawn.\r\n     * \r\n     * @param series  the series index.\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5539
        },
        "num_failing_tests": 18
    },
    {
        "name": "TextTitle.arrange#440",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)",
        "snippet": "    public Size2D arrange(Graphics2D g2, RectangleConstraint constraint) {\n        RectangleConstraint cc = toContentConstraint(constraint);\n        LengthConstraintType w = cc.getWidthConstraintType();\n        LengthConstraintType h = cc.getHeightConstraintType();\n        Size2D contentSize = null;\n        if (w == LengthConstraintType.NONE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");                 \n            }            \n        }\n        else if (w == LengthConstraintType.RANGE) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                contentSize = arrangeRR(g2, cc.getWidthRange(), \n                        cc.getHeightRange()); \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");                 \n            }\n        }\n        else if (w == LengthConstraintType.FIXED) {\n            if (h == LengthConstraintType.NONE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.RANGE) {\n                throw new RuntimeException(\"Not yet implemented.\"); \n            }\n            else if (h == LengthConstraintType.FIXED) {\n                throw new RuntimeException(\"Not yet implemented.\");                 \n            }\n        }\n        return new Size2D(calculateTotalWidth(contentSize.getWidth()),\n                calculateTotalHeight(contentSize.getHeight()));\n    }\n",
        "begin_line": 440,
        "end_line": 481,
        "comment": "\r\n     * Arranges the contents of the block, within the given constraints, and \r\n     * returns the block size.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param constraint  the constraint (<code>null</code> not permitted).\r\n     * \r\n     * @return The block size (in Java2D units, never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5449
        },
        "num_failing_tests": 14
    },
    {
        "name": "TextTitle.arrangeRR#494",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.arrangeRR(java.awt.Graphics2D, org.jfree.data.Range, org.jfree.data.Range)",
        "snippet": "    protected Size2D arrangeRR(Graphics2D g2, Range widthRange, \n            Range heightRange) {\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {\n            float maxWidth = (float) widthRange.getUpperBound();\n            g2.setFont(this.font);\n            this.content = TextUtilities.createTextBlock(this.text, this.font, \n                    this.paint, maxWidth, new G2TextMeasurer(g2));\n            this.content.setLineAlignment(this.textAlignment);\n            Size2D contentSize = this.content.calculateDimensions(g2);\n            if (this.expandToFitSpace) {\n                return new Size2D(maxWidth, contentSize.getHeight());\n            }\n            else {\n                return contentSize;\n            }\n        }\n        else if (position == RectangleEdge.LEFT || position \n                == RectangleEdge.RIGHT) {\n            float maxWidth = (float) heightRange.getUpperBound();\n            g2.setFont(this.font);\n            this.content = TextUtilities.createTextBlock(this.text, this.font, \n                    this.paint, maxWidth, new G2TextMeasurer(g2));\n            this.content.setLineAlignment(this.textAlignment);\n            Size2D contentSize = this.content.calculateDimensions(g2);\n            \n            // transpose the dimensions, because the title is rotated\n            if (this.expandToFitSpace) {\n                return new Size2D(contentSize.getHeight(), maxWidth);\n            }\n            else {\n                return new Size2D(contentSize.height, contentSize.width);\n            }\n        }\n        else {\n            throw new RuntimeException(\"Unrecognised exception.\");\n        }\n    }\n",
        "begin_line": 494,
        "end_line": 531,
        "comment": "\r\n     * Returns the content size for the title.  This will reflect the fact that\r\n     * a text title positioned on the left or right of a chart will be rotated\r\n     * 90 degrees.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param widthRange  the width range.\r\n     * @param heightRange  the height range.\r\n     * \r\n     * @return The content size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5449
        },
        "num_failing_tests": 14
    },
    {
        "name": "TextTitle.draw#556",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.lang.Object)",
        "snippet": "    public Object draw(Graphics2D g2, Rectangle2D area, Object params) {\n        if (this.content == null) {\n            return null;   \n        }\n        area = trimMargin(area);\n        drawBorder(g2, area);\n        if (this.text.equals(\"\")) {\n            return null;\n        }\n        ChartEntity entity = null;\n        if (params instanceof EntityBlockParams) {\n            EntityBlockParams p = (EntityBlockParams) params;\n            if (p.getGenerateEntities()) {\n                entity = new ChartEntity(area, this.toolTipText, this.urlText);    \n            }\n        }\n        area = trimBorder(area);\n        if (this.backgroundPaint != null) {\n            g2.setPaint(this.backgroundPaint);\n            g2.fill(area);\n        }\n        area = trimPadding(area);\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.TOP || position == RectangleEdge.BOTTOM) {\n            drawHorizontal(g2, area);\n        }\n        else if (position == RectangleEdge.LEFT \n                 || position == RectangleEdge.RIGHT) {\n            drawVertical(g2, area);\n        }\n        BlockResult result = new BlockResult();\n        if (entity != null) {\n            StandardEntityCollection sec = new StandardEntityCollection();\n            sec.add(entity);\n            result.setEntityCollection(sec);\n        }\n        return result;\n    }\n",
        "begin_line": 556,
        "end_line": 593,
        "comment": "\r\n     * Draws the block within the specified area.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area.\r\n     * @param params  if this is an instance of {@link EntityBlockParams} it\r\n     *                is used to determine whether or not an \r\n     *                {@link EntityCollection} is returned by this method.\r\n     * \r\n     * @return An {@link EntityCollection} containing a chart entity for the\r\n     *         title, or <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5449
        },
        "num_failing_tests": 14
    },
    {
        "name": "TextTitle.drawHorizontal#603",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.drawHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D)",
        "snippet": "    protected void drawHorizontal(Graphics2D g2, Rectangle2D area) {\n        Rectangle2D titleArea = (Rectangle2D) area.clone();\n        g2.setFont(this.font);\n        g2.setPaint(this.paint);\n        TextBlockAnchor anchor = null;\n        float x = 0.0f;\n        HorizontalAlignment horizontalAlignment = getHorizontalAlignment();\n        if (horizontalAlignment == HorizontalAlignment.LEFT) {\n            x = (float) titleArea.getX();\n            anchor = TextBlockAnchor.TOP_LEFT;\n        }\n        else if (horizontalAlignment == HorizontalAlignment.RIGHT) {\n            x = (float) titleArea.getMaxX();\n            anchor = TextBlockAnchor.TOP_RIGHT;\n        }\n        else if (horizontalAlignment == HorizontalAlignment.CENTER) {\n            x = (float) titleArea.getCenterX();\n            anchor = TextBlockAnchor.TOP_CENTER;\n        }\n        float y = 0.0f;\n        RectangleEdge position = getPosition();\n        if (position == RectangleEdge.TOP) {\n            y = (float) titleArea.getY();\n        }\n        else if (position == RectangleEdge.BOTTOM) {\n            y = (float) titleArea.getMaxY();\n            if (horizontalAlignment == HorizontalAlignment.LEFT) {\n                anchor = TextBlockAnchor.BOTTOM_LEFT;\n            }\n            else if (horizontalAlignment == HorizontalAlignment.CENTER) {\n                anchor = TextBlockAnchor.BOTTOM_CENTER;\n            }\n            else if (horizontalAlignment == HorizontalAlignment.RIGHT) {\n                anchor = TextBlockAnchor.BOTTOM_RIGHT;\n            }\n        }\n        this.content.draw(g2, x, y, anchor);\n    }\n",
        "begin_line": 603,
        "end_line": 640,
        "comment": "\r\n     * Draws a the title horizontally within the specified area.  This method \r\n     * will be called from the {@link #draw(Graphics2D, Rectangle2D) draw} \r\n     * method.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * @param area  the area for the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5449
        },
        "num_failing_tests": 14
    },
    {
        "name": "TextUtilities.createTextBlock#164",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextUtilities.java",
        "class_name": "org.jfree.chart.text.TextUtilities",
        "signature": "org.jfree.chart.text.TextUtilities.createTextBlock(java.lang.String, java.awt.Font, java.awt.Paint, float, org.jfree.chart.text.TextMeasurer)",
        "snippet": "    public static TextBlock createTextBlock(String text, Font font,\n            Paint paint, float maxWidth, TextMeasurer measurer) {\n        \n        return createTextBlock(text, font, paint, maxWidth, Integer.MAX_VALUE, \n                measurer);\n    }\n",
        "begin_line": 164,
        "end_line": 169,
        "comment": "\n     * Creates a new text block from the given string, breaking the\n     * text into lines so that the <code>maxWidth</code> value is\n     * respected.\n     * \n     * @param text  the text.\n     * @param font  the font.\n     * @param paint  the paint.\n     * @param maxWidth  the maximum width for each line.\n     * @param measurer  the text measurer.\n     * \n     * @return A text block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5449
        },
        "num_failing_tests": 14
    },
    {
        "name": "TextBlock.setLineAlignment#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.setLineAlignment(org.jfree.chart.util.HorizontalAlignment)",
        "snippet": "    public void setLineAlignment(HorizontalAlignment alignment) {\n        if (alignment == null) {\n            throw new IllegalArgumentException(\"Null 'alignment' argument.\");\n        }\n        this.lineAlignment = alignment;   \n    }\n",
        "begin_line": 106,
        "end_line": 111,
        "comment": "\n     * Sets the alignment of the lines of text within the block.\n     * \n     * @param alignment  the alignment (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5449
        },
        "num_failing_tests": 14
    },
    {
        "name": "StrokeList.getStroke#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.getStroke(int)",
        "snippet": "    public Stroke getStroke(int index) {\n        return (Stroke) get(index);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns a {@link Stroke} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5427
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.getLabel#599",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.getLabel()",
        "snippet": "    public String getLabel() {\n        return this.label;\n    }\n",
        "begin_line": 599,
        "end_line": 601,
        "comment": "\r\n     * Returns the label.\r\n     *\r\n     * @return The label (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5427
        },
        "num_failing_tests": 18
    },
    {
        "name": "TextBlock.calculateBounds#189",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.calculateBounds(java.awt.Graphics2D, float, float, org.jfree.chart.text.TextBlockAnchor, float, float, double)",
        "snippet": "    public Shape calculateBounds(Graphics2D g2, float anchorX, float anchorY, \n            TextBlockAnchor anchor, float rotateX, float rotateY, \n            double angle) {\n        \n        Size2D d = calculateDimensions(g2);\n        float[] offsets = calculateOffsets(anchor, d.getWidth(), d.getHeight());\n        Rectangle2D bounds = new Rectangle2D.Double(anchorX + offsets[0], \n                anchorY + offsets[1], d.getWidth(), d.getHeight());\n        Shape rotatedBounds = ShapeUtilities.rotateShape(bounds, angle, \n                rotateX, rotateY);\n        return rotatedBounds;   \n        \n    }\n",
        "begin_line": 189,
        "end_line": 201,
        "comment": "\n     * Returns the bounds of the text block.\n     * \n     * @param g2  the graphics device (<code>null</code> not permitted).\n     * @param anchorX  the x-coordinate for the anchor point.\n     * @param anchorY  the y-coordinate for the anchor point.\n     * @param anchor  the text block anchor (<code>null</code> not permitted).\n     * @param rotateX  the x-coordinate for the rotation point.\n     * @param rotateY  the y-coordinate for the rotation point.\n     * @param angle  the rotation angle.\n     * \n     * @return The bounds.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5394
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryTick.getCategory#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "signature": "org.jfree.chart.axis.CategoryTick.getCategory()",
        "snippet": "    public Comparable getCategory() {\n        return this.category;\n    }\n",
        "begin_line": 93,
        "end_line": 95,
        "comment": "\r\n     * Returns the category.\r\n     * \r\n     * @return The category.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5394
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryTick.getLabel#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryTick.java",
        "class_name": "org.jfree.chart.axis.CategoryTick",
        "signature": "org.jfree.chart.axis.CategoryTick.getLabel()",
        "snippet": "    public TextBlock getLabel() {\n        return this.label;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\r\n     * Returns the label.\r\n     * \r\n     * @return The label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5394
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryLabelPosition.getCategoryAnchor#182",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.getCategoryAnchor()",
        "snippet": "    public RectangleAnchor getCategoryAnchor() {\n        return this.categoryAnchor;\n    }\n",
        "begin_line": 182,
        "end_line": 184,
        "comment": "\r\n     * Returns the item label anchor.\r\n     * \r\n     * @return The item label anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5394
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryAxis.getCategoryEnd#644",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getCategoryEnd(int, int, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double getCategoryEnd(int category, int categoryCount, \n                                 Rectangle2D area, RectangleEdge edge) {\n\n        return getCategoryStart(category, categoryCount, area, edge)\n               + calculateCategorySize(categoryCount, area, edge);\n\n    }\n",
        "begin_line": 644,
        "end_line": 650,
        "comment": "\r\n     * Returns the end coordinate for the specified category.\r\n     *\r\n     * @param category  the category.\r\n     * @param categoryCount  the number of categories.\r\n     * @param area  the data area.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The coordinate.\r\n     * \r\n     * @see #getCategoryStart(int, int, Rectangle2D, RectangleEdge)\r\n     * @see #getCategoryMiddle(int, int, Rectangle2D, RectangleEdge)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5394
        },
        "num_failing_tests": 8
    },
    {
        "name": "CategoryPlot.CategoryPlot#435",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.CategoryPlot(org.jfree.data.category.CategoryDataset, org.jfree.chart.axis.CategoryAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public CategoryPlot(CategoryDataset dataset,\n                        CategoryAxis domainAxis,\n                        ValueAxis rangeAxis,\n                        CategoryItemRenderer renderer) {\n\n        super();\n\n        this.orientation = PlotOrientation.VERTICAL;\n\n        // allocate storage for dataset, axes and renderers\n        this.domainAxes = new ObjectList();\n        this.domainAxisLocations = new ObjectList();\n        this.rangeAxes = new ObjectList();\n        this.rangeAxisLocations = new ObjectList();\n        \n        this.datasetToDomainAxisMap = new ObjectList();\n        this.datasetToRangeAxisMap = new ObjectList();\n\n        this.renderers = new ObjectList();\n\n        this.datasets = new ObjectList();\n        this.datasets.set(0, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n\n        this.axisOffset = RectangleInsets.ZERO_INSETS;\n\n        setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false);\n        setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false);\n\n        this.renderers.set(0, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n\n        this.domainAxes.set(0, domainAxis);\n        this.mapDatasetToDomainAxis(0, 0);\n        if (domainAxis != null) {\n            domainAxis.setPlot(this);\n            domainAxis.addChangeListener(this);\n        }\n        this.drawSharedDomainAxis = false;\n\n        this.rangeAxes.set(0, rangeAxis);\n        this.mapDatasetToRangeAxis(0, 0);\n        if (rangeAxis != null) {\n            rangeAxis.setPlot(this);\n            rangeAxis.addChangeListener(this);\n        }\n        \n        configureDomainAxes();\n        configureRangeAxes();\n\n        this.domainGridlinesVisible = DEFAULT_DOMAIN_GRIDLINES_VISIBLE;\n        this.domainGridlinePosition = CategoryAnchor.MIDDLE;\n        this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.rangeGridlinesVisible = DEFAULT_RANGE_GRIDLINES_VISIBLE;\n        this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE;\n        this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;\n\n        this.foregroundDomainMarkers = new HashMap();\n        this.backgroundDomainMarkers = new HashMap();\n        this.foregroundRangeMarkers = new HashMap();\n        this.backgroundRangeMarkers = new HashMap();\n\n        Marker baseline = new ValueMarker(0.0, new Color(0.8f, 0.8f, 0.8f, \n                0.5f), new BasicStroke(1.0f), new Color(0.85f, 0.85f, 0.95f, \n                0.5f), new BasicStroke(1.0f), 0.6f);\n        addRangeMarker(baseline, Layer.BACKGROUND);\n\n        this.anchorValue = 0.0;\n\n        this.rangeCrosshairVisible = DEFAULT_CROSSHAIR_VISIBLE;\n        this.rangeCrosshairValue = 0.0;\n        this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;\n        this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT;\n        \n        this.annotations = new java.util.ArrayList();\n\n    }\n",
        "begin_line": 435,
        "end_line": 518,
        "comment": "\r\n     * Creates a new plot.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * @param domainAxis  the domain axis (<code>null</code> permitted).\r\n     * @param rangeAxis  the range axis (<code>null</code> permitted).\r\n     * @param renderer  the item renderer (<code>null</code> permitted).\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5345
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendItem.setDatasetIndex#544",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setDatasetIndex(int)",
        "snippet": "    public void setDatasetIndex(int index) {\n        this.datasetIndex = index;\n    }\n",
        "begin_line": 544,
        "end_line": 546,
        "comment": "\r\n     * Sets the dataset index for this legend item.\r\n     * \r\n     * @param index  the index.\r\n     * \r\n     * @since 1.0.2\r\n     * \r\n     * @see #getDatasetIndex()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5322
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.setSeriesKey#568",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setSeriesKey(java.lang.Comparable)",
        "snippet": "    public void setSeriesKey(Comparable key) {\n        this.seriesKey = key;\n    }\n",
        "begin_line": 568,
        "end_line": 570,
        "comment": "\r\n     * Sets the series key.\r\n     * \r\n     * @param key  the series key.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5322
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.setSeriesIndex#590",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setSeriesIndex(int)",
        "snippet": "    public void setSeriesIndex(int index) {\n        this.series = index;\n    }\n",
        "begin_line": 590,
        "end_line": 592,
        "comment": "\r\n     * Sets the series index for this legend item.\r\n     * \r\n     * @param index  the index.\r\n     * \r\n     * @since 1.0.2\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5322
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryPlot.configureDomainAxes#853",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureDomainAxes()",
        "snippet": "    public void configureDomainAxes() {\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 853,
        "end_line": 860,
        "comment": "\r\n     * Configures the domain axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5277
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.getRange#1202",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getRange()",
        "snippet": "    public Range getRange() {\n        return this.range;\n    }\n",
        "begin_line": 1202,
        "end_line": 1204,
        "comment": "\r\n     * Returns the range for the axis.\r\n     *\r\n     * @return The axis range (never <code>null</code>).\r\n     * \r\n     * @see #setRange(Range)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5277
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryAxis.configure#788",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.configure()",
        "snippet": "    public void configure() {\n        // nothing required\n    }\n",
        "begin_line": 788,
        "end_line": 790,
        "comment": "\r\n     * Configures the axis against the current plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5277
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockResult.getEntityCollection#68",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockResult.java",
        "class_name": "org.jfree.chart.block.BlockResult",
        "signature": "org.jfree.chart.block.BlockResult.getEntityCollection()",
        "snippet": "    public EntityCollection getEntityCollection() {\n        return this.entities;   \n    }\n",
        "begin_line": 68,
        "end_line": 70,
        "comment": "\r\n     * Returns the collection of entities from the block.\r\n     * \r\n     * @return The entities.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5276
        },
        "num_failing_tests": 14
    },
    {
        "name": "JFreeChart.createBufferedImage#1365",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int, org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public BufferedImage createBufferedImage(int width, int height, \n                                             ChartRenderingInfo info) {\n        return createBufferedImage(width, height, BufferedImage.TYPE_INT_RGB, \n                info);\n    }\n",
        "begin_line": 1365,
        "end_line": 1369,
        "comment": "\r\n     * Creates and returns a buffered image into which the chart has been drawn.\r\n     *\r\n     * @param width  the width.\r\n     * @param height  the height.\r\n     * @param info  carries back chart state information (<code>null</code> \r\n     *              permitted).\r\n     *\r\n     * @return A buffered image.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5244
        },
        "num_failing_tests": 11
    },
    {
        "name": "JFreeChart.createBufferedImage#1382",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int, int, org.jfree.chart.ChartRenderingInfo)",
        "snippet": "    public BufferedImage createBufferedImage(int width, int height, \n                                             int imageType, \n                                             ChartRenderingInfo info) {\n        BufferedImage image = new BufferedImage(width, height, imageType);\n        Graphics2D g2 = image.createGraphics();\n        draw(g2, new Rectangle2D.Double(0, 0, width, height), null, info);\n        g2.dispose();\n        return image;\n    }\n",
        "begin_line": 1382,
        "end_line": 1390,
        "comment": "\r\n     * Creates and returns a buffered image into which the chart has been drawn.\r\n     *\r\n     * @param width  the width.\r\n     * @param height  the height.\r\n     * @param imageType  the image type.\r\n     * @param info  carries back chart state information (<code>null</code> \r\n     *              permitted).\r\n     *\r\n     * @return A buffered image.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5244
        },
        "num_failing_tests": 11
    },
    {
        "name": "CategoryPlot.getRendererForDataset#1389",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRendererForDataset(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public CategoryItemRenderer getRendererForDataset(CategoryDataset dataset) {\n        CategoryItemRenderer result = null;\n        for (int i = 0; i < this.datasets.size(); i++) {\n            if (this.datasets.get(i) == dataset) {\n                result = (CategoryItemRenderer) this.renderers.get(i);   \n                break;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 1389,
        "end_line": 1398,
        "comment": "\r\n     * Returns the renderer for the specified dataset.  If the dataset doesn't\r\n     * belong to the plot, this method will return <code>null</code>.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @return The renderer (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.524
        },
        "num_failing_tests": 21
    },
    {
        "name": "CategoryPlot.getDataRange#3066",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataRange(org.jfree.chart.axis.ValueAxis)",
        "snippet": "    public Range getDataRange(ValueAxis axis) {\n\n        Range result = null;\n        List mappedDatasets = new ArrayList();\n        \n        int rangeIndex = this.rangeAxes.indexOf(axis);\n        if (rangeIndex >= 0) {\n            mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));\n        }\n        else if (axis == getRangeAxis()) {\n            mappedDatasets.addAll(datasetsMappedToRangeAxis(0));\n        }\n\n        // iterate through the datasets that map to the axis and get the union \n        // of the ranges.\n        Iterator iterator = mappedDatasets.iterator();\n        while (iterator.hasNext()) {\n            CategoryDataset d = (CategoryDataset) iterator.next();\n            CategoryItemRenderer r = getRendererForDataset(d);\n            if (r != null) {\n                result = Range.combine(result, r.findRangeBounds(d));\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 3066,
        "end_line": 3091,
        "comment": "\r\n     * Returns the range of data values that will be plotted against the range \r\n     * axis.  If the dataset is <code>null</code>, this method returns \r\n     * <code>null</code>.\r\n     *\r\n     * @param axis  the axis.\r\n     *\r\n     * @return The data range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.524
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.datasetsMappedToRangeAxis#3135",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetsMappedToRangeAxis(int)",
        "snippet": "    private List datasetsMappedToRangeAxis(int index) {\n        List result = new ArrayList();\n        for (int i = 0; i < this.datasets.size(); i++) {\n            Object dataset = this.datasets.get(i);\n            if (dataset != null) {\n                Integer m = (Integer) this.datasetToRangeAxisMap.get(i);\n                if (m == null) {  // a dataset with no mapping is assigned to \n                                  // axis 0\n                    if (index == 0) { \n                        result.add(dataset);\n                    }\n                }\n                else {\n                    if (m.intValue() == index) {\n                        result.add(dataset);\n                    }\n                }\n            }\n        }\n        return result;    \n    }\n",
        "begin_line": 3135,
        "end_line": 3155,
        "comment": "\r\n     * A utility method that returns a list of datasets that are mapped to a \r\n     * given range axis.\r\n     * \r\n     * @param index  the axis index.\r\n     * \r\n     * @return A list of datasets.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.524
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractRenderer.lookupSeriesPaint#626",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesPaint(int)",
        "snippet": "    public Paint lookupSeriesPaint(int series) {\n\n        // look up the paint list\n        Paint seriesPaint = this.paintList.getPaint(series);\n        if (seriesPaint == null && this.autoPopulateSeriesPaint) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                seriesPaint = supplier.getNextPaint();\n                this.paintList.setPaint(series, seriesPaint);\n            }\n        }\n        if (seriesPaint == null) {\n            seriesPaint = this.basePaint;\n        }\n        return seriesPaint;\n\n    }\n",
        "begin_line": 626,
        "end_line": 642,
        "comment": "\r\n     * Returns the paint used to fill an item drawn by the renderer.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5222
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.LegendItem#284",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.LegendItem(java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, java.awt.Shape, boolean, java.awt.Paint, boolean, java.awt.Paint, java.awt.Stroke, boolean, java.awt.Shape, java.awt.Stroke, java.awt.Paint)",
        "snippet": "    public LegendItem(String label, String description,\n                      String toolTipText, String urlText,\n                      boolean shapeVisible, Shape shape,\n                      boolean shapeFilled, Paint fillPaint, \n                      boolean shapeOutlineVisible, Paint outlinePaint,\n                      Stroke outlineStroke,\n                      boolean lineVisible, Shape line,\n                      Stroke lineStroke, Paint linePaint) {\n        \n        if (label == null) {\n            throw new IllegalArgumentException(\"Null 'label' argument.\");   \n        }\n        if (fillPaint == null) {\n            throw new IllegalArgumentException(\"Null 'fillPaint' argument.\");   \n        }\n        if (lineStroke == null) {\n            throw new IllegalArgumentException(\"Null 'lineStroke' argument.\");\n        }\n        if (outlinePaint == null) {\n            throw new IllegalArgumentException(\"Null 'outlinePaint' argument.\");\n        }\n        if (outlineStroke == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'outlineStroke' argument.\");   \n        }\n        this.label = label;\n        this.attributedLabel = null;\n        this.description = description;\n        this.shapeVisible = shapeVisible;\n        this.shape = shape;\n        this.shapeFilled = shapeFilled;\n        this.fillPaint = fillPaint;\n        this.fillPaintTransformer = new StandardGradientPaintTransformer();\n        this.shapeOutlineVisible = shapeOutlineVisible;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.lineVisible = lineVisible;\n        this.line = line;\n        this.lineStroke = lineStroke;\n        this.linePaint = linePaint;\n        this.toolTipText = toolTipText;\n        this.urlText = urlText;\n    }\n",
        "begin_line": 284,
        "end_line": 326,
        "comment": "\r\n     * Creates a new legend item.\r\n     *\r\n     * @param label  the label (<code>null</code> not permitted).\r\n     * @param description  the description (not currently used, \r\n     *        <code>null</code> permitted).\r\n     * @param toolTipText  the tool tip text (<code>null</code> permitted).\r\n     * @param urlText  the URL text (<code>null</code> permitted).\r\n     * @param shapeVisible  a flag that controls whether or not the shape is \r\n     *                      displayed.\r\n     * @param shape  the shape (<code>null</code> permitted).\r\n     * @param shapeFilled  a flag that controls whether or not the shape is \r\n     *                     filled.\r\n     * @param fillPaint  the fill paint (<code>null</code> not permitted).\r\n     * @param shapeOutlineVisible  a flag that controls whether or not the \r\n     *                             shape is outlined.\r\n     * @param outlinePaint  the outline paint (<code>null</code> not permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> not \r\n     *                       permitted).\r\n     * @param lineVisible  a flag that controls whether or not the line is \r\n     *                     visible.\r\n     * @param line  the line.\r\n     * @param lineStroke  the stroke (<code>null</code> not permitted).\r\n     * @param linePaint  the line paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5222
        },
        "num_failing_tests": 18
    },
    {
        "name": "LegendItem.setDataset#517",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.setDataset(org.jfree.data.general.Dataset)",
        "snippet": "    public void setDataset(Dataset dataset) {\n        this.dataset = dataset;\n    }\n",
        "begin_line": 517,
        "end_line": 519,
        "comment": "\r\n     * Sets the dataset.\r\n     * \r\n     * @param dataset  the dataset.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5222
        },
        "num_failing_tests": 18
    },
    {
        "name": "AbstractCategoryItemRenderer.setPlot#249",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setPlot(org.jfree.chart.plot.CategoryPlot)",
        "snippet": "    public void setPlot(CategoryPlot plot) {\n        if (plot == null) {\n            throw new IllegalArgumentException(\"Null 'plot' argument.\");\n        }\n        this.plot = plot;\n    }\n",
        "begin_line": 249,
        "end_line": 254,
        "comment": "\r\n     * Sets the plot that the renderer has been assigned to.  This method is\r\n     * usually called by the {@link CategoryPlot}, in normal usage you\r\n     * shouldn't need to call this method directly.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     *\r\n     * @see #getPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.518
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.configureRangeAxes#1103",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.configureRangeAxes()",
        "snippet": "    public void configureRangeAxes() {\n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis axis = (ValueAxis) this.rangeAxes.get(i);\n            if (axis != null) {\n                axis.configure();\n            }\n        }\n    }\n",
        "begin_line": 1103,
        "end_line": 1110,
        "comment": "\r\n     * Configures the range axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.518
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.datasetChanged#1812",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.datasetChanged(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    public void datasetChanged(DatasetChangeEvent event) {\n\n        int count = this.rangeAxes.size();\n        for (int axisIndex = 0; axisIndex < count; axisIndex++) {\n            ValueAxis yAxis = getRangeAxis(axisIndex);\n            if (yAxis != null) {\n                yAxis.configure();\n            }\n        }\n        if (getParent() != null) {\n            getParent().datasetChanged(event);\n        }\n        else {\n            PlotChangeEvent e = new PlotChangeEvent(this);\n            e.setType(ChartChangeEventType.DATASET_UPDATED);\n            notifyListeners(e);\n        }\n\n    }\n",
        "begin_line": 1812,
        "end_line": 1830,
        "comment": "\r\n     * Receives notification of a change to the plot's dataset.\r\n     * <P>\r\n     * The range axis bounds will be recalculated if necessary.\r\n     *\r\n     * @param event  information about the event (not used here).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.518
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.getNextPaint#214",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextPaint()",
        "snippet": "    public Paint getNextPaint() {\n        Paint result \n            = this.paintSequence[this.paintIndex % this.paintSequence.length];\n        this.paintIndex++;\n        return result;\n    }\n",
        "begin_line": 214,
        "end_line": 219,
        "comment": "\r\n     * Returns the next paint in the sequence.\r\n     *\r\n     * @return The paint.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5083
        },
        "num_failing_tests": 18
    },
    {
        "name": "SortOrder.SortOrder#51",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.SortOrder(java.lang.String)",
        "snippet": "    private SortOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 51,
        "end_line": 53,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueMarker.ValueMarker#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker(double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    public ValueMarker(double value, Paint paint, Stroke stroke, \n                       Paint outlinePaint, Stroke outlineStroke, float alpha) {\n        super(paint, stroke, paint, stroke, alpha);\n        this.value = value;\n    }\n",
        "begin_line": 93,
        "end_line": 97,
        "comment": "\r\n     * Creates a new value marker.\r\n     * \r\n     * @param value  the value.\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#752",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(AxisLocation location, boolean notify) {\n        // delegate...\n        setDomainAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 752,
        "end_line": 755,
        "comment": "\r\n     * Sets the location of the domain axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the axis location (<code>null</code> not permitted).\r\n     * @param notify  a flag that controls whether listeners are notified.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.setDomainAxisLocation#785",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setDomainAxisLocation(int index, AxisLocation location, \n            boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.domainAxisLocations.set(index, location);\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 785,
        "end_line": 795,
        "comment": "\r\n     * Sets the location for a domain axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     * \r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @since 1.0.5\r\n     * \r\n     * @see #getDomainAxisLocation(int)\r\n     * @see #setRangeAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getRangeAxis#880",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getRangeAxis(int)",
        "snippet": "    public ValueAxis getRangeAxis(int index) {\n        ValueAxis result = null;\n        if (index < this.rangeAxes.size()) {\n            result = (ValueAxis) this.rangeAxes.get(index);\n        }\n        if (result == null) {\n            Plot parent = getParent();\n            if (parent instanceof CategoryPlot) {\n                CategoryPlot cp = (CategoryPlot) parent;\n                result = cp.getRangeAxis(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 880,
        "end_line": 893,
        "comment": "\r\n     * Returns a range axis.\r\n     *\r\n     * @param index  the axis index.\r\n     *\r\n     * @return The axis (<code>null</code> possible).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1009",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(AxisLocation location, boolean notify) {\n        setRangeAxisLocation(0, location, notify);\n    }\n",
        "begin_line": 1009,
        "end_line": 1011,
        "comment": "\r\n     * Sets the location of the range axis and, if requested, sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param location  the location (<code>null</code> not permitted).\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #setDomainAxisLocation(AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.setRangeAxisLocation#1038",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation, boolean)",
        "snippet": "    public void setRangeAxisLocation(int index, AxisLocation location, \n                                     boolean notify) {\n        if (index == 0 && location == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'location' for index 0 not permitted.\");\n        }\n        this.rangeAxisLocations.set(index, location);\n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1038,
        "end_line": 1048,
        "comment": "\r\n     * Sets the location for a range axis and sends a {@link PlotChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param index  the axis index.\r\n     * @param location  the location.\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #getRangeAxisLocation(int)\r\n     * @see #setDomainAxisLocation(int, AxisLocation, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.getDataset#1132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.getDataset(int)",
        "snippet": "    public CategoryDataset getDataset(int index) {\n        CategoryDataset result = null;\n        if (this.datasets.size() > index) {\n            result = (CategoryDataset) this.datasets.get(index);\n        }\n        return result;\n    }\n",
        "begin_line": 1132,
        "end_line": 1138,
        "comment": "\r\n     * Returns the dataset at the given index.\r\n     *\r\n     * @param index  the dataset index.\r\n     *\r\n     * @return The dataset (possibly <code>null</code>).\r\n     * \r\n     * @see #setDataset(int, CategoryDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.mapDatasetToDomainAxis#1199",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis(int, int)",
        "snippet": "    public void mapDatasetToDomainAxis(int index, int axisIndex) {\n        this.datasetToDomainAxisMap.set(index, new Integer(axisIndex));  \n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1199,
        "end_line": 1203,
        "comment": "\r\n     * Maps a dataset to a particular domain axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getDomainAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.mapDatasetToRangeAxis#1232",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis(int, int)",
        "snippet": "    public void mapDatasetToRangeAxis(int index, int axisIndex) {\n        this.datasetToRangeAxisMap.set(index, new Integer(axisIndex));\n        // fake a dataset change event to update axes...\n        datasetChanged(new DatasetChangeEvent(this, getDataset(index)));  \n    }\n",
        "begin_line": 1232,
        "end_line": 1236,
        "comment": "\r\n     * Maps a dataset to a particular range axis.\r\n     * \r\n     * @param index  the dataset index (zero-based).\r\n     * @param axisIndex  the axis index (zero-based).\r\n     * \r\n     * @see #getRangeAxisForDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.addRangeMarker#2045",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(Marker marker, Layer layer) {\n        addRangeMarker(0, marker, layer);\n    }\n",
        "begin_line": 2045,
        "end_line": 2047,
        "comment": "\r\n     * Adds a marker for display against the range axis and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.  Typically a marker \r\n     * will be drawn by the renderer as a line perpendicular to the range axis, \r\n     * however this is entirely up to the renderer.\r\n     *\r\n     * @param marker  the marker (<code>null</code> not permitted).\r\n     * @param layer  the layer (foreground or background) (<code>null</code> \r\n     *               not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryPlot.addRangeMarker#2059",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.chart.util.Layer)",
        "snippet": "    public void addRangeMarker(int index, Marker marker, Layer layer) {\n        Collection markers;\n        if (layer == Layer.FOREGROUND) {\n            markers = (Collection) this.foregroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.foregroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);\n        }\n        else if (layer == Layer.BACKGROUND) {\n            markers = (Collection) this.backgroundRangeMarkers.get(\n                    new Integer(index));\n            if (markers == null) {\n                markers = new java.util.ArrayList();\n                this.backgroundRangeMarkers.put(new Integer(index), markers);\n            }\n            markers.add(marker);            \n        }\n        marker.addChangeListener(this);\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 2059,
        "end_line": 2081,
        "comment": "\r\n     * Adds a marker for display by a particular renderer.\r\n     * <P>\r\n     * Typically a marker will be drawn by the renderer as a line perpendicular\r\n     * to a range axis, however this is entirely up to the renderer.\r\n     *\r\n     * @param index  the renderer index.\r\n     * @param marker  the marker.\r\n     * @param layer  the layer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.5
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.getDrawingSupplier#604",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getDrawingSupplier()",
        "snippet": "    public DrawingSupplier getDrawingSupplier() {\n        DrawingSupplier result = null;\n        Plot p = getParent();\n        if (p != null) {\n            result = p.getDrawingSupplier();\n        }\n        else {\n            result = this.drawingSupplier;\n        }\n        return result;\n    }\n",
        "begin_line": 604,
        "end_line": 614,
        "comment": "\r\n     * Returns the drawing supplier for the plot.\r\n     *\r\n     * @return The drawing supplier (possibly <code>null</code>).\r\n     * \r\n     * @see #setDrawingSupplier(DrawingSupplier)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4996
        },
        "num_failing_tests": 18
    },
    {
        "name": "PaintList.getPaint#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.getPaint(int)",
        "snippet": "    public Paint getPaint(int index) {\n        return (Paint) get(index);\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Returns a {@link Paint} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4954
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryLabelWidthType.CategoryLabelWidthType#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.CategoryLabelWidthType(java.lang.String)",
        "snippet": "    private CategoryLabelWidthType(String name) {\n        if (name == null) {\n            throw new IllegalArgumentException(\"Null 'name' argument.\");   \n        }\n        this.name = name;\n    }\n",
        "begin_line": 74,
        "end_line": 79,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPositions.createUpRotationLabelPositions#149",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(double)",
        "snippet": "    public static CategoryLabelPositions createUpRotationLabelPositions(\n            double angle) {\n        return new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_LEFT, \n                TextAnchor.BOTTOM_LEFT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_RIGHT, \n                TextAnchor.TOP_RIGHT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.BOTTOM_RIGHT, \n                TextAnchor.BOTTOM_RIGHT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.TOP_LEFT, \n                TextAnchor.TOP_LEFT, -angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ) // RIGHT\n        );\n    }\n",
        "begin_line": 149,
        "end_line": 173,
        "comment": "\r\n     * Creates a new instance where the category labels angled upwards by the \r\n     * specified amount.\r\n     * \r\n     * @param angle  the rotation angle (should be < Math.PI / 2.0).\r\n     * \r\n     * @return A category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPositions.createDownRotationLabelPositions#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions(double)",
        "snippet": "    public static CategoryLabelPositions createDownRotationLabelPositions(\n            double angle) {\n        return new CategoryLabelPositions(\n            new CategoryLabelPosition(\n                RectangleAnchor.BOTTOM, TextBlockAnchor.BOTTOM_RIGHT, \n                TextAnchor.BOTTOM_RIGHT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // TOP\n            new CategoryLabelPosition(\n                RectangleAnchor.TOP, TextBlockAnchor.TOP_LEFT, \n                TextAnchor.TOP_LEFT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // BOTTOM\n            new CategoryLabelPosition(\n                RectangleAnchor.RIGHT, TextBlockAnchor.TOP_RIGHT, \n                TextAnchor.TOP_RIGHT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ), // LEFT\n            new CategoryLabelPosition(\n                RectangleAnchor.LEFT, TextBlockAnchor.BOTTOM_LEFT, \n                TextAnchor.BOTTOM_LEFT, angle,\n                CategoryLabelWidthType.RANGE, 0.50f\n            ) // RIGHT\n        );\n    }\n",
        "begin_line": 183,
        "end_line": 207,
        "comment": "\r\n     * Creates a new instance where the category labels angled downwards by the\r\n     * specified amount.\r\n     * \r\n     * @param angle  the rotation angle (should be < Math.PI / 2.0).\r\n     * \r\n     * @return A category label position specification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPositions.CategoryLabelPositions#255",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.CategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition)",
        "snippet": "    public CategoryLabelPositions(CategoryLabelPosition top,\n                                  CategoryLabelPosition bottom,\n                                  CategoryLabelPosition left,\n                                  CategoryLabelPosition right) {\n        \n        if (top == null) {\n            throw new IllegalArgumentException(\"Null 'top' argument.\");\n        }\n        if (bottom == null) {\n            throw new IllegalArgumentException(\"Null 'bottom' argument.\");\n        }\n        if (left == null) {\n            throw new IllegalArgumentException(\"Null 'left' argument.\");\n        }\n        if (right == null) {\n            throw new IllegalArgumentException(\"Null 'right' argument.\");\n        }\n        \n        this.positionForAxisAtTop = top;\n        this.positionForAxisAtBottom = bottom;\n        this.positionForAxisAtLeft = left;\n        this.positionForAxisAtRight = right;\n    \n    }\n",
        "begin_line": 255,
        "end_line": 278,
        "comment": "\r\n     * Creates a new position specification.\r\n     * \r\n     * @param top  the label position info used when an axis is at the top \r\n     *             (<code>null</code> not permitted).\r\n     * @param bottom  the label position info used when an axis is at the \r\n     *                bottom (<code>null</code> not permitted).\r\n     * @param left  the label position info used when an axis is at the left \r\n     *              (<code>null</code> not permitted).\r\n     * @param right  the label position info used when an axis is at the right \r\n     *               (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#103",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor) {\n        // argument checking delegated...\n        this(categoryAnchor, labelAnchor, TextAnchor.CENTER, 0.0, \n                CategoryLabelWidthType.CATEGORY, 0.95f);\n    }\n",
        "begin_line": 103,
        "end_line": 108,
        "comment": "\r\n     * Creates a new category label position record.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#120",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.axis.CategoryLabelWidthType, float)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor,\n                                 CategoryLabelWidthType widthType,\n                                 float widthRatio) {\n        // argument checking delegated...\n        this(categoryAnchor, labelAnchor, TextAnchor.CENTER, 0.0, widthType, \n                widthRatio);\n    }\n",
        "begin_line": 120,
        "end_line": 127,
        "comment": "\r\n     * Creates a new category label position record.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     * @param widthType  the width type (<code>null</code> not permitted).\r\n     * @param widthRatio  the maximum label width as a percentage (of the \r\n     *                    category space or the range space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryLabelPosition.CategoryLabelPosition#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.CategoryLabelPosition(org.jfree.chart.util.RectangleAnchor, org.jfree.chart.text.TextBlockAnchor, org.jfree.chart.text.TextAnchor, double, org.jfree.chart.axis.CategoryLabelWidthType, float)",
        "snippet": "    public CategoryLabelPosition(RectangleAnchor categoryAnchor, \n                                 TextBlockAnchor labelAnchor,\n                                 TextAnchor rotationAnchor,\n                                 double angle,\n                                 CategoryLabelWidthType widthType,\n                                 float widthRatio) {\n        \n        if (categoryAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'categoryAnchor' argument.\");\n        }\n        if (labelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'labelAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n        if (widthType == null) {\n            throw new IllegalArgumentException(\"Null 'widthType' argument.\");   \n        }\n        \n        this.categoryAnchor = categoryAnchor;\n        this.labelAnchor = labelAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n        this.widthType = widthType;\n        this.widthRatio = widthRatio;\n    \n    }\n",
        "begin_line": 145,
        "end_line": 175,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point \r\n     * relative to the data item (dot, bar or other visual item) on a chart.  \r\n     * The item label is aligned by aligning the text anchor with the item \r\n     * label anchor.\r\n     * \r\n     * @param categoryAnchor  the category anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param labelAnchor  the label anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the rotation angle (<code>null</code> not permitted).\r\n     * @param widthType  the width type (<code>null</code> not permitted).\r\n     * @param widthRatio  the maximum label width as a percentage (of the \r\n     *                    category space or the range space).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryAxis.CategoryAxis#195",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.CategoryAxis(java.lang.String)",
        "snippet": "    public CategoryAxis(String label) {\n\n        super(label);\n\n        this.lowerMargin = DEFAULT_AXIS_MARGIN;\n        this.upperMargin = DEFAULT_AXIS_MARGIN;\n        this.categoryMargin = DEFAULT_CATEGORY_MARGIN;\n        this.maximumCategoryLabelLines = 1;\n        this.maximumCategoryLabelWidthRatio = 0.0f;\n        \n        setTickMarksVisible(false);  // not supported by this axis type yet\n        \n        this.categoryLabelPositionOffset = 4;\n        this.categoryLabelPositions = CategoryLabelPositions.STANDARD;\n        this.tickLabelFontMap = new HashMap();\n        this.tickLabelPaintMap = new HashMap();\n        this.categoryLabelToolTips = new HashMap();\n        \n    }\n",
        "begin_line": 195,
        "end_line": 213,
        "comment": "\r\n     * Constructs a category axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.setTickMarksVisible#763",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setTickMarksVisible(boolean)",
        "snippet": "    public void setTickMarksVisible(boolean flag) {\n        if (flag != this.tickMarksVisible) {\n            this.tickMarksVisible = flag;\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 763,
        "end_line": 768,
        "comment": "\r\n     * Sets the flag that indicates whether or not the tick marks are showing\r\n     * and sends an {@link AxisChangeEvent} to all registered listeners.\r\n     *\r\n     * @param flag  the flag.\r\n     * \r\n     * @see #isTickMarksVisible()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4838
        },
        "num_failing_tests": 22
    },
    {
        "name": "PaintList.setPaint#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.setPaint(int, java.awt.Paint)",
        "snippet": "    public void setPaint(int index, Paint paint) {\n        set(index, paint);\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\n     * Sets the {@link Paint} for an item in the list.  The list is expanded \n     * if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param paint  the {@link Paint}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4835
        },
        "num_failing_tests": 18
    },
    {
        "name": "CategoryAnchor.CategoryAnchor#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.CategoryAnchor(java.lang.String)",
        "snippet": "    private CategoryAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4787
        },
        "num_failing_tests": 22
    },
    {
        "name": "LengthAdjustmentType.LengthAdjustmentType#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.LengthAdjustmentType(java.lang.String)",
        "snippet": "    private LengthAdjustmentType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4577
        },
        "num_failing_tests": 22
    },
    {
        "name": "Marker.Marker#172",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker(java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    protected Marker(Paint paint, Stroke stroke, \n                     Paint outlinePaint, Stroke outlineStroke, \n                     float alpha) {\n\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (alpha < 0.0f || alpha > 1.0f)\n            throw new IllegalArgumentException(\n                    \"The 'alpha' value must be in the range 0.0f to 1.0f\");\n        \n        this.paint = paint;\n        this.stroke = stroke;\n        this.outlinePaint = outlinePaint;\n        this.outlineStroke = outlineStroke;\n        this.alpha = alpha;\n        \n        this.labelFont = new Font(\"SansSerif\", Font.PLAIN, 9);\n        this.labelPaint = Color.black;\n        this.labelAnchor = RectangleAnchor.TOP_LEFT;\n        this.labelOffset = new RectangleInsets(3.0, 3.0, 3.0, 3.0);\n        this.labelOffsetType = LengthAdjustmentType.CONTRACT;\n        this.labelTextAnchor = TextAnchor.CENTER;\n        \n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 172,
        "end_line": 200,
        "comment": "\r\n     * Constructs a new marker.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * @param stroke  the stroke (<code>null</code> not permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> permitted).\r\n     * @param alpha  the alpha transparency (must be in the range 0.0f to \r\n     *     1.0f).\r\n     *     \r\n     * @throws IllegalArgumentException if <code>paint</code> or \r\n     *     <code>stroke</code> is <code>null</code>, or <code>alpha</code> is \r\n     *     not in the specified range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4577
        },
        "num_failing_tests": 22
    },
    {
        "name": "Marker.addChangeListener#532",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.addChangeListener(org.jfree.chart.event.MarkerChangeListener)",
        "snippet": "    public void addChangeListener(MarkerChangeListener listener) {\n        this.listenerList.add(MarkerChangeListener.class, listener);\n    }\n",
        "begin_line": 532,
        "end_line": 534,
        "comment": "\r\n     * Registers an object for notification of changes to the marker.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4577
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultCategoryDataset.getRowKey#125",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\r\n     * Returns a row key.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     *\r\n     * @return The row key.\r\n     * \r\n     * @see #getRowIndex(Comparable)\r\n     * @see #getRowKeys()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4556
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValues2D.getRowKey#168",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        return (Comparable) this.rowKeys.get(row);\n    }\n",
        "begin_line": 168,
        "end_line": 170,
        "comment": "\r\n     * Returns the key for a given row.\r\n     *\r\n     * @param row  the row index (in the range 0 to {@link #getRowCount()} - 1).\r\n     *\r\n     * @return The row key.\r\n     * \r\n     * @see #getRowIndex(Comparable)\r\n     * @see #getColumnKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4556
        },
        "num_failing_tests": 13
    },
    {
        "name": "DatasetUtilities.findRangeBounds#724",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public static Range findRangeBounds(CategoryDataset dataset) {\n        return findRangeBounds(dataset, true);\n    }\n",
        "begin_line": 724,
        "end_line": 726,
        "comment": "\r\n     * Returns the range of values in the range for the dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     *\r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4518
        },
        "num_failing_tests": 16
    },
    {
        "name": "DatasetUtilities.findRangeBounds#737",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
        "snippet": "    public static Range findRangeBounds(CategoryDataset dataset, \n                                        boolean includeInterval) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        Range result = null;\n        if (dataset instanceof RangeInfo) {\n            RangeInfo info = (RangeInfo) dataset;\n            result = info.getRangeBounds(includeInterval);\n        }\n        else {\n            result = iterateCategoryRangeBounds(dataset, includeInterval);\n        }\n        return result;\n    }\n",
        "begin_line": 737,
        "end_line": 751,
        "comment": "\r\n     * Returns the range of values in the range for the dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         y-interval is taken into account.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4518
        },
        "num_failing_tests": 16
    },
    {
        "name": "Layer.Layer#46",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/Layer.java",
        "class_name": "org.jfree.chart.util.Layer",
        "signature": "org.jfree.chart.util.Layer.Layer(java.lang.String)",
        "snippet": "    private Layer(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 46,
        "end_line": 48,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4393
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextBlockAnchor.TextBlockAnchor#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "signature": "org.jfree.chart.text.TextBlockAnchor.TextBlockAnchor(java.lang.String)",
        "snippet": "    private TextBlockAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4355
        },
        "num_failing_tests": 22
    },
    {
        "name": "CategoryAxis.getCategoryMargin#274",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.getCategoryMargin()",
        "snippet": "    public double getCategoryMargin() {\n        return this.categoryMargin;\n    }\n",
        "begin_line": 274,
        "end_line": 276,
        "comment": "\r\n     * Returns the category margin.\r\n     *\r\n     * @return The margin.\r\n     * \r\n     * @see #setCategoryMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4264
        },
        "num_failing_tests": 4
    },
    {
        "name": "DefaultCategoryDataset.getColumnCount#97",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n",
        "begin_line": 97,
        "end_line": 99,
        "comment": "\r\n     * Returns the number of columns in the table.\r\n     *\r\n     * @return The column count.\r\n     * \r\n     * @see #getRowCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4231
        },
        "num_failing_tests": 16
    },
    {
        "name": "DefaultKeyedValues2D.getColumnCount#129",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.columnKeys.size();\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\r\n     * Returns the column count.\r\n     *\r\n     * @return The column count.\r\n     * \r\n     * @see #getRowCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4231
        },
        "num_failing_tests": 16
    },
    {
        "name": "Title.setPosition#217",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.setPosition(org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public void setPosition(RectangleEdge position) {\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (this.position != position) {\n            this.position = position;\n            notifyListeners(new TitleChangeEvent(this));\n        }\n    }\n",
        "begin_line": 217,
        "end_line": 225,
        "comment": "\r\n     * Sets the position for the title and sends a {@link TitleChangeEvent} to \r\n     * all registered listeners.\r\n     *\r\n     * @param position  the position (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4229
        },
        "num_failing_tests": 22
    },
    {
        "name": "LineBorder.LineBorder#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder()",
        "snippet": "    public LineBorder() {\n        this(Color.black, new BasicStroke(1.0f), new RectangleInsets(1.0, 1.0, \n                1.0, 1.0));\n    }\n",
        "begin_line": 83,
        "end_line": 86,
        "comment": "\r\n     * Creates a default border.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4229
        },
        "num_failing_tests": 22
    },
    {
        "name": "LineBorder.LineBorder#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.LineBorder(java.awt.Paint, java.awt.Stroke, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public LineBorder(Paint paint, Stroke stroke, RectangleInsets insets) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        if (stroke == null) {\n            throw new IllegalArgumentException(\"Null 'stroke' argument.\");\n        }\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        this.paint = paint;\n        this.stroke = stroke;\n        this.insets = insets;\n    }  \n",
        "begin_line": 95,
        "end_line": 108,
        "comment": "\r\n     * Creates a new border with the specified color.\r\n     * \r\n     * @param paint  the color (<code>null</code> not permitted).\r\n     * @param stroke  the border stroke (<code>null</code> not permitted).\r\n     * @param insets  the insets (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4229
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.setMargin#210",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setMargin(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setMargin(RectangleInsets margin) {\n        if (margin == null) {\n            throw new IllegalArgumentException(\"Null 'margin' argument.\");   \n        }\n        this.margin = margin;\n    }\n",
        "begin_line": 210,
        "end_line": 215,
        "comment": "\r\n     * Sets the margin (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param margin  the margin (<code>null</code> not permitted).\r\n     * \r\n     * @see #getMargin()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4229
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.setFrame#252",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setFrame(org.jfree.chart.block.BlockFrame)",
        "snippet": "    public void setFrame(BlockFrame frame) {\n        if (frame == null) {\n            throw new IllegalArgumentException(\"Null 'frame' argument.\");   \n        }\n        this.frame = frame;\n    }\n",
        "begin_line": 252,
        "end_line": 257,
        "comment": "\r\n     * Sets the frame (or border).\r\n     * \r\n     * @param frame  the frame (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.5\r\n     * @see #getFrame()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4229
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChart.JFreeChart#363",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(java.lang.String, java.awt.Font, org.jfree.chart.plot.Plot, boolean)",
        "snippet": "    public JFreeChart(String title, Font titleFont, Plot plot, \n                      boolean createLegend) {\n\n        if (plot == null) {\n            throw new NullPointerException(\"Null 'plot' argument.\");\n        }\n\n        // create storage for listeners...\n        this.progressListeners = new EventListenerList();\n        this.changeListeners = new EventListenerList();\n        this.notify = true;  // default is to notify listeners when the \n                             // chart changes\n\n        this.renderingHints = new RenderingHints(\n                RenderingHints.KEY_ANTIALIASING, \n                RenderingHints.VALUE_ANTIALIAS_ON);\n\n        this.borderVisible = false;\n        this.borderStroke = new BasicStroke(1.0f);\n        this.borderPaint = Color.black;\n\n        this.padding = RectangleInsets.ZERO_INSETS;\n        \n        this.plot = plot;\n        plot.addChangeListener(this);\n\n        this.subtitles = new ArrayList();\n\n        // create a legend, if requested...\n        if (createLegend) {\n            LegendTitle legend = new LegendTitle(this.plot);\n            legend.setMargin(new RectangleInsets(1.0, 1.0, 1.0, 1.0));\n            legend.setFrame(new LineBorder());\n            legend.setBackgroundPaint(Color.white);\n            legend.setPosition(RectangleEdge.BOTTOM);\n            this.subtitles.add(legend);\n            legend.addChangeListener(this);\n        }\n\n        // add the chart title, if one has been specified...\n        if (title != null) {\n            if (titleFont == null) {\n                titleFont = DEFAULT_TITLE_FONT;\n            }\n            this.title = new TextTitle(title, titleFont);\n            this.title.addChangeListener(this);\n        }\n\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n\n        this.backgroundImage = DEFAULT_BACKGROUND_IMAGE;\n        this.backgroundImageAlignment = DEFAULT_BACKGROUND_IMAGE_ALIGNMENT;\n        this.backgroundImageAlpha = DEFAULT_BACKGROUND_IMAGE_ALPHA;\n\n    }\n",
        "begin_line": 363,
        "end_line": 417,
        "comment": "\r\n     * Creates a new chart with the given title and plot.  The \r\n     * <code>createLegend</code> argument specifies whether or not a legend\r\n     * should be added to the chart.  \r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range \r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param titleFont  the font for displaying the chart title \r\n     *                   (<code>null</code> permitted).\r\n     * @param plot  controller of the visual representation of the data \r\n     *              (<code>null</code> not permitted).\r\n     * @param createLegend  a flag indicating whether or not a legend should   \r\n     *                      be created for the chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4229
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendTitle.setBackgroundPaint#230",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.setBackgroundPaint(java.awt.Paint)",
        "snippet": "    public void setBackgroundPaint(Paint paint) {\n        this.backgroundPaint = paint;   \n        notifyListeners(new TitleChangeEvent(this));\n    }\n",
        "begin_line": 230,
        "end_line": 233,
        "comment": "\r\n     * Sets the background paint for the legend and sends a \r\n     * {@link TitleChangeEvent} to all registered listeners.\r\n     * \r\n     * @param paint  the paint (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4195
        },
        "num_failing_tests": 22
    },
    {
        "name": "Title.notifyListeners#358",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.notifyListeners(org.jfree.chart.event.TitleChangeEvent)",
        "snippet": "    protected void notifyListeners(TitleChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.listenerList.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == TitleChangeListener.class) {\n                    ((TitleChangeListener) listeners[i + 1]).titleChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 358,
        "end_line": 368,
        "comment": "\r\n     * Notifies all registered listeners that the chart title has changed in \r\n     * some way.\r\n     *\r\n     * @param event  an object that contains information about the change to \r\n     *               the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4179
        },
        "num_failing_tests": 22
    },
    {
        "name": "TitleChangeEvent.TitleChangeEvent#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/TitleChangeEvent.java",
        "class_name": "org.jfree.chart.event.TitleChangeEvent",
        "signature": "org.jfree.chart.event.TitleChangeEvent.TitleChangeEvent(org.jfree.chart.title.Title)",
        "snippet": "    public TitleChangeEvent(Title title) {\n        super(title);\n        this.title = title;\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\r\n     * Default constructor.\r\n     *\r\n     * @param title  the chart title that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4179
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendTitle.LegendTitle#163",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource)",
        "snippet": "    public LegendTitle(LegendItemSource source) {\n        this(source, new FlowArrangement(), new ColumnArrangement());\n    }\n",
        "begin_line": 163,
        "end_line": 165,
        "comment": "\r\n     * Constructs a new (empty) legend for the specified source.\r\n     * \r\n     * @param source  the source.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4162
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendTitle.LegendTitle#176",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.LegendTitle(org.jfree.chart.LegendItemSource, org.jfree.chart.block.Arrangement, org.jfree.chart.block.Arrangement)",
        "snippet": "    public LegendTitle(LegendItemSource source, \n                       Arrangement hLayout, Arrangement vLayout) {\n        this.sources = new LegendItemSource[] {source};\n        this.items = new BlockContainer(hLayout);\n        this.hLayout = hLayout;\n        this.vLayout = vLayout;\n        this.backgroundPaint = null;  \n        this.legendItemGraphicEdge = RectangleEdge.LEFT;\n        this.legendItemGraphicAnchor = RectangleAnchor.CENTER;\n        this.legendItemGraphicLocation = RectangleAnchor.CENTER;\n        this.legendItemGraphicPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n        this.itemFont = DEFAULT_ITEM_FONT;\n        this.itemPaint = DEFAULT_ITEM_PAINT;\n        this.itemLabelPadding = new RectangleInsets(2.0, 2.0, 2.0, 2.0);\n    }\n",
        "begin_line": 176,
        "end_line": 190,
        "comment": "\r\n     * Creates a new legend title with the specified arrangement.\r\n     * \r\n     * @param source  the source.\r\n     * @param hLayout  the horizontal item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     * @param vLayout  the vertical item arrangement (<code>null</code> not\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4162
        },
        "num_failing_tests": 22
    },
    {
        "name": "FlowArrangement.FlowArrangement#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement()",
        "snippet": "    public FlowArrangement() {   \n        this(HorizontalAlignment.CENTER, VerticalAlignment.CENTER, 2.0, 2.0);\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4162
        },
        "num_failing_tests": 22
    },
    {
        "name": "FlowArrangement.FlowArrangement#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.FlowArrangement(org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, double, double)",
        "snippet": "    public FlowArrangement(HorizontalAlignment hAlign, VerticalAlignment vAlign,\n                           double hGap, double vGap) {   \n        this.horizontalAlignment = hAlign;\n        this.verticalAlignment = vAlign;\n        this.horizontalGap = hGap;\n        this.verticalGap = vGap;\n    }\n",
        "begin_line": 93,
        "end_line": 99,
        "comment": "\r\n     * Creates a new instance.\r\n     * \r\n     * @param hAlign  the horizontal alignment (currently ignored).\r\n     * @param vAlign  the vertical alignment (currently ignored).\r\n     * @param hGap  the horizontal gap.\r\n     * @param vGap  the vertical gap.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4162
        },
        "num_failing_tests": 22
    },
    {
        "name": "ColumnArrangement.ColumnArrangement#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "signature": "org.jfree.chart.block.ColumnArrangement.ColumnArrangement()",
        "snippet": "    public ColumnArrangement() {   \n    }\n",
        "begin_line": 80,
        "end_line": 81,
        "comment": "\r\n     * Creates a new instance.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4162
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockContainer.BlockContainer#97",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockContainer.java",
        "class_name": "org.jfree.chart.block.BlockContainer",
        "signature": "org.jfree.chart.block.BlockContainer.BlockContainer(org.jfree.chart.block.Arrangement)",
        "snippet": "    public BlockContainer(Arrangement arrangement) {\n        if (arrangement == null) {\n            throw new IllegalArgumentException(\"Null 'arrangement' argument.\");\n        }\n        this.arrangement = arrangement;\n        this.blocks = new ArrayList();\n    }    \n",
        "begin_line": 97,
        "end_line": 103,
        "comment": "\r\n     * Creates a new instance with the specified arrangement.\r\n     * \r\n     * @param arrangement  the arrangement manager (<code>null</code> not \r\n     *                     permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4162
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.autoAdjustRange#420",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.autoAdjustRange()",
        "snippet": "    protected void autoAdjustRange() {\n\n        Plot plot = getPlot();\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                r = getDefaultAutoRange();\n            }\n            \n            double upper = r.getUpperBound();\n            double lower = r.getLowerBound();\n            if (this.rangeType == RangeType.POSITIVE) {\n                lower = Math.max(0.0, lower);\n                upper = Math.max(0.0, upper);\n            }\n            else if (this.rangeType == RangeType.NEGATIVE) {\n                lower = Math.min(0.0, lower);\n                upper = Math.min(0.0, upper);                   \n            }\n            \n            if (getAutoRangeIncludesZero()) {\n                lower = Math.min(lower, 0.0);\n                upper = Math.max(upper, 0.0);\n            }\n            double range = upper - lower;\n\n            // if fixed auto range, then derive lower bound...\n            double fixedAutoRange = getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = upper - fixedAutoRange;\n            }\n            else {\n                // ensure the autorange is at least <minRange> in size...\n                double minRange = getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    double expand = (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                    if (lower == upper) { // see bug report 1549218\n                        double adjust = Math.abs(lower) / 10.0;\n                        lower = lower - adjust;\n                        upper = upper + adjust;\n                    }\n                    if (this.rangeType == RangeType.POSITIVE) {\n                        if (lower < 0.0) {\n                            upper = upper - lower;\n                            lower = 0.0;\n                        }\n                    }\n                    else if (this.rangeType == RangeType.NEGATIVE) {\n                        if (upper > 0.0) {\n                            lower = lower - upper;\n                            upper = 0.0;\n                        }\n                    }\n                }\n\n                if (getAutoRangeStickyZero()) {\n                    if (upper <= 0.0) {\n                        upper = Math.min(0.0, upper + getUpperMargin() * range);\n                    }\n                    else {\n                        upper = upper + getUpperMargin() * range;\n                    }\n                    if (lower >= 0.0) {\n                        lower = Math.max(0.0, lower - getLowerMargin() * range);\n                    }\n                    else {\n                        lower = lower - getLowerMargin() * range;\n                    }\n                }\n                else {\n                    upper = upper + getUpperMargin() * range;\n                    lower = lower - getLowerMargin() * range;\n                }\n            }\n\n            setRange(new Range(lower, upper), false, false);\n        }\n\n    }\n",
        "begin_line": 420,
        "end_line": 506,
        "comment": "\r\n     * Rescales the axis to ensure that all data is visible.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.415
        },
        "num_failing_tests": 20
    },
    {
        "name": "Title.Title#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title()",
        "snippet": "    protected Title() {\n        this(Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT,\n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 132,
        "end_line": 136,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4098
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.findMaximumTickLabelHeight#812",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.findMaximumTickLabelHeight(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
        "snippet": "    protected double findMaximumTickLabelHeight(List ticks,\n                                                Graphics2D g2, \n                                                Rectangle2D drawArea, \n                                                boolean vertical) {\n                                                    \n        RectangleInsets insets = getTickLabelInsets();\n        Font font = getTickLabelFont();\n        double maxHeight = 0.0;\n        if (vertical) {\n            FontMetrics fm = g2.getFontMetrics(font);\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                Tick tick = (Tick) iterator.next();\n                Rectangle2D labelBounds = TextUtilities.getTextBounds(\n                        tick.getText(), g2, fm);\n                if (labelBounds.getWidth() + insets.getTop() \n                        + insets.getBottom() > maxHeight) {\n                    maxHeight = labelBounds.getWidth() \n                                + insets.getTop() + insets.getBottom();\n                }\n            }\n        }\n        else {\n            LineMetrics metrics = font.getLineMetrics(\"ABCxyz\", \n                    g2.getFontRenderContext());\n            maxHeight = metrics.getHeight() \n                        + insets.getTop() + insets.getBottom();\n        }\n        return maxHeight;\n        \n    }\n",
        "begin_line": 812,
        "end_line": 842,
        "comment": "\r\n     * A utility method for determining the height of the tallest tick label.\r\n     *\r\n     * @param ticks  the ticks.\r\n     * @param g2  the graphics device.\r\n     * @param drawArea  the area within which the plot and axes should be drawn.\r\n     * @param vertical  a flag that indicates whether or not the tick labels \r\n     *                  are 'vertical'.\r\n     *\r\n     * @return The height of the tallest tick label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 11
    },
    {
        "name": "ValueAxis.findMaximumTickLabelWidth#855",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.findMaximumTickLabelWidth(java.util.List, java.awt.Graphics2D, java.awt.geom.Rectangle2D, boolean)",
        "snippet": "    protected double findMaximumTickLabelWidth(List ticks, \n                                               Graphics2D g2, \n                                               Rectangle2D drawArea, \n                                               boolean vertical) {\n                                                   \n        RectangleInsets insets = getTickLabelInsets();\n        Font font = getTickLabelFont();\n        double maxWidth = 0.0;\n        if (!vertical) {\n            FontMetrics fm = g2.getFontMetrics(font);\n            Iterator iterator = ticks.iterator();\n            while (iterator.hasNext()) {\n                Tick tick = (Tick) iterator.next();\n                Rectangle2D labelBounds = TextUtilities.getTextBounds(\n                        tick.getText(), g2, fm);\n                if (labelBounds.getWidth() + insets.getLeft() \n                        + insets.getRight() > maxWidth) {\n                    maxWidth = labelBounds.getWidth() \n                               + insets.getLeft() + insets.getRight();\n                }\n            }\n        }\n        else {\n            LineMetrics metrics = font.getLineMetrics(\"ABCxyz\", \n                    g2.getFontRenderContext());\n            maxWidth = metrics.getHeight() \n                       + insets.getTop() + insets.getBottom();\n        }\n        return maxWidth;\n        \n    }\n",
        "begin_line": 855,
        "end_line": 885,
        "comment": "\r\n     * A utility method for determining the width of the widest tick label.\r\n     *\r\n     * @param ticks  the ticks.\r\n     * @param g2  the graphics device.\r\n     * @param drawArea  the area within which the plot and axes should be drawn.\r\n     * @param vertical  a flag that indicates whether or not the tick labels \r\n     *                  are 'vertical'.\r\n     *\r\n     * @return The width of the tallest tick label.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 11
    },
    {
        "name": "NumberAxis.estimateMaximumTickLabelHeight#972",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelHeight(java.awt.Graphics2D)",
        "snippet": "    protected double estimateMaximumTickLabelHeight(Graphics2D g2) {\n\n        RectangleInsets tickLabelInsets = getTickLabelInsets();\n        double result = tickLabelInsets.getTop() + tickLabelInsets.getBottom();\n        \n        Font tickLabelFont = getTickLabelFont();\n        FontRenderContext frc = g2.getFontRenderContext();\n        result += tickLabelFont.getLineMetrics(\"123\", frc).getHeight();\n        return result;\n        \n    }\n",
        "begin_line": 972,
        "end_line": 982,
        "comment": "\r\n     * Estimates the maximum tick label height.\r\n     * \r\n     * @param g2  the graphics device.\r\n     * \r\n     * @return The maximum height.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 11
    },
    {
        "name": "NumberAxis.selectVerticalAutoTickUnit#1105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.selectVerticalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void selectVerticalAutoTickUnit(Graphics2D g2, \n                                              Rectangle2D dataArea, \n                                              RectangleEdge edge) {\n\n        double tickLabelHeight = estimateMaximumTickLabelHeight(g2);\n\n        // start with the current tick unit...\n        TickUnitSource tickUnits = getStandardTickUnits();\n        TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit());\n        double unitHeight = lengthToJava2D(unit1.getSize(), dataArea, edge);\n\n        // then extrapolate...\n        double guess = (tickLabelHeight / unitHeight) * unit1.getSize();\n        \n        NumberTickUnit unit2 \n            = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess);\n        double unit2Height = lengthToJava2D(unit2.getSize(), dataArea, edge);\n\n        tickLabelHeight = estimateMaximumTickLabelHeight(g2);\n        if (tickLabelHeight > unit2Height) {\n            unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2);\n        }\n\n        setTickUnit(unit2, false, false);\n\n    }\n",
        "begin_line": 1105,
        "end_line": 1130,
        "comment": "\r\n     * Selects an appropriate tick value for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from an array of 'standard'\r\n     * tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the plot should be drawn.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 11
    },
    {
        "name": "NumberAxis.refreshTicksVertical#1242",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.refreshTicksVertical(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected List refreshTicksVertical(Graphics2D g2,\n                                        Rectangle2D dataArea,\n                                        RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n        result.clear();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        double size = getTickUnit().getSize();\n        int count = calculateVisibleTickCount();\n        double lowestTickValue = calculateLowestVisibleTickValue();\n\n        if (count <= ValueAxis.MAXIMUM_TICK_COUNT) {\n            for (int i = 0; i < count; i++) {\n                double currentTickValue = lowestTickValue + (i * size);\n                String tickLabel;\n                NumberFormat formatter = getNumberFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(currentTickValue);\n                }\n                else {\n                    tickLabel = getTickUnit().valueToString(currentTickValue);\n                }\n\n                TextAnchor anchor = null;\n                TextAnchor rotationAnchor = null;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    if (edge == RectangleEdge.LEFT) { \n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = -Math.PI / 2.0;\n                    }\n                    else {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                        angle = Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.LEFT) {\n                        anchor = TextAnchor.CENTER_RIGHT;\n                        rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    }\n                    else {\n                        anchor = TextAnchor.CENTER_LEFT;\n                        rotationAnchor = TextAnchor.CENTER_LEFT;\n                    }\n                }\n\n                Tick tick = new NumberTick(\n                    new Double(currentTickValue), tickLabel, anchor, \n                    rotationAnchor, angle\n                );\n                result.add(tick);\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 1242,
        "end_line": 1306,
        "comment": "\r\n     * Calculates the positions of the tick labels for the axis, storing the \r\n     * results in the tick label list (ready for drawing).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the plot should be drawn.\r\n     * @param edge  the location of the axis.\r\n     * \r\n     * @return A list of ticks.\r\n     *\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 11
    },
    {
        "name": "AxisState.cursorDown#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisState.java",
        "class_name": "org.jfree.chart.axis.AxisState",
        "signature": "org.jfree.chart.axis.AxisState.cursorDown(double)",
        "snippet": "    public void cursorDown(double units) {\n        this.cursor = this.cursor + units;\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\r\n     * Moves the cursor down by the specified number of Java 2D units.\r\n     * \r\n     * @param units  the units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 11
    },
    {
        "name": "AxisCollection.getAxesAtBottom#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisCollection.java",
        "class_name": "org.jfree.chart.axis.AxisCollection",
        "signature": "org.jfree.chart.axis.AxisCollection.getAxesAtBottom()",
        "snippet": "   public List getAxesAtBottom() {\n        return this.axesAtBottom;\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n    * Returns a list of the axes (if any) that need to be drawn at the bottom \r\n    * of the plot area.\r\n    * \r\n    * @return A list of axes.\r\n    ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4082
        },
        "num_failing_tests": 11
    },
    {
        "name": "ValueTick.getValue#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueTick.java",
        "class_name": "org.jfree.chart.axis.ValueTick",
        "signature": "org.jfree.chart.axis.ValueTick.getValue()",
        "snippet": "    public double getValue() {\n        return this.value;\n    }\n",
        "begin_line": 79,
        "end_line": 81,
        "comment": "\r\n     * Returns the value.\r\n     * \r\n     * @return The value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Tick.getTextAnchor#115",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getTextAnchor()",
        "snippet": "    public TextAnchor getTextAnchor() {\n        return this.textAnchor;\n    }\n",
        "begin_line": 115,
        "end_line": 117,
        "comment": "\r\n     * Returns the text anchor.\r\n     * \r\n     * @return The text anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Tick.getRotationAnchor#125",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getRotationAnchor()",
        "snippet": "    public TextAnchor getRotationAnchor() {\n        return this.rotationAnchor;\n    }\n",
        "begin_line": 125,
        "end_line": 127,
        "comment": "\r\n     * Returns the text anchor that defines the point around which the label is\r\n     * rotated.\r\n     * \r\n     * @return A text anchor (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Tick.getAngle#134",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Tick.java",
        "class_name": "org.jfree.chart.axis.Tick",
        "signature": "org.jfree.chart.axis.Tick.getAngle()",
        "snippet": "    public double getAngle() {\n        return this.angle;\n    }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\r\n     * Returns the angle.\r\n     * \r\n     * @return The angle.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Axis.isTickMarksVisible#751",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.isTickMarksVisible()",
        "snippet": "    public boolean isTickMarksVisible() {\n        return this.tickMarksVisible;\n    }\n",
        "begin_line": 751,
        "end_line": 753,
        "comment": "\r\n     * Returns the flag that indicates whether or not the tick marks are\r\n     * showing.\r\n     *\r\n     * @return The flag that indicates whether or not the tick marks are \r\n     *         showing.\r\n     *         \r\n     * @see #setTickMarksVisible(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Axis.getTickMarkInsideLength#778",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkInsideLength()",
        "snippet": "    public float getTickMarkInsideLength() {\n        return this.tickMarkInsideLength;\n    }\n",
        "begin_line": 778,
        "end_line": 780,
        "comment": "\r\n     * Returns the inside length of the tick marks.\r\n     *\r\n     * @return The length.\r\n     * \r\n     * @see #getTickMarkOutsideLength()\r\n     * @see #setTickMarkInsideLength(float)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Axis.getTickMarkOutsideLength#803",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkOutsideLength()",
        "snippet": "    public float getTickMarkOutsideLength() {\n        return this.tickMarkOutsideLength;\n    }\n",
        "begin_line": 803,
        "end_line": 805,
        "comment": "\r\n     * Returns the outside length of the tick marks.\r\n     *\r\n     * @return The length.\r\n     * \r\n     * @see #getTickMarkInsideLength()\r\n     * @see #setTickMarkOutsideLength(float)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Axis.getTickMarkStroke#827",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkStroke()",
        "snippet": "    public Stroke getTickMarkStroke() {\n        return this.tickMarkStroke;\n    }\n",
        "begin_line": 827,
        "end_line": 829,
        "comment": "\r\n     * Returns the stroke used to draw tick marks.\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @see #setTickMarkStroke(Stroke)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "Axis.getTickMarkPaint#856",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getTickMarkPaint()",
        "snippet": "    public Paint getTickMarkPaint() {\n        return this.tickMarkPaint;\n    }\n",
        "begin_line": 856,
        "end_line": 858,
        "comment": "\r\n     * Returns the paint used to draw tick marks (if they are showing).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setTickMarkPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.4022
        },
        "num_failing_tests": 11
    },
    {
        "name": "ProjectInfo.ProjectInfo#69",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.ProjectInfo()",
        "snippet": "    public ProjectInfo() {\n        // nothing required\n    }\n",
        "begin_line": 69,
        "end_line": 71,
        "comment": "\n     * Constructs an empty project info object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "ProjectInfo.setLogo#112",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLogo(java.awt.Image)",
        "snippet": "    public void setLogo(final Image logo) {\n        this.logo = logo;\n    }\n",
        "begin_line": 112,
        "end_line": 114,
        "comment": "\n     * Sets the project logo.\n     *\n     * @param logo  the project logo.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "ProjectInfo.setLicenceText#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setLicenceText(java.lang.String)",
        "snippet": "    public void setLicenceText(final String licenceText) {\n        this.licenceText = licenceText;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\n     * Sets the project licence text.\n     *\n     * @param licenceText  the licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "ProjectInfo.setContributors#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/ProjectInfo.java",
        "class_name": "org.jfree.chart.ui.ProjectInfo",
        "signature": "org.jfree.chart.ui.ProjectInfo.setContributors(java.util.List)",
        "snippet": "    public void setContributors(final List contributors) {\n        this.contributors = contributors;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Sets the list of contributors.\n     *\n     * @param contributors  the list of contributors.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Licences.getInstance#800",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getInstance()",
        "snippet": "    public static Licences getInstance() {\n        if (singleton == null) {\n            singleton = new Licences();\n        }\n        return singleton;\n    }\n",
        "begin_line": 800,
        "end_line": 805,
        "comment": "\n     * Returns a reference to this class.\n     *\n     * @return the instance reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Licences.getLGPL#823",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Licences.java",
        "class_name": "org.jfree.chart.ui.Licences",
        "signature": "org.jfree.chart.ui.Licences.getLGPL()",
        "snippet": "    public String getLGPL() {\n        return LGPL;\n    }\n",
        "begin_line": 823,
        "end_line": 825,
        "comment": "\n     * Returns the LGPL text in a non static way to prevent the compiler\n     * to copy the contents of the field.\n     *\n     * @return the LGPL licence text.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Library.Library#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.Library()",
        "snippet": "    protected Library() {\n        // nothing required\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Creates a new library reference.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Library.setInfo#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setInfo(java.lang.String)",
        "snippet": "    protected void setInfo(String info) {\n        this.info = info;\n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * Sets the project info.\n     * \n     * @param info  the project info.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Library.setLicenceName#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setLicenceName(java.lang.String)",
        "snippet": "    protected void setLicenceName(String licenceName) {\n        this.licenceName = licenceName;\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n     * Sets the licence name.\n     * \n     * @param licenceName  the licence name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Library.setName#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setName(java.lang.String)",
        "snippet": "    protected void setName(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 147,
        "end_line": 149,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Library.setVersion#156",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Library.java",
        "class_name": "org.jfree.chart.ui.Library",
        "signature": "org.jfree.chart.ui.Library.setVersion(java.lang.String)",
        "snippet": "    protected void setVersion(String version) {\n        this.version = version;\n    }\n",
        "begin_line": 156,
        "end_line": 158,
        "comment": "\n     * Sets the version identifier.\n     * \n     * @param version  the version identifier.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Contributor.Contributor#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/Contributor.java",
        "class_name": "org.jfree.chart.ui.Contributor",
        "signature": "org.jfree.chart.ui.Contributor.Contributor(java.lang.String, java.lang.String)",
        "snippet": "    public Contributor(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\n     * Creates a new contributor.\n     *\n     * @param name  the name.\n     * @param email  the e-mail address.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "BasicProjectInfo.BasicProjectInfo#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.BasicProjectInfo()",
        "snippet": "    public BasicProjectInfo() {\n        this.libraries = new ArrayList();\n        this.optionalLibraries = new ArrayList();\n    }\n",
        "begin_line": 147,
        "end_line": 150,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "BasicProjectInfo.setCopyright#199",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setCopyright(java.lang.String)",
        "snippet": "    public void setCopyright(String copyright) {\n        this.copyright = copyright;\n    }\n",
        "begin_line": 199,
        "end_line": 201,
        "comment": "\n     * Sets the project copyright statement.\n     *\n     * @param copyright  the project copyright statement.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "BasicProjectInfo.setInfo#208",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setInfo(java.lang.String)",
        "snippet": "    public void setInfo(String info) {\n        super.setInfo(info);\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\n     * Sets the project info string (for example, this could be the project URL).\n     * \n     * @param info  the info string.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "BasicProjectInfo.setLicenceName#217",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setLicenceName(java.lang.String)",
        "snippet": "    public void setLicenceName(String licence) {\n        super.setLicenceName(licence);\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\n     * Sets the license name.\n     * \n     * @param licence  the license name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "BasicProjectInfo.setName#226",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setName(java.lang.String)",
        "snippet": "    public void setName(String name) {\n        super.setName(name);\n    }\n",
        "begin_line": 226,
        "end_line": 228,
        "comment": "\n     * Sets the project name.\n     * \n     * @param name  the project name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "BasicProjectInfo.setVersion#235",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ui/BasicProjectInfo.java",
        "class_name": "org.jfree.chart.ui.BasicProjectInfo",
        "signature": "org.jfree.chart.ui.BasicProjectInfo.setVersion(java.lang.String)",
        "snippet": "    public void setVersion(String version) {\n        super.setVersion(version);\n    }\n",
        "begin_line": 235,
        "end_line": 237,
        "comment": "\n     * Sets the project version number.\n     * \n     * @param version  the version number.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "Title.addChangeListener#338",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.addChangeListener(org.jfree.chart.event.TitleChangeListener)",
        "snippet": "    public void addChangeListener(TitleChangeListener listener) {\n        this.listenerList.add(TitleChangeListener.class, listener);\n    }\n",
        "begin_line": 338,
        "end_line": 340,
        "comment": "\r\n     * Registers an object for notification of changes to the title.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChartResources.getContents#53",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/resources/JFreeChartResources.java",
        "class_name": "org.jfree.chart.resources.JFreeChartResources",
        "signature": "org.jfree.chart.resources.JFreeChartResources.getContents()",
        "snippet": "    public Object[][] getContents() {\n        return CONTENTS;\n    }\n",
        "begin_line": 53,
        "end_line": 55,
        "comment": "\r\n     * Returns the array of strings in the resource bundle.\r\n     *\r\n     * @return The resources.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3993
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractCategoryItemRenderer.setBaseToolTipGenerator#463",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)",
        "snippet": "    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) {\n        setBaseToolTipGenerator(generator, true);\n    }\n",
        "begin_line": 463,
        "end_line": 465,
        "comment": "\r\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     *\r\n     * @see #getBaseToolTipGenerator()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3959
        },
        "num_failing_tests": 13
    },
    {
        "name": "AbstractCategoryItemRenderer.setBaseToolTipGenerator#478",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator, boolean)",
        "snippet": "    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,\n            boolean notify) {\n        this.baseToolTipGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n",
        "begin_line": 478,
        "end_line": 484,
        "comment": "\r\n     * Sets the base tool tip generator and sends a {@link RendererChangeEvent}\r\n     * to all registered listeners.\r\n     *\r\n     * @param generator  the generator (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @since 1.2.0\r\n     *\r\n     * @see #getBaseToolTipGenerator()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3959
        },
        "num_failing_tests": 13
    },
    {
        "name": "VerticalAlignment.VerticalAlignment#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "signature": "org.jfree.chart.util.VerticalAlignment.VerticalAlignment(java.lang.String)",
        "snippet": "    private VerticalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3882
        },
        "num_failing_tests": 22
    },
    {
        "name": "HorizontalAlignment.HorizontalAlignment#78",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "signature": "org.jfree.chart.util.HorizontalAlignment.HorizontalAlignment(java.lang.String)",
        "snippet": "    private HorizontalAlignment(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 78,
        "end_line": 80,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3882
        },
        "num_failing_tests": 22
    },
    {
        "name": "Title.Title#171",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.Title(org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    protected Title(RectangleEdge position,\n                    HorizontalAlignment horizontalAlignment, \n                    VerticalAlignment verticalAlignment,\n                    RectangleInsets padding) {\n\n        // check arguments...\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");\n        }\n        if (horizontalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'horizontalAlignment' argument.\");\n        }\n\n        if (verticalAlignment == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'verticalAlignment' argument.\");\n        }\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'spacer' argument.\");\n        }\n\n        this.position = position;\n        this.horizontalAlignment = horizontalAlignment;\n        this.verticalAlignment = verticalAlignment;\n        setPadding(padding);\n        this.listenerList = new EventListenerList();\n        this.notify = true;\n\n    }\n",
        "begin_line": 171,
        "end_line": 200,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param position  the position of the title (<code>null</code> not \r\n     *                  permitted).\r\n     * @param horizontalAlignment  the horizontal alignment of the title (LEFT,\r\n     *                             CENTER or RIGHT, <code>null</code> not \r\n     *                             permitted).\r\n     * @param verticalAlignment  the vertical alignment of the title (TOP, \r\n     *                           MIDDLE or BOTTOM, <code>null</code> not \r\n     *                           permitted).\r\n     * @param padding  the amount of space to leave around the outside of the \r\n     *                 title (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3882
        },
        "num_failing_tests": 22
    },
    {
        "name": "BlockBorder.BlockBorder#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.BlockBorder(org.jfree.chart.util.RectangleInsets, java.awt.Paint)",
        "snippet": "    public BlockBorder(RectangleInsets insets, Paint paint) {\n        if (insets == null) {\n            throw new IllegalArgumentException(\"Null 'insets' argument.\");\n        }\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");   \n        }\n        this.insets = insets;\n        this.paint = paint;\n    }\n",
        "begin_line": 130,
        "end_line": 139,
        "comment": "\r\n     * Creates a new border.\r\n     * \r\n     * @param insets  the border insets (<code>null</code> not permitted).\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3882
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.AbstractBlock#111",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.AbstractBlock()",
        "snippet": "    protected AbstractBlock() {\n        this.id = null;\n        this.width = 0.0;\n        this.height = 0.0;\n        this.bounds = new Rectangle2D.Float();\n        this.margin = RectangleInsets.ZERO_INSETS;\n        this.frame = BlockBorder.NONE; \n        this.padding = RectangleInsets.ZERO_INSETS;\n    }\n",
        "begin_line": 111,
        "end_line": 119,
        "comment": "\r\n     * Creates a new block.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3882
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractBlock.setPadding#278",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.setPadding(org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public void setPadding(RectangleInsets padding) {\n        if (padding == null) {\n            throw new IllegalArgumentException(\"Null 'padding' argument.\");   \n        }\n        this.padding = padding;\n    }\n",
        "begin_line": 278,
        "end_line": 283,
        "comment": "\r\n     * Sets the padding (use {@link RectangleInsets#ZERO_INSETS} for no \r\n     * padding).\r\n     * \r\n     * @param padding  the padding (<code>null</code> not permitted).\r\n     * \r\n     * @see #getPadding()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3882
        },
        "num_failing_tests": 22
    },
    {
        "name": "DatasetUtilities.iterateCategoryRangeBounds#802",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(org.jfree.data.category.CategoryDataset, boolean)",
        "snippet": "    public static Range iterateCategoryRangeBounds(CategoryDataset dataset, \n            boolean includeInterval) {\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        boolean interval = includeInterval \n                           && dataset instanceof IntervalCategoryDataset;\n        int rowCount = dataset.getRowCount();\n        int columnCount = dataset.getColumnCount();\n        for (int row = 0; row < rowCount; row++) {\n            for (int column = 0; column < columnCount; column++) {\n                Number lvalue;\n                Number uvalue;\n                if (interval) {\n                    IntervalCategoryDataset icd \n                        = (IntervalCategoryDataset) dataset;\n                    lvalue = icd.getStartValue(row, column);\n                    uvalue = icd.getEndValue(row, column);\n                }\n                else {\n                    lvalue = dataset.getValue(row, column);\n                    uvalue = lvalue;\n                }\n                if (lvalue != null) {\n                    minimum = Math.min(minimum, lvalue.doubleValue());\n                }\n                if (uvalue != null) {\n                    maximum = Math.max(maximum, uvalue.doubleValue());\n                }\n            }\n        }\n        if (minimum == Double.POSITIVE_INFINITY) {\n            return null;\n        }\n        else {\n            return new Range(minimum, maximum);\n        }\n    }\n",
        "begin_line": 802,
        "end_line": 838,
        "comment": "\r\n     * Iterates over the data item of the category dataset to find\r\n     * the range bounds.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         y-interval is taken into account.\r\n     * \r\n     * @return The range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3881
        },
        "num_failing_tests": 13
    },
    {
        "name": "CategoryPlot.setOrientation#548",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setOrientation(org.jfree.chart.plot.PlotOrientation)",
        "snippet": "    public void setOrientation(PlotOrientation orientation) {\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        this.orientation = orientation;\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 548,
        "end_line": 554,
        "comment": "\r\n     * Sets the orientation for the plot and sends a {@link PlotChangeEvent} to\r\n     * all registered listeners.\r\n     *\r\n     * @param orientation  the orientation (<code>null</code> not permitted).\r\n     * \r\n     * @see #getOrientation()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3853
        },
        "num_failing_tests": 14
    },
    {
        "name": "AbstractObjectList.indexOf#160",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.indexOf(java.lang.Object)",
        "snippet": "    protected int indexOf(Object object) {\n        for (int index = 0; index < this.size; index++) {\n            if (this.objects[index] == object) {\n                return (index);\n            }\n        }\n        return -1;\n    }\n",
        "begin_line": 160,
        "end_line": 167,
        "comment": "\n     * Returns the index of the specified object, or -1 if the object is not in\n     * the list.\n     *\n     * @param object  the object.\n     *\n     * @return The index or -1.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3843
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleEdge.RectangleEdge#57",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.RectangleEdge(java.lang.String)",
        "snippet": "    private RectangleEdge(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 57,
        "end_line": 59,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.383
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectList.indexOf#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.indexOf(java.lang.Object)",
        "snippet": "    public int indexOf(Object object) {    \n        return super.indexOf(object);    \n    }    \n",
        "begin_line": 108,
        "end_line": 110,
        "comment": "          \n     * Returns the index of the specified object, or -1 if the object is not \n     * in the list.        \n     *   \n     * @param object  the object.        \n     *   \n     * @return The index or -1.          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.383
        },
        "num_failing_tests": 22
    },
    {
        "name": "Range.combine#198",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.combine(org.jfree.data.Range, org.jfree.data.Range)",
        "snippet": "    public static Range combine(Range range1, Range range2) {\n        if (range1 == null) {\n            return range2;\n        }\n        else {\n            if (range2 == null) {\n                return range1;\n            }\n            else {\n                double l = Math.min(range1.getLowerBound(), \n                        range2.getLowerBound());\n                double u = Math.max(range1.getUpperBound(), \n                        range2.getUpperBound());\n                return new Range(l, u);\n            }\n        }\n    }\n",
        "begin_line": 198,
        "end_line": 214,
        "comment": "\r\n     * Creates a new range by combining two existing ranges.\r\n     * <P>\r\n     * Note that:\r\n     * <ul>\r\n     *   <li>either range can be <code>null</code>, in which case the other \r\n     *       range is returned;</li>\r\n     *   <li>if both ranges are <code>null</code> the return value is \r\n     *       <code>null</code>.</li>\r\n     * </ul>\r\n     *\r\n     * @param range1  the first range (<code>null</code> permitted).\r\n     * @param range2  the second range (<code>null</code> permitted).\r\n     *\r\n     * @return A new range (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3798
        },
        "num_failing_tests": 21
    },
    {
        "name": "AbstractRenderer.addChangeListener#2280",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.addChangeListener(org.jfree.chart.event.RendererChangeListener)",
        "snippet": "    public void addChangeListener(RendererChangeListener listener) {\n        if (listener == null) {\n            throw new IllegalArgumentException(\"Null 'listener' argument.\");   \n        }\n        this.listenerList.add(RendererChangeListener.class, listener);\n    }\n",
        "begin_line": 2280,
        "end_line": 2285,
        "comment": "\r\n     * Registers an object to receive notification of changes to the renderer.\r\n     *\r\n     * @param listener  the listener (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.378
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultCategoryDataset.DefaultCategoryDataset#75",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.DefaultCategoryDataset()",
        "snippet": "    public DefaultCategoryDataset() {\n        this.data = new DefaultKeyedValues2D();\n    }\n",
        "begin_line": 75,
        "end_line": 77,
        "comment": "\r\n     * Creates a new (empty) dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3767
        },
        "num_failing_tests": 16
    },
    {
        "name": "DefaultCategoryDataset.getRowCount#86",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Returns the number of rows in the table.\r\n     *\r\n     * @return The row count.\r\n     * \r\n     * @see #getColumnCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3767
        },
        "num_failing_tests": 16
    },
    {
        "name": "DefaultKeyedValues2D.DefaultKeyedValues2D#95",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.DefaultKeyedValues2D()",
        "snippet": "    public DefaultKeyedValues2D() {\n        this(false);\n    }\n",
        "begin_line": 95,
        "end_line": 97,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3767
        },
        "num_failing_tests": 16
    },
    {
        "name": "DefaultKeyedValues2D.DefaultKeyedValues2D#104",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.DefaultKeyedValues2D(boolean)",
        "snippet": "    public DefaultKeyedValues2D(boolean sortRowKeys) {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n        this.sortRowKeys = sortRowKeys;\n    }\n",
        "begin_line": 104,
        "end_line": 109,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     * \r\n     * @param sortRowKeys  if the row keys should be sorted.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3767
        },
        "num_failing_tests": 16
    },
    {
        "name": "DefaultKeyedValues2D.getRowCount#118",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.rowKeys.size();\n    }\n",
        "begin_line": 118,
        "end_line": 120,
        "comment": "\r\n     * Returns the row count.\r\n     *\r\n     * @return The row count.\r\n     * \r\n     * @see #getColumnCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3767
        },
        "num_failing_tests": 16
    },
    {
        "name": "Plot.addChangeListener#870",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.addChangeListener(org.jfree.chart.event.PlotChangeListener)",
        "snippet": "    public void addChangeListener(PlotChangeListener listener) {\n        this.listenerList.add(PlotChangeListener.class, listener);\n    }\n",
        "begin_line": 870,
        "end_line": 872,
        "comment": "\r\n     * Registers an object for notification of changes to the plot.\r\n     *\r\n     * @param listener  the object to be registered.\r\n     * \r\n     * @see #removeChangeListener(PlotChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3755
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.getAutoRangeMinimumSize#973",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getAutoRangeMinimumSize()",
        "snippet": "    public double getAutoRangeMinimumSize() {\n        return this.autoRangeMinimumSize;\n    }\n",
        "begin_line": 973,
        "end_line": 975,
        "comment": "\r\n     * Returns the minimum size allowed for the axis range when it is \r\n     * automatically calculated.\r\n     *\r\n     * @return The minimum range.\r\n     * \r\n     * @see #setAutoRangeMinimumSize(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3708
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.getLowerMargin#1057",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getLowerMargin()",
        "snippet": "    public double getLowerMargin() {\n        return this.lowerMargin;\n    }\n",
        "begin_line": 1057,
        "end_line": 1059,
        "comment": "\r\n     * Returns the lower margin for the axis, expressed as a percentage of the \r\n     * axis range.  This controls the space added to the lower end of the axis \r\n     * when the axis range is automatically calculated (it is ignored when the \r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The lower margin.\r\n     *\r\n     * @see #setLowerMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3708
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.getUpperMargin#1090",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getUpperMargin()",
        "snippet": "    public double getUpperMargin() {\n        return this.upperMargin;\n    }\n",
        "begin_line": 1090,
        "end_line": 1092,
        "comment": "\r\n     * Returns the upper margin for the axis, expressed as a percentage of the \r\n     * axis range.  This controls the space added to the lower end of the axis \r\n     * when the axis range is automatically calculated (it is ignored when the \r\n     * axis range is set explicitly). The default value is 0.05 (five percent).\r\n     *\r\n     * @return The upper margin.\r\n     *\r\n     * @see #setUpperMargin(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3708
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.getFixedAutoRange#1120",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getFixedAutoRange()",
        "snippet": "    public double getFixedAutoRange() {\n        return this.fixedAutoRange;\n    }\n",
        "begin_line": 1120,
        "end_line": 1122,
        "comment": "\r\n     * Returns the fixed auto range.\r\n     *\r\n     * @return The length.\r\n     * \r\n     * @see #setFixedAutoRange(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3708
        },
        "num_failing_tests": 22
    },
    {
        "name": "StandardCategoryURLGenerator.StandardCategoryURLGenerator#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/urls/StandardCategoryURLGenerator.java",
        "class_name": "org.jfree.chart.urls.StandardCategoryURLGenerator",
        "signature": "org.jfree.chart.urls.StandardCategoryURLGenerator.StandardCategoryURLGenerator()",
        "snippet": "    public StandardCategoryURLGenerator() {\n        super();\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\r\n     * Creates a new generator with default settings.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3708
        },
        "num_failing_tests": 11
    },
    {
        "name": "AbstractCategoryItemRenderer.setBaseURLGenerator#570",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)",
        "snippet": "    public void setBaseURLGenerator(CategoryURLGenerator generator) {\n        setBaseURLGenerator(generator, true);\n    }\n",
        "begin_line": 570,
        "end_line": 572,
        "comment": "\r\n     * Sets the base item URL generator.\r\n     *\r\n     * @param generator  the item URL generator.\r\n     *\r\n     * @see #getBaseURLGenerator()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3708
        },
        "num_failing_tests": 11
    },
    {
        "name": "AbstractCategoryItemRenderer.setBaseURLGenerator#584",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseURLGenerator(org.jfree.chart.urls.CategoryURLGenerator, boolean)",
        "snippet": "    public void setBaseURLGenerator(CategoryURLGenerator generator, \n            boolean notify) {\n        this.baseURLGenerator = generator;\n        if (notify) {\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n",
        "begin_line": 584,
        "end_line": 590,
        "comment": "\r\n     * Sets the base item URL generator.\r\n     *\r\n     * @param generator  the item URL generator (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     *\r\n     * @see #getBaseURLGenerator()\r\n     * \r\n     * @since 1.2.0\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3708
        },
        "num_failing_tests": 11
    },
    {
        "name": "Axis.setPlot#898",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setPlot(org.jfree.chart.plot.Plot)",
        "snippet": "    public void setPlot(Plot plot) {\n        this.plot = plot;\n        configure();\n    }\n",
        "begin_line": 898,
        "end_line": 901,
        "comment": "\r\n     * Sets a reference to the plot that the axis is assigned to.\r\n     * <P>\r\n     * This method is used internally, you shouldn't need to call it yourself.\r\n     *\r\n     * @param plot  the plot.\r\n     * \r\n     * @see #getPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3697
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.addChangeListener#999",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.addChangeListener(org.jfree.chart.event.AxisChangeListener)",
        "snippet": "    public void addChangeListener(AxisChangeListener listener) {\n        this.listenerList.add(AxisChangeListener.class, listener);\n    }\n",
        "begin_line": 999,
        "end_line": 1001,
        "comment": "\r\n     * Registers an object for notification of changes to the axis.\r\n     *\r\n     * @param listener  the object that is being registered.\r\n     * \r\n     * @see #removeChangeListener(AxisChangeListener)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3697
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.getBackgroundPaint#539",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getBackgroundPaint()",
        "snippet": "    public Paint getBackgroundPaint() {\n        return this.backgroundPaint;\n    }\n",
        "begin_line": 539,
        "end_line": 541,
        "comment": "\r\n     * Returns the background color of the plot area.\r\n     *\r\n     * @return The paint (possibly <code>null</code>).\r\n     * \r\n     * @see #setBackgroundPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "Plot.getBackgroundAlpha#578",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getBackgroundAlpha()",
        "snippet": "    public float getBackgroundAlpha() {\n        return this.backgroundAlpha;\n    }\n",
        "begin_line": 578,
        "end_line": 580,
        "comment": "\r\n     * Returns the alpha transparency of the plot area background.\r\n     *\r\n     * @return The alpha transparency.\r\n     * \r\n     * @see #setBackgroundAlpha(float)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "Plot.getBackgroundImage#639",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getBackgroundImage()",
        "snippet": "    public Image getBackgroundImage() {\n        return this.backgroundImage;\n    }\n",
        "begin_line": 639,
        "end_line": 641,
        "comment": "\r\n     * Returns the background image that is used to fill the plot's background \r\n     * area.\r\n     *\r\n     * @return The image (possibly <code>null</code>).\r\n     * \r\n     * @see #setBackgroundImage(Image)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "NumberAxis3D.draw#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis3D.java",
        "class_name": "org.jfree.chart.axis.NumberAxis3D",
        "signature": "org.jfree.chart.axis.NumberAxis3D.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public AxisState draw(Graphics2D g2, double cursor, Rectangle2D plotArea, \n            Rectangle2D dataArea, RectangleEdge edge, \n            PlotRenderingInfo plotState) {\n\n        // if the axis is not visible, don't draw it...\n        if (!isVisible()) {\n            AxisState state = new AxisState(cursor);\n            // even though the axis is not visible, we need ticks for the \n            // gridlines...\n            List ticks = refreshTicks(g2, state, dataArea, edge); \n            state.setTicks(ticks);\n            return state;\n        }\n\n        // calculate the adjusted data area taking into account the 3D effect...\n        double xOffset = 0.0;\n        double yOffset = 0.0;\n        Plot plot = getPlot();\n        if (plot instanceof CategoryPlot) {\n            CategoryPlot cp = (CategoryPlot) plot;\n            CategoryItemRenderer r = cp.getRenderer();\n            if (r instanceof Effect3D) {\n                Effect3D e3D = (Effect3D) r;\n                xOffset = e3D.getXOffset();\n                yOffset = e3D.getYOffset();\n            }\n        }\n\n        double adjustedX = dataArea.getMinX();\n        double adjustedY = dataArea.getMinY();\n        double adjustedW = dataArea.getWidth() - xOffset;\n        double adjustedH = dataArea.getHeight() - yOffset;\n\n        if (edge == RectangleEdge.LEFT || edge == RectangleEdge.BOTTOM) {\n            adjustedY += yOffset;\n        }\n        else if (edge == RectangleEdge.RIGHT || edge == RectangleEdge.TOP) {\n            adjustedX += xOffset;\n        }\n        Rectangle2D adjustedDataArea = new Rectangle2D.Double(adjustedX, \n                adjustedY, adjustedW, adjustedH);\n\n        // draw the tick marks and labels...\n        AxisState info = drawTickMarksAndLabels(g2, cursor, plotArea, \n                adjustedDataArea, edge);\n       \n        // draw the axis label...\n        info = drawLabel(getLabel(), g2, plotArea, dataArea, edge, info, \n                plotState);\n\n        return info;\n        \n    }\n",
        "begin_line": 128,
        "end_line": 180,
        "comment": "\r\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param cursor  the cursor.\r\n     * @param plotArea  the area for drawing the axes and data.\r\n     * @param dataArea  the area for drawing the data (a subset of the \r\n     *                  plotArea).\r\n     * @param edge  the axis location.\r\n     * @param plotState  collects information about the plot (<code>null</code>\r\n     *                   permitted).\r\n     * \r\n     * @return The updated cursor value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3693
        },
        "num_failing_tests": 3
    },
    {
        "name": "DefaultCategoryDataset.getValue#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.getValue(int, int)",
        "snippet": "    public Number getValue(int row, int column) {\n        return this.data.getValue(row, column);\n    }\n",
        "begin_line": 111,
        "end_line": 113,
        "comment": "\r\n     * Returns a value from the table.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The value (possibly <code>null</code>).\r\n     * \r\n     * @see #addValue(Number, Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3639
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValues2D.getValue#143",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.getValue(int, int)",
        "snippet": "    public Number getValue(int row, int column) {\n        Number result = null;\n        DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row);\n        if (rowData != null) {\n            Comparable columnKey = (Comparable) this.columnKeys.get(column);\n            // the row may not have an entry for this key, in which case the \n            // return value is null\n            int index = rowData.getIndex(columnKey);\n            if (index >= 0) {\n                result = rowData.getValue(index);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 143,
        "end_line": 156,
        "comment": "\r\n     * Returns the value for a given row and column.\r\n     *\r\n     * @param row  the row index.\r\n     * @param column  the column index.\r\n     *\r\n     * @return The value.\r\n     * \r\n     * @see #getValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3639
        },
        "num_failing_tests": 13
    },
    {
        "name": "AbstractCategoryItemRenderer.AbstractCategoryItemRenderer#208",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.AbstractCategoryItemRenderer()",
        "snippet": "    protected AbstractCategoryItemRenderer() {\n        this.itemLabelGeneratorList = new ObjectList();\n        this.toolTipGeneratorList = new ObjectList();\n        this.urlGeneratorList = new ObjectList();\n        this.legendItemLabelGenerator\n            = new StandardCategorySeriesLabelGenerator();\n    }\n",
        "begin_line": 208,
        "end_line": 214,
        "comment": "\r\n     * Creates a new renderer with no tool tip generator and no URL generator.\r\n     * The defaults (no tool tip or URL generators) have been chosen to\r\n     * minimise the processing required to generate a default chart.  If you\r\n     * require tool tips or URLs, then you can easily add the required\r\n     * generators.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3619
        },
        "num_failing_tests": 22
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#74",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator()",
        "snippet": "    public StandardCategorySeriesLabelGenerator() {\n        this(DEFAULT_LABEL_FORMAT);\n    }\n",
        "begin_line": 74,
        "end_line": 76,
        "comment": "\r\n     * Creates a default series label generator (uses \r\n     * {@link #DEFAULT_LABEL_FORMAT}).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3619
        },
        "num_failing_tests": 22
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.StandardCategorySeriesLabelGenerator(java.lang.String)",
        "snippet": "    public StandardCategorySeriesLabelGenerator(String format) {\n        if (format == null) {\n            throw new IllegalArgumentException(\"Null 'format' argument.\");\n        }\n        this.formatPattern = format;\n    }\n",
        "begin_line": 83,
        "end_line": 88,
        "comment": "\r\n     * Creates a new series label generator.\r\n     * \r\n     * @param format  the format pattern (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3619
        },
        "num_failing_tests": 22
    },
    {
        "name": "Range.getLowerBound#100",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getLowerBound()",
        "snippet": "    public double getLowerBound() {\n        return this.lower;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\r\n     * Returns the lower bound for the range.\r\n     *\r\n     * @return The lower bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3597
        },
        "num_failing_tests": 22
    },
    {
        "name": "Range.getUpperBound#109",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.getUpperBound()",
        "snippet": "    public double getUpperBound() {\n        return this.upper;\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\r\n     * Returns the upper bound for the range.\r\n     *\r\n     * @return The upper bound.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3597
        },
        "num_failing_tests": 22
    },
    {
        "name": "StandardGradientPaintTransformer.StandardGradientPaintTransformer#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.StandardGradientPaintTransformer()",
        "snippet": "    public StandardGradientPaintTransformer() {\n        this(GradientPaintTransformType.VERTICAL);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Creates a new transformer with the type \n     * {@link GradientPaintTransformType#VERTICAL}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3596
        },
        "num_failing_tests": 21
    },
    {
        "name": "StandardGradientPaintTransformer.StandardGradientPaintTransformer#79",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.StandardGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformType)",
        "snippet": "    public StandardGradientPaintTransformer(GradientPaintTransformType type) {\n        if (type == null) {\n            throw new IllegalArgumentException(\"Null 'type' argument.\");\n        }\n        this.type = type;\n    }\n",
        "begin_line": 79,
        "end_line": 84,
        "comment": "\n     * Creates a new transformer with the specified type.\n     * \n     * @param type  the transform type (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3596
        },
        "num_failing_tests": 21
    },
    {
        "name": "GradientPaintTransformType.GradientPaintTransformType#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.GradientPaintTransformType(java.lang.String)",
        "snippet": "    private GradientPaintTransformType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3596
        },
        "num_failing_tests": 21
    },
    {
        "name": "AbstractDataset.addChangeListener#127",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.addChangeListener(org.jfree.data.general.DatasetChangeListener)",
        "snippet": "    public void addChangeListener(DatasetChangeListener listener) {\n        this.listenerList.add(DatasetChangeListener.class, listener);\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\r\n     * Registers an object to receive notification of changes to the dataset.\r\n     *\r\n     * @param listener  the object to register.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3585
        },
        "num_failing_tests": 21
    },
    {
        "name": "DatasetRenderingOrder.DatasetRenderingOrder#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.DatasetRenderingOrder(java.lang.String)",
        "snippet": "    private DatasetRenderingOrder(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3576
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.estimateMaximumTickLabelWidth#997",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.estimateMaximumTickLabelWidth(java.awt.Graphics2D, org.jfree.chart.axis.TickUnit)",
        "snippet": "    protected double estimateMaximumTickLabelWidth(Graphics2D g2, \n                                                   TickUnit unit) {\n\n        RectangleInsets tickLabelInsets = getTickLabelInsets();\n        double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight();\n\n        if (isVerticalTickLabels()) {\n            // all tick labels have the same width (equal to the height of the \n            // font)...\n            FontRenderContext frc = g2.getFontRenderContext();\n            LineMetrics lm = getTickLabelFont().getLineMetrics(\"0\", frc);\n            result += lm.getHeight();\n        }\n        else {\n            // look at lower and upper bounds...\n            FontMetrics fm = g2.getFontMetrics(getTickLabelFont());\n            Range range = getRange();\n            double lower = range.getLowerBound();\n            double upper = range.getUpperBound();\n            String lowerStr = \"\";\n            String upperStr = \"\";\n            NumberFormat formatter = getNumberFormatOverride();\n            if (formatter != null) {\n                lowerStr = formatter.format(lower);\n                upperStr = formatter.format(upper);\n            }\n            else {\n                lowerStr = unit.valueToString(lower);\n                upperStr = unit.valueToString(upper);                \n            }\n            double w1 = fm.stringWidth(lowerStr);\n            double w2 = fm.stringWidth(upperStr);\n            result += Math.max(w1, w2);\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 997,
        "end_line": 1034,
        "comment": "\r\n     * Estimates the maximum width of the tick labels, assuming the specified \r\n     * tick unit is used.\r\n     * <P>\r\n     * Rather than computing the string bounds of every tick on the axis, we \r\n     * just look at two values: the lower bound and the upper bound for the \r\n     * axis.  These two values will usually be representative.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param unit  the tick unit to use for calculation.\r\n     *\r\n     * @return The estimated maximum width of the tick labels.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3563
        },
        "num_failing_tests": 9
    },
    {
        "name": "NumberAxis.selectHorizontalAutoTickUnit#1067",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.selectHorizontalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "   protected void selectHorizontalAutoTickUnit(Graphics2D g2,\n                                               Rectangle2D dataArea,\n                                               RectangleEdge edge) {\n\n        double tickLabelWidth = estimateMaximumTickLabelWidth(\n            g2, getTickUnit()\n        );\n\n        // start with the current tick unit...\n        TickUnitSource tickUnits = getStandardTickUnits();\n        TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit());\n        double unit1Width = lengthToJava2D(unit1.getSize(), dataArea, edge);\n\n        // then extrapolate...\n        double guess = (tickLabelWidth / unit1Width) * unit1.getSize();\n\n        NumberTickUnit unit2 \n            = (NumberTickUnit) tickUnits.getCeilingTickUnit(guess);\n        double unit2Width = lengthToJava2D(unit2.getSize(), dataArea, edge);\n\n        tickLabelWidth = estimateMaximumTickLabelWidth(g2, unit2);\n        if (tickLabelWidth > unit2Width) {\n            unit2 = (NumberTickUnit) tickUnits.getLargerTickUnit(unit2);\n        }\n\n        setTickUnit(unit2, false, false);\n\n    }\n",
        "begin_line": 1067,
        "end_line": 1094,
        "comment": "\r\n     * Selects an appropriate tick value for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from an array of 'standard'\r\n     * tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area defined by the axes.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3563
        },
        "num_failing_tests": 9
    },
    {
        "name": "ValueAxis.isAutoRange#927",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.isAutoRange()",
        "snippet": "    public boolean isAutoRange() {\n        return this.autoRange;\n    }\n",
        "begin_line": 927,
        "end_line": 929,
        "comment": "\r\n     * Returns the flag that controls whether or not the axis range is \r\n     * automatically adjusted to fit the data values.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setAutoRange(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3556
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.getParent#435",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.getParent()",
        "snippet": "    public Plot getParent() {\n        return this.parent;\n    }\n",
        "begin_line": 435,
        "end_line": 437,
        "comment": "\r\n     * Returns the parent plot (or <code>null</code> if this plot is not part \r\n     * of a combined plot).\r\n     *\r\n     * @return The parent plot.\r\n     * \r\n     * @see #setParent(Plot)\r\n     * @see #getRootPlot()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3546
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartChangeEvent.setType#132",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setType(org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public void setType(ChartChangeEventType type) {\n        this.type = type;\n    }\n",
        "begin_line": 132,
        "end_line": 134,
        "comment": "\r\n     * Sets the event type.\r\n     *\r\n     * @param type  the event type.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3546
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectList.get#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.get(int)",
        "snippet": "    public Object get(int index) {         \n        return super.get(index);         \n    }    \n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "          \n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.         \n     *   \n     * @param index  the object index.   \n     *   \n     * @return The object or <code>null</code>.          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisLocation.AxisLocation#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.AxisLocation(java.lang.String)",
        "snippet": "    private AxisLocation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3536
        },
        "num_failing_tests": 22
    },
    {
        "name": "ObjectList.set#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.set(int, java.lang.Object)",
        "snippet": "    public void set(int index, Object object) {      \n        super.set(index, object);        \n    }    \n",
        "begin_line": 96,
        "end_line": 98,
        "comment": "          \n     * Sets an object reference (overwriting any existing object).       \n     *   \n     * @param index  the object index.   \n     * @param object  the object (<code>null</code> permitted).          \n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3526
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotOrientation.PlotOrientation#73",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.PlotOrientation(java.lang.String)",
        "snippet": "    private PlotOrientation(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 73,
        "end_line": 75,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3526
        },
        "num_failing_tests": 22
    },
    {
        "name": "StandardCategoryToolTipGenerator.StandardCategoryToolTipGenerator#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategoryToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategoryToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardCategoryToolTipGenerator.StandardCategoryToolTipGenerator()",
        "snippet": "    public StandardCategoryToolTipGenerator() {\n        super(DEFAULT_TOOL_TIP_FORMAT_STRING, NumberFormat.getInstance());\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\r\n     * Creates a new generator with a default number formatter.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3496
        },
        "num_failing_tests": 11
    },
    {
        "name": "NumberTickUnit.NumberTickUnit#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.NumberTickUnit(double, java.text.NumberFormat)",
        "snippet": "    public NumberTickUnit(double size, NumberFormat formatter) {\n        super(size);\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        this.formatter = formatter;\n    }\n",
        "begin_line": 82,
        "end_line": 88,
        "comment": "\r\n     * Creates a new number tick unit.\r\n     *\r\n     * @param size  the size of the tick unit.\r\n     * @param formatter  a number formatter for the tick unit (<code>null</code>\r\n     *                   not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3477
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractCategoryItemLabelGenerator.AbstractCategoryItemLabelGenerator#105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.AbstractCategoryItemLabelGenerator(java.lang.String, java.text.NumberFormat)",
        "snippet": "    protected AbstractCategoryItemLabelGenerator(String labelFormat, \n                                                 NumberFormat formatter) {\n        this(labelFormat, formatter, NumberFormat.getPercentInstance());\n    }\n",
        "begin_line": 105,
        "end_line": 108,
        "comment": "\r\n     * Creates a label generator with the specified number formatter.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not \r\n     *                     permitted).\r\n     * @param formatter  the number formatter (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3458
        },
        "num_failing_tests": 11
    },
    {
        "name": "AbstractCategoryItemLabelGenerator.AbstractCategoryItemLabelGenerator#121",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.AbstractCategoryItemLabelGenerator(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)",
        "snippet": "    protected AbstractCategoryItemLabelGenerator(String labelFormat, \n            NumberFormat formatter, NumberFormat percentFormatter) {\n        if (labelFormat == null) {\n            throw new IllegalArgumentException(\"Null 'labelFormat' argument.\");\n        }\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        if (percentFormatter == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'percentFormatter' argument.\");\n        }\n        this.labelFormat = labelFormat;\n        this.numberFormat = formatter;\n        this.percentFormat = percentFormatter;\n        this.dateFormat = null;\n        this.nullValueString = \"-\";\n    }\n",
        "begin_line": 121,
        "end_line": 138,
        "comment": "\r\n     * Creates a label generator with the specified number formatter.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not \r\n     *                     permitted).\r\n     * @param formatter  the number formatter (<code>null</code> not permitted).\r\n     * @param percentFormatter  the percent formatter (<code>null</code> not\r\n     *     permitted).\r\n     *     \r\n     * @since 1.0.2\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3458
        },
        "num_failing_tests": 11
    },
    {
        "name": "AbstractDataset.fireDatasetChanged#158",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.fireDatasetChanged()",
        "snippet": "    protected void fireDatasetChanged() {\n        notifyListeners(new DatasetChangeEvent(this, this));\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3436
        },
        "num_failing_tests": 19
    },
    {
        "name": "AbstractObjectList.get#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.get(int)",
        "snippet": "    protected Object get(int index) {\n        Object result = null;\n        if (index >= 0 && index < this.size) {\n            result = this.objects[index];\n        }\n        return result;\n    }\n",
        "begin_line": 108,
        "end_line": 114,
        "comment": "\n     * Returns the object at the specified index, if there is one, or \n     * <code>null</code>.\n     *\n     * @param index  the object index.\n     *\n     * @return The object or <code>null</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.343
        },
        "num_failing_tests": 22
    },
    {
        "name": "NumberAxis.getAutoRangeIncludesZero#238",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeIncludesZero()",
        "snippet": "    public boolean getAutoRangeIncludesZero() {\n        return this.autoRangeIncludesZero;\n    }\n",
        "begin_line": 238,
        "end_line": 240,
        "comment": "\r\n     * Returns the flag that indicates whether or not the automatic axis range\r\n     * (if indeed it is determined automatically) is forced to include zero.\r\n     *\r\n     * @return The flag.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3425
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.getAutoRangeStickyZero#273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.getAutoRangeStickyZero()",
        "snippet": "    public boolean getAutoRangeStickyZero() {\n        return this.autoRangeStickyZero;\n    }\n",
        "begin_line": 273,
        "end_line": 275,
        "comment": "\r\n     * Returns a flag that affects the auto-range when zero falls outside the\r\n     * data range but inside the margins defined for the axis.\r\n     *\r\n     * @return The flag.\r\n     * \r\n     * @see #setAutoRangeStickyZero(boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3425
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.configure#411",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.configure()",
        "snippet": "    public void configure() {\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n    }\n",
        "begin_line": 411,
        "end_line": 415,
        "comment": "\r\n     * Configures the axis to work with the specified plot.  If the axis has\r\n     * auto-scaling, then sets the maximum and minimum values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3425
        },
        "num_failing_tests": 20
    },
    {
        "name": "RectangleAnchor.RectangleAnchor#83",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.RectangleAnchor(java.lang.String)",
        "snippet": "    private RectangleAnchor(final String name) {\n        this.name = name;\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3421
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.set#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.set(int, java.lang.Object)",
        "snippet": "    protected void set(int index, Object object) {\n        if (index < 0) {\n            throw new IllegalArgumentException(\"Requires index >= 0.\");\n        }\n        if (index >= this.objects.length) {\n            Object[] enlarged = new Object[index + this.increment];\n            System.arraycopy(this.objects, 0, enlarged, 0, this.objects.length);\n            this.objects = enlarged;\n        }\n        this.objects[index] = object;\n        this.size = Math.max(this.size, index + 1);\n    }\n",
        "begin_line": 122,
        "end_line": 133,
        "comment": "\n     * Sets an object reference (overwriting any existing object).\n     *\n     * @param index  the object index.\n     * @param object  the object (<code>null</code> permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3421
        },
        "num_failing_tests": 22
    },
    {
        "name": "AxisChangeEvent.AxisChangeEvent#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/AxisChangeEvent.java",
        "class_name": "org.jfree.chart.event.AxisChangeEvent",
        "signature": "org.jfree.chart.event.AxisChangeEvent.AxisChangeEvent(org.jfree.chart.axis.Axis)",
        "snippet": "    public AxisChangeEvent(Axis axis) {\n        super(axis);\n        this.axis = axis;\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Creates a new AxisChangeEvent.\r\n     *\r\n     * @param axis  the axis that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3421
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.notifyListeners#1034",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.notifyListeners(org.jfree.chart.event.AxisChangeEvent)",
        "snippet": "    protected void notifyListeners(AxisChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == AxisChangeListener.class) {\n                ((AxisChangeListener) listeners[i + 1]).axisChanged(event);\n            }\n        }\n\n    }\n",
        "begin_line": 1034,
        "end_line": 1043,
        "comment": "\r\n     * Notifies all registered listeners that the axis has changed.\r\n     * The AxisChangeEvent provides information about the change.\r\n     *\r\n     * @param event  information about the change to the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3421
        },
        "num_failing_tests": 22
    },
    {
        "name": "ValueAxis.setRange#1233",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setRange(org.jfree.data.Range, boolean, boolean)",
        "snippet": "    public void setRange(Range range, boolean turnOffAutoRange, \n                         boolean notify) {\n        if (range == null) {\n            throw new IllegalArgumentException(\"Null 'range' argument.\");\n        }\n        if (turnOffAutoRange) {\n            this.autoRange = false;\n        }\n        this.range = range;\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1233,
        "end_line": 1245,
        "comment": "\r\n     * Sets the range for the axis, if requested, sends an \r\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect, \r\n     * the auto-range flag is set to <code>false</code> (optional).\r\n     *\r\n     * @param range  the range (<code>null</code> not permitted).\r\n     * @param turnOffAutoRange  a flag that controls whether or not the auto \r\n     *                          range is turned off.         \r\n     * @param notify  a flag that controls whether or not listeners are \r\n     *                notified.\r\n     *                \r\n     * @see #getRange()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3412
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractDataset.notifyListeners#168",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.notifyListeners(org.jfree.data.general.DatasetChangeEvent)",
        "snippet": "    protected void notifyListeners(DatasetChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == DatasetChangeListener.class) {\n                ((DatasetChangeListener) listeners[i + 1]).datasetChanged(\n                    event\n                );\n            }\n        }\n\n    }\n",
        "begin_line": 168,
        "end_line": 179,
        "comment": "\r\n     * Notifies all registered listeners that the dataset has changed.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3399
        },
        "num_failing_tests": 19
    },
    {
        "name": "DatasetGroup.DatasetGroup#64",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetGroup.java",
        "class_name": "org.jfree.data.general.DatasetGroup",
        "signature": "org.jfree.data.general.DatasetGroup.DatasetGroup()",
        "snippet": "    public DatasetGroup() {\n        super();\n        this.id = \"NOID\";\n    }\n",
        "begin_line": 64,
        "end_line": 67,
        "comment": "\r\n     * Constructs a new group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3375
        },
        "num_failing_tests": 21
    },
    {
        "name": "AbstractDataset.AbstractDataset#96",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.AbstractDataset()",
        "snippet": "    protected AbstractDataset() {\n        this.group = new DatasetGroup();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "\r\n     * Constructs a dataset. By default, the dataset is assigned to its own \r\n     * group.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3375
        },
        "num_failing_tests": 21
    },
    {
        "name": "Axis.getPlot#885",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getPlot()",
        "snippet": "    public Plot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 885,
        "end_line": 887,
        "comment": "\r\n     * Returns the plot that the axis is assigned to.  This method will return \r\n     * <code>null</code> if the axis is not currently assigned to a plot.\r\n     *\r\n     * @return The plot that the axis is assigned to (possibly \r\n     *         <code>null</code>).\r\n     *         \r\n     * @see #setPlot(Plot)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3359
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.notifyListeners#890",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.notifyListeners(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void notifyListeners(PlotChangeEvent event) {\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == PlotChangeListener.class) {\n                ((PlotChangeListener) listeners[i + 1]).plotChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 890,
        "end_line": 897,
        "comment": "\r\n     * Notifies all registered listeners that the plot has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.33
        },
        "num_failing_tests": 22
    },
    {
        "name": "PlotChangeEvent.PlotChangeEvent#65",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/PlotChangeEvent.java",
        "class_name": "org.jfree.chart.event.PlotChangeEvent",
        "signature": "org.jfree.chart.event.PlotChangeEvent.PlotChangeEvent(org.jfree.chart.plot.Plot)",
        "snippet": "    public PlotChangeEvent(Plot plot) {\n        super(plot);\n        this.plot = plot;\n    }\n",
        "begin_line": 65,
        "end_line": 68,
        "comment": "\r\n     * Creates a new PlotChangeEvent.\r\n     *\r\n     * @param plot  the plot that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.33
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultCategoryDataset.addValue#216",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(Number value, Comparable rowKey, \n                         Comparable columnKey) {\n        this.data.addValue(value, rowKey, columnKey);\n        fireDatasetChanged();\n    }\n",
        "begin_line": 216,
        "end_line": 220,
        "comment": "\r\n     * Adds a value to the table.  Performs the same function as setValue().\r\n     *\r\n     * @param value  the value.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     * \r\n     * @see #getValue(Comparable, Comparable)\r\n     * @see #removeValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3289
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValues2D.addValue#301",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(Number value, Comparable rowKey, \n                         Comparable columnKey) {\n        // defer argument checking\n        setValue(value, rowKey, columnKey);\n    }\n",
        "begin_line": 301,
        "end_line": 305,
        "comment": "\r\n     * Adds a value to the table.  Performs the same function as \r\n     * #setValue(Number, Comparable, Comparable).\r\n     *\r\n     * @param value  the value (<code>null</code> permitted).\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     * \r\n     * @see #setValue(Number, Comparable, Comparable)\r\n     * @see #removeValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3289
        },
        "num_failing_tests": 13
    },
    {
        "name": "DatasetChangeEvent.DatasetChangeEvent#72",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetChangeEvent.java",
        "class_name": "org.jfree.data.general.DatasetChangeEvent",
        "signature": "org.jfree.data.general.DatasetChangeEvent.DatasetChangeEvent(java.lang.Object, org.jfree.data.general.Dataset)",
        "snippet": "    public DatasetChangeEvent(Object source, Dataset dataset) {\n        super(source);\n        this.dataset = dataset;\n    }\n",
        "begin_line": 72,
        "end_line": 75,
        "comment": "\r\n     * Constructs a new event.  The source is either the dataset or the \r\n     * {@link org.jfree.chart.plot.Plot} class.  The dataset can be \r\n     * <code>null</code> (in this case the source will be the \r\n     * {@link org.jfree.chart.plot.Plot} class).\r\n     *\r\n     * @param source  the source of the event.\r\n     * @param dataset  the dataset that generated the event (<code>null</code>\r\n     *                 permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3268
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnits.TickUnits#81",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.TickUnits()",
        "snippet": "    public TickUnits() {\n        this.tickUnits = new ArrayList();\n    }\n",
        "begin_line": 81,
        "end_line": 83,
        "comment": "\r\n     * Constructs a new collection of tick units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3268
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnits.add#92",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.add(org.jfree.chart.axis.TickUnit)",
        "snippet": "    public void add(TickUnit unit) {\n\n        if (unit == null) {\n            throw new NullPointerException(\"Null 'unit' argument.\");\n        }\n        this.tickUnits.add(unit);\n        Collections.sort(this.tickUnits);\n\n    }\n",
        "begin_line": 92,
        "end_line": 100,
        "comment": "\r\n     * Adds a tick unit to the collection.\r\n     * <P>\r\n     * The tick units are maintained in ascending order.\r\n     *\r\n     * @param unit  the tick unit to add.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3268
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnit.TickUnit#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.TickUnit(double)",
        "snippet": "    public TickUnit(double size) {\n        this.size = size;\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\r\n     * Constructs a new tick unit.\r\n     *\r\n     * @param size  the tick unit size.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3268
        },
        "num_failing_tests": 22
    },
    {
        "name": "TickUnit.getSize#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.getSize()",
        "snippet": "    public double getSize() {\n        return this.size;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Returns the size of the tick unit.\r\n     *\r\n     * @return The size of the tick unit.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3268
        },
        "num_failing_tests": 22
    },
    {
        "name": "Plot.Plot#287",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.Plot()",
        "snippet": "    protected Plot() {\n\n        this.parent = null;\n        this.insets = DEFAULT_INSETS;\n        this.backgroundPaint = DEFAULT_BACKGROUND_PAINT;\n        this.backgroundAlpha = DEFAULT_BACKGROUND_ALPHA;\n        this.backgroundImage = null;\n        this.outlineVisible = true;\n        this.outlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.outlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.foregroundAlpha = DEFAULT_FOREGROUND_ALPHA;\n\n        this.noDataMessage = null;\n        this.noDataMessageFont = new Font(\"SansSerif\", Font.PLAIN, 12);\n        this.noDataMessagePaint = Color.black;\n\n        this.drawingSupplier = new DefaultDrawingSupplier();\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 287,
        "end_line": 307,
        "comment": "\r\n     * Creates a new plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#150",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier()",
        "snippet": "    public DefaultDrawingSupplier() {\n\n        this(DEFAULT_PAINT_SEQUENCE, DEFAULT_FILL_PAINT_SEQUENCE,\n             DEFAULT_OUTLINE_PAINT_SEQUENCE,\n             DEFAULT_STROKE_SEQUENCE,\n             DEFAULT_OUTLINE_STROKE_SEQUENCE,\n             DEFAULT_SHAPE_SEQUENCE);\n\n    }\n",
        "begin_line": 150,
        "end_line": 158,
        "comment": "\r\n     * Creates a new supplier, with default sequences for fill paint, outline \r\n     * paint, stroke and shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.DefaultDrawingSupplier#196",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.DefaultDrawingSupplier(java.awt.Paint[], java.awt.Paint[], java.awt.Paint[], java.awt.Stroke[], java.awt.Stroke[], java.awt.Shape[])",
        "snippet": "    public DefaultDrawingSupplier(Paint[] paintSequence, \n            Paint[] fillPaintSequence, Paint[] outlinePaintSequence,\n            Stroke[] strokeSequence, Stroke[] outlineStrokeSequence,\n            Shape[] shapeSequence) {\n\n        this.paintSequence = paintSequence;\n        this.fillPaintSequence = fillPaintSequence;\n        this.outlinePaintSequence = outlinePaintSequence;\n        this.strokeSequence = strokeSequence;\n        this.outlineStrokeSequence = outlineStrokeSequence;\n        this.shapeSequence = shapeSequence;\n    }\n",
        "begin_line": 196,
        "end_line": 207,
        "comment": "\r\n     * Creates a new supplier.\r\n     *\r\n     * @param paintSequence  the paint sequence.\r\n     * @param fillPaintSequence  the fill paint sequence.\r\n     * @param outlinePaintSequence  the outline paint sequence.\r\n     * @param strokeSequence  the stroke sequence.\r\n     * @param outlineStrokeSequence  the outline stroke sequence.\r\n     * @param shapeSequence  the shape sequence.\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.createStandardSeriesShapes#289",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()",
        "snippet": "    public static Shape[] createStandardSeriesShapes() {\n\n        Shape[] result = new Shape[10];\n\n        double size = 6.0;\n        double delta = size / 2.0;\n        int[] xpoints = null;\n        int[] ypoints = null;\n\n        // square\n        result[0] = new Rectangle2D.Double(-delta, -delta, size, size);\n        // circle\n        result[1] = new Ellipse2D.Double(-delta, -delta, size, size);\n\n        // up-pointing triangle\n        xpoints = intArray(0.0, delta, -delta);\n        ypoints = intArray(-delta, delta, delta);\n        result[2] = new Polygon(xpoints, ypoints, 3);\n\n        // diamond\n        xpoints = intArray(0.0, delta, 0.0, -delta);\n        ypoints = intArray(-delta, 0.0, delta, 0.0);\n        result[3] = new Polygon(xpoints, ypoints, 4);\n\n        // horizontal rectangle\n        result[4] = new Rectangle2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // down-pointing triangle\n        xpoints = intArray(-delta, +delta, 0.0);\n        ypoints = intArray(-delta, -delta, delta);\n        result[5] = new Polygon(xpoints, ypoints, 3);\n\n        // horizontal ellipse\n        result[6] = new Ellipse2D.Double(-delta, -delta / 2, size, size / 2);\n\n        // right-pointing triangle\n        xpoints = intArray(-delta, delta, -delta);\n        ypoints = intArray(-delta, 0.0, delta);\n        result[7] = new Polygon(xpoints, ypoints, 3);\n\n        // vertical rectangle\n        result[8] = new Rectangle2D.Double(-delta / 2, -delta, size / 2, size);\n\n        // left-pointing triangle\n        xpoints = intArray(-delta, delta, delta);\n        ypoints = intArray(0.0, -delta, +delta);\n        result[9] = new Polygon(xpoints, ypoints, 3);\n\n        return result;\n\n    }\n",
        "begin_line": 289,
        "end_line": 339,
        "comment": "\r\n     * Creates an array of standard shapes to display for the items in series \r\n     * on charts.\r\n     *\r\n     * @return The array of shapes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.intArray#518",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c) {\n        return new int[] {(int) a, (int) b, (int) c};\n    }\n",
        "begin_line": 518,
        "end_line": 520,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     *\r\n     * @return int[3] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultDrawingSupplier.intArray#533",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.intArray(double, double, double, double)",
        "snippet": "    private static int[] intArray(double a, double b, double c, double d) {\n        return new int[] {(int) a, (int) b, (int) c, (int) d};\n    }\n",
        "begin_line": 533,
        "end_line": 535,
        "comment": "\r\n     * Helper method to avoid lots of explicit casts in getShape().  Returns\r\n     * an array containing the provided doubles cast to ints.\r\n     *\r\n     * @param a  x\r\n     * @param b  y\r\n     * @param c  z\r\n     * @param d  t\r\n     *\r\n     * @return int[4] with converted params.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartColor.createDefaultPaintArray#151",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartColor.java",
        "class_name": "org.jfree.chart.ChartColor",
        "signature": "org.jfree.chart.ChartColor.createDefaultPaintArray()",
        "snippet": "    public static Paint[] createDefaultPaintArray() {\n\n        return new Paint[] {\n            new Color(0xFF, 0x55, 0x55),\n            new Color(0x55, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0x55),\n            new Color(0xFF, 0xFF, 0x55),\n            new Color(0xFF, 0x55, 0xFF),\n            new Color(0x55, 0xFF, 0xFF),\n            Color.pink,\n            Color.gray,\n            ChartColor.DARK_RED,\n            ChartColor.DARK_BLUE,\n            ChartColor.DARK_GREEN,\n            ChartColor.DARK_YELLOW,\n            ChartColor.DARK_MAGENTA,\n            ChartColor.DARK_CYAN,\n            Color.darkGray,\n            ChartColor.LIGHT_RED,\n            ChartColor.LIGHT_BLUE,\n            ChartColor.LIGHT_GREEN,\n            ChartColor.LIGHT_YELLOW,\n            ChartColor.LIGHT_MAGENTA,\n            ChartColor.LIGHT_CYAN,\n            Color.lightGray,\n            ChartColor.VERY_DARK_RED,\n            ChartColor.VERY_DARK_BLUE,\n            ChartColor.VERY_DARK_GREEN,\n            ChartColor.VERY_DARK_YELLOW,\n            ChartColor.VERY_DARK_MAGENTA,\n            ChartColor.VERY_DARK_CYAN,\n            ChartColor.VERY_LIGHT_RED,\n            ChartColor.VERY_LIGHT_BLUE,\n            ChartColor.VERY_LIGHT_GREEN,\n            ChartColor.VERY_LIGHT_YELLOW,\n            ChartColor.VERY_LIGHT_MAGENTA,\n            ChartColor.VERY_LIGHT_CYAN\n        };\n    }\n",
        "begin_line": 151,
        "end_line": 189,
        "comment": "\r\n     * Convenience method to return an array of <code>Paint</code> objects that\r\n     * represent the pre-defined colors in the <code>Color<code> and \r\n     * <code>ChartColor</code> objects.\r\n     *\r\n     * @return An array of objects with the <code>Paint</code> interface.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3244
        },
        "num_failing_tests": 22
    },
    {
        "name": "DatasetUtilities.createCategoryDataset#374",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])",
        "snippet": "    public static CategoryDataset createCategoryDataset(String rowKeyPrefix,\n                                                        String columnKeyPrefix,\n                                                        Number[][] data) {\n\n        DefaultCategoryDataset result = new DefaultCategoryDataset();\n        for (int r = 0; r < data.length; r++) {\n            String rowKey = rowKeyPrefix + (r + 1);\n            for (int c = 0; c < data[r].length; c++) {\n                String columnKey = columnKeyPrefix + (c + 1);\n                result.addValue(data[r][c], rowKey, columnKey);\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 374,
        "end_line": 388,
        "comment": "\r\n     * Creates a {@link CategoryDataset} that contains a copy of the data in \r\n     * an array.\r\n     * <p>\r\n     * Row and column keys are created by appending 0, 1, 2, ... to the \r\n     * supplied prefixes.\r\n     *\r\n     * @param rowKeyPrefix  the row key prefix.\r\n     * @param columnKeyPrefix  the column key prefix.\r\n     * @param data  the data.\r\n     *\r\n     * @return The dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3243
        },
        "num_failing_tests": 9
    },
    {
        "name": "ValueAxis.ValueAxis#258",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.ValueAxis(java.lang.String, org.jfree.chart.axis.TickUnitSource)",
        "snippet": "    protected ValueAxis(String label, TickUnitSource standardTickUnits) {\n\n        super(label);\n\n        this.positiveArrowVisible = false;\n        this.negativeArrowVisible = false;\n\n        this.range = DEFAULT_RANGE;\n        this.autoRange = DEFAULT_AUTO_RANGE;\n        this.defaultAutoRange = DEFAULT_RANGE;\n\n        this.inverted = DEFAULT_INVERTED;\n        this.autoRangeMinimumSize = DEFAULT_AUTO_RANGE_MINIMUM_SIZE;\n\n        this.lowerMargin = DEFAULT_LOWER_MARGIN;\n        this.upperMargin = DEFAULT_UPPER_MARGIN;\n\n        this.fixedAutoRange = 0.0;\n\n        this.autoTickUnitSelection = DEFAULT_AUTO_TICK_UNIT_SELECTION;\n        this.standardTickUnits = standardTickUnits;\n        \n        Polygon p1 = new Polygon();\n        p1.addPoint(0, 0);\n        p1.addPoint(-2, 2);\n        p1.addPoint(2, 2);\n        \n        this.upArrow = p1;\n\n        Polygon p2 = new Polygon();\n        p2.addPoint(0, 0);\n        p2.addPoint(-2, -2);\n        p2.addPoint(2, -2);\n\n        this.downArrow = p2;\n\n        Polygon p3 = new Polygon();\n        p3.addPoint(0, 0);\n        p3.addPoint(-2, -2);\n        p3.addPoint(-2, 2);\n        \n        this.rightArrow = p3;\n\n        Polygon p4 = new Polygon();\n        p4.addPoint(0, 0);\n        p4.addPoint(2, -2);\n        p4.addPoint(2, 2);\n\n        this.leftArrow = p4;\n        \n        this.verticalTickLabels = false;\n        \n    }\n",
        "begin_line": 258,
        "end_line": 310,
        "comment": "\r\n     * Constructs a value axis.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     * @param standardTickUnits  the source for standard tick units \r\n     *                           (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3237
        },
        "num_failing_tests": 22
    },
    {
        "name": "DefaultKeyedValues2D.getRowIndex#182",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.getRowIndex(java.lang.Comparable)",
        "snippet": "    public int getRowIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        if (this.sortRowKeys) {\n            return Collections.binarySearch(this.rowKeys, key);\n        }\n        else {\n            return this.rowKeys.indexOf(key);\n        }\n    }\n",
        "begin_line": 182,
        "end_line": 192,
        "comment": "\r\n     * Returns the row index for a given key.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     *\r\n     * @return The row index.\r\n     * \r\n     * @see #getRowKey(int)\r\n     * @see #getColumnIndex(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.32
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValues2D.setValue#317",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
        "class_name": "org.jfree.data.DefaultKeyedValues2D",
        "signature": "org.jfree.data.DefaultKeyedValues2D.setValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void setValue(Number value, Comparable rowKey, \n                         Comparable columnKey) {\n\n        DefaultKeyedValues row;\n        int rowIndex = getRowIndex(rowKey);\n        \n        if (rowIndex >= 0) {\n            row = (DefaultKeyedValues) this.rows.get(rowIndex);\n        }\n        else {\n            row = new DefaultKeyedValues();\n            if (this.sortRowKeys) {\n                rowIndex = -rowIndex - 1;\n                this.rowKeys.add(rowIndex, rowKey);\n                this.rows.add(rowIndex, row);\n            }\n            else {\n                this.rowKeys.add(rowKey);\n                this.rows.add(row);\n            }\n        }\n        row.setValue(columnKey, value);\n        \n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n    }\n",
        "begin_line": 317,
        "end_line": 344,
        "comment": "\r\n     * Adds or updates a value.\r\n     *\r\n     * @param value  the value (<code>null</code> permitted).\r\n     * @param rowKey  the row key (<code>null</code> not permitted).\r\n     * @param columnKey  the column key (<code>null</code> not permitted).\r\n     * \r\n     * @see #addValue(Number, Comparable, Comparable)\r\n     * @see #removeValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.32
        },
        "num_failing_tests": 13
    },
    {
        "name": "Range.Range#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.Range(double, double)",
        "snippet": "    public Range(double lower, double upper) {\n        if (lower > upper) {\n            String msg = \"Range(double, double): require lower (\" + lower \n                + \") <= upper (\" + upper + \").\";\n            throw new IllegalArgumentException(msg);\n        }\n        this.lower = lower;\n        this.upper = upper;\n    }\n",
        "begin_line": 85,
        "end_line": 93,
        "comment": "\r\n     * Creates a new range.\r\n     *\r\n     * @param lower  the lower bound (must be <= upper bound).\r\n     * @param upper  the upper bound (must be >= lower bound).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3199
        },
        "num_failing_tests": 22
    },
    {
        "name": "LineAndShapeRenderer.getItemLineVisible#209",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemLineVisible(int, int)",
        "snippet": "    public boolean getItemLineVisible(int series, int item) {\n        Boolean flag = getSeriesLinesVisible(series);\n        if (flag != null) {\n            return flag.booleanValue();\n        }\n        else {\n            return this.baseLinesVisible;   \n        }\n    }\n",
        "begin_line": 209,
        "end_line": 217,
        "comment": "\r\n     * Returns the flag used to control whether or not the line for an item is \r\n     * visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "LineAndShapeRenderer.getSeriesLinesVisible#227",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesLinesVisible(int)",
        "snippet": "    public Boolean getSeriesLinesVisible(int series) {\n        return this.seriesLinesVisible.getBoolean(series);\n    }\n",
        "begin_line": 227,
        "end_line": 229,
        "comment": "\r\n     * Returns the flag used to control whether or not the lines for a series \r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The flag (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "LineAndShapeRenderer.getItemShapeVisible#282",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemShapeVisible(int, int)",
        "snippet": "    public boolean getItemShapeVisible(int series, int item) {\n        Boolean flag = getSeriesShapesVisible(series);\n        if (flag != null) {\n            return flag.booleanValue();\n        }\n        else {\n            return this.baseShapesVisible;   \n        }\n    }\n",
        "begin_line": 282,
        "end_line": 290,
        "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item is \r\n     * visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "LineAndShapeRenderer.getSeriesShapesVisible#300",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesShapesVisible(int)",
        "snippet": "    public Boolean getSeriesShapesVisible(int series) {\n        return this.seriesShapesVisible.getBoolean(series);\n    }\n",
        "begin_line": 300,
        "end_line": 302,
        "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series\r\n     * are visible.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "LineAndShapeRenderer.getItemShapeFilled#404",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getItemShapeFilled(int, int)",
        "snippet": "    public boolean getItemShapeFilled(int series, int item) {\n        Boolean flag = getSeriesShapesFilled(series);\n        if (flag != null) {\n            return flag.booleanValue();   \n        }\n        else {\n            return this.baseShapesFilled;   \n        }\n    }\n",
        "begin_line": 404,
        "end_line": 412,
        "comment": "\r\n     * Returns the flag used to control whether or not the shape for an item \r\n     * is filled. The default implementation passes control to the \r\n     * <code>getSeriesShapesFilled</code> method. You can override this method\r\n     * if you require different behaviour.\r\n     *\r\n     * @param series  the series index (zero-based).\r\n     * @param item  the item index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "LineAndShapeRenderer.getSeriesShapesFilled#424",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getSeriesShapesFilled(int)",
        "snippet": "    public Boolean getSeriesShapesFilled(int series) {\n        return this.seriesShapesFilled.getBoolean(series);\n    }\n",
        "begin_line": 424,
        "end_line": 426,
        "comment": "\r\n     * Returns the flag used to control whether or not the shapes for a series \r\n     * are filled. \r\n     *\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return A boolean.\r\n     * \r\n     * @see #setSeriesShapesFilled(int, Boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "LineAndShapeRenderer.getLegendItem#509",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.getLegendItem(int, int)",
        "snippet": "    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot cp = getPlot();\n        if (cp == null) {\n            return null;\n        }\n\n        if (isSeriesVisible(series) && isSeriesVisibleInLegend(series)) {\n            CategoryDataset dataset = cp.getDataset(datasetIndex);\n            String label = getLegendItemLabelGenerator().generateLabel(\n                    dataset, series);\n            String description = label;\n            String toolTipText = null; \n            if (getLegendItemToolTipGenerator() != null) {\n                toolTipText = getLegendItemToolTipGenerator().generateLabel(\n                        dataset, series);   \n            }\n            String urlText = null;\n            if (getLegendItemURLGenerator() != null) {\n                urlText = getLegendItemURLGenerator().generateLabel(\n                        dataset, series);   \n            }\n            Shape shape = lookupSeriesShape(series);\n            Paint paint = lookupSeriesPaint(series);\n            Paint fillPaint = (this.useFillPaint \n                    ? getItemFillPaint(series, 0) : paint);\n            boolean shapeOutlineVisible = this.drawOutlines;\n            Paint outlinePaint = (this.useOutlinePaint \n                    ? getItemOutlinePaint(series, 0) : paint);\n            Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n            boolean lineVisible = getItemLineVisible(series, 0);\n            boolean shapeVisible = getItemShapeVisible(series, 0);\n            LegendItem result = new LegendItem(label, description, toolTipText, \n                    urlText, shapeVisible, shape, getItemShapeFilled(series, 0),\n                    fillPaint, shapeOutlineVisible, outlinePaint, outlineStroke,\n                    lineVisible, new Line2D.Double(-7.0, 0.0, 7.0, 0.0),\n                    getItemStroke(series, 0), getItemPaint(series, 0));\n            result.setDataset(dataset);\n            result.setDatasetIndex(datasetIndex);\n            result.setSeriesKey(dataset.getRowKey(series));\n            result.setSeriesIndex(series);\n            return result;\n        }\n        return null;\n\n    }\n",
        "begin_line": 509,
        "end_line": 554,
        "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3198
        },
        "num_failing_tests": 3
    },
    {
        "name": "RangeType.RangeType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/data/RangeType.java",
        "class_name": "org.jfree.data.RangeType",
        "signature": "org.jfree.data.RangeType.RangeType(java.lang.String)",
        "snippet": "    private RangeType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3178
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.NumberAxis#196",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.NumberAxis(java.lang.String)",
        "snippet": "    public NumberAxis(String label) {\n        super(label, NumberAxis.createStandardTickUnits());\n        this.rangeType = RangeType.FULL;\n        this.autoRangeIncludesZero = DEFAULT_AUTO_RANGE_INCLUDES_ZERO;\n        this.autoRangeStickyZero = DEFAULT_AUTO_RANGE_STICKY_ZERO;\n        this.tickUnit = DEFAULT_TICK_UNIT;\n        this.numberFormatOverride = null;\n        this.markerBand = null;\n    }\n",
        "begin_line": 196,
        "end_line": 204,
        "comment": "\r\n     * Constructs a number axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3178
        },
        "num_failing_tests": 20
    },
    {
        "name": "NumberAxis.createStandardTickUnits#699",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.createStandardTickUnits()",
        "snippet": "    public static TickUnitSource createStandardTickUnits() {\n\n        TickUnits units = new TickUnits();\n        DecimalFormat df0 = new DecimalFormat(\"0.00000000\");\n        DecimalFormat df1 = new DecimalFormat(\"0.0000000\");\n        DecimalFormat df2 = new DecimalFormat(\"0.000000\");\n        DecimalFormat df3 = new DecimalFormat(\"0.00000\");\n        DecimalFormat df4 = new DecimalFormat(\"0.0000\");\n        DecimalFormat df5 = new DecimalFormat(\"0.000\");\n        DecimalFormat df6 = new DecimalFormat(\"0.00\");\n        DecimalFormat df7 = new DecimalFormat(\"0.0\");\n        DecimalFormat df8 = new DecimalFormat(\"#,##0\");\n        DecimalFormat df9 = new DecimalFormat(\"#,###,##0\");\n        DecimalFormat df10 = new DecimalFormat(\"#,###,###,##0\");\n        \n        // we can add the units in any order, the TickUnits collection will \n        // sort them...\n        units.add(new NumberTickUnit(0.0000001, df1));\n        units.add(new NumberTickUnit(0.000001, df2));\n        units.add(new NumberTickUnit(0.00001, df3));\n        units.add(new NumberTickUnit(0.0001, df4));\n        units.add(new NumberTickUnit(0.001, df5));\n        units.add(new NumberTickUnit(0.01, df6));\n        units.add(new NumberTickUnit(0.1, df7));\n        units.add(new NumberTickUnit(1, df8));\n        units.add(new NumberTickUnit(10, df8));\n        units.add(new NumberTickUnit(100, df8));\n        units.add(new NumberTickUnit(1000, df8));\n        units.add(new NumberTickUnit(10000, df8));\n        units.add(new NumberTickUnit(100000, df8));\n        units.add(new NumberTickUnit(1000000, df9));\n        units.add(new NumberTickUnit(10000000, df9));\n        units.add(new NumberTickUnit(100000000, df9));\n        units.add(new NumberTickUnit(1000000000, df10));\n        units.add(new NumberTickUnit(10000000000.0, df10));\n        units.add(new NumberTickUnit(100000000000.0, df10));\n        \n        units.add(new NumberTickUnit(0.00000025, df0));\n        units.add(new NumberTickUnit(0.0000025, df1));\n        units.add(new NumberTickUnit(0.000025, df2));\n        units.add(new NumberTickUnit(0.00025, df3));\n        units.add(new NumberTickUnit(0.0025, df4));\n        units.add(new NumberTickUnit(0.025, df5));\n        units.add(new NumberTickUnit(0.25, df6));\n        units.add(new NumberTickUnit(2.5, df7));\n        units.add(new NumberTickUnit(25, df8));\n        units.add(new NumberTickUnit(250, df8));\n        units.add(new NumberTickUnit(2500, df8));\n        units.add(new NumberTickUnit(25000, df8));\n        units.add(new NumberTickUnit(250000, df8));\n        units.add(new NumberTickUnit(2500000, df9));\n        units.add(new NumberTickUnit(25000000, df9));\n        units.add(new NumberTickUnit(250000000, df9));\n        units.add(new NumberTickUnit(2500000000.0, df10));\n        units.add(new NumberTickUnit(25000000000.0, df10));\n        units.add(new NumberTickUnit(250000000000.0, df10));\n\n        units.add(new NumberTickUnit(0.0000005, df1));\n        units.add(new NumberTickUnit(0.000005, df2));\n        units.add(new NumberTickUnit(0.00005, df3));\n        units.add(new NumberTickUnit(0.0005, df4));\n        units.add(new NumberTickUnit(0.005, df5));\n        units.add(new NumberTickUnit(0.05, df6));\n        units.add(new NumberTickUnit(0.5, df7));\n        units.add(new NumberTickUnit(5L, df8));\n        units.add(new NumberTickUnit(50L, df8));\n        units.add(new NumberTickUnit(500L, df8));\n        units.add(new NumberTickUnit(5000L, df8));\n        units.add(new NumberTickUnit(50000L, df8));\n        units.add(new NumberTickUnit(500000L, df8));\n        units.add(new NumberTickUnit(5000000L, df9));\n        units.add(new NumberTickUnit(50000000L, df9));\n        units.add(new NumberTickUnit(500000000L, df9));\n        units.add(new NumberTickUnit(5000000000L, df10));\n        units.add(new NumberTickUnit(50000000000L, df10));\n        units.add(new NumberTickUnit(500000000000L, df10));\n\n        return units;\n\n    }\n",
        "begin_line": 699,
        "end_line": 778,
        "comment": "\r\n     * Creates the standard tick units.\r\n     * <P>\r\n     * If you don't like these defaults, create your own instance of TickUnits\r\n     * and then pass it to the setStandardTickUnits() method in the\r\n     * NumberAxis class.\r\n     *\r\n     * @return The standard tick units.\r\n     * \r\n     * @see #setStandardTickUnits(TickUnitSource)\r\n     * @see #createIntegerTickUnits()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3178
        },
        "num_failing_tests": 20
    },
    {
        "name": "BarRenderer.findRangeBounds#638",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        Range result = DatasetUtilities.findRangeBounds(dataset);\n        if (result != null) {\n            if (this.includeBaseInRange) {\n                result = Range.expandToInclude(result, this.base);\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 638,
        "end_line": 646,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the \r\n     * items from the specified dataset.  This takes into account the range\r\n     * of values in the dataset, plus the flag that determines whether or not\r\n     * the base value for the bars should be included in the range.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @return The range (or <code>null</code> if the dataset is \r\n     *         <code>null</code> or empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3167
        },
        "num_failing_tests": 8
    },
    {
        "name": "DefaultKeyedValues.getValue#111",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.getValue(int)",
        "snippet": "    public Number getValue(int item) {\n        Number result = null;\n        KeyedValue kval = (KeyedValue) this.data.get(item);\n        if (kval != null) {\n            result = kval.getValue();\n        }\n        return result;\n    }\n",
        "begin_line": 111,
        "end_line": 118,
        "comment": "\r\n     * Returns a value.\r\n     *\r\n     * @param item  the item of interest (zero-based index).\r\n     *\r\n     * @return The value.\r\n     * \r\n     * @throws IndexOutOfBoundsException if <code>item</code> is out of bounds.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3138
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValues.getIndex#148",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.getIndex(java.lang.Comparable)",
        "snippet": "    public int getIndex(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int i = 0;\n        Iterator iterator = this.data.iterator();\n        while (iterator.hasNext()) {\n            KeyedValue kv = (KeyedValue) iterator.next();\n            if (kv.getKey().equals(key)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;  // key not found\n    }\n",
        "begin_line": 148,
        "end_line": 162,
        "comment": "\r\n     * Returns the index for a given key.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     *\r\n     * @return The index, or <code>-1</code> if the key is not recognised.\r\n     * \r\n     * @throws IllegalArgumentException if <code>key</code> is \r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3138
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValue.getValue#98",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "signature": "org.jfree.data.DefaultKeyedValue.getValue()",
        "snippet": "    public Number getValue() {\n        return this.value;\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\r\n     * Returns the value.\r\n     *\r\n     * @return The value (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3138
        },
        "num_failing_tests": 13
    },
    {
        "name": "Axis.Axis#273",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.Axis(java.lang.String)",
        "snippet": "    protected Axis(String label) {\n\n        this.label = label;\n        this.visible = DEFAULT_AXIS_VISIBLE;\n        this.labelFont = DEFAULT_AXIS_LABEL_FONT;\n        this.labelPaint = DEFAULT_AXIS_LABEL_PAINT;\n        this.labelInsets = DEFAULT_AXIS_LABEL_INSETS;\n        this.labelAngle = 0.0;\n        this.labelToolTip = null;\n        this.labelURL = null;\n        \n        this.axisLineVisible = true;\n        this.axisLinePaint = DEFAULT_AXIS_LINE_PAINT;\n        this.axisLineStroke = DEFAULT_AXIS_LINE_STROKE;\n        \n        this.tickLabelsVisible = DEFAULT_TICK_LABELS_VISIBLE;\n        this.tickLabelFont = DEFAULT_TICK_LABEL_FONT;\n        this.tickLabelPaint = DEFAULT_TICK_LABEL_PAINT;\n        this.tickLabelInsets = DEFAULT_TICK_LABEL_INSETS;\n        \n        this.tickMarksVisible = DEFAULT_TICK_MARKS_VISIBLE;\n        this.tickMarkStroke = DEFAULT_TICK_MARK_STROKE;\n        this.tickMarkPaint = DEFAULT_TICK_MARK_PAINT;\n        this.tickMarkInsideLength = DEFAULT_TICK_MARK_INSIDE_LENGTH;\n        this.tickMarkOutsideLength = DEFAULT_TICK_MARK_OUTSIDE_LENGTH;\n\n        this.plot = null;\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 273,
        "end_line": 303,
        "comment": "\r\n     * Constructs an axis, using default values where necessary.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.312
        },
        "num_failing_tests": 22
    },
    {
        "name": "Axis.getAxisLinePaint#574",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getAxisLinePaint()",
        "snippet": "    public Paint getAxisLinePaint() {\n        return this.axisLinePaint;\n    }\n",
        "begin_line": 574,
        "end_line": 576,
        "comment": "\r\n     * Returns the paint used to draw the axis line.\r\n     * \r\n     * @return The paint (never <code>null</code>).\r\n     * \r\n     * @see #setAxisLinePaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3063
        },
        "num_failing_tests": 8
    },
    {
        "name": "Axis.getAxisLineStroke#601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.getAxisLineStroke()",
        "snippet": "    public Stroke getAxisLineStroke() {\n        return this.axisLineStroke;\n    }\n",
        "begin_line": 601,
        "end_line": 603,
        "comment": "\r\n     * Returns the stroke used to draw the axis line.\r\n     * \r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @see #setAxisLineStroke(Stroke)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3063
        },
        "num_failing_tests": 8
    },
    {
        "name": "MeanAndStandardDeviation.MeanAndStandardDeviation#84",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/MeanAndStandardDeviation.java",
        "class_name": "org.jfree.data.statistics.MeanAndStandardDeviation",
        "signature": "org.jfree.data.statistics.MeanAndStandardDeviation.MeanAndStandardDeviation(java.lang.Number, java.lang.Number)",
        "snippet": "    public MeanAndStandardDeviation(Number mean, Number standardDeviation) {\n        this.mean = mean;\n        this.standardDeviation = standardDeviation;\n    }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "\r\n     * Creates a new mean and standard deviation record.\r\n     *\r\n     * @param mean  the mean (<code>null</code> permitted).\r\n     * @param standardDeviation  the standard deviation (<code>null</code>\r\n     *                           permitted.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.DefaultStatisticalCategoryDataset#90",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.DefaultStatisticalCategoryDataset()",
        "snippet": "    public DefaultStatisticalCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = Double.NaN;\n        this.maximumRangeValue = Double.NaN;\n        this.minimumRangeValueIncStdDev = Double.NaN;\n        this.maximumRangeValueIncStdDev = Double.NaN;\n    }\n",
        "begin_line": 90,
        "end_line": 96,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getColumnKey#214",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n",
        "begin_line": 214,
        "end_line": 216,
        "comment": "\r\n     * Returns a column key.\r\n     *\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getRowKey#245",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n",
        "begin_line": 245,
        "end_line": 247,
        "comment": "\r\n     * Returns a row key.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     *\r\n     * @return The row key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getRowCount#263",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n",
        "begin_line": 263,
        "end_line": 265,
        "comment": "\r\n     * Returns the number of rows in the table.\r\n     *\r\n     * @return The row count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getColumnCount#272",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n",
        "begin_line": 272,
        "end_line": 274,
        "comment": "\r\n     * Returns the number of columns in the table.\r\n     *\r\n     * @return The column count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.add#284",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.add(double, double, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void add(double mean, double standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        add(new Double(mean), new Double(standardDeviation), rowKey, columnKey);\n    }\n",
        "begin_line": 284,
        "end_line": 287,
        "comment": "\r\n     * Adds a mean and standard deviation to the table.\r\n     *\r\n     * @param mean  the mean.\r\n     * @param standardDeviation  the standard deviation.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.add#297",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.add(java.lang.Number, java.lang.Number, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void add(Number mean, Number standardDeviation,\n                    Comparable rowKey, Comparable columnKey) {\n        MeanAndStandardDeviation item = new MeanAndStandardDeviation(\n                mean, standardDeviation);\n        this.data.addObject(item, rowKey, columnKey);\n        double m = 0.0;\n        double sd = 0.0;\n        if (mean != null) {\n            m = mean.doubleValue();\n        }\n        if (standardDeviation != null) {\n            sd = standardDeviation.doubleValue();   \n        }\n        \n        if (!Double.isNaN(m)) {\n            if (Double.isNaN(this.maximumRangeValue) \n                    || m > this.maximumRangeValue) {\n                this.maximumRangeValue = m;\n            }\n        }\n        \n        if (!Double.isNaN(m + sd)) {\n            if (Double.isNaN(this.maximumRangeValueIncStdDev) \n                    || (m + sd) > this.maximumRangeValueIncStdDev) {\n                this.maximumRangeValueIncStdDev = m + sd;\n            }\n        }\n\n        if (!Double.isNaN(m)) {\n            if (Double.isNaN(this.minimumRangeValue) \n                    || m < this.minimumRangeValue) {\n                this.minimumRangeValue = m;\n            }\n        }\n\n        if (!Double.isNaN(m - sd)) {\n            if (Double.isNaN(this.minimumRangeValueIncStdDev) \n                    || (m - sd) < this.minimumRangeValueIncStdDev) {\n                this.minimumRangeValueIncStdDev = m - sd;\n            }\n        }\n\n        fireDatasetChanged();\n    }\n",
        "begin_line": 297,
        "end_line": 340,
        "comment": "\r\n     * Adds a mean and standard deviation to the table.\r\n     *\r\n     * @param mean  the mean.\r\n     * @param standardDeviation  the standard deviation.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultStatisticalCategoryDataset.getRangeBounds#376",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeBounds(boolean)",
        "snippet": "    public Range getRangeBounds(boolean includeInterval) {\n        Range result = null;\n        if (includeInterval) {\n            if (!Double.isNaN(this.minimumRangeValueIncStdDev) \n                    && !Double.isNaN(this.maximumRangeValueIncStdDev))\n            result = new Range(this.minimumRangeValueIncStdDev, \n                    this.maximumRangeValueIncStdDev);\n        }\n        else {\n            if (!Double.isNaN(this.minimumRangeValue) \n                    && !Double.isNaN(this.maximumRangeValue))\n            result = new Range(this.minimumRangeValue, this.maximumRangeValue);            \n        }\n        return result;\n    }\n",
        "begin_line": 376,
        "end_line": 390,
        "comment": "\r\n     * Returns the range of the values in this dataset's range.\r\n     *\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         y-interval is taken into account.\r\n     * \r\n     * @return The range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "KeyedObjects2D.setObject#222",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.setObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void setObject(Object object, \n                          Comparable rowKey, \n                          Comparable columnKey) {\n\n        KeyedObjects row;\n        int rowIndex = this.rowKeys.indexOf(rowKey);\n        if (rowIndex >= 0) {\n            row = (KeyedObjects) this.rows.get(rowIndex);\n        }\n        else {\n            this.rowKeys.add(rowKey);\n            row = new KeyedObjects();\n            this.rows.add(row);\n        }\n        row.setObject(columnKey, object);\n        int columnIndex = this.columnKeys.indexOf(columnKey);\n        if (columnIndex < 0) {\n            this.columnKeys.add(columnKey);\n        }\n\n    }\n",
        "begin_line": 222,
        "end_line": 242,
        "comment": "\r\n     * Adds or updates an object.\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 3
    },
    {
        "name": "BarRenderer3D.getXOffset#208",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.getXOffset()",
        "snippet": "    public double getXOffset() {\n        return this.xOffset;\n    }\n",
        "begin_line": 208,
        "end_line": 210,
        "comment": "\r\n     * Returns the x-offset for the 3D effect.\r\n     *\r\n     * @return The 3D effect.\r\n     * \r\n     * @see #getYOffset()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "BarRenderer3D.getYOffset#217",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.getYOffset()",
        "snippet": "    public double getYOffset() {\n        return this.yOffset;\n    }\n",
        "begin_line": 217,
        "end_line": 219,
        "comment": "\r\n     * Returns the y-offset for the 3D effect.\r\n     *\r\n     * @return The 3D effect.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "BarRenderer3D.getWallPaint#229",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.getWallPaint()",
        "snippet": "    public Paint getWallPaint() {\n        return this.wallPaint;\n    }\n",
        "begin_line": 229,
        "end_line": 231,
        "comment": "\r\n     * Returns the paint used to highlight the left and bottom wall in the plot\r\n     * background.\r\n     *\r\n     * @return The paint.\r\n     * \r\n     * @see #setWallPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "BarRenderer3D.drawBackground#286",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.drawBackground(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackground(Graphics2D g2, CategoryPlot plot, \n                               Rectangle2D dataArea) {\n\n        float x0 = (float) dataArea.getX();\n        float x1 = x0 + (float) Math.abs(this.xOffset);\n        float x3 = (float) dataArea.getMaxX();\n        float x2 = x3 - (float) Math.abs(this.xOffset);\n\n        float y0 = (float) dataArea.getMaxY();\n        float y1 = y0 - (float) Math.abs(this.yOffset);\n        float y3 = (float) dataArea.getMinY();\n        float y2 = y3 + (float) Math.abs(this.yOffset);\n\n        GeneralPath clip = new GeneralPath();\n        clip.moveTo(x0, y0);\n        clip.lineTo(x0, y2);\n        clip.lineTo(x1, y3);\n        clip.lineTo(x3, y3);\n        clip.lineTo(x3, y1);\n        clip.lineTo(x2, y0);\n        clip.closePath();\n\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                plot.getBackgroundAlpha()));\n        \n        // fill background...\n        Paint backgroundPaint = plot.getBackgroundPaint();\n        if (backgroundPaint != null) {\n            g2.setPaint(backgroundPaint);\n            g2.fill(clip);\n        }\n\n        GeneralPath leftWall = new GeneralPath();\n        leftWall.moveTo(x0, y0);\n        leftWall.lineTo(x0, y2);\n        leftWall.lineTo(x1, y3);\n        leftWall.lineTo(x1, y1);\n        leftWall.closePath();\n        g2.setPaint(getWallPaint());\n        g2.fill(leftWall);\n\n        GeneralPath bottomWall = new GeneralPath();\n        bottomWall.moveTo(x0, y0);\n        bottomWall.lineTo(x1, y1);\n        bottomWall.lineTo(x3, y1);\n        bottomWall.lineTo(x2, y0);\n        bottomWall.closePath();\n        g2.setPaint(getWallPaint());\n        g2.fill(bottomWall);\n\n        // highlight the background corners...\n        g2.setPaint(Color.lightGray);\n        Line2D corner = new Line2D.Double(x0, y0, x1, y1);\n        g2.draw(corner);\n        corner.setLine(x1, y1, x1, y3);\n        g2.draw(corner);\n        corner.setLine(x1, y1, x3, y1);\n        g2.draw(corner);\n                \n        // draw background image, if there is one...\n        Image backgroundImage = plot.getBackgroundImage();\n        if (backgroundImage != null) {\n            Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX() \n                    + getXOffset(), dataArea.getY(), \n                    dataArea.getWidth() - getXOffset(), \n                    dataArea.getHeight() - getYOffset());\n            plot.drawBackgroundImage(g2, adjusted);\n        }\n        \n        g2.setComposite(originalComposite);\n\n    }\n",
        "begin_line": 286,
        "end_line": 358,
        "comment": "\r\n     * Draws the background for the plot.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot.\r\n     * @param dataArea  the area inside the axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.refreshTicksHorizontal#1502",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.refreshTicksHorizontal(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected List refreshTicksHorizontal(Graphics2D g2,\n                                          Rectangle2D dataArea,\n                                          RectangleEdge edge) {\n\n        List result = new java.util.ArrayList();\n\n        Font tickLabelFont = getTickLabelFont();\n        g2.setFont(tickLabelFont);\n\n        if (isAutoTickUnitSelection()) {\n            selectAutoTickUnit(g2, dataArea, edge);\n        }\n\n        DateTickUnit unit = getTickUnit();\n        Date tickDate = calculateLowestVisibleTickValue(unit);\n        Date upperDate = getMaximumDate();\n\n        while (tickDate.before(upperDate)) {\n\n            if (!isHiddenValue(tickDate.getTime())) {\n                // work out the value, label and position\n                String tickLabel;\n                DateFormat formatter = getDateFormatOverride();\n                if (formatter != null) {\n                    tickLabel = formatter.format(tickDate);\n                }\n                else {\n                    tickLabel = this.tickUnit.dateToString(tickDate);\n                }\n                TextAnchor anchor = null;\n                TextAnchor rotationAnchor = null;\n                double angle = 0.0;\n                if (isVerticalTickLabels()) {\n                    anchor = TextAnchor.CENTER_RIGHT;\n                    rotationAnchor = TextAnchor.CENTER_RIGHT;\n                    if (edge == RectangleEdge.TOP) {\n                        angle = Math.PI / 2.0;\n                    }\n                    else {\n                        angle = -Math.PI / 2.0;\n                    }\n                }\n                else {\n                    if (edge == RectangleEdge.TOP) {\n                        anchor = TextAnchor.BOTTOM_CENTER;\n                        rotationAnchor = TextAnchor.BOTTOM_CENTER;\n                    }\n                    else {\n                        anchor = TextAnchor.TOP_CENTER;\n                        rotationAnchor = TextAnchor.TOP_CENTER;\n                    }\n                }\n\n                Tick tick = new DateTick(tickDate, tickLabel, anchor, \n                        rotationAnchor, angle);\n                result.add(tick);\n                tickDate = unit.addToDate(tickDate, this.timeZone);\n            }\n            else {\n                tickDate = unit.rollDate(tickDate, this.timeZone);\n                continue;\n            }\n\n            // could add a flag to make the following correction optional...\n            switch (unit.getUnit()) {\n\n                case (DateTickUnit.MILLISECOND) :\n                case (DateTickUnit.SECOND) :\n                case (DateTickUnit.MINUTE) :\n                case (DateTickUnit.HOUR) :\n                case (DateTickUnit.DAY) :\n                    break;\n                case (DateTickUnit.MONTH) :\n                    tickDate = calculateDateForPosition(new Month(tickDate,\n                            this.timeZone), this.tickMarkPosition);\n                    break;\n                case(DateTickUnit.YEAR) :\n                    tickDate = calculateDateForPosition(new Year(tickDate, \n                            this.timeZone), this.tickMarkPosition);\n                    break;\n\n                default: break;\n\n            }\n\n        }\n        return result;\n\n    }\n",
        "begin_line": 1502,
        "end_line": 1590,
        "comment": "\r\n     * Recalculates the ticks for the date axis.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area in which the data is to be drawn.\r\n     * @param edge  the location of the axis.\r\n     *\r\n     * @return A list of ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.3015
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextTitle.TextTitle#188",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font)",
        "snippet": "    public TextTitle(String text, Font font) {\n        this(text, font, TextTitle.DEFAULT_TEXT_PAINT, Title.DEFAULT_POSITION,\n                Title.DEFAULT_HORIZONTAL_ALIGNMENT, \n                Title.DEFAULT_VERTICAL_ALIGNMENT, Title.DEFAULT_PADDING);\n    }\n",
        "begin_line": 188,
        "end_line": 192,
        "comment": "\r\n     * Creates a new title, using default attributes where necessary.\r\n     *\r\n     * @param text  the title text (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2941
        },
        "num_failing_tests": 14
    },
    {
        "name": "TextTitle.TextTitle#207",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.TextTitle(java.lang.String, java.awt.Font, java.awt.Paint, org.jfree.chart.util.RectangleEdge, org.jfree.chart.util.HorizontalAlignment, org.jfree.chart.util.VerticalAlignment, org.jfree.chart.util.RectangleInsets)",
        "snippet": "    public TextTitle(String text, Font font, Paint paint, \n                     RectangleEdge position, \n                     HorizontalAlignment horizontalAlignment, \n                     VerticalAlignment verticalAlignment,\n                     RectangleInsets padding) {\n\n        super(position, horizontalAlignment, verticalAlignment, padding);\n        \n        if (text == null) {\n            throw new NullPointerException(\"Null 'text' argument.\");\n        }\n        if (font == null) {\n            throw new NullPointerException(\"Null 'font' argument.\");\n        }\n        if (paint == null) {\n            throw new NullPointerException(\"Null 'paint' argument.\");\n        }\n        this.text = text;\n        this.font = font;\n        this.paint = paint;\n        // the textAlignment and the horizontalAlignment are separate things,\n        // but it makes sense for the default textAlignment to match the\n        // title's horizontal alignment...\n        this.textAlignment = horizontalAlignment;\n        this.backgroundPaint = null;\n        this.content = null;\n        this.toolTipText = null;\n        this.urlText = null;\n        \n    }\n",
        "begin_line": 207,
        "end_line": 236,
        "comment": "\r\n     * Creates a new title.\r\n     *\r\n     * @param text  the text for the title (<code>null</code> not permitted).\r\n     * @param font  the title font (<code>null</code> not permitted).\r\n     * @param paint  the title paint (<code>null</code> not permitted).\r\n     * @param position  the title position (<code>null</code> not permitted).\r\n     * @param horizontalAlignment  the horizontal alignment (<code>null</code> \r\n     *                             not permitted).\r\n     * @param verticalAlignment  the vertical alignment (<code>null</code> not \r\n     *                           permitted).\r\n     * @param padding  the space to leave around the outside of the title.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2941
        },
        "num_failing_tests": 14
    },
    {
        "name": "AbstractCategoryItemRenderer.findRangeBounds#672",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        return DatasetUtilities.findRangeBounds(dataset);\n    }\n",
        "begin_line": 672,
        "end_line": 674,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     *\r\n     * @return The range (or <code>null</code> if the dataset is\r\n     *         <code>null</code> or empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2925
        },
        "num_failing_tests": 8
    },
    {
        "name": "DefaultKeyedValues.DefaultKeyedValues#89",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.DefaultKeyedValues()",
        "snippet": "    public DefaultKeyedValues() {\n        this.data = new java.util.ArrayList();\n    }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\r\n     * Creates a new collection (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2922
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValues.setValue#238",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValues.java",
        "class_name": "org.jfree.data.DefaultKeyedValues",
        "signature": "org.jfree.data.DefaultKeyedValues.setValue(java.lang.Comparable, java.lang.Number)",
        "snippet": "    public void setValue(Comparable key, Number value) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            DefaultKeyedValue kv = (DefaultKeyedValue) this.data.get(keyIndex);\n            kv.setValue(value);\n        }\n        else {\n            KeyedValue kv = new DefaultKeyedValue(key, value);\n            this.data.add(kv);\n        }\n    }\n",
        "begin_line": 238,
        "end_line": 251,
        "comment": "\r\n     * Updates an existing value, or adds a new value to the collection.\r\n     *\r\n     * @param key  the key (<code>null</code> not permitted).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2922
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValue.DefaultKeyedValue#79",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "signature": "org.jfree.data.DefaultKeyedValue.DefaultKeyedValue(java.lang.Comparable, java.lang.Number)",
        "snippet": "    public DefaultKeyedValue(Comparable key, Number value) {\n        this.key = key;\n        this.value = value;\n    }\n",
        "begin_line": 79,
        "end_line": 82,
        "comment": "\r\n     * Creates a new (key, value) item.\r\n     *\r\n     * @param key  the key (should be immutable).\r\n     * @param value  the value (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2922
        },
        "num_failing_tests": 13
    },
    {
        "name": "DefaultKeyedValue.getKey#89",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DefaultKeyedValue.java",
        "class_name": "org.jfree.data.DefaultKeyedValue",
        "signature": "org.jfree.data.DefaultKeyedValue.getKey()",
        "snippet": "    public Comparable getKey() {\n        return this.key;\n    }\n",
        "begin_line": 89,
        "end_line": 91,
        "comment": "\r\n     * Returns the key.\r\n     *\r\n     * @return The key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2922
        },
        "num_failing_tests": 13
    },
    {
        "name": "BarRenderer.BarRenderer#193",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.BarRenderer()",
        "snippet": "    public BarRenderer() {\n        super();\n        this.base = 0.0;\n        this.includeBaseInRange = true;\n        this.itemMargin = DEFAULT_ITEM_MARGIN;\n        this.drawBarOutline = true;\n        this.maximumBarWidth = 1.0;  \n            // 100 percent, so it will not apply unless changed\n        this.positiveItemLabelPositionFallback = null;\n        this.negativeItemLabelPositionFallback = null;\n        this.gradientPaintTransformer = new StandardGradientPaintTransformer();\n        this.minimumBarLength = 0.0;\n    }\n",
        "begin_line": 193,
        "end_line": 205,
        "comment": "\r\n     * Creates a new bar renderer with default settings.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.289
        },
        "num_failing_tests": 13
    },
    {
        "name": "KeyedObjects2D.getRowCount#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.rowKeys.size();\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\r\n     * Returns the row count.\r\n     *\r\n     * @return The row count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.286
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObjects2D.getColumnCount#94",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.columnKeys.size();\n    }\n",
        "begin_line": 94,
        "end_line": 96,
        "comment": "\r\n     * Returns the column count.\r\n     *\r\n     * @return The column count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.286
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObjects2D.getColumnKey#158",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return (Comparable) this.columnKeys.get(column);\n    }\n",
        "begin_line": 158,
        "end_line": 160,
        "comment": "\r\n     * Returns the key for a given column.\r\n     *\r\n     * @param column  the column.\r\n     *\r\n     * @return The key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.286
        },
        "num_failing_tests": 3
    },
    {
        "name": "RectangleInsets.RectangleInsets#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(double, double, double, double)",
        "snippet": "    public RectangleInsets(double top, double left, double bottom, \n            double right) {\n        this(UnitType.ABSOLUTE, top, left, bottom, right);   \n    }\n",
        "begin_line": 77,
        "end_line": 80,
        "comment": "\n     * Creates a new instance with the specified insets (as 'absolute' units).\n     * \n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2774
        },
        "num_failing_tests": 22
    },
    {
        "name": "RectangleInsets.RectangleInsets#92",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.RectangleInsets(org.jfree.chart.util.UnitType, double, double, double, double)",
        "snippet": "    public RectangleInsets(UnitType unitType, double top, double left, \n                           double bottom, double right) {\n        if (unitType == null) {\n            throw new IllegalArgumentException(\"Null 'unitType' argument.\");\n        }\n        this.unitType = unitType;\n        this.top = top;\n        this.bottom = bottom;\n        this.left = left;\n        this.right = right;\n    }\n",
        "begin_line": 92,
        "end_line": 102,
        "comment": "\n     * Creates a new instance.\n     * \n     * @param unitType  absolute or relative units (<code>null</code> not \n     *                  permitted).\n     * @param top  the top insets.\n     * @param left  the left insets.\n     * @param bottom  the bottom insets.\n     * @param right  the right insets.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2774
        },
        "num_failing_tests": 22
    },
    {
        "name": "JFreeChart.JFreeChart#326",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.JFreeChart(org.jfree.chart.plot.Plot)",
        "snippet": "    public JFreeChart(Plot plot) {\n        this(null, null, plot, true);\n    }\n",
        "begin_line": 326,
        "end_line": 328,
        "comment": "\r\n     * Creates a new chart based on the supplied plot.  The chart will have\r\n     * a legend added automatically, but no title (although you can easily add\r\n     * one later).  \r\n     * <br><br>\r\n     * Note that the  {@link ChartFactory} class contains a range \r\n     * of static methods that will return ready-made charts, and often this\r\n     * is a more convenient way to create charts than using this constructor.\r\n     *\r\n     * @param plot  the plot (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2767
        },
        "num_failing_tests": 8
    },
    {
        "name": "UnitType.UnitType#71",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.UnitType(java.lang.String)",
        "snippet": "    private UnitType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2754
        },
        "num_failing_tests": 22
    },
    {
        "name": "LegendItem.LegendItem#223",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/LegendItem.java",
        "class_name": "org.jfree.chart.LegendItem",
        "signature": "org.jfree.chart.LegendItem.LegendItem(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.awt.Shape, java.awt.Paint, java.awt.Stroke, java.awt.Paint)",
        "snippet": "    public LegendItem(String label, String description, \n                      String toolTipText, String urlText, \n                      Shape shape, Paint fillPaint, \n                      Stroke outlineStroke, Paint outlinePaint) {\n        \n        this(label, description, toolTipText, urlText,\n                /* shape visible = */ true, shape, \n                /* shape filled = */ true, fillPaint, \n                /* shape outlined = */ true, outlinePaint, outlineStroke,\n                /* line visible */ false, UNUSED_SHAPE, UNUSED_STROKE,\n                Color.black);\n\n    }\n",
        "begin_line": 223,
        "end_line": 235,
        "comment": "\r\n     * Creates a legend item with a filled and outlined shape.\r\n     * \r\n     * @param label  the label (<code>null</code> not permitted).\r\n     * @param description  the description (<code>null</code> permitted).\r\n     * @param toolTipText  the tool tip text (<code>null</code> permitted).\r\n     * @param urlText  the URL text (<code>null</code> permitted).\r\n     * @param shape  the shape (<code>null</code> not permitted).\r\n     * @param fillPaint  the paint used to fill the shape (<code>null</code>\r\n     *                   not permitted).\r\n     * @param outlineStroke  the outline stroke (<code>null</code> not \r\n     *                       permitted).\r\n     * @param outlinePaint  the outline paint (<code>null</code> not \r\n     *                      permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2665
        },
        "num_failing_tests": 5
    },
    {
        "name": "KeyedObjects2D.KeyedObjects2D#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.KeyedObjects2D()",
        "snippet": "    public KeyedObjects2D() {\n        this.rowKeys = new java.util.ArrayList();\n        this.columnKeys = new java.util.ArrayList();\n        this.rows = new java.util.ArrayList();\n    }\n",
        "begin_line": 74,
        "end_line": 78,
        "comment": "\r\n     * Creates a new instance (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2611
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObjects2D.getRowKey#127",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        return (Comparable) this.rowKeys.get(row);\n    }\n",
        "begin_line": 127,
        "end_line": 129,
        "comment": "\r\n     * Returns the key for a given row.\r\n     *\r\n     * @param row  the row index (zero based).\r\n     *\r\n     * @return The row index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2611
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObjects2D.addObject#209",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects2D.java",
        "class_name": "org.jfree.data.KeyedObjects2D",
        "signature": "org.jfree.data.KeyedObjects2D.addObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addObject(Object object, \n                          Comparable rowKey, \n                          Comparable columnKey) {\n        setObject(object, rowKey, columnKey);\n    }\n",
        "begin_line": 209,
        "end_line": 213,
        "comment": "\r\n     * Adds an object to the table.  Performs the same function as setObject().\r\n     *\r\n     * @param object  the object.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2611
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObjects.KeyedObjects#67",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.KeyedObjects()",
        "snippet": "    public KeyedObjects() {\n        this.data = new java.util.ArrayList();\n    }\n",
        "begin_line": 67,
        "end_line": 69,
        "comment": "\r\n     * Creates a new collection (initially empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2611
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObjects.getIndex#125",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.getIndex(java.lang.Comparable)",
        "snippet": "    public int getIndex(Comparable key) {\n        int result = -1;\n        int i = 0;\n        Iterator iterator = this.data.iterator();\n        while (iterator.hasNext()) {\n            KeyedObject ko = (KeyedObject) iterator.next();\n            if (ko.getKey().equals(key)) {\n                result = i;\n            }\n            i++;\n        }\n        return result;\n    }\n",
        "begin_line": 125,
        "end_line": 137,
        "comment": "\r\n     * Returns the index for a given key.\r\n     *\r\n     * @param key  the key.\r\n     *\r\n     * @return The index, or <code>-1</code> if the key is unrecognised.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2611
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObjects.setObject#185",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObjects.java",
        "class_name": "org.jfree.data.KeyedObjects",
        "signature": "org.jfree.data.KeyedObjects.setObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public void setObject(Comparable key, Object object) {\n        int keyIndex = getIndex(key);\n        if (keyIndex >= 0) {\n            KeyedObject ko = (KeyedObject) this.data.get(keyIndex);\n            ko.setObject(object);\n        }\n        else {\n            KeyedObject ko = new KeyedObject(key, object);\n            this.data.add(ko);\n        }\n    }\n",
        "begin_line": 185,
        "end_line": 195,
        "comment": "\r\n     * Replaces an existing object, or adds a new object to the collection.\r\n     * This is the same as the {@link #addObject(Comparable, Object)} \r\n     * method.\r\n     *\r\n     * @param key  the key.\r\n     * @param object  the object.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2611
        },
        "num_failing_tests": 3
    },
    {
        "name": "KeyedObject.KeyedObject#74",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.KeyedObject(java.lang.Comparable, java.lang.Object)",
        "snippet": "    public KeyedObject(Comparable key, Object object) {\n        this.key = key;\n        this.object = object;\n    }\n",
        "begin_line": 74,
        "end_line": 77,
        "comment": "\r\n     * Creates a new (key, object) pair.\r\n     *\r\n     * @param key  the key.\r\n     * @param object  the object (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2611
        },
        "num_failing_tests": 3
    },
    {
        "name": "StrokeList.StrokeList#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.StrokeList()",
        "snippet": "    public StrokeList() {\n        super();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "ShapeList.ShapeList#59",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.ShapeList()",
        "snippet": "    public ShapeList() {\n        super();\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "PaintList.PaintList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.PaintList()",
        "snippet": "    public PaintList() {\n        super();\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "BooleanList.BooleanList#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.BooleanList()",
        "snippet": "    public BooleanList() {\n    }\n",
        "begin_line": 62,
        "end_line": 63,
        "comment": "\n     * Creates a new list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractRenderer.AbstractRenderer#313",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.AbstractRenderer()",
        "snippet": "    public AbstractRenderer() {\n\n        this.seriesVisibleList = new BooleanList();\n        this.baseSeriesVisible = true;\n\n        this.seriesVisibleInLegendList = new BooleanList();\n        this.baseSeriesVisibleInLegend = true;\n\n        this.paintList = new PaintList();\n        this.basePaint = DEFAULT_PAINT;\n        this.autoPopulateSeriesPaint = true;\n\n        this.fillPaintList = new PaintList();\n        this.baseFillPaint = Color.white;\n        this.autoPopulateSeriesFillPaint = false;\n\n        this.outlinePaintList = new PaintList();\n        this.baseOutlinePaint = DEFAULT_OUTLINE_PAINT;\n        this.autoPopulateSeriesOutlinePaint = false;\n\n        this.strokeList = new StrokeList();\n        this.baseStroke = DEFAULT_STROKE;\n        this.autoPopulateSeriesStroke = false;\n\n        this.outlineStrokeList = new StrokeList();\n        this.baseOutlineStroke = DEFAULT_OUTLINE_STROKE;\n        this.autoPopulateSeriesOutlineStroke = false;\n\n        this.shapeList = new ShapeList();\n        this.baseShape = DEFAULT_SHAPE;\n        this.autoPopulateSeriesShape = true;\n\n        this.itemLabelsVisibleList = new BooleanList();\n        this.baseItemLabelsVisible = false;\n\n        this.itemLabelFontList = new ObjectList();\n        this.baseItemLabelFont = new Font(\"SansSerif\", Font.PLAIN, 10);\n\n        this.itemLabelPaintList = new PaintList();\n        this.baseItemLabelPaint = Color.black;\n\n        this.positiveItemLabelPositionList = new ObjectList();\n        this.basePositiveItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER);\n        \n        this.negativeItemLabelPositionList = new ObjectList();\n        this.baseNegativeItemLabelPosition = new ItemLabelPosition(\n                ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER);\n\n        this.createEntitiesList = new BooleanList();\n        this.baseCreateEntities = true;\n        \n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 313,
        "end_line": 367,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor, \n                             TextAnchor textAnchor) {\n        this(itemLabelAnchor, textAnchor, TextAnchor.CENTER, 0.0);    \n    }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\r\n     * Creates a new position record (with zero rotation).\r\n     * \r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not \r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "ItemLabelPosition.ItemLabelPosition#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.ItemLabelPosition(org.jfree.chart.labels.ItemLabelAnchor, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public ItemLabelPosition(ItemLabelAnchor itemLabelAnchor, \n                             TextAnchor textAnchor,\n                             TextAnchor rotationAnchor,\n                             double angle) {\n              \n        if (itemLabelAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'itemLabelAnchor' argument.\");\n        }\n        if (textAnchor == null) {\n            throw new IllegalArgumentException(\"Null 'textAnchor' argument.\");\n        }\n        if (rotationAnchor == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'rotationAnchor' argument.\");\n        }\n        \n        this.itemLabelAnchor = itemLabelAnchor;\n        this.textAnchor = textAnchor;\n        this.rotationAnchor = rotationAnchor;\n        this.angle = angle;\n    \n    }\n",
        "begin_line": 108,
        "end_line": 130,
        "comment": "\r\n     * Creates a new position record.  The item label anchor is a point \r\n     * relative to the data item (dot, bar or other visual item) on a chart.  \r\n     * The item label is aligned by aligning the text anchor with the \r\n     * item label anchor.\r\n     * \r\n     * @param itemLabelAnchor  the item label anchor (<code>null</code> not \r\n     *                         permitted).\r\n     * @param textAnchor  the text anchor (<code>null</code> not permitted).\r\n     * @param rotationAnchor  the rotation anchor (<code>null</code> not \r\n     *                        permitted).\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "ItemLabelAnchor.ItemLabelAnchor#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.ItemLabelAnchor(java.lang.String)",
        "snippet": "    private ItemLabelAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2536
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.size#148",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.size()",
        "snippet": "    public int size() {\n        return this.size;\n    }\n",
        "begin_line": 148,
        "end_line": 150,
        "comment": "\n     * Returns the size of the list.\n     *\n     * @return The size of the list.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2479
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractRenderer.setBasePositiveItemLabelPosition#1891",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)",
        "snippet": "    public void setBasePositiveItemLabelPosition(ItemLabelPosition position) {\n        // defer argument checking...\n        setBasePositiveItemLabelPosition(position, true);\n    }\n",
        "begin_line": 1891,
        "end_line": 1894,
        "comment": "\r\n     * Sets the base positive item label position.\r\n     * \r\n     * @param position  the position (<code>null</code> not permitted).\r\n     * \r\n     * @see #getBasePositiveItemLabelPosition()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 8
    },
    {
        "name": "AbstractRenderer.setBasePositiveItemLabelPosition#1905",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition, boolean)",
        "snippet": "    public void setBasePositiveItemLabelPosition(ItemLabelPosition position, \n                                                 boolean notify) {\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");   \n        }\n        this.basePositiveItemLabelPosition = position;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 1905,
        "end_line": 1914,
        "comment": "\r\n     * Sets the base positive item label position and, if requested, sends a \r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     * \r\n     * @param position  the position (<code>null</code> not permitted).\r\n     * @param notify  notify registered listeners?\r\n     * \r\n     * @see #getBasePositiveItemLabelPosition()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 8
    },
    {
        "name": "AbstractRenderer.setBaseNegativeItemLabelPosition#2008",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)",
        "snippet": "    public void setBaseNegativeItemLabelPosition(ItemLabelPosition position) {\n        setBaseNegativeItemLabelPosition(position, true);\n    }\n",
        "begin_line": 2008,
        "end_line": 2010,
        "comment": "\r\n     * Sets the base item label position for negative values and sends a \r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     * \r\n     * @param position  the position (<code>null</code> not permitted).\r\n     * \r\n     * @see #getBaseNegativeItemLabelPosition()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 8
    },
    {
        "name": "AbstractRenderer.setBaseNegativeItemLabelPosition#2021",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition, boolean)",
        "snippet": "    public void setBaseNegativeItemLabelPosition(ItemLabelPosition position, \n                                                 boolean notify) {\n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");   \n        }\n        this.baseNegativeItemLabelPosition = position;\n        if (notify) {\n            fireChangeEvent();\n        }\n    }\n",
        "begin_line": 2021,
        "end_line": 2030,
        "comment": "\r\n     * Sets the base negative item label position and, if requested, sends a \r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     * \r\n     * @param position  the position (<code>null</code> not permitted).\r\n     * @param notify  notify registered listeners?\r\n     * \r\n     * @see #getBaseNegativeItemLabelPosition()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 8
    },
    {
        "name": "AreaRenderer.getLegendItem#152",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AreaRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AreaRenderer",
        "signature": "org.jfree.chart.renderer.category.AreaRenderer.getLegendItem(int, int)",
        "snippet": "    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        // if there is no plot, there is no dataset to access...\n        CategoryPlot cp = getPlot();\n        if (cp == null) {\n            return null;\n        }\n        \n        // check that a legend item needs to be displayed...\n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = cp.getDataset(datasetIndex);\n        String label = getLegendItemLabelGenerator().generateLabel(dataset, \n                series);\n        String description = label;\n        String toolTipText = null; \n        if (getLegendItemToolTipGenerator() != null) {\n            toolTipText = getLegendItemToolTipGenerator().generateLabel(\n                    dataset, series);   \n        }\n        String urlText = null;\n        if (getLegendItemURLGenerator() != null) {\n            urlText = getLegendItemURLGenerator().generateLabel(dataset, \n                    series);   \n        }\n        Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n\n        LegendItem result = new LegendItem(label, description, toolTipText, \n                urlText, shape, paint, outlineStroke, outlinePaint);\n        result.setDataset(dataset);\n        result.setDatasetIndex(datasetIndex);\n        result.setSeriesKey(dataset.getRowKey(series));\n        result.setSeriesIndex(series);\n        return result;\n\n    }\n",
        "begin_line": 152,
        "end_line": 192,
        "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCategoryItemRenderer.getLegendItem#1146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItem(int, int)",
        "snippet": "    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot p = getPlot();\n        if (p == null) {\n            return null;\n        }\n\n        // check that a legend item needs to be displayed...\n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = p.getDataset(datasetIndex);\n        String label = this.legendItemLabelGenerator.generateLabel(dataset,\n                series);\n        String description = label;\n        String toolTipText = null;\n        if (this.legendItemToolTipGenerator != null) {\n            toolTipText = this.legendItemToolTipGenerator.generateLabel(\n                    dataset, series);\n        }\n        String urlText = null;\n        if (this.legendItemURLGenerator != null) {\n            urlText = this.legendItemURLGenerator.generateLabel(dataset,\n                    series);\n        }\n        Shape shape = lookupSeriesShape(series);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n\n        LegendItem item = new LegendItem(label, description, toolTipText,\n                urlText, shape, paint, outlineStroke, outlinePaint);\n        item.setSeriesKey(dataset.getRowKey(series));\n        item.setSeriesIndex(series);\n        item.setDataset(dataset);\n        item.setDatasetIndex(datasetIndex);\n        return item;\n    }\n",
        "begin_line": 1146,
        "end_line": 1184,
        "comment": "\r\n     * Returns a legend item for a series.  This default implementation will\r\n     * return <code>null</code> if {@link #isSeriesVisible(int)} or \r\n     * {@link #isSeriesVisibleInLegend(int)} returns <code>false</code>.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item (possibly <code>null</code>).\r\n     *\r\n     * @see #getLegendItems()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2462
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartFactory.createBarChart#582",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createBarChart(String title,\n                                            String categoryAxisLabel,\n                                            String valueAxisLabel,\n                                            CategoryDataset dataset,\n                                            PlotOrientation orientation,\n                                            boolean legend,\n                                            boolean tooltips,\n                                            boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        BarRenderer renderer = new BarRenderer();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            ItemLabelPosition position1 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE3, TextAnchor.CENTER_LEFT);\n            renderer.setBasePositiveItemLabelPosition(position1);\n            ItemLabelPosition position2 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE9, TextAnchor.CENTER_RIGHT);\n            renderer.setBaseNegativeItemLabelPosition(position2);\n         }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            ItemLabelPosition position1 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE12, TextAnchor.BOTTOM_CENTER);\n            renderer.setBasePositiveItemLabelPosition(position1);\n            ItemLabelPosition position2 = new ItemLabelPosition(\n                    ItemLabelAnchor.OUTSIDE6, TextAnchor.TOP_CENTER);\n            renderer.setBaseNegativeItemLabelPosition(position2);\n        }\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 582,
        "end_line": 630,
        "comment": "\r\n     * Creates a bar chart.  The chart object returned by this method uses a \r\n     * {@link CategoryPlot} instance as the plot, with a {@link CategoryAxis} \r\n     * for the domain axis, a {@link NumberAxis} as the range axis, and a \r\n     * {@link BarRenderer} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis \r\n     *                        (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical) \r\n     *                     (<code>null</code> not permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A bar chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2417
        },
        "num_failing_tests": 3
    },
    {
        "name": "ChartChangeEventType.ChartChangeEventType#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEventType.java",
        "class_name": "org.jfree.chart.event.ChartChangeEventType",
        "signature": "org.jfree.chart.event.ChartChangeEventType.ChartChangeEventType(java.lang.String)",
        "snippet": "    private ChartChangeEventType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.24
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object)",
        "snippet": "    public ChartChangeEvent(Object source) {\n        this(source, null, ChartChangeEventType.GENERAL);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, \r\n     *                an axis etc.)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.24
        },
        "num_failing_tests": 22
    },
    {
        "name": "ChartChangeEvent.ChartChangeEvent#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.ChartChangeEvent(java.lang.Object, org.jfree.chart.JFreeChart, org.jfree.chart.event.ChartChangeEventType)",
        "snippet": "    public ChartChangeEvent(Object source, JFreeChart chart, \n                            ChartChangeEventType type) {\n        super(source);\n        this.chart = chart;\n        this.type = type;\n    }\n",
        "begin_line": 93,
        "end_line": 98,
        "comment": "\r\n     * Creates a new chart change event.\r\n     *\r\n     * @param source  the source of the event (could be the chart, a title, an\r\n                      axis etc.)\r\n     * @param chart  the chart that generated the event.\r\n     * @param type  the type of event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.24
        },
        "num_failing_tests": 22
    },
    {
        "name": "ShapeList.getShape#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.getShape(int)",
        "snippet": "    public Shape getShape(int index) {\n        return (Shape) get(index);\n    }\n",
        "begin_line": 70,
        "end_line": 72,
        "comment": "\n     * Returns a {@link Shape} object from the list.\n     *\n     * @param index the index (zero-based).\n     *\n     * @return The object.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2384
        },
        "num_failing_tests": 5
    },
    {
        "name": "AbstractRenderer.lookupSeriesShape#1377",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesShape(int)",
        "snippet": "    public Shape lookupSeriesShape(int series) {\n\n        // look up the shape list\n        Shape result = this.shapeList.getShape(series);\n        if (result == null && this.autoPopulateSeriesShape) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                result = supplier.getNextShape();\n                this.shapeList.setShape(series, result);\n            }\n        }\n        if (result == null) {\n            result = this.baseShape;\n        }\n        return result;\n\n    }\n",
        "begin_line": 1377,
        "end_line": 1393,
        "comment": "\r\n     * Returns a shape used to represent the items in a series.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The shape (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2384
        },
        "num_failing_tests": 5
    },
    {
        "name": "DefaultDrawingSupplier.getNextShape#276",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.getNextShape()",
        "snippet": "    public Shape getNextShape() {\n        Shape result = this.shapeSequence[\n                this.shapeIndex % this.shapeSequence.length];\n        this.shapeIndex++;\n        return result;\n    }\n",
        "begin_line": 276,
        "end_line": 281,
        "comment": "\r\n     * Returns the next shape in the sequence.\r\n     *\r\n     * @return The shape.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2384
        },
        "num_failing_tests": 5
    },
    {
        "name": "NumberAxis.draw#650",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public AxisState draw(Graphics2D g2, \n                          double cursor,\n                          Rectangle2D plotArea, \n                          Rectangle2D dataArea, \n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState) {\n\n        AxisState state = null;\n        // if the axis is not visible, don't draw it...\n        if (!isVisible()) {\n            state = new AxisState(cursor);\n            // even though the axis is not visible, we need ticks for the \n            // gridlines...\n            List ticks = refreshTicks(g2, state, dataArea, edge); \n            state.setTicks(ticks);\n            return state;\n        }\n\n        // draw the tick marks and labels...\n        state = drawTickMarksAndLabels(g2, cursor, plotArea, dataArea, edge);\n\n//        // draw the marker band (if there is one)...\n//        if (getMarkerBand() != null) {\n//            if (edge == RectangleEdge.BOTTOM) {\n//                cursor = cursor - getMarkerBand().getHeight(g2);\n//            }\n//            getMarkerBand().draw(g2, plotArea, dataArea, 0, cursor);\n//        }\n        \n        // draw the axis label...\n        state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state,\n                plotState);\n\n        return state;\n        \n    }\n",
        "begin_line": 650,
        "end_line": 685,
        "comment": "\r\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     *\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param cursor  the cursor location.\r\n     * @param plotArea  the area within which the axes and data should be drawn\r\n     *                  (<code>null</code> not permitted).\r\n     * @param dataArea  the area within which the data should be drawn \r\n     *                  (<code>null</code> not permitted).\r\n     * @param edge  the location of the axis (<code>null</code> not permitted).\r\n     * @param plotState  collects information about the plot \r\n     *                   (<code>null</code> permitted).\r\n     * \r\n     * @return The axis state (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2375
        },
        "num_failing_tests": 6
    },
    {
        "name": "ObjectList.ObjectList#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectList.java",
        "class_name": "org.jfree.chart.util.ObjectList",
        "signature": "org.jfree.chart.util.ObjectList.ObjectList()",
        "snippet": "    public ObjectList() {\n    }\n",
        "begin_line": 60,
        "end_line": 61,
        "comment": "\n     * Default constructor.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2375
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#76",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList()",
        "snippet": "    protected AbstractObjectList() {\n        this(DEFAULT_INITIAL_CAPACITY);\n    }\n",
        "begin_line": 76,
        "end_line": 78,
        "comment": "\n     * Creates a new list with the default initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2375
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity) {\n        this (initialCapacity, initialCapacity);\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\n     * Creates a new list.\n     *\n     * @param initialCapacity  the initial capacity.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2375
        },
        "num_failing_tests": 22
    },
    {
        "name": "AbstractObjectList.AbstractObjectList#95",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.AbstractObjectList(int, int)",
        "snippet": "    protected AbstractObjectList(int initialCapacity, int increment) {\n        this.objects = new Object[initialCapacity];\n        this.increment = increment;\n    }\n",
        "begin_line": 95,
        "end_line": 98,
        "comment": "\n     * Creates a new list.\n     * \n     * @param initialCapacity  the initial capacity.\n     * @param increment  the increment.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2375
        },
        "num_failing_tests": 22
    },
    {
        "name": "TextAnchor.TextAnchor#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.TextAnchor(java.lang.String)",
        "snippet": "    private TextAnchor(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 126,
        "end_line": 128,
        "comment": "\n     * Private constructor.\n     *\n     * @param name  the name.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2345
        },
        "num_failing_tests": 22
    },
    {
        "name": "Range.expandToInclude#227",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.expandToInclude(org.jfree.data.Range, double)",
        "snippet": "    public static Range expandToInclude(Range range, double value) {\n        if (range == null) {\n            return new Range(value, value);\n        }\n        if (value < range.getLowerBound()) {\n            return new Range(value, range.getUpperBound());\n        }\n        else if (value > range.getUpperBound()) {\n            return new Range(range.getLowerBound(), value);\n        }\n        else {\n            return range;\n        }\n    }\n",
        "begin_line": 227,
        "end_line": 240,
        "comment": "\r\n     * Returns a range that includes all the values in the specified \r\n     * <code>range</code> AND the specified <code>value</code>.\r\n     * \r\n     * @param range  the range (<code>null</code> permitted).\r\n     * @param value  the value that must be included.\r\n     * \r\n     * @return A range.\r\n     * \r\n     * @since 1.0.1\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2273
        },
        "num_failing_tests": 5
    },
    {
        "name": "LegendGraphic.getLine#395",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendGraphic.java",
        "class_name": "org.jfree.chart.title.LegendGraphic",
        "signature": "org.jfree.chart.title.LegendGraphic.getLine()",
        "snippet": "    public Shape getLine() {\n        return this.line;\n    }\n",
        "begin_line": 395,
        "end_line": 397,
        "comment": "\r\n     * Returns the line centered about (0, 0).\r\n     * \r\n     * @return The line.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2261
        },
        "num_failing_tests": 3
    },
    {
        "name": "ShapeList.setShape#80",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.setShape(int, java.awt.Shape)",
        "snippet": "    public void setShape(int index, Shape shape) {\n        set(index, shape);\n    }\n",
        "begin_line": 80,
        "end_line": 82,
        "comment": "\n     * Sets the {@link Shape} for an item in the list.  The list is expanded if necessary.\n     *\n     * @param index  the index (zero-based).\n     * @param shape  the {@link Shape}.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2223
        },
        "num_failing_tests": 5
    },
    {
        "name": "AbstractRenderer.fireChangeEvent#2319",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent()",
        "snippet": "    protected void fireChangeEvent() {\n        \n        // the commented out code would be better, but only if \n        // RendererChangeEvent is immutable, which it isn't.  See if there is\n        // a way to fix this...\n        \n        //if (this.event == null) {\n        //    this.event = new RendererChangeEvent(this);\n        //}\n        //notifyListeners(this.event);\n        \n        notifyListeners(new RendererChangeEvent(this));\n    }\n",
        "begin_line": 2319,
        "end_line": 2331,
        "comment": "\r\n     * Sends a {@link RendererChangeEvent} to all registered listeners.\r\n     * \r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2184
        },
        "num_failing_tests": 8
    },
    {
        "name": "KeyedObject.getKey#84",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyedObject.java",
        "class_name": "org.jfree.data.KeyedObject",
        "signature": "org.jfree.data.KeyedObject.getKey()",
        "snippet": "    public Comparable getKey() {\n        return this.key;\n    }\n",
        "begin_line": 84,
        "end_line": 86,
        "comment": "\r\n     * Returns the key.\r\n     *\r\n     * @return The key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.dateToString#221",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.dateToString(java.util.Date)",
        "snippet": "    public String dateToString(Date date) {\n        return this.formatter.format(date);\n    }\n",
        "begin_line": 221,
        "end_line": 223,
        "comment": "\r\n     * Formats a date using the tick unit's formatter.\r\n     *\r\n     * @param date  the date.\r\n     *\r\n     * @return The formatted date.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.addToDate#252",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.addToDate(java.util.Date, java.util.TimeZone)",
        "snippet": "    public Date addToDate(Date base, TimeZone zone) {\n        Calendar calendar = Calendar.getInstance(zone);\n        calendar.setTime(base);\n        calendar.add(getCalendarField(this.unit), this.count);\n        return calendar.getTime();\n    }\n",
        "begin_line": 252,
        "end_line": 257,
        "comment": "\r\n     * Calculates a new date by adding this unit to the base date.\r\n     *\r\n     * @param base  the base date.\r\n     * @param zone  the time zone for the date calculation.\r\n     *\r\n     * @return A new date one unit after the base date.\r\n     * \r\n     * @since 1.0.6\r\n     * @see #addToDate(Date)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTick.DateTick#70",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTick.java",
        "class_name": "org.jfree.chart.axis.DateTick",
        "signature": "org.jfree.chart.axis.DateTick.DateTick(java.util.Date, java.lang.String, org.jfree.chart.text.TextAnchor, org.jfree.chart.text.TextAnchor, double)",
        "snippet": "    public DateTick(Date date, String label,\n                    TextAnchor textAnchor, TextAnchor rotationAnchor, \n                    double angle) {\n                        \n        super(date.getTime(), label, textAnchor, rotationAnchor, angle);\n        this.date = date;\n            \n    }\n",
        "begin_line": 70,
        "end_line": 77,
        "comment": "\r\n     * Creates a new date tick.\r\n     * \r\n     * @param date  the date.\r\n     * @param label  the label.\r\n     * @param textAnchor  the part of the label that is aligned to the anchor \r\n     *                    point.\r\n     * @param rotationAnchor  defines the rotation point relative to the text.\r\n     * @param angle  the rotation angle (in radians).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.containsDomainValue#258",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DefaultTimeline.containsDomainValue(java.util.Date)",
        "snippet": "        public boolean containsDomainValue(Date date) {\n            return true;\n        }\n",
        "begin_line": 258,
        "end_line": 260,
        "comment": "\r\n         * Returns <code>true</code> if the timeline includes the specified \r\n         * domain value.\r\n         *\r\n         * @param date  the date.\r\n         *\r\n         * @return <code>true</code>.\r\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.getTickUnit#421",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.getTickUnit()",
        "snippet": "    public DateTickUnit getTickUnit() {\n        return this.tickUnit;\n    }\n",
        "begin_line": 421,
        "end_line": 423,
        "comment": "\r\n     * Returns the tick unit for the axis.\r\n     * <p>\r\n     * Note: if the <code>autoTickUnitSelection</code> flag is \r\n     * <code>true</code> the tick unit may be changed while the axis is being \r\n     * drawn, so in that case the return value from this method may be\r\n     * irrelevant if the method is called before the axis has been drawn.\r\n     *\r\n     * @return The tick unit (possibly <code>null</code>).\r\n     * \r\n     * @see #setTickUnit(DateTickUnit)\r\n     * @see ValueAxis#isAutoTickUnitSelection()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.getDateFormatOverride#467",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.getDateFormatOverride()",
        "snippet": "    public DateFormat getDateFormatOverride() {\n        return this.dateFormatOverride;\n    }\n",
        "begin_line": 467,
        "end_line": 469,
        "comment": "\r\n     * Returns the date format override.  If this is non-null, then it will be\r\n     * used to format the dates on the axis.\r\n     *\r\n     * @return The formatter (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.isHiddenValue#686",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.isHiddenValue(long)",
        "snippet": "    public boolean isHiddenValue(long millis) {\n        return (!this.timeline.containsDomainValue(new Date(millis)));\n    }\n",
        "begin_line": 686,
        "end_line": 688,
        "comment": "\r\n     * Returns <code>true</code> if the axis hides this value, and \r\n     * <code>false</code> otherwise.\r\n     *\r\n     * @param millis  the data value.\r\n     *\r\n     * @return A value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.valueToJava2D#701",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.valueToJava2D(double, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public double valueToJava2D(double value, Rectangle2D area, \n                                RectangleEdge edge) {\n        \n        value = this.timeline.toTimelineValue((long) value);\n\n        DateRange range = (DateRange) getRange();\n        double axisMin = this.timeline.toTimelineValue(range.getLowerDate());\n        double axisMax = this.timeline.toTimelineValue(range.getUpperDate());\n        double result = 0.0;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            double minX = area.getX();\n            double maxX = area.getMaxX();\n            if (isInverted()) {\n                result = maxX + ((value - axisMin) / (axisMax - axisMin)) \n                         * (minX - maxX);\n            }\n            else {\n                result = minX + ((value - axisMin) / (axisMax - axisMin)) \n                         * (maxX - minX);\n            }\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            double minY = area.getMinY();\n            double maxY = area.getMaxY();\n            if (isInverted()) {\n                result = minY + (((value - axisMin) / (axisMax - axisMin)) \n                         * (maxY - minY));\n            }\n            else {\n                result = maxY - (((value - axisMin) / (axisMax - axisMin)) \n                         * (maxY - minY));\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 701,
        "end_line": 736,
        "comment": "\r\n     * Translates the data value to the display coordinates (Java 2D User Space)\r\n     * of the chart.\r\n     *\r\n     * @param value  the date to be plotted.\r\n     * @param area  the rectangle (in Java2D space) where the data is to be \r\n     *              plotted.\r\n     * @param edge  the axis location.\r\n     *\r\n     * @return The coordinate corresponding to the supplied data value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.calculateLowestVisibleTickValue#805",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.calculateLowestVisibleTickValue(org.jfree.chart.axis.DateTickUnit)",
        "snippet": "    public Date calculateLowestVisibleTickValue(DateTickUnit unit) {\n        return nextStandardDate(getMinimumDate(), unit);\n    }\n",
        "begin_line": 805,
        "end_line": 807,
        "comment": "\r\n     * Calculates the value of the lowest visible tick on the axis.\r\n     *\r\n     * @param unit  date unit to use.\r\n     *\r\n     * @return The value of the lowest visible tick on the axis.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.nextStandardDate#1044",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.nextStandardDate(java.util.Date, org.jfree.chart.axis.DateTickUnit)",
        "snippet": "    protected Date nextStandardDate(Date date, DateTickUnit unit) {\n        Date previous = previousStandardDate(date, unit);\n        Calendar calendar = Calendar.getInstance(this.timeZone);\n        calendar.setTime(previous);\n        calendar.add(unit.getCalendarField(), unit.getCount());\n        return calendar.getTime();\n    }\n",
        "begin_line": 1044,
        "end_line": 1050,
        "comment": "\r\n     * Returns the first \"standard\" date (based on the specified field and \r\n     * units).\r\n     *\r\n     * @param date  the reference date.\r\n     * @param unit  the date tick unit.\r\n     *\r\n     * @return The next \"standard\" date.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.selectAutoTickUnit#1262",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.selectAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void selectAutoTickUnit(Graphics2D g2, \n                                      Rectangle2D dataArea,\n                                      RectangleEdge edge) {\n\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            selectHorizontalAutoTickUnit(g2, dataArea, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            selectVerticalAutoTickUnit(g2, dataArea, edge);\n        }\n\n    }\n",
        "begin_line": 1262,
        "end_line": 1273,
        "comment": "\r\n     * Selects an appropriate tick value for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from an array of 'standard'\r\n     * tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area defined by the axes.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.selectHorizontalAutoTickUnit#1284",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.selectHorizontalAutoTickUnit(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    protected void selectHorizontalAutoTickUnit(Graphics2D g2, \n                                                Rectangle2D dataArea, \n                                                RectangleEdge edge) {\n\n        long shift = 0;\n        if (this.timeline instanceof SegmentedTimeline) {\n            shift = ((SegmentedTimeline) this.timeline).getStartTime();\n        }\n        double zero = valueToJava2D(shift + 0.0, dataArea, edge);\n        double tickLabelWidth \n            = estimateMaximumTickLabelWidth(g2, getTickUnit());\n\n        // start with the current tick unit...\n        TickUnitSource tickUnits = getStandardTickUnits();\n        TickUnit unit1 = tickUnits.getCeilingTickUnit(getTickUnit());\n        double x1 = valueToJava2D(shift + unit1.getSize(), dataArea, edge);\n        double unit1Width = Math.abs(x1 - zero);\n\n        // then extrapolate...\n        double guess = (tickLabelWidth / unit1Width) * unit1.getSize();\n        DateTickUnit unit2 = (DateTickUnit) tickUnits.getCeilingTickUnit(guess);\n        double x2 = valueToJava2D(shift + unit2.getSize(), dataArea, edge);\n        double unit2Width = Math.abs(x2 - zero);\n        tickLabelWidth = estimateMaximumTickLabelWidth(g2, unit2);\n        if (tickLabelWidth > unit2Width) {\n            unit2 = (DateTickUnit) tickUnits.getLargerTickUnit(unit2);\n        }\n        setTickUnit(unit2, false, false);\n    }\n",
        "begin_line": 1284,
        "end_line": 1312,
        "comment": "\r\n     * Selects an appropriate tick size for the axis.  The strategy is to\r\n     * display as many ticks as possible (selected from a collection of \r\n     * 'standard' tick units) without the labels overlapping.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param dataArea  the area defined by the axes.\r\n     * @param edge  the axis location.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.estimateMaximumTickLabelWidth#1373",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.estimateMaximumTickLabelWidth(java.awt.Graphics2D, org.jfree.chart.axis.DateTickUnit)",
        "snippet": "    private double estimateMaximumTickLabelWidth(Graphics2D g2, \n                                                 DateTickUnit unit) {\n\n        RectangleInsets tickLabelInsets = getTickLabelInsets();\n        double result = tickLabelInsets.getLeft() + tickLabelInsets.getRight();\n\n        Font tickLabelFont = getTickLabelFont();\n        FontRenderContext frc = g2.getFontRenderContext();\n        LineMetrics lm = tickLabelFont.getLineMetrics(\"ABCxyz\", frc);\n        if (isVerticalTickLabels()) {\n            // all tick labels have the same width (equal to the height of \n            // the font)...\n            result += lm.getHeight();\n        }\n        else {\n            // look at lower and upper bounds...\n            DateRange range = (DateRange) getRange();\n            Date lower = range.getLowerDate();\n            Date upper = range.getUpperDate();\n            String lowerStr = null;\n            String upperStr = null;\n            DateFormat formatter = getDateFormatOverride();\n            if (formatter != null) {\n                lowerStr = formatter.format(lower);\n                upperStr = formatter.format(upper);\n            }\n            else {\n                lowerStr = unit.dateToString(lower);\n                upperStr = unit.dateToString(upper);\n            }\n            FontMetrics fm = g2.getFontMetrics(tickLabelFont);\n            double w1 = fm.stringWidth(lowerStr);\n            double w2 = fm.stringWidth(upperStr);\n            result += Math.max(w1, w2);\n        }\n\n        return result;\n\n    }\n",
        "begin_line": 1373,
        "end_line": 1411,
        "comment": "\r\n     * Estimates the maximum width of the tick labels, assuming the specified \r\n     * tick unit is used.\r\n     * <P>\r\n     * Rather than computing the string bounds of every tick on the axis, we\r\n     * just look at two values: the lower bound and the upper bound for the \r\n     * axis.  These two values will usually be representative.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param unit  the tick unit to use for calculation.\r\n     *\r\n     * @return The estimated maximum width of the tick labels.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.refreshTicks#1477",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge)",
        "snippet": "    public List refreshTicks(Graphics2D g2,\n                             AxisState state,\n                             Rectangle2D dataArea,\n                             RectangleEdge edge) {\n\n        List result = null;\n        if (RectangleEdge.isTopOrBottom(edge)) {\n            result = refreshTicksHorizontal(g2, dataArea, edge);\n        }\n        else if (RectangleEdge.isLeftOrRight(edge)) {\n            result = refreshTicksVertical(g2, dataArea, edge);\n        }\n        return result;\n\n    }\n",
        "begin_line": 1477,
        "end_line": 1491,
        "comment": "\r\n     * Calculates the positions of the tick labels for the axis, storing the \r\n     * results in the tick label list (ready for drawing).\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param state  the axis state.\r\n     * @param dataArea  the area in which the plot should be drawn.\r\n     * @param edge  the location of the axis.\r\n     *\r\n     * @return A list of ticks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.draw#1681",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.draw(java.awt.Graphics2D, double, java.awt.geom.Rectangle2D, java.awt.geom.Rectangle2D, org.jfree.chart.util.RectangleEdge, org.jfree.chart.plot.PlotRenderingInfo)",
        "snippet": "    public AxisState draw(Graphics2D g2, \n                          double cursor,\n                          Rectangle2D plotArea, \n                          Rectangle2D dataArea, \n                          RectangleEdge edge,\n                          PlotRenderingInfo plotState) {\n\n        // if the axis is not visible, don't draw it...\n        if (!isVisible()) {\n            AxisState state = new AxisState(cursor);\n            // even though the axis is not visible, we need to refresh ticks in\n            // case the grid is being drawn...\n            List ticks = refreshTicks(g2, state, dataArea, edge);\n            state.setTicks(ticks);\n            return state;\n        }\n\n        // draw the tick marks and labels...\n        AxisState state = drawTickMarksAndLabels(g2, cursor, plotArea, \n                dataArea, edge);\n\n        // draw the axis label (note that 'state' is passed in *and* \n        // returned)...\n        state = drawLabel(getLabel(), g2, plotArea, dataArea, edge, state,\n                plotState);\n\n        return state;\n\n    }\n",
        "begin_line": 1681,
        "end_line": 1709,
        "comment": "\r\n     * Draws the axis on a Java 2D graphics device (such as the screen or a \r\n     * printer).\r\n     *\r\n     * @param g2  the graphics device (<code>null</code> not permitted).\r\n     * @param cursor  the cursor location.\r\n     * @param plotArea  the area within which the axes and data should be \r\n     *                  drawn (<code>null</code> not permitted).\r\n     * @param dataArea  the area within which the data should be drawn \r\n     *                  (<code>null</code> not permitted).\r\n     * @param edge  the location of the axis (<code>null</code> not permitted).\r\n     * @param plotState  collects information about the plot \r\n     *                   (<code>null</code> permitted).\r\n     *\r\n     * @return The axis state (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.createBufferedImage#1351",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.createBufferedImage(int, int)",
        "snippet": "    public BufferedImage createBufferedImage(int width, int height) {\n        return createBufferedImage(width, height, null);\n    }\n",
        "begin_line": 1351,
        "end_line": 1353,
        "comment": "\r\n     * Creates and returns a buffered image into which the chart has been drawn.\r\n     *\r\n     * @param width  the width.\r\n     * @param height  the height.\r\n     *\r\n     * @return A buffered image.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 2
    },
    {
        "name": "SimpleTimePeriod.SimpleTimePeriod#87",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "signature": "org.jfree.data.time.SimpleTimePeriod.SimpleTimePeriod(java.util.Date, java.util.Date)",
        "snippet": "    public SimpleTimePeriod(Date start, Date end) {\n        if (start.getTime() > end.getTime()) {\n            throw new IllegalArgumentException(\"Requires end >= start.\");\n        }\n        this.start = start;\n        this.end = end;\n    }\n",
        "begin_line": 87,
        "end_line": 93,
        "comment": "\r\n     * Creates a new time allocation.\r\n     *\r\n     * @param start  the start date/time (<code>null</code> not permitted).\r\n     * @param end  the end date/time (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleTimePeriod.getStart#100",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "signature": "org.jfree.data.time.SimpleTimePeriod.getStart()",
        "snippet": "    public Date getStart() {\n        return this.start;\n    }\n",
        "begin_line": 100,
        "end_line": 102,
        "comment": "\r\n     * Returns the start date/time.\r\n     *\r\n     * @return The start date/time (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "SimpleTimePeriod.getEnd#109",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SimpleTimePeriod.java",
        "class_name": "org.jfree.data.time.SimpleTimePeriod",
        "signature": "org.jfree.data.time.SimpleTimePeriod.getEnd()",
        "snippet": "    public Date getEnd() {\n        return this.end;\n    }\n",
        "begin_line": 109,
        "end_line": 111,
        "comment": "\r\n     * Returns the end date/time.\r\n     *\r\n     * @return The end date/time (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataPackageResources.getContents#59",
        "is_bug": false,
        "src_path": "source/org/jfree/data/resources/DataPackageResources.java",
        "class_name": "org.jfree.data.resources.DataPackageResources",
        "signature": "org.jfree.data.resources.DataPackageResources.getContents()",
        "snippet": "    public Object[][] getContents() {\n        return CONTENTS;\n    }\n",
        "begin_line": 59,
        "end_line": 61,
        "comment": "\r\n     * Returns the array of strings in the resource bundle.\r\n     *\r\n     * @return The localised resources.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.findStackedRangeBounds#1303",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset, org.jfree.data.KeyToGroupMap)",
        "snippet": "    public static Range findStackedRangeBounds(CategoryDataset dataset,\n                                               KeyToGroupMap map) {\n    \n        Range result = null;\n        if (dataset != null) {\n            \n            // create an array holding the group indices...\n            int[] groupIndex = new int[dataset.getRowCount()];\n            for (int i = 0; i < dataset.getRowCount(); i++) {\n                groupIndex[i] = map.getGroupIndex(\n                    map.getGroup(dataset.getRowKey(i))\n                );   \n            }\n            \n            // minimum and maximum for each group...\n            int groupCount = map.getGroupCount();\n            double[] minimum = new double[groupCount];\n            double[] maximum = new double[groupCount];\n            \n            int categoryCount = dataset.getColumnCount();\n            for (int item = 0; item < categoryCount; item++) {\n                double[] positive = new double[groupCount];\n                double[] negative = new double[groupCount];\n                int seriesCount = dataset.getRowCount();\n                for (int series = 0; series < seriesCount; series++) {\n                    Number number = dataset.getValue(series, item);\n                    if (number != null) {\n                        double value = number.doubleValue();\n                        if (value > 0.0) {\n                            positive[groupIndex[series]] \n                                 = positive[groupIndex[series]] + value;\n                        }\n                        if (value < 0.0) {\n                            negative[groupIndex[series]] \n                                 = negative[groupIndex[series]] + value;\n                                 // '+', remember value is negative\n                        }\n                    }\n                }\n                for (int g = 0; g < groupCount; g++) {\n                    minimum[g] = Math.min(minimum[g], negative[g]);\n                    maximum[g] = Math.max(maximum[g], positive[g]);\n                }\n            }\n            for (int j = 0; j < groupCount; j++) {\n                result = Range.combine(\n                    result, new Range(minimum[j], maximum[j])\n                );\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 1303,
        "end_line": 1355,
        "comment": "\r\n     * Returns the minimum and maximum values for the dataset's range \r\n     * (y-values), assuming that the series in one category are stacked.\r\n     *\r\n     * @param dataset  the dataset.\r\n     * @param map  a structure that maps series to groups.\r\n     *\r\n     * @return The value range (<code>null</code> if the dataset contains no \r\n     *         values).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.TaskSeriesCollection#89",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.TaskSeriesCollection()",
        "snippet": "    public TaskSeriesCollection() {\n        this.keys = new java.util.ArrayList();\n        this.data = new java.util.ArrayList();\n    }\n",
        "begin_line": 89,
        "end_line": 92,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getRowCount#157",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.data.size();\n    }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\r\n     * Returns the number of rows (series) in the collection.\r\n     *\r\n     * @return The series count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getColumnCount#175",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.keys.size();\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\r\n     * Returns the number of column in the dataset.\r\n     *\r\n     * @return The column count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getColumnKey#195",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int index) {\n        return (Comparable) this.keys.get(index);\n    }\n",
        "begin_line": 195,
        "end_line": 197,
        "comment": "\r\n     * Returns a column key.\r\n     *\r\n     * @param index  the column index.\r\n     *\r\n     * @return The column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getRowIndex#217",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getRowIndex(java.lang.Comparable)",
        "snippet": "    public int getRowIndex(Comparable rowKey) {\n        int result = -1;\n        int count = this.data.size();\n        for (int i = 0; i < count; i++) {\n            TaskSeries s = (TaskSeries) this.data.get(i);\n            if (s.getKey().equals(rowKey)) {\n                result = i;\n                break;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 217,
        "end_line": 228,
        "comment": "\r\n     * Returns the row index for the given row key.\r\n     *\r\n     * @param rowKey  the row key.\r\n     *\r\n     * @return The index.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getRowKey#237",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int index) {\n        TaskSeries series = (TaskSeries) this.data.get(index);\n        return series.getKey();\n    }\n",
        "begin_line": 237,
        "end_line": 240,
        "comment": "\r\n     * Returns the key for a row.\r\n     *\r\n     * @param index  the row index (zero-based).\r\n     *\r\n     * @return The key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.add#249",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.add(org.jfree.data.gantt.TaskSeries)",
        "snippet": "    public void add(TaskSeries series) {\n        if (series == null) {\n            throw new IllegalArgumentException(\"Null 'series' argument.\");\n        }\n        this.data.add(series);\n        series.addChangeListener(this);\n\n        // look for any keys that we don't already know about...\n        Iterator iterator = series.getTasks().iterator();\n        while (iterator.hasNext()) {\n            Task task = (Task) iterator.next();\n            String key = task.getDescription();\n            int index = this.keys.indexOf(key);\n            if (index < 0) {\n                this.keys.add(key);\n            }\n        }\n        fireDatasetChanged();\n    }\n",
        "begin_line": 249,
        "end_line": 267,
        "comment": "\r\n     * Adds a series to the dataset and sends a \r\n     * {@link org.jfree.data.general.DatasetChangeEvent} to all registered \r\n     * listeners.\r\n     *\r\n     * @param series  the series (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getStartValue#362",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getStartValue(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public Number getStartValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        int row = getRowIndex(rowKey);\n        TaskSeries series = (TaskSeries) this.data.get(row);\n        Task task = series.get(columnKey.toString());\n        if (task != null) {\n            TimePeriod duration = task.getDuration();\n            if (duration != null) {\n                result = new Long(duration.getStart().getTime());\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 362,
        "end_line": 374,
        "comment": "\r\n     * Returns the start value for a task.  This is a date/time value, measured\r\n     * in milliseconds since 1-Jan-1970.\r\n     *\r\n     * @param rowKey  the series.\r\n     * @param columnKey  the category.\r\n     *\r\n     * @return The start value (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getStartValue#384",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getStartValue(int, int)",
        "snippet": "    public Number getStartValue(int row, int column) {\n        Comparable rowKey = getRowKey(row);\n        Comparable columnKey = getColumnKey(column);\n        return getStartValue(rowKey, columnKey);\n    }\n",
        "begin_line": 384,
        "end_line": 388,
        "comment": "\r\n     * Returns the start value for a task.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The start value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getEndValue#399",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getEndValue(java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public Number getEndValue(Comparable rowKey, Comparable columnKey) {\n        Number result = null;\n        int row = getRowIndex(rowKey);\n        TaskSeries series = (TaskSeries) this.data.get(row);\n        Task task = series.get(columnKey.toString());\n        if (task != null) {\n            TimePeriod duration = task.getDuration();\n            if (duration != null) {\n                result = new Long(duration.getEnd().getTime());\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 399,
        "end_line": 411,
        "comment": "\r\n     * Returns the end value for a task.  This is a date/time value, measured\r\n     * in milliseconds since 1-Jan-1970.\r\n     *\r\n     * @param rowKey  the series.\r\n     * @param columnKey  the category.\r\n     *\r\n     * @return The end value (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeriesCollection.getEndValue#421",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeriesCollection.java",
        "class_name": "org.jfree.data.gantt.TaskSeriesCollection",
        "signature": "org.jfree.data.gantt.TaskSeriesCollection.getEndValue(int, int)",
        "snippet": "    public Number getEndValue(int row, int column) {\n        Comparable rowKey = getRowKey(row);\n        Comparable columnKey = getColumnKey(column);\n        return getEndValue(rowKey, columnKey);\n    }\n",
        "begin_line": 421,
        "end_line": 425,
        "comment": "\r\n     * Returns the end value for a task.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The end value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeries.TaskSeries#70",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeries.java",
        "class_name": "org.jfree.data.gantt.TaskSeries",
        "signature": "org.jfree.data.gantt.TaskSeries.TaskSeries(java.lang.String)",
        "snippet": "    public TaskSeries(String name) {\n        super(name);\n        this.tasks = new java.util.ArrayList();\n    }\n",
        "begin_line": 70,
        "end_line": 73,
        "comment": "\r\n     * Constructs a new series with the specified name.\r\n     *\r\n     * @param name  the series name (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeries.add#82",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeries.java",
        "class_name": "org.jfree.data.gantt.TaskSeries",
        "signature": "org.jfree.data.gantt.TaskSeries.add(org.jfree.data.gantt.Task)",
        "snippet": "    public void add(Task task) {\n        if (task == null) {\n            throw new IllegalArgumentException(\"Null 'task' argument.\");\n        }\n        this.tasks.add(task);\n        fireSeriesChanged();\n    }\n",
        "begin_line": 82,
        "end_line": 88,
        "comment": "\r\n     * Adds a task to the series and sends a \r\n     * {@link org.jfree.data.general.SeriesChangeEvent} to all registered \r\n     * listeners.\r\n     *\r\n     * @param task  the task (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeries.get#139",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeries.java",
        "class_name": "org.jfree.data.gantt.TaskSeries",
        "signature": "org.jfree.data.gantt.TaskSeries.get(java.lang.String)",
        "snippet": "    public Task get(String description) {\n        Task result = null;\n        int count = this.tasks.size();\n        for (int i = 0; i < count; i++) {\n            Task t = (Task) this.tasks.get(i);\n            if (t.getDescription().equals(description)) {\n                result = t;\n                break;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 139,
        "end_line": 150,
        "comment": "\r\n     * Returns the task in the series that has the specified description.\r\n     * \r\n     * @param description  the name (<code>null</code> not permitted).\r\n     * \r\n     * @return The task (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TaskSeries.getTasks#157",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/TaskSeries.java",
        "class_name": "org.jfree.data.gantt.TaskSeries",
        "signature": "org.jfree.data.gantt.TaskSeries.getTasks()",
        "snippet": "    public List getTasks() {\n        return Collections.unmodifiableList(this.tasks);\n    }\n",
        "begin_line": 157,
        "end_line": 159,
        "comment": "\r\n     * Returns an unmodifialble list of the tasks in the series.\r\n     *\r\n     * @return The tasks.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Task.Task#86",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "class_name": "org.jfree.data.gantt.Task",
        "signature": "org.jfree.data.gantt.Task.Task(java.lang.String, org.jfree.data.time.TimePeriod)",
        "snippet": "    public Task(String description, TimePeriod duration) {\n        if (description == null) {\n            throw new IllegalArgumentException(\"Null 'description' argument.\");\n        }\n        this.description = description;\n        this.duration = duration;\n        this.percentComplete = null;\n        this.subtasks = new java.util.ArrayList();\n    }\n",
        "begin_line": 86,
        "end_line": 94,
        "comment": "\r\n     * Creates a new task.\r\n     *\r\n     * @param description  the task description (<code>null</code> not \r\n     *                     permitted).\r\n     * @param duration  the task duration (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Task.getDescription#113",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "class_name": "org.jfree.data.gantt.Task",
        "signature": "org.jfree.data.gantt.Task.getDescription()",
        "snippet": "    public String getDescription() {\n        return this.description;\n    }\n",
        "begin_line": 113,
        "end_line": 115,
        "comment": "\r\n     * Returns the task description.\r\n     *\r\n     * @return The task description (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "Task.getDuration#134",
        "is_bug": false,
        "src_path": "source/org/jfree/data/gantt/Task.java",
        "class_name": "org.jfree.data.gantt.Task",
        "signature": "org.jfree.data.gantt.Task.getDuration()",
        "snippet": "    public TimePeriod getDuration() {\n        return this.duration;\n    }\n",
        "begin_line": 134,
        "end_line": 136,
        "comment": "\r\n     * Returns the duration (actual or estimated) of the task.\r\n     *\r\n     * @return The task duration (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset#87",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][], double[][])",
        "snippet": "    public DefaultIntervalCategoryDataset(double[][] starts, double[][] ends) {\n        this(DataUtilities.createNumberArray2D(starts),\n                DataUtilities.createNumberArray2D(ends));\n    }\n",
        "begin_line": 87,
        "end_line": 90,
        "comment": "\r\n     * Creates a new dataset.\r\n     *\r\n     * @param starts  the starting values for the intervals.\r\n     * @param ends  the ending values for the intervals.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset#103",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(java.lang.Number[][], java.lang.Number[][])",
        "snippet": "    public DefaultIntervalCategoryDataset(Number[][] starts, Number[][] ends) {\n        this(null, null, starts, ends);\n    }\n",
        "begin_line": 103,
        "end_line": 105,
        "comment": "\r\n     * Constructs a dataset and populates it with data from the array.\r\n     * <p>\r\n     * The arrays are indexed as data[series][category].  Series and category\r\n     * names are automatically generated - you can change them using the\r\n     * {@link #setSeriesKeys(Comparable[])} and \r\n     * {@link #setCategoryKeys(Comparable[])} methods.\r\n     *\r\n     * @param starts  the start values data.\r\n     * @param ends  the end values data.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset#136",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(java.lang.Comparable[], java.lang.Comparable[], java.lang.Number[][], java.lang.Number[][])",
        "snippet": "    public DefaultIntervalCategoryDataset(Comparable[] seriesKeys,\n                                          Comparable[] categoryKeys,\n                                          Number[][] starts,\n                                          Number[][] ends) {\n\n        this.startData = starts;\n        this.endData = ends;\n\n        if (starts != null && ends != null) {\n\n            String baseName = \"org.jfree.data.resources.DataPackageResources\";\n            ResourceBundle resources = ResourceBundle.getBundle(baseName);\n\n            int seriesCount = starts.length;\n            if (seriesCount != ends.length) {\n                String errMsg = \"DefaultIntervalCategoryDataset: the number \"\n                    + \"of series in the start value dataset does \"\n                    + \"not match the number of series in the end \"\n                    + \"value dataset.\";\n                throw new IllegalArgumentException(errMsg);\n            }\n            if (seriesCount > 0) {\n\n                // set up the series names...\n                if (seriesKeys != null) {\n\n                    if (seriesKeys.length != seriesCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of series keys does not \"\n                                + \"match the number of series in the data.\");\n                    }\n\n                    this.seriesKeys = seriesKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"series.default-prefix\") + \" \";\n                    this.seriesKeys = generateKeys(seriesCount, prefix);\n                }\n\n                // set up the category names...\n                int categoryCount = starts[0].length;\n                if (categoryCount != ends[0].length) {\n                    String errMsg = \"DefaultIntervalCategoryDataset: the \"\n                                + \"number of categories in the start value \"\n                                + \"dataset does not match the number of \"\n                                + \"categories in the end value dataset.\";\n                    throw new IllegalArgumentException(errMsg);\n                }\n                if (categoryKeys != null) {\n                    if (categoryKeys.length != categoryCount) {\n                        throw new IllegalArgumentException(\n                                \"The number of category keys does not match \"\n                                + \"the number of categories in the data.\");\n                    }\n                    this.categoryKeys = categoryKeys;\n                }\n                else {\n                    String prefix = resources.getString(\n                            \"categories.default-prefix\") + \" \";\n                    this.categoryKeys = generateKeys(categoryCount, prefix);\n                }\n\n            }\n            else {\n                this.seriesKeys = null;\n                this.categoryKeys = null;\n            }\n        }\n\n    }\n",
        "begin_line": 136,
        "end_line": 206,
        "comment": "\r\n     * Constructs a DefaultIntervalCategoryDataset, populates it with data\r\n     * from the arrays, and uses the supplied names for the series and the\r\n     * supplied objects for the categories.\r\n     *\r\n     * @param seriesKeys the series keys.\r\n     * @param categoryKeys  the categories.\r\n     * @param starts  the start values data, indexed as data[series][category].\r\n     * @param ends  the end values data, indexed as data[series][category].\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getSeriesCount#216",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount()",
        "snippet": "    public int getSeriesCount() {\n        int result = 0;\n        if (this.startData != null) {\n            result = this.startData.length;\n        }\n        return result;\n    }\n",
        "begin_line": 216,
        "end_line": 222,
        "comment": "\r\n     * Returns the number of series in the dataset (possibly zero).\r\n     *\r\n     * @return The number of series in the dataset.\r\n     * \r\n     * @see #getRowCount()\r\n     * @see #getCategoryCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getCategoryCount#289",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryCount()",
        "snippet": "    public int getCategoryCount() {\n        int result = 0;\n        if (this.startData != null) {\n            if (getSeriesCount() > 0) {\n                result = this.startData[0].length;\n            }\n        }\n        return result;\n    }\n",
        "begin_line": 289,
        "end_line": 297,
        "comment": "\r\n     * Returns the number of categories in the dataset.\r\n     *\r\n     * @return The number of categories in the dataset.\r\n     * \r\n     * @see #getColumnCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getStartValue#423",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getStartValue(int, int)",
        "snippet": "    public Number getStartValue(int series, int category) {\n\n        // check arguments...\n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"series index out of range.\");\n        }\n\n        if ((category < 0) || (category >= getCategoryCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"category index out of range.\");\n        }\n\n        // fetch the value...\n        return this.startData[series][category];\n\n    }\n",
        "begin_line": 423,
        "end_line": 441,
        "comment": "\r\n     * Returns the start data value for one category in a series.\r\n     *\r\n     * @param series  the required series (zero based index).\r\n     * @param category  the required category.\r\n     *\r\n     * @return The start data value for one category in a series \r\n     *         (possibly <code>null</code>).\r\n     *         \r\n     * @see #getStartValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getEndValue#475",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getEndValue(int, int)",
        "snippet": "    public Number getEndValue(int series, int category) {\n        if ((series < 0) || (series >= getSeriesCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"series index out of range.\");\n        }\n\n        if ((category < 0) || (category >= getCategoryCount())) {\n            throw new IllegalArgumentException(\n                \"DefaultIntervalCategoryDataset.getValue(): \"\n                + \"category index out of range.\");\n        }\n\n        return this.endData[series][category];\n    }\n",
        "begin_line": 475,
        "end_line": 489,
        "comment": "\r\n     * Returns the end data value for one category in a series.\r\n     *\r\n     * @param series  the required series (zero based index).\r\n     * @param category  the required category.\r\n     *\r\n     * @return The end data value for one category in a series (null possible).\r\n     * \r\n     * @see #getEndValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.generateKeys#586",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.generateKeys(int, java.lang.String)",
        "snippet": "    private Comparable[] generateKeys(int count, String prefix) {\n        Comparable[] result = new Comparable[count];\n        String name;\n        for (int i = 0; i < count; i++) {\n            name = prefix + (i + 1);\n            result[i] = name;\n        }\n        return result;\n    }\n",
        "begin_line": 586,
        "end_line": 594,
        "comment": "\r\n     * Generates an array of keys, by appending a space plus an integer\r\n     * (starting with 1) to the supplied prefix string.\r\n     *\r\n     * @param count  the number of keys required.\r\n     * @param prefix  the name prefix.\r\n     *\r\n     * @return An array of <i>prefixN</i> with N = { 1 .. count}.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getColumnKey#605",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return this.categoryKeys[column];\n    }\n",
        "begin_line": 605,
        "end_line": 607,
        "comment": "\r\n     * Returns a column key.\r\n     *\r\n     * @param column  the column index.\r\n     *\r\n     * @return The column key.\r\n     * \r\n     * @see #getRowKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getRowKey#666",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        if ((row >= getRowCount()) || (row < 0)) {\n            throw new IllegalArgumentException(\n                    \"The 'row' argument is out of bounds.\");\n        }\n        return this.seriesKeys[row];\n    }\n",
        "begin_line": 666,
        "end_line": 672,
        "comment": "\r\n     * Returns the name of the specified series.\r\n     *\r\n     * @param row  the index of the required row/series (zero-based).\r\n     *\r\n     * @return The name of the specified series.\r\n     * \r\n     * @see #getColumnKey(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getColumnCount#683",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.categoryKeys.length;\n    }\n",
        "begin_line": 683,
        "end_line": 685,
        "comment": "\r\n     * Returns the number of categories in the dataset.  This method is part of \r\n     * the {@link CategoryDataset} interface.\r\n     *\r\n     * @return The number of categories in the dataset.\r\n     * \r\n     * @see #getCategoryCount()\r\n     * @see #getRowCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultIntervalCategoryDataset.getRowCount#695",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultIntervalCategoryDataset",
        "signature": "org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.seriesKeys.length;\n    }\n",
        "begin_line": 695,
        "end_line": 697,
        "comment": "\r\n     * Returns the number of series in the dataset (possibly zero).\r\n     *\r\n     * @return The number of series in the dataset.\r\n     * \r\n     * @see #getSeriesCount()\r\n     * @see #getColumnCount()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyToGroupMap.getGroupCount#106",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "class_name": "org.jfree.data.KeyToGroupMap",
        "signature": "org.jfree.data.KeyToGroupMap.getGroupCount()",
        "snippet": "    public int getGroupCount() {\n        return this.groups.size() + 1;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\r\n     * Returns the number of groups in the map.\r\n     * \r\n     * @return The number of groups in the map.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyToGroupMap.getGroupIndex#138",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "class_name": "org.jfree.data.KeyToGroupMap",
        "signature": "org.jfree.data.KeyToGroupMap.getGroupIndex(java.lang.Comparable)",
        "snippet": "    public int getGroupIndex(Comparable group) {\n        int result = this.groups.indexOf(group);\n        if (result < 0) {\n            if (this.defaultGroup.equals(group)) {\n                result = 0;\n            }\n        }\n        else {\n            result = result + 1;   \n        }\n        return result;   \n    }\n",
        "begin_line": 138,
        "end_line": 149,
        "comment": "\r\n     * Returns the index for the group.\r\n     * \r\n     * @param group  the group.\r\n     * \r\n     * @return The group index (or -1 if the group is not represented within \r\n     *         the map).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataUtilities.createNumberArray#107",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DataUtilities.java",
        "class_name": "org.jfree.data.DataUtilities",
        "signature": "org.jfree.data.DataUtilities.createNumberArray(double[])",
        "snippet": "    public static Number[] createNumberArray(double[] data) {\n        if (data == null) {\n            throw new IllegalArgumentException(\"Null 'data' argument.\");   \n        }\n        Number[] result = new Number[data.length];\n        for (int i = 0; i < data.length; i++) {\n            result[i] = new Double(data[i]);\n        }\n        return result;\n    }\n",
        "begin_line": 107,
        "end_line": 116,
        "comment": "\r\n     * Constructs an array of <code>Number</code> objects from an array of \r\n     * <code>double</code> primitives.\r\n     *\r\n     * @param data  the data (<code>null</code> not permitted).\r\n     *\r\n     * @return An array of <code>Double</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "DataUtilities.createNumberArray2D#126",
        "is_bug": false,
        "src_path": "source/org/jfree/data/DataUtilities.java",
        "class_name": "org.jfree.data.DataUtilities",
        "signature": "org.jfree.data.DataUtilities.createNumberArray2D(double[][])",
        "snippet": "    public static Number[][] createNumberArray2D(double[][] data) {\n        if (data == null) {\n            throw new IllegalArgumentException(\"Null 'data' argument.\");   \n        }\n        int l1 = data.length;\n        Number[][] result = new Number[l1][];\n        for (int i = 0; i < l1; i++) {\n            result[i] = createNumberArray(data[i]);\n        }\n        return result;\n    }\n",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\r\n     * Constructs an array of arrays of <code>Number</code> objects from a \r\n     * corresponding structure containing <code>double</code> primitives.\r\n     *\r\n     * @param data  the data (<code>null</code> not permitted).\r\n     *\r\n     * @return An array of <code>Double</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextLine.addFragment#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.addFragment(org.jfree.chart.text.TextFragment)",
        "snippet": "    public void addFragment(TextFragment fragment) {\n        this.fragments.add(fragment);        \n    }\n",
        "begin_line": 129,
        "end_line": 131,
        "comment": "\n     * Adds a text fragment to the text line.\n     * \n     * @param fragment  the text fragment (<code>null</code> not permitted).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextLine.removeFragment#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.removeFragment(org.jfree.chart.text.TextFragment)",
        "snippet": "    public void removeFragment(TextFragment fragment) {\n        this.fragments.remove(fragment);\n    }\n",
        "begin_line": 138,
        "end_line": 140,
        "comment": "\n     * Removes a fragment from the line.\n     * \n     * @param fragment  the fragment to remove.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextLine.getLastTextFragment#209",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextLine.java",
        "class_name": "org.jfree.chart.text.TextLine",
        "signature": "org.jfree.chart.text.TextLine.getLastTextFragment()",
        "snippet": "    public TextFragment getLastTextFragment() {\n        TextFragment result = null;\n        if (this.fragments.size() > 0) {\n            result = (TextFragment) this.fragments.get(this.fragments.size() \n                    - 1);\n        }    \n        return result;\n    }\n",
        "begin_line": 209,
        "end_line": 216,
        "comment": "\n     * Returns the last text fragment in the line.\n     * \n     * @return The last text fragment in the line.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.getText#160",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.getText()",
        "snippet": "    public String getText() {\n        return this.text;\n    }\n",
        "begin_line": 160,
        "end_line": 162,
        "comment": "\n     * Returns the text.\n     * \n     * @return The text (possibly <code>null</code>).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.getFont#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.getFont()",
        "snippet": "    public Font getFont() {\n        return this.font;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\n     * Returns the font.\n     * \n     * @return The font (never <code>null</code>).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.getPaint#178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.getPaint()",
        "snippet": "    public Paint getPaint() {\n        return this.paint;\n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\n     * Returns the text paint.\n     * \n     * @return The text paint (never <code>null</code>).\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextFragment.equals#261",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextFragment.java",
        "class_name": "org.jfree.chart.text.TextFragment",
        "signature": "org.jfree.chart.text.TextFragment.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;   \n        }\n        if (obj == this) {\n            return true;   \n        }\n        if (obj instanceof TextFragment) {\n            TextFragment tf = (TextFragment) obj;\n            if (!this.text.equals(tf.text)) {\n                return false;   \n            }\n            if (!this.font.equals(tf.font)) {\n                return false;   \n            }\n            if (!this.paint.equals(tf.paint)) {\n                return false;   \n            }\n            return true;\n        }\n        return false;\n    }\n",
        "begin_line": 261,
        "end_line": 282,
        "comment": "\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object to test against (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextBlock.getLastLine#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlock.java",
        "class_name": "org.jfree.chart.text.TextBlock",
        "signature": "org.jfree.chart.text.TextBlock.getLastLine()",
        "snippet": "    public TextLine getLastLine() {\n        TextLine last = null;\n        final int index = this.lines.size() - 1;\n        if (index >= 0) {\n            last = (TextLine) this.lines.get(index);\n        }\n        return last;\n    }\n",
        "begin_line": 138,
        "end_line": 145,
        "comment": "\n     * Returns the last line in the block.\n     * \n     * @return The last line in the block.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineRenderer3D.getXOffset#133",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.getXOffset()",
        "snippet": "    public double getXOffset() {\n        return this.xOffset;\n    }\n",
        "begin_line": 133,
        "end_line": 135,
        "comment": "\r\n     * Returns the x-offset for the 3D effect.\r\n     *\r\n     * @return The x-offset.\r\n     * \r\n     * @see #setXOffset(double)\r\n     * @see #getYOffset()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineRenderer3D.getYOffset#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.getYOffset()",
        "snippet": "    public double getYOffset() {\n        return this.yOffset;\n    }\n",
        "begin_line": 145,
        "end_line": 147,
        "comment": "\r\n     * Returns the y-offset for the 3D effect.\r\n     *\r\n     * @return The y-offset.\r\n     * \r\n     * @see #setYOffset(double)\r\n     * @see #getXOffset()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineRenderer3D.getWallPaint#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.getWallPaint()",
        "snippet": "    public Paint getWallPaint() {\n        return this.wallPaint;\n    }\n",
        "begin_line": 183,
        "end_line": 185,
        "comment": "\r\n     * Returns the paint used to highlight the left and bottom wall in the plot\r\n     * background.\r\n     *\r\n     * @return The paint.\r\n     * \r\n     * @see #setWallPaint(Paint)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineRenderer3D.drawBackground#211",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.drawBackground(java.awt.Graphics2D, org.jfree.chart.plot.CategoryPlot, java.awt.geom.Rectangle2D)",
        "snippet": "    public void drawBackground(Graphics2D g2, CategoryPlot plot, \n                               Rectangle2D dataArea) {\n\n        float x0 = (float) dataArea.getX();\n        float x1 = x0 + (float) Math.abs(this.xOffset);\n        float x3 = (float) dataArea.getMaxX();\n        float x2 = x3 - (float) Math.abs(this.xOffset);\n\n        float y0 = (float) dataArea.getMaxY();\n        float y1 = y0 - (float) Math.abs(this.yOffset);\n        float y3 = (float) dataArea.getMinY();\n        float y2 = y3 + (float) Math.abs(this.yOffset);\n\n        GeneralPath clip = new GeneralPath();\n        clip.moveTo(x0, y0);\n        clip.lineTo(x0, y2);\n        clip.lineTo(x1, y3);\n        clip.lineTo(x3, y3);\n        clip.lineTo(x3, y1);\n        clip.lineTo(x2, y0);\n        clip.closePath();\n\n        Composite originalComposite = g2.getComposite();\n        g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,\n                plot.getBackgroundAlpha()));\n\n        // fill background...\n        Paint backgroundPaint = plot.getBackgroundPaint();\n        if (backgroundPaint != null) {\n            g2.setPaint(backgroundPaint);\n            g2.fill(clip);\n        }\n\n        GeneralPath leftWall = new GeneralPath();\n        leftWall.moveTo(x0, y0);\n        leftWall.lineTo(x0, y2);\n        leftWall.lineTo(x1, y3);\n        leftWall.lineTo(x1, y1);\n        leftWall.closePath();\n        g2.setPaint(getWallPaint());\n        g2.fill(leftWall);\n\n        GeneralPath bottomWall = new GeneralPath();\n        bottomWall.moveTo(x0, y0);\n        bottomWall.lineTo(x1, y1);\n        bottomWall.lineTo(x3, y1);\n        bottomWall.lineTo(x2, y0);\n        bottomWall.closePath();\n        g2.setPaint(getWallPaint());\n        g2.fill(bottomWall);\n\n        // higlight the background corners...\n        g2.setPaint(Color.lightGray);\n        Line2D corner = new Line2D.Double(x0, y0, x1, y1);\n        g2.draw(corner);\n        corner.setLine(x1, y1, x1, y3);\n        g2.draw(corner);\n        corner.setLine(x1, y1, x3, y1);\n        g2.draw(corner);\n\n        // draw background image, if there is one...\n        Image backgroundImage = plot.getBackgroundImage();\n        if (backgroundImage != null) {\n            Rectangle2D adjusted = new Rectangle2D.Double(dataArea.getX() \n                    + getXOffset(), dataArea.getY(), \n                    dataArea.getWidth() - getXOffset(), \n                    dataArea.getHeight() - getYOffset());\n            plot.drawBackgroundImage(g2, adjusted);\n        }\n        \n        g2.setComposite(originalComposite);\n\n    }\n",
        "begin_line": 211,
        "end_line": 283,
        "comment": "\r\n     * Draws the background for the plot.\r\n     *\r\n     * @param g2  the graphics device.\r\n     * @param plot  the plot.\r\n     * @param dataArea  the area inside the axes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "GroupedStackedBarRenderer.findRangeBounds#117",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer",
        "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        Range r = DatasetUtilities.findStackedRangeBounds(\n                dataset, this.seriesToGroupMap);\n        return r;\n    }\n",
        "begin_line": 117,
        "end_line": 121,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the \r\n     * items from the specified dataset.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @return The range (or <code>null</code> if the dataset is \r\n     *         <code>null</code> or empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2132
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.notifyListeners#2338",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.notifyListeners(org.jfree.chart.event.RendererChangeEvent)",
        "snippet": "    public void notifyListeners(RendererChangeEvent event) {\n        Object[] ls = this.listenerList.getListenerList();\n        for (int i = ls.length - 2; i >= 0; i -= 2) {\n            if (ls[i] == RendererChangeListener.class) {\n                ((RendererChangeListener) ls[i + 1]).rendererChanged(event);\n            }\n        }\n    }\n",
        "begin_line": 2338,
        "end_line": 2345,
        "comment": "\r\n     * Notifies all registered listeners that the renderer has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2022
        },
        "num_failing_tests": 14
    },
    {
        "name": "RendererChangeEvent.RendererChangeEvent#62",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/RendererChangeEvent.java",
        "class_name": "org.jfree.chart.event.RendererChangeEvent",
        "signature": "org.jfree.chart.event.RendererChangeEvent.RendererChangeEvent(java.lang.Object)",
        "snippet": "    public RendererChangeEvent(Object renderer) {\n        super(renderer);\n        this.renderer = renderer;\n    }\n",
        "begin_line": 62,
        "end_line": 65,
        "comment": "\r\n     * Creates a new event.\r\n     *\r\n     * @param renderer  the renderer that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.2022
        },
        "num_failing_tests": 14
    },
    {
        "name": "StandardCategoryToolTipGenerator.StandardCategoryToolTipGenerator#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategoryToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategoryToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardCategoryToolTipGenerator.StandardCategoryToolTipGenerator(java.lang.String, java.text.DateFormat)",
        "snippet": "    public StandardCategoryToolTipGenerator(String labelFormat, \n                                            DateFormat formatter) {\n        super(labelFormat, formatter);\n    }\n",
        "begin_line": 94,
        "end_line": 97,
        "comment": "\r\n     * Creates a new generator with the specified date formatter.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not \r\n     *                     permitted).\r\n     * @param formatter  the date formatter (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "IntervalCategoryToolTipGenerator.IntervalCategoryToolTipGenerator#96",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/IntervalCategoryToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator",
        "signature": "org.jfree.chart.labels.IntervalCategoryToolTipGenerator.IntervalCategoryToolTipGenerator(java.lang.String, java.text.DateFormat)",
        "snippet": "    public IntervalCategoryToolTipGenerator(String labelFormat, \n                                            DateFormat formatter) {\n        super(labelFormat, formatter);\n    }\n",
        "begin_line": 96,
        "end_line": 99,
        "comment": "\r\n     * Creates a new generator with the specified date formatter.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not \r\n     *                     permitted).\r\n     * @param formatter  the date formatter (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractCategoryItemLabelGenerator.AbstractCategoryItemLabelGenerator#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.AbstractCategoryItemLabelGenerator(java.lang.String, java.text.DateFormat)",
        "snippet": "    protected AbstractCategoryItemLabelGenerator(String labelFormat, \n                                                 DateFormat formatter) {\n        if (labelFormat == null) {\n            throw new IllegalArgumentException(\"Null 'labelFormat' argument.\");\n        }\n        if (formatter == null) {\n            throw new IllegalArgumentException(\"Null 'formatter' argument.\");\n        }\n        this.labelFormat = labelFormat;\n        this.numberFormat = null;\n        this.percentFormat = NumberFormat.getPercentInstance();\n        this.dateFormat = formatter;\n        this.nullValueString = \"-\";\n    }\n",
        "begin_line": 147,
        "end_line": 160,
        "comment": "\r\n     * Creates a label generator with the specified date formatter.\r\n     *\r\n     * @param labelFormat  the label format string (<code>null</code> not \r\n     *                     permitted).\r\n     * @param formatter  the date formatter (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.toTimelineValue#222",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DefaultTimeline.toTimelineValue(java.util.Date)",
        "snippet": "        public long toTimelineValue(Date date) {\n            return date.getTime();\n        }\n",
        "begin_line": 222,
        "end_line": 224,
        "comment": "\r\n         * Converts a date into a timeline value.\r\n         *\r\n         * @param date  the domain value.\r\n         *\r\n         * @return The timeline value.\r\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.autoAdjustRange#1200",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.autoAdjustRange()",
        "snippet": "    protected void autoAdjustRange() {\n\n        Plot plot = getPlot();\n\n        if (plot == null) {\n            return;  // no plot, no data\n        }\n\n        if (plot instanceof ValueAxisPlot) {\n            ValueAxisPlot vap = (ValueAxisPlot) plot;\n\n            Range r = vap.getDataRange(this);\n            if (r == null) {\n                if (this.timeline instanceof SegmentedTimeline) { \n                    //Timeline hasn't method getStartTime()\n                    r = new DateRange((\n                            (SegmentedTimeline) this.timeline).getStartTime(),\n                            ((SegmentedTimeline) this.timeline).getStartTime() \n                            + 1);\n                } \n                else {\n                    r = new DateRange();\n                }\n            }\n\n            long upper = this.timeline.toTimelineValue(\n                    (long) r.getUpperBound());\n            long lower;\n            long fixedAutoRange = (long) getFixedAutoRange();\n            if (fixedAutoRange > 0.0) {\n                lower = upper - fixedAutoRange;\n            }\n            else {\n                lower = this.timeline.toTimelineValue((long) r.getLowerBound());\n                double range = upper - lower;\n                long minRange = (long) getAutoRangeMinimumSize();\n                if (range < minRange) {\n                    long expand = (long) (minRange - range) / 2;\n                    upper = upper + expand;\n                    lower = lower - expand;\n                }\n                upper = upper + (long) (range * getUpperMargin());\n                lower = lower - (long) (range * getLowerMargin());\n            }\n\n            upper = this.timeline.toMillisecond(upper);\n            lower = this.timeline.toMillisecond(lower);\n            DateRange dr = new DateRange(new Date(lower), new Date(upper));\n            setRange(dr, false, false);\n        }\n\n    }\n",
        "begin_line": 1200,
        "end_line": 1251,
        "comment": "\r\n     * Rescales the axis to ensure that all data is visible.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartFactory.createGanttChart#1050",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createGanttChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.IntervalCategoryDataset, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createGanttChart(String title,\n                                              String categoryAxisLabel,\n                                              String dateAxisLabel,\n                                              IntervalCategoryDataset dataset,\n                                              boolean legend,\n                                              boolean tooltips,\n                                              boolean urls) {\n\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        DateAxis dateAxis = new DateAxis(dateAxisLabel);\n\n        CategoryItemRenderer renderer = new GanttRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new IntervalCategoryToolTipGenerator(\n                    \"{3} - {4}\", DateFormat.getDateInstance()));\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, dateAxis, \n                renderer);\n        plot.setOrientation(PlotOrientation.HORIZONTAL);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 1050,
        "end_line": 1079,
        "comment": "\r\n     * Creates a Gantt chart using the supplied attributes plus default values \r\n     * where required.  The chart object returned by this method uses a \r\n     * {@link CategoryPlot} instance as the plot, with a {@link CategoryAxis} \r\n     * for the domain axis, a {@link DateAxis} as the range axis, and a \r\n     * {@link GanttRenderer} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param dateAxisLabel  the label for the date axis \r\n     *                       (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A Gantt chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1907
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetUtilities.findStackedRangeBounds#1257",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset, double)",
        "snippet": "    public static Range findStackedRangeBounds(CategoryDataset dataset, \n            double base) {\n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        Range result = null;\n        double minimum = Double.POSITIVE_INFINITY;\n        double maximum = Double.NEGATIVE_INFINITY;\n        int categoryCount = dataset.getColumnCount();\n        for (int item = 0; item < categoryCount; item++) {\n            double positive = base;\n            double negative = base;\n            int seriesCount = dataset.getRowCount();\n            for (int series = 0; series < seriesCount; series++) {\n                Number number = dataset.getValue(series, item);\n                if (number != null) {\n                    double value = number.doubleValue();\n                    if (value > 0.0) {\n                        positive = positive + value;\n                    }\n                    if (value < 0.0) {\n                        negative = negative + value;  \n                        // '+', remember value is negative\n                    }\n                }\n            }\n            minimum = Math.min(minimum, negative);\n            maximum = Math.max(maximum, positive);\n        }\n        if (minimum <= maximum) {\n            result = new Range(minimum, maximum);\n        }\n        return result;\n\n    }\n",
        "begin_line": 1257,
        "end_line": 1291,
        "comment": "\r\n     * Returns the minimum and maximum values for the dataset's range \r\n     * (y-values), assuming that the series in one category are stacked.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * @param base  the base value for the bars.\r\n     *\r\n     * @return The range (<code>null</code> if the dataset contains no values).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1846
        },
        "num_failing_tests": 3
    },
    {
        "name": "NumberAxis3D.NumberAxis3D#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis3D.java",
        "class_name": "org.jfree.chart.axis.NumberAxis3D",
        "signature": "org.jfree.chart.axis.NumberAxis3D.NumberAxis3D(java.lang.String)",
        "snippet": "    public NumberAxis3D(String label) {\n        super(label);\n        setAxisLineVisible(false);\n    }\n",
        "begin_line": 108,
        "end_line": 111,
        "comment": "\r\n     * Constructs a new axis.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1774
        },
        "num_failing_tests": 3
    },
    {
        "name": "DateAxis.getMinimumDate#553",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.getMinimumDate()",
        "snippet": "    public Date getMinimumDate() {\n        Date result = null;\n        Range range = getRange();\n        if (range instanceof DateRange) {\n            DateRange r = (DateRange) range;\n            result = r.getLowerDate();\n        }\n        else {\n            result = new Date((long) range.getLowerBound());\n        }\n        return result;\n    }\n",
        "begin_line": 553,
        "end_line": 564,
        "comment": "\r\n     * Returns the earliest date visible on the axis.\r\n     *\r\n     * @return The date.\r\n     * \r\n     * @see #setMinimumDate(Date)\r\n     * @see #getMaximumDate()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.getMaximumDate#603",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.getMaximumDate()",
        "snippet": "    public Date getMaximumDate() {\n        Date result = null;\n        Range range = getRange();\n        if (range instanceof DateRange) {\n            DateRange r = (DateRange) range;\n            result = r.getUpperDate();\n        }\n        else {\n            result = new Date((long) range.getUpperBound());\n        }\n        return result;\n    }\n",
        "begin_line": 603,
        "end_line": 614,
        "comment": "\r\n     * Returns the latest date visible on the axis.\r\n     *\r\n     * @return The date.\r\n     * \r\n     * @see #setMaximumDate(Date)\r\n     * @see #getMinimumDate()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1741
        },
        "num_failing_tests": 2
    },
    {
        "name": "IntervalBarRenderer.IntervalBarRenderer#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/IntervalBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.IntervalBarRenderer",
        "signature": "org.jfree.chart.renderer.category.IntervalBarRenderer.IntervalBarRenderer()",
        "snippet": "    public IntervalBarRenderer() {\n        super();\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\r\n     * Constructs a new renderer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1709
        },
        "num_failing_tests": 3
    },
    {
        "name": "CategoryAxis3D.CategoryAxis3D#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis3D.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis3D",
        "signature": "org.jfree.chart.axis.CategoryAxis3D.CategoryAxis3D(java.lang.String)",
        "snippet": "    public CategoryAxis3D(String label) {\n        super(label);\n    }\n",
        "begin_line": 91,
        "end_line": 93,
        "comment": "\r\n     * Creates a new axis using default attribute values.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1709
        },
        "num_failing_tests": 3
    },
    {
        "name": "CategoryPlot.readObject#3636",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n\n        stream.defaultReadObject();\n        this.domainGridlineStroke = SerialUtilities.readStroke(stream);\n        this.domainGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeGridlineStroke = SerialUtilities.readStroke(stream);\n        this.rangeGridlinePaint = SerialUtilities.readPaint(stream);\n        this.rangeCrosshairStroke = SerialUtilities.readStroke(stream);\n        this.rangeCrosshairPaint = SerialUtilities.readPaint(stream);\n\n        for (int i = 0; i < this.domainAxes.size(); i++) {\n            CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(i);\n            if (xAxis != null) {\n                xAxis.setPlot(this);\n                xAxis.addChangeListener(this);\n            }\n        } \n        for (int i = 0; i < this.rangeAxes.size(); i++) {\n            ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(i);\n            if (yAxis != null) {\n                yAxis.setPlot(this);   \n                yAxis.addChangeListener(this);\n            }\n        }\n        int datasetCount = this.datasets.size();\n        for (int i = 0; i < datasetCount; i++) {\n            Dataset dataset = (Dataset) this.datasets.get(i);\n            if (dataset != null) {\n                dataset.addChangeListener(this);\n            }\n        }\n        int rendererCount = this.renderers.size();\n        for (int i = 0; i < rendererCount; i++) {\n            CategoryItemRenderer renderer \n                = (CategoryItemRenderer) this.renderers.get(i);\n            if (renderer != null) {\n                renderer.addChangeListener(this);\n            }\n        }\n\n    }\n",
        "begin_line": 3636,
        "end_line": 3677,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1612
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartFactory.createLineChart#945",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createLineChart(String title,\n                                             String categoryAxisLabel,\n                                             String valueAxisLabel,\n                                             CategoryDataset dataset,\n                                             PlotOrientation orientation,\n                                             boolean legend,\n                                             boolean tooltips,\n                                             boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        LineAndShapeRenderer renderer = new LineAndShapeRenderer(true, false);\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 945,
        "end_line": 976,
        "comment": "\r\n     * Creates a line chart with default settings.  The chart object returned \r\n     * by this method uses a {@link CategoryPlot} instance as the plot, with a \r\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the \r\n     * range axis, and a {@link LineAndShapeRenderer} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis (<code>null</code> \r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the chart orientation (horizontal or vertical) \r\n     *                     (<code>null</code> not permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A line chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1612
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateRange.getLowerDate#119",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "class_name": "org.jfree.data.time.DateRange",
        "signature": "org.jfree.data.time.DateRange.getLowerDate()",
        "snippet": "    public Date getLowerDate() {\n        return this.lowerDate;\n    }\n",
        "begin_line": 119,
        "end_line": 121,
        "comment": "\r\n     * Returns the lower (earlier) date for the range.\r\n     *\r\n     * @return The lower date for the range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateRange.getUpperDate#128",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "class_name": "org.jfree.data.time.DateRange",
        "signature": "org.jfree.data.time.DateRange.getUpperDate()",
        "snippet": "    public Date getUpperDate() {\n        return this.upperDate;\n    }\n",
        "begin_line": 128,
        "end_line": 130,
        "comment": "\r\n     * Returns the upper (later) date for the range.\r\n     *\r\n     * @return The upper date for the range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetUtilities.findStackedRangeBounds#1244",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public static Range findStackedRangeBounds(CategoryDataset dataset) {\n        return findStackedRangeBounds(dataset, 0.0);\n    }\n",
        "begin_line": 1244,
        "end_line": 1246,
        "comment": "\r\n     * Returns the minimum and maximum values for the dataset's range \r\n     * (y-values), assuming that the series in one category are stacked.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     *\r\n     * @return The range (<code>null</code> if the dataset contains no values).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortOrder.toString#60",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 60,
        "end_line": 62,
        "comment": "\n     * Returns a string representing the object.\n     *\n     * @return The string.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortOrder.equals#72",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof SortOrder)) {\n            return false;\n        }\n\n        final SortOrder that = (SortOrder) obj;\n        if (!this.name.equals(that.toString())) {\n            return false;\n        }\n\n        return true;\n    }\n",
        "begin_line": 72,
        "end_line": 87,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "SortOrder.readResolve#105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SortOrder.java",
        "class_name": "org.jfree.chart.util.SortOrder",
        "signature": "org.jfree.chart.util.SortOrder.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(SortOrder.ASCENDING)) {\n            return SortOrder.ASCENDING;\n        }\n        else if (this.equals(SortOrder.DESCENDING)) {\n            return SortOrder.DESCENDING;\n        }\n        return null;\n    }\n",
        "begin_line": 105,
        "end_line": 113,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.writeObject#3618",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeStroke(this.domainGridlineStroke, stream);\n        SerialUtilities.writePaint(this.domainGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);\n        SerialUtilities.writePaint(this.rangeGridlinePaint, stream);\n        SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream);\n        SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);\n    }\n",
        "begin_line": 3618,
        "end_line": 3626,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "LineBorder.writeObject#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.paint, stream);\n        SerialUtilities.writeStroke(this.stroke, stream);\n    }\n",
        "begin_line": 215,
        "end_line": 219,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "LineBorder.readObject#229",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.paint = SerialUtilities.readPaint(stream);\n        this.stroke = SerialUtilities.readStroke(stream);\n    }    \n",
        "begin_line": 229,
        "end_line": 234,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.setCategoryMargin#288",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.setCategoryMargin(double)",
        "snippet": "    public void setCategoryMargin(double margin) {\n        this.categoryMargin = margin;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n",
        "begin_line": 288,
        "end_line": 291,
        "comment": "\r\n     * Sets the category margin and sends an {@link AxisChangeEvent} to all \r\n     * registered listeners.  The overall category margin is distributed over \r\n     * N-1 gaps, where N is the number of categories on the axis.\r\n     *\r\n     * @param margin  the margin as a percentage of the axis length (for \r\n     *                example, 0.05 is five percent).\r\n     *                \r\n     * @see #getCategoryMargin()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.readObject#1646",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.borderStroke = SerialUtilities.readStroke(stream);\n        this.borderPaint = SerialUtilities.readPaint(stream);\n        this.backgroundPaint = SerialUtilities.readPaint(stream);\n        this.progressListeners = new EventListenerList();\n        this.changeListeners = new EventListenerList();\n        this.renderingHints = new RenderingHints(\n                RenderingHints.KEY_ANTIALIASING, \n                RenderingHints.VALUE_ANTIALIAS_ON);\n\n        // register as a listener with sub-components...\n        if (this.title != null) {\n            this.title.addChangeListener(this);\n        }\n\n        for (int i = 0; i < getSubtitleCount(); i++) {\n            getSubtitle(i).addChangeListener(this);\n        }\n        this.plot.addChangeListener(this);\n    }\n",
        "begin_line": 1646,
        "end_line": 1667,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 2
    },
    {
        "name": "KeyToGroupMap.getGroup#159",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "class_name": "org.jfree.data.KeyToGroupMap",
        "signature": "org.jfree.data.KeyToGroupMap.getGroup(java.lang.Comparable)",
        "snippet": "    public Comparable getGroup(Comparable key) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");   \n        }\n        Comparable result = this.defaultGroup;\n        Comparable group = (Comparable) this.keyToGroupMap.get(key);\n        if (group != null) {\n            result = group;   \n        }\n        return result;\n    }\n",
        "begin_line": 159,
        "end_line": 169,
        "comment": "\r\n     * Returns the group that a key is mapped to.\r\n     * \r\n     * @param key  the key (<code>null</code> not permitted).\r\n     * \r\n     * @return The group (never <code>null</code>, returns the default group if\r\n     *         there is no mapping for the specified key).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntervalMarker.IntervalMarker#84",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "signature": "org.jfree.chart.plot.IntervalMarker.IntervalMarker(double, double)",
        "snippet": "    public IntervalMarker(double start, double end) {\n        this(start, end, Color.gray, new BasicStroke(0.5f), Color.gray, \n                new BasicStroke(0.5f), 0.8f);\n    }\n",
        "begin_line": 84,
        "end_line": 87,
        "comment": "\r\n     * Constructs an interval marker.\r\n     *\r\n     * @param start  the start of the interval.\r\n     * @param end  the end of the interval.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntervalMarker.IntervalMarker#100",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "signature": "org.jfree.chart.plot.IntervalMarker.IntervalMarker(double, double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)",
        "snippet": "    public IntervalMarker(double start, double end, \n                          Paint paint, Stroke stroke,\n                          Paint outlinePaint, Stroke outlineStroke, \n                          float alpha) {\n\n        super(paint, stroke, outlinePaint, outlineStroke, alpha);\n        this.startValue = start;\n        this.endValue = end;\n        this.gradientPaintTransformer = null;\n        setLabelOffsetType(LengthAdjustmentType.CONTRACT);\n        \n    }\n",
        "begin_line": 100,
        "end_line": 111,
        "comment": "\r\n     * Constructs an interval marker.\r\n     *\r\n     * @param start  the start of the interval.\r\n     * @param end  the end of the interval.\r\n     * @param paint  the paint.\r\n     * @param stroke  the stroke.\r\n     * @param outlinePaint  the outline paint.\r\n     * @param outlineStroke  the outline stroke.\r\n     * @param alpha  the alpha transparency.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "IntervalMarker.equals#185",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/IntervalMarker.java",
        "class_name": "org.jfree.chart.plot.IntervalMarker",
        "signature": "org.jfree.chart.plot.IntervalMarker.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof IntervalMarker)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        IntervalMarker that = (IntervalMarker) obj;\n        if (this.startValue != that.startValue) {\n            return false;   \n        }\n        if (this.endValue != that.endValue) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.gradientPaintTransformer, \n                that.gradientPaintTransformer)) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 185,
        "end_line": 207,
        "comment": "\r\n     * Tests the marker for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1508
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.getItemStroke#1070",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemStroke(int, int)",
        "snippet": "    public Stroke getItemStroke(int row, int column) {\n        return lookupSeriesStroke(row);\n    }\n",
        "begin_line": 1070,
        "end_line": 1072,
        "comment": "\r\n     * Returns the stroke used to draw data items.\r\n     * <p>\r\n     * The default implementation passes control to the getSeriesStroke method.\r\n     * You can override this method if you require different behaviour.\r\n     *\r\n     * @param row  the row (or series) index (zero-based).\r\n     * @param column  the column (or category) index (zero-based).\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1467
        },
        "num_failing_tests": 3
    },
    {
        "name": "Axis.setAxisLineVisible#562",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.setAxisLineVisible(boolean)",
        "snippet": "    public void setAxisLineVisible(boolean visible) {\n        this.axisLineVisible = visible;\n        notifyListeners(new AxisChangeEvent(this));\n    }\n",
        "begin_line": 562,
        "end_line": 565,
        "comment": "\r\n     * Sets a flag that controls whether or not the axis line is visible and \r\n     * sends an {@link AxisChangeEvent} to all registered listeners.\r\n     * \r\n     * @param visible  the flag.\r\n     * \r\n     * @see #isAxisLineVisible()\r\n     * @see #setAxisLinePaint(Paint)\r\n     * @see #setAxisLineStroke(Stroke)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1467
        },
        "num_failing_tests": 3
    },
    {
        "name": "DefaultCategoryDataset.addValue#231",
        "is_bug": false,
        "src_path": "source/org/jfree/data/category/DefaultCategoryDataset.java",
        "class_name": "org.jfree.data.category.DefaultCategoryDataset",
        "signature": "org.jfree.data.category.DefaultCategoryDataset.addValue(double, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void addValue(double value, Comparable rowKey, \n                         Comparable columnKey) {\n        addValue(new Double(value), rowKey, columnKey);\n    }\n",
        "begin_line": 231,
        "end_line": 234,
        "comment": "\r\n     * Adds a value to the table.\r\n     *\r\n     * @param value  the value.\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     * \r\n     * @see #getValue(Comparable, Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1441
        },
        "num_failing_tests": 4
    },
    {
        "name": "RectangleEdge.readResolve#186",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleEdge.java",
        "class_name": "org.jfree.chart.util.RectangleEdge",
        "signature": "org.jfree.chart.util.RectangleEdge.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        RectangleEdge result = null;\n        if (this.equals(RectangleEdge.TOP)) {\n            result = RectangleEdge.TOP;\n        }\n        else if (this.equals(RectangleEdge.BOTTOM)) {\n            result = RectangleEdge.BOTTOM;\n        }\n        else if (this.equals(RectangleEdge.LEFT)) {\n            result = RectangleEdge.LEFT;\n        }\n        else if (this.equals(RectangleEdge.RIGHT)) {\n            result = RectangleEdge.RIGHT;\n        }\n        return result;\n    }\n",
        "begin_line": 186,
        "end_line": 201,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangleAnchor.readResolve#244",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        RectangleAnchor result = null;\n        if (this.equals(RectangleAnchor.CENTER)) {\n            result = RectangleAnchor.CENTER;\n        }\n        else if (this.equals(RectangleAnchor.TOP)) {\n            result = RectangleAnchor.TOP;\n        }\n        else if (this.equals(RectangleAnchor.BOTTOM)) {\n            result = RectangleAnchor.BOTTOM;\n        }\n        else if (this.equals(RectangleAnchor.LEFT)) {\n            result = RectangleAnchor.LEFT;\n        }\n        else if (this.equals(RectangleAnchor.RIGHT)) {\n            result = RectangleAnchor.RIGHT;\n        }\n        else if (this.equals(RectangleAnchor.TOP_LEFT)) {\n            result = RectangleAnchor.TOP_LEFT;\n        }\n        else if (this.equals(RectangleAnchor.TOP_RIGHT)) {\n            result = RectangleAnchor.TOP_RIGHT;\n        }\n        else if (this.equals(RectangleAnchor.BOTTOM_LEFT)) {\n            result = RectangleAnchor.BOTTOM_LEFT;\n        }\n        else if (this.equals(RectangleAnchor.BOTTOM_RIGHT)) {\n            result = RectangleAnchor.BOTTOM_RIGHT;\n        }\n        return result;\n    }\n",
        "begin_line": 244,
        "end_line": 274,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "LengthAdjustmentType.equals#99",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof LengthAdjustmentType)) {\n            return false;\n        }\n        final LengthAdjustmentType that = (LengthAdjustmentType) obj;\n        if (!this.name.equals(that.name)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 99,
        "end_line": 111,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "LengthAdjustmentType.readResolve#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/LengthAdjustmentType.java",
        "class_name": "org.jfree.chart.util.LengthAdjustmentType",
        "signature": "org.jfree.chart.util.LengthAdjustmentType.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(LengthAdjustmentType.NO_CHANGE)) {\n            return LengthAdjustmentType.NO_CHANGE;\n        }\n        else if (this.equals(LengthAdjustmentType.EXPAND)) {\n            return LengthAdjustmentType.EXPAND;\n        }\n        else if (this.equals(LengthAdjustmentType.CONTRACT)) {\n            return LengthAdjustmentType.CONTRACT;\n        }\n        return null;\n    }\n",
        "begin_line": 129,
        "end_line": 140,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextTitle.writeObject#758",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.paint, stream);\n        SerialUtilities.writePaint(this.backgroundPaint, stream);\n    }\n",
        "begin_line": 758,
        "end_line": 762,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextTitle.readObject#772",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException \n    {\n        stream.defaultReadObject();\n        this.paint = SerialUtilities.readPaint(stream);\n        this.backgroundPaint = SerialUtilities.readPaint(stream);\n    }\n",
        "begin_line": 772,
        "end_line": 778,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.writeObject#587",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.backgroundPaint, stream);\n        SerialUtilities.writePaint(this.itemPaint, stream);\n    }\n",
        "begin_line": 587,
        "end_line": 591,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "LegendTitle.readObject#601",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.backgroundPaint = SerialUtilities.readPaint(stream);\n        this.itemPaint = SerialUtilities.readPaint(stream);\n    }\n",
        "begin_line": 601,
        "end_line": 606,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "GanttRenderer.GanttRenderer#111",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/GanttRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.GanttRenderer",
        "signature": "org.jfree.chart.renderer.category.GanttRenderer.GanttRenderer()",
        "snippet": "    public GanttRenderer() {\n        super();\n        setIncludeBaseInRange(false);\n        this.completePaint = Color.green;\n        this.incompletePaint = Color.red;\n        this.startPercent = 0.35;\n        this.endPercent = 0.65;\n    }\n",
        "begin_line": 111,
        "end_line": 118,
        "comment": "\r\n     * Creates a new renderer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.writeObject#650",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.paint, stream);\n        SerialUtilities.writeStroke(this.stroke, stream);\n        SerialUtilities.writePaint(this.outlinePaint, stream);\n        SerialUtilities.writeStroke(this.outlineStroke, stream);\n        SerialUtilities.writePaint(this.labelPaint, stream);\n    }\n",
        "begin_line": 650,
        "end_line": 657,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.readObject#667",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.paint = SerialUtilities.readPaint(stream);\n        this.stroke = SerialUtilities.readStroke(stream);\n        this.outlinePaint = SerialUtilities.readPaint(stream);\n        this.outlineStroke = SerialUtilities.readStroke(stream);\n        this.labelPaint = SerialUtilities.readPaint(stream);\n    }\n",
        "begin_line": 667,
        "end_line": 675,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryPlot.setColumnRenderingOrder#1464",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setColumnRenderingOrder(org.jfree.chart.util.SortOrder)",
        "snippet": "    public void setColumnRenderingOrder(SortOrder order) {\n        if (order == null) {\n            throw new IllegalArgumentException(\"Null 'order' argument.\");\n        }\n        this.columnRenderingOrder = order;\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 1464,
        "end_line": 1470,
        "comment": "\r\n     * Sets the column order in which the items in each dataset should be \r\n     * rendered and sends a {@link PlotChangeEvent} to all registered \r\n     * listeners.  Note that this affects the order in which items are drawn, \r\n     * NOT their position in the chart.\r\n     * \r\n     * @param order  the order (<code>null</code> not permitted).\r\n     * \r\n     * @see #getColumnRenderingOrder()\r\n     * @see #setRowRenderingOrder(SortOrder)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.writeObject#1631",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeStroke(this.borderStroke, stream);\n        SerialUtilities.writePaint(this.borderPaint, stream);\n        SerialUtilities.writePaint(this.backgroundPaint, stream);\n    }\n",
        "begin_line": 1631,
        "end_line": 1636,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1421
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRenderer.getItemPaint#613",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.getItemPaint(int, int)",
        "snippet": "    public Paint getItemPaint(int row, int column) {\n        return lookupSeriesPaint(row);\n    }\n",
        "begin_line": 613,
        "end_line": 615,
        "comment": "\r\n     * Returns the paint used to fill data items as they are drawn.\r\n     * <p>\r\n     * The default implementation passes control to the \r\n     * <code>getSeriesPaint</code> method. You can override this method if you \r\n     * require different behaviour.\r\n     *\r\n     * @param row  the row (or series) index (zero-based).\r\n     * @param column  the column (or category) index (zero-based).\r\n     *\r\n     * @return The paint (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1396
        },
        "num_failing_tests": 3
    },
    {
        "name": "LineAndShapeRenderer.LineAndShapeRenderer#185",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.LineAndShapeRenderer(boolean, boolean)",
        "snippet": "    public LineAndShapeRenderer(boolean lines, boolean shapes) {\n        super();\n        this.seriesLinesVisible = new BooleanList();\n        this.baseLinesVisible = lines;\n        this.seriesShapesVisible = new BooleanList();\n        this.baseShapesVisible = shapes;\n        this.seriesShapesFilled = new BooleanList();\n        this.baseShapesFilled = true;\n        this.useFillPaint = false;\n        this.drawOutlines = true;\n        this.useOutlinePaint = false;\n    }\n",
        "begin_line": 185,
        "end_line": 196,
        "comment": "\r\n     * Creates a new renderer with lines and/or shapes visible.\r\n     * \r\n     * @param lines  draw lines?\r\n     * @param shapes  draw shapes?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 4
    },
    {
        "name": "TextBlockAnchor.equals#123",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "signature": "org.jfree.chart.text.TextBlockAnchor.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof TextBlockAnchor)) {\n            return false;\n        }\n\n        TextBlockAnchor other = (TextBlockAnchor) obj;\n        if (!this.name.equals(other.name)) {\n            return false;\n        }\n\n        return true;\n    }\n",
        "begin_line": 123,
        "end_line": 138,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextBlockAnchor.readResolve#156",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextBlockAnchor.java",
        "class_name": "org.jfree.chart.text.TextBlockAnchor",
        "signature": "org.jfree.chart.text.TextBlockAnchor.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(TextBlockAnchor.TOP_CENTER)) {\n            return TextBlockAnchor.TOP_CENTER;\n        }\n        else if (this.equals(TextBlockAnchor.TOP_LEFT)) {\n            return TextBlockAnchor.TOP_LEFT;\n        }\n        else if (this.equals(TextBlockAnchor.TOP_RIGHT)) {\n            return TextBlockAnchor.TOP_RIGHT;\n        }\n        else if (this.equals(TextBlockAnchor.CENTER)) {\n            return TextBlockAnchor.CENTER;\n        }\n        else if (this.equals(TextBlockAnchor.CENTER_LEFT)) {\n            return TextBlockAnchor.CENTER_LEFT;\n        }\n        else if (this.equals(TextBlockAnchor.CENTER_RIGHT)) {\n            return TextBlockAnchor.CENTER_RIGHT;\n        }\n        else if (this.equals(TextBlockAnchor.BOTTOM_CENTER)) {\n            return TextBlockAnchor.BOTTOM_CENTER;\n        }\n        else if (this.equals(TextBlockAnchor.BOTTOM_LEFT)) {\n            return TextBlockAnchor.BOTTOM_LEFT;\n        }\n        else if (this.equals(TextBlockAnchor.BOTTOM_RIGHT)) {\n            return TextBlockAnchor.BOTTOM_RIGHT;\n        }\n        return null;\n    }\n",
        "begin_line": 156,
        "end_line": 185,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "BarRenderer.setIncludeBaseInRange#443",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)",
        "snippet": "    public void setIncludeBaseInRange(boolean include) {\n        if (this.includeBaseInRange != include) {\n            this.includeBaseInRange = include;\n            notifyListeners(new RendererChangeEvent(this));\n        }\n    }\n",
        "begin_line": 443,
        "end_line": 448,
        "comment": "\r\n     * Sets the flag that controls whether or not the base value for the bars \r\n     * is included in the range calculated by \r\n     * {@link #findRangeBounds(CategoryDataset)}.  If the flag is changed,\r\n     * a {@link RendererChangeEvent} is sent to all registered listeners.\r\n     * \r\n     * @param include  the new value for the flag.\r\n     * \r\n     * @since 1.0.1\r\n     * \r\n     * @see #getIncludeBaseInRange()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelWidthType.toString#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string (never </code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelWidthType.equals#98",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof CategoryLabelWidthType)) {\n            return false;\n        }\n        CategoryLabelWidthType t = (CategoryLabelWidthType) obj;\n        if (!this.name.equals(t.toString())) {\n            return false;\n        }\n        return true;\n\n    }\n",
        "begin_line": 98,
        "end_line": 112,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param obj  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryLabelWidthType.readResolve#121",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelWidthType.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelWidthType",
        "signature": "org.jfree.chart.axis.CategoryLabelWidthType.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(CategoryLabelWidthType.CATEGORY)) {\n            return CategoryLabelWidthType.CATEGORY;\n        }\n        else if (this.equals(CategoryLabelWidthType.RANGE)) {\n            return CategoryLabelWidthType.RANGE;\n        }    \n        return null;\n    }\n",
        "begin_line": 121,
        "end_line": 129,
        "comment": "\r\n     * Ensures that serialization returns the unique instances.\r\n     * \r\n     * @return The object.\r\n     * \r\n     * @throws ObjectStreamException if there is a problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.writeObject#1189",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        writePaintMap(this.tickLabelPaintMap, stream);\n    }\n",
        "begin_line": 1189,
        "end_line": 1192,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.readObject#1202",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.tickLabelPaintMap = readPaintMap(stream);\n    }\n",
        "begin_line": 1202,
        "end_line": 1206,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.readPaintMap#1221",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.readPaintMap(java.io.ObjectInputStream)",
        "snippet": "    private Map readPaintMap(ObjectInputStream in) \n            throws IOException, ClassNotFoundException {\n        boolean isNull = in.readBoolean();\n        if (isNull) {\n            return null;\n        }\n        Map result = new HashMap();\n        int count = in.readInt();\n        for (int i = 0; i < count; i++) {\n            Comparable category = (Comparable) in.readObject();\n            Paint paint = SerialUtilities.readPaint(in);\n            result.put(category, paint);\n        }\n        return result;\n    }\n",
        "begin_line": 1221,
        "end_line": 1235,
        "comment": "\r\n     * Reads a <code>Map</code> of (<code>Comparable</code>, <code>Paint</code>)\r\n     * elements from a stream.\r\n     * \r\n     * @param in  the input stream.\r\n     * \r\n     * @return The map.\r\n     * \r\n     * @throws IOException\r\n     * @throws ClassNotFoundException\r\n     * \r\n     * @see #writePaintMap(Map, ObjectOutputStream)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAxis.writePaintMap#1248",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.writePaintMap(java.util.Map, java.io.ObjectOutputStream)",
        "snippet": "    private void writePaintMap(Map map, ObjectOutputStream out) \n            throws IOException {\n        if (map == null) {\n            out.writeBoolean(true);\n        }\n        else {\n            out.writeBoolean(false);\n            Set keys = map.keySet();\n            int count = keys.size();\n            out.writeInt(count);\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Comparable key = (Comparable) iterator.next();\n                out.writeObject(key);\n                SerialUtilities.writePaint((Paint) map.get(key), out);\n            }\n        }\n    }\n",
        "begin_line": 1248,
        "end_line": 1265,
        "comment": "\r\n     * Writes a map of (<code>Comparable</code>, <code>Paint</code>)\r\n     * elements to a stream.\r\n     * \r\n     * @param map  the map (<code>null</code> permitted).\r\n     * \r\n     * @param out\r\n     * @throws IOException\r\n     * \r\n     * @see #readPaintMap(ObjectInputStream)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAnchor.equals#98",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof CategoryAnchor)) {\n            return false;\n        }\n        CategoryAnchor position = (CategoryAnchor) obj;\n        if (!this.name.equals(position.toString())) {\n            return false;\n        }\n        return true;\n\n    }\n",
        "begin_line": 98,
        "end_line": 112,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param obj  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAnchor.readResolve#121",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(CategoryAnchor.START)) {\n            return CategoryAnchor.START;\n        }\n        else if (this.equals(CategoryAnchor.MIDDLE)) {\n            return CategoryAnchor.MIDDLE;\n        }    \n        else if (this.equals(CategoryAnchor.END)) {\n            return CategoryAnchor.END;\n        }    \n        return null;\n    }\n",
        "begin_line": 121,
        "end_line": 132,
        "comment": "\r\n     * Ensures that serialization returns the unique instances.\r\n     * \r\n     * @return The object.\r\n     * \r\n     * @throws ObjectStreamException if there is a problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "AxisLocation.readResolve#171",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(AxisLocation.TOP_OR_RIGHT)) {\n            return AxisLocation.TOP_OR_RIGHT;\n        }\n        else if (this.equals(AxisLocation.BOTTOM_OR_RIGHT)) {\n            return AxisLocation.BOTTOM_OR_RIGHT;\n        }    \n        else if (this.equals(AxisLocation.TOP_OR_LEFT)) {\n            return AxisLocation.TOP_OR_LEFT;\n        }    \n        else if (this.equals(AxisLocation.BOTTOM_OR_LEFT)) {\n            return AxisLocation.BOTTOM_OR_LEFT;\n        }\n        return null;\n    }\n",
        "begin_line": 171,
        "end_line": 185,
        "comment": "\r\n     * Ensures that serialization returns the unique instances.\r\n     * \r\n     * @return The object.\r\n     * \r\n     * @throws ObjectStreamException if there is a problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.getSubtitle#718",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getSubtitle(int)",
        "snippet": "    public Title getSubtitle(int index) {\n        if ((index < 0) || (index >= getSubtitleCount())) {\n            throw new IllegalArgumentException(\"Index out of range.\");\n        }\n        return (Title) this.subtitles.get(index);\n    }\n",
        "begin_line": 718,
        "end_line": 723,
        "comment": "\r\n     * Returns a chart subtitle.\r\n     *\r\n     * @param index  the index of the chart subtitle (zero based).\r\n     *\r\n     * @return A chart subtitle.\r\n     * \r\n     * @see #addSubtitle(Title)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1348
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRenderer.lookupSeriesStroke#1083",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.lookupSeriesStroke(int)",
        "snippet": "    public Stroke lookupSeriesStroke(int series) {\n\n        // look up the paint table\n        Stroke result = this.strokeList.getStroke(series);\n        if (result == null && this.autoPopulateSeriesStroke) {\n            DrawingSupplier supplier = getDrawingSupplier();\n            if (supplier != null) {\n                result = supplier.getNextStroke();\n                this.strokeList.setStroke(series, result);\n            }\n        }\n        if (result == null) {\n            result = this.baseStroke;\n        }\n        return result;\n\n    }  \n",
        "begin_line": 1083,
        "end_line": 1099,
        "comment": "\r\n     * Returns the stroke used to draw the items in a series.\r\n     *\r\n     * @param series  the series (zero-based index).\r\n     *\r\n     * @return The stroke (never <code>null</code>).\r\n     * \r\n     * @since 1.0.6\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1306
        },
        "num_failing_tests": 3
    },
    {
        "name": "VerticalAlignment.equals#99",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "signature": "org.jfree.chart.util.VerticalAlignment.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof VerticalAlignment)) {\n            return false;\n        }\n\n        VerticalAlignment alignment = (VerticalAlignment) obj;\n        if (!this.name.equals(alignment.name)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 99,
        "end_line": 112,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return a boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "VerticalAlignment.readResolve#130",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/VerticalAlignment.java",
        "class_name": "org.jfree.chart.util.VerticalAlignment",
        "signature": "org.jfree.chart.util.VerticalAlignment.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(VerticalAlignment.TOP)) {\n            return VerticalAlignment.TOP;\n        }\n        else if (this.equals(VerticalAlignment.BOTTOM)) {\n            return VerticalAlignment.BOTTOM;\n        }\n        else if (this.equals(VerticalAlignment.CENTER)) {\n            return VerticalAlignment.CENTER;\n        }\n        else {\n            return null;  // this should never happen\n        }\n    }\n",
        "begin_line": 130,
        "end_line": 143,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "HorizontalAlignment.equals#99",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "signature": "org.jfree.chart.util.HorizontalAlignment.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof HorizontalAlignment)) {\n            return false;\n        }\n        HorizontalAlignment that = (HorizontalAlignment) obj;\n        if (!this.name.equals(that.name)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 99,
        "end_line": 111,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "HorizontalAlignment.readResolve#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/HorizontalAlignment.java",
        "class_name": "org.jfree.chart.util.HorizontalAlignment",
        "signature": "org.jfree.chart.util.HorizontalAlignment.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        HorizontalAlignment result = null;\n        if (this.equals(HorizontalAlignment.LEFT)) {\n            result = HorizontalAlignment.LEFT;\n        }\n        else if (this.equals(HorizontalAlignment.RIGHT)) {\n            result = HorizontalAlignment.RIGHT;\n        }\n        else if (this.equals(HorizontalAlignment.CENTER)) {\n            result = HorizontalAlignment.CENTER;\n        }\n        return result;\n    }\n",
        "begin_line": 129,
        "end_line": 141,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "Title.writeObject#424",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n    }\n",
        "begin_line": 424,
        "end_line": 426,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "Title.readObject#436",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 436,
        "end_line": 440,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "BlockBorder.writeObject#227",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.paint, stream);\n    }\n",
        "begin_line": 227,
        "end_line": 230,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "BlockBorder.readObject#240",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.paint = SerialUtilities.readPaint(stream);\n    }\n",
        "begin_line": 240,
        "end_line": 244,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractBlock.writeObject#614",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeShape(this.bounds, stream);\n    }\n",
        "begin_line": 614,
        "end_line": 617,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractBlock.readObject#627",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.bounds = (Rectangle2D) SerialUtilities.readShape(stream);\n    }\n",
        "begin_line": 627,
        "end_line": 631,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "CategoryAnchor.toString#86",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAnchor.java",
        "class_name": "org.jfree.chart.axis.CategoryAnchor",
        "signature": "org.jfree.chart.axis.CategoryAnchor.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 86,
        "end_line": 88,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1286
        },
        "num_failing_tests": 2
    },
    {
        "name": "StackedBarRenderer.StackedBarRenderer#142",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer.StackedBarRenderer()",
        "snippet": "    public StackedBarRenderer() {\n        this(false);\n    }\n",
        "begin_line": 142,
        "end_line": 144,
        "comment": "\r\n     * Creates a new renderer.  By default, the renderer has no tool tip \r\n     * generator and no URL generator.  These defaults have been chosen to \r\n     * minimise the processing required to generate a default chart.  If you \r\n     * require tool tips or URLs, then you can easily add the required \r\n     * generators.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 2
    },
    {
        "name": "StackedBarRenderer.StackedBarRenderer#152",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer.StackedBarRenderer(boolean)",
        "snippet": "    public StackedBarRenderer(boolean renderAsPercentages) {\n        super();\n        this.renderAsPercentages = renderAsPercentages;\n        \n        // set the default item label positions, which will only be used if \n        // the user requests visible item labels...\n        ItemLabelPosition p = new ItemLabelPosition(ItemLabelAnchor.CENTER, \n                TextAnchor.CENTER);\n        setBasePositiveItemLabelPosition(p);\n        setBaseNegativeItemLabelPosition(p);\n        setPositiveItemLabelPositionFallback(null);\n        setNegativeItemLabelPositionFallback(null);\n    }\n",
        "begin_line": 152,
        "end_line": 164,
        "comment": "\r\n     * Creates a new renderer.\r\n     * \r\n     * @param renderAsPercentages  a flag that controls whether the data values\r\n     *                             are rendered as percentages.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.toTimelineValue#211",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DefaultTimeline.toTimelineValue(long)",
        "snippet": "        public long toTimelineValue(long millisecond) {\n            return millisecond;\n        }\n",
        "begin_line": 211,
        "end_line": 213,
        "comment": "\r\n         * Converts a millisecond into a timeline value.\r\n         *\r\n         * @param millisecond  the millisecond.\r\n         *\r\n         * @return The timeline value.\r\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.configure#672",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.configure()",
        "snippet": "    public void configure() {\n        if (isAutoRange()) {\n            autoAdjustRange();\n        }\n    }\n",
        "begin_line": 672,
        "end_line": 676,
        "comment": "\r\n     * Configures the axis to work with the specified plot.  If the axis has\r\n     * auto-scaling, then sets the maximum and minimum values.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 2
    },
    {
        "name": "Month.Month#147",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Month.java",
        "class_name": "org.jfree.data.time.Month",
        "signature": "org.jfree.data.time.Month.Month(java.util.Date, java.util.TimeZone)",
        "snippet": "    public Month(Date time, TimeZone zone) {\n        Calendar calendar = Calendar.getInstance(zone);\n        calendar.setTime(time);\n        this.month = calendar.get(Calendar.MONTH) + 1;\n        this.year = calendar.get(Calendar.YEAR);\n        peg(calendar);\n    }\n",
        "begin_line": 147,
        "end_line": 153,
        "comment": "\r\n     * Constructs a new <code>Month</code> instance, based on a date/time and \r\n     * a time zone.  The first and last millisecond values are initially\r\n     * pegged to the given time zone also.\r\n     *\r\n     * @param time  the date/time.\r\n     * @param zone  the time zone (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Month.getFirstMillisecond#192",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Month.java",
        "class_name": "org.jfree.data.time.Month",
        "signature": "org.jfree.data.time.Month.getFirstMillisecond()",
        "snippet": "    public long getFirstMillisecond() {\n        return this.firstMillisecond;\n    }\n",
        "begin_line": 192,
        "end_line": 194,
        "comment": "\r\n     * Returns the first millisecond of the month.  This will be determined \r\n     * relative to the time zone specified in the constructor, or in the \r\n     * calendar instance passed in the most recent call to the \r\n     * {@link #peg(Calendar)} method.\r\n     *\r\n     * @return The first millisecond of the month.\r\n     * \r\n     * @see #getLastMillisecond()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Month.peg#218",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Month.java",
        "class_name": "org.jfree.data.time.Month",
        "signature": "org.jfree.data.time.Month.peg(java.util.Calendar)",
        "snippet": "    public void peg(Calendar calendar) {\n        this.firstMillisecond = getFirstMillisecond(calendar);\n        this.lastMillisecond = getLastMillisecond(calendar);\n    }\n",
        "begin_line": 218,
        "end_line": 221,
        "comment": " \r\n     * Recalculates the start date/time and end date/time for this time period \r\n     * relative to the supplied calendar (which incorporates a time zone).\r\n     * \r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Month.getFirstMillisecond#381",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Month.java",
        "class_name": "org.jfree.data.time.Month",
        "signature": "org.jfree.data.time.Month.getFirstMillisecond(java.util.Calendar)",
        "snippet": "    public long getFirstMillisecond(Calendar calendar) {\n        calendar.set(this.year, this.month - 1, 1, 0, 0, 0);\n        calendar.set(Calendar.MILLISECOND, 0);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 381,
        "end_line": 387,
        "comment": "\r\n     * Returns the first millisecond of the month, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The first millisecond of the month.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is \r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "Month.getLastMillisecond#400",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/Month.java",
        "class_name": "org.jfree.data.time.Month",
        "signature": "org.jfree.data.time.Month.getLastMillisecond(java.util.Calendar)",
        "snippet": "    public long getLastMillisecond(Calendar calendar) {\n        int eom = SerialDate.lastDayOfMonth(this.month, this.year);\n        calendar.set(this.year, this.month - 1, eom, 23, 59, 59);\n        calendar.set(Calendar.MILLISECOND, 999);\n        // in the following line, we'd rather call calendar.getTimeInMillis()\n        // to avoid object creation, but that isn't supported in Java 1.3.1\n        return calendar.getTime().getTime();\n    }\n",
        "begin_line": 400,
        "end_line": 407,
        "comment": "\r\n     * Returns the last millisecond of the month, evaluated using the supplied\r\n     * calendar (which determines the time zone).\r\n     *\r\n     * @param calendar  the calendar (<code>null</code> not permitted).\r\n     *\r\n     * @return The last millisecond of the month.\r\n     *\r\n     * @throws NullPointerException if <code>calendar</code> is \r\n     *     <code>null</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.getColumnKey#353",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getColumnKey(int)",
        "snippet": "    public Comparable getColumnKey(int column) {\n        return this.data.getColumnKey(column);\n    }\n",
        "begin_line": 353,
        "end_line": 355,
        "comment": "\r\n     * Returns a column key.\r\n     *\r\n     * @param column  the column index (zero-based).\r\n     *\r\n     * @return The column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.getRowCount#402",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRowCount()",
        "snippet": "    public int getRowCount() {\n        return this.data.getRowCount();\n    }\n",
        "begin_line": 402,
        "end_line": 404,
        "comment": "\r\n     * Returns the number of rows in the table.\r\n     *\r\n     * @return The row count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.getColumnCount#411",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getColumnCount()",
        "snippet": "    public int getColumnCount() {\n        return this.data.getColumnCount();\n    }\n",
        "begin_line": 411,
        "end_line": 413,
        "comment": "\r\n     * Returns the number of columns in the table.\r\n     *\r\n     * @return The column count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "DatasetUtilities.findCumulativeRangeBounds#1521",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/DatasetUtilities.java",
        "class_name": "org.jfree.data.general.DatasetUtilities",
        "signature": "org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public static Range findCumulativeRangeBounds(CategoryDataset dataset) {\n        \n        if (dataset == null) {\n            throw new IllegalArgumentException(\"Null 'dataset' argument.\");\n        }\n        \n        boolean allItemsNull = true; // we'll set this to false if there is at \n                                     // least one non-null data item... \n        double minimum = 0.0;\n        double maximum = 0.0;\n        for (int row = 0; row < dataset.getRowCount(); row++) {\n            double runningTotal = 0.0;\n            for (int column = 0; column < dataset.getColumnCount() - 1; \n                 column++) {\n                Number n = dataset.getValue(row, column);\n                if (n != null) {\n                    allItemsNull = false;\n                    double value = n.doubleValue();\n                    runningTotal = runningTotal + value;\n                    minimum = Math.min(minimum, runningTotal);\n                    maximum = Math.max(maximum, runningTotal);\n                }\n            }    \n        }\n        if (!allItemsNull) {\n            return new Range(minimum, maximum);\n        }\n        else {\n            return null;\n        }\n        \n    }\n",
        "begin_line": 1521,
        "end_line": 1552,
        "comment": "\r\n     * Calculates the range of values for a dataset where each item is the \r\n     * running total of the items for the current series.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * \r\n     * @return The range.\r\n     * \r\n     * @see #findRangeBounds(CategoryDataset)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "WaterfallBarRenderer.findRangeBounds#175",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        return DatasetUtilities.findCumulativeRangeBounds(dataset);   \n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the \r\n     * items from the specified dataset.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * \r\n     * @return The range (or <code>null</code> if the dataset is empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateTickUnit.getCalendarField#315",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.getCalendarField(int)",
        "snippet": "    private int getCalendarField(int tickUnit) {\n\n        switch (tickUnit) {\n            case (YEAR):\n                return Calendar.YEAR;\n            case (MONTH):\n                return Calendar.MONTH;\n            case (DAY):\n                return Calendar.DATE;\n            case (HOUR):\n                return Calendar.HOUR_OF_DAY;\n            case (MINUTE):\n                return Calendar.MINUTE;\n            case (SECOND):\n                return Calendar.SECOND;\n            case (MILLISECOND):\n                return Calendar.MILLISECOND;\n            default:\n                return Calendar.MILLISECOND;\n        }\n\n    }\n",
        "begin_line": 315,
        "end_line": 336,
        "comment": "\r\n     * Returns a field code (that can be used with the Calendar class) for a \r\n     * given 'unit' code.  The 'unit' is one of:  {@link #YEAR}, {@link #MONTH},\r\n     * {@link #DAY}, {@link #HOUR}, {@link #MINUTE}, {@link #SECOND} and \r\n     * {@link #MILLISECOND}.\r\n     *\r\n     * @param tickUnit  the unit.\r\n     *\r\n     * @return The field code.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.previousStandardDate#828",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.previousStandardDate(java.util.Date, org.jfree.chart.axis.DateTickUnit)",
        "snippet": "    protected Date previousStandardDate(Date date, DateTickUnit unit) {\n\n        int milliseconds;\n        int seconds;\n        int minutes;\n        int hours;\n        int days;\n        int months;\n        int years;\n\n        Calendar calendar = Calendar.getInstance(this.timeZone);\n        calendar.setTime(date);\n        int count = unit.getCount();\n        int current = calendar.get(unit.getCalendarField());\n        int value = count * (current / count);\n\n        switch (unit.getUnit()) {\n\n            case (DateTickUnit.MILLISECOND) :\n                years = calendar.get(Calendar.YEAR);\n                months = calendar.get(Calendar.MONTH);\n                days = calendar.get(Calendar.DATE);\n                hours = calendar.get(Calendar.HOUR_OF_DAY);\n                minutes = calendar.get(Calendar.MINUTE);\n                seconds = calendar.get(Calendar.SECOND);\n                calendar.set(years, months, days, hours, minutes, seconds);\n                calendar.set(Calendar.MILLISECOND, value);\n                Date mm = calendar.getTime();\n                if (mm.getTime() >= date.getTime()) {\n                    calendar.set(Calendar.MILLISECOND, value - 1);\n                    mm = calendar.getTime();\n                }\n                return calendar.getTime();\n\n            case (DateTickUnit.SECOND) :\n                years = calendar.get(Calendar.YEAR);\n                months = calendar.get(Calendar.MONTH);\n                days = calendar.get(Calendar.DATE);\n                hours = calendar.get(Calendar.HOUR_OF_DAY);\n                minutes = calendar.get(Calendar.MINUTE);\n                if (this.tickMarkPosition == DateTickMarkPosition.START) {\n                    milliseconds = 0;\n                }\n                else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n                    milliseconds = 500;\n                }\n                else {\n                    milliseconds = 999;\n                }\n                calendar.set(Calendar.MILLISECOND, milliseconds);\n                calendar.set(years, months, days, hours, minutes, value);\n                Date dd = calendar.getTime();\n                if (dd.getTime() >= date.getTime()) {\n                    calendar.set(Calendar.SECOND, value - 1);\n                    dd = calendar.getTime();\n                }\n                return calendar.getTime();\n\n            case (DateTickUnit.MINUTE) :\n                years = calendar.get(Calendar.YEAR);\n                months = calendar.get(Calendar.MONTH);\n                days = calendar.get(Calendar.DATE);\n                hours = calendar.get(Calendar.HOUR_OF_DAY);\n                if (this.tickMarkPosition == DateTickMarkPosition.START) {\n                    seconds = 0;\n                }\n                else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n                    seconds = 30;\n                }\n                else {\n                    seconds = 59;\n                }\n                calendar.clear(Calendar.MILLISECOND);\n                calendar.set(years, months, days, hours, value, seconds);\n                Date d0 = calendar.getTime();\n                if (d0.getTime() >= date.getTime()) {\n                    calendar.set(Calendar.MINUTE, value - 1);\n                    d0 = calendar.getTime();\n                }\n                return d0;\n\n            case (DateTickUnit.HOUR) :\n                years = calendar.get(Calendar.YEAR);\n                months = calendar.get(Calendar.MONTH);\n                days = calendar.get(Calendar.DATE);\n                if (this.tickMarkPosition == DateTickMarkPosition.START) {\n                    minutes = 0;\n                    seconds = 0;\n                }\n                else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n                    minutes = 30;\n                    seconds = 0;\n                }\n                else {\n                    minutes = 59;\n                    seconds = 59;\n                }\n                calendar.clear(Calendar.MILLISECOND);\n                calendar.set(years, months, days, value, minutes, seconds);\n                Date d1 = calendar.getTime();\n                if (d1.getTime() >= date.getTime()) {\n                    calendar.set(Calendar.HOUR_OF_DAY, value - 1);\n                    d1 = calendar.getTime();\n                }\n                return d1;\n\n            case (DateTickUnit.DAY) :\n                years = calendar.get(Calendar.YEAR);\n                months = calendar.get(Calendar.MONTH);\n                if (this.tickMarkPosition == DateTickMarkPosition.START) {\n                    hours = 0;\n                    minutes = 0;\n                    seconds = 0;\n                }\n                else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n                    hours = 12;\n                    minutes = 0;\n                    seconds = 0;\n                }\n                else {\n                    hours = 23;\n                    minutes = 59;\n                    seconds = 59;\n                }\n                calendar.clear(Calendar.MILLISECOND);\n                calendar.set(years, months, value, hours, 0, 0);\n                // long result = calendar.getTimeInMillis();  \n                    // won't work with JDK 1.3\n                Date d2 = calendar.getTime();\n                if (d2.getTime() >= date.getTime()) {\n                    calendar.set(Calendar.DATE, value - 1);\n                    d2 = calendar.getTime();\n                }\n                return d2;\n\n            case (DateTickUnit.MONTH) :\n                years = calendar.get(Calendar.YEAR);\n                calendar.clear(Calendar.MILLISECOND);\n                calendar.set(years, value, 1, 0, 0, 0);\n                Month month = new Month(calendar.getTime(), this.timeZone);\n                Date standardDate = calculateDateForPosition(\n                        month, this.tickMarkPosition);\n                long millis = standardDate.getTime();\n                if (millis >= date.getTime()) {\n                    month = (Month) month.previous();\n                    standardDate = calculateDateForPosition(\n                            month, this.tickMarkPosition);\n                }\n                return standardDate;\n\n            case(DateTickUnit.YEAR) :\n                if (this.tickMarkPosition == DateTickMarkPosition.START) {\n                    months = 0;\n                    days = 1;\n                }\n                else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {\n                    months = 6;\n                    days = 1;\n                }\n                else {\n                    months = 11;\n                    days = 31;\n                }\n                calendar.clear(Calendar.MILLISECOND);\n                calendar.set(value, months, days, 0, 0, 0);\n                Date d3 = calendar.getTime();\n                if (d3.getTime() >= date.getTime()) {\n                    calendar.set(Calendar.YEAR, value - 1);\n                    d3 = calendar.getTime();\n                }\n                return d3;\n\n            default: return null;\n\n        }\n\n    }\n",
        "begin_line": 828,
        "end_line": 1004,
        "comment": "\r\n     * Returns the previous \"standard\" date, for a given date and tick unit.\r\n     *\r\n     * @param date  the reference date.\r\n     * @param unit  the tick unit.\r\n     *\r\n     * @return The previous \"standard\" date.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.calculateDateForPosition#1015",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.calculateDateForPosition(org.jfree.data.time.RegularTimePeriod, org.jfree.chart.axis.DateTickMarkPosition)",
        "snippet": "    private Date calculateDateForPosition(RegularTimePeriod period, \n                                          DateTickMarkPosition position) {\n        \n        if (position == null) {\n            throw new IllegalArgumentException(\"Null 'position' argument.\");   \n        }\n        Date result = null;\n        if (position == DateTickMarkPosition.START) {\n            result = new Date(period.getFirstMillisecond());\n        }\n        else if (position == DateTickMarkPosition.MIDDLE) {\n            result = new Date(period.getMiddleMillisecond());\n        }\n        else if (position == DateTickMarkPosition.END) {\n            result = new Date(period.getLastMillisecond());\n        }\n        return result;\n\n    }\n",
        "begin_line": 1015,
        "end_line": 1033,
        "comment": "\r\n     * Returns a {@link java.util.Date} corresponding to the specified position\r\n     * within a {@link RegularTimePeriod}.\r\n     *\r\n     * @param period  the period.\r\n     * @param position  the position (<code>null</code> not permitted).\r\n     *\r\n     * @return A date.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createWaterfallChart#1101",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createWaterfallChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createWaterfallChart(String title,\n                                                  String categoryAxisLabel,\n                                                  String valueAxisLabel,\n                                                  CategoryDataset dataset,\n                                                  PlotOrientation orientation,\n                                                  boolean legend,\n                                                  boolean tooltips,\n                                                  boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        categoryAxis.setCategoryMargin(0.0);\n\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        WaterfallBarRenderer renderer = new WaterfallBarRenderer();\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            ItemLabelPosition position = new ItemLabelPosition(\n                    ItemLabelAnchor.CENTER, TextAnchor.CENTER, \n                    TextAnchor.CENTER, Math.PI / 2.0);\n            renderer.setBasePositiveItemLabelPosition(position);\n            renderer.setBaseNegativeItemLabelPosition(position);\n         }\n        else if (orientation == PlotOrientation.VERTICAL) {\n            ItemLabelPosition position = new ItemLabelPosition(\n                    ItemLabelAnchor.CENTER, TextAnchor.CENTER, \n                    TextAnchor.CENTER, 0.0);\n            renderer.setBasePositiveItemLabelPosition(position);\n            renderer.setBaseNegativeItemLabelPosition(position);\n        }\n        if (tooltips) {\n            StandardCategoryToolTipGenerator generator \n                = new StandardCategoryToolTipGenerator();\n            renderer.setBaseToolTipGenerator(generator);\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.clearRangeMarkers();\n        Marker baseline = new ValueMarker(0.0);\n        baseline.setPaint(Color.black);\n        plot.addRangeMarker(baseline, Layer.FOREGROUND);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, \n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 1101,
        "end_line": 1154,
        "comment": "\r\n     * Creates a waterfall chart.  The chart object returned by this method \r\n     * uses a {@link CategoryPlot} instance as the plot, with a \r\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the\r\n     * range axis, and a {@link WaterfallBarRenderer} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis (<code>null</code> \r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical) \r\n     *                     (<code>null</code> NOT permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A waterfall chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1231
        },
        "num_failing_tests": 1
    },
    {
        "name": "BarRenderer.setPositiveItemLabelPositionFallback#382",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
        "snippet": "    public void setPositiveItemLabelPositionFallback(\n            ItemLabelPosition position) {\n        this.positiveItemLabelPositionFallback = position;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n",
        "begin_line": 382,
        "end_line": 386,
        "comment": "\r\n     * Sets the fallback position for positive item labels that don't fit \r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     * \r\n     * @param position  the position (<code>null</code> permitted).\r\n     * \r\n     * @see #getPositiveItemLabelPositionFallback()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1183
        },
        "num_failing_tests": 2
    },
    {
        "name": "BarRenderer.setNegativeItemLabelPositionFallback#409",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)",
        "snippet": "    public void setNegativeItemLabelPositionFallback(\n            ItemLabelPosition position) {\n        this.negativeItemLabelPositionFallback = position;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n",
        "begin_line": 409,
        "end_line": 413,
        "comment": "\r\n     * Sets the fallback position for negative item labels that don't fit \r\n     * within a bar, and sends a {@link RendererChangeEvent} to all registered\r\n     * listeners.\r\n     * \r\n     * @param position  the position (<code>null</code> permitted).\r\n     * \r\n     * @see #getNegativeItemLabelPositionFallback()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1183
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.toMillisecond#234",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DefaultTimeline.toMillisecond(long)",
        "snippet": "        public long toMillisecond(long value) {\n            return value;\n        }\n",
        "begin_line": 234,
        "end_line": 236,
        "comment": "\r\n         * Converts a timeline value into a millisecond (as encoded by \r\n         * <code>java.util.Date</code>).\r\n         *\r\n         * @param value  the value.\r\n         *\r\n         * @return The millisecond.\r\n         ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1183
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.getSubtitleCount#705",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getSubtitleCount()",
        "snippet": "    public int getSubtitleCount() {\n        return this.subtitles.size();\n    }\n",
        "begin_line": 705,
        "end_line": 707,
        "comment": "\r\n     * Returns the number of titles for the chart.\r\n     *\r\n     * @return The number of titles for the chart.\r\n     * \r\n     * @see #getSubtitles()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1183
        },
        "num_failing_tests": 2
    },
    {
        "name": "BarRenderer3D.BarRenderer3D#175",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.BarRenderer3D()",
        "snippet": "    public BarRenderer3D() {\n        this(DEFAULT_X_OFFSET, DEFAULT_Y_OFFSET);\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\r\n     * Default constructor, creates a renderer with a default '3D effect'.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "PlotOrientation.equals#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object o) {\n\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof PlotOrientation)) {\n            return false;\n        }\n\n        PlotOrientation orientation = (PlotOrientation) o;\n        if (!this.name.equals(orientation.toString())) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 94,
        "end_line": 110,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param o  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "PlotOrientation.readResolve#119",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        Object result = null;\n        if (this.equals(PlotOrientation.HORIZONTAL)) {\n            result = PlotOrientation.HORIZONTAL;\n        }\n        else if (this.equals(PlotOrientation.VERTICAL)) {\n            result = PlotOrientation.VERTICAL;\n        }\n        return result;\n    }\n",
        "begin_line": 119,
        "end_line": 128,
        "comment": "\r\n     * Ensures that serialization returns the unique instances.\r\n     * \r\n     * @return The object.\r\n     * \r\n     * @throws ObjectStreamException if there is a problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1101
        },
        "num_failing_tests": 2
    },
    {
        "name": "SerialUtilities.writePaint#143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SerialUtilities.java",
        "class_name": "org.jfree.chart.util.SerialUtilities",
        "signature": "org.jfree.chart.util.SerialUtilities.writePaint(java.awt.Paint, java.io.ObjectOutputStream)",
        "snippet": "    public static void writePaint(Paint paint, ObjectOutputStream stream) \n            throws IOException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");   \n        }\n        if (paint != null) {\n            stream.writeBoolean(false);\n            stream.writeObject(paint.getClass());\n            if (paint instanceof Serializable) {\n                stream.writeObject(paint);\n            }\n            else if (paint instanceof GradientPaint) {\n                GradientPaint gp = (GradientPaint) paint;\n                stream.writeFloat((float) gp.getPoint1().getX());\n                stream.writeFloat((float) gp.getPoint1().getY());\n                stream.writeObject(gp.getColor1());\n                stream.writeFloat((float) gp.getPoint2().getX());\n                stream.writeFloat((float) gp.getPoint2().getY());\n                stream.writeObject(gp.getColor2());\n                stream.writeBoolean(gp.isCyclic());\n            }\n        }\n        else {\n            stream.writeBoolean(true);\n        }\n\n    }\n",
        "begin_line": 143,
        "end_line": 170,
        "comment": "\n     * Serialises a <code>Paint</code> object.\n     *\n     * @param paint  the paint object (<code>null</code> permitted).\n     * @param stream  the output stream (<code>null</code> not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "RectangleAnchor.equals#104",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleAnchor.java",
        "class_name": "org.jfree.chart.util.RectangleAnchor",
        "signature": "org.jfree.chart.util.RectangleAnchor.equals(java.lang.Object)",
        "snippet": "    public boolean equals(final Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof RectangleAnchor)) {\n            return false;\n        }\n\n        final RectangleAnchor order = (RectangleAnchor) obj;\n        if (!this.name.equals(order.name)) {\n            return false;\n        }\n\n        return true;\n    }\n",
        "begin_line": 104,
        "end_line": 119,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.writeObject#237",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) \n            throws IOException {\n\n        stream.defaultWriteObject();\n        int count = size();\n        stream.writeInt(count);\n        for (int i = 0; i < count; i++) {\n            final Object object = get(i);\n            if (object != null && object instanceof Serializable) {\n                stream.writeInt(i);\n                stream.writeObject(object);\n            }\n            else {\n                stream.writeInt(-1);\n            }\n        }\n\n    }\n",
        "begin_line": 237,
        "end_line": 254,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractObjectList.readObject#264",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n            throws IOException, ClassNotFoundException {\n\n        stream.defaultReadObject();\n        this.objects = new Object[this.size];\n        int count = stream.readInt();\n        for (int i = 0; i < count; i++) {\n            int index = stream.readInt();\n            if (index != -1) {\n                set(index, stream.readObject());\n            }\n        }\n        \n    }\n",
        "begin_line": 264,
        "end_line": 277,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "BarRenderer3D.BarRenderer3D#185",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.BarRenderer3D.BarRenderer3D(double, double)",
        "snippet": "    public BarRenderer3D(double xOffset, double yOffset) {\n\n        super();\n        this.xOffset = xOffset;\n        this.yOffset = yOffset;\n        this.wallPaint = DEFAULT_WALL_PAINT;\n        // set the default item label positions\n        ItemLabelPosition p1 = new ItemLabelPosition(ItemLabelAnchor.INSIDE12, \n                TextAnchor.TOP_CENTER);\n        setBasePositiveItemLabelPosition(p1);\n        ItemLabelPosition p2 = new ItemLabelPosition(ItemLabelAnchor.INSIDE12, \n                TextAnchor.TOP_CENTER);\n        setBaseNegativeItemLabelPosition(p2);\n\n    }\n",
        "begin_line": 185,
        "end_line": 199,
        "comment": "\r\n     * Constructs a new renderer with the specified '3D effect'.\r\n     *\r\n     * @param xOffset  the x-offset for the 3D effect.\r\n     * @param yOffset  the y-offset for the 3D effect.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "PlotOrientation.toString#82",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/PlotOrientation.java",
        "class_name": "org.jfree.chart.plot.PlotOrientation",
        "signature": "org.jfree.chart.plot.PlotOrientation.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 82,
        "end_line": 84,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetRenderingOrder.toString#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 90,
        "end_line": 92,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string (never <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetRenderingOrder.equals#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object o) {\n\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof DatasetRenderingOrder)) {\n            return false;\n        }\n\n        DatasetRenderingOrder order = (DatasetRenderingOrder) o;\n        if (!this.name.equals(order.toString())) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 102,
        "end_line": 118,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param o  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "DatasetRenderingOrder.readResolve#127",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DatasetRenderingOrder.java",
        "class_name": "org.jfree.chart.plot.DatasetRenderingOrder",
        "signature": "org.jfree.chart.plot.DatasetRenderingOrder.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(DatasetRenderingOrder.FORWARD)) {\n            return DatasetRenderingOrder.FORWARD;\n        }\n        else if (this.equals(DatasetRenderingOrder.REVERSE)) {\n            return DatasetRenderingOrder.REVERSE;\n        }      \n        return null;\n    }\n",
        "begin_line": 127,
        "end_line": 135,
        "comment": "\r\n     * Ensures that serialization returns the unique instances.\r\n     * \r\n     * @return The object.\r\n     * \r\n     * @throws ObjectStreamException if there is a problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.getUnit#169",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.getUnit()",
        "snippet": "    public int getUnit() {\n        return this.unit;\n    }\n",
        "begin_line": 169,
        "end_line": 171,
        "comment": "\r\n     * Returns the date unit.  This will be one of the constants \r\n     * <code>YEAR</code>, <code>MONTH</code>, <code>DAY</code>, \r\n     * <code>HOUR</code>, <code>MINUTE</code>, <code>SECOND</code> or \r\n     * <code>MILLISECOND</code>, defined by this class.  Note that these \r\n     * constants do NOT correspond to those defined in Java's \r\n     * <code>Calendar</code> class.\r\n     *\r\n     * @return The date unit.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.getCount#178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.getCount()",
        "snippet": "    public int getCount() {\n        return this.count;\n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\r\n     * Returns the unit count.\r\n     *\r\n     * @return The unit count.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.getCalendarField#301",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.getCalendarField()",
        "snippet": "    public int getCalendarField() {\n        return getCalendarField(this.unit);\n    }\n",
        "begin_line": 301,
        "end_line": 303,
        "comment": "\r\n     * Returns a field code that can be used with the <code>Calendar</code> \r\n     * class.\r\n     *\r\n     * @return The field code.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.DefaultBoxAndWhiskerCategoryDataset#88",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.DefaultBoxAndWhiskerCategoryDataset()",
        "snippet": "    public DefaultBoxAndWhiskerCategoryDataset() {\n        this.data = new KeyedObjects2D();\n        this.minimumRangeValue = null;\n        this.maximumRangeValue = null;\n        this.rangeBounds = new Range(0.0, 0.0);\n    }\n",
        "begin_line": 88,
        "end_line": 93,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.add#118",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)",
        "snippet": "    public void add(BoxAndWhiskerItem item, \n                    Comparable rowKey, \n                    Comparable columnKey) {\n\n        this.data.addObject(item, rowKey, columnKey);\n        double minval = Double.NaN;\n        if (item.getMinOutlier() != null) {\n            minval = item.getMinOutlier().doubleValue();\n        }\n        double maxval = Double.NaN;\n        if (item.getMaxOutlier() != null) {\n            maxval = item.getMaxOutlier().doubleValue();\n        }\n        \n        if (this.maximumRangeValue == null) {\n            this.maximumRangeValue = new Double(maxval);\n        }\n        else if (maxval > this.maximumRangeValue.doubleValue()) {\n            this.maximumRangeValue = new Double(maxval);\n        }\n        \n        if (this.minimumRangeValue == null) {\n            this.minimumRangeValue = new Double(minval);\n        }\n        else if (minval < this.minimumRangeValue.doubleValue()) {\n            this.minimumRangeValue = new Double(minval);\n        }\n        \n        this.rangeBounds = new Range(this.minimumRangeValue.doubleValue(),\n              this.maximumRangeValue.doubleValue());\n\n        fireDatasetChanged();\n\n    }\n",
        "begin_line": 118,
        "end_line": 151,
        "comment": "\r\n     * Adds a list of values relating to one Box and Whisker entity to the \r\n     * table.  The various median values are calculated.\r\n     *\r\n     * @param item  a box and whisker item (<code>null</code> not permitted).\r\n     * @param rowKey  the row key.\r\n     * @param columnKey  the column key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.getRowKey#384",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRowKey(int)",
        "snippet": "    public Comparable getRowKey(int row) {\n        return this.data.getRowKey(row);\n    }\n",
        "begin_line": 384,
        "end_line": 386,
        "comment": "\r\n     * Returns a row key.\r\n     *\r\n     * @param row  the row index (zero-based).\r\n     *\r\n     * @return The row key.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultBoxAndWhiskerCategoryDataset.getRangeBounds#455",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/DefaultBoxAndWhiskerCategoryDataset.java",
        "class_name": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset",
        "signature": "org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeBounds(boolean)",
        "snippet": "    public Range getRangeBounds(boolean includeInterval) {\n        return this.rangeBounds;\n    }\n",
        "begin_line": 455,
        "end_line": 457,
        "comment": "\r\n     * Returns the range of the values in this dataset's range.\r\n     *\r\n     * @param includeInterval  a flag that determines whether or not the\r\n     *                         y-interval is taken into account.\r\n     * \r\n     * @return The range.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerItem.BoxAndWhiskerItem#106",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.BoxAndWhiskerItem(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.util.List)",
        "snippet": "    public BoxAndWhiskerItem(Number mean,\n                             Number median,\n                             Number q1,\n                             Number q3,\n                             Number minRegularValue,\n                             Number maxRegularValue,\n                             Number minOutlier,\n                             Number maxOutlier,\n                             List outliers) {\n                                 \n        this.mean = mean;\n        this.median = median;    \n        this.q1 = q1;\n        this.q3 = q3;\n        this.minRegularValue = minRegularValue;\n        this.maxRegularValue = maxRegularValue;\n        this.minOutlier = minOutlier;\n        this.maxOutlier = maxOutlier;\n        this.outliers = outliers;\n        \n    }\n",
        "begin_line": 106,
        "end_line": 126,
        "comment": "\r\n     * Creates a new box-and-whisker item.\r\n     * \r\n     * @param mean  the mean (<code>null</code> permitted).\r\n     * @param median  the median (<code>null</code> permitted).\r\n     * @param q1  the first quartile (<code>null</code> permitted).\r\n     * @param q3  the third quartile (<code>null</code> permitted).\r\n     * @param minRegularValue  the minimum regular value (<code>null</code> \r\n     *                         permitted).\r\n     * @param maxRegularValue  the maximum regular value (<code>null</code> \r\n     *                         permitted).\r\n     * @param minOutlier  the minimum outlier (<code>null</code> permitted).\r\n     * @param maxOutlier  the maximum outlier (<code>null</code> permitted).\r\n     * @param outliers  the outliers (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerItem.getMinOutlier#187",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.getMinOutlier()",
        "snippet": "    public Number getMinOutlier() {\n        return this.minOutlier;\n    }\n",
        "begin_line": 187,
        "end_line": 189,
        "comment": "\r\n     * Returns the minimum outlier.\r\n     * \r\n     * @return The minimum outlier (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerItem.getMaxOutlier#196",
        "is_bug": false,
        "src_path": "source/org/jfree/data/statistics/BoxAndWhiskerItem.java",
        "class_name": "org.jfree.data.statistics.BoxAndWhiskerItem",
        "signature": "org.jfree.data.statistics.BoxAndWhiskerItem.getMaxOutlier()",
        "snippet": "    public Number getMaxOutlier() {\n        return this.maxOutlier;\n    }\n",
        "begin_line": 196,
        "end_line": 198,
        "comment": "\r\n     * Returns the maximum outlier.\r\n     * \r\n     * @return The maximum outlier (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyToGroupMap.KeyToGroupMap#83",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "class_name": "org.jfree.data.KeyToGroupMap",
        "signature": "org.jfree.data.KeyToGroupMap.KeyToGroupMap()",
        "snippet": "    public KeyToGroupMap() {\n        this(\"Default Group\");\n    }\n",
        "begin_line": 83,
        "end_line": 85,
        "comment": "\r\n     * Creates a new map with a default group named 'Default Group'.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "KeyToGroupMap.KeyToGroupMap#92",
        "is_bug": false,
        "src_path": "source/org/jfree/data/KeyToGroupMap.java",
        "class_name": "org.jfree.data.KeyToGroupMap",
        "signature": "org.jfree.data.KeyToGroupMap.KeyToGroupMap(java.lang.Comparable)",
        "snippet": "    public KeyToGroupMap(Comparable defaultGroup) {\n        if (defaultGroup == null) {\n            throw new IllegalArgumentException(\"Null 'defaultGroup' argument.\");\n        }\n        this.defaultGroup = defaultGroup;\n        this.groups = new ArrayList();\n        this.keyToGroupMap = new HashMap();\n    }\n",
        "begin_line": 92,
        "end_line": 99,
        "comment": "\r\n     * Creates a new map with the specified default group.\r\n     * \r\n     * @param defaultGroup  the default group (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "StackedBarRenderer3D.findRangeBounds#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        if (this.renderAsPercentages) {\n            return new Range(0.0, 1.0);   \n        }\n        else {\n            return DatasetUtilities.findStackedRangeBounds(dataset);\n        }\n    }\n",
        "begin_line": 215,
        "end_line": 222,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the \r\n     * items from the specified dataset.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * \r\n     * @return The range (or <code>null</code> if the dataset is empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "StackedBarRenderer.findRangeBounds#212",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        if (this.renderAsPercentages) {\n            return new Range(0.0, 1.0);   \n        }\n        else {\n            return DatasetUtilities.findStackedRangeBounds(dataset, getBase());\n        }\n    }\n",
        "begin_line": 212,
        "end_line": 219,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the\r\n     * items from the specified dataset.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @return The range (or <code>null</code> if the dataset is empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "StackedAreaRenderer.findRangeBounds#165",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StackedAreaRenderer",
        "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public Range findRangeBounds(CategoryDataset dataset) {\n        if (this.renderAsPercentages) {\n            return new Range(0.0, 1.0);   \n        }\n        else {\n            return DatasetUtilities.findStackedRangeBounds(dataset);\n        }\n    }\n",
        "begin_line": 165,
        "end_line": 172,
        "comment": "\r\n     * Returns the range of values the renderer requires to display all the \r\n     * items from the specified dataset.\r\n     * \r\n     * @param dataset  the dataset (<code>null</code> not permitted).\r\n     * \r\n     * @return The range (or <code>null</code> if the dataset is empty).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "GroupedStackedBarRenderer.GroupedStackedBarRenderer#90",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/GroupedStackedBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer",
        "signature": "org.jfree.chart.renderer.category.GroupedStackedBarRenderer.GroupedStackedBarRenderer()",
        "snippet": "    public GroupedStackedBarRenderer() {\n        super();\n        this.seriesToGroupMap = new KeyToGroupMap();\n    }\n",
        "begin_line": 90,
        "end_line": 93,
        "comment": "\r\n     * Creates a new renderer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "BarRenderer.getBase#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.getBase()",
        "snippet": "    public double getBase() {\n        return this.base;    \n    }\n",
        "begin_line": 215,
        "end_line": 217,
        "comment": "\r\n     * Returns the base value for the bars.  The default value is \r\n     * <code>0.0</code>.\r\n     * \r\n     * @return The base value for the bars.\r\n     * \r\n     * @see #setBase(double)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "Marker.setPaint#221",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.setPaint(java.awt.Paint)",
        "snippet": "    public void setPaint(Paint paint) {\n        if (paint == null) {\n            throw new IllegalArgumentException(\"Null 'paint' argument.\");\n        }\n        this.paint = paint;\n        notifyListeners(new MarkerChangeEvent(this));\n    }\n",
        "begin_line": 221,
        "end_line": 227,
        "comment": "\r\n     * Sets the paint and sends a {@link MarkerChangeEvent} to all registered\r\n     * listeners.\r\n     * \r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     * \r\n     * @see #getPaint()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRenderer#1329",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)",
        "snippet": "    public void setRenderer(int index, CategoryItemRenderer renderer) {\n        setRenderer(index, renderer, true);   \n    }\n",
        "begin_line": 1329,
        "end_line": 1331,
        "comment": "\r\n     * Sets the renderer at the specified index and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param index  the index.\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     * \r\n     * @see #getRenderer(int)\r\n     * @see #setRenderer(int, CategoryItemRenderer, boolean)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createStackedBarChart#653",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createStackedBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createStackedBarChart(String title,\n                                                   String domainAxisLabel,\n                                                   String rangeAxisLabel,\n                                                   CategoryDataset dataset,\n                                                   PlotOrientation orientation,\n                                                   boolean legend,\n                                                   boolean tooltips,\n                                                   boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n\n        CategoryAxis categoryAxis = new CategoryAxis(domainAxisLabel);\n        ValueAxis valueAxis = new NumberAxis(rangeAxisLabel);\n\n        StackedBarRenderer renderer = new StackedBarRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 653,
        "end_line": 686,
        "comment": "\r\n     * Creates a stacked bar chart with default settings.  The chart object \r\n     * returned by this method uses a {@link CategoryPlot} instance as the\r\n     * plot, with a {@link CategoryAxis} for the domain axis, a \r\n     * {@link NumberAxis} as the range axis, and a {@link StackedBarRenderer} \r\n     * as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param domainAxisLabel  the label for the category axis \r\n     *                         (<code>null</code> permitted).\r\n     * @param rangeAxisLabel  the label for the value axis \r\n     *                        (<code>null</code> permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the orientation of the chart (horizontal or \r\n     *                     vertical) (<code>null</code> not permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A stacked bar chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createBarChart3D#708",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createBarChart3D(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createBarChart3D(String title,\n                                              String categoryAxisLabel,\n                                              String valueAxisLabel,\n                                              CategoryDataset dataset,\n                                              PlotOrientation orientation,\n                                              boolean legend,\n                                              boolean tooltips,\n                                              boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);\n\n        BarRenderer3D renderer = new BarRenderer3D();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            // change rendering order to ensure that bar overlapping is the \n            // right way around\n            plot.setRowRenderingOrder(SortOrder.DESCENDING);\n            plot.setColumnRenderingOrder(SortOrder.DESCENDING);\n        }\n        plot.setForegroundAlpha(0.75f);\n\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 708,
        "end_line": 748,
        "comment": "\r\n     * Creates a bar chart with a 3D effect. The chart object returned by this \r\n     * method uses a {@link CategoryPlot} instance as the plot, with a \r\n     * {@link CategoryAxis3D} for the domain axis, a {@link NumberAxis3D} as \r\n     * the range axis, and a {@link BarRenderer3D} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis (<code>null</code> \r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical) \r\n     *                     (<code>null</code> not permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A bar chart with a 3D effect.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createStackedBarChart3D#771",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createStackedBarChart3D(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createStackedBarChart3D(String title,\n                                                    String categoryAxisLabel,\n                                                    String valueAxisLabel,\n                                                    CategoryDataset dataset,\n                                                    PlotOrientation orientation,\n                                                    boolean legend,\n                                                    boolean tooltips,\n                                                    boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);\n\n        // create the renderer...\n        CategoryItemRenderer renderer = new StackedBarRenderer3D();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        // create the plot...\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        if (orientation == PlotOrientation.HORIZONTAL) {\n            // change rendering order to ensure that bar overlapping is the \n            // right way around\n            plot.setColumnRenderingOrder(SortOrder.DESCENDING);\n        }\n\n        // create the chart...\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, \n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 771,
        "end_line": 812,
        "comment": "\r\n     * Creates a stacked bar chart with a 3D effect and default settings. The \r\n     * chart object returned by this method uses a {@link CategoryPlot} \r\n     * instance as the plot, with a {@link CategoryAxis3D} for the domain axis, \r\n     * a {@link NumberAxis3D} as the range axis, and a \r\n     * {@link StackedBarRenderer3D} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis (<code>null</code> \r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the orientation (horizontal or vertical) \r\n     *                     (<code>null</code> not permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A stacked bar chart with a 3D effect.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createAreaChart#834",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createAreaChart(String title,\n                                             String categoryAxisLabel,\n                                             String valueAxisLabel,\n                                             CategoryDataset dataset,\n                                             PlotOrientation orientation,\n                                             boolean legend,\n                                             boolean tooltips,\n                                             boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        categoryAxis.setCategoryMargin(0.0);\n\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        AreaRenderer renderer = new AreaRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 834,
        "end_line": 868,
        "comment": "\r\n     * Creates an area chart with default settings.  The chart object returned\r\n     * by this method uses a {@link CategoryPlot} instance as the plot, with a \r\n     * {@link CategoryAxis} for the domain axis, a {@link NumberAxis} as the\r\n     * range axis, and an {@link AreaRenderer} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis (<code>null</code> \r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (<code>null</code> not \r\n     *                     permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return An area chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createStackedAreaChart#891",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createStackedAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createStackedAreaChart(String title,\n                                                    String categoryAxisLabel,\n                                                    String valueAxisLabel,\n                                                    CategoryDataset dataset,\n                                                    PlotOrientation orientation,\n                                                    boolean legend,\n                                                    boolean tooltips,\n                                                    boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis(valueAxisLabel);\n\n        StackedAreaRenderer renderer = new StackedAreaRenderer();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT, \n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 891,
        "end_line": 923,
        "comment": "\r\n     * Creates a stacked area chart with default settings.  The chart object \r\n     * returned by this method uses a {@link CategoryPlot} instance as the\r\n     * plot, with a {@link CategoryAxis} for the domain axis, a \r\n     * {@link NumberAxis} as the range axis, and a {@link StackedAreaRenderer} \r\n     * as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis (<code>null</code> \r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the plot orientation (horizontal or vertical) \r\n     *                     (<code>null</code> not permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A stacked area chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "ChartFactory.createLineChart3D#998",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/ChartFactory.java",
        "class_name": "org.jfree.chart.ChartFactory",
        "signature": "org.jfree.chart.ChartFactory.createLineChart3D(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)",
        "snippet": "    public static JFreeChart createLineChart3D(String title,\n                                               String categoryAxisLabel,\n                                               String valueAxisLabel,\n                                               CategoryDataset dataset,\n                                               PlotOrientation orientation,\n                                               boolean legend,\n                                               boolean tooltips,\n                                               boolean urls) {\n\n        if (orientation == null) {\n            throw new IllegalArgumentException(\"Null 'orientation' argument.\");\n        }\n        CategoryAxis categoryAxis = new CategoryAxis3D(categoryAxisLabel);\n        ValueAxis valueAxis = new NumberAxis3D(valueAxisLabel);\n\n        LineRenderer3D renderer = new LineRenderer3D();\n        if (tooltips) {\n            renderer.setBaseToolTipGenerator(\n                    new StandardCategoryToolTipGenerator());\n        }\n        if (urls) {\n            renderer.setBaseURLGenerator(new StandardCategoryURLGenerator());\n        }\n        CategoryPlot plot = new CategoryPlot(dataset, categoryAxis, valueAxis, \n                renderer);\n        plot.setOrientation(orientation);\n        JFreeChart chart = new JFreeChart(title, JFreeChart.DEFAULT_TITLE_FONT,\n                plot, legend);\n\n        return chart;\n\n    }\n",
        "begin_line": 998,
        "end_line": 1029,
        "comment": "\r\n     * Creates a line chart with default settings. The chart object returned by \r\n     * this method uses a {@link CategoryPlot} instance as the plot, with a \r\n     * {@link CategoryAxis3D} for the domain axis, a {@link NumberAxis3D} as \r\n     * the range axis, and a {@link LineRenderer3D} as the renderer.\r\n     *\r\n     * @param title  the chart title (<code>null</code> permitted).\r\n     * @param categoryAxisLabel  the label for the category axis \r\n     *                           (<code>null</code> permitted).\r\n     * @param valueAxisLabel  the label for the value axis (<code>null</code> \r\n     *                        permitted).\r\n     * @param dataset  the dataset for the chart (<code>null</code> permitted).\r\n     * @param orientation  the chart orientation (horizontal or vertical) \r\n     *                     (<code>null</code> not permitted).\r\n     * @param legend  a flag specifying whether or not a legend is required.\r\n     * @param tooltips  configure chart to generate tool tips?\r\n     * @param urls  configure chart to generate URLs?\r\n     *\r\n     * @return A line chart.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1066
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.plotChanged#1559",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.plotChanged(org.jfree.chart.event.PlotChangeEvent)",
        "snippet": "    public void plotChanged(PlotChangeEvent event) {\n        event.setChart(this);\n        notifyListeners(event);\n    }\n",
        "begin_line": 1559,
        "end_line": 1562,
        "comment": "\r\n     * Receives notification that the plot has changed, and passes this on to\r\n     * registered listeners.\r\n     *\r\n     * @param event  information about the plot change.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1034
        },
        "num_failing_tests": 4
    },
    {
        "name": "AxisLocation.equals#118",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof AxisLocation)) {\n            return false;\n        }\n        AxisLocation location = (AxisLocation) obj;\n        if (!this.name.equals(location.toString())) {\n            return false;\n        }\n        return true;\n\n    }\n",
        "begin_line": 118,
        "end_line": 132,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param obj  the other object (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1034
        },
        "num_failing_tests": 2
    },
    {
        "name": "ChartChangeEvent.setChart#114",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/ChartChangeEvent.java",
        "class_name": "org.jfree.chart.event.ChartChangeEvent",
        "signature": "org.jfree.chart.event.ChartChangeEvent.setChart(org.jfree.chart.JFreeChart)",
        "snippet": "    public void setChart(JFreeChart chart) {\n        this.chart = chart;\n    }\n",
        "begin_line": 114,
        "end_line": 116,
        "comment": "\r\n     * Sets the chart that generated the change event.\r\n     *\r\n     * @param chart  the chart that generated the event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1019
        },
        "num_failing_tests": 4
    },
    {
        "name": "ValueAxis.getDefaultAutoRange#1025",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.getDefaultAutoRange()",
        "snippet": "    public Range getDefaultAutoRange() {\n        return this.defaultAutoRange;\n    }\n",
        "begin_line": 1025,
        "end_line": 1027,
        "comment": "\r\n     * Returns the default auto range.\r\n     * \r\n     * @return The default auto range (never <code>null</code>).\r\n     * \r\n     * @see #setDefaultAutoRange(Range)\r\n     * \r\n     * @since 1.0.5\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1011
        },
        "num_failing_tests": 3
    },
    {
        "name": "AreaRenderer.AreaRenderer#111",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AreaRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AreaRenderer",
        "signature": "org.jfree.chart.renderer.category.AreaRenderer.AreaRenderer()",
        "snippet": "    public AreaRenderer() {\n        super();\n        this.endType = AreaRendererEndType.TAPER;\n    }\n",
        "begin_line": 111,
        "end_line": 114,
        "comment": "\r\n     * Creates a new renderer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 2
    },
    {
        "name": "AreaRendererEndType.AreaRendererEndType#85",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AreaRendererEndType.java",
        "class_name": "org.jfree.chart.renderer.AreaRendererEndType",
        "signature": "org.jfree.chart.renderer.AreaRendererEndType.AreaRendererEndType(java.lang.String)",
        "snippet": "    private AreaRendererEndType(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.1005
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.notifyListeners#1490",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.notifyListeners(org.jfree.chart.event.ChartChangeEvent)",
        "snippet": "    protected void notifyListeners(ChartChangeEvent event) {\n        if (this.notify) {\n            Object[] listeners = this.changeListeners.getListenerList();\n            for (int i = listeners.length - 2; i >= 0; i -= 2) {\n                if (listeners[i] == ChartChangeListener.class) {\n                    ((ChartChangeListener) listeners[i + 1]).chartChanged(\n                            event);\n                }\n            }\n        }\n    }\n",
        "begin_line": 1490,
        "end_line": 1500,
        "comment": "\r\n     * Sends a {@link ChartChangeEvent} to all registered listeners.\r\n     *\r\n     * @param event  information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0991
        },
        "num_failing_tests": 4
    },
    {
        "name": "AbstractDataset.writeObject#204",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n    }\n",
        "begin_line": 204,
        "end_line": 206,
        "comment": "\r\n     * Handles serialization.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException if there is an I/O problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0978
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractDataset.readObject#216",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.listenerList = new EventListenerList();\n        stream.registerValidation(this, 10);  // see comments about priority of\n                                              // 10 in validateObject() \n    }\n",
        "begin_line": 216,
        "end_line": 222,
        "comment": "\r\n     * Restores a serialized object.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException if there is an I/O problem.\r\n     * @throws ClassNotFoundException if there is a problem loading a class.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0978
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractDataset.validateObject#241",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractDataset.java",
        "class_name": "org.jfree.data.general.AbstractDataset",
        "signature": "org.jfree.data.general.AbstractDataset.validateObject()",
        "snippet": "    public void validateObject() throws InvalidObjectException {\n       fireDatasetChanged();\n    }\n",
        "begin_line": 241,
        "end_line": 243,
        "comment": "\r\n     * Validates the object. We use this opportunity to call listeners who have \r\n     * registered during the deserialization process, as listeners are not \r\n     * serialized. This method is called by the serialization system after the \r\n     * entire graph is read.\r\n     *  \r\n     * This object has registered itself to the system with a priority of 10. \r\n     * Other callbacks may register with a higher priority number to be called \r\n     * before this object, or with a lower priority number to be called after \r\n     * the listeners were notified.\r\n     * \r\n     * All listeners are supposed to have register by now, either in their \r\n     * readObject or validateObject methods. Notify them that this dataset has \r\n     * changed.  \r\n     *\r\n     * @exception InvalidObjectException If the object cannot validate itself.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0978
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.notifyListeners#554",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.notifyListeners(org.jfree.chart.event.MarkerChangeEvent)",
        "snippet": "    public void notifyListeners(MarkerChangeEvent event) {\n\n        Object[] listeners = this.listenerList.getListenerList();\n        for (int i = listeners.length - 2; i >= 0; i -= 2) {\n            if (listeners[i] == MarkerChangeListener.class) {\n                ((MarkerChangeListener) listeners[i + 1]).markerChanged(event);\n            }\n        }\n\n    }\n",
        "begin_line": 554,
        "end_line": 563,
        "comment": "\r\n     * Notifies all registered listeners that the marker has been modified.\r\n     *\r\n     * @param event  information about the change event.\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0978
        },
        "num_failing_tests": 2
    },
    {
        "name": "MarkerChangeEvent.MarkerChangeEvent#66",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/event/MarkerChangeEvent.java",
        "class_name": "org.jfree.chart.event.MarkerChangeEvent",
        "signature": "org.jfree.chart.event.MarkerChangeEvent.MarkerChangeEvent(org.jfree.chart.plot.Marker)",
        "snippet": "    public MarkerChangeEvent(Marker marker) {\n        super(marker);\n        this.marker = marker;\n    }\n",
        "begin_line": 66,
        "end_line": 69,
        "comment": "\r\n     * Creates a new <code>MarkerChangeEvent</code> instance.\r\n     *\r\n     * @param marker  the marker that triggered the event (<code>null</code> \r\n     *     not permitted).\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0978
        },
        "num_failing_tests": 2
    },
    {
        "name": "StatisticalLineAndShapeRenderer.StatisticalLineAndShapeRenderer#98",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.StatisticalLineAndShapeRenderer()",
        "snippet": "    public StatisticalLineAndShapeRenderer() {\n        this(true, true);\n    }\n",
        "begin_line": 98,
        "end_line": 100,
        "comment": "\r\n     * Constructs a default renderer (draws shapes and lines).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "StatisticalBarRenderer.StatisticalBarRenderer#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StatisticalBarRenderer",
        "signature": "org.jfree.chart.renderer.category.StatisticalBarRenderer.StatisticalBarRenderer()",
        "snippet": "    public StatisticalBarRenderer() {\n        super();\n        this.errorIndicatorPaint = Color.gray;\n    }\n",
        "begin_line": 102,
        "end_line": 105,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "MinMaxCategoryRenderer.getIcon#481",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, boolean, boolean)",
        "snippet": "    private Icon getIcon(Shape shape, final boolean fill, \n                         final boolean outline) {\n        final int width = shape.getBounds().width;\n        final int height = shape.getBounds().height;\n        final GeneralPath path = new GeneralPath(shape);\n        return new Icon() {\n            public void paintIcon(Component c, Graphics g, int x, int y) {\n                Graphics2D g2 = (Graphics2D) g;\n                path.transform(AffineTransform.getTranslateInstance(x, y));\n                if (fill) {\n                    g2.fill(path);\n                }\n                if (outline) {\n                    g2.draw(path);\n                }\n                path.transform(AffineTransform.getTranslateInstance(-x, -y));\n            }\n\n            public int getIconWidth() {\n                return width;\n            }\n\n            public int getIconHeight() {\n                return height;\n            }\n        };\n    }\n",
        "begin_line": 481,
        "end_line": 507,
        "comment": "\r\n     * Returns an icon.\r\n     *\r\n     * @param shape  the shape.\r\n     * @param fill  the fill flag.\r\n     * @param outline  the outline flag.\r\n     *\r\n     * @return The icon.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "MinMaxCategoryRenderer.getIcon#440",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, java.awt.Paint, java.awt.Paint)",
        "snippet": "    private Icon getIcon(Shape shape, final Paint fillPaint, \n                        final Paint outlinePaint) {\n\n      final int width = shape.getBounds().width;\n      final int height = shape.getBounds().height;\n      final GeneralPath path = new GeneralPath(shape);\n      return new Icon() {\n          public void paintIcon(Component c, Graphics g, int x, int y) {\n              Graphics2D g2 = (Graphics2D) g;\n              path.transform(AffineTransform.getTranslateInstance(x, y));\n              if (fillPaint != null) {\n                  g2.setPaint(fillPaint);\n                  g2.fill(path);\n              }\n              if (outlinePaint != null) {\n                  g2.setPaint(outlinePaint);\n                  g2.draw(path);\n              }\n              path.transform(AffineTransform.getTranslateInstance(-x, -y));\n        }\n\n        public int getIconWidth() {\n            return width;\n        }\n\n        public int getIconHeight() {\n            return height;\n        }\n\n      };\n    }\n",
        "begin_line": 440,
        "end_line": 470,
        "comment": "\r\n     * Returns an icon.\r\n     *\r\n     * @param shape  the shape.\r\n     * @param fillPaint  the fill paint.\r\n     * @param outlinePaint  the outline paint.\r\n     *\r\n     * @return The icon.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "MinMaxCategoryRenderer.MinMaxCategoryRenderer#143",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/MinMaxCategoryRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer",
        "signature": "org.jfree.chart.renderer.category.MinMaxCategoryRenderer.MinMaxCategoryRenderer()",
        "snippet": "    public MinMaxCategoryRenderer() {\n        super();\n    }\n",
        "begin_line": 143,
        "end_line": 145,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "LayeredBarRenderer.LayeredBarRenderer#91",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LayeredBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LayeredBarRenderer",
        "signature": "org.jfree.chart.renderer.category.LayeredBarRenderer.LayeredBarRenderer()",
        "snippet": "    public LayeredBarRenderer() {\n        super();\n        this.seriesBarWidthList = new ObjectList();\n    }\n",
        "begin_line": 91,
        "end_line": 94,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "BoxAndWhiskerRenderer.getLegendItem#226",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getLegendItem(int, int)",
        "snippet": "    public LegendItem getLegendItem(int datasetIndex, int series) {\n\n        CategoryPlot cp = getPlot();\n        if (cp == null) {\n            return null;\n        }\n\n        // check that a legend item needs to be displayed...\n        if (!isSeriesVisible(series) || !isSeriesVisibleInLegend(series)) {\n            return null;\n        }\n\n        CategoryDataset dataset = cp.getDataset(datasetIndex);\n        String label = getLegendItemLabelGenerator().generateLabel(dataset, \n                series);\n        String description = label;\n        String toolTipText = null; \n        if (getLegendItemToolTipGenerator() != null) {\n            toolTipText = getLegendItemToolTipGenerator().generateLabel(\n                    dataset, series);   \n        }\n        String urlText = null;\n        if (getLegendItemURLGenerator() != null) {\n            urlText = getLegendItemURLGenerator().generateLabel(dataset, \n                    series);   \n        }\n        Shape shape = new Rectangle2D.Double(-4.0, -4.0, 8.0, 8.0);\n        Paint paint = lookupSeriesPaint(series);\n        Paint outlinePaint = lookupSeriesOutlinePaint(series);\n        Stroke outlineStroke = lookupSeriesOutlineStroke(series);\n        LegendItem result = new LegendItem(label, description, toolTipText, \n                urlText, shape, paint, outlineStroke, outlinePaint);\n        result.setDataset(dataset);\n        result.setDatasetIndex(datasetIndex);\n        result.setSeriesKey(dataset.getRowKey(series));\n        result.setSeriesIndex(series);\n        return result;\n\n    }\n",
        "begin_line": 226,
        "end_line": 264,
        "comment": "\r\n     * Returns a legend item for a series.\r\n     *\r\n     * @param datasetIndex  the dataset index (zero-based).\r\n     * @param series  the series index (zero-based).\r\n     *\r\n     * @return The legend item (possibly <code>null</code>).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "Marker.setLabelOffsetType#490",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.setLabelOffsetType(org.jfree.chart.util.LengthAdjustmentType)",
        "snippet": "    public void setLabelOffsetType(LengthAdjustmentType adj) {\n        if (adj == null) {\n            throw new IllegalArgumentException(\"Null 'adj' argument.\");\n        }\n        this.labelOffsetType = adj;    \n        notifyListeners(new MarkerChangeEvent(this));\n    }\n",
        "begin_line": 490,
        "end_line": 496,
        "comment": "\r\n     * Sets the label offset type and sends a {@link MarkerChangeEvent} to all\r\n     * registered listeners.\r\n     * \r\n     * @param adj  the type (<code>null</code> not permitted).\r\n     * \r\n     * @see #getLabelOffsetType()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRowRenderingOrder#1495",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRowRenderingOrder(org.jfree.chart.util.SortOrder)",
        "snippet": "    public void setRowRenderingOrder(SortOrder order) {\n        if (order == null) {\n            throw new IllegalArgumentException(\"Null 'order' argument.\");\n        }\n        this.rowRenderingOrder = order;\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 1495,
        "end_line": 1501,
        "comment": "\r\n     * Sets the row order in which the items in each dataset should be \r\n     * rendered and sends a {@link PlotChangeEvent} to all registered \r\n     * listeners.  Note that this affects the order in which items are drawn, \r\n     * NOT their position in the chart.\r\n     * \r\n     * @param order  the order (<code>null</code> not permitted).\r\n     * \r\n     * @see #getRowRenderingOrder()\r\n     * @see #setColumnRenderingOrder(SortOrder)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.clearRangeMarkers#2089",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.clearRangeMarkers()",
        "snippet": "    public void clearRangeMarkers() {\n        if (this.backgroundRangeMarkers != null) {\n            Set keys = this.backgroundRangeMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearRangeMarkers(key.intValue());\n            }\n            this.backgroundRangeMarkers.clear();\n        }\n        if (this.foregroundRangeMarkers != null) {\n            Set keys = this.foregroundRangeMarkers.keySet();\n            Iterator iterator = keys.iterator();\n            while (iterator.hasNext()) {\n                Integer key = (Integer) iterator.next();\n                clearRangeMarkers(key.intValue());\n            }\n            this.foregroundRangeMarkers.clear();\n        }\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 2089,
        "end_line": 2109,
        "comment": "\r\n     * Clears all the range markers for the plot and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     * \r\n     * @see #clearDomainMarkers()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.clearRangeMarkers#2155",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.clearRangeMarkers(int)",
        "snippet": "    public void clearRangeMarkers(int index) {\n        Integer key = new Integer(index);\n        if (this.backgroundRangeMarkers != null) {\n            Collection markers \n                = (Collection) this.backgroundRangeMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        if (this.foregroundRangeMarkers != null) {\n            Collection markers \n                = (Collection) this.foregroundRangeMarkers.get(key);\n            if (markers != null) {\n                Iterator iterator = markers.iterator();\n                while (iterator.hasNext()) {\n                    Marker m = (Marker) iterator.next();\n                    m.removeChangeListener(this);\n                }\n                markers.clear();\n            }\n        }\n        notifyListeners(new PlotChangeEvent(this));\n    }\n",
        "begin_line": 2155,
        "end_line": 2182,
        "comment": "\r\n     * Clears all the range markers for the specified renderer.\r\n     * \r\n     * @param index  the renderer index.\r\n     * \r\n     * @see #clearDomainMarkers(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0953
        },
        "num_failing_tests": 1
    },
    {
        "name": "AxisLocation.toString#106",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/AxisLocation.java",
        "class_name": "org.jfree.chart.axis.AxisLocation",
        "signature": "org.jfree.chart.axis.AxisLocation.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 106,
        "end_line": 108,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.093
        },
        "num_failing_tests": 2
    },
    {
        "name": "GradientPaintTransformType.readResolve#138",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        GradientPaintTransformType result = null;\n        if (this.equals(GradientPaintTransformType.HORIZONTAL)) {\n            result = GradientPaintTransformType.HORIZONTAL;\n        }\n        else if (this.equals(GradientPaintTransformType.VERTICAL)) {\n            result = GradientPaintTransformType.VERTICAL;\n        }\n        else if (this.equals(GradientPaintTransformType.CENTER_HORIZONTAL)) {\n            result = GradientPaintTransformType.CENTER_HORIZONTAL;\n        }\n        else if (this.equals(GradientPaintTransformType.CENTER_VERTICAL)) {\n            result = GradientPaintTransformType.CENTER_VERTICAL;\n        }\n        return result;\n    }\n",
        "begin_line": 138,
        "end_line": 153,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0909
        },
        "num_failing_tests": 2
    },
    {
        "name": "GradientPaintTransformType.equals#105",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/GradientPaintTransformType.java",
        "class_name": "org.jfree.chart.util.GradientPaintTransformType",
        "signature": "org.jfree.chart.util.GradientPaintTransformType.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof GradientPaintTransformType)) {\n            return false;\n        }\n\n        GradientPaintTransformType t = (GradientPaintTransformType) obj;\n        if (!this.name.equals(t.name)) {\n            return false;\n        }\n\n        return true;\n    }\n",
        "begin_line": 105,
        "end_line": 120,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0889
        },
        "num_failing_tests": 2
    },
    {
        "name": "RangeType.equals#97",
        "is_bug": false,
        "src_path": "source/org/jfree/data/RangeType.java",
        "class_name": "org.jfree.data.RangeType",
        "signature": "org.jfree.data.RangeType.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof RangeType)) {\n            return false;\n        }\n        RangeType that = (RangeType) obj;\n        if (!this.name.equals(that.toString())) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 97,
        "end_line": 110,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param obj  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "RangeType.readResolve#128",
        "is_bug": false,
        "src_path": "source/org/jfree/data/RangeType.java",
        "class_name": "org.jfree.data.RangeType",
        "signature": "org.jfree.data.RangeType.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(RangeType.FULL)) {\n            return RangeType.FULL;\n        }\n        else if (this.equals(RangeType.POSITIVE)) {\n            return RangeType.POSITIVE;\n        }\n        else if (this.equals(RangeType.NEGATIVE)) {\n            return RangeType.NEGATIVE;\n        }\n        return null;\n    }\n",
        "begin_line": 128,
        "end_line": 139,
        "comment": "\r\n     * Ensures that serialization returns the unique instances.\r\n     * \r\n     * @return The object.\r\n     * \r\n     * @throws ObjectStreamException if there is a problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "SerialUtilities.readShape#261",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SerialUtilities.java",
        "class_name": "org.jfree.chart.util.SerialUtilities",
        "signature": "org.jfree.chart.util.SerialUtilities.readShape(java.io.ObjectInputStream)",
        "snippet": "    public static Shape readShape(ObjectInputStream stream)\n            throws IOException, ClassNotFoundException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");   \n        }\n        Shape result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            Class c = (Class) stream.readObject();\n            if (c.equals(Line2D.class)) {\n                double x1 = stream.readDouble();\n                double y1 = stream.readDouble();\n                double x2 = stream.readDouble();\n                double y2 = stream.readDouble();\n                result = new Line2D.Double(x1, y1, x2, y2);\n            }\n            else if (c.equals(Rectangle2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Rectangle2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Ellipse2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                result = new Ellipse2D.Double(x, y, w, h);\n            }\n            else if (c.equals(Arc2D.class)) {\n                double x = stream.readDouble();\n                double y = stream.readDouble();\n                double w = stream.readDouble();\n                double h = stream.readDouble();\n                double as = stream.readDouble(); // Angle Start\n                double ae = stream.readDouble(); // Angle Extent\n                int at = stream.readInt();       // Arc type\n                result = new Arc2D.Double(x, y, w, h, as, ae, at);\n            }            \n            else if (c.equals(GeneralPath.class)) {\n                GeneralPath gp = new GeneralPath();\n                float[] args = new float[6];\n                boolean hasNext = stream.readBoolean();\n                while (!hasNext) {\n                    int type = stream.readInt();\n                    for (int i = 0; i < 6; i++) {\n                        args[i] = stream.readFloat();\n                    }\n                    switch (type) { \n                        case PathIterator.SEG_MOVETO :  \n                            gp.moveTo(args[0], args[1]);\n                            break;\n                        case PathIterator.SEG_LINETO :                           \n                            gp.lineTo(args[0], args[1]);\n                            break; \n                        case PathIterator.SEG_CUBICTO :\n                            gp.curveTo(\n                                args[0], args[1], args[2], \n                                args[3], args[4], args[5]\n                            );\n                            break;\n                        case PathIterator.SEG_QUADTO :\n                            gp.quadTo(args[0], args[1], args[2], args[3]);\n                            break;                  \n                        case PathIterator.SEG_CLOSE :\n                            //result = gp;\n                            break;\n                        default : \n                            throw new RuntimeException(\n                                \"JFreeChart - No path exists\"\n                            ); \n                    } \n                    gp.setWindingRule(stream.readInt());    \n                    hasNext = stream.readBoolean();\n                }\n                result = gp;\n            }\n            else {\n                result = (Shape) stream.readObject();\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 261,
        "end_line": 346,
        "comment": "\n     * Reads a <code>Shape</code> object that has been serialised by the \n     * {@link #writeShape(Shape, ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream (<code>null</code> not permitted).\n     *\n     * @return The shape object (possibly <code>null</code>).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "SerialUtilities.writeShape#356",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SerialUtilities.java",
        "class_name": "org.jfree.chart.util.SerialUtilities",
        "signature": "org.jfree.chart.util.SerialUtilities.writeShape(java.awt.Shape, java.io.ObjectOutputStream)",
        "snippet": "    public static void writeShape(Shape shape, ObjectOutputStream stream) \n            throws IOException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");   \n        }\n        if (shape != null) {\n            stream.writeBoolean(false);\n            if (shape instanceof Line2D) {\n                Line2D line = (Line2D) shape;\n                stream.writeObject(Line2D.class);\n                stream.writeDouble(line.getX1());\n                stream.writeDouble(line.getY1());\n                stream.writeDouble(line.getX2());\n                stream.writeDouble(line.getY2());\n            }\n            else if (shape instanceof Rectangle2D) {\n                Rectangle2D rectangle = (Rectangle2D) shape;\n                stream.writeObject(Rectangle2D.class);\n                stream.writeDouble(rectangle.getX());\n                stream.writeDouble(rectangle.getY());\n                stream.writeDouble(rectangle.getWidth());\n                stream.writeDouble(rectangle.getHeight());\n            }\n            else if (shape instanceof Ellipse2D) {\n                Ellipse2D ellipse = (Ellipse2D) shape;\n                stream.writeObject(Ellipse2D.class);\n                stream.writeDouble(ellipse.getX());\n                stream.writeDouble(ellipse.getY());\n                stream.writeDouble(ellipse.getWidth());\n                stream.writeDouble(ellipse.getHeight());\n            }\n            else if (shape instanceof Arc2D) {\n                Arc2D arc = (Arc2D) shape;\n                stream.writeObject(Arc2D.class);\n                stream.writeDouble(arc.getX());\n                stream.writeDouble(arc.getY());\n                stream.writeDouble(arc.getWidth());\n                stream.writeDouble(arc.getHeight());\n                stream.writeDouble(arc.getAngleStart());\n                stream.writeDouble(arc.getAngleExtent());\n                stream.writeInt(arc.getArcType());\n            }\n            else if (shape instanceof GeneralPath) {\n                stream.writeObject(GeneralPath.class);\n                PathIterator pi = shape.getPathIterator(null);\n                float[] args = new float[6];\n                stream.writeBoolean(pi.isDone());\n                while (!pi.isDone()) {\n                    int type = pi.currentSegment(args);\n                    stream.writeInt(type);\n                    // TODO: could write this to only stream the values\n                    // required for the segment type\n                    for (int i = 0; i < 6; i++) {\n                        stream.writeFloat(args[i]);\n                    }\n                    stream.writeInt(pi.getWindingRule());\n                    pi.next();\n                    stream.writeBoolean(pi.isDone());\n                }\n            }\n            else {\n                stream.writeObject(shape.getClass());\n                stream.writeObject(shape);\n            }\n        }\n        else {\n            stream.writeBoolean(true);\n        }\n    }\n",
        "begin_line": 356,
        "end_line": 425,
        "comment": "\n     * Serialises a <code>Shape</code> object.\n     *\n     * @param shape  the shape object (<code>null</code> permitted).\n     * @param stream  the output stream (<code>null</code> not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueMarker.ValueMarker#67",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.ValueMarker(double)",
        "snippet": "    public ValueMarker(double value) {\n        super();\n        this.value = value;\n    }\n",
        "begin_line": 67,
        "end_line": 70,
        "comment": "\r\n     * Creates a new marker.\r\n     * \r\n     * @param value  the value.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.writeObject#1266",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.noDataMessagePaint, stream);\n        SerialUtilities.writeStroke(this.outlineStroke, stream);\n        SerialUtilities.writePaint(this.outlinePaint, stream);\n        // backgroundImage\n        SerialUtilities.writePaint(this.backgroundPaint, stream);\n    }\n",
        "begin_line": 1266,
        "end_line": 1273,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "Plot.readObject#1283",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.noDataMessagePaint = SerialUtilities.readPaint(stream);\n        this.outlineStroke = SerialUtilities.readStroke(stream);\n        this.outlinePaint = SerialUtilities.readPaint(stream);\n        // backgroundImage\n        this.backgroundPaint = SerialUtilities.readPaint(stream);\n\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 1283,
        "end_line": 1294,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.Marker#144",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker()",
        "snippet": "    protected Marker() {\n        this(Color.gray);\n    }\n",
        "begin_line": 144,
        "end_line": 146,
        "comment": "\r\n     * Creates a new marker with default attributes.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "Marker.Marker#153",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.Marker(java.awt.Paint)",
        "snippet": "    protected Marker(Paint paint) {\n        this(paint, new BasicStroke(0.5f), Color.gray, new BasicStroke(0.5f), \n                0.80f);\n    }\n",
        "begin_line": 153,
        "end_line": 156,
        "comment": "\r\n     * Constructs a new marker.\r\n     *\r\n     * @param paint  the paint (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.writeObject#429",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n\n        int paintCount = this.paintSequence.length;\n        stream.writeInt(paintCount);\n        for (int i = 0; i < paintCount; i++) {\n            SerialUtilities.writePaint(this.paintSequence[i], stream);\n        }\n\n        int outlinePaintCount = this.outlinePaintSequence.length;\n        stream.writeInt(outlinePaintCount);\n        for (int i = 0; i < outlinePaintCount; i++) {\n            SerialUtilities.writePaint(this.outlinePaintSequence[i], stream);\n        }\n\n        int strokeCount = this.strokeSequence.length;\n        stream.writeInt(strokeCount);\n        for (int i = 0; i < strokeCount; i++) {\n            SerialUtilities.writeStroke(this.strokeSequence[i], stream);\n        }\n\n        int outlineStrokeCount = this.outlineStrokeSequence.length;\n        stream.writeInt(outlineStrokeCount);\n        for (int i = 0; i < outlineStrokeCount; i++) {\n            SerialUtilities.writeStroke(this.outlineStrokeSequence[i], stream);\n        }\n\n        int shapeCount = this.shapeSequence.length;\n        stream.writeInt(shapeCount);\n        for (int i = 0; i < shapeCount; i++) {\n            SerialUtilities.writeShape(this.shapeSequence[i], stream);\n        }\n\n    }\n",
        "begin_line": 429,
        "end_line": 462,
        "comment": "\r\n     * Handles serialization.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException if there is an I/O problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "DefaultDrawingSupplier.readObject#472",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n\n        int paintCount = stream.readInt();\n        this.paintSequence = new Paint[paintCount];\n        for (int i = 0; i < paintCount; i++) {\n            this.paintSequence[i] = SerialUtilities.readPaint(stream);\n        }\n\n        int outlinePaintCount = stream.readInt();\n        this.outlinePaintSequence = new Paint[outlinePaintCount];\n        for (int i = 0; i < outlinePaintCount; i++) {\n            this.outlinePaintSequence[i] = SerialUtilities.readPaint(stream);\n        }\n\n        int strokeCount = stream.readInt();\n        this.strokeSequence = new Stroke[strokeCount];\n        for (int i = 0; i < strokeCount; i++) {\n            this.strokeSequence[i] = SerialUtilities.readStroke(stream);\n        }\n\n        int outlineStrokeCount = stream.readInt();\n        this.outlineStrokeSequence = new Stroke[outlineStrokeCount];\n        for (int i = 0; i < outlineStrokeCount; i++) {\n            this.outlineStrokeSequence[i] = SerialUtilities.readStroke(stream);\n        }\n\n        int shapeCount = stream.readInt();\n        this.shapeSequence = new Shape[shapeCount];\n        for (int i = 0; i < shapeCount; i++) {\n            this.shapeSequence[i] = SerialUtilities.readShape(stream);\n        }\n\n    }\n",
        "begin_line": 472,
        "end_line": 506,
        "comment": "\r\n     * Restores a serialized object.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException if there is an I/O problem.\r\n     * @throws ClassNotFoundException if there is a problem loading a class.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 2
    },
    {
        "name": "StatisticalLineAndShapeRenderer.StatisticalLineAndShapeRenderer#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.StatisticalLineAndShapeRenderer(boolean, boolean)",
        "snippet": "    public StatisticalLineAndShapeRenderer(boolean linesVisible, \n                                           boolean shapesVisible) {\n        super(linesVisible, shapesVisible);\n        this.errorIndicatorPaint = null;\n    }\n",
        "begin_line": 108,
        "end_line": 112,
        "comment": "\r\n     * Constructs a new renderer.\r\n     * \r\n     * @param linesVisible  draw lines?\r\n     * @param shapesVisible  draw shapes?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "LevelRenderer.LevelRenderer#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LevelRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LevelRenderer",
        "signature": "org.jfree.chart.renderer.category.LevelRenderer.LevelRenderer()",
        "snippet": "    public LevelRenderer() {\n        super();\n        this.itemMargin = DEFAULT_ITEM_MARGIN;\n        this.maxItemWidth = 1.0;  // 100 percent, so it will not apply unless \n                                  // changed\n    }\n",
        "begin_line": 94,
        "end_line": 99,
        "comment": "\r\n     * Creates a new renderer with default settings.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setRenderer#1343",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer, boolean)",
        "snippet": "    public void setRenderer(int index, CategoryItemRenderer renderer, \n                            boolean notify) {\n        \n        // stop listening to the existing renderer...\n        CategoryItemRenderer existing \n            = (CategoryItemRenderer) this.renderers.get(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        \n        // register the new renderer...\n        this.renderers.set(index, renderer);\n        if (renderer != null) {\n            renderer.setPlot(this);\n            renderer.addChangeListener(this);\n        }\n        \n        configureDomainAxes();\n        configureRangeAxes();\n        \n        if (notify) {\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 1343,
        "end_line": 1366,
        "comment": "\r\n     * Sets a renderer.  A {@link PlotChangeEvent} is sent to all registered \r\n     * listeners.\r\n     *\r\n     * @param index  the index.\r\n     * @param renderer  the renderer (<code>null</code> permitted).\r\n     * @param notify  notify listeners?\r\n     * \r\n     * @see #getRenderer(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardCategoryToolTipGenerator.equals#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategoryToolTipGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategoryToolTipGenerator",
        "signature": "org.jfree.chart.labels.StandardCategoryToolTipGenerator.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof StandardCategoryToolTipGenerator)) {\n            return false;\n        }\n        return super.equals(obj);\n    }\n",
        "begin_line": 122,
        "end_line": 130,
        "comment": "\r\n     * Tests this generator for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.087
        },
        "num_failing_tests": 1
    },
    {
        "name": "RangeType.toString#85",
        "is_bug": false,
        "src_path": "source/org/jfree/data/RangeType.java",
        "class_name": "org.jfree.data.RangeType",
        "signature": "org.jfree.data.RangeType.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 85,
        "end_line": 87,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0853
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.writeObject#1627",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writeShape(this.upArrow, stream);\n        SerialUtilities.writeShape(this.downArrow, stream);\n        SerialUtilities.writeShape(this.leftArrow, stream);\n        SerialUtilities.writeShape(this.rightArrow, stream);\n    }\n",
        "begin_line": 1627,
        "end_line": 1633,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0836
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.readObject#1643",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n            throws IOException, ClassNotFoundException {\n\n        stream.defaultReadObject();\n        this.upArrow = SerialUtilities.readShape(stream);\n        this.downArrow = SerialUtilities.readShape(stream);\n        this.leftArrow = SerialUtilities.readShape(stream);\n        this.rightArrow = SerialUtilities.readShape(stream);\n\n    }\n",
        "begin_line": 1643,
        "end_line": 1652,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0836
        },
        "num_failing_tests": 2
    },
    {
        "name": "WaterfallBarRenderer.WaterfallBarRenderer#116",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.WaterfallBarRenderer()",
        "snippet": "    public WaterfallBarRenderer() {\n        this(new GradientPaint(0.0f, 0.0f, new Color(0x22, 0x22, 0xFF), \n                0.0f, 0.0f, new Color(0x66, 0x66, 0xFF)), \n                new GradientPaint(0.0f, 0.0f, new Color(0x22, 0xFF, 0x22), \n                0.0f, 0.0f, new Color(0x66, 0xFF, 0x66)), \n                new GradientPaint(0.0f, 0.0f, new Color(0xFF, 0x22, 0x22), \n                0.0f, 0.0f, new Color(0xFF, 0x66, 0x66)),\n                new GradientPaint(0.0f, 0.0f, new Color(0xFF, 0xFF, 0x22), \n                0.0f, 0.0f, new Color(0xFF, 0xFF, 0x66)));\n    }\n",
        "begin_line": 116,
        "end_line": 125,
        "comment": "\r\n     * Constructs a new renderer with default values for the bar colors.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 1
    },
    {
        "name": "WaterfallBarRenderer.WaterfallBarRenderer#139",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/WaterfallBarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.WaterfallBarRenderer",
        "signature": "org.jfree.chart.renderer.category.WaterfallBarRenderer.WaterfallBarRenderer(java.awt.Paint, java.awt.Paint, java.awt.Paint, java.awt.Paint)",
        "snippet": "    public WaterfallBarRenderer(Paint firstBarPaint, \n                                Paint positiveBarPaint, \n                                Paint negativeBarPaint,\n                                Paint lastBarPaint) {\n        super();\n        if (firstBarPaint == null) {\n            throw new IllegalArgumentException(\"Null 'firstBarPaint' argument\");\n        }\n        if (positiveBarPaint == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'positiveBarPaint' argument\");   \n        }\n        if (negativeBarPaint == null) {\n            throw new IllegalArgumentException(\n                    \"Null 'negativeBarPaint' argument\");   \n        }\n        if (lastBarPaint == null) {\n            throw new IllegalArgumentException(\"Null 'lastBarPaint' argument\");\n        }\n        this.firstBarPaint = firstBarPaint;\n        this.lastBarPaint = lastBarPaint;\n        this.positiveBarPaint = positiveBarPaint;\n        this.negativeBarPaint = negativeBarPaint;\n        setGradientPaintTransformer(new StandardGradientPaintTransformer(\n                GradientPaintTransformType.CENTER_VERTICAL));\n        setMinimumBarLength(1.0);\n    }\n",
        "begin_line": 139,
        "end_line": 165,
        "comment": "\r\n     * Constructs a new waterfall renderer.\r\n     *\r\n     * @param firstBarPaint  the color of the first bar (<code>null</code> not \r\n     *                       permitted).\r\n     * @param positiveBarPaint  the color for bars with positive values \r\n     *                          (<code>null</code> not permitted).\r\n     * @param negativeBarPaint  the color for bars with negative values \r\n     *                          (<code>null</code> not permitted).\r\n     * @param lastBarPaint  the color of the last bar (<code>null</code> not \r\n     *                      permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.setForegroundAlpha#845",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.setForegroundAlpha(float)",
        "snippet": "    public void setForegroundAlpha(float alpha) {\n        if (this.foregroundAlpha != alpha) {\n            this.foregroundAlpha = alpha;\n            notifyListeners(new PlotChangeEvent(this));\n        }\n    }\n",
        "begin_line": 845,
        "end_line": 850,
        "comment": "\r\n     * Sets the alpha-transparency for the plot and sends a \r\n     * {@link PlotChangeEvent} to all registered listeners.\r\n     *\r\n     * @param alpha  the new alpha transparency.\r\n     * \r\n     * @see #getForegroundAlpha()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryItemLabelGenerator.equals#277",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/AbstractCategoryItemLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator",
        "signature": "org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractCategoryItemLabelGenerator)) {\n            return false;\n        }\n        \n        AbstractCategoryItemLabelGenerator that \n            = (AbstractCategoryItemLabelGenerator) obj;\n        if (!this.labelFormat.equals(that.labelFormat)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.dateFormat, that.dateFormat)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.numberFormat, that.numberFormat)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 277,
        "end_line": 297,
        "comment": "\r\n     * Tests this object for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the other object (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0806
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.equals#3426",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n    \n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CategoryPlot)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n\n        CategoryPlot that = (CategoryPlot) obj;\n            \n        if (this.orientation != that.orientation) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {\n            return false;\n        }\n        if (!this.domainAxes.equals(that.domainAxes)) {\n            return false;\n        }\n        if (!this.domainAxisLocations.equals(that.domainAxisLocations)) {\n            return false;\n        }\n        if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) {\n            return false;\n        }\n        if (!this.rangeAxes.equals(that.rangeAxes)) {\n            return false;\n        }\n        if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, \n                that.datasetToDomainAxisMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, \n                that.datasetToRangeAxisMap)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.renderers, that.renderers)) {\n            return false;\n        }\n        if (this.renderingOrder != that.renderingOrder) {\n            return false;\n        }\n        if (this.columnRenderingOrder != that.columnRenderingOrder) {\n            return false;\n        }\n        if (this.rowRenderingOrder != that.rowRenderingOrder) {\n            return false;\n        }\n        if (this.domainGridlinesVisible != that.domainGridlinesVisible) {\n            return false;\n        }\n        if (this.domainGridlinePosition != that.domainGridlinePosition) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.domainGridlineStroke, \n                that.domainGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.domainGridlinePaint, \n                that.domainGridlinePaint)) {\n            return false;\n        }\n        if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeGridlineStroke, \n                that.rangeGridlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeGridlinePaint, \n                that.rangeGridlinePaint)) {\n            return false;\n        }\n        if (this.anchorValue != that.anchorValue) {\n            return false;\n        }\n        if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) {\n            return false;\n        }\n        if (this.rangeCrosshairValue != that.rangeCrosshairValue) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.rangeCrosshairStroke, \n                that.rangeCrosshairStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.rangeCrosshairPaint, \n                that.rangeCrosshairPaint)) {\n            return false;\n        }\n        if (this.rangeCrosshairLockedOnData \n                != that.rangeCrosshairLockedOnData) {\n            return false;\n        }      \n        if (!ObjectUtilities.equal(this.foregroundRangeMarkers, \n                that.foregroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundRangeMarkers, \n                that.backgroundRangeMarkers)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.annotations, that.annotations)) {\n            return false;\n        }\n        if (this.weight != that.weight) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.fixedDomainAxisSpace, \n                that.fixedDomainAxisSpace)) {\n            return false;\n        }    \n        if (!ObjectUtilities.equal(this.fixedRangeAxisSpace, \n                that.fixedRangeAxisSpace)) {\n            return false;\n        }    \n        \n        return true;\n        \n    }\n",
        "begin_line": 3426,
        "end_line": 3552,
        "comment": " \r\n     * Tests the plot for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object to test against (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0792
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.writeObject#1342",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.labelPaint, stream);\n        SerialUtilities.writePaint(this.tickLabelPaint, stream);\n        SerialUtilities.writeStroke(this.axisLineStroke, stream);\n        SerialUtilities.writePaint(this.axisLinePaint, stream);\n        SerialUtilities.writeStroke(this.tickMarkStroke, stream);\n        SerialUtilities.writePaint(this.tickMarkPaint, stream);\n    }\n",
        "begin_line": 1342,
        "end_line": 1350,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0792
        },
        "num_failing_tests": 2
    },
    {
        "name": "Axis.readObject#1360",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n        stream.defaultReadObject();\n        this.labelPaint = SerialUtilities.readPaint(stream);\n        this.tickLabelPaint = SerialUtilities.readPaint(stream);\n        this.axisLineStroke = SerialUtilities.readStroke(stream);\n        this.axisLinePaint = SerialUtilities.readPaint(stream);\n        this.tickMarkStroke = SerialUtilities.readStroke(stream);\n        this.tickMarkPaint = SerialUtilities.readPaint(stream);\n        this.listenerList = new EventListenerList();\n    }\n",
        "begin_line": 1360,
        "end_line": 1370,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0792
        },
        "num_failing_tests": 2
    },
    {
        "name": "JFreeChart.getPlot#800",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.getPlot()",
        "snippet": "    public Plot getPlot() {\n        return this.plot;\n    }\n",
        "begin_line": 800,
        "end_line": 802,
        "comment": "\r\n     * Returns the plot for the chart.  The plot is a class responsible for\r\n     * coordinating the visual representation of the data, including the axes\r\n     * (if any).\r\n     *\r\n     * @return The plot.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0759
        },
        "num_failing_tests": 3
    },
    {
        "name": "StackedBarRenderer3D.StackedBarRenderer3D#137",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.StackedBarRenderer3D()",
        "snippet": "    public StackedBarRenderer3D() {\n        this(false);\n    }\n",
        "begin_line": 137,
        "end_line": 139,
        "comment": "\r\n     * Creates a new renderer with no tool tip generator and no URL generator.\r\n     * <P>\r\n     * The defaults (no tool tip or URL generators) have been chosen to \r\n     * minimise the processing required to generate a default chart.  If you \r\n     * require tool tips or URLs, then you can easily add the required \r\n     * generators.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "StackedBarRenderer3D.StackedBarRenderer3D#159",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedBarRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.StackedBarRenderer3D",
        "signature": "org.jfree.chart.renderer.category.StackedBarRenderer3D.StackedBarRenderer3D(boolean)",
        "snippet": "    public StackedBarRenderer3D(boolean renderAsPercentages) {\n        super();\n        this.renderAsPercentages = renderAsPercentages;\n    }\n",
        "begin_line": 159,
        "end_line": 162,
        "comment": "\r\n     * Creates a new renderer.\r\n     * \r\n     * @param renderAsPercentages  a flag that controls whether the data values\r\n     *                             are rendered as percentages.\r\n     * \r\n     * @since 1.0.2\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "StackedAreaRenderer.StackedAreaRenderer#104",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StackedAreaRenderer",
        "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.StackedAreaRenderer()",
        "snippet": "    public StackedAreaRenderer() {\n        this(false);\n    }\n",
        "begin_line": 104,
        "end_line": 106,
        "comment": "\r\n     * Creates a new renderer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "StackedAreaRenderer.StackedAreaRenderer#114",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/StackedAreaRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.StackedAreaRenderer",
        "signature": "org.jfree.chart.renderer.category.StackedAreaRenderer.StackedAreaRenderer(boolean)",
        "snippet": "    public StackedAreaRenderer(boolean renderAsPercentages) {\n        super();\n        this.renderAsPercentages = renderAsPercentages;\n    }\n",
        "begin_line": 114,
        "end_line": 117,
        "comment": "\r\n     * Creates a new renderer.\r\n     * \r\n     * @param renderAsPercentages  a flag that controls whether the data values\r\n     *                             are rendered as percentages.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineRenderer3D.LineRenderer3D#118",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineRenderer3D.java",
        "class_name": "org.jfree.chart.renderer.category.LineRenderer3D",
        "signature": "org.jfree.chart.renderer.category.LineRenderer3D.LineRenderer3D()",
        "snippet": "    public LineRenderer3D() {\n        super(true, false);  //Create a line renderer only\n        this.xOffset = DEFAULT_X_OFFSET;\n        this.yOffset = DEFAULT_Y_OFFSET;\n        this.wallPaint = DEFAULT_WALL_PAINT;\n    }\n",
        "begin_line": 118,
        "end_line": 123,
        "comment": "\r\n     * Creates a new renderer.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "BarRenderer.setMinimumBarLength#330",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength(double)",
        "snippet": "    public void setMinimumBarLength(double min) {\n        this.minimumBarLength = min;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n",
        "begin_line": 330,
        "end_line": 333,
        "comment": "\r\n     * Sets the minimum bar length and sends a {@link RendererChangeEvent} to \r\n     * all registered listeners.  The minimum bar length is specified in Java2D\r\n     * units, and can be used to prevent bars that represent very small data \r\n     * values from disappearing when drawn on the screen.\r\n     * \r\n     * @param min  the minimum bar length (in Java2D units).\r\n     * \r\n     * @see #getMinimumBarLength()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "BarRenderer.setGradientPaintTransformer#355",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer(org.jfree.chart.util.GradientPaintTransformer)",
        "snippet": "    public void setGradientPaintTransformer(\n            GradientPaintTransformer transformer) {\n        this.gradientPaintTransformer = transformer;\n        notifyListeners(new RendererChangeEvent(this));\n    }\n",
        "begin_line": 355,
        "end_line": 359,
        "comment": "\r\n     * Sets the gradient paint transformer and sends a \r\n     * {@link RendererChangeEvent} to all registered listeners.\r\n     * \r\n     * @param transformer  the transformer (<code>null</code> permitted).\r\n     * \r\n     * @see #getGradientPaintTransformer()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0754
        },
        "num_failing_tests": 1
    },
    {
        "name": "DateRange.DateRange#71",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "class_name": "org.jfree.data.time.DateRange",
        "signature": "org.jfree.data.time.DateRange.DateRange()",
        "snippet": "    public DateRange() {\n        this(new Date(0), new Date(1));\n    }\n",
        "begin_line": 71,
        "end_line": 73,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateRange.DateRange#81",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/DateRange.java",
        "class_name": "org.jfree.data.time.DateRange",
        "signature": "org.jfree.data.time.DateRange.DateRange(java.util.Date, java.util.Date)",
        "snippet": "    public DateRange(Date lower, Date upper) {\n\n        super(lower.getTime(), upper.getTime());\n        this.lowerDate = lower;\n        this.upperDate = upper;\n\n    }\n",
        "begin_line": 81,
        "end_line": 87,
        "comment": "\r\n     * Constructs a new range.\r\n     *\r\n     * @param lower  the lower bound (<code>null</code> not permitted).\r\n     * @param upper  the upper bound (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.DateTickUnit#131",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.DateTickUnit(int, int, java.text.DateFormat)",
        "snippet": "    public DateTickUnit(int unit, int count, DateFormat formatter) {\n\n        this(unit, count, unit, count, formatter);\n\n    }\n",
        "begin_line": 131,
        "end_line": 135,
        "comment": "\r\n     * Creates a new date tick unit.  You can specify the units using one of \r\n     * the constants YEAR, MONTH, DAY, HOUR, MINUTE, SECOND or MILLISECOND.  \r\n     * In addition, you can specify a unit count, and a date format.\r\n     *\r\n     * @param unit  the unit.\r\n     * @param count  the unit count.\r\n     * @param formatter  the date formatter (defaults to DateFormat.SHORT).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.DateTickUnit#146",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.DateTickUnit(int, int, int, int, java.text.DateFormat)",
        "snippet": "    public DateTickUnit(int unit, int count, int rollUnit, int rollCount, \n                        DateFormat formatter) {\n        super(DateTickUnit.getMillisecondCount(unit, count));\n        this.unit = unit;\n        this.count = count;\n        this.rollUnit = rollUnit;\n        this.rollCount = rollCount;\n        this.formatter = formatter;\n        if (formatter == null) {\n            this.formatter = DateFormat.getDateInstance(DateFormat.SHORT);\n        }\n    }\n",
        "begin_line": 146,
        "end_line": 157,
        "comment": "\r\n     * Creates a new unit.\r\n     *\r\n     * @param unit  the unit.\r\n     * @param count  the count.\r\n     * @param rollUnit  the roll unit.\r\n     * @param rollCount  the roll count.\r\n     * @param formatter  the date formatter (defaults to DateFormat.SHORT).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickUnit.getMillisecondCount#350",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickUnit.java",
        "class_name": "org.jfree.chart.axis.DateTickUnit",
        "signature": "org.jfree.chart.axis.DateTickUnit.getMillisecondCount(int, int)",
        "snippet": "    private static long getMillisecondCount(int unit, int count) {\n\n        switch (unit) {\n            case (YEAR):\n                return (365L * 24L * 60L * 60L * 1000L) * count;\n            case (MONTH):\n                return (31L * 24L * 60L * 60L * 1000L) * count;\n            case (DAY):\n                return (24L * 60L * 60L * 1000L) * count;\n            case (HOUR):\n                return (60L * 60L * 1000L) * count;\n            case (MINUTE):\n                return (60L * 1000L) * count;\n            case (SECOND):\n                return 1000L * count;\n            case (MILLISECOND):\n                return count;\n            default:\n                throw new IllegalArgumentException(\n                    \"DateTickUnit.getMillisecondCount() : unit must \"\n                    + \"be one of the constants YEAR, MONTH, DAY, HOUR, MINUTE, \"\n                    + \"SECOND or MILLISECOND defined in the DateTickUnit \"\n                    + \"class. Do *not* use the constants defined in \"\n                    + \"java.util.Calendar.\"\n                );\n        }\n\n    }\n",
        "begin_line": 350,
        "end_line": 377,
        "comment": "\r\n     * Returns the (approximate) number of milliseconds for the given unit and \r\n     * unit count.\r\n     * <P>\r\n     * This value is an approximation some of the time (e.g. months are \r\n     * assumed to have 31 days) but this shouldn't matter.\r\n     *\r\n     * @param unit  the unit.\r\n     * @param count  the unit count.\r\n     *\r\n     * @return The number of milliseconds.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateTickMarkPosition.DateTickMarkPosition#77",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateTickMarkPosition.java",
        "class_name": "org.jfree.chart.axis.DateTickMarkPosition",
        "signature": "org.jfree.chart.axis.DateTickMarkPosition.DateTickMarkPosition(java.lang.String)",
        "snippet": "    private DateTickMarkPosition(String name) {\n        this.name = name;\n    }\n",
        "begin_line": 77,
        "end_line": 79,
        "comment": "\r\n     * Private constructor.\r\n     *\r\n     * @param name  the name.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.DateAxis#330",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String)",
        "snippet": "    public DateAxis(String label) {\n        this(label, TimeZone.getDefault());\n    }\n",
        "begin_line": 330,
        "end_line": 332,
        "comment": "\r\n     * Creates a date axis with the specified label.\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.DateAxis#344",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.DateAxis(java.lang.String, java.util.TimeZone)",
        "snippet": "    public DateAxis(String label, TimeZone zone) {\n        super(label, DateAxis.createStandardDateTickUnits(zone));\n        setTickUnit(DateAxis.DEFAULT_DATE_TICK_UNIT, false, false);\n        setAutoRangeMinimumSize(\n                DEFAULT_AUTO_RANGE_MINIMUM_SIZE_IN_MILLISECONDS);\n        setRange(DEFAULT_DATE_RANGE, false, false);\n        this.dateFormatOverride = null;\n        this.timeZone = zone;\n        this.timeline = DEFAULT_TIMELINE;\n    }\n",
        "begin_line": 344,
        "end_line": 353,
        "comment": "\r\n     * Creates a date axis. A timeline is specified for the axis. This allows \r\n     * special transformations to occur between a domain of values and the \r\n     * values included in the axis.\r\n     *\r\n     * @see org.jfree.chart.axis.SegmentedTimeline\r\n     *\r\n     * @param label  the axis label (<code>null</code> permitted).\r\n     * @param zone  the time zone.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.setTickUnit#448",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit, boolean, boolean)",
        "snippet": "    public void setTickUnit(DateTickUnit unit, boolean notify, \n                            boolean turnOffAutoSelection) {\n\n        this.tickUnit = unit;\n        if (turnOffAutoSelection) {\n            setAutoTickUnitSelection(false, false);\n        }\n        if (notify) {\n            notifyListeners(new AxisChangeEvent(this));\n        }\n\n    }\n",
        "begin_line": 448,
        "end_line": 459,
        "comment": "\r\n     * Sets the tick unit attribute.\r\n     *\r\n     * @param unit  the new tick unit.\r\n     * @param notify  notify registered listeners?\r\n     * @param turnOffAutoSelection  turn off auto selection?\r\n     * \r\n     * @see #getTickUnit()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.setRange#504",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.setRange(org.jfree.data.Range, boolean, boolean)",
        "snippet": "    public void setRange(Range range, boolean turnOffAutoRange, \n                         boolean notify) {\n        if (range == null) {\n            throw new IllegalArgumentException(\"Null 'range' argument.\");\n        }\n        // usually the range will be a DateRange, but if it isn't do a \n        // conversion...\n        if (!(range instanceof DateRange)) {\n            range = new DateRange(range);\n        }\n        super.setRange(range, turnOffAutoRange, notify);\n    }\n",
        "begin_line": 504,
        "end_line": 515,
        "comment": "\r\n     * Sets the range for the axis, if requested, sends an \r\n     * {@link AxisChangeEvent} to all registered listeners.  As a side-effect, \r\n     * the auto-range flag is set to <code>false</code> (optional).\r\n     *\r\n     * @param range  the range (<code>null</code> not permitted).\r\n     * @param turnOffAutoRange  a flag that controls whether or not the auto \r\n     *                          range is turned off.\r\n     * @param notify  a flag that controls whether or not listeners are \r\n     *                notified.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "DateAxis.createStandardDateTickUnits#1076",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/DateAxis.java",
        "class_name": "org.jfree.chart.axis.DateAxis",
        "signature": "org.jfree.chart.axis.DateAxis.createStandardDateTickUnits(java.util.TimeZone)",
        "snippet": "    public static TickUnitSource createStandardDateTickUnits(TimeZone zone) {\n\n        if (zone == null) {\n            throw new IllegalArgumentException(\"Null 'zone' argument.\");\n        }\n        TickUnits units = new TickUnits();\n\n        // date formatters\n        DateFormat f1 = new SimpleDateFormat(\"HH:mm:ss.SSS\");\n        DateFormat f2 = new SimpleDateFormat(\"HH:mm:ss\");\n        DateFormat f3 = new SimpleDateFormat(\"HH:mm\");\n        DateFormat f4 = new SimpleDateFormat(\"d-MMM, HH:mm\");\n        DateFormat f5 = new SimpleDateFormat(\"d-MMM\");\n        DateFormat f6 = new SimpleDateFormat(\"MMM-yyyy\");\n        DateFormat f7 = new SimpleDateFormat(\"yyyy\");\n        \n        f1.setTimeZone(zone);\n        f2.setTimeZone(zone);\n        f3.setTimeZone(zone);\n        f4.setTimeZone(zone);\n        f5.setTimeZone(zone);\n        f6.setTimeZone(zone);\n        f7.setTimeZone(zone);\n        \n        // milliseconds\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 1, f1));\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 5, \n                DateTickUnit.MILLISECOND, 1, f1));\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 10, \n                DateTickUnit.MILLISECOND, 1, f1));\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 25, \n                DateTickUnit.MILLISECOND, 5, f1));\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 50, \n                DateTickUnit.MILLISECOND, 10, f1));\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 100, \n                DateTickUnit.MILLISECOND, 10, f1));\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 250, \n                DateTickUnit.MILLISECOND, 10, f1));\n        units.add(new DateTickUnit(DateTickUnit.MILLISECOND, 500, \n                DateTickUnit.MILLISECOND, 50, f1));\n\n        // seconds\n        units.add(new DateTickUnit(DateTickUnit.SECOND, 1, \n                DateTickUnit.MILLISECOND, 50, f2));\n        units.add(new DateTickUnit(DateTickUnit.SECOND, 5, \n                DateTickUnit.SECOND, 1, f2));\n        units.add(new DateTickUnit(DateTickUnit.SECOND, 10, \n                DateTickUnit.SECOND, 1, f2));\n        units.add(new DateTickUnit(DateTickUnit.SECOND, 30, \n                DateTickUnit.SECOND, 5, f2));\n\n        // minutes\n        units.add(new DateTickUnit(DateTickUnit.MINUTE, 1, \n                DateTickUnit.SECOND, 5, f3));\n        units.add(new DateTickUnit(DateTickUnit.MINUTE, 2, \n                DateTickUnit.SECOND, 10, f3));\n        units.add(new DateTickUnit(DateTickUnit.MINUTE, 5, \n                DateTickUnit.MINUTE, 1, f3));\n        units.add(new DateTickUnit(DateTickUnit.MINUTE, 10, \n                DateTickUnit.MINUTE, 1, f3));\n        units.add(new DateTickUnit(DateTickUnit.MINUTE, 15, \n                DateTickUnit.MINUTE, 5, f3));\n        units.add(new DateTickUnit(DateTickUnit.MINUTE, 20, \n                DateTickUnit.MINUTE, 5, f3));\n        units.add(new DateTickUnit(DateTickUnit.MINUTE, 30, \n                DateTickUnit.MINUTE, 5, f3));\n\n        // hours\n        units.add(new DateTickUnit(DateTickUnit.HOUR, 1, \n                DateTickUnit.MINUTE, 5, f3));\n        units.add(new DateTickUnit(DateTickUnit.HOUR, 2, \n                DateTickUnit.MINUTE, 10, f3));\n        units.add(new DateTickUnit(DateTickUnit.HOUR, 4, \n                DateTickUnit.MINUTE, 30, f3));\n        units.add(new DateTickUnit(DateTickUnit.HOUR, 6, \n                DateTickUnit.HOUR, 1, f3));\n        units.add(new DateTickUnit(DateTickUnit.HOUR, 12, \n                DateTickUnit.HOUR, 1, f4));\n\n        // days\n        units.add(new DateTickUnit(DateTickUnit.DAY, 1, \n                DateTickUnit.HOUR, 1, f5));\n        units.add(new DateTickUnit(DateTickUnit.DAY, 2, \n                DateTickUnit.HOUR, 1, f5));\n        units.add(new DateTickUnit(DateTickUnit.DAY, 7, \n                DateTickUnit.DAY, 1, f5));\n        units.add(new DateTickUnit(DateTickUnit.DAY, 15, \n                DateTickUnit.DAY, 1, f5));\n\n        // months\n        units.add(new DateTickUnit(DateTickUnit.MONTH, 1, \n                DateTickUnit.DAY, 1, f6));\n        units.add(new DateTickUnit(DateTickUnit.MONTH, 2, \n                DateTickUnit.DAY, 1, f6));\n        units.add(new DateTickUnit(DateTickUnit.MONTH, 3, \n                DateTickUnit.MONTH, 1, f6));\n        units.add(new DateTickUnit(DateTickUnit.MONTH, 4,  \n                DateTickUnit.MONTH, 1, f6));\n        units.add(new DateTickUnit(DateTickUnit.MONTH, 6,  \n                DateTickUnit.MONTH, 1, f6));\n\n        // years\n        units.add(new DateTickUnit(DateTickUnit.YEAR, 1,  \n                DateTickUnit.MONTH, 1, f7));\n        units.add(new DateTickUnit(DateTickUnit.YEAR, 2,  \n                DateTickUnit.MONTH, 3, f7));\n        units.add(new DateTickUnit(DateTickUnit.YEAR, 5,  \n                DateTickUnit.YEAR, 1, f7));\n        units.add(new DateTickUnit(DateTickUnit.YEAR, 10,  \n                DateTickUnit.YEAR, 1, f7));\n        units.add(new DateTickUnit(DateTickUnit.YEAR, 25, \n                DateTickUnit.YEAR, 5, f7));\n        units.add(new DateTickUnit(DateTickUnit.YEAR, 50, \n                DateTickUnit.YEAR, 10, f7));\n        units.add(new DateTickUnit(DateTickUnit.YEAR, 100, \n                DateTickUnit.YEAR, 20, f7));\n\n        return units;\n\n    }\n",
        "begin_line": 1076,
        "end_line": 1195,
        "comment": "\r\n     * Returns a collection of standard date tick units.  This collection will \r\n     * be used by default, but you are free to create your own collection if \r\n     * you want to (see the \r\n     * {@link ValueAxis#setStandardTickUnits(TickUnitSource)} method inherited \r\n     * from the {@link ValueAxis} class).\r\n     *\r\n     * @param zone  the time zone (<code>null</code> not permitted).\r\n     * \r\n     * @return A collection of standard date tick units.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0742
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.setAutoRangeMinimumSize#985",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize(double)",
        "snippet": "    public void setAutoRangeMinimumSize(double size) {\n        setAutoRangeMinimumSize(size, true);\n    }\n",
        "begin_line": 985,
        "end_line": 987,
        "comment": "\r\n     * Sets the auto range minimum size and sends an {@link AxisChangeEvent} \r\n     * to all registered listeners.\r\n     *\r\n     * @param size  the size.\r\n     * \r\n     * @see #getAutoRangeMinimumSize()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0731
        },
        "num_failing_tests": 2
    },
    {
        "name": "ValueAxis.setAutoRangeMinimumSize#999",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.setAutoRangeMinimumSize(double, boolean)",
        "snippet": "    public void setAutoRangeMinimumSize(double size, boolean notify) {\n        if (size <= 0.0) {\n            throw new IllegalArgumentException(\n                \"NumberAxis.setAutoRangeMinimumSize(double): must be > 0.0.\");\n        }\n        if (this.autoRangeMinimumSize != size) {\n            this.autoRangeMinimumSize = size;\n            if (this.autoRange) {\n                autoAdjustRange();\n            }\n            if (notify) {\n                notifyListeners(new AxisChangeEvent(this));\n            }\n        }\n\n    }\n",
        "begin_line": 999,
        "end_line": 1014,
        "comment": "\r\n     * Sets the minimum size allowed for the axis range when it is \r\n     * automatically calculated.\r\n     * <p>\r\n     * If requested, an {@link AxisChangeEvent} is forwarded to all registered \r\n     * listeners.\r\n     *\r\n     * @param size  the new minimum.\r\n     * @param notify  notify listeners?\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0731
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnitType.readResolve#122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        if (this.equals(UnitType.ABSOLUTE)) {\n            return UnitType.ABSOLUTE;\n        }\n        else if (this.equals(UnitType.RELATIVE)) {\n            return UnitType.RELATIVE;\n        }\n        return null;\n    }\n",
        "begin_line": 122,
        "end_line": 130,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0721
        },
        "num_failing_tests": 2
    },
    {
        "name": "UnitType.equals#92",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/UnitType.java",
        "class_name": "org.jfree.chart.util.UnitType",
        "signature": "org.jfree.chart.util.UnitType.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof UnitType)) {\n            return false;\n        }\n        UnitType that = (UnitType) obj;\n        if (!this.name.equals(that.name)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 92,
        "end_line": 104,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 2
    },
    {
        "name": "BoxAndWhiskerRenderer.BoxAndWhiskerRenderer#135",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BoxAndWhiskerRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer",
        "signature": "org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.BoxAndWhiskerRenderer()",
        "snippet": "    public BoxAndWhiskerRenderer() {\n        this.artifactPaint = Color.black;\n        this.fillBox = true;\n        this.itemMargin = 0.20;\n    }\n",
        "begin_line": 135,
        "end_line": 139,
        "comment": "\r\n     * Default constructor.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "Marker.removeChangeListener#543",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.removeChangeListener(org.jfree.chart.event.MarkerChangeListener)",
        "snippet": "    public void removeChangeListener(MarkerChangeListener listener) {\n        this.listenerList.remove(MarkerChangeListener.class, listener);\n    }\n",
        "begin_line": 543,
        "end_line": 545,
        "comment": "\r\n     * Unregisters an object for notification of changes to the marker.\r\n     *\r\n     * @param listener  the object to be unregistered.\r\n     * \r\n     * @since 1.0.3\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineBorder.equals#188",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/LineBorder.java",
        "class_name": "org.jfree.chart.block.LineBorder",
        "signature": "org.jfree.chart.block.LineBorder.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof LineBorder)) {\n            return false;   \n        }\n        LineBorder that = (LineBorder) obj;\n        if (!PaintUtilities.equal(this.paint, that.paint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.stroke, that.stroke)){\n            return false;\n        }\n        if (!this.insets.equals(that.insets)) {\n            return false;\n        }\n        return true;\n    }    \n",
        "begin_line": 188,
        "end_line": 206,
        "comment": "\r\n     * Tests this border for equality with an arbitrary instance.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryLabelPositions.equals#421",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPositions.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPositions",
        "signature": "org.jfree.chart.axis.CategoryLabelPositions.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof CategoryLabelPositions)) {\n            return false;\n        }\n\n        CategoryLabelPositions that = (CategoryLabelPositions) obj;\n        if (!this.positionForAxisAtTop.equals(that.positionForAxisAtTop)) {\n            return false;\n        }\n        if (!this.positionForAxisAtBottom.equals(\n                that.positionForAxisAtBottom)) {\n            return false;\n        }\n        if (!this.positionForAxisAtLeft.equals(that.positionForAxisAtLeft)) {\n            return false;\n        }\n        if (!this.positionForAxisAtRight.equals(that.positionForAxisAtRight)) {\n            return false;\n        }\n  \n        return true;\n\n    }\n",
        "begin_line": 421,
        "end_line": 447,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param obj  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryLabelPosition.equals#238",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryLabelPosition.java",
        "class_name": "org.jfree.chart.axis.CategoryLabelPosition",
        "signature": "org.jfree.chart.axis.CategoryLabelPosition.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CategoryLabelPosition)) {\n            return false;\n        }\n        CategoryLabelPosition that = (CategoryLabelPosition) obj;\n        if (!this.categoryAnchor.equals(that.categoryAnchor)) {\n            return false;\n        }\n        if (!this.labelAnchor.equals(that.labelAnchor)) {\n            return false;\n        }\n        if (!this.rotationAnchor.equals(that.rotationAnchor)) {\n            return false;\n        }\n        if (this.angle != that.angle) {\n            return false;\n        }\n        if (this.widthType != that.widthType) {\n            return false;\n        }\n        if (this.widthRatio != that.widthRatio) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 238,
        "end_line": 265,
        "comment": "\r\n     * Tests this instance for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0711
        },
        "num_failing_tests": 1
    },
    {
        "name": "BlockBorder.equals#203",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/BlockBorder.java",
        "class_name": "org.jfree.chart.block.BlockBorder",
        "signature": "org.jfree.chart.block.BlockBorder.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof BlockBorder)) {\n            return false;   \n        }\n        BlockBorder that = (BlockBorder) obj;\n        if (!this.insets.equals(that.insets)) {\n            return false;   \n        }\n        if (!PaintUtilities.equal(this.paint, that.paint)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 203,
        "end_line": 218,
        "comment": "\r\n     * Tests this border for equality with an arbitrary instance.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0674
        },
        "num_failing_tests": 1
    },
    {
        "name": "JFreeChart.equals#1571",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/JFreeChart.java",
        "class_name": "org.jfree.chart.JFreeChart",
        "signature": "org.jfree.chart.JFreeChart.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof JFreeChart)) {\n            return false;\n        }\n        JFreeChart that = (JFreeChart) obj;\n        if (!this.renderingHints.equals(that.renderingHints)) {\n            return false;   \n        }\n        if (this.borderVisible != that.borderVisible) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.borderStroke, that.borderStroke)) {\n            return false;   \n        }\n        if (!PaintUtilities.equal(this.borderPaint, that.borderPaint)) {\n            return false;   \n        }\n        if (!this.padding.equals(that.padding)) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.title, that.title)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.subtitles, that.subtitles)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.plot, that.plot)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(\n            this.backgroundPaint, that.backgroundPaint\n        )) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundImage, \n                that.backgroundImage)) {\n            return false;\n        }\n        if (this.backgroundImageAlignment != that.backgroundImageAlignment) {\n            return false;\n        }\n        if (this.backgroundImageAlpha != that.backgroundImageAlpha) {\n            return false;\n        }\n        if (this.notify != that.notify) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 1571,
        "end_line": 1622,
        "comment": "\r\n     * Tests this chart for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0674
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextTitle.equals#696",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/TextTitle.java",
        "class_name": "org.jfree.chart.title.TextTitle",
        "signature": "org.jfree.chart.title.TextTitle.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof TextTitle)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        TextTitle that = (TextTitle) obj;\n        if (!ObjectUtilities.equal(this.text, that.text)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.font, that.font)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.paint, that.paint)) {\n            return false;\n        }\n        if (this.textAlignment != that.textAlignment) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 696,
        "end_line": 723,
        "comment": "\r\n     * Tests this title for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0643
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueMarker.equals#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/ValueMarker.java",
        "class_name": "org.jfree.chart.plot.ValueMarker",
        "signature": "org.jfree.chart.plot.ValueMarker.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        if (!(obj instanceof ValueMarker)) {\n            return false;\n        }\n        ValueMarker that = (ValueMarker) obj;\n        if (this.value != that.value) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 136,
        "end_line": 151,
        "comment": "\r\n     * Tests this marker for equality with an arbitrary object.  This method\r\n     * returns <code>true</code> if:\r\n     * \r\n     * <ul>\r\n     * <li><code>obj</code> is not <code>null</code>;</li>\r\n     * <li><code>obj</code> is an instance of <code>ValueMarker</code>;</li>\r\n     * <li><code>obj</code> has the same value as this marker;</li>\r\n     * <li><code>super.equals(obj)</code> returns <code>true</code>.</li>\r\n     * </ul>\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 1
    },
    {
        "name": "Marker.equals#585",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Marker.java",
        "class_name": "org.jfree.chart.plot.Marker",
        "signature": "org.jfree.chart.plot.Marker.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Marker)) {\n            return false;\n        }\n        Marker that = (Marker) obj;\n        if (!PaintUtilities.equal(this.paint, that.paint)) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.stroke, that.stroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (this.alpha != that.alpha) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (this.labelAnchor != that.labelAnchor) {\n            return false;\n        }\n        if (this.labelTextAnchor != that.labelTextAnchor) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.labelOffset, that.labelOffset)) {\n            return false;\n        }\n        if (!this.labelOffsetType.equals(that.labelOffsetType)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 585,
        "end_line": 630,
        "comment": "\r\n     * Tests the marker for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 1
    },
    {
        "name": "FlowArrangement.equals#427",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/FlowArrangement.java",
        "class_name": "org.jfree.chart.block.FlowArrangement",
        "signature": "org.jfree.chart.block.FlowArrangement.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof FlowArrangement)) {\n            return false;   \n        }\n        FlowArrangement that = (FlowArrangement) obj;\n        if (this.horizontalAlignment != that.horizontalAlignment) {\n            return false;\n        }\n        if (this.verticalAlignment != that.verticalAlignment) {\n            return false;\n        }\n        if (this.horizontalGap != that.horizontalGap) {\n            return false;   \n        }\n        if (this.verticalGap != that.verticalGap) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 427,
        "end_line": 448,
        "comment": "\r\n     * Tests this instance for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 1
    },
    {
        "name": "ColumnArrangement.equals#357",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/ColumnArrangement.java",
        "class_name": "org.jfree.chart.block.ColumnArrangement",
        "signature": "org.jfree.chart.block.ColumnArrangement.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof ColumnArrangement)) {\n            return false;   \n        }\n        ColumnArrangement that = (ColumnArrangement) obj;\n        if (this.horizontalAlignment != that.horizontalAlignment) {\n            return false;\n        }\n        if (this.verticalAlignment != that.verticalAlignment) {\n            return false;\n        }\n        if (this.horizontalGap != that.horizontalGap) {\n            return false;   \n        }\n        if (this.verticalGap != that.verticalGap) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 357,
        "end_line": 378,
        "comment": "\r\n     * Tests this instance for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0615
        },
        "num_failing_tests": 1
    },
    {
        "name": "LegendTitle.equals#542",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/LegendTitle.java",
        "class_name": "org.jfree.chart.title.LegendTitle",
        "signature": "org.jfree.chart.title.LegendTitle.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof LegendTitle)) {\n            return false;   \n        }\n        if (!super.equals(obj)) {\n            return false;   \n        }\n        LegendTitle that = (LegendTitle) obj;\n        if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {\n            return false;   \n        }\n        if (this.legendItemGraphicEdge != that.legendItemGraphicEdge) {\n            return false;   \n        }\n        if (this.legendItemGraphicAnchor != that.legendItemGraphicAnchor) {\n            return false;   \n        }\n        if (this.legendItemGraphicLocation != that.legendItemGraphicLocation) {\n            return false;   \n        }\n        if (!this.itemFont.equals(that.itemFont)) {\n            return false;   \n        }\n        if (!this.itemPaint.equals(that.itemPaint)) {\n            return false;   \n        }\n        if (!this.hLayout.equals(that.hLayout)) {\n            return false;   \n        }\n        if (!this.vLayout.equals(that.vLayout)) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 542,
        "end_line": 578,
        "comment": "\r\n     * Tests this title for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0591
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setDataset#1151",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDataset(org.jfree.data.category.CategoryDataset)",
        "snippet": "    public void setDataset(CategoryDataset dataset) {\n        setDataset(0, dataset);\n    }\n",
        "begin_line": 1151,
        "end_line": 1153,
        "comment": "\r\n     * Sets the dataset for the plot, replacing the existing dataset, if there \r\n     * is one.  This method also calls the \r\n     * {@link #datasetChanged(DatasetChangeEvent)} method, which adjusts the \r\n     * axis ranges if necessary and sends a {@link PlotChangeEvent} to all \r\n     * registered listeners.\r\n     *\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @see #getDataset()\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0591
        },
        "num_failing_tests": 1
    },
    {
        "name": "TextAnchor.readResolve#180",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        TextAnchor result = null;\n        if (this.equals(TextAnchor.TOP_LEFT)) {\n            result = TextAnchor.TOP_LEFT;\n        }\n        else if (this.equals(TextAnchor.TOP_CENTER)) {\n            result = TextAnchor.TOP_CENTER;\n        }\n        else if (this.equals(TextAnchor.TOP_RIGHT)) {\n            result = TextAnchor.TOP_RIGHT;\n        }\n        else if (this.equals(TextAnchor.BOTTOM_LEFT)) {\n            result = TextAnchor.BOTTOM_LEFT;\n        }\n        else if (this.equals(TextAnchor.BOTTOM_CENTER)) {\n            result = TextAnchor.BOTTOM_CENTER;\n        }\n        else if (this.equals(TextAnchor.BOTTOM_RIGHT)) {\n            result = TextAnchor.BOTTOM_RIGHT;\n        }\n        else if (this.equals(TextAnchor.BASELINE_LEFT)) {\n            result = TextAnchor.BASELINE_LEFT;\n        }\n        else if (this.equals(TextAnchor.BASELINE_CENTER)) {\n            result = TextAnchor.BASELINE_CENTER;\n        }\n        else if (this.equals(TextAnchor.BASELINE_RIGHT)) {\n            result = TextAnchor.BASELINE_RIGHT;\n        }\n        else if (this.equals(TextAnchor.CENTER_LEFT)) {\n            result = TextAnchor.CENTER_LEFT;\n        }\n        else if (this.equals(TextAnchor.CENTER)) {\n            result = TextAnchor.CENTER;\n        }\n        else if (this.equals(TextAnchor.CENTER_RIGHT)) {\n            result = TextAnchor.CENTER_RIGHT;\n        }\n        else if (this.equals(TextAnchor.HALF_ASCENT_LEFT)) {\n            result = TextAnchor.HALF_ASCENT_LEFT;\n        }\n        else if (this.equals(TextAnchor.HALF_ASCENT_CENTER)) {\n            result = TextAnchor.HALF_ASCENT_CENTER;\n        }\n        else if (this.equals(TextAnchor.HALF_ASCENT_RIGHT)) {\n            result = TextAnchor.HALF_ASCENT_RIGHT;\n        }\n        return result;\n    }\n",
        "begin_line": 180,
        "end_line": 228,
        "comment": "\n     * Ensures that serialization returns the unique instances.\n     * \n     * @return The object.\n     * \n     * @throws ObjectStreamException if there is a problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0565
        },
        "num_failing_tests": 2
    },
    {
        "name": "ItemLabelAnchor.readResolve#215",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.readResolve()",
        "snippet": "    private Object readResolve() throws ObjectStreamException {\n        ItemLabelAnchor result = null;\n        if (this.equals(ItemLabelAnchor.CENTER)) {\n            result = ItemLabelAnchor.CENTER;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE1)) {\n            result = ItemLabelAnchor.INSIDE1;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE2)) {\n            result = ItemLabelAnchor.INSIDE2;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE3)) {\n            result = ItemLabelAnchor.INSIDE3;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE4)) {\n            result = ItemLabelAnchor.INSIDE4;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE5)) {\n            result = ItemLabelAnchor.INSIDE5;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE6)) {\n            result = ItemLabelAnchor.INSIDE6;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE7)) {\n            result = ItemLabelAnchor.INSIDE7;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE8)) {\n            result = ItemLabelAnchor.INSIDE8;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE9)) {\n            result = ItemLabelAnchor.INSIDE9;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE10)) {\n            result = ItemLabelAnchor.INSIDE10;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE11)) {\n            result = ItemLabelAnchor.INSIDE11;\n        }\n        else if (this.equals(ItemLabelAnchor.INSIDE12)) {\n            result = ItemLabelAnchor.INSIDE12;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE1)) {\n            result = ItemLabelAnchor.OUTSIDE1;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE2)) {\n            result = ItemLabelAnchor.OUTSIDE2;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE3)) {\n            result = ItemLabelAnchor.OUTSIDE3;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE4)) {\n            result = ItemLabelAnchor.OUTSIDE4;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE5)) {\n            result = ItemLabelAnchor.OUTSIDE5;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE6)) {\n            result = ItemLabelAnchor.OUTSIDE6;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE7)) {\n            result = ItemLabelAnchor.OUTSIDE7;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE8)) {\n            result = ItemLabelAnchor.OUTSIDE8;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE9)) {\n            result = ItemLabelAnchor.OUTSIDE9;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE10)) {\n            result = ItemLabelAnchor.OUTSIDE10;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE11)) {\n            result = ItemLabelAnchor.OUTSIDE11;\n        }\n        else if (this.equals(ItemLabelAnchor.OUTSIDE12)) {\n            result = ItemLabelAnchor.OUTSIDE12;\n        }\n        return result;\n    }\n",
        "begin_line": 215,
        "end_line": 293,
        "comment": "\r\n     * Ensures that serialization returns the unique instances.\r\n     * \r\n     * @return The object.\r\n     * \r\n     * @throws ObjectStreamException if there is a problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0565
        },
        "num_failing_tests": 2
    },
    {
        "name": "ItemLabelAnchor.equals#190",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object o) {\n\n        if (this == o) {\n            return true;\n        }\n        if (!(o instanceof ItemLabelAnchor)) {\n            return false;\n        }\n\n        ItemLabelAnchor order = (ItemLabelAnchor) o;\n        if (!this.name.equals(order.toString())) {\n            return false;\n        }\n\n        return true;\n\n    }\n",
        "begin_line": 190,
        "end_line": 206,
        "comment": "\r\n     * Returns <code>true</code> if this object is equal to the specified \r\n     * object, and <code>false</code> otherwise.\r\n     *\r\n     * @param o  the other object.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.055
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrokeList.writeObject#137",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n\n        stream.defaultWriteObject();\n        int count = size();\n        stream.writeInt(count);\n        for (int i = 0; i < count; i++) {\n            Stroke stroke = getStroke(i);\n            if (stroke != null) {\n                stream.writeInt(i);\n                SerialUtilities.writeStroke(stroke, stream);\n            }\n            else {\n                stream.writeInt(-1);\n            }\n        }\n\n    }\n",
        "begin_line": 137,
        "end_line": 153,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "StrokeList.readObject#163",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) throws IOException, \n            ClassNotFoundException {\n\n        stream.defaultReadObject();\n        int count = stream.readInt();\n        for (int i = 0; i < count; i++) {\n            int index = stream.readInt();\n            if (index != -1) {\n                setStroke(index, SerialUtilities.readStroke(stream));\n            }\n        }\n        \n    }\n",
        "begin_line": 163,
        "end_line": 175,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "ShapeList.writeObject#136",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n\n        stream.defaultWriteObject();\n        int count = size();\n        stream.writeInt(count);\n        for (int i = 0; i < count; i++) {\n            Shape shape = getShape(i);\n            if (shape != null) {\n                stream.writeInt(i);\n                SerialUtilities.writeShape(shape, stream);\n            }\n            else {\n                stream.writeInt(-1);\n            }\n        }\n\n    }\n",
        "begin_line": 136,
        "end_line": 152,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "ShapeList.readObject#162",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) throws IOException, \n            ClassNotFoundException {\n\n        stream.defaultReadObject();\n        int count = stream.readInt();\n        for (int i = 0; i < count; i++) {\n            int index = stream.readInt();\n            if (index != -1) {\n                setShape(index, SerialUtilities.readShape(stream));\n            }\n        }\n        \n    }\n",
        "begin_line": 162,
        "end_line": 174,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "PaintList.writeObject#128",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n\n        stream.defaultWriteObject();\n        int count = size();\n        stream.writeInt(count);\n        for (int i = 0; i < count; i++) {\n            Paint paint = getPaint(i);\n            if (paint != null) {\n                stream.writeInt(i);\n                SerialUtilities.writePaint(paint, stream);\n            }\n            else {\n                stream.writeInt(-1);\n            }\n        }\n\n    }\n",
        "begin_line": 128,
        "end_line": 144,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the output stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "PaintList.readObject#154",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) throws IOException,\n            ClassNotFoundException {\n\n        stream.defaultReadObject();\n        int count = stream.readInt();\n        for (int i = 0; i < count; i++) {\n            final int index = stream.readInt();\n            if (index != -1) {\n                setPaint(index, SerialUtilities.readPaint(stream));\n            }\n        }\n        \n    }\n",
        "begin_line": 154,
        "end_line": 166,
        "comment": "\n     * Provides serialization support.\n     *\n     * @param stream  the input stream.\n     *\n     * @throws IOException  if there is an I/O error.\n     * @throws ClassNotFoundException  if there is a classpath problem.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRenderer.writeObject#2588",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.writeObject(java.io.ObjectOutputStream)",
        "snippet": "    private void writeObject(ObjectOutputStream stream) throws IOException {\n\n        stream.defaultWriteObject();\n        SerialUtilities.writePaint(this.basePaint, stream);\n        SerialUtilities.writePaint(this.baseFillPaint, stream);\n        SerialUtilities.writePaint(this.baseOutlinePaint, stream);\n        SerialUtilities.writeStroke(this.baseStroke, stream);\n        SerialUtilities.writeStroke(this.baseOutlineStroke, stream);\n        SerialUtilities.writeShape(this.baseShape, stream);\n        SerialUtilities.writePaint(this.baseItemLabelPaint, stream);\n\n    }\n",
        "begin_line": 2588,
        "end_line": 2599,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the output stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "AbstractRenderer.readObject#2609",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.readObject(java.io.ObjectInputStream)",
        "snippet": "    private void readObject(ObjectInputStream stream) \n        throws IOException, ClassNotFoundException {\n\n        stream.defaultReadObject();\n        this.basePaint = SerialUtilities.readPaint(stream);\n        this.baseFillPaint = SerialUtilities.readPaint(stream);\n        this.baseOutlinePaint = SerialUtilities.readPaint(stream);\n        this.baseStroke = SerialUtilities.readStroke(stream);\n        this.baseOutlineStroke = SerialUtilities.readStroke(stream);\n        this.baseShape = SerialUtilities.readShape(stream);\n        this.baseItemLabelPaint = SerialUtilities.readPaint(stream);\n        \n        // listeners are not restored automatically, but storage must be \n        // provided...\n        this.listenerList = new EventListenerList();\n\n    }\n",
        "begin_line": 2609,
        "end_line": 2625,
        "comment": "\r\n     * Provides serialization support.\r\n     *\r\n     * @param stream  the input stream.\r\n     *\r\n     * @throws IOException  if there is an I/O error.\r\n     * @throws ClassNotFoundException  if there is a classpath problem.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0542
        },
        "num_failing_tests": 2
    },
    {
        "name": "ItemLabelAnchor.toString#178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelAnchor.java",
        "class_name": "org.jfree.chart.labels.ItemLabelAnchor",
        "signature": "org.jfree.chart.labels.ItemLabelAnchor.toString()",
        "snippet": "    public String toString() {\n        return this.name;\n    }\n",
        "begin_line": 178,
        "end_line": 180,
        "comment": "\r\n     * Returns a string representing the object.\r\n     *\r\n     * @return The string.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0537
        },
        "num_failing_tests": 2
    },
    {
        "name": "SerialDate.lastDayOfMonth#544",
        "is_bug": false,
        "src_path": "source/org/jfree/data/time/SerialDate.java",
        "class_name": "org.jfree.data.time.SerialDate",
        "signature": "org.jfree.data.time.SerialDate.lastDayOfMonth(int, int)",
        "snippet": "    public static int lastDayOfMonth(final int month, final int yyyy) {\n\n        final int result = LAST_DAY_OF_MONTH[month];\n        if (month != FEBRUARY) {\n            return result;\n        }\n        else if (isLeapYear(yyyy)) {\n            return result + 1;\n        }\n        else {\n            return result;\n        }\n\n    }\n",
        "begin_line": 544,
        "end_line": 557,
        "comment": "\n     * Returns the number of the last day of the month, taking into account \n     * leap years.\n     *\n     * @param month  the month.\n     * @param yyyy  the year (in the range 1900 to 9999).\n     *\n     * @return the number of the last day of the month.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0517
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractSeriesDataset.AbstractSeriesDataset#66",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/AbstractSeriesDataset.java",
        "class_name": "org.jfree.data.general.AbstractSeriesDataset",
        "signature": "org.jfree.data.general.AbstractSeriesDataset.AbstractSeriesDataset()",
        "snippet": "    protected AbstractSeriesDataset() {\n        super();\n    }\n",
        "begin_line": 66,
        "end_line": 68,
        "comment": "\r\n     * Creates a new dataset.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "TextAnchor.equals#147",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/text/TextAnchor.java",
        "class_name": "org.jfree.chart.text.TextAnchor",
        "signature": "org.jfree.chart.text.TextAnchor.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (this == obj) {\n            return true;\n        }\n        if (!(obj instanceof TextAnchor)) {\n            return false;\n        }\n\n        TextAnchor order = (TextAnchor) obj;\n        if (!this.name.equals(order.name)) {\n            return false;\n        }\n\n        return true;\n    }\n",
        "begin_line": 147,
        "end_line": 162,
        "comment": "\n     * Returns <code>true</code> if this object is equal to the specified \n     * object, and <code>false</code> otherwise.\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.051
        },
        "num_failing_tests": 2
    },
    {
        "name": "Title.equals#377",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/title/Title.java",
        "class_name": "org.jfree.chart.title.Title",
        "signature": "org.jfree.chart.title.Title.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Title)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;   \n        }\n        Title that = (Title) obj;\n        if (this.position != that.position) {\n            return false;\n        }\n        if (this.horizontalAlignment != that.horizontalAlignment) {\n            return false;\n        }\n        if (this.verticalAlignment != that.verticalAlignment) {\n            return false;\n        }\n        if (this.notify != that.notify) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 377,
        "end_line": 401,
        "comment": "\r\n     * Tests an object for equality with this title.\r\n     *\r\n     * @param obj  the object (<code>null</code> not permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractBlock.equals#557",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/block/AbstractBlock.java",
        "class_name": "org.jfree.chart.block.AbstractBlock",
        "signature": "org.jfree.chart.block.AbstractBlock.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof AbstractBlock)) {\n            return false;   \n        }\n        AbstractBlock that = (AbstractBlock) obj;\n        if (!ObjectUtilities.equal(this.id, that.id)) {\n            return false;\n        }\n        if (!this.frame.equals(that.frame)) {\n            return false;   \n        }\n        if (!this.bounds.equals(that.bounds)) {\n            return false;   \n        }\n        if (!this.margin.equals(that.margin)) {\n            return false;   \n        }\n        if (!this.padding.equals(that.padding)) {\n            return false;   \n        }\n        if (this.height != that.height) {\n            return false;   \n        }\n        if (this.width != that.width) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 557,
        "end_line": 587,
        "comment": "\r\n     * Tests this block for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0489
        },
        "num_failing_tests": 1
    },
    {
        "name": "LineAndShapeRenderer.LineAndShapeRenderer#175",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/LineAndShapeRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.LineAndShapeRenderer",
        "signature": "org.jfree.chart.renderer.category.LineAndShapeRenderer.LineAndShapeRenderer()",
        "snippet": "    public LineAndShapeRenderer() {\n        this(true, true);\n    }\n",
        "begin_line": 175,
        "end_line": 177,
        "comment": "\r\n     * Creates a renderer with both lines and shapes visible by default.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryPlot.setDataset#1163",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/CategoryPlot.java",
        "class_name": "org.jfree.chart.plot.CategoryPlot",
        "signature": "org.jfree.chart.plot.CategoryPlot.setDataset(int, org.jfree.data.category.CategoryDataset)",
        "snippet": "    public void setDataset(int index, CategoryDataset dataset) {\n        \n        CategoryDataset existing = (CategoryDataset) this.datasets.get(index);\n        if (existing != null) {\n            existing.removeChangeListener(this);\n        }\n        this.datasets.set(index, dataset);\n        if (dataset != null) {\n            dataset.addChangeListener(this);\n        }\n        \n        // send a dataset change event to self...\n        DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);\n        datasetChanged(event);\n        \n    }\n",
        "begin_line": 1163,
        "end_line": 1178,
        "comment": "\r\n     * Sets a dataset for the plot.\r\n     *\r\n     * @param index  the dataset index.\r\n     * @param dataset  the dataset (<code>null</code> permitted).\r\n     * \r\n     * @see #getDataset(int)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0477
        },
        "num_failing_tests": 1
    },
    {
        "name": "SerialUtilities.readStroke#183",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SerialUtilities.java",
        "class_name": "org.jfree.chart.util.SerialUtilities",
        "signature": "org.jfree.chart.util.SerialUtilities.readStroke(java.io.ObjectInputStream)",
        "snippet": "    public static Stroke readStroke(ObjectInputStream stream)\n            throws IOException, ClassNotFoundException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");   \n        }\n        Stroke result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            Class c = (Class) stream.readObject();\n            if (c.equals(BasicStroke.class)) {\n                float width = stream.readFloat();\n                int cap = stream.readInt();\n                int join = stream.readInt();\n                float miterLimit = stream.readFloat();\n                float[] dash = (float[]) stream.readObject();\n                float dashPhase = stream.readFloat();\n                result = new BasicStroke(width, cap, join, miterLimit, dash, \n                        dashPhase);\n            }\n            else {\n                result = (Stroke) stream.readObject();\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 183,
        "end_line": 209,
        "comment": "\n     * Reads a <code>Stroke</code> object that has been serialised by the\n     * {@link SerialUtilities#writeStroke(Stroke, ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream (<code>null</code> not permitted).\n     *\n     * @return The stroke object (possibly <code>null</code>).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 2
    },
    {
        "name": "SerialUtilities.writeStroke#222",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SerialUtilities.java",
        "class_name": "org.jfree.chart.util.SerialUtilities",
        "signature": "org.jfree.chart.util.SerialUtilities.writeStroke(java.awt.Stroke, java.io.ObjectOutputStream)",
        "snippet": "    public static void writeStroke(Stroke stroke, ObjectOutputStream stream) \n            throws IOException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");   \n        }\n        if (stroke != null) {\n            stream.writeBoolean(false);\n            if (stroke instanceof BasicStroke) {\n                BasicStroke s = (BasicStroke) stroke;\n                stream.writeObject(BasicStroke.class);\n                stream.writeFloat(s.getLineWidth());\n                stream.writeInt(s.getEndCap());\n                stream.writeInt(s.getLineJoin());\n                stream.writeFloat(s.getMiterLimit());\n                stream.writeObject(s.getDashArray());\n                stream.writeFloat(s.getDashPhase());\n            }\n            else {\n                stream.writeObject(stroke.getClass());\n                stream.writeObject(stroke);\n            }\n        }\n        else {\n            stream.writeBoolean(true);\n        }\n    }\n",
        "begin_line": 222,
        "end_line": 248,
        "comment": "\n     * Serialises a <code>Stroke</code> object.  This code handles the\n     * <code>BasicStroke</code> class which is the only <code>Stroke</code> \n     * implementation provided by the JDK (and isn't directly \n     * <code>Serializable</code>).\n     *\n     * @param stroke  the stroke object (<code>null</code> permitted).\n     * @param stream  the output stream (<code>null</code> not permitted).\n     *\n     * @throws IOException if there is an I/O error.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0452
        },
        "num_failing_tests": 2
    },
    {
        "name": "SerialUtilities.isSerializable#92",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SerialUtilities.java",
        "class_name": "org.jfree.chart.util.SerialUtilities",
        "signature": "org.jfree.chart.util.SerialUtilities.isSerializable(java.lang.Class)",
        "snippet": "    public static boolean isSerializable(Class c) {\n        return Serializable.class.isAssignableFrom(c);\n    }\n",
        "begin_line": 92,
        "end_line": 94,
        "comment": "\n     * Returns <code>true</code> if a class implements <code>Serializable</code>\n     * and <code>false</code> otherwise.\n     * \n     * @param c  the class.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0447
        },
        "num_failing_tests": 2
    },
    {
        "name": "SerialUtilities.readPaint#107",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/SerialUtilities.java",
        "class_name": "org.jfree.chart.util.SerialUtilities",
        "signature": "org.jfree.chart.util.SerialUtilities.readPaint(java.io.ObjectInputStream)",
        "snippet": "    public static Paint readPaint(ObjectInputStream stream)\n        throws IOException, ClassNotFoundException {\n\n        if (stream == null) {\n            throw new IllegalArgumentException(\"Null 'stream' argument.\");   \n        }\n        Paint result = null;\n        boolean isNull = stream.readBoolean();\n        if (!isNull) {\n            Class c = (Class) stream.readObject();\n            if (isSerializable(c)) {\n                result = (Paint) stream.readObject();\n            }\n            else if (c.equals(GradientPaint.class)) {\n                float x1 = stream.readFloat();\n                float y1 = stream.readFloat();\n                Color c1 = (Color) stream.readObject();\n                float x2 = stream.readFloat();\n                float y2 = stream.readFloat();\n                Color c2 = (Color) stream.readObject();\n                boolean isCyclic = stream.readBoolean();\n                result = new GradientPaint(x1, y1, c1, x2, y2, c2, isCyclic);\n            }\n        }\n        return result;\n\n    }\n",
        "begin_line": 107,
        "end_line": 133,
        "comment": "\n     * Reads a <code>Paint</code> object that has been serialised by the\n     * {@link SerialUtilities#writePaint(Paint, ObjectOutputStream)} method.\n     *\n     * @param stream  the input stream (<code>null</code> not permitted).\n     *\n     * @return The paint object (possibly <code>null</code>).\n     *\n     * @throws IOException  if there is an I/O problem.\n     * @throws ClassNotFoundException  if there is a problem loading a class.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0447
        },
        "num_failing_tests": 2
    },
    {
        "name": "Series.getKey#130",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.getKey()",
        "snippet": "    public Comparable getKey() {\n        return this.key;\n    }\n",
        "begin_line": 130,
        "end_line": 132,
        "comment": "\r\n     * Returns the key for the series.\r\n     *\r\n     * @return The series key (never <code>null</code>).\r\n     * \r\n     * @see #setKey(Comparable)\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0445
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryAxis.equals#1122",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof CategoryAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        CategoryAxis that = (CategoryAxis) obj;\n        if (that.lowerMargin != this.lowerMargin) {\n            return false;\n        }\n        if (that.upperMargin != this.upperMargin) {\n            return false;\n        }\n        if (that.categoryMargin != this.categoryMargin) {\n            return false;\n        }\n        if (that.maximumCategoryLabelWidthRatio \n                != this.maximumCategoryLabelWidthRatio) {\n            return false;\n        }\n        if (that.categoryLabelPositionOffset \n                != this.categoryLabelPositionOffset) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(that.categoryLabelPositions, \n                this.categoryLabelPositions)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(that.categoryLabelToolTips, \n                this.categoryLabelToolTips)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFontMap, \n                that.tickLabelFontMap)) {\n            return false;\n        }\n        if (!equalPaintMaps(this.tickLabelPaintMap, that.tickLabelPaintMap)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 1122,
        "end_line": 1166,
        "comment": "\r\n     * Tests this axis for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 1
    },
    {
        "name": "CategoryAxis.equalPaintMaps#1276",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/CategoryAxis.java",
        "class_name": "org.jfree.chart.axis.CategoryAxis",
        "signature": "org.jfree.chart.axis.CategoryAxis.equalPaintMaps(java.util.Map, java.util.Map)",
        "snippet": "    private boolean equalPaintMaps(Map map1, Map map2) {\n        if (map1.size() != map2.size()) {\n            return false;\n        }\n        Set keys = map1.keySet();\n        Iterator iterator = keys.iterator();\n        while (iterator.hasNext()) {\n            Comparable key = (Comparable) iterator.next();\n            Paint p1 = (Paint) map1.get(key);\n            Paint p2 = (Paint) map2.get(key);\n            if (!PaintUtilities.equal(p1, p2)) {\n                return false;  \n            }\n        }\n        return true;\n    }\n",
        "begin_line": 1276,
        "end_line": 1291,
        "comment": "\r\n     * Tests two maps containing (<code>Comparable</code>, <code>Paint</code>)\r\n     * elements for equality.\r\n     * \r\n     * @param map1  the first map (<code>null</code> not permitted).\r\n     * @param map2  the second map (<code>null</code> not permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0435
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberTickUnit.equals#108",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberTickUnit.java",
        "class_name": "org.jfree.chart.axis.NumberTickUnit",
        "signature": "org.jfree.chart.axis.NumberTickUnit.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof NumberTickUnit)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        NumberTickUnit that = (NumberTickUnit) obj;\n        if (!this.formatter.equals(that.formatter)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 108,
        "end_line": 123,
        "comment": "\r\n     * Tests this formatter for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0337
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintUtilities.equal#75",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintUtilities.java",
        "class_name": "org.jfree.chart.util.PaintUtilities",
        "signature": "org.jfree.chart.util.PaintUtilities.equal(java.awt.Paint, java.awt.Paint)",
        "snippet": "    public static boolean equal(Paint p1, Paint p2) {\n\n        // handle cases where either or both arguments are null\n        if (p1 == null) {\n            return (p2 == null);   \n        }\n        if (p2 == null) {\n            return false;   \n        }\n        \n        boolean result = false;\n        // handle GradientPaint as a special case...\n        if (p1 instanceof GradientPaint && p2 instanceof GradientPaint) {\n            GradientPaint gp1 = (GradientPaint) p1;\n            GradientPaint gp2 = (GradientPaint) p2;\n            result = gp1.getColor1().equals(gp2.getColor1()) \n                && gp1.getColor2().equals(gp2.getColor2())\n                && gp1.getPoint1().equals(gp2.getPoint1())    \n                && gp1.getPoint2().equals(gp2.getPoint2())\n                && gp1.isCyclic() == gp2.isCyclic()\n                && gp1.getTransparency() == gp1.getTransparency(); \n        }\n        else {\n            result = p1.equals(p2);\n        }\n        return result;\n\n    }\n",
        "begin_line": 75,
        "end_line": 102,
        "comment": "\n     * Returns <code>true</code> if the two <code>Paint</code> objects are equal \n     * OR both <code>null</code>.  This method handles\n     * <code>GradientPaint</code> as a special case.\n     *\n     * @param p1  paint 1 (<code>null</code> permitted).\n     * @param p2  paint 2 (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0333
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractObjectList.equals#176",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/AbstractObjectList.java",
        "class_name": "org.jfree.chart.util.AbstractObjectList",
        "signature": "org.jfree.chart.util.AbstractObjectList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n\n        if (obj == this) {\n            return true;\n        }\n\n        if (!(obj instanceof AbstractObjectList)) {\n            return false;\n        }\n\n        AbstractObjectList other = (AbstractObjectList) obj;\n        int listSize = size();\n        for (int i = 0; i < listSize; i++) {\n           if (!ObjectUtilities.equal(get(i), other.get(i))) {\n               return false;\n           }\n        }\n        return true;\n    }\n",
        "begin_line": 176,
        "end_line": 198,
        "comment": "\n     * Tests this list for equality with another object.\n     *\n     * @param obj  the object to test.\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "TickUnits.equals#206",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnits.java",
        "class_name": "org.jfree.chart.axis.TickUnits",
        "signature": "org.jfree.chart.axis.TickUnits.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object object) {\n        if (object == null) {\n            return false;\n        }\n        if (object == this) {\n            return true;\n        }\n        if (object instanceof TickUnits) {\n            TickUnits tu = (TickUnits) object;\n            return tu.tickUnits.equals(this.tickUnits);\n        }\n        return false;\n    }\n",
        "begin_line": 206,
        "end_line": 218,
        "comment": "\r\n     * Tests an object for equality with this instance.\r\n     *\r\n     * @param object  the object to test.\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "TickUnit.equals#139",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/TickUnit.java",
        "class_name": "org.jfree.chart.axis.TickUnit",
        "signature": "org.jfree.chart.axis.TickUnit.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof TickUnit) {\n            TickUnit tu = (TickUnit) obj;\n            return this.size == tu.size;\n        }\n        return false;\n\n    }\n",
        "begin_line": 139,
        "end_line": 153,
        "comment": "\r\n     * Tests this unit for equality with another object.\r\n     *\r\n     * @param obj  the object.\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0321
        },
        "num_failing_tests": 1
    },
    {
        "name": "RectangleInsets.equals#157",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/RectangleInsets.java",
        "class_name": "org.jfree.chart.util.RectangleInsets",
        "signature": "org.jfree.chart.util.RectangleInsets.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof RectangleInsets)) {\n                return false;\n        }\n        final RectangleInsets that = (RectangleInsets) obj;\n        if (that.unitType != this.unitType) {\n            return false;   \n        }\n        if (this.left != that.left) {\n            return false;   \n        }\n        if (this.right != that.right) {\n            return false;   \n        }\n        if (this.top != that.top) {\n            return false;   \n        }\n        if (this.bottom != that.bottom) {\n            return false;   \n        }\n        return true;   \n    }\n",
        "begin_line": 157,
        "end_line": 181,
        "comment": "\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0318
        },
        "num_failing_tests": 1
    },
    {
        "name": "BarRenderer.equals#1032",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/BarRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.BarRenderer",
        "signature": "org.jfree.chart.renderer.category.BarRenderer.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        \n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof BarRenderer)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        BarRenderer that = (BarRenderer) obj;\n        if (this.base != that.base) {\n            return false;   \n        }\n        if (this.itemMargin != that.itemMargin) {\n            return false;\n        }              \n        if (this.drawBarOutline != that.drawBarOutline) {\n            return false;\n        }\n        if (this.maximumBarWidth != that.maximumBarWidth) {\n            return false;\n        }\n        if (this.minimumBarLength != that.minimumBarLength) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.gradientPaintTransformer, \n                that.gradientPaintTransformer)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.positiveItemLabelPositionFallback, \n            that.positiveItemLabelPositionFallback)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.negativeItemLabelPositionFallback, \n            that.negativeItemLabelPositionFallback)) {\n            return false;\n        }\n        return true;\n        \n    }\n",
        "begin_line": 1032,
        "end_line": 1073,
        "comment": "\r\n     * Tests this instance for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0302
        },
        "num_failing_tests": 1
    },
    {
        "name": "NumberAxis.equals#1332",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/NumberAxis.java",
        "class_name": "org.jfree.chart.axis.NumberAxis",
        "signature": "org.jfree.chart.axis.NumberAxis.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {           \n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof NumberAxis)) {\n            return false;\n        }\n        if (!super.equals(obj)) {\n            return false;\n        }\n        NumberAxis that = (NumberAxis) obj;        \n        if (this.autoRangeIncludesZero != that.autoRangeIncludesZero) {\n            return false;\n        }\n        if (this.autoRangeStickyZero != that.autoRangeStickyZero) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickUnit, that.tickUnit)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.numberFormatOverride, \n                that.numberFormatOverride)) {\n            return false;\n        }\n        if (!this.rangeType.equals(that.rangeType)) {\n            return false;\n        }\n        return true; \n    }\n",
        "begin_line": 1332,
        "end_line": 1360,
        "comment": "\r\n     * Tests the axis for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0293
        },
        "num_failing_tests": 1
    },
    {
        "name": "SeriesChangeEvent.SeriesChangeEvent#62",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/SeriesChangeEvent.java",
        "class_name": "org.jfree.data.general.SeriesChangeEvent",
        "signature": "org.jfree.data.general.SeriesChangeEvent.SeriesChangeEvent(java.lang.Object)",
        "snippet": "    public SeriesChangeEvent(Object source) {\n        super(source);\n    }\n",
        "begin_line": 62,
        "end_line": 64,
        "comment": "\r\n     * Constructs a new event.\r\n     *\r\n     * @param source  the source of the change event.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#102",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable)",
        "snippet": "    protected Series(Comparable key) {\n        this(key, null);\n    }\n",
        "begin_line": 102,
        "end_line": 104,
        "comment": "\r\n     * Creates a new series with the specified key.  \r\n     *\r\n     * @param key  the series key (<code>null</code> not permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.Series#112",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.Series(java.lang.Comparable, java.lang.String)",
        "snippet": "    protected Series(Comparable key, String description) {\n        if (key == null) {\n            throw new IllegalArgumentException(\"Null 'key' argument.\");\n        }\n        this.key = key;\n        this.description = description;\n        this.listeners = new EventListenerList();\n        this.propertyChangeSupport = new PropertyChangeSupport(this);\n        this.notify = true;   \n    }\n",
        "begin_line": 112,
        "end_line": 121,
        "comment": "\r\n     * Creates a new series with the specified key and description.\r\n     *\r\n     * @param key  the series key (<code>null</code> NOT permitted).\r\n     * @param description  the series description (<code>null</code> permitted).\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.addChangeListener#276",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.addChangeListener(org.jfree.data.general.SeriesChangeListener)",
        "snippet": "    public void addChangeListener(SeriesChangeListener listener) {\n        this.listeners.add(SeriesChangeListener.class, listener);\n    }\n",
        "begin_line": 276,
        "end_line": 278,
        "comment": "\r\n     * Registers an object with this series, to receive notification whenever \r\n     * the series changes.\r\n     * <P>\r\n     * Objects being registered must implement the {@link SeriesChangeListener} \r\n     * interface.\r\n     *\r\n     * @param listener  the listener to register.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.fireSeriesChanged#294",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.fireSeriesChanged()",
        "snippet": "    public void fireSeriesChanged() {\n        if (this.notify) {\n            notifyListeners(new SeriesChangeEvent(this));\n        }\n    }\n",
        "begin_line": 294,
        "end_line": 298,
        "comment": "\r\n     * General method for signalling to registered listeners that the series\r\n     * has been changed.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "Series.notifyListeners#306",
        "is_bug": false,
        "src_path": "source/org/jfree/data/general/Series.java",
        "class_name": "org.jfree.data.general.Series",
        "signature": "org.jfree.data.general.Series.notifyListeners(org.jfree.data.general.SeriesChangeEvent)",
        "snippet": "    protected void notifyListeners(SeriesChangeEvent event) {\n\n        Object[] listenerList = this.listeners.getListenerList();\n        for (int i = listenerList.length - 2; i >= 0; i -= 2) {\n            if (listenerList[i] == SeriesChangeListener.class) {\n                ((SeriesChangeListener) listenerList[i + 1]).seriesChanged(\n                        event);\n            }\n        }\n\n    }\n",
        "begin_line": 306,
        "end_line": 316,
        "comment": "\r\n     * Sends a change event to all registered listeners.\r\n     *\r\n     * @param event  contains information about the event that triggered the \r\n     *               notification.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardGradientPaintTransformer.equals#145",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StandardGradientPaintTransformer.java",
        "class_name": "org.jfree.chart.util.StandardGradientPaintTransformer",
        "signature": "org.jfree.chart.util.StandardGradientPaintTransformer.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;   \n        }\n        if (!(obj instanceof StandardGradientPaintTransformer)) {\n            return false;\n        }\n        StandardGradientPaintTransformer that \n                = (StandardGradientPaintTransformer) obj;\n        if (this.type != that.type) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 145,
        "end_line": 158,
        "comment": "\n     * Tests this instance for equality with an arbitrary object.\n     * \n     * @param obj  the object (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "ShapeUtilities.equal#129",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "signature": "org.jfree.chart.util.ShapeUtilities.equal(java.awt.Shape, java.awt.Shape)",
        "snippet": "    public static boolean equal(Shape s1, Shape s2) {\n        if (s1 instanceof Line2D && s2 instanceof Line2D) {\n            return equal((Line2D) s1, (Line2D) s2);\n        }\n        else if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D) {\n            return equal((Ellipse2D) s1, (Ellipse2D) s2);\n        }\n        else if (s1 instanceof Arc2D && s2 instanceof Arc2D) {\n            return equal((Arc2D) s1, (Arc2D) s2);   \n        }\n        else if (s1 instanceof Polygon && s2 instanceof Polygon) {\n            return equal((Polygon) s1, (Polygon) s2);   \n        }\n        else if (s1 instanceof GeneralPath && s2 instanceof GeneralPath) {\n            return equal((GeneralPath) s1, (GeneralPath) s2);   \n        }\n        else {\n            // this will handle Rectangle2D...\n            return ObjectUtilities.equal(s1, s2);\n        }\n    }\n",
        "begin_line": 129,
        "end_line": 149,
        "comment": "\n     * Tests two shapes for equality.  If both shapes are <code>null</code>, \n     * this method will return <code>true</code>. \n     * <p>\n     * In the current implementation, the following shapes are supported: \n     * <code>Ellipse2D</code>, <code>Line2D</code> and <code>Rectangle2D</code> \n     * (implicit).\n     * \n     * @param s1  the first shape (<code>null</code> permitted).\n     * @param s2  the second shape (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "ShapeUtilities.equal#185",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "signature": "org.jfree.chart.util.ShapeUtilities.equal(java.awt.geom.Ellipse2D, java.awt.geom.Ellipse2D)",
        "snippet": "    public static boolean equal(Ellipse2D e1, Ellipse2D e2) {\n        if (e1 == null) {\n            return (e2 == null);\n        }\n        if (e2 == null) {\n            return false;\n        }\n        if (!e1.getFrame().equals(e2.getFrame())) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 185,
        "end_line": 196,
        "comment": "\n     * Compares two ellipses and returns <code>true</code> if they are equal or \n     * both <code>null</code>.\n     * \n     * @param e1  the first ellipse (<code>null</code> permitted).\n     * @param e2  the second ellipse (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "ShapeUtilities.equal#238",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeUtilities.java",
        "class_name": "org.jfree.chart.util.ShapeUtilities",
        "signature": "org.jfree.chart.util.ShapeUtilities.equal(java.awt.Polygon, java.awt.Polygon)",
        "snippet": "    public static boolean equal(Polygon p1, Polygon p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.npoints != p2.npoints) {\n            return false;\n        }\n        if (!Arrays.equals(p1.xpoints, p2.xpoints)) {\n            return false;\n        }\n        if (!Arrays.equals(p1.ypoints, p2.ypoints)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 238,
        "end_line": 255,
        "comment": "\n     * Tests two polygons for equality.  If both are <code>null</code> this \n     * method returns <code>true</code>.\n     * \n     * @param p1  polygon 1 (<code>null</code> permitted).\n     * @param p2  polygon 2 (<code>null</code> permitted).\n     * \n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "Plot.equals#1178",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/Plot.java",
        "class_name": "org.jfree.chart.plot.Plot",
        "signature": "org.jfree.chart.plot.Plot.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Plot)) {\n            return false;\n        }\n        Plot that = (Plot) obj;\n        if (!ObjectUtilities.equal(this.noDataMessage, that.noDataMessage)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.noDataMessageFont, that.noDataMessageFont\n        )) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.noDataMessagePaint, \n                that.noDataMessagePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.insets, that.insets)) {\n            return false;\n        }\n        if (this.outlineVisible != that.outlineVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.outlineStroke, that.outlineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.outlinePaint, that.outlinePaint)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.backgroundPaint, that.backgroundPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.backgroundImage, \n                that.backgroundImage)) {\n            return false;\n        }\n        if (this.backgroundImageAlignment != that.backgroundImageAlignment) {\n            return false;\n        }\n        if (this.backgroundImageAlpha != that.backgroundImageAlpha) {\n            return false;\n        }\n        if (this.foregroundAlpha != that.foregroundAlpha) {\n            return false;\n        }\n        if (this.backgroundAlpha != that.backgroundAlpha) {\n            return false;\n        }\n        if (!this.drawingSupplier.equals(that.drawingSupplier)) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 1178,
        "end_line": 1233,
        "comment": "\r\n     * Tests this plot for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.equals#348",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n\n        if (!(obj instanceof DefaultDrawingSupplier)) {\n            return false;\n        }\n\n        DefaultDrawingSupplier that = (DefaultDrawingSupplier) obj;\n\n        if (!Arrays.equals(this.paintSequence, that.paintSequence)) {\n            return false;\n        }\n        if (this.paintIndex != that.paintIndex) {\n            return false;   \n        }\n        if (!Arrays.equals(this.outlinePaintSequence, \n                that.outlinePaintSequence)) {\n            return false;\n        }\n        if (this.outlinePaintIndex != that.outlinePaintIndex) {\n            return false;\n        }\n        if (!Arrays.equals(this.strokeSequence, that.strokeSequence)) {\n            return false;\n        }\n        if (this.strokeIndex != that.strokeIndex) {\n            return false;   \n        }\n        if (!Arrays.equals(this.outlineStrokeSequence, \n                that.outlineStrokeSequence)) {\n            return false;\n        }\n        if (this.outlineStrokeIndex != that.outlineStrokeIndex) {\n            return false;   \n        }\n        if (!equalShapes(this.shapeSequence, that.shapeSequence)) {\n            return false;\n        }\n        if (this.shapeIndex != that.shapeIndex) {\n            return false;\n        }\n        return true;\n\n    }\n",
        "begin_line": 348,
        "end_line": 394,
        "comment": "\r\n     * Tests this object for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "DefaultDrawingSupplier.equalShapes#404",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/plot/DefaultDrawingSupplier.java",
        "class_name": "org.jfree.chart.plot.DefaultDrawingSupplier",
        "signature": "org.jfree.chart.plot.DefaultDrawingSupplier.equalShapes(java.awt.Shape[], java.awt.Shape[])",
        "snippet": "    private boolean equalShapes(Shape[] s1, Shape[] s2) {\n        if (s1 == null) {\n            return s2 == null;   \n        }\n        if (s2 == null) {\n            return false;   \n        }\n        if (s1.length != s2.length) {\n            return false;   \n        }\n        for (int i = 0; i < s1.length; i++) {\n            if (!ShapeUtilities.equal(s1[i], s2[i])) {\n                return false;   \n            }\n        }\n        return true;\n    }\n",
        "begin_line": 404,
        "end_line": 420,
        "comment": "\r\n     * A utility method for testing the equality of two arrays of shapes.\r\n     * \r\n     * @param s1  the first array (<code>null</code> permitted).\r\n     * @param s2  the second array (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0287
        },
        "num_failing_tests": 1
    },
    {
        "name": "ValueAxis.equals#1551",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/ValueAxis.java",
        "class_name": "org.jfree.chart.axis.ValueAxis",
        "signature": "org.jfree.chart.axis.ValueAxis.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof ValueAxis)) {\n            return false;\n        }\n\n        ValueAxis that = (ValueAxis) obj;\n        \n        if (this.positiveArrowVisible != that.positiveArrowVisible) {\n            return false;\n        }\n        if (this.negativeArrowVisible != that.negativeArrowVisible) {\n            return false;\n        }\n        if (this.inverted != that.inverted) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.range, that.range)) {\n            return false;\n        }\n        if (this.autoRange != that.autoRange) {\n            return false;\n        }\n        if (this.autoRangeMinimumSize != that.autoRangeMinimumSize) {\n            return false;\n        }\n        if (!this.defaultAutoRange.equals(that.defaultAutoRange)) {\n            return false;\n        }\n        if (this.upperMargin != that.upperMargin) {\n            return false;\n        }\n        if (this.lowerMargin != that.lowerMargin) {\n            return false;\n        }\n        if (this.fixedAutoRange != that.fixedAutoRange) {\n            return false;\n        }\n        if (this.autoTickUnitSelection != that.autoTickUnitSelection) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.standardTickUnits, \n                that.standardTickUnits)) {\n            return false;\n        }\n        if (this.verticalTickLabels != that.verticalTickLabels) {\n            return false;\n        }\n\n        return super.equals(obj);\n\n    }\n",
        "begin_line": 1551,
        "end_line": 1605,
        "comment": "\r\n     * Tests the axis for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0271
        },
        "num_failing_tests": 1
    },
    {
        "name": "Range.equals#329",
        "is_bug": false,
        "src_path": "source/org/jfree/data/Range.java",
        "class_name": "org.jfree.data.Range",
        "signature": "org.jfree.data.Range.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (!(obj instanceof Range)) {\n            return false;\n        }\n        Range range = (Range) obj;\n        if (!(this.lower == range.lower)) {\n            return false;\n        }\n        if (!(this.upper == range.upper)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 329,
        "end_line": 341,
        "comment": "\r\n     * Tests this object for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the object to test against (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0267
        },
        "num_failing_tests": 1
    },
    {
        "name": "Axis.equals#1259",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/axis/Axis.java",
        "class_name": "org.jfree.chart.axis.Axis",
        "signature": "org.jfree.chart.axis.Axis.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof Axis)) {\n            return false;\n        }\n        Axis that = (Axis) obj;\n        if (this.visible != that.visible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.label, that.label)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelFont, that.labelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.labelPaint, that.labelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelInsets, that.labelInsets)) {\n            return false;\n        }\n        if (this.labelAngle != that.labelAngle) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelToolTip, that.labelToolTip)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.labelURL, that.labelURL)) {\n            return false;\n        }\n        if (this.axisLineVisible != that.axisLineVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.axisLineStroke, that.axisLineStroke)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.axisLinePaint, that.axisLinePaint)) {\n            return false;\n        }\n        if (this.tickLabelsVisible != that.tickLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickLabelFont, that.tickLabelFont)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.tickLabelPaint, that.tickLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.tickLabelInsets, that.tickLabelInsets\n        )) {\n            return false;\n        }\n        if (this.tickMarksVisible != that.tickMarksVisible) {\n            return false;\n        }\n        if (this.tickMarkInsideLength != that.tickMarkInsideLength) {\n            return false;\n        }                  \n        if (this.tickMarkOutsideLength != that.tickMarkOutsideLength) {\n            return false;\n        }                  \n        if (!PaintUtilities.equal(this.tickMarkPaint, that.tickMarkPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.tickMarkStroke, that.tickMarkStroke)) {\n            return false;\n        }\n        if (this.fixedDimension != that.fixedDimension) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 1259,
        "end_line": 1333,
        "comment": "\r\n     * Tests this axis for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0243
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractCategoryItemRenderer.equals#1193",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
        "class_name": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer",
        "signature": "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractCategoryItemRenderer)) {\n            return false;\n        }\n        AbstractCategoryItemRenderer that = (AbstractCategoryItemRenderer) obj;\n\n        if (!ObjectUtilities.equal(this.itemLabelGeneratorList,\n                that.itemLabelGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseItemLabelGenerator,\n                that.baseItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.toolTipGeneratorList,\n                that.toolTipGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseToolTipGenerator,\n                that.baseToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.urlGeneratorList, \n                that.urlGeneratorList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseURLGenerator,\n                that.baseURLGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemLabelGenerator,\n                that.legendItemLabelGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,\n                that.legendItemToolTipGenerator)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.legendItemURLGenerator,\n                that.legendItemURLGenerator)) {\n            return false;\n        }\n        return super.equals(obj);\n    }\n",
        "begin_line": 1193,
        "end_line": 1240,
        "comment": "\r\n     * Tests this renderer for equality with another object.\r\n     *\r\n     * @param obj  the object.\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0222
        },
        "num_failing_tests": 1
    },
    {
        "name": "StandardCategorySeriesLabelGenerator.equals#140",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/StandardCategorySeriesLabelGenerator.java",
        "class_name": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator",
        "signature": "org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof StandardCategorySeriesLabelGenerator)) {\n            return false;\n        }\n        StandardCategorySeriesLabelGenerator that \n                = (StandardCategorySeriesLabelGenerator) obj;\n        if (!this.formatPattern.equals(that.formatPattern)) {\n            return false;\n        }\n        return true;\n    }\n",
        "begin_line": 140,
        "end_line": 153,
        "comment": "\r\n     * Tests this object for equality with an arbitrary object.\r\n     *\r\n     * @param obj  the other object (<code>null</code> permitted).\r\n     *\r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0222
        },
        "num_failing_tests": 1
    },
    {
        "name": "ItemLabelPosition.equals#175",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/labels/ItemLabelPosition.java",
        "class_name": "org.jfree.chart.labels.ItemLabelPosition",
        "signature": "org.jfree.chart.labels.ItemLabelPosition.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {  \n        if (obj == this) {\n            return true;\n        }    \n        if (!(obj instanceof ItemLabelPosition)) {\n            return false;\n        }\n        ItemLabelPosition that = (ItemLabelPosition) obj;\n        if (!this.itemLabelAnchor.equals(that.itemLabelAnchor)) {\n            return false;\n        }\n        if (!this.textAnchor.equals(that.textAnchor)) {\n            return false;\n        }\n        if (!this.rotationAnchor.equals(that.rotationAnchor)) {\n            return false;\n        }\n        if (this.angle != that.angle) {\n            return false;\n        }     \n        return true;\n    }\n",
        "begin_line": 175,
        "end_line": 196,
        "comment": "\r\n     * Tests this object for equality with an arbitrary object.\r\n     * \r\n     * @param obj  the object (<code>null</code> permitted).\r\n     * \r\n     * @return A boolean.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0173
        },
        "num_failing_tests": 1
    },
    {
        "name": "StrokeList.equals#103",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/StrokeList.java",
        "class_name": "org.jfree.chart.util.StrokeList",
        "signature": "org.jfree.chart.util.StrokeList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n        \n        if (obj == this) {\n            return true;\n        }\n        \n        if (obj instanceof StrokeList) {\n            return super.equals(obj);\n        }\n\n        return false;\n\n    }\n",
        "begin_line": 103,
        "end_line": 119,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ShapeList.equals#102",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ShapeList.java",
        "class_name": "org.jfree.chart.util.ShapeList",
        "signature": "org.jfree.chart.util.ShapeList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n\n        if (obj == null) {\n            return false;\n        }\n        \n        if (obj == this) {\n            return true;\n        }\n        \n        if (obj instanceof ShapeList) {\n            return super.equals(obj);\n        }\n\n        return false;\n\n    }\n",
        "begin_line": 102,
        "end_line": 118,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 1
    },
    {
        "name": "PaintList.equals#93",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/PaintList.java",
        "class_name": "org.jfree.chart.util.PaintList",
        "signature": "org.jfree.chart.util.PaintList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == null) {\n            return false;\n        }\n        if (obj == this) {\n            return true;\n        }\n        if (obj instanceof PaintList) {\n            PaintList that = (PaintList) obj;\n            int listSize = size();\n            for (int i = 0; i < listSize; i++) {\n               if (!PaintUtilities.equal(getPaint(i), that.getPaint(i))) {\n                   return false;\n               }\n            }\n        }\n        return true;\n    }\n",
        "begin_line": 93,
        "end_line": 110,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object (<code>null</code> permitted).\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 1
    },
    {
        "name": "BooleanList.equals#94",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/BooleanList.java",
        "class_name": "org.jfree.chart.util.BooleanList",
        "signature": "org.jfree.chart.util.BooleanList.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj instanceof BooleanList) {\n            return super.equals(obj);\n        }\n        return false;\n    }\n",
        "begin_line": 94,
        "end_line": 99,
        "comment": "\n     * Tests the list for equality with another object (typically also a list).\n     *\n     * @param obj  the other object.\n     *\n     * @return A boolean.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 1
    },
    {
        "name": "AbstractRenderer.equals#2354",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/renderer/AbstractRenderer.java",
        "class_name": "org.jfree.chart.renderer.AbstractRenderer",
        "signature": "org.jfree.chart.renderer.AbstractRenderer.equals(java.lang.Object)",
        "snippet": "    public boolean equals(Object obj) {\n        if (obj == this) {\n            return true;\n        }\n        if (!(obj instanceof AbstractRenderer)) {\n            return false;\n        }\n        AbstractRenderer that = (AbstractRenderer) obj;\n        if (!this.seriesVisibleList.equals(that.seriesVisibleList)) {\n            return false;   \n        }\n        if (this.baseSeriesVisible != that.baseSeriesVisible) {\n            return false;   \n        }\n        if (!this.seriesVisibleInLegendList.equals(\n                that.seriesVisibleInLegendList)) {\n            return false;   \n        }\n        if (this.baseSeriesVisibleInLegend != that.baseSeriesVisibleInLegend) {\n            return false;   \n        }\n        if (!ObjectUtilities.equal(this.paintList, that.paintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.basePaint, that.basePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.fillPaintList, that.fillPaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseFillPaint, that.baseFillPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.outlinePaintList,\n                that.outlinePaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseOutlinePaint, \n                that.baseOutlinePaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.strokeList, that.strokeList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseStroke, that.baseStroke)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.outlineStrokeList, \n                that.outlineStrokeList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(\n            this.baseOutlineStroke, that.baseOutlineStroke)\n        ) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.shapeList, that.shapeList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseShape, that.baseShape)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.itemLabelsVisibleList, \n                that.itemLabelsVisibleList)) {\n            return false;\n        }\n        if (this.baseItemLabelsVisible != that.baseItemLabelsVisible) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.itemLabelFontList, \n                that.itemLabelFontList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseItemLabelFont, \n                that.baseItemLabelFont)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.itemLabelPaintList, \n                that.itemLabelPaintList)) {\n            return false;\n        }\n        if (!PaintUtilities.equal(this.baseItemLabelPaint, \n                that.baseItemLabelPaint)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.positiveItemLabelPositionList, \n                that.positiveItemLabelPositionList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.basePositiveItemLabelPosition, \n                that.basePositiveItemLabelPosition)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.negativeItemLabelPositionList, \n                that.negativeItemLabelPositionList)) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.baseNegativeItemLabelPosition, \n                that.baseNegativeItemLabelPosition)) {\n            return false;\n        }\n        if (this.itemLabelAnchorOffset != that.itemLabelAnchorOffset) {\n            return false;\n        }\n        if (!ObjectUtilities.equal(this.createEntitiesList, \n                that.createEntitiesList)) {\n            return false;   \n        }\n        if (this.baseCreateEntities != that.baseCreateEntities) {\n            return false;   \n        }\n        return true;\n    }\n",
        "begin_line": 2354,
        "end_line": 2466,
        "comment": "\r\n     * Tests this renderer for equality with another object.\r\n     *\r\n     * @param obj  the object (<code>null</code> permitted).\r\n     *\r\n     * @return <code>true</code> or <code>false</code>.\r\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.015
        },
        "num_failing_tests": 1
    },
    {
        "name": "ObjectUtilities.equal#126",
        "is_bug": false,
        "src_path": "source/org/jfree/chart/util/ObjectUtilities.java",
        "class_name": "org.jfree.chart.util.ObjectUtilities",
        "signature": "org.jfree.chart.util.ObjectUtilities.equal(java.lang.Object, java.lang.Object)",
        "snippet": "    public static boolean equal(final Object o1, final Object o2) {\n        if (o1 == o2) {\n            return true;\n        }\n        if (o1 != null) {\n            return o1.equals(o2);\n        }\n        else {\n            return false;\n        }\n    }\n",
        "begin_line": 126,
        "end_line": 136,
        "comment": "\n     * Returns <code>true</code> if the two objects are equal OR both \n     * <code>null</code>.\n     *\n     * @param o1 object 1 (<code>null</code> permitted).\n     * @param o2 object 2 (<code>null</code> permitted).\n     * @return <code>true</code> or <code>false</code>.\n     ",
        "resolved_comments": {},
        "susp": {
            "ochiai_susp": 0.0124
        },
        "num_failing_tests": 1
    }
]