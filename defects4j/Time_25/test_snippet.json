[
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.main(java.lang.String[])",
        "snippet": "    public static void main(String[] args) {\n        junit.textui.TestRunner.run(suite());\n    }\n",
        "begin_line": 31,
        "end_line": 33,
        "comment": "",
        "child_ranges": [
            "(line 32,col 9)-(line 32,col 45)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.suite()",
        "snippet": "    public static TestSuite suite() {\n        return new TestSuite(TestDateTimeZoneCutover.class);\n    }\n",
        "begin_line": 35,
        "end_line": 37,
        "comment": "",
        "child_ranges": [
            "(line 36,col 9)-(line 36,col 60)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.TestDateTimeZoneCutover(java.lang.String)",
        "snippet": "    public TestDateTimeZoneCutover(String name) {\n        super(name);\n    }\n",
        "begin_line": 39,
        "end_line": 41,
        "comment": "",
        "child_ranges": [
            "(line 40,col 9)-(line 40,col 20)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.setUp()",
        "snippet": "    protected void setUp() throws Exception {\n    }\n",
        "begin_line": 43,
        "end_line": 44,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.tearDown()",
        "snippet": "    protected void tearDown() throws Exception {\n    }\n",
        "begin_line": 46,
        "end_line": 47,
        "comment": "",
        "child_ranges": []
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_MockGazaIsCorrect()",
        "snippet": "    public void test_MockGazaIsCorrect() {\n        DateTime pre = new DateTime(CUTOVER_GAZA - 1L, MOCK_GAZA);\n        assertEquals(\"2007-03-31T23:59:59.999+02:00\", pre.toString());\n        DateTime at = new DateTime(CUTOVER_GAZA, MOCK_GAZA);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", at.toString());\n        DateTime post = new DateTime(CUTOVER_GAZA + 1L, MOCK_GAZA);\n        assertEquals(\"2007-04-01T01:00:00.001+03:00\", post.toString());\n    }\n",
        "begin_line": 61,
        "end_line": 68,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 62,col 9)-(line 62,col 66)",
            "(line 63,col 9)-(line 63,col 70)",
            "(line 64,col 9)-(line 64,col 60)",
            "(line 65,col 9)-(line 65,col 69)",
            "(line 66,col 9)-(line 66,col 67)",
            "(line 67,col 9)-(line 67,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Gaza()",
        "snippet": "    public void test_getOffsetFromLocal_Gaza() {\n        doTest_getOffsetFromLocal_Gaza(-1, 23, 0, \"2007-03-31T23:00:00.000+02:00\");\n        doTest_getOffsetFromLocal_Gaza(-1, 23, 30, \"2007-03-31T23:30:00.000+02:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 0, 0, \"2007-04-01T01:00:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 0, 30, \"2007-04-01T01:30:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 1, 0, \"2007-04-01T01:00:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 1, 30, \"2007-04-01T01:30:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 2, 0, \"2007-04-01T02:00:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 3, 0, \"2007-04-01T03:00:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 4, 0, \"2007-04-01T04:00:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 5, 0, \"2007-04-01T05:00:00.000+03:00\");\n        doTest_getOffsetFromLocal_Gaza(0, 6, 0, \"2007-04-01T06:00:00.000+03:00\");\n    }\n",
        "begin_line": 70,
        "end_line": 82,
        "comment": "",
        "child_ranges": [
            "(line 71,col 9)-(line 71,col 83)",
            "(line 72,col 9)-(line 72,col 84)",
            "(line 73,col 9)-(line 73,col 81)",
            "(line 74,col 9)-(line 74,col 82)",
            "(line 75,col 9)-(line 75,col 81)",
            "(line 76,col 9)-(line 76,col 82)",
            "(line 77,col 9)-(line 77,col 81)",
            "(line 78,col 9)-(line 78,col 81)",
            "(line 79,col 9)-(line 79,col 81)",
            "(line 80,col 9)-(line 80,col 81)",
            "(line 81,col 9)-(line 81,col 81)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal_Gaza(int, int, int, java.lang.String)",
        "snippet": "    private void doTest_getOffsetFromLocal_Gaza(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_GAZA.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_GAZA);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n",
        "begin_line": 84,
        "end_line": 89,
        "comment": "",
        "child_ranges": [
            "(line 85,col 9)-(line 85,col 97)",
            "(line 86,col 9)-(line 86,col 66)",
            "(line 87,col 9)-(line 87,col 72)",
            "(line 88,col 9)-(line 88,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_Gaza()",
        "snippet": "    public void test_DateTime_roundFloor_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", rounded.toString());\n    }\n",
        "begin_line": 91,
        "end_line": 96,
        "comment": "",
        "child_ranges": [
            "(line 92,col 9)-(line 92,col 70)",
            "(line 93,col 9)-(line 93,col 69)",
            "(line 94,col 9)-(line 94,col 60)",
            "(line 95,col 9)-(line 95,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_Gaza()",
        "snippet": "    public void test_DateTime_roundCeiling_Gaza() {\n        DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-03-31T20:00:00.000+02:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", rounded.toString());\n    }\n",
        "begin_line": 98,
        "end_line": 103,
        "comment": "",
        "child_ranges": [
            "(line 99,col 9)-(line 99,col 72)",
            "(line 100,col 9)-(line 100,col 69)",
            "(line 101,col 9)-(line 101,col 62)",
            "(line 102,col 9)-(line 102,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourZero_Gaza()",
        "snippet": "    public void test_DateTime_setHourZero_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n        try {\n            dt.hourOfDay().setCopy(0);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 105,
        "end_line": 114,
        "comment": "",
        "child_ranges": [
            "(line 106,col 9)-(line 106,col 70)",
            "(line 107,col 9)-(line 107,col 69)",
            "(line 108,col 9)-(line 113,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_withHourZero_Gaza()",
        "snippet": "    public void test_DateTime_withHourZero_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n        try {\n            dt.withHourOfDay(0);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 116,
        "end_line": 125,
        "comment": "",
        "child_ranges": [
            "(line 117,col 9)-(line 117,col 70)",
            "(line 118,col 9)-(line 118,col 69)",
            "(line 119,col 9)-(line 124,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_withDay_Gaza()",
        "snippet": "    public void test_DateTime_withDay_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-04-02T00:00:00.000+03:00\", dt.toString());\n        DateTime res = dt.withDayOfMonth(1);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", res.toString());\n    }\n",
        "begin_line": 127,
        "end_line": 132,
        "comment": "",
        "child_ranges": [
            "(line 128,col 9)-(line 128,col 70)",
            "(line 129,col 9)-(line 129,col 69)",
            "(line 130,col 9)-(line 130,col 44)",
            "(line 131,col 9)-(line 131,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_minusHour_Gaza()",
        "snippet": "    public void test_DateTime_minusHour_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-04-01T08:00:00.000+03:00\", dt.toString());\n        \n        DateTime minus7 = dt.minusHours(7);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", minus7.toString());\n        DateTime minus8 = dt.minusHours(8);\n        assertEquals(\"2007-03-31T23:00:00.000+02:00\", minus8.toString());\n        DateTime minus9 = dt.minusHours(9);\n        assertEquals(\"2007-03-31T22:00:00.000+02:00\", minus9.toString());\n    }\n",
        "begin_line": 134,
        "end_line": 144,
        "comment": "",
        "child_ranges": [
            "(line 135,col 9)-(line 135,col 70)",
            "(line 136,col 9)-(line 136,col 69)",
            "(line 138,col 9)-(line 138,col 43)",
            "(line 139,col 9)-(line 139,col 73)",
            "(line 140,col 9)-(line 140,col 43)",
            "(line 141,col 9)-(line 141,col 73)",
            "(line 142,col 9)-(line 142,col 43)",
            "(line 143,col 9)-(line 143,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusHour_Gaza()",
        "snippet": "    public void test_DateTime_plusHour_Gaza() {\n        DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-03-31T16:00:00.000+02:00\", dt.toString());\n        \n        DateTime plus7 = dt.plusHours(7);\n        assertEquals(\"2007-03-31T23:00:00.000+02:00\", plus7.toString());\n        DateTime plus8 = dt.plusHours(8);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", plus8.toString());\n        DateTime plus9 = dt.plusHours(9);\n        assertEquals(\"2007-04-01T02:00:00.000+03:00\", plus9.toString());\n    }\n",
        "begin_line": 146,
        "end_line": 156,
        "comment": "",
        "child_ranges": [
            "(line 147,col 9)-(line 147,col 72)",
            "(line 148,col 9)-(line 148,col 69)",
            "(line 150,col 9)-(line 150,col 41)",
            "(line 151,col 9)-(line 151,col 72)",
            "(line 152,col 9)-(line 152,col 41)",
            "(line 153,col 9)-(line 153,col 72)",
            "(line 154,col 9)-(line 154,col 41)",
            "(line 155,col 9)-(line 155,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_minusDay_Gaza()",
        "snippet": "    public void test_DateTime_minusDay_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-04-02T00:00:00.000+03:00\", dt.toString());\n        \n        DateTime minus1 = dt.minusDays(1);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", minus1.toString());\n        DateTime minus2 = dt.minusDays(2);\n        assertEquals(\"2007-03-31T00:00:00.000+02:00\", minus2.toString());\n    }\n",
        "begin_line": 158,
        "end_line": 166,
        "comment": "",
        "child_ranges": [
            "(line 159,col 9)-(line 159,col 70)",
            "(line 160,col 9)-(line 160,col 69)",
            "(line 162,col 9)-(line 162,col 42)",
            "(line 163,col 9)-(line 163,col 73)",
            "(line 164,col 9)-(line 164,col 42)",
            "(line 165,col 9)-(line 165,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusDay_Gaza()",
        "snippet": "    public void test_DateTime_plusDay_Gaza() {\n        DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-03-31T00:00:00.000+02:00\", dt.toString());\n        \n        DateTime plus1 = dt.plusDays(1);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", plus1.toString());\n        DateTime plus2 = dt.plusDays(2);\n        assertEquals(\"2007-04-02T00:00:00.000+03:00\", plus2.toString());\n    }\n",
        "begin_line": 168,
        "end_line": 176,
        "comment": "",
        "child_ranges": [
            "(line 169,col 9)-(line 169,col 71)",
            "(line 170,col 9)-(line 170,col 69)",
            "(line 172,col 9)-(line 172,col 40)",
            "(line 173,col 9)-(line 173,col 72)",
            "(line 174,col 9)-(line 174,col 40)",
            "(line 175,col 9)-(line 175,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusDayMidGap_Gaza()",
        "snippet": "    public void test_DateTime_plusDayMidGap_Gaza() {\n        DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-03-31T00:30:00.000+02:00\", dt.toString());\n        \n        DateTime plus1 = dt.plusDays(1);\n        assertEquals(\"2007-04-01T01:30:00.000+03:00\", plus1.toString());\n        DateTime plus2 = dt.plusDays(2);\n        assertEquals(\"2007-04-02T00:30:00.000+03:00\", plus2.toString());\n    }\n",
        "begin_line": 178,
        "end_line": 186,
        "comment": "",
        "child_ranges": [
            "(line 179,col 9)-(line 179,col 72)",
            "(line 180,col 9)-(line 180,col 69)",
            "(line 182,col 9)-(line 182,col 40)",
            "(line 183,col 9)-(line 183,col 72)",
            "(line 184,col 9)-(line 184,col 40)",
            "(line 185,col 9)-(line 185,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_addWrapFieldDay_Gaza()",
        "snippet": "    public void test_DateTime_addWrapFieldDay_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_GAZA);\n        assertEquals(\"2007-04-30T00:00:00.000+03:00\", dt.toString());\n        \n        DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", plus1.toString());\n        DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);\n        assertEquals(\"2007-04-02T00:00:00.000+03:00\", plus2.toString());\n    }\n",
        "begin_line": 188,
        "end_line": 196,
        "comment": "",
        "child_ranges": [
            "(line 189,col 9)-(line 189,col 71)",
            "(line 190,col 9)-(line 190,col 69)",
            "(line 192,col 9)-(line 192,col 63)",
            "(line 193,col 9)-(line 193,col 72)",
            "(line 194,col 9)-(line 194,col 63)",
            "(line 195,col 9)-(line 195,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_withZoneRetainFields_Gaza()",
        "snippet": "    public void test_DateTime_withZoneRetainFields_Gaza() {\n        DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n        \n        DateTime res = dt.withZoneRetainFields(MOCK_GAZA);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", res.toString());\n    }\n",
        "begin_line": 198,
        "end_line": 204,
        "comment": "",
        "child_ranges": [
            "(line 199,col 9)-(line 199,col 77)",
            "(line 200,col 9)-(line 200,col 64)",
            "(line 202,col 9)-(line 202,col 58)",
            "(line 203,col 9)-(line 203,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_MutableDateTime_withZoneRetainFields_Gaza()",
        "snippet": "    public void test_MutableDateTime_withZoneRetainFields_Gaza() {\n        MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n        \n        dt.setZoneRetainFields(MOCK_GAZA);\n        assertEquals(\"2007-04-01T01:00:00.000+03:00\", dt.toString());\n    }\n",
        "begin_line": 206,
        "end_line": 212,
        "comment": "",
        "child_ranges": [
            "(line 207,col 9)-(line 207,col 91)",
            "(line 208,col 9)-(line 208,col 64)",
            "(line 210,col 9)-(line 210,col 42)",
            "(line 211,col 9)-(line 211,col 69)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_LocalDate_new_Gaza()",
        "snippet": "    public void test_LocalDate_new_Gaza() {\n        LocalDate date1 = new LocalDate(CUTOVER_GAZA, MOCK_GAZA);\n        assertEquals(\"2007-04-01\", date1.toString());\n        \n        LocalDate date2 = new LocalDate(CUTOVER_GAZA - 1, MOCK_GAZA);\n        assertEquals(\"2007-03-31\", date2.toString());\n    }\n",
        "begin_line": 214,
        "end_line": 220,
        "comment": "",
        "child_ranges": [
            "(line 215,col 9)-(line 215,col 65)",
            "(line 216,col 9)-(line 216,col 53)",
            "(line 218,col 9)-(line 218,col 69)",
            "(line 219,col 9)-(line 219,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_LocalDate_toDateMidnight_Gaza()",
        "snippet": "    public void test_LocalDate_toDateMidnight_Gaza() {\n        LocalDate date = new LocalDate(2007, 4, 1);\n        try {\n            date.toDateMidnight(MOCK_GAZA);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertEquals(true, ex.getMessage().startsWith(\"Illegal instant due to time zone offset transition\"));\n        }\n    }\n",
        "begin_line": 222,
        "end_line": 230,
        "comment": "",
        "child_ranges": [
            "(line 223,col 9)-(line 223,col 51)",
            "(line 224,col 9)-(line 229,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_new_Gaza()",
        "snippet": "    public void test_DateTime_new_Gaza() {\n        try {\n            new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_GAZA);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n        }\n    }\n",
        "begin_line": 232,
        "end_line": 239,
        "comment": "",
        "child_ranges": [
            "(line 233,col 9)-(line 238,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_newValid_Gaza()",
        "snippet": "    public void test_DateTime_newValid_Gaza() {\n        new DateTime(2007, 3, 31, 19, 0, 0, 0, MOCK_GAZA);\n        new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_GAZA);\n        new DateTime(2007, 3, 31, 21, 0, 0, 0, MOCK_GAZA);\n        new DateTime(2007, 3, 31, 22, 0, 0, 0, MOCK_GAZA);\n        new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_GAZA);\n        new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_GAZA);\n        new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_GAZA);\n        new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_GAZA);\n    }\n",
        "begin_line": 241,
        "end_line": 250,
        "comment": "",
        "child_ranges": [
            "(line 242,col 9)-(line 242,col 58)",
            "(line 243,col 9)-(line 243,col 58)",
            "(line 244,col 9)-(line 244,col 58)",
            "(line 245,col 9)-(line 245,col 58)",
            "(line 246,col 9)-(line 246,col 58)",
            "(line 247,col 9)-(line 247,col 56)",
            "(line 248,col 9)-(line 248,col 56)",
            "(line 249,col 9)-(line 249,col 56)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_parse_Gaza()",
        "snippet": "    public void test_DateTime_parse_Gaza() {\n        try {\n            new DateTime(\"2007-04-01T00:00\", MOCK_GAZA);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n        }\n    }\n",
        "begin_line": 252,
        "end_line": 259,
        "comment": "",
        "child_ranges": [
            "(line 253,col 9)-(line 258,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_MockTurkIsCorrect()",
        "snippet": "    public void test_MockTurkIsCorrect() {\n        DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);\n        assertEquals(\"2007-03-31T23:59:59.999-05:00\", pre.toString());\n        DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", at.toString());\n        DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);\n        assertEquals(\"2007-04-01T01:00:00.001-04:00\", post.toString());\n    }\n",
        "begin_line": 270,
        "end_line": 277,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 271,col 9)-(line 271,col 66)",
            "(line 272,col 9)-(line 272,col 70)",
            "(line 273,col 9)-(line 273,col 60)",
            "(line 274,col 9)-(line 274,col 69)",
            "(line 275,col 9)-(line 275,col 67)",
            "(line 276,col 9)-(line 276,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Turk()",
        "snippet": "    public void test_getOffsetFromLocal_Turk() {\n        doTest_getOffsetFromLocal_Turk(-1, 23, 0, \"2007-03-31T23:00:00.000-05:00\");\n        doTest_getOffsetFromLocal_Turk(-1, 23, 30, \"2007-03-31T23:30:00.000-05:00\");\n        doTest_getOffsetFromLocal_Turk(0, 0, 0, \"2007-04-01T01:00:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 0, 30, \"2007-04-01T01:30:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 1, 0, \"2007-04-01T01:00:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 1, 30, \"2007-04-01T01:30:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 2, 0, \"2007-04-01T02:00:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 3, 0, \"2007-04-01T03:00:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 4, 0, \"2007-04-01T04:00:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 5, 0, \"2007-04-01T05:00:00.000-04:00\");\n        doTest_getOffsetFromLocal_Turk(0, 6, 0, \"2007-04-01T06:00:00.000-04:00\");\n    }\n",
        "begin_line": 279,
        "end_line": 291,
        "comment": "",
        "child_ranges": [
            "(line 280,col 9)-(line 280,col 83)",
            "(line 281,col 9)-(line 281,col 84)",
            "(line 282,col 9)-(line 282,col 81)",
            "(line 283,col 9)-(line 283,col 82)",
            "(line 284,col 9)-(line 284,col 81)",
            "(line 285,col 9)-(line 285,col 82)",
            "(line 286,col 9)-(line 286,col 81)",
            "(line 287,col 9)-(line 287,col 81)",
            "(line 288,col 9)-(line 288,col 81)",
            "(line 289,col 9)-(line 289,col 81)",
            "(line 290,col 9)-(line 290,col 81)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal_Turk(int, int, int, java.lang.String)",
        "snippet": "    private void doTest_getOffsetFromLocal_Turk(int days, int hour, int min, String expected) {\n        DateTime dt = new DateTime(2007, 4, 1, hour, min, 0, 0, DateTimeZone.UTC).plusDays(days);\n        int offset = MOCK_TURK.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, MOCK_TURK);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n",
        "begin_line": 293,
        "end_line": 298,
        "comment": "",
        "child_ranges": [
            "(line 294,col 9)-(line 294,col 97)",
            "(line 295,col 9)-(line 295,col 66)",
            "(line 296,col 9)-(line 296,col 72)",
            "(line 297,col 9)-(line 297,col 63)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_Turk()",
        "snippet": "    public void test_DateTime_roundFloor_Turk() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 300,
        "end_line": 305,
        "comment": "",
        "child_ranges": [
            "(line 301,col 9)-(line 301,col 70)",
            "(line 302,col 9)-(line 302,col 69)",
            "(line 303,col 9)-(line 303,col 60)",
            "(line 304,col 9)-(line 304,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloorNotDST_Turk()",
        "snippet": "    public void test_DateTime_roundFloorNotDST_Turk() {\n        DateTime dt = new DateTime(2007, 4, 2, 8, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-02T08:00:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n        assertEquals(\"2007-04-02T00:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 307,
        "end_line": 312,
        "comment": "",
        "child_ranges": [
            "(line 308,col 9)-(line 308,col 70)",
            "(line 309,col 9)-(line 309,col 69)",
            "(line 310,col 9)-(line 310,col 60)",
            "(line 311,col 9)-(line 311,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_Turk()",
        "snippet": "    public void test_DateTime_roundCeiling_Turk() {\n        DateTime dt = new DateTime(2007, 3, 31, 20, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-03-31T20:00:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 314,
        "end_line": 319,
        "comment": "",
        "child_ranges": [
            "(line 315,col 9)-(line 315,col 72)",
            "(line 316,col 9)-(line 316,col 69)",
            "(line 317,col 9)-(line 317,col 62)",
            "(line 318,col 9)-(line 318,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourZero_Turk()",
        "snippet": "    public void test_DateTime_setHourZero_Turk() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n        try {\n            dt.hourOfDay().setCopy(0);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 321,
        "end_line": 330,
        "comment": "",
        "child_ranges": [
            "(line 322,col 9)-(line 322,col 70)",
            "(line 323,col 9)-(line 323,col 69)",
            "(line 324,col 9)-(line 329,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_withHourZero_Turk()",
        "snippet": "    public void test_DateTime_withHourZero_Turk() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n        try {\n            dt.withHourOfDay(0);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 332,
        "end_line": 341,
        "comment": "",
        "child_ranges": [
            "(line 333,col 9)-(line 333,col 70)",
            "(line 334,col 9)-(line 334,col 69)",
            "(line 335,col 9)-(line 340,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_withDay_Turk()",
        "snippet": "    public void test_DateTime_withDay_Turk() {\n        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-02T00:00:00.000-04:00\", dt.toString());\n        DateTime res = dt.withDayOfMonth(1);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", res.toString());\n    }\n",
        "begin_line": 343,
        "end_line": 348,
        "comment": "",
        "child_ranges": [
            "(line 344,col 9)-(line 344,col 70)",
            "(line 345,col 9)-(line 345,col 69)",
            "(line 346,col 9)-(line 346,col 44)",
            "(line 347,col 9)-(line 347,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_minusHour_Turk()",
        "snippet": "    public void test_DateTime_minusHour_Turk() {\n        DateTime dt = new DateTime(2007, 4, 1, 8, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-01T08:00:00.000-04:00\", dt.toString());\n        \n        DateTime minus7 = dt.minusHours(7);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", minus7.toString());\n        DateTime minus8 = dt.minusHours(8);\n        assertEquals(\"2007-03-31T23:00:00.000-05:00\", minus8.toString());\n        DateTime minus9 = dt.minusHours(9);\n        assertEquals(\"2007-03-31T22:00:00.000-05:00\", minus9.toString());\n    }\n",
        "begin_line": 350,
        "end_line": 360,
        "comment": "",
        "child_ranges": [
            "(line 351,col 9)-(line 351,col 70)",
            "(line 352,col 9)-(line 352,col 69)",
            "(line 354,col 9)-(line 354,col 43)",
            "(line 355,col 9)-(line 355,col 73)",
            "(line 356,col 9)-(line 356,col 43)",
            "(line 357,col 9)-(line 357,col 73)",
            "(line 358,col 9)-(line 358,col 43)",
            "(line 359,col 9)-(line 359,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusHour_Turk()",
        "snippet": "    public void test_DateTime_plusHour_Turk() {\n        DateTime dt = new DateTime(2007, 3, 31, 16, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-03-31T16:00:00.000-05:00\", dt.toString());\n        \n        DateTime plus7 = dt.plusHours(7);\n        assertEquals(\"2007-03-31T23:00:00.000-05:00\", plus7.toString());\n        DateTime plus8 = dt.plusHours(8);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", plus8.toString());\n        DateTime plus9 = dt.plusHours(9);\n        assertEquals(\"2007-04-01T02:00:00.000-04:00\", plus9.toString());\n    }\n",
        "begin_line": 362,
        "end_line": 372,
        "comment": "",
        "child_ranges": [
            "(line 363,col 9)-(line 363,col 72)",
            "(line 364,col 9)-(line 364,col 69)",
            "(line 366,col 9)-(line 366,col 41)",
            "(line 367,col 9)-(line 367,col 72)",
            "(line 368,col 9)-(line 368,col 41)",
            "(line 369,col 9)-(line 369,col 72)",
            "(line 370,col 9)-(line 370,col 41)",
            "(line 371,col 9)-(line 371,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_minusDay_Turk()",
        "snippet": "    public void test_DateTime_minusDay_Turk() {\n        DateTime dt = new DateTime(2007, 4, 2, 0, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-02T00:00:00.000-04:00\", dt.toString());\n        \n        DateTime minus1 = dt.minusDays(1);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", minus1.toString());\n        DateTime minus2 = dt.minusDays(2);\n        assertEquals(\"2007-03-31T00:00:00.000-05:00\", minus2.toString());\n    }\n",
        "begin_line": 374,
        "end_line": 382,
        "comment": "",
        "child_ranges": [
            "(line 375,col 9)-(line 375,col 70)",
            "(line 376,col 9)-(line 376,col 69)",
            "(line 378,col 9)-(line 378,col 42)",
            "(line 379,col 9)-(line 379,col 73)",
            "(line 380,col 9)-(line 380,col 42)",
            "(line 381,col 9)-(line 381,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusDay_Turk()",
        "snippet": "    public void test_DateTime_plusDay_Turk() {\n        DateTime dt = new DateTime(2007, 3, 31, 0, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-03-31T00:00:00.000-05:00\", dt.toString());\n        \n        DateTime plus1 = dt.plusDays(1);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", plus1.toString());\n        DateTime plus2 = dt.plusDays(2);\n        assertEquals(\"2007-04-02T00:00:00.000-04:00\", plus2.toString());\n    }\n",
        "begin_line": 384,
        "end_line": 392,
        "comment": "",
        "child_ranges": [
            "(line 385,col 9)-(line 385,col 71)",
            "(line 386,col 9)-(line 386,col 69)",
            "(line 388,col 9)-(line 388,col 40)",
            "(line 389,col 9)-(line 389,col 72)",
            "(line 390,col 9)-(line 390,col 40)",
            "(line 391,col 9)-(line 391,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusDayMidGap_Turk()",
        "snippet": "    public void test_DateTime_plusDayMidGap_Turk() {\n        DateTime dt = new DateTime(2007, 3, 31, 0, 30, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-03-31T00:30:00.000-05:00\", dt.toString());\n        \n        DateTime plus1 = dt.plusDays(1);\n        assertEquals(\"2007-04-01T01:30:00.000-04:00\", plus1.toString());\n        DateTime plus2 = dt.plusDays(2);\n        assertEquals(\"2007-04-02T00:30:00.000-04:00\", plus2.toString());\n    }\n",
        "begin_line": 394,
        "end_line": 402,
        "comment": "",
        "child_ranges": [
            "(line 395,col 9)-(line 395,col 72)",
            "(line 396,col 9)-(line 396,col 69)",
            "(line 398,col 9)-(line 398,col 40)",
            "(line 399,col 9)-(line 399,col 72)",
            "(line 400,col 9)-(line 400,col 40)",
            "(line 401,col 9)-(line 401,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_addWrapFieldDay_Turk()",
        "snippet": "    public void test_DateTime_addWrapFieldDay_Turk() {\n        DateTime dt = new DateTime(2007, 4, 30, 0, 0, 0, 0, MOCK_TURK);\n        assertEquals(\"2007-04-30T00:00:00.000-04:00\", dt.toString());\n        \n        DateTime plus1 = dt.dayOfMonth().addWrapFieldToCopy(1);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", plus1.toString());\n        DateTime plus2 = dt.dayOfMonth().addWrapFieldToCopy(2);\n        assertEquals(\"2007-04-02T00:00:00.000-04:00\", plus2.toString());\n    }\n",
        "begin_line": 404,
        "end_line": 412,
        "comment": "",
        "child_ranges": [
            "(line 405,col 9)-(line 405,col 71)",
            "(line 406,col 9)-(line 406,col 69)",
            "(line 408,col 9)-(line 408,col 63)",
            "(line 409,col 9)-(line 409,col 72)",
            "(line 410,col 9)-(line 410,col 63)",
            "(line 411,col 9)-(line 411,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_withZoneRetainFields_Turk()",
        "snippet": "    public void test_DateTime_withZoneRetainFields_Turk() {\n        DateTime dt = new DateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n        \n        DateTime res = dt.withZoneRetainFields(MOCK_TURK);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", res.toString());\n    }\n",
        "begin_line": 414,
        "end_line": 420,
        "comment": "",
        "child_ranges": [
            "(line 415,col 9)-(line 415,col 77)",
            "(line 416,col 9)-(line 416,col 64)",
            "(line 418,col 9)-(line 418,col 58)",
            "(line 419,col 9)-(line 419,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_MutableDateTime_setZoneRetainFields_Turk()",
        "snippet": "    public void test_MutableDateTime_setZoneRetainFields_Turk() {\n        MutableDateTime dt = new MutableDateTime(2007, 4, 1, 0, 0, 0, 0, DateTimeZone.UTC);\n        assertEquals(\"2007-04-01T00:00:00.000Z\", dt.toString());\n        \n        dt.setZoneRetainFields(MOCK_TURK);\n        assertEquals(\"2007-04-01T01:00:00.000-04:00\", dt.toString());\n    }\n",
        "begin_line": 422,
        "end_line": 428,
        "comment": "",
        "child_ranges": [
            "(line 423,col 9)-(line 423,col 91)",
            "(line 424,col 9)-(line 424,col 64)",
            "(line 426,col 9)-(line 426,col 42)",
            "(line 427,col 9)-(line 427,col 69)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_LocalDate_new_Turk()",
        "snippet": "    public void test_LocalDate_new_Turk() {\n        LocalDate date1 = new LocalDate(CUTOVER_TURK, MOCK_TURK);\n        assertEquals(\"2007-04-01\", date1.toString());\n        \n        LocalDate date2 = new LocalDate(CUTOVER_TURK - 1, MOCK_TURK);\n        assertEquals(\"2007-03-31\", date2.toString());\n    }\n",
        "begin_line": 430,
        "end_line": 436,
        "comment": "",
        "child_ranges": [
            "(line 431,col 9)-(line 431,col 65)",
            "(line 432,col 9)-(line 432,col 53)",
            "(line 434,col 9)-(line 434,col 69)",
            "(line 435,col 9)-(line 435,col 53)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_LocalDate_toDateMidnight_Turk()",
        "snippet": "    public void test_LocalDate_toDateMidnight_Turk() {\n        LocalDate date = new LocalDate(2007, 4, 1);\n        try {\n            date.toDateMidnight(MOCK_TURK);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertEquals(true, ex.getMessage().startsWith(\"Illegal instant due to time zone offset transition\"));\n        }\n    }\n",
        "begin_line": 438,
        "end_line": 446,
        "comment": "",
        "child_ranges": [
            "(line 439,col 9)-(line 439,col 51)",
            "(line 440,col 9)-(line 445,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_new_Turk()",
        "snippet": "    public void test_DateTime_new_Turk() {\n        try {\n            new DateTime(2007, 4, 1, 0, 0, 0, 0, MOCK_TURK);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n        }\n    }\n",
        "begin_line": 448,
        "end_line": 455,
        "comment": "",
        "child_ranges": [
            "(line 449,col 9)-(line 454,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_newValid_Turk()",
        "snippet": "    public void test_DateTime_newValid_Turk() {\n        new DateTime(2007, 3, 31, 23, 0, 0, 0, MOCK_TURK);\n        new DateTime(2007, 4, 1, 1, 0, 0, 0, MOCK_TURK);\n        new DateTime(2007, 4, 1, 2, 0, 0, 0, MOCK_TURK);\n        new DateTime(2007, 4, 1, 3, 0, 0, 0, MOCK_TURK);\n        new DateTime(2007, 4, 1, 4, 0, 0, 0, MOCK_TURK);\n        new DateTime(2007, 4, 1, 5, 0, 0, 0, MOCK_TURK);\n        new DateTime(2007, 4, 1, 6, 0, 0, 0, MOCK_TURK);\n    }\n",
        "begin_line": 457,
        "end_line": 465,
        "comment": "",
        "child_ranges": [
            "(line 458,col 9)-(line 458,col 58)",
            "(line 459,col 9)-(line 459,col 56)",
            "(line 460,col 9)-(line 460,col 56)",
            "(line 461,col 9)-(line 461,col 56)",
            "(line 462,col 9)-(line 462,col 56)",
            "(line 463,col 9)-(line 463,col 56)",
            "(line 464,col 9)-(line 464,col 56)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_parse_Turk()",
        "snippet": "    public void test_DateTime_parse_Turk() {\n        try {\n            new DateTime(\"2007-04-01T00:00\", MOCK_TURK);\n            fail();\n        } catch (IllegalArgumentException ex) {\n            assertEquals(true, ex.getMessage().indexOf(\"Illegal instant due to time zone offset transition\") >= 0);\n        }\n    }\n",
        "begin_line": 467,
        "end_line": 474,
        "comment": "",
        "child_ranges": [
            "(line 468,col 9)-(line 473,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_NewYorkIsCorrect_Spring()",
        "snippet": "    public void test_NewYorkIsCorrect_Spring() {\n        DateTime pre = new DateTime(CUTOVER_NEW_YORK_SPRING - 1L, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T01:59:59.999-05:00\", pre.toString());\n        DateTime at = new DateTime(CUTOVER_NEW_YORK_SPRING, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:00:00.000-04:00\", at.toString());\n        DateTime post = new DateTime(CUTOVER_NEW_YORK_SPRING + 1L, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:00:00.001-04:00\", post.toString());\n    }\n",
        "begin_line": 488,
        "end_line": 495,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 489,col 9)-(line 489,col 81)",
            "(line 490,col 9)-(line 490,col 70)",
            "(line 491,col 9)-(line 491,col 75)",
            "(line 492,col 9)-(line 492,col 69)",
            "(line 493,col 9)-(line 493,col 82)",
            "(line 494,col 9)-(line 494,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_NewYork_Spring()",
        "snippet": "    public void test_getOffsetFromLocal_NewYork_Spring() {\n        doTest_getOffsetFromLocal(3, 11, 1, 0, \"2007-03-11T01:00:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 1,30, \"2007-03-11T01:30:00.000-05:00\", ZONE_NEW_YORK);\n        \n        doTest_getOffsetFromLocal(3, 11, 2, 0, \"2007-03-11T03:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 2,30, \"2007-03-11T03:30:00.000-04:00\", ZONE_NEW_YORK);\n        \n        doTest_getOffsetFromLocal(3, 11, 3, 0, \"2007-03-11T03:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 3,30, \"2007-03-11T03:30:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 4, 0, \"2007-03-11T04:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 5, 0, \"2007-03-11T05:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 6, 0, \"2007-03-11T06:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 7, 0, \"2007-03-11T07:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(3, 11, 8, 0, \"2007-03-11T08:00:00.000-04:00\", ZONE_NEW_YORK);\n    }\n",
        "begin_line": 497,
        "end_line": 511,
        "comment": "",
        "child_ranges": [
            "(line 498,col 9)-(line 498,col 95)",
            "(line 499,col 9)-(line 499,col 95)",
            "(line 501,col 9)-(line 501,col 95)",
            "(line 502,col 9)-(line 502,col 95)",
            "(line 504,col 9)-(line 504,col 95)",
            "(line 505,col 9)-(line 505,col 95)",
            "(line 506,col 9)-(line 506,col 95)",
            "(line 507,col 9)-(line 507,col 95)",
            "(line 508,col 9)-(line 508,col 95)",
            "(line 509,col 9)-(line 509,col 95)",
            "(line 510,col 9)-(line 510,col 95)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourAcross_NewYork_Spring()",
        "snippet": "    public void test_DateTime_setHourAcross_NewYork_Spring() {\n        DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T00:00:00.000-05:00\", dt.toString());\n        DateTime res = dt.hourOfDay().setCopy(4);\n        assertEquals(\"2007-03-11T04:00:00.000-04:00\", res.toString());\n    }\n",
        "begin_line": 513,
        "end_line": 518,
        "comment": "",
        "child_ranges": [
            "(line 514,col 9)-(line 514,col 75)",
            "(line 515,col 9)-(line 515,col 69)",
            "(line 516,col 9)-(line 516,col 49)",
            "(line 517,col 9)-(line 517,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourForward_NewYork_Spring()",
        "snippet": "    public void test_DateTime_setHourForward_NewYork_Spring() {\n        DateTime dt = new DateTime(2007, 3, 11, 0, 0, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T00:00:00.000-05:00\", dt.toString());\n        \n        try {\n            dt.hourOfDay().setCopy(2);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 520,
        "end_line": 530,
        "comment": "",
        "child_ranges": [
            "(line 521,col 9)-(line 521,col 75)",
            "(line 522,col 9)-(line 522,col 69)",
            "(line 524,col 9)-(line 529,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourBack_NewYork_Spring()",
        "snippet": "    public void test_DateTime_setHourBack_NewYork_Spring() {\n        DateTime dt = new DateTime(2007, 3, 11, 8, 0, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T08:00:00.000-04:00\", dt.toString());\n        \n        try {\n            dt.hourOfDay().setCopy(2);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 532,
        "end_line": 542,
        "comment": "",
        "child_ranges": [
            "(line 533,col 9)-(line 533,col 75)",
            "(line 534,col 9)-(line 534,col 69)",
            "(line 536,col 9)-(line 541,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_day_NewYork_Spring_preCutover()",
        "snippet": "    public void test_DateTime_roundFloor_day_NewYork_Spring_preCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n        assertEquals(\"2007-03-11T00:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 545,
        "end_line": 550,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 546,col 9)-(line 546,col 76)",
            "(line 547,col 9)-(line 547,col 69)",
            "(line 548,col 9)-(line 548,col 60)",
            "(line 549,col 9)-(line 549,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_day_NewYork_Spring_postCutover()",
        "snippet": "    public void test_DateTime_roundFloor_day_NewYork_Spring_postCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n        assertEquals(\"2007-03-11T00:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 552,
        "end_line": 557,
        "comment": "",
        "child_ranges": [
            "(line 553,col 9)-(line 553,col 76)",
            "(line 554,col 9)-(line 554,col 69)",
            "(line 555,col 9)-(line 555,col 60)",
            "(line 556,col 9)-(line 556,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_hour_NewYork_Spring_preCutover()",
        "snippet": "    public void test_DateTime_roundFloor_hour_NewYork_Spring_preCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n        assertEquals(\"2007-03-11T01:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 559,
        "end_line": 564,
        "comment": "",
        "child_ranges": [
            "(line 560,col 9)-(line 560,col 76)",
            "(line 561,col 9)-(line 561,col 69)",
            "(line 562,col 9)-(line 562,col 59)",
            "(line 563,col 9)-(line 563,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_hour_NewYork_Spring_postCutover()",
        "snippet": "    public void test_DateTime_roundFloor_hour_NewYork_Spring_postCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n        assertEquals(\"2007-03-11T03:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 566,
        "end_line": 571,
        "comment": "",
        "child_ranges": [
            "(line 567,col 9)-(line 567,col 76)",
            "(line 568,col 9)-(line 568,col 69)",
            "(line 569,col 9)-(line 569,col 59)",
            "(line 570,col 9)-(line 570,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_minute_NewYork_Spring_preCutover()",
        "snippet": "    public void test_DateTime_roundFloor_minute_NewYork_Spring_preCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T01:30:40.000-05:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n        assertEquals(\"2007-03-11T01:30:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 573,
        "end_line": 578,
        "comment": "",
        "child_ranges": [
            "(line 574,col 9)-(line 574,col 77)",
            "(line 575,col 9)-(line 575,col 69)",
            "(line 576,col 9)-(line 576,col 62)",
            "(line 577,col 9)-(line 577,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_minute_NewYork_Spring_postCutover()",
        "snippet": "    public void test_DateTime_roundFloor_minute_NewYork_Spring_postCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:30:40.000-04:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n        assertEquals(\"2007-03-11T03:30:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 580,
        "end_line": 585,
        "comment": "",
        "child_ranges": [
            "(line 581,col 9)-(line 581,col 77)",
            "(line 582,col 9)-(line 582,col 69)",
            "(line 583,col 9)-(line 583,col 62)",
            "(line 584,col 9)-(line 584,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_day_NewYork_Spring_preCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_day_NewYork_Spring_preCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n        assertEquals(\"2007-03-12T00:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 588,
        "end_line": 593,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 589,col 9)-(line 589,col 76)",
            "(line 590,col 9)-(line 590,col 69)",
            "(line 591,col 9)-(line 591,col 62)",
            "(line 592,col 9)-(line 592,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_day_NewYork_Spring_postCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_day_NewYork_Spring_postCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n        assertEquals(\"2007-03-12T00:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 595,
        "end_line": 600,
        "comment": "",
        "child_ranges": [
            "(line 596,col 9)-(line 596,col 76)",
            "(line 597,col 9)-(line 597,col 69)",
            "(line 598,col 9)-(line 598,col 62)",
            "(line 599,col 9)-(line 599,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_hour_NewYork_Spring_preCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n        assertEquals(\"2007-03-11T03:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 602,
        "end_line": 607,
        "comment": "",
        "child_ranges": [
            "(line 603,col 9)-(line 603,col 76)",
            "(line 604,col 9)-(line 604,col 69)",
            "(line 605,col 9)-(line 605,col 61)",
            "(line 606,col 9)-(line 606,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_hour_NewYork_Spring_postCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n        assertEquals(\"2007-03-11T04:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 609,
        "end_line": 614,
        "comment": "",
        "child_ranges": [
            "(line 610,col 9)-(line 610,col 76)",
            "(line 611,col 9)-(line 611,col 69)",
            "(line 612,col 9)-(line 612,col 61)",
            "(line 613,col 9)-(line 613,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_minute_NewYork_Spring_preCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 1, 30, 40, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T01:30:40.000-05:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n        assertEquals(\"2007-03-11T01:31:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 616,
        "end_line": 621,
        "comment": "",
        "child_ranges": [
            "(line 617,col 9)-(line 617,col 77)",
            "(line 618,col 9)-(line 618,col 69)",
            "(line 619,col 9)-(line 619,col 64)",
            "(line 620,col 9)-(line 620,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_minute_NewYork_Spring_postCutover() {\n        DateTime dt = new DateTime(2007, 3, 11, 3, 30, 40, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-03-11T03:30:40.000-04:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n        assertEquals(\"2007-03-11T03:31:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 623,
        "end_line": 628,
        "comment": "",
        "child_ranges": [
            "(line 624,col 9)-(line 624,col 77)",
            "(line 625,col 9)-(line 625,col 69)",
            "(line 626,col 9)-(line 626,col 64)",
            "(line 627,col 9)-(line 627,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_NewYorkIsCorrect_Autumn()",
        "snippet": "    public void test_NewYorkIsCorrect_Autumn() {\n        DateTime pre = new DateTime(CUTOVER_NEW_YORK_AUTUMN - 1L, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:59:59.999-04:00\", pre.toString());\n        DateTime at = new DateTime(CUTOVER_NEW_YORK_AUTUMN, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:00:00.000-05:00\", at.toString());\n        DateTime post = new DateTime(CUTOVER_NEW_YORK_AUTUMN + 1L, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:00:00.001-05:00\", post.toString());\n    }\n",
        "begin_line": 635,
        "end_line": 642,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 636,col 9)-(line 636,col 81)",
            "(line 637,col 9)-(line 637,col 70)",
            "(line 638,col 9)-(line 638,col 75)",
            "(line 639,col 9)-(line 639,col 69)",
            "(line 640,col 9)-(line 640,col 82)",
            "(line 641,col 9)-(line 641,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_NewYork_Autumn()",
        "snippet": "    public void test_getOffsetFromLocal_NewYork_Autumn() {\n        doTest_getOffsetFromLocal(11, 4, 0, 0, \"2007-11-04T00:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 0,30, \"2007-11-04T00:30:00.000-04:00\", ZONE_NEW_YORK);\n        \n        doTest_getOffsetFromLocal(11, 4, 1, 0, \"2007-11-04T01:00:00.000-04:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 1,30, \"2007-11-04T01:30:00.000-04:00\", ZONE_NEW_YORK);\n        \n        doTest_getOffsetFromLocal(11, 4, 2, 0, \"2007-11-04T02:00:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 2,30, \"2007-11-04T02:30:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 3, 0, \"2007-11-04T03:00:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 3,30, \"2007-11-04T03:30:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 4, 0, \"2007-11-04T04:00:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 5, 0, \"2007-11-04T05:00:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 6, 0, \"2007-11-04T06:00:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 7, 0, \"2007-11-04T07:00:00.000-05:00\", ZONE_NEW_YORK);\n        doTest_getOffsetFromLocal(11, 4, 8, 0, \"2007-11-04T08:00:00.000-05:00\", ZONE_NEW_YORK);\n    }\n",
        "begin_line": 644,
        "end_line": 660,
        "comment": "",
        "child_ranges": [
            "(line 645,col 9)-(line 645,col 95)",
            "(line 646,col 9)-(line 646,col 95)",
            "(line 648,col 9)-(line 648,col 95)",
            "(line 649,col 9)-(line 649,col 95)",
            "(line 651,col 9)-(line 651,col 95)",
            "(line 652,col 9)-(line 652,col 95)",
            "(line 653,col 9)-(line 653,col 95)",
            "(line 654,col 9)-(line 654,col 95)",
            "(line 655,col 9)-(line 655,col 95)",
            "(line 656,col 9)-(line 656,col 95)",
            "(line 657,col 9)-(line 657,col 95)",
            "(line 658,col 9)-(line 658,col 95)",
            "(line 659,col 9)-(line 659,col 95)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_constructor_NewYork_Autumn()",
        "snippet": "    public void test_DateTime_constructor_NewYork_Autumn() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n    }\n",
        "begin_line": 662,
        "end_line": 665,
        "comment": "",
        "child_ranges": [
            "(line 663,col 9)-(line 663,col 70)",
            "(line 664,col 9)-(line 664,col 69)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusHour_NewYork_Autumn()",
        "snippet": "    public void test_DateTime_plusHour_NewYork_Autumn() {\n        DateTime dt = new DateTime(2007, 11, 3, 18, 0, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-03T18:00:00.000-04:00\", dt.toString());\n        \n        DateTime plus6 = dt.plusHours(6);\n        assertEquals(\"2007-11-04T00:00:00.000-04:00\", plus6.toString());\n        DateTime plus7 = dt.plusHours(7);\n        assertEquals(\"2007-11-04T01:00:00.000-04:00\", plus7.toString());\n        DateTime plus8 = dt.plusHours(8);\n        assertEquals(\"2007-11-04T01:00:00.000-05:00\", plus8.toString());\n        DateTime plus9 = dt.plusHours(9);\n        assertEquals(\"2007-11-04T02:00:00.000-05:00\", plus9.toString());\n    }\n",
        "begin_line": 667,
        "end_line": 679,
        "comment": "",
        "child_ranges": [
            "(line 668,col 9)-(line 668,col 76)",
            "(line 669,col 9)-(line 669,col 69)",
            "(line 671,col 9)-(line 671,col 41)",
            "(line 672,col 9)-(line 672,col 72)",
            "(line 673,col 9)-(line 673,col 41)",
            "(line 674,col 9)-(line 674,col 72)",
            "(line 675,col 9)-(line 675,col 41)",
            "(line 676,col 9)-(line 676,col 72)",
            "(line 677,col 9)-(line 677,col 41)",
            "(line 678,col 9)-(line 678,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_minusHour_NewYork_Autumn()",
        "snippet": "    public void test_DateTime_minusHour_NewYork_Autumn() {\n        DateTime dt = new DateTime(2007, 11, 4, 8, 0, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T08:00:00.000-05:00\", dt.toString());\n        \n        DateTime minus6 = dt.minusHours(6);\n        assertEquals(\"2007-11-04T02:00:00.000-05:00\", minus6.toString());\n        DateTime minus7 = dt.minusHours(7);\n        assertEquals(\"2007-11-04T01:00:00.000-05:00\", minus7.toString());\n        DateTime minus8 = dt.minusHours(8);\n        assertEquals(\"2007-11-04T01:00:00.000-04:00\", minus8.toString());\n        DateTime minus9 = dt.minusHours(9);\n        assertEquals(\"2007-11-04T00:00:00.000-04:00\", minus9.toString());\n    }\n",
        "begin_line": 681,
        "end_line": 693,
        "comment": "",
        "child_ranges": [
            "(line 682,col 9)-(line 682,col 75)",
            "(line 683,col 9)-(line 683,col 69)",
            "(line 685,col 9)-(line 685,col 43)",
            "(line 686,col 9)-(line 686,col 73)",
            "(line 687,col 9)-(line 687,col 43)",
            "(line 688,col 9)-(line 688,col 73)",
            "(line 689,col 9)-(line 689,col 43)",
            "(line 690,col 9)-(line 690,col 73)",
            "(line 691,col 9)-(line 691,col 43)",
            "(line 692,col 9)-(line 692,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_day_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundFloor_day_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n        assertEquals(\"2007-11-04T00:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 696,
        "end_line": 701,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 697,col 9)-(line 697,col 76)",
            "(line 698,col 9)-(line 698,col 69)",
            "(line 699,col 9)-(line 699,col 60)",
            "(line 700,col 9)-(line 700,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_day_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundFloor_day_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundFloorCopy();\n        assertEquals(\"2007-11-04T00:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 703,
        "end_line": 708,
        "comment": "",
        "child_ranges": [
            "(line 704,col 9)-(line 704,col 89)",
            "(line 705,col 9)-(line 705,col 69)",
            "(line 706,col 9)-(line 706,col 60)",
            "(line 707,col 9)-(line 707,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n        assertEquals(\"2007-11-04T01:00:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 710,
        "end_line": 715,
        "comment": "",
        "child_ranges": [
            "(line 711,col 9)-(line 711,col 76)",
            "(line 712,col 9)-(line 712,col 69)",
            "(line 713,col 9)-(line 713,col 59)",
            "(line 714,col 9)-(line 714,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundFloor_hourOfDay_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundFloorCopy();\n        assertEquals(\"2007-11-04T01:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 717,
        "end_line": 722,
        "comment": "",
        "child_ranges": [
            "(line 718,col 9)-(line 718,col 89)",
            "(line 719,col 9)-(line 719,col 69)",
            "(line 720,col 9)-(line 720,col 59)",
            "(line 721,col 9)-(line 721,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:40.000-04:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n        assertEquals(\"2007-11-04T01:30:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 724,
        "end_line": 729,
        "comment": "",
        "child_ranges": [
            "(line 725,col 9)-(line 725,col 77)",
            "(line 726,col 9)-(line 726,col 69)",
            "(line 727,col 9)-(line 727,col 62)",
            "(line 728,col 9)-(line 728,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundFloor_minuteOfHour_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:40.000-05:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundFloorCopy();\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 731,
        "end_line": 736,
        "comment": "",
        "child_ranges": [
            "(line 732,col 9)-(line 732,col 90)",
            "(line 733,col 9)-(line 733,col 69)",
            "(line 734,col 9)-(line 734,col 62)",
            "(line 735,col 9)-(line 735,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:40.500-04:00\", dt.toString());\n        DateTime rounded = dt.secondOfMinute().roundFloorCopy();\n        assertEquals(\"2007-11-04T01:30:40.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 738,
        "end_line": 743,
        "comment": "",
        "child_ranges": [
            "(line 739,col 9)-(line 739,col 79)",
            "(line 740,col 9)-(line 740,col 69)",
            "(line 741,col 9)-(line 741,col 64)",
            "(line 742,col 9)-(line 742,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundFloor_secondOfMinute_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:40.500-05:00\", dt.toString());\n        DateTime rounded = dt.secondOfMinute().roundFloorCopy();\n        assertEquals(\"2007-11-04T01:30:40.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 745,
        "end_line": 750,
        "comment": "",
        "child_ranges": [
            "(line 746,col 9)-(line 746,col 92)",
            "(line 747,col 9)-(line 747,col 69)",
            "(line 748,col 9)-(line 748,col 64)",
            "(line 749,col 9)-(line 749,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_day_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n        assertEquals(\"2007-11-05T00:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 753,
        "end_line": 758,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 754,col 9)-(line 754,col 76)",
            "(line 755,col 9)-(line 755,col 69)",
            "(line 756,col 9)-(line 756,col 62)",
            "(line 757,col 9)-(line 757,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_day_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.dayOfMonth().roundCeilingCopy();\n        assertEquals(\"2007-11-05T00:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 760,
        "end_line": 765,
        "comment": "",
        "child_ranges": [
            "(line 761,col 9)-(line 761,col 89)",
            "(line 762,col 9)-(line 762,col 69)",
            "(line 763,col 9)-(line 763,col 62)",
            "(line 764,col 9)-(line 764,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.000-04:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n        assertEquals(\"2007-11-04T01:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 767,
        "end_line": 772,
        "comment": "",
        "child_ranges": [
            "(line 768,col 9)-(line 768,col 76)",
            "(line 769,col 9)-(line 769,col 69)",
            "(line 770,col 9)-(line 770,col 61)",
            "(line 771,col 9)-(line 771,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_hourOfDay_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 0, 0, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", dt.toString());\n        DateTime rounded = dt.hourOfDay().roundCeilingCopy();\n        assertEquals(\"2007-11-04T02:00:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 774,
        "end_line": 779,
        "comment": "",
        "child_ranges": [
            "(line 775,col 9)-(line 775,col 89)",
            "(line 776,col 9)-(line 776,col 69)",
            "(line 777,col 9)-(line 777,col 61)",
            "(line 778,col 9)-(line 778,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:40.000-04:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n        assertEquals(\"2007-11-04T01:31:00.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 781,
        "end_line": 786,
        "comment": "",
        "child_ranges": [
            "(line 782,col 9)-(line 782,col 77)",
            "(line 783,col 9)-(line 783,col 69)",
            "(line 784,col 9)-(line 784,col 64)",
            "(line 785,col 9)-(line 785,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_minuteOfHour_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 0, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:40.000-05:00\", dt.toString());\n        DateTime rounded = dt.minuteOfHour().roundCeilingCopy();\n        assertEquals(\"2007-11-04T01:31:00.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 788,
        "end_line": 793,
        "comment": "",
        "child_ranges": [
            "(line 789,col 9)-(line 789,col 90)",
            "(line 790,col 9)-(line 790,col 69)",
            "(line 791,col 9)-(line 791,col 64)",
            "(line 792,col 9)-(line 792,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_preCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:40.500-04:00\", dt.toString());\n        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();\n        assertEquals(\"2007-11-04T01:30:41.000-04:00\", rounded.toString());\n    }\n",
        "begin_line": 795,
        "end_line": 800,
        "comment": "",
        "child_ranges": [
            "(line 796,col 9)-(line 796,col 79)",
            "(line 797,col 9)-(line 797,col 69)",
            "(line 798,col 9)-(line 798,col 66)",
            "(line 799,col 9)-(line 799,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover()",
        "snippet": "    public void test_DateTime_roundCeiling_secondOfMinute_NewYork_Autumn_postCutover() {\n        DateTime dt = new DateTime(2007, 11, 4, 1, 30, 40, 500, ZONE_NEW_YORK).plusHours(1);\n        assertEquals(\"2007-11-04T01:30:40.500-05:00\", dt.toString());\n        DateTime rounded = dt.secondOfMinute().roundCeilingCopy();\n        assertEquals(\"2007-11-04T01:30:41.000-05:00\", rounded.toString());\n    }\n",
        "begin_line": 802,
        "end_line": 807,
        "comment": "",
        "child_ranges": [
            "(line 803,col 9)-(line 803,col 92)",
            "(line 804,col 9)-(line 804,col 69)",
            "(line 805,col 9)-(line 805,col 66)",
            "(line 806,col 9)-(line 806,col 74)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_MoscowIsCorrect_Spring()",
        "snippet": "    public void test_MoscowIsCorrect_Spring() {\n//      DateTime x = new DateTime(2007, 7, 1, 0, 0, 0, 0, ZONE_MOSCOW);\n//      System.out.println(ZONE_MOSCOW.nextTransition(x.getMillis()));\n//      DateTime y = new DateTime(ZONE_MOSCOW.nextTransition(x.getMillis()), ZONE_MOSCOW);\n//      System.out.println(y);\n        DateTime pre = new DateTime(CUTOVER_MOSCOW_SPRING - 1L, ZONE_MOSCOW);\n        assertEquals(\"2007-03-25T01:59:59.999+03:00\", pre.toString());\n        DateTime at = new DateTime(CUTOVER_MOSCOW_SPRING, ZONE_MOSCOW);\n        assertEquals(\"2007-03-25T03:00:00.000+04:00\", at.toString());\n        DateTime post = new DateTime(CUTOVER_MOSCOW_SPRING + 1L, ZONE_MOSCOW);\n        assertEquals(\"2007-03-25T03:00:00.001+04:00\", post.toString());\n    }\n",
        "begin_line": 815,
        "end_line": 826,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 820,col 9)-(line 820,col 77)",
            "(line 821,col 9)-(line 821,col 70)",
            "(line 822,col 9)-(line 822,col 71)",
            "(line 823,col 9)-(line 823,col 69)",
            "(line 824,col 9)-(line 824,col 78)",
            "(line 825,col 9)-(line 825,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Spring()",
        "snippet": "    public void test_getOffsetFromLocal_Moscow_Spring() {\n        doTest_getOffsetFromLocal(3, 25, 1, 0, \"2007-03-25T01:00:00.000+03:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 1,30, \"2007-03-25T01:30:00.000+03:00\", ZONE_MOSCOW);\n        \n        doTest_getOffsetFromLocal(3, 25, 2, 0, \"2007-03-25T03:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 2,30, \"2007-03-25T03:30:00.000+04:00\", ZONE_MOSCOW);\n        \n        doTest_getOffsetFromLocal(3, 25, 3, 0, \"2007-03-25T03:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 3,30, \"2007-03-25T03:30:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 4, 0, \"2007-03-25T04:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 5, 0, \"2007-03-25T05:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 6, 0, \"2007-03-25T06:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 7, 0, \"2007-03-25T07:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(3, 25, 8, 0, \"2007-03-25T08:00:00.000+04:00\", ZONE_MOSCOW);\n    }\n",
        "begin_line": 828,
        "end_line": 842,
        "comment": "",
        "child_ranges": [
            "(line 829,col 9)-(line 829,col 93)",
            "(line 830,col 9)-(line 830,col 93)",
            "(line 832,col 9)-(line 832,col 93)",
            "(line 833,col 9)-(line 833,col 93)",
            "(line 835,col 9)-(line 835,col 93)",
            "(line 836,col 9)-(line 836,col 93)",
            "(line 837,col 9)-(line 837,col 93)",
            "(line 838,col 9)-(line 838,col 93)",
            "(line 839,col 9)-(line 839,col 93)",
            "(line 840,col 9)-(line 840,col 93)",
            "(line 841,col 9)-(line 841,col 93)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourAcross_Moscow_Spring()",
        "snippet": "    public void test_DateTime_setHourAcross_Moscow_Spring() {\n        DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);\n        assertEquals(\"2007-03-25T00:00:00.000+03:00\", dt.toString());\n        DateTime res = dt.hourOfDay().setCopy(4);\n        assertEquals(\"2007-03-25T04:00:00.000+04:00\", res.toString());\n    }\n",
        "begin_line": 844,
        "end_line": 849,
        "comment": "",
        "child_ranges": [
            "(line 845,col 9)-(line 845,col 73)",
            "(line 846,col 9)-(line 846,col 69)",
            "(line 847,col 9)-(line 847,col 49)",
            "(line 848,col 9)-(line 848,col 70)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourForward_Moscow_Spring()",
        "snippet": "    public void test_DateTime_setHourForward_Moscow_Spring() {\n        DateTime dt = new DateTime(2007, 3, 25, 0, 0, 0, 0, ZONE_MOSCOW);\n        assertEquals(\"2007-03-25T00:00:00.000+03:00\", dt.toString());\n        \n        try {\n            dt.hourOfDay().setCopy(2);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 851,
        "end_line": 861,
        "comment": "",
        "child_ranges": [
            "(line 852,col 9)-(line 852,col 73)",
            "(line 853,col 9)-(line 853,col 69)",
            "(line 855,col 9)-(line 860,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_setHourBack_Moscow_Spring()",
        "snippet": "    public void test_DateTime_setHourBack_Moscow_Spring() {\n        DateTime dt = new DateTime(2007, 3, 25, 8, 0, 0, 0, ZONE_MOSCOW);\n        assertEquals(\"2007-03-25T08:00:00.000+04:00\", dt.toString());\n        \n        try {\n            dt.hourOfDay().setCopy(2);\n            fail();\n        } catch (IllegalFieldValueException ex) {\n            // expected\n        }\n    }\n",
        "begin_line": 863,
        "end_line": 873,
        "comment": "",
        "child_ranges": [
            "(line 864,col 9)-(line 864,col 73)",
            "(line 865,col 9)-(line 865,col 69)",
            "(line 867,col 9)-(line 872,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_MoscowIsCorrect_Autumn()",
        "snippet": "    public void test_MoscowIsCorrect_Autumn() {\n        DateTime pre = new DateTime(CUTOVER_MOSCOW_AUTUMN - 1L, ZONE_MOSCOW);\n        assertEquals(\"2007-10-28T02:59:59.999+04:00\", pre.toString());\n        DateTime at = new DateTime(CUTOVER_MOSCOW_AUTUMN, ZONE_MOSCOW);\n        assertEquals(\"2007-10-28T02:00:00.000+03:00\", at.toString());\n        DateTime post = new DateTime(CUTOVER_MOSCOW_AUTUMN + 1L, ZONE_MOSCOW);\n        assertEquals(\"2007-10-28T02:00:00.001+03:00\", post.toString());\n    }\n",
        "begin_line": 880,
        "end_line": 887,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 881,col 9)-(line 881,col 77)",
            "(line 882,col 9)-(line 882,col 70)",
            "(line 883,col 9)-(line 883,col 71)",
            "(line 884,col 9)-(line 884,col 69)",
            "(line 885,col 9)-(line 885,col 78)",
            "(line 886,col 9)-(line 886,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn()",
        "snippet": "    public void test_getOffsetFromLocal_Moscow_Autumn() {\n        doTest_getOffsetFromLocal(10, 28, 0, 0, \"2007-10-28T00:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 0,30, \"2007-10-28T00:30:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 1, 0, \"2007-10-28T01:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 1,30, \"2007-10-28T01:30:00.000+04:00\", ZONE_MOSCOW);\n        \n        doTest_getOffsetFromLocal(10, 28, 2, 0, \"2007-10-28T02:00:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 2,30, \"2007-10-28T02:30:00.000+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 2,30,59,999, \"2007-10-28T02:30:59.999+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 2,59,59,998, \"2007-10-28T02:59:59.998+04:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 2,59,59,999, \"2007-10-28T02:59:59.999+04:00\", ZONE_MOSCOW);\n        \n        doTest_getOffsetFromLocal(10, 28, 3, 0, \"2007-10-28T03:00:00.000+03:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 3,30, \"2007-10-28T03:30:00.000+03:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 4, 0, \"2007-10-28T04:00:00.000+03:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 5, 0, \"2007-10-28T05:00:00.000+03:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 6, 0, \"2007-10-28T06:00:00.000+03:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 7, 0, \"2007-10-28T07:00:00.000+03:00\", ZONE_MOSCOW);\n        doTest_getOffsetFromLocal(10, 28, 8, 0, \"2007-10-28T08:00:00.000+03:00\", ZONE_MOSCOW);\n    }\n",
        "begin_line": 889,
        "end_line": 908,
        "comment": "",
        "child_ranges": [
            "(line 890,col 9)-(line 890,col 94)",
            "(line 891,col 9)-(line 891,col 94)",
            "(line 892,col 9)-(line 892,col 94)",
            "(line 893,col 9)-(line 893,col 94)",
            "(line 895,col 9)-(line 895,col 94)",
            "(line 896,col 9)-(line 896,col 94)",
            "(line 897,col 9)-(line 897,col 101)",
            "(line 898,col 9)-(line 898,col 101)",
            "(line 899,col 9)-(line 899,col 101)",
            "(line 901,col 9)-(line 901,col 94)",
            "(line 902,col 9)-(line 902,col 94)",
            "(line 903,col 9)-(line 903,col 94)",
            "(line 904,col 9)-(line 904,col 94)",
            "(line 905,col 9)-(line 905,col 94)",
            "(line 906,col 9)-(line 906,col 94)",
            "(line 907,col 9)-(line 907,col 94)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Moscow_Autumn_overlap_mins()",
        "snippet": "    public void test_getOffsetFromLocal_Moscow_Autumn_overlap_mins() {\n        for (int min = 0; min < 60; min++) {\n            if (min < 10) {\n                doTest_getOffsetFromLocal(10, 28, 2, min, \"2007-10-28T02:0\" + min + \":00.000+04:00\", ZONE_MOSCOW);\n            } else {\n                doTest_getOffsetFromLocal(10, 28, 2, min, \"2007-10-28T02:\" + min + \":00.000+04:00\", ZONE_MOSCOW);\n            }\n        }\n    }\n",
        "begin_line": 910,
        "end_line": 918,
        "comment": "",
        "child_ranges": [
            "(line 911,col 9)-(line 917,col 9)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_constructor_Moscow_Autumn()",
        "snippet": "    public void test_DateTime_constructor_Moscow_Autumn() {\n        DateTime dt = new DateTime(2007, 10, 28, 2, 30, ZONE_MOSCOW);\n        assertEquals(\"2007-10-28T02:30:00.000+04:00\", dt.toString());\n    }\n",
        "begin_line": 920,
        "end_line": 923,
        "comment": "",
        "child_ranges": [
            "(line 921,col 9)-(line 921,col 69)",
            "(line 922,col 9)-(line 922,col 69)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusHour_Moscow_Autumn()",
        "snippet": "    public void test_DateTime_plusHour_Moscow_Autumn() {\n        DateTime dt = new DateTime(2007, 10, 27, 19, 0, 0, 0, ZONE_MOSCOW);\n        assertEquals(\"2007-10-27T19:00:00.000+04:00\", dt.toString());\n        \n        DateTime plus6 = dt.plusHours(6);\n        assertEquals(\"2007-10-28T01:00:00.000+04:00\", plus6.toString());\n        DateTime plus7 = dt.plusHours(7);\n        assertEquals(\"2007-10-28T02:00:00.000+04:00\", plus7.toString());\n        DateTime plus8 = dt.plusHours(8);\n        assertEquals(\"2007-10-28T02:00:00.000+03:00\", plus8.toString());\n        DateTime plus9 = dt.plusHours(9);\n        assertEquals(\"2007-10-28T03:00:00.000+03:00\", plus9.toString());\n    }\n",
        "begin_line": 925,
        "end_line": 937,
        "comment": "",
        "child_ranges": [
            "(line 926,col 9)-(line 926,col 75)",
            "(line 927,col 9)-(line 927,col 69)",
            "(line 929,col 9)-(line 929,col 41)",
            "(line 930,col 9)-(line 930,col 72)",
            "(line 931,col 9)-(line 931,col 41)",
            "(line 932,col 9)-(line 932,col 72)",
            "(line 933,col 9)-(line 933,col 41)",
            "(line 934,col 9)-(line 934,col 72)",
            "(line 935,col 9)-(line 935,col 41)",
            "(line 936,col 9)-(line 936,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_minusHour_Moscow_Autumn()",
        "snippet": "    public void test_DateTime_minusHour_Moscow_Autumn() {\n        DateTime dt = new DateTime(2007, 10, 28, 9, 0, 0, 0, ZONE_MOSCOW);\n        assertEquals(\"2007-10-28T09:00:00.000+03:00\", dt.toString());\n        \n        DateTime minus6 = dt.minusHours(6);\n        assertEquals(\"2007-10-28T03:00:00.000+03:00\", minus6.toString());\n        DateTime minus7 = dt.minusHours(7);\n        assertEquals(\"2007-10-28T02:00:00.000+03:00\", minus7.toString());\n        DateTime minus8 = dt.minusHours(8);\n        assertEquals(\"2007-10-28T02:00:00.000+04:00\", minus8.toString());\n        DateTime minus9 = dt.minusHours(9);\n        assertEquals(\"2007-10-28T01:00:00.000+04:00\", minus9.toString());\n    }\n",
        "begin_line": 939,
        "end_line": 951,
        "comment": "",
        "child_ranges": [
            "(line 940,col 9)-(line 940,col 74)",
            "(line 941,col 9)-(line 941,col 69)",
            "(line 943,col 9)-(line 943,col 43)",
            "(line 944,col 9)-(line 944,col 73)",
            "(line 945,col 9)-(line 945,col 43)",
            "(line 946,col 9)-(line 946,col 73)",
            "(line 947,col 9)-(line 947,col 43)",
            "(line 948,col 9)-(line 948,col 73)",
            "(line 949,col 9)-(line 949,col 43)",
            "(line 950,col 9)-(line 950,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_GuatemataIsCorrect_Autumn()",
        "snippet": "    public void test_GuatemataIsCorrect_Autumn() {\n        DateTime pre = new DateTime(CUTOVER_GUATEMALA_AUTUMN - 1L, ZONE_GUATEMALA);\n        assertEquals(\"2006-09-30T23:59:59.999-05:00\", pre.toString());\n        DateTime at = new DateTime(CUTOVER_GUATEMALA_AUTUMN, ZONE_GUATEMALA);\n        assertEquals(\"2006-09-30T23:00:00.000-06:00\", at.toString());\n        DateTime post = new DateTime(CUTOVER_GUATEMALA_AUTUMN + 1L, ZONE_GUATEMALA);\n        assertEquals(\"2006-09-30T23:00:00.001-06:00\", post.toString());\n    }\n",
        "begin_line": 961,
        "end_line": 968,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 962,col 9)-(line 962,col 83)",
            "(line 963,col 9)-(line 963,col 70)",
            "(line 964,col 9)-(line 964,col 77)",
            "(line 965,col 9)-(line 965,col 69)",
            "(line 966,col 9)-(line 966,col 84)",
            "(line 967,col 9)-(line 967,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_getOffsetFromLocal_Guatemata_Autumn()",
        "snippet": "    public void test_getOffsetFromLocal_Guatemata_Autumn() {\n        doTest_getOffsetFromLocal( 2006, 9,30,23, 0,\n                                  \"2006-09-30T23:00:00.000-05:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006, 9,30,23,30,\n                                  \"2006-09-30T23:30:00.000-05:00\", ZONE_GUATEMALA);\n        \n        doTest_getOffsetFromLocal( 2006, 9,30,23, 0,\n                                  \"2006-09-30T23:00:00.000-05:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006, 9,30,23,30,\n                                  \"2006-09-30T23:30:00.000-05:00\", ZONE_GUATEMALA);\n        \n        doTest_getOffsetFromLocal( 2006,10, 1, 0, 0,\n                                  \"2006-10-01T00:00:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 0,30,\n                                  \"2006-10-01T00:30:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 1, 0,\n                                  \"2006-10-01T01:00:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 1,30,\n                                  \"2006-10-01T01:30:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 2, 0,\n                                  \"2006-10-01T02:00:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 2,30,\n                                  \"2006-10-01T02:30:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 3, 0,\n                                  \"2006-10-01T03:00:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 3,30,\n                                  \"2006-10-01T03:30:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 4, 0,\n                                  \"2006-10-01T04:00:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 4,30,\n                                  \"2006-10-01T04:30:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 5, 0,\n                                  \"2006-10-01T05:00:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 5,30,\n                                  \"2006-10-01T05:30:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 6, 0,\n                                  \"2006-10-01T06:00:00.000-06:00\", ZONE_GUATEMALA);\n        doTest_getOffsetFromLocal( 2006,10, 1, 6,30,\n                                  \"2006-10-01T06:30:00.000-06:00\", ZONE_GUATEMALA);\n    }\n",
        "begin_line": 970,
        "end_line": 1009,
        "comment": "",
        "child_ranges": [
            "(line 971,col 9)-(line 972,col 83)",
            "(line 973,col 9)-(line 974,col 83)",
            "(line 976,col 9)-(line 977,col 83)",
            "(line 978,col 9)-(line 979,col 83)",
            "(line 981,col 9)-(line 982,col 83)",
            "(line 983,col 9)-(line 984,col 83)",
            "(line 985,col 9)-(line 986,col 83)",
            "(line 987,col 9)-(line 988,col 83)",
            "(line 989,col 9)-(line 990,col 83)",
            "(line 991,col 9)-(line 992,col 83)",
            "(line 993,col 9)-(line 994,col 83)",
            "(line 995,col 9)-(line 996,col 83)",
            "(line 997,col 9)-(line 998,col 83)",
            "(line 999,col 9)-(line 1000,col 83)",
            "(line 1001,col 9)-(line 1002,col 83)",
            "(line 1003,col 9)-(line 1004,col 83)",
            "(line 1005,col 9)-(line 1006,col 83)",
            "(line 1007,col 9)-(line 1008,col 83)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_plusHour_Guatemata_Autumn()",
        "snippet": "    public void test_DateTime_plusHour_Guatemata_Autumn() {\n        DateTime dt = new DateTime(2006, 9, 30, 20, 0, 0, 0, ZONE_GUATEMALA);\n        assertEquals(\"2006-09-30T20:00:00.000-05:00\", dt.toString());\n        \n        DateTime plus1 = dt.plusHours(1);\n        assertEquals(\"2006-09-30T21:00:00.000-05:00\", plus1.toString());\n        DateTime plus2 = dt.plusHours(2);\n        assertEquals(\"2006-09-30T22:00:00.000-05:00\", plus2.toString());\n        DateTime plus3 = dt.plusHours(3);\n        assertEquals(\"2006-09-30T23:00:00.000-05:00\", plus3.toString());\n        DateTime plus4 = dt.plusHours(4);\n        assertEquals(\"2006-09-30T23:00:00.000-06:00\", plus4.toString());\n        DateTime plus5 = dt.plusHours(5);\n        assertEquals(\"2006-10-01T00:00:00.000-06:00\", plus5.toString());\n        DateTime plus6 = dt.plusHours(6);\n        assertEquals(\"2006-10-01T01:00:00.000-06:00\", plus6.toString());\n        DateTime plus7 = dt.plusHours(7);\n        assertEquals(\"2006-10-01T02:00:00.000-06:00\", plus7.toString());\n    }\n",
        "begin_line": 1011,
        "end_line": 1029,
        "comment": "",
        "child_ranges": [
            "(line 1012,col 9)-(line 1012,col 77)",
            "(line 1013,col 9)-(line 1013,col 69)",
            "(line 1015,col 9)-(line 1015,col 41)",
            "(line 1016,col 9)-(line 1016,col 72)",
            "(line 1017,col 9)-(line 1017,col 41)",
            "(line 1018,col 9)-(line 1018,col 72)",
            "(line 1019,col 9)-(line 1019,col 41)",
            "(line 1020,col 9)-(line 1020,col 72)",
            "(line 1021,col 9)-(line 1021,col 41)",
            "(line 1022,col 9)-(line 1022,col 72)",
            "(line 1023,col 9)-(line 1023,col 41)",
            "(line 1024,col 9)-(line 1024,col 72)",
            "(line 1025,col 9)-(line 1025,col 41)",
            "(line 1026,col 9)-(line 1026,col 72)",
            "(line 1027,col 9)-(line 1027,col 41)",
            "(line 1028,col 9)-(line 1028,col 72)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_minusHour_Guatemata_Autumn()",
        "snippet": "    public void test_DateTime_minusHour_Guatemata_Autumn() {\n        DateTime dt = new DateTime(2006, 10, 1, 2, 0, 0, 0, ZONE_GUATEMALA);\n        assertEquals(\"2006-10-01T02:00:00.000-06:00\", dt.toString());\n        \n        DateTime minus1 = dt.minusHours(1);\n        assertEquals(\"2006-10-01T01:00:00.000-06:00\", minus1.toString());\n        DateTime minus2 = dt.minusHours(2);\n        assertEquals(\"2006-10-01T00:00:00.000-06:00\", minus2.toString());\n        DateTime minus3 = dt.minusHours(3);\n        assertEquals(\"2006-09-30T23:00:00.000-06:00\", minus3.toString());\n        DateTime minus4 = dt.minusHours(4);\n        assertEquals(\"2006-09-30T23:00:00.000-05:00\", minus4.toString());\n        DateTime minus5 = dt.minusHours(5);\n        assertEquals(\"2006-09-30T22:00:00.000-05:00\", minus5.toString());\n        DateTime minus6 = dt.minusHours(6);\n        assertEquals(\"2006-09-30T21:00:00.000-05:00\", minus6.toString());\n        DateTime minus7 = dt.minusHours(7);\n        assertEquals(\"2006-09-30T20:00:00.000-05:00\", minus7.toString());\n    }\n",
        "begin_line": 1031,
        "end_line": 1049,
        "comment": "",
        "child_ranges": [
            "(line 1032,col 9)-(line 1032,col 76)",
            "(line 1033,col 9)-(line 1033,col 69)",
            "(line 1035,col 9)-(line 1035,col 43)",
            "(line 1036,col 9)-(line 1036,col 73)",
            "(line 1037,col 9)-(line 1037,col 43)",
            "(line 1038,col 9)-(line 1038,col 73)",
            "(line 1039,col 9)-(line 1039,col 43)",
            "(line 1040,col 9)-(line 1040,col 73)",
            "(line 1041,col 9)-(line 1041,col 43)",
            "(line 1042,col 9)-(line 1042,col 73)",
            "(line 1043,col 9)-(line 1043,col 43)",
            "(line 1044,col 9)-(line 1044,col 73)",
            "(line 1045,col 9)-(line 1045,col 43)",
            "(line 1046,col 9)-(line 1046,col 73)",
            "(line 1047,col 9)-(line 1047,col 43)",
            "(line 1048,col 9)-(line 1048,col 73)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.test_DateTime_JustAfterLastEverOverlap()",
        "snippet": "    public void test_DateTime_JustAfterLastEverOverlap() {\n        // based on America/Argentina/Catamarca in file 2009s\n        DateTimeZone zone = new DateTimeZoneBuilder()\n            .setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR)\n            .addRecurringSavings(\"SUMMER\", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008,\n                                    'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR)\n            .addRecurringSavings(\"WINTER\", 0, 2000, 2008,\n                                    'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR)\n            .toDateTimeZone(\"Zone\", false);\n        \n        LocalDate date = new LocalDate(2008, 8, 10);\n        assertEquals(\"2008-08-10\", date.toString());\n        \n        DateTime dt = date.toDateTimeAtStartOfDay(zone);\n        assertEquals(\"2008-08-10T00:00:00.000-03:00\", dt.toString());\n    }\n",
        "begin_line": 1055,
        "end_line": 1070,
        "comment": "",
        "child_ranges": [
            "(line 1057,col 9)-(line 1063,col 43)",
            "(line 1065,col 9)-(line 1065,col 52)",
            "(line 1066,col 9)-(line 1066,col 52)",
            "(line 1068,col 9)-(line 1068,col 56)",
            "(line 1069,col 9)-(line 1069,col 69)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange_mockZone()",
        "snippet": "    public void testWithMinuteOfHourInDstChange_mockZone() {\n        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));\n        assertEquals(\"2010-10-31T01:15:00.000+00:30\", cutover.toString());\n        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);\n        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);\n        assertEquals(\"2010-10-31T01:00:00.000+01:00\", pre.toString());\n        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);\n        assertEquals(\"2010-10-31T01:59:00.000+00:30\", post.toString());\n        \n        DateTime testPre1 = pre.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+01:00\", testPre1.toString());  // retain offset\n        DateTime testPre2 = pre.withMinuteOfHour(50);\n        assertEquals(\"2010-10-31T01:50:00.000+00:30\", testPre2.toString());\n        \n        DateTime testPost1 = post.withMinuteOfHour(30);\n        assertEquals(\"2010-10-31T01:30:00.000+00:30\", testPost1.toString());  // retain offset\n        DateTime testPost2 = post.withMinuteOfHour(10);\n        assertEquals(\"2010-10-31T01:10:00.000+01:00\", testPost2.toString());\n    }\n",
        "begin_line": 1085,
        "end_line": 1103,
        "comment": "",
        "child_ranges": [
            "(line 1086,col 9)-(line 1086,col 104)",
            "(line 1087,col 9)-(line 1087,col 74)",
            "(line 1088,col 9)-(line 1088,col 86)",
            "(line 1089,col 9)-(line 1089,col 70)",
            "(line 1090,col 9)-(line 1090,col 70)",
            "(line 1091,col 9)-(line 1091,col 72)",
            "(line 1092,col 9)-(line 1092,col 71)",
            "(line 1094,col 9)-(line 1094,col 53)",
            "(line 1095,col 9)-(line 1095,col 75)",
            "(line 1096,col 9)-(line 1096,col 53)",
            "(line 1097,col 9)-(line 1097,col 75)",
            "(line 1099,col 9)-(line 1099,col 55)",
            "(line 1100,col 9)-(line 1100,col 76)",
            "(line 1101,col 9)-(line 1101,col 55)",
            "(line 1102,col 9)-(line 1102,col 76)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithHourOfDayInDstChange()",
        "snippet": "    public void testWithHourOfDayInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withHourOfDay(2);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", test.toString());\n    }\n",
        "begin_line": 1105,
        "end_line": 1110,
        "comment": "",
        "child_ranges": [
            "(line 1106,col 9)-(line 1106,col 86)",
            "(line 1107,col 9)-(line 1107,col 75)",
            "(line 1108,col 9)-(line 1108,col 50)",
            "(line 1109,col 9)-(line 1109,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithMinuteOfHourInDstChange()",
        "snippet": "    public void testWithMinuteOfHourInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withMinuteOfHour(0);\n        assertEquals(\"2010-10-31T02:00:10.123+02:00\", test.toString());\n    }\n",
        "begin_line": 1112,
        "end_line": 1117,
        "comment": "",
        "child_ranges": [
            "(line 1113,col 9)-(line 1113,col 86)",
            "(line 1114,col 9)-(line 1114,col 75)",
            "(line 1115,col 9)-(line 1115,col 53)",
            "(line 1116,col 9)-(line 1116,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithSecondOfMinuteInDstChange()",
        "snippet": "    public void testWithSecondOfMinuteInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withSecondOfMinute(0);\n        assertEquals(\"2010-10-31T02:30:00.123+02:00\", test.toString());\n    }\n",
        "begin_line": 1119,
        "end_line": 1124,
        "comment": "",
        "child_ranges": [
            "(line 1120,col 9)-(line 1120,col 86)",
            "(line 1121,col 9)-(line 1121,col 75)",
            "(line 1122,col 9)-(line 1122,col 55)",
            "(line 1123,col 9)-(line 1123,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_summer()",
        "snippet": "    public void testWithMillisOfSecondInDstChange_Paris_summer() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2010-10-31T02:30:10.000+02:00\", test.toString());\n    }\n",
        "begin_line": 1126,
        "end_line": 1131,
        "comment": "",
        "child_ranges": [
            "(line 1127,col 9)-(line 1127,col 86)",
            "(line 1128,col 9)-(line 1128,col 75)",
            "(line 1129,col 9)-(line 1129,col 55)",
            "(line 1130,col 9)-(line 1130,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_Paris_winter()",
        "snippet": "    public void testWithMillisOfSecondInDstChange_Paris_winter() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+01:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+01:00\", dateTime.toString());\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2010-10-31T02:30:10.000+01:00\", test.toString());\n    }\n",
        "begin_line": 1133,
        "end_line": 1138,
        "comment": "",
        "child_ranges": [
            "(line 1134,col 9)-(line 1134,col 86)",
            "(line 1135,col 9)-(line 1135,col 75)",
            "(line 1136,col 9)-(line 1136,col 55)",
            "(line 1137,col 9)-(line 1137,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_summer()",
        "snippet": "    public void testWithMillisOfSecondInDstChange_NewYork_summer() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-04:00\", ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.123-04:00\", dateTime.toString());\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2007-11-04T01:30:00.000-04:00\", test.toString());\n    }\n",
        "begin_line": 1140,
        "end_line": 1145,
        "comment": "",
        "child_ranges": [
            "(line 1141,col 9)-(line 1141,col 89)",
            "(line 1142,col 9)-(line 1142,col 75)",
            "(line 1143,col 9)-(line 1143,col 55)",
            "(line 1144,col 9)-(line 1144,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testWithMillisOfSecondInDstChange_NewYork_winter()",
        "snippet": "    public void testWithMillisOfSecondInDstChange_NewYork_winter() {\n        DateTime dateTime = new DateTime(\"2007-11-04T01:30:00.123-05:00\", ZONE_NEW_YORK);\n        assertEquals(\"2007-11-04T01:30:00.123-05:00\", dateTime.toString());\n        DateTime test = dateTime.withMillisOfSecond(0);\n        assertEquals(\"2007-11-04T01:30:00.000-05:00\", test.toString());\n    }\n",
        "begin_line": 1147,
        "end_line": 1152,
        "comment": "",
        "child_ranges": [
            "(line 1148,col 9)-(line 1148,col 89)",
            "(line 1149,col 9)-(line 1149,col 75)",
            "(line 1150,col 9)-(line 1150,col 55)",
            "(line 1151,col 9)-(line 1151,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testPlusMinutesInDstChange()",
        "snippet": "    public void testPlusMinutesInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.plusMinutes(1);\n        assertEquals(\"2010-10-31T02:31:10.123+02:00\", test.toString());\n    }\n",
        "begin_line": 1154,
        "end_line": 1159,
        "comment": "",
        "child_ranges": [
            "(line 1155,col 9)-(line 1155,col 86)",
            "(line 1156,col 9)-(line 1156,col 75)",
            "(line 1157,col 9)-(line 1157,col 48)",
            "(line 1158,col 9)-(line 1158,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testPlusSecondsInDstChange()",
        "snippet": "    public void testPlusSecondsInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.plusSeconds(1);\n        assertEquals(\"2010-10-31T02:30:11.123+02:00\", test.toString());\n    }\n",
        "begin_line": 1161,
        "end_line": 1166,
        "comment": "",
        "child_ranges": [
            "(line 1162,col 9)-(line 1162,col 86)",
            "(line 1163,col 9)-(line 1163,col 75)",
            "(line 1164,col 9)-(line 1164,col 48)",
            "(line 1165,col 9)-(line 1165,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testPlusMillisInDstChange()",
        "snippet": "    public void testPlusMillisInDstChange() {\n        DateTime dateTime = new DateTime(\"2010-10-31T02:30:10.123+02:00\", ZONE_PARIS);\n        assertEquals(\"2010-10-31T02:30:10.123+02:00\", dateTime.toString());\n        DateTime test = dateTime.plusMillis(1);\n        assertEquals(\"2010-10-31T02:30:10.124+02:00\", test.toString());\n    }\n",
        "begin_line": 1168,
        "end_line": 1173,
        "comment": "",
        "child_ranges": [
            "(line 1169,col 9)-(line 1169,col 86)",
            "(line 1170,col 9)-(line 1170,col 75)",
            "(line 1171,col 9)-(line 1171,col 47)",
            "(line 1172,col 9)-(line 1172,col 71)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testBug2182444_usCentral()",
        "snippet": "    public void testBug2182444_usCentral() {\n        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID(\"US/Central\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);\n        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));\n        assertFalse(\"Should be daylight time\", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));\n        \n        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);\n        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);\n        assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());\n        assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());\n        assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());\n        assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));\n        assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());\n        assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));\n        assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());\n    }\n",
        "begin_line": 1175,
        "end_line": 1192,
        "comment": "",
        "child_ranges": [
            "(line 1176,col 9)-(line 1176,col 102)",
            "(line 1177,col 9)-(line 1177,col 80)",
            "(line 1178,col 9)-(line 1178,col 90)",
            "(line 1179,col 9)-(line 1179,col 90)",
            "(line 1180,col 9)-(line 1180,col 125)",
            "(line 1181,col 9)-(line 1181,col 126)",
            "(line 1183,col 9)-(line 1183,col 98)",
            "(line 1184,col 9)-(line 1184,col 98)",
            "(line 1185,col 9)-(line 1185,col 69)",
            "(line 1186,col 9)-(line 1186,col 111)",
            "(line 1187,col 9)-(line 1187,col 105)",
            "(line 1188,col 9)-(line 1188,col 98)",
            "(line 1189,col 9)-(line 1189,col 131)",
            "(line 1190,col 9)-(line 1190,col 98)",
            "(line 1191,col 9)-(line 1191,col 131)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.testBug2182444_ausNSW()",
        "snippet": "    public void testBug2182444_ausNSW() {\n        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID(\"Australia/NSW\"));\n        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);\n        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);\n        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);\n        assertTrue(\"Should be standard time\", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));\n        assertFalse(\"Should be daylight time\", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));\n        \n        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);\n        DateTime australiaNSWDaylightInAusraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);\n        assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());\n        assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());\n        assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());\n        assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));\n        assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());\n        assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));\n        assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());\n    }\n",
        "begin_line": 1194,
        "end_line": 1211,
        "comment": "",
        "child_ranges": [
            "(line 1195,col 9)-(line 1195,col 102)",
            "(line 1196,col 9)-(line 1196,col 80)",
            "(line 1197,col 9)-(line 1197,col 93)",
            "(line 1198,col 9)-(line 1198,col 93)",
            "(line 1199,col 9)-(line 1199,col 125)",
            "(line 1200,col 9)-(line 1200,col 126)",
            "(line 1202,col 9)-(line 1202,col 104)",
            "(line 1203,col 9)-(line 1203,col 103)",
            "(line 1204,col 9)-(line 1204,col 75)",
            "(line 1205,col 9)-(line 1205,col 122)",
            "(line 1206,col 9)-(line 1206,col 116)",
            "(line 1207,col 9)-(line 1207,col 110)",
            "(line 1208,col 9)-(line 1208,col 143)",
            "(line 1209,col 9)-(line 1209,col 108)",
            "(line 1210,col 9)-(line 1210,col 141)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)",
        "snippet": "    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, 0, 0, expected, zone);\n    }\n",
        "begin_line": 1216,
        "end_line": 1218,
        "comment": "-----------------------------------------------------------------------",
        "child_ranges": [
            "(line 1217,col 9)-(line 1217,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)",
        "snippet": "    private void doTest_getOffsetFromLocal(int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(2007, month, day, hour, min, sec, milli, expected, zone);\n    }\n",
        "begin_line": 1220,
        "end_line": 1222,
        "comment": "",
        "child_ranges": [
            "(line 1221,col 9)-(line 1221,col 91)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)",
        "snippet": "    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, String expected, DateTimeZone zone) {\n        doTest_getOffsetFromLocal(year, month, day, hour, min, 0, 0, expected, zone);\n    }\n",
        "begin_line": 1224,
        "end_line": 1226,
        "comment": "",
        "child_ranges": [
            "(line 1225,col 9)-(line 1225,col 85)"
        ]
    },
    {
        "class_name": "org.joda.time.TestDateTimeZoneCutover",
        "child_classes": [],
        "src_path": "src/test/java/org/joda/time/TestDateTimeZoneCutover.java",
        "signature": "org.joda.time.TestDateTimeZoneCutover.doTest_getOffsetFromLocal(int, int, int, int, int, int, int, java.lang.String, org.joda.time.DateTimeZone)",
        "snippet": "    private void doTest_getOffsetFromLocal(int year, int month, int day, int hour, int min, int sec, int milli, String expected, DateTimeZone zone) {\n        DateTime dt = new DateTime(year, month, day, hour, min, sec, milli, DateTimeZone.UTC);\n        int offset = zone.getOffsetFromLocal(dt.getMillis());\n        DateTime res = new DateTime(dt.getMillis() - offset, zone);\n        assertEquals(res.toString(), expected, res.toString());\n    }\n",
        "begin_line": 1228,
        "end_line": 1233,
        "comment": "",
        "child_ranges": [
            "(line 1229,col 9)-(line 1229,col 94)",
            "(line 1230,col 9)-(line 1230,col 61)",
            "(line 1231,col 9)-(line 1231,col 67)",
            "(line 1232,col 9)-(line 1232,col 63)"
        ]
    }
]